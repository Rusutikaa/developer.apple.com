<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_1_r8695:8697" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>(Alternatively, choose Editor &gt; Embed In &gt; Stack View.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または代わりに、Editor &gt; Embed In &gt; Stack Viewを選んでください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Alternatively, choose View &gt; Navigators &gt; Show Project Navigator.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または代わりに、View &gt; Navigators &gt; Show Project Navigatorを選んでください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Alternatively, choose View &gt; Utilities &gt; Show Object Library.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または代わりに、View &gt; Utilities &gt; Show Object Libraryを選びます）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Choose View &gt; Utilities &gt; Show Object Library.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（View &gt; Utilities &gt; Show Object Libraryを選びます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If you try to Control-drag from the image view to your code, you’ll notice that you can’t select Action in the Connection field.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あなたがイメージビューからあなたのコードにコントロールドラッグすることを試みるならば、あなたはConnection欄のActionを選択できないことに気づくでしょう。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(In this case, because you intentionally wrote a failing test case, you’ll just go back and fix your test case.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（この場合は、あなたが意図的にこの失敗するテスト項目を書いたので、あなたは単に戻ってあなたのテスト項目を修正するだけです。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Just make sure the names of the images you use match the image names in the code later.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ただあなたが使う画像の名前が後のコードの中の画像名と一致するようにしてください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The code to set the label to the text in the text field is a bit more involved, so you’ll write that in the next section.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ラベルをテキスト欄の中のテキストに設定するコードは、もう少し込み入っています、それであなたは次のレッスンでそれを書くことになります。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This field is at the bottom of the Size inspector, so you’ll need to scroll down to it.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（この欄は、Sizeインスペクタの下の方にあります、それであなたはそれまで下にスクロールする必要があるでしょう）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(To open it quickly, choose View &gt; Utilities &gt; Show Object Library.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（すばやくそれを開くには、View &gt; Utilities &gt; Show Object Libraryを選びます）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(To uncomment the method, remove the /* and */ characters surrounding it.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（メソッドのコメントを外すには、それを囲んでいる/*と*/文字を削除します。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(You’ll configure MealViewController to display the information from its meal property when it loads.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あなたはMealViewControllerを構成して、それのmealプロパティからの情報をそれがロードされるとき表示します。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// #warning Incomplete implementation, return the number of rows</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（#警告、実装は不完全です、行の数を返してください）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// #warning Incomplete implementation, return the number of sections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（#警告、実装は不完全です、セクションの数を返してください）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Add a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （新しい食事を加える。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Because photo is an optional property of Meal, use conditional cast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （Mealの写真はオプショナルプロパティであるため、条件付きのキャストを使う）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Configure the cell...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（セルを構成する…）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （適切なクラスの新規インスタンスを作成して、それを配列に挿入し、そして新しい行をテーブルビューに加える）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Creates an empty array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（空の配列の作成。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Delete the row from the data source</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （行をデータソースから削除する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Depending on style of presentation (modal or push presentation), this view controller needs to be dismissed in two different ways.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（表現の流儀（モーダルまたはプッシュ表現）に依存して、このビューコントローラは２つの異なる方法で却下される必要があります。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Disable the Save button if the text field is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テキスト欄が空ならばSaveボタンを利用不可能にする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Disable the Save button while editing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（編集の間Saveボタンを利用不可能にする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Dismiss the picker if the user canceled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （ユーザがキャンセルした場合ピッカーを片付ける。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do any additional setup after loading the view, typically from a nib.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（何らかの追加の準備をビューを、大抵はnibからロードした後で行います）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Enable the Save button only if the text field has a valid Meal name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（Saveボタンをテキスト欄が有効なMeal名を持つ場合にのみ使用可能にする）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Failure cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（失敗事例。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Fetches the appropriate meal for the data source layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（データソースレイアウトにきちんと合った食事を取ってくる）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Get the cell that generated this segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（このセグエで生成されたセルを得る）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Get the new view controller using segue.destinationViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （新規ビューコントローラをsegue.destinationViewControllerを使って得てください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Handle the text field’s user input through delegate callbacks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テキスト欄のユーザ入力を委任先コールバックを経由して取り扱います。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Handle the text field’s user input via delegate callbacks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テキスト欄のユーザ入力を委任先コールバック経由で取り扱う）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// If the index of a button is less than the rating, that button should be selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あるボタンのインデックスが格付けより少ないならば、そのボタンは選択されるべき。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// If the index of a button is less than the rating, that button shouldn't be selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （あるボタンのインデックスが格付けより少ないならば、そのボタンは選択されるべきでない。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// In a storyboard-based application, you will often want to do a little preparation before navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ストーリーボードに基づくアプリケーションにおいて、あなたはしばしばナビゲーションの前に少し準備したいでしょう）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Initialization should fail if there is no name or if the rating is negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（初期化は、名前が無いならばまたは格付けが負数ならば、失敗するべきです。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Initialize stored properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（保存プロパティを初期化する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Load any saved meals, otherwise load sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （食事があればロードする、そうでなければ見本データをロードする）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Load the sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （見本データをロードする）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Make sure ViewController is notified when the user picks an image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ユーザが画像を選んだときにViewControllerが通知をうけることを確実にします）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Offset each button's origin by the length of the button plus some spacing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （各ボタンの原点をボタンの長さに間隔を足したものでずらす）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Offset each button's origin by the length of the button plus spacing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（各ボタンの原点をボタンの長さに間隔を足したものでずらす）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Only allow photos to be picked, not taken.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（写真だけが選ばれるようにします、取得はされない）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Override to support conditional editing of the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テーブルビューの条件付きの編集をサポートするためにオーバーライドする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Override to support editing the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テーブルビューの編集をサポートするためにオーバーライドする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Pass the selected object to the new view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（選択されたオブジェクトを新規ビューコントローラに渡してください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Put setup code here. This method is called before the invocation of each test method in the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （準備コードをここに置きます。このメソッドはこのクラスの中の各テストメソッドの発動の前に呼ばれます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Put teardown code here. This method is called after the invocation of each test method in the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （解体コードをここに置きます。このメソッドはこのクラスの中の各テストメソッドの発動の後に呼ばれます）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Put the code you want to measure the time of here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あなたが時間を測定したいコードをここに置きます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Return false if you do not want the specified item to be editable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（指定した項目が編集されるのをあなたが望まないならばfalseを返してください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Save the meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （食事を保存する。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set photoImageView to display the selected image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（photoImageViewを選択された画像を表示するよう設定する。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set the button's width and height to a square the size of the frame's height.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ボタンの幅と高さを配置枠の高さのサイズの正方形に設定する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set the meal to be passed to MealTableViewController after the unwind segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（mealを巻き戻しセグエの後にMealTableViewControllerに渡されるようにする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set up views if editing an existing Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（既存のMealを編集するならばビューを準備する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Success case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（成功事例。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Table view cells are reused and should be dequeued using a cell identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テーブルビューセルは再利用されます、そしてセル識別子を使ってデキューされるべきです。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Tests to confirm that the Meal initializer returns when no name or a negative rating is provided.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（Mealイニシャライザが名前を与えられないか負数の格付けを与えられるとき戻すことを確認するテストを行う）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// The info dictionary contains multiple representations of the image, and this uses the original.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（info辞書は画像の複数の表現を含みます、そしてこれはオリジナルを使います。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This is an example of a functional test case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（これは機能テスト項目の例です。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This is an example of a performance test case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（これは性能テスト項目の例です。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This method lets you configure a view controller before it's presented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（このメソッドは、あなたにビューコントローラをそれが提供される前に構成させます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// UIImagePickerController is a view controller that lets a user pick media from their photo library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（UIImagePickerControllerはビューコントローラで、ユーザに彼らの写真ライブラリからメディアを選ばせます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Uncomment the following line to display an Edit button in the navigation bar for this view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（以下の行のコメントを外すと、このビューコントローラのナビゲーションバーで「編集」ボタンを表示します）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Uncomment the following line to preserve selection between presentations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（以下の行のコメントを外すと、表示間で選択を保護します）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Update an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （既存の食事を更新する。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Use the edit button item provided by the table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （テーブルビューコントローラによって提供される編集ボタン項目を使う）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>App Distribution Guide walks you through the process of provisioning devices for testing and submitting apps to the App Store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「アプリケーションの配布に関するガイド」は、App Storeに向けてアプリを検査して出荷するためにデバイスをプロビジョニングすることについての過程をあなたに説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>App Distribution Quick Start walks you through the process of registering as an Apple developer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>App Distribution Quick Startが、あなたにApple開発者として登録する手順を通して案内します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>App Programming Guide for iOS explains the essential things you must know and do when developing an iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOSアプリケーション プログラミングガイド」は、iOSアプリを開発する時あなたが知っていて行わなければならない本質的な事柄を明らかにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debugging with Xcode teaches you how to thoroughly debug and test your app in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Debugging with Xcodeは、あなたのアプリをXcodeで徹底的にデバッグ及びテストする方法をあなたに教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift Programming Language (Swift 3.0.1) describes everything you need to know about Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Swiftプログラミング言語（Swift 3.0.1）」は、あなたがSwiftについて知っている必要があるすべてのことを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS Human Interface Guidelines teaches you how to make your app consistent with the user interface conventions for iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOS ヒューマンインターフェイス ガイドライン」は、あなたのアプリをiOSのためのユーザインターフェイス取り決めと調和するようにする方法を教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS Technology Overview describes the frameworks and other technologies that are available to your app in iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOS テクノロジーの概要」は、あなたのアプリがiOSで利用可能なフレームワークと他のテクノロシーを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2x is the display resolution for iPhone 6 Simulator that you’re using in these lessons, so the image will look best at this resolution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>2xは、iPhone 6シミュレータ用の画面解像度で、あなたがこのレッスンで使っているものです、それでこの解像度でその画像は最もよく見えるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2x is the display resolution for the iPhone 6 Simulator that you’re using in these lessons, so the image will look best at this resolution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>2xは、iPhone 6シミュレータ用の画面解像度で、あなたがこのレッスンで使っているものです、それでこの解像度でその画像は最もよく見えるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array has a property called count that returns the number of items in the array, so the number of rows is meals.count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Arrayは、countと呼ばれるあるプロパティを持ちます、それは、その配列の中の項目の数を返します、そういうわけで行の数はmeals.countです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MealTableViewCell.swift displays in the editor on the right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewCell.swiftは、エディタの右に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UIViewController methods get called as follows:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>呼び出されるUIViewControllerメソッドは次になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ViewController.swift displays in the editor on the right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftは、エディタの右に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ViewController is now a delegate for nameTextField.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerは、今ではnameTextFieldの委任先です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XCTAssertNil asserts that an object is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XCTAssertNilが表明するのは、あるオブジェクトがnilであるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XCTAssertNotNil tests that the Meal object is not nil after initialization, which means the initializer successfully created a Meal object with the supplied arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XCTAssertNotNilがテストするのは、Mealオブジェクトが初期化の後にnilでないことです、それはイニシャライザがMealオブジェクトを提供された引数を使って成功裏に作成したことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>presentViewController(_:animated:completion:) is a method being called on ViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>presentViewController(_:animated:completion:)は、ViewController上で呼び出されているメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>viewDidAppear()—Intended for any operations that you want to occur as soon as the view becomes visible, such as fetching data or showing an animation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidAppear()—ビューが見えるようになるとすぐに発生することをあなたが望むあらゆる操作のために提供されます、たとえばデータを取ってくる、またはアニメーションを見せるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>viewDidLoad()—Called when the view controller’s content view (the top of its view hierarchy) is created and loaded from a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoad()—ビューコントローラのコンテンツビューが作成されてロードされるときにストーリーボードから呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>viewWillAppear()—Intended for any operations that you want always to occur before the view becomes visible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewWillAppear()—ビューが見えるようになる前に発生することを常にあなたが望むあらゆる操作のために提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject is considered a base class that defines a basic interface to the runtime system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectは、基盤クラスとみなされます、それは基本的なインターフェイスを実行時システムに対して定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSCoding is a protocol that enables a lightweight solution for archiving objects and other structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingは、あるプロトコルです、それは、オブジェクトおよび他の構造物のアーカイブ（保存）に対する軽量な解決策となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RatingControl is a custom view subclass of UIView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControlは、UIViewのカスタムのビュー・サブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UIApplicationMain creates an application object that’s responsible for managing the life cycle of the app and an app delegate object, which is described below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIApplicationMainは、アプリのライフサイクルを管理する責任を負うアプリケーションオブジェクトと、下で説明するアプリデリゲートオブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build your app using Command-B.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをコマンド-Bを使ってビルドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build your project by choosing Product &gt; Build (or pressing Command-B).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのプロパティをProduct &gt; Buildを選ぶこと（またはコマンド-Bを押すこと）によってビルドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build your project by choosing Product &gt; Build.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのプロジェクトをProduct &gt; Buildを選んでビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app in Simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをシミュレータで実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Test your changes by running Simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたの変更をシミュレータを実行することでテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build or run your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをビルドまたは実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Your app runs with the unit test you just wrote.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをあなたが書いたばかりのユニットテストで実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conditional statements, like if and switch, check whether a condition is true—that is, if its value evaluates to the Boolean true—before executing a piece of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>条件文、ifやswitchといったものは、ある条件が真かどうか—すなわち、それの値がブールのtrueに評価されるかどうか—ある区画のコードを実行する前に確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations define a common type for a group of related values and enable you to work with those values in a type-safe way within your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙は、いくらかの関連した値からなるグループのための共通の型を定義して、あなたにそれらの値をある型安全な方法であなたのコードにおいて扱えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start Developing iOS Apps (Swift) is the perfect starting point for creating apps that run on iPhone and iPad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOSアプリ開発を始めよう（Swift）」は、iPhoneおよびIPadで動作するアプリ作成のための非の打ち所のない出発点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures support many of the same behaviors as classes, including methods and initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体は、クラスと同じ挙動の多くを、メソッドやイニシャライザを含めてサポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type casting is a way to check the type of an instance, and to treat that instance as if it’s a different superclass or subclass from somewhere else in its own class hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型キャストは、インスタンスの型を調べるための、そしてそのインスタンスをまるでそれがそれ自身のクラス階層のどこか他からの異なるスーパークラスまたはサブクラスであるかのように扱うための、ひとつの方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UIKit contains useful classes for working with the UI (user interface) layer of your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKitは、役に立つクラスをあなたのアプリのUI（ユーザインターフェイス）層を扱うために含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout Guide teaches you how to create adaptive, versatile user interfaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Cocoa Auto Layout ガイド」は、あなたに適応性のある、融通の利くユーザインターフェイスを作成する方法を教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loops, like for-in and while, execute the same piece of code multiple times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ループ、for-inやwhileといったものは、同じコード区画を複数回実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout is a powerful layout engine that helps you design adaptive layouts with ease.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトは強力なレイアウト機構です、それは、あなたが適応性のあるレイアウトを手軽に設計する手助けをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gesture recognizers are objects that you attach to a view that allow the view to respond to actions the way a control does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザはオブジェクトです、それは、あなたがビューに取り付けてそのビューがコントロールが行うやり方でアクションに応答できるようにするものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outlets provide a way to reference interface objects—the objects you added to your storyboard—from source code files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレットは、インターフェイスオブジェクト—あなたがストーリーボードに加えたオブジェクト—に、ソースコードファイルから言及する方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unit tests are used for testing small, self-contained pieces of code to make sure they behave correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストは、小さな、自己充足のコード断片をテストして、それが正しく振舞うことを確かめるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views display content to the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>おのおののビューは、中身（コンテンツ）を利用者（ユーザ）に表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debug and test your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリのデバッグとテスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn about the technologies available to you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたに利用可能なテクノロジーについて学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn the Swift programming language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftプログラミング言語を学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn to design beautiful app interfaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>美しいアプリインターフェイスの設計を学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn to develop great apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巨大なアプリの開発について学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Register as a developer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>開発者として登録する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ship your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリを出荷する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convenience initializers are secondary, supporting initializers that need to call one of their class’s designated initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>便宜イニシャライザは、二次的な、補助のイニシャライザです、それは、それらのクラスの指定イニシャライザの１つを呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fix-its are provided by the compiler as potential solutions to errors in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの修正は、あなたのコードのエラーに対する見込みある解決策としてコンパイラによって提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View controllers implement your app’s behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラは、あなたのアプリの挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A required keyword next to an initializer indicates that every subclass of the class that has that initializer must implement its own version of the initializer (if it implements any initializer).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるイニシャライザのとなりのrequiredキーワードは、そのイニシャライザを持つクラスのすべてのサブクラスが、そのイニシャライザの独自版を実装しなければならないことを示します（それがなんらかのイニシャライザを実装するならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A switch statement supports any kind of data and a wide variety of comparison operations—it isn’t limited to integers and tests for equality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>switch文は、あらゆる種類のデータと多種多様な比較演算子をサポートします—それは、整数および同等性に対する検査に制限されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A where clause can be added to a case to further scope the conditional statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>where節はある条件に追加されることでその条件文をもっと詳しく調べるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A for-in loop iterates over a sequence, such as ranges of numbers, to execute a set of code multiple times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループは、あるシーケンス（列、一続きのもの）のすべてに渡って繰り返して行きます、例えばある範囲の数などに対して、そうして一組にされたコードを複数回実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment is a piece of text in a source code file that doesn’t get compiled as part of the program but provides context or useful information about individual pieces of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメントは、ソースコード中の一片のテキストです、それはプログラムの一部としてコンパイルされません、しかし状況や役に立つ情報をコードの個々の部分について提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant is a value that stays the same after it’s declared the first time, while a variable is a value that can change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数は、最初にそれが宣言された後はずっと同じでいる値です、それに対して変数は、変化することができる値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A designated initializer does not require any keywords.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定イニシャライザは、どんなキーワードも必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A failable initializer can return nil after initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるイニシャライザは、nilを初期化の後に返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function is a reusable, named piece of code that can be referred to from many places in a program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数は、再利用可能な、名前を付けられた一片のコードで、あるプログラム内の多くの場所から参照されることができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、ある特定の作業または機能性部分の要求にかなうメソッド、プロパティ、そして他の要件の設計図を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Cocoa Touch framework for working with the UI layer of an iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリのUI階層（レイヤ）を扱うためのあるココアタッチフレームワーク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A UI that automatically adjusts so that it looks good in the context of the available screen space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるUI、それは、自動的に調節することで利用可能な画面空間の状況にふさわしく見えるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that’s a child of another class (known as its superclass).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、それは、別のクラス（スーパークラスとして知られるもの）の子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that’s a parent of another class (known as its subclass).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、それは、別のクラス（サブクラスとして知られるもの）の親です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant or variable defined only within a particular, limited scope, like a loop, conditional statement, or function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数または変数で、ある特定の、制限されたスコープ（作用範囲）、例えばループ、条件文、または関数などの内部でのみ定義されるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant, variable, or function defined at the top-level scope of a program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプログラムのトップレベルのスコープで定義される定数、変数、または関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A delegate is an object that acts on behalf of, or in coordination with, another object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先は、別のオブジェクトの代わりを務める、またはそれと連携して役割を果たすオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method that handles the process of preparing an instance of a class, structure, or enumeration for use, which involves setting an initial value for its properties and performing any other required setup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッド、それが取り扱うのは、使用するクラス、構造体、または列挙のインスタンスの準備過程です、それはそれのプロパティの初期値の設定となんらかの他の必須の設定の実行を伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A navigation controller manages transitions backward and forward through a series of view controllers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラは、一続きのビューコントローラの中での前後の場面転換を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A property observer observes and responds to changes in a property’s value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバ（プロパティ監視者）は、監視と応答をあるプロパティの持つ値における変化に対して行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A segue in which one view controller presents another view controller as its child, requiring a user to perform an operation on the presented controller before returning to the main flow of the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるセグエ、そこでは１つのビューコントローラが別のビューコントローラをそれの子として提供して、アプリの主要な流れに戻る前にユーザに提供されたコントロール上で操作を実行することを要求しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A segue that pushes new content on top of the current view controller stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるセグエ、それは新しいコンテンツを現在のビューコントローラスタック（積み重ね）の１番上にプッシュする（積んでいく）ものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A storyboard is a visual representation of the app’s user interface, showing screens of content and the transitions between them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードは、アプリのユーザインターフェイスの視覚による表現です、それはいくつかの画面表示コンテンツとそれらの間の転換を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A storyboard representation of a screen of content in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボード表現でのあなたのアプリのある画面内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view  object that’s located at the top of a view hierarchy, serving as a container for the subviews in its hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューオブジェクト、それは、ビュー階層の最上部に位置して、その階層の中のサブビューの容れ物としての役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view that encloses another view (known as its subview).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビュー、それは、別のビュー（サブビューとして知られるもの）を納めているものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view that is enclosed by another view (known as its superview).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビュー、それは、別のビュー（スーパービューとして知られるもの）に納められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Universal app is one that runs on both iPhone and iPad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Universalアプリは、iPhoneとiPadの両方で動作するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bar that contains information related to a scene in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xストーリーボードの中のあるシーンに関連した情報を含むバー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッド、プロパティ、そして他の要件の設計図、それは、ある特定の作業または一片の機能性を満足させるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button called Item appears where you dragged the bar button item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Itemという名のボタンが、あなたがバーボタン項目（Bar Button Item）をドラッグしたところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button is interactive, so users can tap it to trigger an action that you define.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンはインタラクティブ（ユーザと相互作用するもの）です、なのでユーザはそれをタップしてある動作を引き起こすことができます、その動作はあなたが定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A capability to add functionality to an existing type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機能性を既存の型に追加する能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A category of programming in which the flow of the app is determined by events: system events and user actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プログラミングの１分類、そこにおいてアプリの動作の流れを決定するのは、イベント：システムイベントおよびユーザアクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class can inherit from only one superclass, although that class can inherit from another superclass, and so on, resulting in a class hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスが継承できるのはただ１つのスーパークラスだけからです、とは言えそのクラスは別のスーパークラスから継承できます、等々、結果としてひとつのクラス階層の中にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that inherits behavior from another class is called a subclass of that class, and the parent class is called a superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のクラスから挙動を継承するクラスは、そのクラスのサブクラスと呼ばれます、そして親クラスはスーパークラスと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that’s at the root of its class hierarchy, meaning that it has no superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのクラス階層のルートであるクラス、それがスーパークラスを持たないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that’s passed as a parameter to a method that calls the closure when it finishes executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは、パラメータとしてメソッドに渡されます、そのメソッドは、それが実行を完了したときにそのクロージャを呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment that begins with the characters // MARK: is a special type of comment that’s used to organize your code and to help you (and anybody else who reads your code) navigate through it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字// MARK:で始まるコメントは、コメントの特別な種類で、それが使われるのはあなたのコードを系統立てるためやあなたが（そしてあなたのコードを読む他の誰でも）それを見ていく助けとするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A complementary set of teardown methods exists, as shown in the state transition diagram above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>補完的なひと揃いの解体メソッドが、上の状態推移図で見せたように存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant is referred to as immutable, meaning that it can’t be changed, and a variable is mutable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数は、それが変更不可能であるのを意味する、不変（イミュータブル）なものとして言及されます、そして変数は可変（ミュータブル）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant or variable of a certain class type may actually refer to an instance of a subclass behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特定のクラス型のある定数または変数は、実際には舞台裏でサブクラスのインスタンスを参照しているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A control (UIControl) is a subclass of UIView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロール（UIControl）は、UIViewのサブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A control flow statement that checks whether a condition is true before executing a piece of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある制御流れ文、それは、ある条件が真かどうか、一片のコードを実行する前に調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A control flow statement that executes the same piece of code multiple times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある制御流れ文、それは同じコード断片を複数回実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A cursor appears, letting you enter text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カーソルが現れて、あなたにテキストを入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data model represents the structure of information in an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータモデルは、あるアプリの中の情報の構造を表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data type that defines a group of related values and enables you to work with those values in a type-safe way within your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータ型、それは、関連した値からなるあるグループを定義して、あなたにそれらの値をあなたのコード内で型安全な方法で扱うことを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data type that stores multiple values of the same type in an ordered list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータ型、それは、同じ型の複数の値をある順番付けられたリストにおいて保管します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data type that’s similar to a class, but doesn’t support inheritance and is passed by value instead of by reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータ型、それは、クラスに似ています、しかし継承をサポートしません、そして参照ではなく値として渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A default case is required, unless it’s clear from the context that every possible case is satisfied, such as when the switch statement is switching on an enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>default条件は必須です、しかし全てのありうる条件が満たされることが前後関係から明白である場合は除きます、例えばswitch文がある列挙に関して切替えをしている時など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A design pattern in which one object sends a message to another object when a specific event occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとつのデザインパターン、そこにおいてオブジェクトは、特定のイベントが起こるときメッセージを別のオブジェクトに送ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A feature of Xcode that infers what you’re trying to type from context and provides suggestions that you can select.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるXcodeの機能、それは、あなたがタイプしようとしているのは何か文脈から推測して、あなたが選ぶことができる提案を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A file that contains a visual representation of the app’s UI (user interface), showing screens of content and the transitions between them, that you work on in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるファイル、それは、アプリのもつ視覚表現でのUI（ユーザインターフェイス）を含んでいて、画面内容やそれらの移り変わり（トランジション）を見せるものです、それについてはあなたがインターフェイスビルダーで作業します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A filled-in star counts as a rating; an empty star doesn’t.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>塗りつぶされた星は格付けとして数えられます；空の星はそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function declaration can include zero or more parameters, written as name: Type, which are additional pieces of information that must be passed into the function when it’s called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数宣言は、0以上のパラメーターを含むことができます、それはname: Typeのように書かれ、関数にそれが呼び出される時に渡されなければならない追加の構成情報です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A functioning table view requires three table view data source methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機能するテーブルビューは、３つのテーブルビューデータソースメソッドを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function’s implementation goes inside of a pair of curly braces ({}).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数の実装は、一対の波括弧（{}）の内側に置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A grouping of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの値をグループにしたもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hierarchical representation of views relative to other views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューと他のビューとの関係の階層的表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hierarchical representation of a class’s relationships to its superclass and subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのもつそれのスーパークラスとサブクラスに対する間柄の階層的表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key is simply a string value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーは、単なる文字列値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A label isn’t interactive; it just displays static text in the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルはインタラクティブ（ユーザと相互作用するもの）ではありません；それは単にUIの中の静的な（動きのない、変化しない）テキストです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A layout engine that helps lay out your UI based on the constraints you specify.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるレイアウト機構、それは、あなたのUIのレイアウト（配置）をあなたが指定する制約に基づいて手伝います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A list appears showing each object’s name, description, and visual representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各オブジェクトの名前、説明、そして視覚的表現を示しているリストが現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A menu appears in the location where the drag ended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メニューが、ドラッグが終わったところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A modal view controller doesn’t get added to the navigation stack, so it doesn’t get a navigation bar from the meal list’s navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダルビューコントローラは、ナビゲーションスタックに加えられていません、それでそれはナビゲーションバーを食事リストの持つナビゲーションコントローラから取得していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pane in a storyboard that lets you see a hierarchical representation of the objects in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボード内の枠（ペーン）の一つ、それはあなたのストーリーボード内のオブジェクトの階層的な表現をあなたに見させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pattern of app design in which view controllers serve as the communication pipeline between views and the data model.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリ設計のパターンの１つ、そこにおいてビューコントローラはビューとデータモデルの間の通信パイプランとしての用をなします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code that describes the behavior and properties common to any particular type of object, essentially providing a blueprint for the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるまとまったコード片、それは、なんらかの特定の種類（型）のオブジェクトに共通の挙動やプロパティ（特性）を記述して、そのオブジェクトの設計図を基本的に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code that’s called every time a property’s value is set that’s used to observe and respond to changes in the property’s value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一片のコード、それは、あるプロパティの値が設定されるたびごとに呼ばれます、それは、そのプロパティの値の変化を監視して応答するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code that’s linked to an event that can occur in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一片のコード、それは、あなたのアプリで起こるイベントと連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code written specifically to test a small, self-contained piece of behavior in your app to make sure it behaves correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリにおける小さな、自己充足の断片の挙動をテストして、それが正しく振舞うことを確かめるために特に書かれたコード断片。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of data encapsulated within a class, structure, or enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス、構造体、または列挙の内部にカプセル化される一片のデータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of text in a source code file that doesn’t get compiled as part of the program but provides context or other useful information about individual pieces of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースコードファイル中のあるテキスト断片、それはプログラムの一部としてコンパイルされませんが、前後関係や別の有益な情報をコードの個々の部分について提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A property declaration in a class is written the same way as a constant or variable declaration, except that it’s in the context of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスの中のプロパティ宣言は、定数や変数宣言と同じ方法で記述されます、しかしそれがひとつのクラスの前後関係の中にあることが違います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reference to an object in a storyboard from a source code file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のオブジェクトへのソースコードファイルからの参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A representation of a wildcard in Swift (_).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおけるひとつのワイルドカードの表現（_）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reusable, named piece of code that can be referred to from many places in a program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再利用可能な、名前をつけられたコード片、それはプログラムの多くの場所から参照されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reusable, named piece of code that’s associated with a particular class, structure, or enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再利用できる、名前をつけられたコード断片、それは、特定のクラス、構造体、または列挙と結び付けられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A secondary initializer, which adds additional behavior or customization, but must eventually call through to a designated initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>二次的なイニシャライザ、それは追加の挙動または注文を加えます、しかし最後には指定イニシャライザを呼び出すことに至らなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A selector is an opaque value that identifies the method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタは、メソッドを識別する不透明な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of functions, classes, protocols, and other components that define how pieces of software should interact with each other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとそろいの関数、クラス、プロトコル、および他のコンポーネント、それは、どのようにソフトウェアの断片が互いに相互作用するべきかを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of data types and capabilities designed for Swift and baked into the language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftのために設計され、言語の中へ練り込まれる一揃いのデータ型と能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A shortcut menu titled Action Segue appears in the location where the drag ended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Action Segueとタイトルがついたショートカットメニューが、このドラッグが終わったところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A shortcut menu titled Selection Segue appears in the location where the drag ended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Selection Segue（セグエを選択）とタイトルを付けられるショートカットメニューが、ドラッグが終わったところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A single-line comment appears after two slashes (//) and a multiline comment appears between a set of slashes and asterisks (/* … */).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一行コメントは、２つのスラッシュ（//）の後に現れます、そして複数行コメントは、一組のスラッシュとアスタリスク（/* … */）の間に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A software application that provides a set of tools for software development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるソフトウェアアプリケーション、それは、ソフトウェア開発のためのひとそろいのツールを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized view controller subclass that manages transitions backward and forward through a series of view controllers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特殊化されたビューコントローラサブクラス、それは一続きのビューコントローラの中での前後の場面転換を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized type of view (specifically, an instance of the UIControl class or one of its subclasses) that responds to user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューのある特殊化した型（具体的には、UIControlクラスのインスタンスまたはそれのサブクラスの１つ）、それはユーザ入力に応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specific occurrence of a class (that is, an object), structure, or enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス（すなわち、あるオブジェクト）、構造体、または列挙に属するある特定の存在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stack view provides a streamlined interface for laying out a collection of views in either a column or a row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、簡素化したインターフェースをビューの集まりのレイアウトに対して縦列か横列のどちらかで提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A suggested fix for a compiler error in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにおいてコンパイラエラーに対して提案される修正。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view data source, as implied by its name, supplies the table view with the data it needs to display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるテーブルビューデータソースは、それの名前によってほのめかされるように、そのテーブルビューをそれが表示する必要があるデータとともに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view delegate helps the table view manage cell selection, row heights, and other aspects related to displaying the data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるテーブルビュー委任先は、テーブルビューがセル選択、行の高さ、そして他のデータ表示に関する面を管理するのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view defaults to having a single section, which is just what you need for the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは初期状態では１つだけセクションを持ちます、それはちょうどあなたがFoodTrackerアプリに必要とすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view is managed by a table view controller (UITableViewController), a subclass of UIViewController that’s specialized for handling table view-related logic.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは、テーブルビューコントローラ（UITableViewController）、UIViewControllerのサブクラスによって管理されます、それはテーブルビュー関連のロジックを取り扱うために特殊化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view is one of the things managed by a table view controller, but you want the whole package, so find the table view controller and drag it to the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは、あるテーブルビューコントローラによって管理されるもののうちの１つです、しかしあなたは全部を一括して必要とします、それでテーブルビューコントローラを見つけてそれをキャンバスにドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A text field lets a user type in a single line of text, which you’ll use as the name of a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄は、ユーザにただ１行だけのテキスト、あなたが食事の名前として使うもの、を入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A text field’s delegate communicates with the text field while its text is being edited, and knows when important events occur—such as when a user starts or stops editing text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の委任先は、テキスト欄との通信を、それのテキストが編集されている間に行います、そして重要なイベントが起こったとき—例えばユーザがテキストの編集を始めたり止めたりしたときがわかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tool for debugging and for logging information for debugging purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグするための、そしてデバッグ目的の情報のログを取るためのツール（道具）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tool to manage assets like images that are used by your app as part of its UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリによってUIの一部として使われる画像のような資産（アセット）を管理するためのツール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A transition between two view controllers in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのビューコントローラの間のストーリーボードにおける転換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type can adopt any number of protocols, which appear in a comma-separated list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型は、任意の数のプロトコルを採用することができます、それらはコンマ区切りのリストに並びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type of segue used to implement backward navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後方ナビゲーションを実装するために使われるセグエの１つの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type of file in which you can change and play around with Swift code directly in Xcode and see the immediate results.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある種のファイル、そこにおいてあなたはSwiftコードを変更したり遊んだりが直接にXcodeにおいてできます、そして直に結果を見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user can add a new meal, and remove or edit an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザ（利用者）は新しい食事を加えること、そして既存の食事の削除や編集ができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user might decide not to keep edits to a meal, and want to return to the meal list without saving any changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、ある食事に対する変更を残すことを止めようと決心するかもしれません、そして何ら変更を保存せずに食事リストに戻りたいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user might decide to cancel the addition of a new meal, and return to the meal list without saving anything.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、新しい食事の追加をキャンセルして、何も保存しないで食事リストに戻ることに決めるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that can be both viewed (read) and changed (written).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、眺められること（読み出し）と変更されること（書き込み）の両方が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that can change after it’s been initialized, indicated in Swift by the var keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、それが初期化された後で変更が可能です、Swiftではvarキーワードで示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that can only be viewed (read) but never changed (written).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、眺められること（読み出し）ができますが、決して変更されること（書き込み）ができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that cannot be changed (or mutated) after it’s initialized, like a constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、それが初期化された後、定数のように、変更される（または変化する）ことができないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that contains either an underlying value or nil to indicate that the value is missing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、ある裏に潜んだ値またはその値が見つからないことを示すnilを含みます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that is able to be changed (or mutated) after it’s initialized, like a variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは変更される（または変化させられる）ことが、それが初期化される後で可能です、変数のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that’s initialized once and cannot change, indicated in Swift by the let keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは一度だけ初期化されます、そして変更されることが出来ず、Swiftにおいてletキーワードによって示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value you pass in to a function, method, or initializer to satisfy one of its parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが関数、メソッド、またはイニシャライザに渡して、それのパラメータの１つを満たすもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view can have multiple subviews and only one superview.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューは、複数のサブビューと１つだけのスーパービューを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view controller manages a single content view with its hierarchy of subviews.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューコントローラは、１つだけのコンテンツビューをそれのサブビュー階層とともに管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view displays content, whereas a control is used to modify it in some way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューはコンテンツを表示します、それに対してコントロールはそれをある方法で修正するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A way to check the type of an object, and to treat that object as if it’s a different superclass or subclass from somewhere else in its own class hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトの型を確認するための、そしてそのオブジェクトがまるでそれ自身のクラス階層の中のどこか他の別のスーパークラスまたはサブクラスであるかのように扱うための方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>About the Lessons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンについて</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above the addSubview(button) line, add this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>addSubview(button)行の上で、これを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above your table view you should now see extra space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテーブルビューの上部で、あなたは今では余分な空間を見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above “Spacing to nearest neighbor,” click the two horizontal constraints and the top vertical constraint to select them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の方の「Spacing to nearest neighbor（すぐ隣との間隔）」で、２つの水平制約と上部の垂直制約をクリックして、それらを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above “Spacing to nearest neighbor,” click the two horizontal constraints to select them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の「Spacing to nearest neighbor」で、２つの水平制約をクリックしてそれらを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above, you’re doing the same thing, except you’re creating the connection in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上で、あなたはは同じことをしています、違うのはあなたがコードにおいて接続を作成していることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Buttons to the View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンをビューに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Images to Your Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプロジェクトに画像を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Properties for Spacing and Number of Stars</seg>
      </tuv>
      <tuv lang="JA">
        <seg>星の間隔と数に対するプロパティを加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Star Images to the Buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>星の画像をボタンに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a for-in loop around the last four lines, like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループを最後の４行を囲むように加えてください、このように；</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a Meal Photo</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の写真を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a Segue to Navigate Forward</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエを加えて前へナビゲートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a call to checkValidMealName() at the implementation to make sure the Save button is disabled until a user enters a valid name:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>checkValidMealName()への呼び出しを実装に加えることで、ユーザが有効な名前を入力するまでSaveボタンが利用不可であるのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add an else clause that sets a different greeting if optionalName is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのelse節を加えてください、それは異なる挨拶をoptionalNameがnilならば設定するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add code at the beginning of the method, before the rest of the template implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの冒頭、残りのひな形実装の前にコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following code at the end of the implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードをこの実装の終わりに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following comment and lines of code to the testMealInitialization() test:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコメントとコード行をtestMealInitialization()テストに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following comment and lines of code to the testMealInitialization() test:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコメントとコード行をtestMealInitialization()テストに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following line of code to dismiss the image picker:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコード行を加えて、イメージピッカーを片付けてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following lines of code to the testMealInitialization() test:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコード行をtestMealInitialization()テストに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add these lines of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this code to create an image picker controller:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを加えることでイメージピッカーコントローラを作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this code to set the image picker controller’s delegate to ViewController:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを加えることでイメージピッカーコントローラの委任先をViewControllerに設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this line of code to set the selected image in the image view outlet that you created earlier:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行を加えて、選択された画像をあなたが以前に作成したイメージビューアウトレットの中に設定してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this line to call the superclass’s initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行を加えてスーパークラスのイニシャライザを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add, move, and resize UI elements in a storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中でUI要素の追加、削除、そしてリサイズ（大きさ変更）をする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding an item, on the other hand, is a modal operation—the user performs an action that’s complete and self-contained, and then returns from that scene to the main navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある項目を加えることは、別の面から言えば、モーダルな操作です—ユーザは完全で自己充足なひとつの動作を実行します、そしてそれからそのシーンから主要ナビゲーションに戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adopt Auto Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトを採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After Meal, add a colon (:) and NSObject to subclass from the NSObject class:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealの後で、コロン（:）とNSObjectを加えて、NSObjectクラスのサブクラスにしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After NSObject, add a comma (,) and NSCoding to adopt the NSCoding protocol:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectの後で、コンマ（,）とNSCodingを加えて、NSCodingプロトコルを採用してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After UIImagePickerControllerDelegate, add a comma (,) and UINavigationControllerDelegate to adopt the protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIImagePickerControllerDelegateの後に、１つのコンマ（,）とUINavigationControllerDelegateを加えてください、それでこのプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After UITextFieldDelegate, add a comma (,) and UIImagePickerControllerDelegate to adopt the protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateの後に、１つのコンマ（,）とUIImagePickerControllerDelegateを加えてください、それでこのプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After UIViewController, add a comma (,) and UITextFieldDelegate to adopt the protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewControllerの後に、コンマ（,）とUITextFieldDelegateを加えてそのプロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After Xcode finishes building your project, Simulator starts automatically.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeがあなたのプロジェクトのビルドを終了した後、シミュレータは自動的に始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After an image picker controller is presented, its behavior is handed off to its delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージピッカーコントローラが提供されてから後は、それの挙動はそれの委任先に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After creating the Meal objects, add them to the meals array using this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらのMealオブジェクトの作成の後で、それらをmeals配列にこのコードを使って加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing the code inside the switch case that matched, the program exits from the switch statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合致した切替条件の内部のコードを実行後、プログラムはswitch文から抜け出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After importing UIKit, you can use Swift syntax with UIKit types and with their methods, properties, and so on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKitをインポートした後、あなたはSwift構文をUIKit型で、そしてそれらのメソッド、プロパティ、などで使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the if statement, add an else clause and wrap it around the last four lines in the method, like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文の後で、else節を加えて、このメソッドの最後の4行をそれで包んでください、このように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the meals.removeAtIndex(indexPath.row) line, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>meals.removeAtIndex(indexPath.row)行の後で、以下のコードを加える：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the if statement, add an else clause and move the call to loadSampleMeals() inside of it:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文の後で、else節を加えてloadSampleMeals()への呼び出しをそれの内側に移動してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the line you just added, add the following if statement, and move the line that calls dismissViewControllerAnimated inside of it:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが加えだばかりの行の後で、以下のif文を加えてください、そしてdismissViewControllerAnimatedを呼び出している行をそれの内側に移動してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the second line of code (navigationItem.leftBarButtonItem = editButtonItem()), add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のコード行（navigationItem.leftBarButtonItem = editButtonItem()）の後で、以下のif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After you do that, the template implementation looks like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれをした後、ひな形実装はこのように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After you go through a lesson, you can download the project and check your work against it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが１つのレッスンを潜り抜けた後、あなたはそのプロジェクトをダウンロードして、あなたの仕事をそれと照合することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, Xcode adds the necessary code to ViewController.swift to store a pointer to the label and configures the storyboard to set up that connection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再び、Xcodeは必要なコードをViewController.swiftに加えることでラベルへのポインタを保管します、そしてストーリーボードを修正することでこの接続を確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, you want to get rid of hardcoded values wherever possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ふたたび、あなたは変更されないようにコードに書かれた値を可能なところはどこであろうと取り除くべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All other views that you place in this scene will be subviews of this content view (although they themselves can have nested subviews).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのシーンの中に置いた他の全てのビューは、このコンテンツビューのサブビューになります（けれどもそれら自身が入れ子にされたサブビューを持つことができます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All test cases should pass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのテスト項目がパスするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All view controller objects in iOS are of type UIViewController or one of its subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSにおける全てのビューコントローラオブジェクトは、型UIViewControllerまたはそれのサブクラスの１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All view objects in iOS are of type UIView or one of its subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSでの全てのビューオブジェクトは、型UIViewまたはそれのサブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allow Editing of Existing Meals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の食事を編集させる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, choose Product &gt; Run (or press Command-R).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>または代わりに、Product &gt; Runを選んでください（またはCommandキー + R）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, double-click the AppDelegate.swift file to open it in a separate window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいは、AppDelegate.swiftファイルをダブルクリックしてそれを独立したウインドウで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, select Stack View in the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>または代わりに、Stack Viewをアウトランビューにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, swipe left on a cell to expose the Delete button quickly; this behavior is built into table views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、あるセル上でスワイプして、Deleteボタンを素早く露出してください；この挙動は、テーブルビューに組み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it’s not written explicitly, this method is executed on an implicit self object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>と言ってもそれは明示的には書かれません、このメソッドは暗黙的なselfオブジェクトで実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although taking an app from a simple concept to the App Store isn’t a small task, the process and practices you’ve learned in this document will guide you in the right direction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリを単純な概念からApp Storeまでもっていくのは小さな作業ではありませんが、あなたがこの文書で学んだ手順と慣行はあなたを正しい方向へ導くでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the scene is connected to ViewController.swift, that’s not the only connection that needs to be made.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーンはViewController.swiftに接続されると言っても、それはこの接続だけではなく作成されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the template comes with the didReceiveMemoryWarning() method, you won’t need to implement it in these lessons, so go ahead and delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このひな形がdidReceiveMemoryWarning()メソッドを備えると言っても、あなたはこれらのレッスンにおいてそれを実装する必要はありません、それで前へ進みそれは削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although this isn’t significant for the action you’re creating right now, it’s important to remember for later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは今あなたが作成しているアクションにとって重大な意味を持ちませんが、それは重要なので後のために覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although this lesson is the extent of playgrounds you’ll work with for now, remember that they can be a powerful tool in app development for anything from debugging, to visualizing complex code, to rapid prototyping.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とは言えこのレッスンは、さしあたりあなたが扱う程度のプレイグラウンドです、それがアプリ開発において何でも、デバッグから複雑なコードの視覚化、素早い試作までの強力なツールであることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although this scene doesn’t do much yet, the basic user interface is there and functional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーンはまだ多くのことをしていないとは言え、基本的なユーザインターフェースはここにあって機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although you don’t need to do anything in this method if you’re adding a new meal instead of editing an existing one, it’s useful to log what’s going on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが新しい食事を加えていて既存のものを編集するのではないならば、あなたはこのメソッドにおいて何もする必要がないけれども、それは何が起こっているか記録するのに便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although you have the text field in your scene, there’s no instruction to the user about what to enter in the field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはテキスト欄をあなたのシーンに持つにもかかわらず、ユーザに対してその欄に何を入力するかの指示がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although your data model code builds, you haven’t fully incorporated it into your app yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータモデルコードがビルドされたとは言え、あなたはまだそれをあなたのアプリに完全に組み入れてはいません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An if statement checks whether a certain condition is true, and if it is, the if statement evaluates the code inside the statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文は、特定の条件が真かどうか調べます、そしてそうであるならば、if文はその文の内部のコードを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An else clause can be used to chain if statements together, or it can stand on its own, in which case the else clause is executed if none of the chained if statements evaluate to true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節はif文を一緒につなげるために使われることができます、またそれはそれだけでも有効です、その場合にはelse節はつなげられたif文が１つもtrueに評価されないならば実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An implicitly unwrapped optional is an optional that can also be used like a nonoptional value, without the need to unwrap the optional value each time it’s accessed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的アンラップオプショナルはオプショナルです、それでいて非オプショナルの値と同じように使用できます、それにアクセスするたびにオプショナル値をアンラップする必要なしにです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object is an instance of a class, which can be thought of as a blueprint for that object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトは、あるクラスのひとつのインスタンス（実例、事例、ある場合）です、そしてクラスはそのオブジェクトの設計図として考えられることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An initializer is a method that prepares an instance of a class for use, which involves setting an initial value for each property and performing any other setup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザは、ひとつのメソッドです、それは使うためのクラスのインスタンスを用意します、そしてそれは各プロパティに対する初期値の設定および何か他の準備を伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An action (or an action method) is a piece of code that’s linked to an event that can occur in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアクション（またはアクションメソッド）は、あるコード断片です、それはあなたのアプリで発生可能なイベントと連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array is a data type that keeps track of an ordered collection of items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列は、あるデータ型です、それはいくらかの項目の順番付けられたあるコレクションの最新状態を把握します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An initializer that could return nil after initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化の後にnilを返すことが可能なイニシャライザ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのひとつのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object in your app (specifically, an instance of the AppDelegate class) that creates the window where your app’s content is drawn and that provides a place to respond to state transitions within the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリの中のオブジェクトのひとつ（具体的には、AppDelegateクラスのインスタンス）、それはあなたのアプリのコンテンツ（内容）が描画されるところのウインドウを作成します、およびそれはそのアプリ内の状態の移り変わりに反応する部位を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object in your app that’s responsible for managing the life cycle of the app, communicating with its delegate, the app delegate, during state transitions within the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリのオブジェクトのひとつ、それは、アプリのライフサイクル管理に対して、それのデリゲート、アプリデリゲートとの通信に対して、アプリ内の状態の移り変わりの間を通して責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that acts on behalf of, or in coordination with, another object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、別のオブジェクトに代わって、またはそれと連携して役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that is first to receive many kinds of app events, including key events, motion events, and action messages, among others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、特にキーイベント、モーションイベント、そしてアクションイベントを含めた、多くの種類のアプリイベントを最初に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that manages a set of views and coordinates the flow of information between the app’s data model and the views that display that data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、ひとそろいのビューを管理して、アプリのデータモデルとそのデータを表示するビューとの間の情報の流れを調整します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that manages the app’s data model, providing a view object with the information it needs to display that data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それはアプリのデータモデルを管理して、ビューオブジェクトをそれがそのデータを表示するのに必要とする情報とともに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that you attach to a view that allows the view to respond to actions the way a control does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、あなたがビューに取り付けて、そのビューがコントロールが行うやり方でアクションに応答できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that’s used to construct your UI and display content to the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、あなたのUIを組み立てるのに使われて中身（コンテンツ）をユーザに示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional that can also be used like a nonoptional value, without the need to unwrap the optional value each time it is accessed, because it’s assumed to always have a value after that value is initially set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプショナル、それはまた、非オプショナル値のように、そのオプショナル値をそれがアクセスされるたびにアンラップする必要なしに使われることが可能なものです、なぜならそれがある値をその値が最初に設定された後に常に持つとみなされるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unwind segue moves backward through one or more segues to return the user to an existing instance of a view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエは、後ろへと１つ以上のセグエを通り抜けて移動して、ユーザをあるビューコントローラの既存のインスタンスに戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An additional piece of information that must be passed into a function, method, or initializer when it’s called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加的な一片の情報、それは、関数、メソッド、またはイニシャライザが呼び出される時にそれに渡されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An app in Xcode that simulates the behavior and appearance of running an app on a device.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeのアプリのひとつ、それは、ある機器上でのあるアプリの実行の挙動や外観をシミュレートします（擬似的に作り出します）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An area in Xcode that displays inspectors, such as the Attributes inspector, Identity inspector, and Size inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの１区画、それは、インスペクタを表示します、例えば属性インスペクタ、同一性インスペクタ、そしてサイズインスペクタなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An area in Xcode that displays one of the ready-to-use libraries of resources for your project, like the Object library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの１区画、それはあなたのプロジェクト用の即時利用可能なリソースのライブラリの１つを表示します、例えばオブジェクトライブラリのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An area in Xcode that displays the inspector pane and library pane.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの１区画、それは、インスペクタ枠とライブラリ枠を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An empty image view doesn’t have an intrinsic content size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のイメージビューは固有コンテンツサイズを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An event processing loop that you use to schedule work and coordinate the receipt of incoming events in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イベント処理ループ、あなたはそれを使って、あなたのアプリの作業予定を立て、やってくるイベントの受け取りの調整をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An image picker controller manages a UI for taking pictures and for choosing saved images to use in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージピッカーコントローラは、あなたのアプリで使用するために画像の取得または保存された画像の選択をするためのUIを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An image set represents a single image asset, but can contain different versions of the image to display at different screen resolutions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットはただ１つだけ画像資産を表示します、しかし異なるバージョンの画像を含むことで異なる画面解像度で表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An image view isn’t a control, so it’s not designed to respond to input in the same way that a control—such as a button—responds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューは、コントロールではありません、それでそれは—ボタンのような—コントロールが応答するのと同じ方法で入力に応答するように設計されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An initializer written like this is known as a failable initializer, which means that it’s possible for the initializer to return nil after initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このように書かれるイニシャライザは、失敗できるイニシャライザとして知られます、それが意味するのは、イニシャライザが初期化の後にnilを返せるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inspector that you use to customize visual attributes of a UI element in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスペクタのひとつ、あなたはそれを使って、ストーリーボードの中のUIの視覚的属性を好みに合わせて変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inspector that you use to edit properties of an object in a storyboard related to that object’s identity, such as what class the object belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるインスペクタ、あなたはそれを使ってストーリーボードの中のオブジェクトのプロパティを、そのオブジェクトの同一性（アイデンティティ）に関して編集します、例えばどのクラスにそのオブジェクトが帰属するかなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inspector that you use to edit the size and position of a UI element in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのインスペクタ、それは、あなたがストーリーボードの中のUI要素の大きさと位置を編集するために使うものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of the UIViewController class (and its subclasses) comes with a set of methods that manage its view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewControllerクラス（およびそれのサブクラス）のあるオブジェクトは、ひと揃いのメソッドを備えていて、それらはそれのビュー階層を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (!) placed after an optional value to access its underlying value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値の後に置かれて、それの内在する値にアクセスするようにする演算子（!）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (...) that lets you create a range of numbers that includes both the lower and upper values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（...）、それは、あなたにある数の範囲を、下部と上部の値の両方を含めて作成させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (..&lt;) that lets you create a range of numbers that includes the lower but not the upper value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（..&lt;）、それは、あなたにある範囲の数を作成させます、それは低い方を含みますが高い方の値は含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (===) that tests whether two object references both refer to the same object instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（===）、それは２つのオブジェクトオブジェクト参照が両方とも同じインスタンスに言及するかを試験します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (??) placed between two values, a ?? b, that unwraps an optional a if it contains a value, or returns a default value b if a is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（??）で２つの値の間、a ?? bに置かれます、それはオプショナルaをそれが値を含むならばアンラップします、またはaがnilならば値bを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (as!) that attempts a downcast and force-unwraps the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（as!）、それはダウンキャストとその値の強制アンラップを試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (as?) that attempts a downcast and returns the result as an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（as?）、それはダウンキャストを試みてその結果をオプショナル値として返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional value either contains a value or contains nil (no value) to indicate that a value is missing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値は、ある値を含むかまたはnil（値なし）を含んで値が見つからないことを示すかどちらかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And just as you need a text field delegate when you work with a text field, you need an image picker controller delegate to work with an image picker controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてまさにテキスト欄を扱うときにあなたがテキスト欄委任先を必要としたように、イメージピッカーコントローラを扱うのにあなたはイメージピッカーコントローラ委任先を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your init?(coder:) initializer should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてあなたのinit?(coder:)イニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your loadSampleMeals() method should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのloadSampleMeals()メソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your tableView(_:commitEditingStyle:forRowAtIndexPath:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてあなたのtableView(_:commitEditingStyle:forRowAtIndexPath:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your textFieldDidEndEditing(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてあなたのtextFieldDidEndEditing(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Anticipate object behavior based on the UIView/UIControl class hierarchy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト挙動をUIView/UIControlクラス階層に基づいて先取りする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any additional setup work that uses methods, getters, or setters can also be done at this point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの追加の準備作業、メソッド、ゲッター、またはセッターを使うものは、またこの時点で行われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any object can serve as a delegate for another object as long as it conforms to the appropriate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どんなオブジェクトでも、それが適切なプロトコルに準拠しさえすれば、他のオブジェクトの委任先としての務めを果たすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any type that satisfies the requirements of a protocol is said to conform to that protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコルの要件を満たすすべての型は、そのプロトコルに準拠すると呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Archived objects can be stored on disk and retrieved at a later time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブされたオブジェクトは、ディスクに保管され後で取り出されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays start at index 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列はインデックス0で始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a convenience initializer, this initializer is required to call one of its class’s designated initializers before completing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>便宜イニシャライザであるので、このイニシャライザは、作業を完了する前にそれのクラスの指定イニシャライザの一つを呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result of the text field becoming first responder, iOS displays the keyboard and begins an editing session for that text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がファーストレスポンダになることの結果として、iOSはキーボードを表示してそのテキスト欄のために編集セッション（期間）を始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, it’s hard to tell whether you’ve implemented everything correctly, and if you might encounter edge cases that you haven’t considered at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その結果、あなたが何もかもを正しく実装したかどうか、そしてあなたが考慮しなかったエッジケース（特殊な事例）に実行時に出くわしすことがあるかは、知り難いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As before, Xcode adds a navigation controller and shows the navigation bar at the top of the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前と同じように、Xcodeはナビゲーションコントローラを加えてナビゲーションバーを食事シーンの上部に表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As implied by their name, it’s important to keep unit tests modular.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その名前でほのめかされるように、ユニットテストのモジュール化を保つことは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As is the case with most selectable elements in a storyboard, you can use the Attributes inspector to edit a segue’s attributes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のほとんどの選択可能な要素と同じく、あなたはAttributesインスペクタを使ってセグエの属性を編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the constant name isPresentingInAddMealMode indicates, this means that the meal scene was presented using the Add button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数名isPresentingInAddMealModeが示すように、これはその食事シーンがAddボタンを使って表されたことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the initializer’s arguments, you pass in the values of the constants you created while archiving the saved data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザの引数として、あなたは、保存された値をアーカイブしている間にあなたが作成した定数の値を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you build more complex apps, you’ll be dealing with more scenes, and will need to manage loading and unloading views as they’re moved on and off the screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがより複雑なアプリを作るにつれて、あなたはもっとシーンを取り扱っているでしょう、そしてビューのロードとアンロードをそれらが画面に現れたり隠れたりするときに管理する必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you create each button, you add it to the ratingButtons array to keep track of it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが各ボタンを作成するとき、あなたはそれをratingButtons配列に加えてそれの最新の状態を把握するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you did when you first added the rating control, you need to update the control’s intrinsic content size so that the stack view can layout your control correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが最初に格付けコントロールを加えた時にしたように、あなたはそのコントロールの固有コンテンツサイズを更新する必要があります、それでスタックビューはあなたのコントロールを正確に配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you keep the MVC pattern in mind for rest of the app’s design, it’s time to take your basic UI to the next level, and create a final layout for the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのアプリの設計の残りに向けてMVCパターンを心に留めておくなら、あなたの基本UIを次のレベルに持っていき、食事シーンのための最終的なレイアウトを作成するときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you learned earlier, you’re actually building an adaptive interface that scales for different sizes of iPhone and iPad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが以前に学んだように、あなたは実際には適応インターフェースを作成しています、それは異なる大きさのiPhoneやiPadに対応するように縮尺設計されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you make your way through the lessons and build the app, you’ll learn about concepts in iOS app development, gain a deeper understanding of the Swift programming language, and familiarize yourself with the many valuable features of Xcode, Apple’s integrated development environment (IDE).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがレッスンを通して歩を進めこのアプリを作成するにつれ、あなたはiOSアプリ開発における概念について学び、Swiftプログラミング言語のより深い理解を獲得し、そしてAppleの統合開発環境（IDE）である、Xcodeの多くの価値ある特徴に精通するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you might guess, this code sets the label’s text property to Default Text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが考えたように、このコードはラベルのtextプロパティを「Default Text」に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you prepare to implement navigation in the FoodTracker app, you need to delete and replace a few pieces of code and UI that you won’t need anymore.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがFoodTrackerアプリにおいてナビゲーションを実装する準備をする際に、あなたが必要とするのはいくつかのコード部分とUIを削除し置き換えることです、それはあなたがもう必要としないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you see in the assistant editor, the text field doesn’t look quite right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアシスタントエディタで見ると、テキスト欄はあまりよくは見えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you see, unit testing helps catch errors in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが見たように、ユニットテストはあなたのコードのエラーをとらえる助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you see, you call a method using the dot syntax.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが見る通り、あなたはメソッドをドット構文を使って呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you walk through the rest of the lessons, it helps to have a basic understanding of how Swift interacts with Cocoa Touch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoa Touchは、あなたがアプリをiOSのために開発するのに使うAppleフレームワーク一式のことです。あなたが残りのレッスンを進んでいくとき、どのようにSwiftがCocoa Touchと相互作用するかの基本的な理解を持つのは助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At runtime, your storyboard will create an instance of ViewController, your custom view controller subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行時に、あなたのストーリーボードはViewControllerのインスタンス、あなたのあつらえのビューコントローラサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the beginning of the first if statement, add this if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のif文の始まりで、このif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the end of the initializer, add this if statement to check for invalid values and return nil if one of them is found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザの終わりでこのif文を加えて不正な値か検査してそれらの１つが見つからないならばnilを返してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the end of the lesson, you’ll be able to:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの終わりに、あなたが出来るようになるのは：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the end of the lesson, you’ll have a complete navigation scheme and interaction flow for the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの終わりには、あなたはアプリのための完全なナビゲーションの枠組みと相互作用の流れを獲得するしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of each view hierarchy is a content view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各ビュー階層の最上部にはコンテンツビューがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, the storyboard in your app contains one scene, which represents a screen of content in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのアプリのストーリーボードは１つのシーン（場面）を含んでいます、それはあなたのアプリのコンテンツの画面のひとつを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you can go back to the action method you defined, selectImageFromPhotoLibrary(_:), and finish its implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはあなたの定義したアクションメソッド、selectImageFromPhotoLibrary(_:)に戻って、それの実装を完了することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you have a data model for a meal: the Meal class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはある食事に対するデータモデル：Mealクラスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you have a way of resetting the label to a default value, and now you’ll add behavior to set it to the value in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはラベルを省略時の値にリセットする方法を持ちます、そして今度はあなたはそれをテキスト欄の値に設定する挙動を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you may see an Xcode warning related to the fact that there’s no way to reach the meal scene in the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたは、このアプリの中の食事シーンに到達する方法がないという事実に関連したXcodeの警告を見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you won’t be making any more changes to your layout, so it’s time to make sure everything looks great with Auto Layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたは何かさらに変更をあなたのレイアウトにすることはありません、それですべてのものが素晴らしく見えるのを確実にするために自動レイアウトを使う時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your ViewController.swift code should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのViewController.swiftコードはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your init?(name:photo:rating:) initializer should look something like the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのinit?(name:photo:rating:)イニシャライザは以下のもののように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your custom table view controller subclass, MealTableViewController, has a mutable array that’s prepopulated with some sample meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのカスタムテーブルビューコントローラサブクラス、MealTableViewControllerは、可変の配列を１つ持ちます、それはいくつかの見本の食事が入れられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your scene should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのシーンはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you’re ready to start developing your first full-featured app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはあなたの最初の完全な機能を持ったアプリの開発を始める用意ができています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you’ve got the basics of a custom UIView subclass, called RatingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたは基本的なカスタムUIViewサブクラス、RatingControlと呼ばれるものを手に入れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attach a tap gesture recognizer (UITapGestureRecognizer) to the image view, which will recognize when a user has tapped the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タップジェスチャリコグナイザ（UITapGestureRecognizer）をイメージビューに取り付けます、それは、ユーザがイメージビューをタップしたときを認識します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attributes inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributes（属性）インスペクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的な型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because MealTableViewController is a subclass of UITableViewController, the template implementation comes with a skeleton for prepareForSegue(_:sender:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewControllerはUITableViewControllerのサブクラスであるので、ひな形実装はprepareForSegue(_:sender:)のための骨格を備えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because ViewController will be in charge of presenting the image picker controller, it also needs to adopt the UINavigationControllerDelegate protocol, which simply lets ViewController take on some basic navigation responsibilities.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>なぜならViewControllerは、イメージピッカーコントローラに起こっていることを管理することになるからです、それはまたUINavigationControllerDelegateプロトコルに準拠することもまた必要とします、それは単純にViewControllerがいくつかの基本的なナビゲーション責務を持つようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a meal will always have a name and rating, but might not have a photo, you can make the UIImage an optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある食事は常に名前と格付けを持つでしょう、しかし写真は持たないかもしれないことから、あなたはUIImageをオプショナルにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a view’s visibility may be toggled or obscured by other views, this method is always called immediately after the content view appears onscreen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューの可視性が他のビューによって切り替えられたり（オンオフ）弱められたりする（ぼやかし）かもしれないことからこのメソッドは常にコンテンツビューが画面上に現れた直後に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a view’s visibility may be toggled or obscured by other views, this method is always called immediately before the content view appears onscreen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューの可視性が他のビューによって切り替えられたり（オンオフ）弱められたりする（ぼやかし）かもしれないことから、このメソッドは常にコンテンツビューが画面上に現れる直前に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because downcasting can fail, the type cast operator comes in two different forms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが失敗する可能性があることから、型キャスト演算子は２つの異なる形式となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the meal property on MealViewController is an optional and you set your initializer up to fail if there’s no name, the Meal object doesn’t get created and added to the meal list—which is what you expect to happen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController上のmealプロパティがオプショナルであり、あなたが名前なしでは失敗するようにあなたのイニシャライザを設定したので、Mealオブジェクトは作成されず食事リストに加えられません—これはあなたが起こることを期待するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the array may or may not have been stored, it’s possible that the downcast will fail, in which case the method should return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この配列が格納されるかもしれないし、されないかもしれないことから、ダウンキャストは失敗する可能性があります、その場合このメソッドはnilを返すはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the initializer now might return nil, you need to indicate this in the initializer signature.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザは今ではnilを返すかもしれないので、あなたに必要なのは、これをイニシャライザシグネチャにおいて示すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the other initializer you defined on the Meal class, init?(name:photo:rating:), is a designated initializer, its implementation needs to call to its superclass’s initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealクラスであなたが定義する他のイニシャライザ、init?(name:photo:rating:)は指定イニシャライザであることから、それの実装はそれのスーパークラスのイニシャライザを呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the return value of decodeIntegerForKey is Int, there’s no need to downcast the decoded value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeIntegerForKeyの戻り値がIntであることから、復号化された値をダウンキャストする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the text field will no longer be the active object in the app, events need to get routed to a more appropriate object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がもはやアプリにおいて能動的なオブジェクトでないことから、イペントはより適したオブジェクトへ向けられる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the user, rather than the developer, is in control of when certain pieces of the app code get executed, you want to identify exactly which actions a user can perform and what happens in response to those actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>開発者ではなくユーザがいつアプリのコードの特定の部分が実行されるようにするかを制御するので、あなたは、厳密にどのアクションがユーザに実行可能かそして何がそれらのアクションへの応答において起こるかを明確にする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the “Constrain to margins” checkbox is selected, the stack view in this case will be constrained to the left, right and top margins of its superview, leaving a small amount of room from the edge of the screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Constrain to margins」チェックボックスが選択されているため、この場合のスタックビューは、それのスーパービューの左、右、そして上方余白に対して制約されていて、画面の端から小さな量の余裕が残ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because this method returns a Boolean value, returning the value true indicates that the text field should respond to the user pressing the Return key by dismissing the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは１つのブール値を返すので、値trueを返すことは、このテキスト欄がユーザがリターンキーを押すことにキーボードを片付けることによって応答しなければならないことを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you based your project on an Xcode template, the basic app environment is automatically set up for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Xcodeひな形をもとにあなたのプロジェクトを構築したので、基本的なアプリ環境は自動的にあなたの代わりに準備されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you created a custom cell class that you want to use, downcast the type of the cell to your custom cell subclass, MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは使いたいと望むカスタムセルクラスを作成したので、セルの型をあなたのカスタムセルサブクラス、MealTableViewCellにダウンキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you don’t need to do anything else, you indicate that you don’t need to execute a completion handler by passing in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは何もする必要はないので、あなたが完了ハンドラを実行する必要がないことをnilを渡すことによって示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you haven’t written any performance-heavy code, you’ll only want to write functional tests for now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが何ら性能上重いコードを書いていないので、あなたはただ機能テストだけを今のところ書きたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you now have two view controllers in your project, it makes sense to give ViewController.swift a more meaningful name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは現在２つのビューコントローラをあなたのプロジェクトの中に持つため、ViewController.swiftにより理解しやすい名前を与えるほうが賢明です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you set button frames in layoutSubviews(), you no longer need to set them when you create the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれらのボタン配置枠をlayoutSubviews()において設定したので、あなたはもはやそれらをあなたがボタンを作成するときに設定する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you want to unwind back to the meal list scene, you need to add an action method with this format to MealTableViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは食事リストシーンへと巻き戻し帰りたいので、あなたに必要なのはこの形式を使ったアクションメソッドをMealTableViewController.swiftに加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because your buttons have images now, it’s time to remove the background color.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのボタンは今では画像を持つので、背景色を取り除くときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you’ll be using this view in your storyboard, start by overriding its superclass’s implementation of the init?(coder:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのビューをあなたのストーリーボードの中で使うことになるので、それのスーパークラスのもつinit?(coder:)イニシャライザ実装をオーバーライドすることによって始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you’re using a navigation controller with a show segue, the backward navigation is handled for you, and a back button automatically appears in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがナビゲーションコントローラを表示セグエとともに使っいてるので、後方へのナビゲーションはあなたに代わって取り扱われます、そして戻るボタンが自動的に食事シーンに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before creating a segue, you need to configure your scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエの作成の前に、あなたは、あなたのシーンを構成することを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before the addSubview(button) line, add this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>addSubview(button)行の前に、これを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before the app finishes launching, you’ll briefly see a launch screen with your app’s name, FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリが起動を終えた後、あなたはちょっとの間あなたのアプリの名前、FoodTrackerのついた起動画面を見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の波括弧（}）の前に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before you can display dynamic data in your table view cells, you need to create outlet connections between the views in your storyboard and the code that represents the table view cell in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的データをあなたのテーブルビューセルの中に表示するまでに、あなたが必要とするのは、アウトレット接続をあなたのストーリーボードのビューとテーブルビューセルをMealTableViewCell.swiftで表しているコードとの間に作成することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the class line in MealTableViewController.swift, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftの中のclass行の下に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the class line, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>class行の下に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the encodeWithCoder(_:) method, add the following initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder(_:)メソッドの下で、以下のイニシャライザを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the imagePickerControllerDidCancel(_:) method, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerControllerDidCancel(_:)メソッドの下に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the nameTextField.delegate line, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nameTextField.delegate行の下で、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the ratingControl outlet in MealViewController.swift, add the following property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいてratingControlアウトレットの下に、以下のプロパティを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the self.rating = rating line, add a call to the superclass’s initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>self.rating = rating行の下で、スーパークラスのイニシャライザに対する呼び出しを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the spacing property, add another property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>spacingプロパティの下で、もう１つのプロパティを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the super.viewDidLoad() line, add a blank line and the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.viewDidLoad()行の下で、空白行を１つと以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the super.viewDidLoad() line, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.viewDidLoad()行の下で、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the textFieldDidBeginEditing(_:) method, add another method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textFieldDidBeginEditing(_:)メソッドの下で、別のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment that says // Delete the row from the data source, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// Delete the row from the data sourceと述べているコメントの下で、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment you just added, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがたった今加えたコメントの下に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add a new unit test:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下に、新しいユニットテストを加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのコメントの下に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add this method skeleton:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下に、このメソッド骨組みを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add this method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメントの下で、このメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, start typing init.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下で、initの入力を始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the existing properties, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のプロパティの下で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the import statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインポート文の下で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the last line, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の行の下に、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous line, add another if statement (nested inside the first one):</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以前の行の下で、もう１つのif文を加えてください（最初のものの内部に入れ子にされる）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous line, add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前のコードの下で、以下のif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous line, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前の行の下に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous line, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前の行の下で、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous line, add this line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前の行の下に、このコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the properties, add this code to declare an initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティの下で、このコードを加えてイニシャライザを宣言してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below this line, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行の下に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build a Basic UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的なUIを作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build the Basic UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本となるUIを造る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Building the UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIを作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bundle Identifier: This value is automatically generated based on your product name and organization identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バンドル識別子：この値は、自動的にあなたの製品名と組織識別子に基づいて生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But even though you added all the necessary UI elements to your table view cells, they’re showing up empty, just like before.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたがすべての必要なUI要素をあなたのテーブルビューセルに加えたとしても、それらは空で現れています、ちょうど前のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But first, you need to do a little bit of configuration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかし最初に、あなたが必要とするのは、ちょっとした構成を行うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But how do you quickly test whether the data saved successfully?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしどうやってあなたは、データがうまく保存されたか素早くテストするのでしょうか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But if it’s nil, the operator the returns the empty string ("") instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしそれがnilならば、この演算子は空の文字列（""）をその代わりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But if you change myString to be something that can’t be converted to an integer, possibleInt becomes nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたがmyStringを整数に変換されることができない何かに変えるならば、possibleIntはnilになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But if you click Save, instead of overwriting the existing meal, the app adds a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたがSaveをクリックするならば、既存の食事を上書きする代わりに、アプリは新しい食事を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But table views with a large number of rows display only a small fraction of their total items at a given time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかし多数の行を持つテーブルビューは、それらの項目全体のほんの一部しか一度に表示しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But to get the specific behavior you want, you’ll need to implement two of these methods for now:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたが望む特定の挙動を得るには、さしあたりあなたはそれらのメソッドのうちの２つを実装する必要があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But what happens if you try to create a Meal with incorrect values, like an empty name or a negative rating? You’ll need to return nil to indicate that the item couldn’t be created, and has set to the default values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがMealを不正な値、空の名前や負数の格付けなどで作成しようとするならば、何が起こるでしょうか？あなたが必要になるのはnilを返すことでその項目が作成されることができなかったと示すこと、そして省略時の値に設定されるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But when you look at the scene on the canvas, you’ll notice that it doesn’t have the exact dimensions of the iPhone 6 screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたがこのシーンをキャンバス上で見る時、あなたはそれがiPhone 6の画面の正確な寸法を持たないことに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But why are the UI elements you added nested under View, that is, inside another view?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしなぜあなたが加えたUI要素がビューの下に、すなわち別のビューの内部に、入れ子にされるのでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But you can take this a step further and keep users from accidentally trying to add meals without a name by disabling the Save button while they’re typing a meal name, and checking that they’ve specified a valid name before letting them dismiss the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたはこれを１段先に進めて、ユーザが間違えて食事を名前なしで加える試みをしないようにできます、それは彼らが食事名をタイプしている間Saveボタンを使用不能にすること、そして彼らが有効な名前を指定したことを彼らにキーボードを片付けさせる前にチェックすることによってです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By adopting the protocol, you gave the ViewController class the ability to identify itself as a UITextFieldDelegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロトコルに準拠することによって、あなたがViewControllerクラスに与えたのは、それ自身をUITextFieldDelegateとして識別できるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, UITableViewController and its subclasses adopt the necessary protocols to make the table view controller both a data source (UITableViewDataSource protocol) and a delegate (UITableViewDelegate protocol) for its associated table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期時様態で、UITableViewControllerとそれのサブクラスは必要なプロトコルに準拠することで、テーブルビューコントローラをそれの関連データビューに対するデータソース（UITableViewDataSourceプロトコル）と委任先（UITableViewDelegateプロトコル）の両方にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, a Swift file imports the Foundation framework so you can work with Foundation data structures in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、SwiftファイルはFoundationフレームワークをインポートします、それであなたはFoundationデータ構造をあなたのコードにおいて扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By making meals a variable (var) instead of a constant, you make the array mutable, which means you can add items to it after you initialize it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mealsを定数ではなく変数（var）にすることで、あなたはこの配列を可変にします、それはあなたがそれを初期化した後にそれに項目を加えることができることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By responding to user actions and populating views with content from the data model, controllers serve as a gateway for communication between the model and views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザアクションへ応答することとビューをデータモデルからのコンテンツで満たすことによって、コントローラはモデルとビューの間の通信の関門の役目をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call a function by following its name with a list of arguments (the values you pass in to satisfy a function’s parameters) in parentheses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数をその名前の後に引数（あなたが関数のパラメーターの条件を満たすように渡す値）のリストを丸括弧の中に続けることで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the initializer of the superclass, NamedShape.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラス、NamedShapeのイニシャライザを呼び出す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cancel a New Meal Addition</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事の追加のキャンセル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cancel an Edit to an Existing Meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の食事への編集のキャンセル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change number to a different integer value to see how that affects which line prints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>numberを異なる整数値に変更してどの行を出力するかにそれがどう作用するかを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change optionalName to nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>optionalNameをnilに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the tableView(_:numberOfRowsInSection:) data source method to return the appropriate number of rows, and remove the warning comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>tableView(_:numberOfRowsInSection:)データソースメソッドを適切な行の数を返すように変更して、警告コメントを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the class name to MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス名をMealViewControllerに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the import statement to import UIKit instead of Foundation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポート文を変更してUIKitをFoundationの代わりにインポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the last line of code to this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードの最後の行をこれに変更してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the rest of the method to use the buttonSize constant instead of 44:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドの残りを変更してbuttonSize定数を44の代わりに使ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the return value from 0 to 1, and remove the warning comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り値を0から1に変えてください、そして警告コメントを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changing the value of properties defined by the superclass, NamedShape.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラス、NamedShapeによって定義されるプロパティの値を変更する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose unwindToMealList: from the shortcut menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このショートカットメニューからunwindToMealList:を選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Editor &gt; Canvas &gt; Show Bounds Rectangles to show the bounds of the elements in the UI, making it easier to align elements in the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editor &gt; Canvas &gt; Show Bounds Rectanglesを選択することでUIの中の要素の境界線を示して、簡単にテーブルセルの中の要素を整列できるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose File &gt; New &gt; File (or press Command-N).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>File &gt; New &gt; Fileを選んでください（またはコマンド-Nを押します）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose show from the Action Segue menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>showをAction Segueメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose show from the Selection Segue menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>showをSelection Segueメニューから選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes inherit their behavior from their parent class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスは、それらの挙動をそれらの親クラスから継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes and Initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスとイニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes aren’t the only ways to define data types in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスは、Swiftにおいてデータ型を定義する唯一の方法ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes store additional information about themselves in the form of properties, and define their behavior using methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスたちは、それら自身についての付加情報をプロパティの形式で保管します、そしてそれらの挙動をメソッドを使って定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes, structures, and enumerations adopt a protocol by listing its name after their name, separated by a colon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス、構造体、そして列挙は、１つのプロトコルを採用し、その名前をそれらの名前の後にコロンで区切って列記することによってそうします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clean Up the Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトの掃除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Connect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Connectをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Createをクリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Get and then click Install App.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「入手」をクリックしてそれから「アプリをインストール」をクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Add button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Addボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar near the top right corner of Xcode to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeツールバーのAssistantボタンをXcodeの一番上右隅でクリックして、アシスタントエディタを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar near the top right corner of Xcode to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeツールバーのAssistantボタンをXcodeの１番上右隅近くでクリックして、アシスタントエディタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AssistantボタンをXcodeツールバーにおいてクリックしてアシスタントエディタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AssistantボタンをXcodeツールバーにおいてクリックしてアシスタントエディタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Resolve Auto Layout Issues icon, and choose Reset to Suggested Constraints to have Xcode update your interface with a valid set of constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Resolve Auto Layout Issues（自動レイアウトの問題の解決）アイコンをクリックしてください、そしてReset to Suggested Constraints（提案された制約に戻す）を選んでXcodeにあなたのインターフェイスを有効な制約一式でアップデートさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Run button to run the unit test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行ボタンをクリックしてユニットテストを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Run button, located in the top-left corner of the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Run（実行）ボタンをクリックしてください、Xcodeツールバーの一番上左の角にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the error fix-it to add a question mark (?) to the end of the init keyword in the initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラー修正（Fix-it）をクリックして疑問符（?）をイニシャライザの中のinitキーワードの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the error fix-it to include the required keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーの修正（Fix-it）をクリックして、requiredキーワードを含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the third star to change the rating to 3, for example.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、３番目の星をクリックして格付けを３に変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clicking any of the buttons at this point should still call ratingButtonTapped(_:) and change the button images appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのどれかをクリックするとこの時点では依然としてratingButtonTapped(_:)が呼び出されます、そしてボタン画像は適切に変化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clicking any of the buttons at this point should still call ratingButtonTapped(_:) and log the message to the console, but your buttons don’t change images yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのどれかをクリックすることはこの時点では依然としてratingButtonTapped(_:)を呼び出してメッセージをコンソールに記録します、しかしあなたのボタンは画像をまだ変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clicking any of the buttons at this point should still call ratingButtonTapped(_:) and log the message to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのどれかをクリックすることはこの時点ではまだratingButtonTapped(_:)を呼び出してメッセージをコンソールに記録するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cocoa Touch</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ココアタッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code comments like this provide helpful hints and contextual information in source code files, but you don’t need them for this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このようなコードコメントは、ソースコードファイルにおいて役に立つヒントと前後関係的な情報を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Configure the Navigation Bar for the Scenes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーをシーンのために構成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Gesture Recognizer to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Image View to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Rating Control to the View Controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールをビューコントローラに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Table Cell UI to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルセルUIをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the UI to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the UI to Source Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIをソースコードと接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the table view cell in your scene to the custom cell subclass you just created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンの中のテーブルビューセルを、あなたがたった今作成したカスタムセルサブクラスに接続しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control Flow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>制御の流れ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the Cancel button on your canvas to the code display in the editor on the right, stopping the drag at the line just below the // MARK: Navigation comment in MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のCancelボタンから右のエディタの中のコード表示へコントロール-ドラッグして、MealViewController.swiftの中の// MARK: Navigationコメントのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the Save button on your canvas to the code display in the editor on the right, stopping the drag at the line just below your ratingControl property in MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のSaveボタンから右のエディタのコード表示までコントロール-ドラッグして、あなたのMealViewController.swiftの中のratingControlプロパティのすぐ下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the Set Default Label Text button on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のSet Default Label Textボタンから右のエディタのコード表示までコントロール-ドラッグして、あなたがまさにViewController.swiftに加えたコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the button to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのボタンから食事シーンまでコントール-ドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the gesture recognizer in the scene dock to the code display in the editor on the right, stopping the drag at the line below the // MARK: Actions comment in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーンドックのジェスチャリコグナイザから右のエディタのコード表示へコントロール-ドラッグして、ViewController.swiftの中の// MARK: Actionsコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the image view on your canvas to the code display in the editor on the right, stopping the drag at the line just below the nameLabel property in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のイメージビューから右のエディタの中のコード表示へコントロール-ドラッグして、MealTableViewCell.swiftの中のnameLabelプロパティのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the image view on your canvas to the code display in the editor on the right, stopping the drag at the line just below the existing outlets in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のイメージビューから右のエディタの中のコード表示へコントロール-ドラッグして、ViewController.swiftの中の既存のアウトレットのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the label on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のラベルから右のエディタのコード表示までコントロール-ドラッグして、あなたが今ViewController.swiftに加えたコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the label on your canvas to the code display in the editor on the right, stopping the drag at the line just below your nameTextField property in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のラベルから右のエディタのコード表示までコントロール-ドラッグして、あなたのViewController.swiftの中のnameTextFieldプロパティのすぐ下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the rating control on your canvas to the code display in the editor on the right, stopping the drag at the line below the photoImageView property in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上の格付けコントロールから右のエディタの中のコード表示へコントロール-ドラッグして、ViewController.swiftの中のphotoImageViewプロパティの下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the rating control on your canvas to the code display in the editor on the right, stopping the drag at the line just below the photoImageView property in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上の格付けコントロールから右のエディタの中のコード表示へコントロール-ドラッグして、MealTableViewCell.swiftの中のphotoImageViewプロパティのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the table view cell to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのテーブルビューセルから食事シーンへとコントロール-ドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the text field on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のテキスト欄から右のエディタのコード表示までコントロール-ドラッグして、あなたがまさにViewController.swiftに加えたコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convenience initializers are secondary initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>便宜イニシャライザは、二次的なイニシライザです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create Outlets for UI Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UI要素のアウトレットを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Custom View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムビューの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Data Model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデルの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Gesture Recognizer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a New Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいプロジェクトの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Table View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a project in Xcode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトをXcodeで作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a structure</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create an Image Picker to Respond to User Taps</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージピッカーを作成してユーザタップに応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create an Unwind Segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create an instance of a class—an object—by putting parentheses after the class name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのあるひとつのインスタンス—あるオブジェクト—を丸括弧をそのクラス名の後に置くことで作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create and associate custom source code files with elements in a storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムソースコードを作成してストーリーボードの要素と結びつける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create and design a custom table view cell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタム（あつらえの）ビューセルの作成と設計</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create arrays using brackets ([]), and access their elements by writing the index in brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列を角括弧（[]）を使って作成してください、そして角括弧の中にインデックスを書くことによってそれらの要素にアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a data model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデルの作成 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a second storyboard scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つ目のストーリーボードを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create segues between view controllers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラ間のセグエ（遷移）を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create the Opening Scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>冒頭のシーンを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create outlet and action connections between UI elements in a storyboard and source code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のUI要素とソースコードの間のアウトレットおよびアクション接続</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, the FoodTracker app gives users the ability to add a new meal to a list of meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>目下、FoodTrackerアプリは、ユーザに新しい食事を食事リストに加える能力を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data persistence is one of the most important and common problems in iOS app development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データの永続は、iOSアプリ開発における最も重要で一般的な問題の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decide whether you’d like to enable developer mode and follow the prompts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが開発者モードを有効にしたいかどうかを決めてプロンプトに従ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare a Constant for the Button Size</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンサイズ用に定数を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default cell styles are great for a lot of situations, but you have more content to display in each of your cells than the default styles allow, so you’ll need to define a custom cell style.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時のセルスタイルは多くの状況に最適です、しかしあなたは各セルに表示する内容を省略時のスタイルが許すよりもっとたくさん持ちます、それであなたはカスタム（あつらえの）セルビューを定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define Your Data Model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータモデルの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define a custom class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムクラスを定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define an Action to Perform</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行されるアクション（動作）の定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the // Configure the cell comment and add this code in its place:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// Configure the cellコメントを削除してこのコードをその場所に加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the line of code that sets the background color to red:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行を削除してください、それは背景色を赤に設定します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the line that sets the text property of the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルのテキストプロパティを設定する行を削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the two lines of comments, and replace them with this if statement and else clause:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのコメント行を削除してください、そしてそれらをif文とelse節で置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Demonstrate a conceptual understanding of the difference between failable and nonfailable initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるそして失敗できないイニシャライザの間の違いの概念的理解を実地にうつす</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Design Custom Table Cells</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムテーブルセル設計</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Designated initializers are the primary initializers for a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定イニシャライザは、あるクラスの主要なイニシャライザです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Determine implicit types and find additional information using Xcode’s quick help shortcut (Option-click)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeのクイックヘルプ・ショートカット（Option-クリック）を使った暗黙の型の判定と更なる情報の発見</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Developer mode allows Xcode access to certain debugging features without requiring you to enter your password each time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>開発者モードは、特定のデバッグ機能をXcodeが毎回あなたのパスワード入力をあなたに要求せずに利用できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Devices: Universal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバイス（機器）：共通</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Differentiate between a constant and a variable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数と変数の区別がつく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Differentiate between classes, structures, and enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス、構造体、そして列挙の間の区別がつく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Differentiate between functions, methods, and initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数、メソッド、そしてイニシャライザの間の区別がつく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Differentiate between optionals and implicitly unwrapped optionals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルと暗黙的アンラップオプショナルの区別がつく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Differentiate between push and modal navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プッシュナビゲーションとモーダルナビゲーションの間の違いがわかる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Disable Saving When the User Doesn't Enter an Item Name</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが項目名を入力しないとき保存できないようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dismiss a view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラをかたづける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dismiss view controllers based on their presentation style</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラをそれらの表現形式に基づいて片付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display a Default Photo</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期写真を表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display dynamic data in a table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的なデータをテーブルビューで表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display the Custom View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムビューの表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display the Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Document Revision History</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文書改定履歴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t be overwhelmed by all of the pieces; each area is described in more detail when you need to use it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの部分部分の全てに圧倒されないで；各区画はあなたがそれを使う必要があるときにより詳細に説明されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t worry; you’ll add navigation behavior in the next lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>心配はいりません；あなたは、次のレッスンにおいてナビゲーション挙動を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the button and type Set Default Label Text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このボタンをダブルクリックしてSet Default Label Textとタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the folder name and rename it Rating Images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フォルダ名をダブルクリックして、それの名前をRating Imagesに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the folder name and rename it Sample Images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フォルダ名をダブルクリックしてそれをSample Imagesに改名してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it emptyStar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットの名前をダブルクリックして、その名前をemptyStarに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it filledStar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットの名前をダブルクリックして、その名前をfilledStarに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it to defaultPhoto.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セット名をダブルクリックして、それをdefaultPhotoに名前変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it to a name you’ll remember when you’re writing it in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その画像セット名をダブルクリックしてそれをある名前、あなたがコードに書く時思い出せるもの、に改名してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the label and type Meal Name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルをダブルクリックしてMeal Nameと入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the navigation bar in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事リストシーンにおいてダブルクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the navigation bar in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事シーンにおいてダブルクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the latest version of Xcode on your Mac free from the App Store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最新版のXcodeをご自由にAppストアからあなたのMacにダウンロードしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Bar Button Item object from the Object library to the far left of the navigation bar in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Bar Button Itemオブジェクトをオブジェクトライブラリからナビゲーションバーの左端へと食事シーンにおいてドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Bar Button Item object from the list to the far right of the navigation bar in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Bar Button Itemオブジェクトをこのリストから食事リストシーンのナビゲーションバーのずっと右へドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Button object from the Object library to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Buttonオブジェクトをオブジェクトライブラリからあなたのシーンへドラッグします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Label object from the Object library to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルオブジェクトをオブジェクトライブラリからあなたのシーンにドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Table View Controller object from the list and drop it on the canvas to the left of the existing meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Table View Controllerオブジェクトをこの一覧からドラッグして、それをキャンバス上で既にある食事シーンの左にドロップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Tap Gesture Recognizer object from the Object library to your scene, and place it on top of the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tap Gesture Recognizerオブジェクトをオブジェクトライブラリからあなたのシーンにドラッグします、そしてそれをイメージビューの上に配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Text Field object from the Object library to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Text Fieldオブジェクトをオブジェクトライブラリからあなたのシーンへとドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag an Image View object from the Object library to your scene so that it’s in the stack view below the button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Image Viewオブジェクトをオブジェクトライブラリからあなたのシーンへドラッグして、それがスタックビューの中のボタンの下になるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag and drop the image into the 2x slot in the image set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その画像を画像セットの2xの挿入位置にドラック＆ドロップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag and drop the images into Simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その画像をシミュレータへドラッグ＆ドロップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag and resize the image view so that it’s square, flush against the left, top, and bottom of the cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをドラッグおよびサイズ調節して、それが正方形で、セルの左、上、そして下に対してくっつくようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag another Bar Button Item object from the Object library to the far right of the navigation bar in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう１つのBar Button Itemオブジェクトをオブジェクトライブラリからナビゲーションバーの右端へと食事シーンにおいてドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the navigation controller between the meal list and the meal scene down so you can see the new segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラを食事リストと食事シーンの間でドラッグして引き下げてください、それであなたは新しいセグエを見れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the storyboard entry point from the meal scene to the table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードエントリポイントを食事シーンからテーブルビューコントローラにドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the button so that it’s right below the text field and aligned with the left margin in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのボタンをドラッグして、それがテキスト欄のすぐ下、シーンの左端にそろうようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the label so that it’s close to the right side of the image view and aligned with the top margin in the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのラベルをドラッグして、それがイメージビューの右側に近接して、テーブルセルの上余白に合うようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the label so that it’s right above the text field and aligned with the left margin in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのラベルをドラッグして、それがテキスト欄のすぐ上、シーンの左端にそろうようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the text field so that it’s positioned in the top half of the scene and aligned with the left margin in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄をドラッグして、それがシーンの上半分のところに位置するように、そしてシーンの左端にそろうようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the view so that it’s below the label and aligned with the label’s left margin.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューをドラッグして、それがラベルの下に、ラベルのもつ左余白に整列するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During an app state transition—for example, app launch, transitioning to the background, and app termination—the application object calls the corresponding method in the app delegate, giving it an opportunity to respond appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリの状態推移—例えば、アプリの起動、バックグラウンドに移行する、そしてアプリの終了など—の間に、アプリケーションオブジェクトは、該当するメソッドをアプリデリゲートにおいて呼び出して、それにふさわしい応答をする機会を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each constant corresponds to one of the three properties on Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各定数は、Mealでの３つのプロパティのうちの１つに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each lesson contains a tutorial and the conceptual information you need to complete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各レッスンは、指導科目とあなたがそれを成し遂げるのに必要とする概念的情報を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each meal should have its own row in that section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各食事は、それ自身の行をそのセクションにおいて持つべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of these automatically implemented methods has a default behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これら自動的に実装されるメソッドのそれぞれは、省略時の挙動を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each row in a table view has one cell, and that cell determines the content that appears in that row and how that content is laid out.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューの各行は１つのセルを持ちます、そしてそのセルは、その行に現れる内容とその内容がどのように配置（レイアウト）されるかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each test should check for a specific, basic type of behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各テストは、ある特定の、基本的な種類の挙動についてチェックするべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Edit the attributes of UI elements in a storyboard using the Attributes inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中でUI要素の属性をAttributesインスペクタ（「属性」管理機能）を使って編集する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Edit the attributes of a segue in a storyboard using the Attributes inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエの属性をストーリーボードにおいてAttributesインスペクタを使って編集する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elements in a storyboard are linked to source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中の要素は、ソースコードと繋がれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Embed an existing view controller within a navigation controller in a storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のビューコントローラをストーリーボードにおいてナビゲーションコントローラ内部に埋め込む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enter your Apple ID and password when prompted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入力を促される場合はあなたのApple IDとパスワードを入力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations and Structures</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙と構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations and structures have similar capabilities to classes, but can be useful in different contexts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙と構造体は、クラスとよく似た能力を持ちます、しかし異なる文脈において有用であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations can have methods associated with them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙は、それらと結びつけられたメソッドを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though you haven’t written any code, you can build and run the Single View Application template without any additional configuration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが１つもコードを書かなかったとしても、あなたはSingle View Applicationひな形をビルドして実行することが、追加の何らかの構成なしにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every UIView subclass that implements an initializer must include an implementation of init?(coder:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのUIViewサブクラスでもイニシャライザを実装するものは、init?(coder:)の実装を含まなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every constant and variable in Swift has a type, but you don’t always have to write the type explicitly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおいてそれぞれの定数や変数は、ある型を持ちます、しかしあなたは常に明示的に型を書く必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every controller on the navigation stack gets a navigation bar, which can contain controls for backward and forward navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションスタック上のすべてのコントローラは、ナビゲーションバーを手に入れます、それは前後へのナビゲーションのためのコントロールを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every property needs a value assigned—either in its declaration (as with numberOfSides) or in the initializer (as with name).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆるプロパティは値を割り当てられることを必要とします—その宣言においてか（numberOfSidesでのように）またはイニシャライザにおいて（nameでのように）のどちらかで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything should work and look exactly as before.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのものが正確に以前のように見え機能するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything should work as before.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのものが前と同じに機能するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything should work exactly as before, but the Set Default Label Text button is gone, and the elements are centered horizontally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのものが正確に以前と同じように働きます、しかしSet Default Label Textボタンはなくなりました、そして要素は水平方向の中心に置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Execution doesn’t continue to the next case, so you don’t need to explicitly break out of the switch statement at the end of each case’s code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行は次の条件に続きません、それであなたは、それぞれの条件コードの終わりで明示的にswitch文から脱出する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expand the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータとユーティリティ区画をNavigatorとUtilitiesボタンをXcodeツールバーでクリックすることで広げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Experiment</seg>
      </tuv>
      <tuv lang="JA">
        <seg>試してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explain the relationship between a scene in a storyboard and the underlying view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のシーンとその下にあるビューコントローラの間の関係を明らかにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fill out the basic implementation by setting the properties equal to the parameter values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的な実装をプロパティをパラメータ値と等しく設定することで埋めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finalize the UI with Auto Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIを自動レイアウトを使って仕上げる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the init?(coder:) initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(coder:)イニシャライザを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the textFieldDidEndEditing(_:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textFieldDidEndEditing(_:)メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoad()メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the initializer that looks like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このように見えるイニシャライザを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, ViewController needs to adopt the UIImagePickerControllerDelegate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まず、ViewControllerに必要なのはUIImagePickerControllerDelegateプロトコルに準拠することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, add a test case that should pass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、通るはずのテスト項目を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, create a custom table view controller subclass to manage the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、食事リストシーンを管理するためのカスタムビューコントローラのサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, take a look at the AppDelegate.swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、AppDelegate.swiftファイルを見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, you need to have ViewController adopt the UITextFieldDelegate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、あなたはViewControllerにUITextFieldDelegateプロトコルを採用させる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, you’ll put your table view controller inside of a navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、あなたは、あなたのテーブルビューコントローラを、あるナビゲーションコントローラの内部に置きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow the target-action pattern when designing app architecture</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリ構造を設計する時に「ターゲット-アクション」パターンに従う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Name, type cancel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nameに対して、cancelをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Name, type selectImageFromPhotoLibrary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nameに対して、selectImageFromPhotoLibraryをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Name, type setDefaultLabelText.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nameに対して、setDefaultLabelTextをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Type, select UIBarButtonItem.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Typeに対して、UIBarButtonItemを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Type, select UIButton.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Typeに対して、UIButtonを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Type, select UITapGestureRecognizer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Typeに対して、UITapGestureRecognizerを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a class, structure, or enumeration to satisfy the requirements of a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス、構造体、または列挙にとってプロトコルの要件を満たすこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a simple table view like the one in the FoodTracker app, you just need the table view to display a single section, so the implementation of the numberOfSectionsInTableView(_:) data source method is straightforward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerアプリのもののような簡単なテーブルビューに対して、あなたが必要とするのは、単にテーブルビューに１つだけセクションを表示することです、それでnumberOfSectionsInTableView(_:)データソースメソッドの実装はわかりやすいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any given row in the table view, you configure the cell by fetching the corresponding Meal in the meals array, and then setting the cell’s properties to corresponding values from the Meal class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビュー中の任意の指定された行のために、あなたはセルを構成します、それはmeals配列の中の対応するMealを取ってきて、それからセルのプロパティをMealクラスからの対応する値に設定することで行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For each tuple in the collection, the for-in loop binds the values of the index and button in that tuple to local variables, index and button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの中の各タプルに対して、for-inループはそのタプルの中のインデックスの値とボタンを、ローカル変数indexとbuttonにバインド（束縛、結びつけ）します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a good test might check that a Meal gets initialized properly, and you could name it testMealInitialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、１つの良いテストとして、Mealがプロパティの初期化を完了したか検査するのはどうでしょう、そしてあなたはそれにtestMealInitializationと名前を付けることができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, print a failure message if the meals fail to save successfully.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、食事が首尾よく保存するのを失敗するならば、失敗メッセージをプリントしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this method on Array takes two parameters, and you only pass in the name for the second one:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このメソッドはArray上で２つのパラメーターを取ります、そしてあなたは２番目のものに対してだけ名前を渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when the interface shrinks down to an iPhone size, the text field should shrink.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、インターフェースがあるiPhoneサイズにまで縮小される時、テキスト欄は縮小されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can create an ExampleProtocol array and call adjust() on each of the instances in it (because any instance in that array would be guaranteed to implement adjust(), one of the protocol’s requirements).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはExampleProtocol配列を作って、adjust()をそれの中の各インスタンス上で呼び出すことができます（なぜならその配列の中のあらゆるインスタンスは、このプロトコルの要件のひとつ、adjust()を実装することを保証されるからです）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can’t simply create an action method that’s triggered when a user taps on an image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たとえば、あなたはユーザがイメージビューをタップするとき切り替えられるアクションメソッドを簡単には作成できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might use the key “name” to store the value of the name property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはキー「name」を使ってnameプロパティの値を格納するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now, preview your UI using the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さしあたり、あなたのUIをアシスタントエディタを使ってプレビュー（下見）します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now, use the print() function to check that the ratingButtonTapped(_:) action is linked to the button as expected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、このprint()関数を使うことで、ratingButtonTapped(_:)アクションがこのボタンと期待するように結合されることを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For table views with a small number of rows, all rows may be onscreen at once, so this method gets called for each row in your table.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少ない数の行を持つテーブルビューに対しては、すべての行が一度に画面上にあることができます、それでこのメソッドはあなたのテーブルの中の各行に対して呼ばれることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the best experience, open this lesson as a playground in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最良の体験のために、このレッスンをプレイグラウンドとしてXcodeで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this lesson, you’ll start with the most basic template: Single View Application.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは最も基本的なひな形：Single View Application（ビューが１つだけのアプリケーション）で始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you first need to connect the image view to the code in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このため、あなたがまず必要とするのは画像ビューをViewController.swift内のコードに接続することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll implement the behavior of the Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これのために、あなたはCancelボタンの挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll need a label, an image view, and a rating control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これに対して、あなたはラベル、イメージビュー、そして格付けコントロールを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll update the behavior of the Cancel button to dismiss the scene appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このために、あなたはCancelボタンの挙動を更新して、そのシーンを適切に忘れ去られるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll use an image view (UIImageView), a UI element that displays a picture.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このために、あなたはイメージビュー（UIImageView）、図を表示するUI要素を使うことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, iOS comes with a powerful built-in class called a table view (UITableView) designed specifically to display a scrolling list of items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幸いにも、iOSは強力な組み込みのクラス、テーブルビュー（UITableView）と呼ばれるものを備えています、それが設計されるのは特にスクロールできる項目のリストを表示するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, it’s quite easy to give a view the same capabilities as a control by adding a gesture recognizer to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幸いなことに、ビューにコントロールと同じ能力を与えるのは、ジェスチャリコグナイザをそれに加えることによって比較的簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, the UIImagePickerController class has all of this behavior built into it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幸いにも、UIImagePickerControllerクラスは、この挙動の全てをそれに組み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions and Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数とメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions that are defined within a specific type are called methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある特定の型の内部で定義される関数は、メソッドと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gesture recognizers interpret touches to determine whether they correspond to a specific gesture, such as a swipe, pinch, or rotation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザは、タッチを解釈して、それが特定のジェスチャ、例えばスワイプ、ビンチ、または回転などに相当するか判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get Familiar with Xcode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeに慣れる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get the Tools</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ツールの入手</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Started</seg>
      </tuv>
      <tuv lang="JA">
        <seg>はじめに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Glossary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>用語集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Glossary terms are linked throughout the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>用語集の用語は、レッスンのあちらこちらからリンクされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are a few pointers on where to go from here:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここには、ここからどこへ行くかに関していくつかの助言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are terms you will encounter throughout this guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにあるのはこのガイドの至る所であなたが遭遇する用語です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, SimpleClass adopts the ExampleProtocol protocol, and conforms to the protocol by implementing the simpleDescription property and adjust() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、SimpleClassがExampleProtocolプロトコルを採用します、そしてそのプロトコルにsimpleDescriptionプロパティとadjust()メソッドを実装することで準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, shape is an object that’s an instance of the Shape class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、shapeはひとつのオブジェクトです、それはShapeクラスのあるひとつのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the operator unwraps the optional String returned by nameTextField.text (which is optional because there may or may not be text in the text field), and returns that value if it’s a valid string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、この演算子は、nameTextField.text（これはオプショナルです、なぜならテキスト欄にテキストがあるかもしれないし無いかもしれないからです）によって返されるオプショナルのStringをアンラップします、そしてそれが有効な文字列ならばその値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you convert an Int to a String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、あなたはIntをStringに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you include a call to setNeedsLayout(), which will trigger a layout update every time the rating changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、あなたはsetNeedsLayout()への呼び出しを含めます、それは格付けが変わる時すべてにレイアウト更新を引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you’ll need to specify how the interface should adjust for different screen sizes and available area on the screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、あなたが必要とするのは、どのようにインターフェースが異なる画面サイズおよび画面上の利用可能な領域に応じて調節されるべきかを指定することでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you’re declaring this initializer as a convenience initializer because it only applies when there’s saved data to be loaded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、あなたはこのイニシャライザを便宜イニシャライザとして定義しています、なぜならそれが適用されるのはただ保存されたデータがロードされる時のみだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of an if statement with an else clause nested inside a for-in statement (which iterates through each item in a collection in order, one-by-one).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにif文がelse節とともにfor-in文（それはあるコレクションの各項目のすべてに対して順番に、１つまた１つと繰り返し処理します）の内部にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the rating control you’re implementing:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにあなたが実装する格付けコントロールがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hover your mouse over the diamond to reveal a small Run button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのマウスポインタをひし形の上に重ねることで、小さな実行ボタンが現れるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, because the only buttons that trigger this action are the ones you created and added to the array yourself, you can be sure that searching for the button will return a valid index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、このアクションを引き起こすボタンのみが、あなた自身で作成してこの配列に加えたものなので、あなたは探しているボタンが有効なインデックスを返すと確信できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, because views may be purged due to limited resources in an app, there is no guarantee that it will be called only once.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、ビューはアプリの限られたリソースのために解放されるかもしれないので、それが一度だけ呼ばれるとは保障されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, unlike in an if statement, a switch case that has multiple conditions separated by commas executes when any of the conditions are met.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、if文でと違い、複数の条件をコンマで区切られて持つひとつの切替条件は、その条件のどれかが満たされる時に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you want to keep the navigation bar to provide the user with visual continuity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたはナビゲーションバーを保持してユーザに視覚的整合性を提供することを望みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identify the function of key files that are created with an Xcode project template</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeプロジェクトテンプレートを使って作成されるキーファイル（主要ファイル）の働きを確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identity inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If loadMeals() successfully returns an array of Meal objects, this condition is true and the if statement gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadMeals()が成功裏にMealオブジェクトの配列を返したならば、この条件はtrueになり、if文が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If loadMeals() returns nil, there were no meals to load and the if statement doesn’t get executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadMeals()がnilを返すならば、ロードする食事はなかったので、if文は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class has a superclass, the superclass’s name must appear first in the list, followed by protocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスがスーパークラスを持つならば、そのスーパークラスの名前がそのリストの最初になければなりません、それにプロトコルが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a project window appears instead of the welcome window, don’t worry—you probably created or opened a project in Xcode previously.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もしWelcomeウインドウではなくプロジェクトウインドウが現れても、心配いりません—あなたはおそらくXcoceで以前にプロジェクトを作成または開いたのでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If either the downcast fails or the meal property on sourceViewController is nil, the condition evaluates to false and the if statement doesn’t get executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが失敗する、またはsourceViewController上のmealプロパティがnilである、このどちらでも、この条件はfalseに評価されてif文は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is, index &lt; rating evaluates to true, which sets the button’s state to selected and makes it display the filled-in star image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがそうならば、index &lt; ratingはtrueに評価されます、それはそのボタンの状態を選択されると設定してそれが塗りつぶされた星の画像を表示するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is, that means a user tapped one of the table views cells to edit a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがそうならば、ユーザがテーブルビューセルの１つをタップして、ある食事を編集することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is, the if statement is executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もしそうであるならば、このif文が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it was presented modally (using the Add button), it’ll be dismissed using dismissViewControllerAnimated(_:completion:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがモーダル的に表されたならば（Addボタンを使って）、それはdismissViewControllerAnimated(_:completion:)を使って却下されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it was presented with push navigation (using a table view cell), it will be dismissed by the navigation controller that presented it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがプッシュナビゲーションで表されたならば（テーブルピューセルを使って）、それはそれを表したナビゲーションコントローラによって却下されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, click the text field to reveal the resize handles.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、テキスト欄をクリックしてリサイズハンドル（寸法調節つまみ）が見えるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, open the FoodTracker folder in the project navigator by clicking the disclosure triangle next to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、FoodTrackerフォルダをプロジェクトナビゲータにおいてその隣の開示三角形をクリックすることで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, open the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要なら、アウトラインビューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, run your app in Simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、あなたのアプリをシミュレータにおいて実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, zoom in by choosing Editor &gt; Canvas &gt; Zoom.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、Editor &gt; Canvas &gt; Zoomを選んで拡大します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the meal property is non-nil, the code assigns the value of that property to the local constant meal and executes the if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mealプロパティが非nilならば、コードはそのプロパティの値をローカル定数mealに割り当ててif文を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the assistant editor is open, return to the standard editor by clicking the Standard button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタが開いているならば、標準エディタにStandardボタンをクリックすることで戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the assistant editor is open, return to the standard editor by clicking the Standard button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタが開かれているならば、Standardボタンをチェックすることで標準エディタに戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the cast is successful, the local constant mealDetailViewController gets assigned the value of segue.destinationViewController cast as type MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキャストが成功するならば、ローカル定数mealDetailViewControllerは、型MealViewControllerにキャストしたsegue.destinationViewControllerの値を割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the cast is successful, the local constant selectedMealCell gets assigned the value of sender cast as type MealTableViewCell, and the if statement proceeds to execute.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャストが成功するならば、ローカル定数selectedMealCellは型MealTableViewCellにキャストしたsenderの値を割り当てられます、そしてif文は実行を続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the cast is unsuccessful, the app should crash at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャストが失敗するならば、アプリは実行時にクラッシュします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the cast is unsuccessful, the expression evaluates to nil and the if statement isn’t executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャストが失敗したならば、式はnilに評価されてif文は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the downcast succeeds, the code assigns that view controller to the local constant sourceViewController, and checks to see if the meal property on sourceViewController is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが成功したならば、コードはそのビューコントローラをローカル定数sourceViewControllerに割り当てます、そしてsourceViewController上のmealプロパティがnilかどうか確認するため調査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the initial value doesn’t provide enough information (or if there is no initial value), specify the type by writing it after the variable, separated by a colon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期値が十分な情報を提供しないならば（または初期値が存在しないならば）、変数の後にコロンで区切ってそれを書くことで型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the optional value is nil, the conditional is false, and the code in braces is skipped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオプショナル値がnilならば、この条件はfalseです、そして波括弧の中のコードはスキップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the outline view is collapsed, click the toggle to expand the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューが折りたたまれているならば、切替ボタンをクリックしてアウトラインビューを展開してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the project navigator isn’t open, click the leftmost button in the navigator selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータが開いていないならば、ナビゲータ選択バーの中の一番左のボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you actually expected the Meal object to be non-nil in the last test case, you would’ve caught this error during testing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが実際に最後のテスト項目においてMealオブジェクトが非nilであると予想したならば、あなたはテストしている時にこのエラーを捕まえなかったでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you add a few new meals and quit the app, the meals you added will be there next time you open the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがいくつかの新しい食事を加えてアプリを終了したならば、あなたが加えた食事は次回あなたがアプリを開いた時にそこにあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you choose not to enable developer mode, you may be asked for your password later on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが開発者モードを有効にしないのを選んだならば、あなたはあなたのパスワードを後で聞かれるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click Save, the changes you made should overwrite the existing meal in the list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSaveをクリックするならば、あなたがした変更は、そのリストの既存の食事を上書きするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click the Edit button, the table view goes into editing mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがEditボタンをクリックするならば、テーブルビューは編集モードになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click the Edit button, the table view goes into editing mode—but you won’t be able to delete cells yet, because you haven’t implemented that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのEditボタンをクリックするならば、テーブルビューは編集モードにはいります—しかしあなたはまだセルを削除することができません、なぜならあなたがそれを実装していないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you didn’t add a default photo to your project in a previous lesson, add it now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが省略時の写真をあなたのプロジェクトに以前のレッスンで加えなかったならば、今それを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t get the behavior you expect, use the Auto Layout debugging features to help you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが期待する挙動を得ないならば、あなたの助けとなる自動レイアウトデバッグ機能を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t see RatingControl as an option in the pop-up menu, make sure you have the correct UI element selected on the canvas (the one shown with resize handles in the previous image.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがRatingControlをオプションとしてポップアップメニューに見ないならば、あなたが正しいUI要素を選択していることをキャンパス上で確かめてください（リサイズハンドルとともに前の画像で示されるもの）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t see the unwindToMealList method in the shortcut menu, make sure that the method has the right signature.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがunwindToMealListメソッドをショートカットメニーにおいて見つけないらば、そのメソッドが正しいシグネチャを持つことを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t see the Object library, click its button, which is the third button from the left in the library selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリが見えないならば、それのボタンをクリックしてください、それはライブラリ選択バーの左から３番目のボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t, use com.example.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの組織識別子、あなたがそれを持つならば。あなたが持たないならば、com.exampleを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have, fix them by reading through the warnings or errors that the compiler provides, and then look back over the instructions in this lesson to make sure everything looks the way it’s described here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがしていたら、それらをコンパイラが提供する警告やエラーをあちこち読んで修正してください、そしてそれからこのレッスンの指示をずっと振り返って、すべてのことがそれがここで説明されるようになっているか確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you know that a value won’t need to be changed in your code, declare it as a constant instead of a variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値があなたのコードにおいて変更される必要がないと分かっているならば、それを、変数ではなく、定数として宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you leave the template implementation empty or delete it from your AppDelegate class, you get the default behavior whenever that method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがひな形実装を空のままにしておいたり、それをあなたのAppDelegateクラスから削除したならば、あなたはそのメソッドが呼ばれるたびに省略時の挙動を受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you look at the table view controller scene in your storyboard, you’ll notice that it shows only a single cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがテーブルビューコントローラシーンをあなたのストーリーボードで観察するならば、あなたはそれがただ１つのセルだけを表示するのに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you look through the photos available in Simulator, you’ll notice that it doesn’t include any photos of food.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがシミュレータの中で利用可能なPhotosをあちこち見たならば、あなたはそれがなんら食べ物の写真を含まないことに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to convert a value to a different type, explicitly make an instance of the desired type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある値を異なる型へ変換する必要があるならば、明示的に望む型のインスタンスにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to refer to the concepts you’ve learned throughout the lessons, use the glossary to refresh your memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがレッスンを通して学んだ概念を調べる必要があるならば、用語集をあなたの記憶を新たにするのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you rotate the device (Command-Left Arrow or Command-Right Arrow) or run the app on a different device, the text field grows or shrinks to the appropriate size depending on the device’s orientation and screen size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが機器を回転する（コマンドキー＋左矢印またはコマンドキー＋右矢印）か異なる機器でそのアプリを実行するならば、テキスト欄は機器の方向および画面サイズに基づいて適切なサイズに大きくなったり縮んだりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you see a table view with content and nothing happens when you try to drag it to the canvas, you’re probably dragging a table view rather than a table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが内容を持つテーブルビューを見る、そしてあなたがそれをキャンバスにドラッグしようとしたとき何も起こらないならば、あなたはおそらくテーブルビュコントローラではなくテーブルビューをドラッグしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you see the wrong scene in the UI preview, make sure to select the table view scene by clicking its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが間違ったシーンをUIプレビューで見るならば、テーブルビューシーンを選択することをそれのシーンドックをクリックすることで確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want more space to work, collapse the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがもっと場所を必要とするならば、プロジェクトナビゲータとユーティリティ区画をNavigatorとUtilitiesボタンをXcodeツールバーにおいてクリックすることで折り畳んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want more space to work, collapse the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがもっと作業空間を必要とするならば、プロジェクトナビゲータとユーティリティ区画をXcodeツールパーのNavigatorとUtilitiesボタンをクリックすることで折り畳んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want, you can zoom out using Command-Minus (-).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが望むならば、あなたはコマンド-マイナス（-）キーを使って表示を縮小することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you wanted to change the amount of space between stars, you’d have to change 5 wherever it was used to indicate space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが星の間の空きを変えようと望むならば、あなたは5を、それが空きを指し示すために使われたどこにおいても変えなければならないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you write unit tests that are long or complicated, it’ll be harder to track down exactly what’s going wrong.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがユニットテストを長く難解に書いたならば、何が間違っているか正確に見つけ出すのが困難になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your text field looks like the one below, you’re ready to resize it; if it doesn’t, select it on the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテキスト欄が下のもののように見えるならば、あなたはそれをリサイズする準備ができています；それがそう見えないならば、それをキャンバス上で選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’d like, use one of the other predefined UIColor values instead, like blueColor() or greenColor().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが好むならば、別のあらかじめ定義されたUIColor値を代わりに使ってください、例えばblueColor()またはgreenColor()のような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re running an app for the first time, Xcode asks whether you’d like to enable developer mode on your Mac.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアプリを実行したのが初めてならば、Xcodeはあなたが開発者モードをあなたのMacで有効にしたいかどうかを尋ねます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re running into build issues, make sure the names of the images in your project exactly match the names you used in the code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがビルド問題に出くわしているならば、あなたのプロジェクトの中の画像の名前が正確にあなたがコードの中で使った名前と一致することを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re running into build issues, try pressing Command-Shift-K to clean your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがビルド問題にぶつかっているならば、コマンド-シフト-Kを押してあなたのプロジェクトの掃除してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement imagePickerControllerDidCancel(_:) to do that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerControllerDidCancel(_:)を実装することでこれを行ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement Edit and Delete Behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>編集および削除挙動の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement Navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement a Custom Control</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムコントロールの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement an initializer on a custom class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムクラス上でイニシャライザを実装する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement the Button Action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンアクションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicitly unwrapped optional types are indicated with an exclamation mark (!) instead of a question mark (?).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的アンラップオプショナル型は、疑問符（?）ではなく感嘆符（!）によって指し示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import and use UIKit</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKitのインポートと利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Importing UIKit also gets you access to Foundation, so you can remove the redundant import to Foundation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKitのインポートはまた、あなたにFoundationへもアクセスさせます、それであなたは冗長なFoundationへのインポートを削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In FoodTrackerTests.swift, delete the template tests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerTests.swiftにおいて、ひな形テストをすべて削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In FoodTrackerTests.swift, find the testMealInitialization() unit test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerTests.swiftにおいて、testMealInitialization()ユニットテストを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、最後の波括弧（}）の前で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, below the // MARK: Properties section, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、// MARK: Properties節の下で、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, below the // MARK: Properties section, add this structure:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、// MARK: Properties節の下で、この構造体を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, find the class line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、class行を見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewCell.swift, find the class line, which should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewCell.swiftにおいて、class行を見つけてください、それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, after the viewDidLoad() method, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、viewDidLoad()メソッドの後に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, before the last curly brace (}), add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、最後の波括弧（}）の前で、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、最後の波括弧（}）の前に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the prepareForSegue(_:sender:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、prepareForSegue(_:sender:)メソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the tableView(_:canEditRowAtIndexPath:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:canEditRowAtIndexPath:)メソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the tableView(_:cellForRowAtIndexPath:) data source method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:cellForRowAtIndexPath:)データソースメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the tableView(_:commitEditingStyle:forRowAtIndexPath:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:commitEditingStyle:forRowAtIndexPath:)メソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the numberOfSectionsInTableView(_:) data source method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、numberOfSectionsInTableView(_:)データソースメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the tableView(_:commitEditingStyle:forRowAtIndexPath:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:commitEditingStyle:forRowAtIndexPath:)メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the tableView(_:numberOfRowsInSection:) data source method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:numberOfRowsInSection:)データソースメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the unwindToMealList(_:) action method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、unwindToMealList(_:)アクションメソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the unwindToMealList(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、unwindToMealList(_:)メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the viewDidLoad() method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, above the // MARK: Actions section, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、// MARK: Actions節の上で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the // MARK: UITextFieldDelegate section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、// MARK: UITextFieldDelegate節を見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the cancel(_:) action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、cancel(_:)アクションメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the class declaration line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、次のクラス宣言行を探してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、最後の波括弧（}）の前で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, delete the comments that come with the template implementation so you can start working with a blank slate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、ひな形実装に付いてくるコメントを削除してください、それであなたは白紙の状態で作業を始めることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the // MARK: Properties section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、// MARK: Properties区域を見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the init?(coder:) initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、init?(coder:)イニシャライザを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the ratingButtonTapped(_:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、ratingButtonTapped(_:)メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the class declaration line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、クラス定義行を見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, under the class line, add this comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、class行の下で、このコメントを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, under the init?(coder:) initializer in the // MARK: Initialization section, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、// MARK: Initialization区域のinit?(coder:)イニシャライザの下で以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, after the textFieldShouldReturn(_:) method, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、textFieldShouldReturn(_:)メソッドの後に、以下のメソッドを加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、最後の波括弧（}）の前に、以下を加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, delete the setDefaultLabelText(_:) action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、setDefaultLabelText(_:)アクションメソッドを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the class line, which should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、class行を見つけたください、それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the mealNameLabel outlet and delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、mealNameLabelアウトレットを見つけてそれを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the selectImageFromPhotoLibrary(_:) action method you added earlier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、あなたが定義したselectImageFromPhotoLibrary(_:)アクションメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the setDefaultLabelText action method you just added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、あなたが加えたばかりのsetDefaultLabelTextアクションメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the textFieldDidEndEditing(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、textFieldDidEndEditing(_:)メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the viewDidLoad() method, which should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください、それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, right above the // MARK: Actions section, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、// MARK: Actions部分のちょうど上に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In init?(coder:), replace the literal value you used for number of stars with the starCount property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(coder:)において、あなたが星の数のために使ったリテラル値をstarCountプロパティと置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In layoutSubviews, replace the literal value you used for spacing with the spacing property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>layoutSubviewsにおいて、あなたが空きとして使ったリテラル値をspacingプロパティで置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Start Developing iOS Apps (Swift), you learned the basics of iOS app development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このiOSアプリ開発を始めよう（Swift）において、あなたはiOSアプリ開発の基本を学びました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Auto Layout, a rule that explains where one element should be located relative to another, what size it should be, or which of two elements should shrink first when something reduces the space available for each of them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトにおいて、ある要素が別のものと相対して位置するべきところ、どんな大きさでそれがあるべきか、または２つの要素のどちらが最初に、何かがそれらの各々のために役立てられる空間を減らすときに縮小されるべきかを明らかにするある規則。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, AnyObject is a type used to describe an object that can belong to any class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、AnyObjectはどんなクラスにも属することができるオブジェクトを記述するために使われる型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you can represent the name using a String, the photo using a UIImage, and the rating using an Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたは名前をStringを使って、写真はUIImageを使って、そして格付けはIntを使って表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Xcode, Option-click the name of a constant or variable to see its inferred type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにおいて、定数や変数の名前をオプション-クリックしてそれの推論された型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Xcode, a jump menu that lets you navigate directly to a specific declaration or section in a source code file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにおいて、あなたを直接にソースコードファイルの特定の宣言または部門に進ませるジャンプメニュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Xcode, a secondary editor window that appears side-by-side with your primary editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcoceにおける、ある副次的エディタウインドウ、それはあなたの主要エディタの横に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a storyboard, a scene represents one screen of content and typically one view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードにおいて、あるシーンは１つのコンテンツ画面と、大抵は１つのビューコントローラを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a storyboard, a table view can be configured to display static data (supplied in the storyboard UI) or dynamic data (supplied by the table view controller logic).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードでは、テーブルビューは構成されることができて静的データ（ストーリーボードにおいて提供されるもの）または動的データ（テーブルビューコントローラロジックによって提供されるもの）を画面表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an app, the first responder is an object that is first on the line for receiving many kinds of app events, including key events, motion events, and action messages, among others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリにおいて、ファーストレスポンダは、特にキーイベント、モーションイベント、そしてアクションイベントを含めた、多くの種類のアプリイベントの受け取りの列の最初のオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In combination with Auto Layout, one of the most useful tools for working with layouts like the one you have is stack view (UIStackView).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトとの組み合わせで、あなたが持つようなレイアウトを扱うための最も便利なツールのひとつは、スタックビュー（UIStackView）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, if you recall, you’ve already written some code in the viewDidLoad() method of ViewController:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際、あなたが思い出すならば、あなたはすでにいくつかのコードをViewControllerのviewDidLoad()メソッドにおいて書いています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, in cases where there isn’t a meaningful raw value, you don’t have to provide one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際のところ、意味のある生の値がない場合には、あなたはそれを提供する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, you’ve already worked with both views (labels, image views) and controls (text fields, buttons) in your interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際、あなたはすでにビュー（ラベル、イメージビュー）とコントロール（テキスト欄、ボタン）の両方をあなたのインターフェイスで扱っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, each scene has its own view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般に、各シーンはそれ自身のビュー階層を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In object-oriented programming, the behavior of a program is based largely on interactions between objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト指向プログラミングにおいて、あるプログラムの挙動は大部分はオブジェクト間の相互作用に基づきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In one case, you need to add a new meal, and in the other, you need to replace an existing one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一方の場合では、あなたは新しい食事を追加する必要があります、そして他方では、あなたは既存のものを置き換える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, many of the events generated by the user are initially routed to the first responder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、ユーザによって生み出されるイベントの多くは初めにファーストレスポンダに向かいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this if statement gets executed if an existing meal is being edited.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、このif文は、既存の食事が編集されるならば実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this else statement gets executed if a new meal is being added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、このelse文は新しい食事が加えられる場合に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the // MARK: Properties section, find the rating property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// MARK: Properties区域において、ratingプロパティを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the PropertyKey structure, add these properties:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このPropertyKey構造体において、これらのプロパティを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the cancel(_:) action method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cancel(_:)アクションメソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the cancel(_:) action method, before the existing line of code, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cancel(_:)アクションメソッドにおいて、既存のコード行の前で、以下のコード加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the encodeWithCoder(_:) method, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder(_:)メソッドにおいて、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the for-in loop, after the line where the button is initialized, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループにおいて、ボタンが初期化されるところの行の下に、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the if statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文において、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the if statement, below the previous line of code, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文において、前のコード行の下で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the init?(coder:) initializer, add the following lines of code to create a red button:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(coder:)イニシャライザにおいて、以下のコード行を加えることで赤いボタンを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the init?(coder:) initializer, add these two lines of code before the for-in loop:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(coder:)イニシャライザにおいて、これら２つのコード行をfor-inループの前に加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the init?(coder:) initializer, change the first line of the for-in loop to this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(coder:)イニシャライザにおいて、for-inループの最初の行をこれに変更してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the layoutSubviews() method, add a call to updateButtonSelectionStates() as the last line of the implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>layoutSubviews()メソッドにおいて、updateButtonSelectionStates()への呼び出しをこの実装の最後の行として加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the layoutSubviews() method, add this code before the first line of the implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>layoutSubviews()メソッドにおいて、このコードをその実装の最初の行の前に加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the loadMeals() method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadMeals()メソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the loadSampleMeals() method, add this code to create a few Meal objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadSampleMeals()メソッドにおいて、このコードを加えて２、３のMealオブジェクトを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the prepareForSegue(_:sender:) method, add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このprepareForSegue(_:sender:)メソッドにおいて、以下のif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the ratingButtonTapped(_:) method, add a call to updateButtonSelectionStates() as the last line of the implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ratingButtonTapped(_:)メソッドにおいて、updateButtonSelectionStates()への呼び出しをこの実装の最後の行として加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the saveMeals() method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このsaveMeals()メソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the unwindToMealList(_:) action method, add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unwindToMealList(_:)アクションメソッドにおいて、以下のif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the updateButtonSelectionStates() method, add this for-in loop:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>updateButtonSelectionStates()メソッドにおいて、このfor-inループを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the viewDidLoad() method, delete the comments and instead add this code after the call to super.viewDidLoad() to load the sample meal data:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoad()メソッドにおいて、コメントを削除してこのコードをsuper.viewDidLoad()への呼び出しの後に加えて見本の食事データをロードしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, type ShowDetail in the Identifier field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、ShowDetailをIdentifier（識別子）欄にタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Assets.xcassets to view the asset catalog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Assets.xcassetsを選択してアセットカタログ（資産目録）を眺めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, choose Add from the pop-up menu next to the System Item option.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、AddをSystem Itemオプションの隣のポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, choose Present Modally from the pop-up menu next to the Segue option.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Present ModallyをSegueオプションの隣のポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the Alignment field and select Center.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Alignment欄を見つけてCenterを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Identifier and type MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesイスンペクタにおいて、Identifierとラベルをつけられる欄を見つけてMealTableViewCellとタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Image and select defaultPhoto.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Imageとラベルをつけられる欄を探してdefaultPhotoを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Interaction and deselect the User Interaction Enabled checkbox.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Interactionと名前を付けられるラベルを探して、User Interaction Enabledチェックボックスを選択解除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Interaction and select the User Interaction Enabled checkbox.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Interaction（相互作用）とラベルをつけられる欄を探して、User Interaction Enabled（ユーザ相互作用を可能にする）チェックボックスを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Placeholder and type Enter meal name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Placeholderと表示される欄を見つけてEnter meal nameとタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Return Key and select Done.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、「Return Key」と表示のある欄を探して「Done」を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Selection and select None.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Selectionとラベルをつけられる欄を見つけてNoneを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, for System Item, select Cancel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、System Itemに対して、Cancelを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, for System Item, select Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、System Itemに対して、Saveを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, select the Auto-enable Return Key checkbox.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Auto-enable Return Key（自動有効リターンキー）チェックボックスを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, type 12 in the Spacing field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Spacing（間隔の空き）欄に12をタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, type AddItem in the Identifier field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、AddItemをIdentifier（識別子）欄にタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Class field, type Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Class欄において、Mealをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Class field, type RatingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Class欄において、RatingControlをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, change the Class field from ViewController to MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタにおいて、Class欄をViewControllerからMealViewControllerに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, find the field labeled Class and select MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Identityインスペクタにおいて、Classとラベルをつけられる欄を探してMealTableViewCellを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, find the field labeled Class and select RatingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタにおいて、Classとラベルをつけられる欄を探してRatingControlを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, find the field labeled Class, and select MealTableViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタにおいて、Classとラベルをつけられる欄を探してMealTableViewControllerを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Intrinsic Size field, select Placeholder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intrinsic Size（固有サイズ）欄において、Placeholder（プレースホルダ）を選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, find a Bar Button Item object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、Bar Button Itemオブジェクトを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, find a Table View Controller object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、Table View Controllerオブジェクトを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type button in the filter field to find the Button object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、buttonとフィルタ欄にタイプしてButtonオブジェクトを素早く見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type image view in the filter field to find the Image View object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、image viewをフィルタ欄にタイプしてImage View（イメージビュー）オブジェクトを素早く見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type label in the filter field to find the Label object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、フィルタ欄にlabelとタイプしてラベルオブジェクトを素早く探してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type tap gesture in the filter field to find the Tap Gesture Recognizer object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、フィルタ欄にtap gestureをタイプしてTap Gesture Recognizerオブジェクトをすばやく見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type text field in the filter field to find the Text Field object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、フィルタ欄（選り分け用単語の入力欄）にtext fieldをタイプしてText Field（テキスト欄）オブジェクトを素早く見つけましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Pin menu, click the Add 1 Constraints button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pinメニューにおいて、Add 1 Constraints（１つの制約を追加）ボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Pin menu, click the Add 2 Constraints button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pinメニューにおいて、「Add 2 Constraints（２つの制約を追加）」ボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Pin menu, click the Add 3 Constraints button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pinメニューにおいて、Add 3 Constraints（３つの制約を追加）ボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Save As field, type Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Save As欄において、Mealをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Scheme pop-up menu in the Xcode toolbar, choose iPhone 6.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeツールバーのScheme（体系、構成）ポップアップメニューにおいて、iPhone 6を選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Size inspector, find the field labeled Row Height and type 90.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サイズインスペクタにおいて、Row Heightとラベルをつけられる欄を探して90をタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Size inspector, type 44 in the Height field and 240 in the Width field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サイズインスペクタにおいて、Height（高さ）欄に44をWidth（幅）欄に240をタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Targets section, make sure your app and the tests for your app are both selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Targets区画において、あなたのアプリとあなたのアプリのためのテストが両方とも選択されることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Targets section, make sure your app is selected and the tests for your app are unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Targets区画において、あなたのアプリが選択されて、あなたのアプリのためのテストは選択されないことを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Targets section, your app is selected and the tests for your app are unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Targets区画において、あなたのアプリが選択されて、あなたのアプリのためのテストは選択されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and choose New Folder from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左隅で、プラスボタン（+）をクリックしてNew Folderをポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and choose New Image Set from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左隅で、プラス（+）ボタンをクリックしてNew Image Setをポップアップメニューから選んでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and select New Folder from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左隅で、プラスボタン（+）をクリックしてNew Folderをポップアップメニューから選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and select New Image Set from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左の隅で、プラス（+）ボタンをクリックしてNew Image Set（新規画像セット）をポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the comment at the top of the file, also change the name from ViewController.swift to MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このファイルの最上部のコメントにおいてもまた、名前をViewController.swiftからMealViewController.swiftに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the current scene, the content view is View, the top level view inside View Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在のシーンにおいて、コンテンツビューは、「ビューコントローラ」内部の最上層のビュー、「ビュー」です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Connection, select Action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログで、Connectionに対して、Actionを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type mealNameLabel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れるダイアログにおいて、Nameに対して、mealNameLabelをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type nameLabel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、Nameに、nameLabelをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type nameTextField.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログで、Nameに対して、nameTextFieldをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type photoImageView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、名前に、photoImageViewをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type ratingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、名前に、ratingControlをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type saveButton.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、名前に、saveButtonをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, select a location to save your project and click Create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れるダイアログで、あなたのプロジェクトを保存する場所を選びCreateをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, use the following values to name your app and choose additional options for your project:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れるダイアログにおいて、以下の値を使ってあなたのアプリに名前をつけて、あなたのプロジェクトのための追加オプションを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the earlier switch statement example, you saw a method that’s defined on the String type called hasSuffix(), shown again here:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ちょっと前のswitch文の例において、あなたはString型の上で定義されるhasSuffix()と呼ばれるメソッドを見ました、再びここに示されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the editor selector bar, which appears at the top of the assistant editor, change the assistant editor from Preview to Automatic &gt; ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタの一番上にある、エディタ選択バーにおいて、アシスタントエディタをPreviewからAutomatic &gt; ViewController.swiftに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the editor selector bar, which appears at the top of the assistant editor, switch the assistant editor from Automatic to Preview &gt; Main.storyboard (Preview).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタの最上部にある、エディタ選択バーにおいて、アシスタントエディタをAutomaticからPreview &gt; Main.storyboard（プレビュー）へ切り替えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the editor selector bar, which appears at the top of the assistant editor, switch the assistant editor from Preview to Automatic &gt; MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタの最上部にある、エディタ選択バーにおいて、アシスタントエディタをPreviewからAutomatic &gt; MealTableViewCell.swiftへ切り替えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example above, the compiler infers that myVariable is an integer because its initial value is an integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の例において、コンパイラはmyVariableが整数であると推測します、なぜならそれの初期値が整数だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example above, the raw-value type of the enumeration is Int, so you have to specify only the first raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の例では、列挙の生の値型はIntです、それであなたは最初の生の値だけ指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the first if statement (which gets executed if the meal is being edited), add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のif文（それは食事が編集されようとするならば実行されます）において、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the future, as you add more scenes, you’ll make this connection yourself in the Identity inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この先、あなたがさらにシーンを加えるたび、あなたはこの接続をあなた自身で同一性インスペクタにおいて作成することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the iOS section at the left of the dialog, select Application.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダイアログの左のiOS部門で、Applicationを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the main area of the dialog, click Single View Application and then click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダイアログの中央エリアで、Single View Applicationをクリックして、それからNextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the meal list scene, you should be able to tap a table view cell to navigate to the meal scene, but the content in the scene is blank.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストシーンにおいて、あなたはテーブルピューセルをタップすることで食事シーンへと導かれることができます、しかしそのシーンのコンテンツは空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the meal scene, click the light blue area to select the stack view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンにおいて、明るい青の領域をクリックしてスタックビューを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the meal scene, select the Meal Name label, and press the Delete key to delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この食事シーンにおいて、Meal Nameラベルを選択してください、そしてデリートキーを押してそれを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the method implementation, between the curly braces ({}), add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッド実装において、波括弧（{}）の間に、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the method implementation, between the curly braces ({}), add this line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのメソッド実装において、波括弧（{}）の間に、このコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the method, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the outline view, select Table View Cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューにおいて、Table View Cellを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the outline view, select Table View.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューにおいて、Table Viewを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the pop-up menu labeled Intrinsic Size, choose Placeholder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intrinsic Size（固有サイズ）とラベルをつけられたポップアップメニューにおいて、Placeholder（プレースホルダ）を選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the pop-up menu next to Update Frames, choose Items of New Constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Update Framesに接するポップアップメニューで、項目New Constraintsを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, click the ViewController.swift file once and press the Return key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、ViewController.swiftファイルを一度クリックして、リターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Assets.xcassets to view the asset catalog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Assets.xcassetsを選択してアセットカタログを眺めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Main.storyboardを選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、ViewController.swiftを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the search field in the top-right corner, type Xcode and press the Return key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上部右隅の検索窓で、Xcodeをタイプしてリターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the welcome window, click “Create a new Xcode project” (or choose File &gt; New &gt; Project).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Welcomeウインドウにおいて、「Create a new Xcode project」をクリックしてください（または「File &gt; New &gt; Project」を選んでください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the workspace window, you may or may not see a warning triangle with a message that says “No code signing identities found.” This warning means you haven’t set up Xcode for iOS development yet, but don’t worry, you can complete these lessons without doing that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ワークスペースウインドウでは、あなたは警告三角形と「コード署名識別子が見つかりません。」というメッセージを見るかもしれないし見ないかもしれません。この警告は、あなたがXcodeをiOSのためにまだ設定し終わっていないことを意味します、しかし心配いりません、あなたはこれらのレッスンをそうすることなく完了できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the “Subclass of” field, select UITableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Subclass of」欄において、UITableViewCellを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the “Subclass of” field, select UITableViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Subclass」欄において、UITableViewControllerを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the “Subclass of” field, select UIView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Subclass of」欄において、UIViewを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these lessons, you’ll be building a simple meal tracking app called FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのレッスンでは、あなたは単純な食事トラッキング（追跡記録）アプリ、FoodTrackerと呼ばれるものを作っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this if statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このif文において、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, because ViewController keeps a reference to the text field, you’ll make ViewController the text field’s delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、ViewControllerがテキスト欄への参照を保有するので、あなたはViewControllerをテキスト欄の委任先にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, that means the noName object is nil, which implies that it failed initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、それはnoNameオブジェクトがnilであることを意味し、それは初期化が失敗した事を当然示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the if statement executes only if the binding is successful for all of these values and all conditions are met.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合において、if文は、バインディングがそれらの値の全てに対してうまくいき、そして全ての条件が満たされる場合にのみ成し遂げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the event is the user tapping the Set Default Label Text button, the action is setDefaultLabelText, the target is ViewController (where the action method is defined), and the sender is the Set Default Label Text button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、イベントはユーザがSet Default Label Textボタンをタップすること、アクションはsetDefaultLabelText、ターゲットはViewController（ここでアクションメソッドが定義されます）、そしてセンダー（送り手）はSet Default Label Text ボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the text field should already be selected because you just stopped dragging it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、テキスト欄はすでに選択されているはずです、なぜならあなたがそれのドラッグをちょうど止めたところだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you can use the force unwrap operator (!) to access the underlying index value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、あなたは強制アンラップ演算子（!）を使って内在する値にアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you downcast using the optional type cast operator (as?), because the photo property is an optional, so the value might be a UIImage, or it might be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、あなたはオプショナル型キャスト演算子（as?）を使ってダウンキャストします、なぜならphotoプロパティはオプショナルだからです、それでその値は、UIImageになるかもしれず、またそれはnilであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this code, the value of possibleInt is 7, because myString contains the value of an integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードにいて、possibleIntの値は7です、なぜならmyStringがある整数の値を含むからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this context, the term nearest neighbor means the boundary of the closest UI element, which can be the superview, a peer view, or a margin.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文脈では、最も近い隣りという語は、隣接したUI要素、それはスーパービュー、同格のビュー、余白であるかもしれません、の境界線を意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this custom subclass, you can now define a property to store a list of Meal objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このカスタムサブクラスにおいて、あなたは現在ひとつのプロパティを定義してMealオブジェクトのリストを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the switch statement switches on the value of the vegetable string, comparing the value to each of its cases and executing the one that matches.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、switch文はvegetable文字列の値に関して、その値をそれの条件それぞれと比較して合致するものを実行する切替えをしていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the #selector(RatingControl.ratingButtonTapped(_:)) expression returns the selector for your ratingButtonTapped(_:) action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、#selector(RatingControl.ratingButtonTapped(_:))式はあなたのratingButtonTapped(_:)アクションメソッドに対するセレクタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, use the iPhone 6 option.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、iPhone 6オプションを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you create the main screen of the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリの主要画面を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you focus on adding behavior that allows the user to edit and delete meals in the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは挙動を追加することに集中します、それはユーザにFoodTrackerアプリにおいて食事の編集と削除を可能にするものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you use navigation controllers and segues to create the navigation flow of the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはナビゲーションコントローラとセグエを使って、FoodTrackerアプリのナビゲーションの流れを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you won’t be using any custom app delegate code, so you don’t have to make any changes to the AppDelegate.swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは何らあつらえのアプリデリゲートコードを使用しません、それであなたはいかなる変更もAppDelegate.swiftファイルにする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll connect the basic UI of the FoodTracker app to code and define some actions a user can perform on that UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリの基本的なUIをコードと結びつけて、そのUI上でユーザ（利用者）が実行できるいくつかのアクションを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll continue to work on the UI for the meal scene in the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは引き続きFoodTrackerアプリの食事シーンのためのUIに取り組みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll define and test a data model for the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリのためのデータモデルを定義してテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll implement a rating control for the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは格付けコントロールをFoodTrackerアプリに実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this method, add the following code to resign the text field’s first-responder status, and a comment to describe what the code does:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、以下のコードをテキスト欄のファーストレンポンダ状態を破棄するために、そしてひとつのコメントをこのコードが何をするか説明するために加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this method, you’ll write the logic to add the new meal (that’s passed from MealViewController, the source view controller) to the meal list data and add a new row to the table view in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、あなたはロジックを書いて、新しい食事（それはMealViewController、ソースビューコントローラから渡されます）を食事リストデータに加えて、食事リストシーンにおいて新しい行をテーブルビューに加えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this pattern, models keep track of your app’s data, views display your user interface and make up the content of an app, and controllers manage your views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパターン（類型）において、モデルはあなたのアプリのデータの最新状態を把握し、ビューはあなたのユーザインターフェイスを表示してアプリのコンテンツを作り上げ、そしてコントローラはあなたのビューを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this section, add another UITextFieldDelegate method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この節において、もう１つのUITextFieldDelegateメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this step you’ll implement the behavior in the Meal class to save and load the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この段階においてあなたはMealクラスにおいて食事を保存してロードする（読み込む）挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your case, you’ll take the selected image and display it in your UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの場合では、あなたは選択された画像をとってそれをあなたのUIに表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your case, you’ll take the text that’s in the text field and use it to change the value of the label in your UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの場合には、テキスト欄の中のテキストをとって、それを使ってあなたのUIのラベルの値を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, find the outline view toggle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、アウトラインビュー切替ボタンを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, open the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、アウトラインビューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、Cancelボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the Save button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、Saveボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the Set Default Label Text button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードにおいて、Set Default Label Textボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the image view in the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、イメージビューをテーブルビューセルにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、イメージビューを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the label in the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、ラベルをテーブルビューセルにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、ラベルを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the rating control in the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、格付けコントロールをテーブルビューセルにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the text field in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、テキスト欄を食事シーンにおいて選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、テキスト欄を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, use the Object library to find a View object and drag one into your storyboard scene so that it’s in the stack view below the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、オブジェクトライブラリを使ってViewオブジェクトを見つけ、ひとつあなたのストーリーボードシーンにドラッグします、そうしてスタックビューの中のイメージビューの下になるようにします。［イメージビューは前のレッスンで食事写真表示用に加えたものです］</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Include UI Tests: Unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIテストを含む：非選択。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Include Unit Tests: Selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストを含む：選択。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializers can also have a number of keywords associated with them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザは、それらと結びつけられたいくつかのキーワードを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializers that may fail to successfully initialize an object are called failable initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>首尾よくオブジェクトを初期化できないかもしれないイニシャライザは、失敗できるイニシャライザと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the else clause you added earlier, add this print statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが前に加えたelse節の内側に、このprint文を加えてください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the if statement, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文の内側に、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the switch, the enumeration member is referred to by the abbreviated form .Hearts because the value of self is already known to be a suit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>switchの内部では、列挙メンバーは省略された形式.Heartsで参照されます、selfの値がすでにsuitであると知られているからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of creating one button, the loop will create five.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのボタンを作成するのではなく、このループは５つ作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of deleting the existing segue and creating a new one, simply change the segue’s style in the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のセグエを削除して新しいものを作成するのではなく、単にそのセグエの形式をAttributesインスペクタにおいて変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of the meal scene with its text field, image view, and rating control, you should now see an empty table view—a screen with a number of horizontal dividers to separate it into rows, but with no content in each row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンとそれが持つそれのテキスト欄、イメージビュー、そして格付けコントロールではなく、あなたは今では空のテーブルビューを見るはずです—それは、画面をいくつかの水平仕切りで行へとそれを分けています、しかし各行は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, declare two variables, one for the amount of space between stars and one for the number of stars.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、２つの変数を宣言しください、星の間の空きの量のために１つそして星の数のために１つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface Builder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インターフェイスビルダー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Intrinsic content size refers to the minimum size needed to display all the content in the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>固有コンテンツサイズは、そのビューの中の全てのコンテンツを表示するのに必要な最小サイズを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It asks the table view for a cell with a placeholder identifier, adds a comment about where code to configure the cell should go, and then returns the cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはテーブルビューにプレースホルダ識別子を持つセルを要求します、セルを構成するコードがどこに置かれるはずかについてのコメントを加えます、そしてそれからそのセルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It creates the entry point to your app and a run loop that delivers input events to your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたのアプリに対するエントリポイントと、あなたのアプリに入力イベントを送り届ける実行ループを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It defines the AppDelegate class, the blueprint for the app delegate object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、AppDelegateクラスを定義します、それはアプリデリゲートオブジェクトの設計図です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It extends past the edge of the screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは画面の縁を越えて広がっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It lets you edit the properties of an object in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはあなたにあなたのストーリーボードのオブジェクトのプロパティを編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It lets you edit the size and position of an object in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたにあなたのストーリーボードの中のオブジェクトの大きさと位置を編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It makes sense to have the meal list be the first thing users see when they launch your app, so tell Xcode that’s your intent by setting the table view controller as the first scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストがあなたのアプリを起動した時にユーザが見る最初のものであるのは道理にかなっています、それでXcodeにそれがあなたの意向であることを、テーブルビューコントローラを最初のシーンとして設定することによって伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may take a few moments to start up the first time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは初めての始動では少し時間がかかるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It needs to save its data by assigning the value of each property to a particular key, and load the data by looking up the information associated with that key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、それのデータの保存を各プロパティの値を特有のキーに割り当てることによって行い、データのロードをそのキーに結びついた情報を検索することによって行う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It not only organizes the files that go into creating an app, it provides editors for code and interface elements, allows you to build and run your app, and includes a powerful integrated debugger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは単にいくつかのファイル、ひとつのアプリを作成することになるものを、まとめ上げるだけではありません、それはコードやインターフェイス要素のためのエディタを提供します、それはあなたにアプリのビルドや実行を可能します、そして統合される強力なデバッガを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It should build without errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはエラーなしてビルドするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It should build without issues.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは問題なくビルドするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then adds this button to the left side of the navigation bar in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそれからこのボタンを食事リストシーンにおいてナビゲーションバーの左側に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then assigns that Meal object to the meal property of the destination view controller, an instance of MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそれからそのMealオブジェクトを、MealViewControllerのインスタンスのひとつ、デスティネーション（行先）ビューコントローラのmealプロパティに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It uses the constant Meal.ArchiveURL that you defined in the Meal class to identify where to save the information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、定数Meal.ArchiveURLを使います、それはあなたがMealクラスにおいて定義した情報を保存するところを識別するためのものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’ll be a good way to test that the text field is taking the user input and processing it appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がユーザの入力を受け取っていることと適切にそれを処理していることをテストするためにこれは良い方法となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’ll contain the meal name, photo, rating, and look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、食事名、写真、格付けを含み、そしてこのようなものに見えるでしょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s been a while since you built the original UI, and a lot of things have changed since then.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが最初のUIをビルドしてからしばらくたちます、そして多くのことがその時から変更されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s generally bad practice to keep hardcoded values scattered throughout your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的に悪い慣行とされるのは、変更されないように書いた値をあなたのコードのあちらこちらに点在させたままにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s good to understand how the elements you’ve added are actually arranged in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが加えた要素がどのように実際にシーンに配置されたかを理解するのは良いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to understand a template’s uses before you extend it to make your own app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるひな形の用途を、独自アプリ作成のためにあなたがそれを拡張する前に理解することは大切です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to understand the relationship that a storyboard has to the code you write.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>大切なのは、この関係を理解することです、それはストーリーボードがあなたが書くコードに対して持つ関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to understand when these methods get called, so you can set up or tear down the views you’re displaying at the appropriate step in the process—something you’ll need to do later in the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要なことは、それらのメソッドがいつ呼び出されるか理解することです、そうすればあなたはあなたが表示しているビューの準備や解体がこの一連の過程の適切な段階でできます—それはあなたが後にこのレッスンでする必要があることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to update the button selection states when the view loads, not just when the rating changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが重要なのは、ボタン選択状態をビューがロードするときに更新するためです、格付けが変化したちょうどその時ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s most efficient for table views to only ask for the cells for rows that are being displayed, and that’s what tableView(_:cellForRowAtIndexPath:) allows the table view to do.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルヒューにとって最も効率が良いのは、表示されている行のためのセルだけを要求することです、そしてそれはtableView(_:cellForRowAtIndexPath:)がテーブルビューに可能にすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s time to build a basic interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本インターフェイスを作る時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Jump Right In</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すぐ始めよう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like in an if statement, a where clause can be added to a case to further scope the conditional statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ちょうどif文のように、where節が条件に追加されることでその条件文をもっと詳しく調べるものにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just use the menu item in the next step to create the project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単にそのメニュー項目を次のステップでプロジェクトを作成するのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Know when to use implicit and when to use explicit type declarations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いつ暗黙的なそしていつ明示的な型宣言を使うかを知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Language: Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言語：Swift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Later, you’ll create an action to reset the label text to a default value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で、あなたは、ラベルテキストを省略時の値に設定し直す、あるアクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Later, you’ll link these buttons to actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で、あなたはこれらのボタンをアクションと結び付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Later, you’ll need this identifier to identify the segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で、あなたはこの識別子をセグエを識別するのに必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lay out a UI that automatically adapts to the user’s device size using Auto Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるUI、Auto Layout（自動レイアウト、自動配置）を使ってユーザーのデバイス（機器）の大きさに自動的に適応するものを設置する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Layout guides are visible only when you drag or resize objects next to them; they disappear when you let go of the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レイアウトガイドは、あなたがオブジェクトをドラッグやリサイズするときにのみ見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn the Essentials of Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftの最重要事項を学ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learning Objectives</seg>
      </tuv>
      <tuv lang="JA">
        <seg>学習する目標</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave that as is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそのままにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave the rest of the options as they are and click Connect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りのオプションはそれらのままにしておき、Connectをクリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave the rest of the options as they are.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りのオプションはそれらのままにしておきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave these defaults as they are, and click Create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの初期値はそれらのままにしておきます、そしてCreateをクリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s get started!</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さあ始めましょう！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leverage optional binding to check for complex conditions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル束縛を駆使して、複雑な条件について確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, method and function declarations are written the same way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じように、メソッドや関数宣言も同じ方法で記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load Initial Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期データのロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Look at the outline view to see which UI elements have been added to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビュー（外観図）で見て、どんなUI要素があなたのシーンに加えられたか確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MVC is central to a good design for any iOS app, and so far, the FoodTracker app has been built along MVC principles.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MVCは、iOSアプリのための良い設計として中心的なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make a class conform to a protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスをプロトコルに準拠させる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure that you use these versions of Xcode and the iOS SDK as you work through this guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれらのバージョンのXcodeとiOS SDKをあなたがこのガイドを進めるときに使うことを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the Custom checkbox next to this field is selected:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この欄の隣のCustomチェックボックスが選択されることを確かめてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the Language option is set to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>LanguageオプションがSwiftに設定されていることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the names of the images in your project match the names you write in this code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプロジェクトにおける画像の名前があなたがこのコードに書いた名前と合致することを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the project navigator is open in the navigator area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータ（案内機能）がナビゲータ区画で開いていることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the text field is still selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がまだ選択されていることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the “Also create XIB file” option is unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Also create XIB file」オプションが選択されないことを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure this line of code is inside of the outer if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行がその外側のif文の内側にあるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure you select the iPhone 6 Simulator, not an iOS Device.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必ずiPhone 6 Simulatorを選ぶようにしてください、iOS Deviceではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Making sure your layout is robust and extensible from the start ensures that you have a solid foundation to build upon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのレイアウトががっしりして拡張可能であるのをその始まりから確かにすることは、あなたがその上に構築するための強固な基盤を持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many UIView subclasses are highly specialized in appearance and behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くのUIViewサブクラスは、外観と挙動において高度に特殊化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many of the classes you’ll be introduced to in the lessons come from UIKit, so you’ll see this import statement often.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれらのレッスンで引き合わされるクラスの多くは、UIKitから来ます、それであなたはこのインポート文を頻繁に見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods are explicitly tied to the type they’re defined in, and can only be called on that type (or one of its subclasses, as you’ll learn about soon).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドたちは、それらがその中で定義されるところの型に明確に縛りつけられます、そしてその型（またはそれのサブクラスの１つ、あなたはまもなく学びます）の上でだけ呼び出されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods on a subclass that override the superclass’s implementation are marked with override—overriding a method by accident, without override, is detected by the compiler as an error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラス上のメソッドでスーパークラスの実装をオーバーライドするものは、overrideで印を付けられます—間違ってあるメソッドをオーバーライドする、overrideなしですると、コンパイラによってエラーとして検知されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Model-View-Controller (MVC)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モデル-ビュー-コントローラ（MVC）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More often, you’ll see them used to keep track of outlets between an interface and source code (which you’ll learn about in a later lesson) and in the APIs you’ll see throughout the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より多くの場合、あなたはインターフェイスとソースコードの間のアウトレットの最新状態を把握するのに使われるそれらを見るでしょう（それはあなたが後のレッスンの方々で学びます）そしてあなたがレッスンの至るところで見るAPIにおいて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of these templates have preconfigured interface and source code files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのひな形のほとんどは、あらかじめ構成されたインターフェイスとソースコード・ファイルを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Navigation bars get their title from the view controller that the navigation controller currently displays—they don’t themselves have a title.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーはそれらのタイトルを、ナビゲーションコントローラが現在表示しているビューコントローラから得ます—それらは自身ではタイトルを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>New document that provides a hands-on introduction to iOS app development using Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実践入門書をSwift使用のiOSアプリ開発に提供する新しい文書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, add a label (UILabel) at the top of the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、ラベル（UILabel）をこのシーンの一番上に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, configure this bar to add a title to this scene as well as two buttons, Cancel and Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、このバーを構成して、タイトルをこのシーンに加えます、それだけでなく２つのボタン、Cancel（キャンセル）とSave（保存）も同様に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, write the code to set the appropriate image for a button at the right time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、コードを書いて適切な画像をボタンに対して正しいときに設定するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you need a persistent path on the file system where data will be saved and loaded, so you know where to look for it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたはファイルシステム上の永続パス、そこにおいてデータ化保存されロードされるところを必要とします、それであなたはどこでそれを捜すかがわかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you need to add a few sample images to your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたが必要とするのは、いくつかの見本画像をあなたのプロジェクトに加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll add a button to this navigation bar to transition to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは、あるボタンをこのナビゲーションバーに加えて、食事シーンに場面転換するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll add images of an empty and filled-in star to the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは空のそして塗りつぶされた星の画像をボタンに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll want to give users the ability to delete a meal from the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは食事リストからある食事を削除する能力をユーザに与えようと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll want to give users the ability to edit an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは、ユーザに既存の食事を編集する能力を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that because you’re not using Interface Builder, you don’t need to define your action method with the IBAction attribute; you just define the action like any other method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意することは、あなたがインターフェイスビルダーを使っていないことです、あなたがしなくていもいいのは、あなたのアクションメソッドをIBAction属性とともに定義することです；あなたは単にこのアクションをあらゆる 他のメソッドと同じように定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the status bar disappears in landscape orientation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>横向きではステータスバーが見えなくなるのを観察してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note the exclamation point at the end of the declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意すべきはこの宣言の終わりの感嘆符です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, clicking any of the buttons at this point should still call ratingButtonTapped(_:) and log the message to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意してください、いずれかのボタンをクリックすることはこの時点では依然としてratingButtonTapped(_:)を呼び出します、そしてメッセージをコンソールに記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice how let can be used in a pattern to assign the value that matched that part of a pattern to a constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにletがパターンの中で使われて、そのパターン部分に合致した値を定数に代入できるかに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice how self is used to distinguish the name property from the name argument to the initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにselfが使われることでnameプロパティがイニシャライザへのname引数から区別されるかに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the initializer for the Square class has three different steps:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Squareクラスのためのイニシャライザが３つの異なるステップを持つことに注意してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that this operation has an exclamation mark (!) instead of a question mark (?) at the end, like you’ve seen so far with type cast operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注目することは、この演算子が感嘆符（!）をその終わりに持つことです、あなたがこれまで型キャスト演算子で見たように疑問符（?）ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that you didn’t have to specify the type of Default Text, because Swift’s type inference can see that you’re assigning to something of type NSString and can infer the type correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意することは、あなたが「Default Text」の型を指定する必要がなかったことです、なぜならSwiftの型推論はあなたが型NSStringの何かを割り当てているのを知ることができ、そして型を正確に推測できるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that you’ve been using the value 5 in your code, both for the number of stars and for the amount of space between stars.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意することは、あなたが5値をあなたのコードに使っていることです、星の数に対してと星の間の空きに対しての両方に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice the nil coalescing operator (??) in the name line.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子（??）をname行において注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice the two ways that the Hearts member of the enumeration is referred to above: When a value is assigned to the hearts constant, the enumeration member Suit.Hearts is referred to by its full name because the constant doesn’t have an explicit type specified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上で列挙のHeartsメンバーが参照される２つの方法に注意してください：ある値がhearts定数に割り当てられるとき、列挙メンバーSuit.Heartsはそれのフルネームで参照されます、なぜならその定数が明示的に指定される型を持たないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice there’s an Edit button on the left of the table view’s navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editボタンがテーブルビューのナビケーションバーの左にあることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now add a test case where the Meal object should fail initialization, but this time, try asserting that the initialization should succeed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度はMealオブジェクトが初期化を失敗するはずの場合のテスト事項を加えますが、しかし今回は、初期化が成功したはずだと表明しようとするものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now add a test case where the Meal object should fail initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度はMealオブジェクトが初期化を失敗するはずの場合のテスト項目を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it’s time to create the scene that shows the entire list of meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今や食事のリスト全体を表示するシーンを作るときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it’s time to think about what pieces of information the RatingControl class needs to have in order to represent a rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今やRatingControlクラスが格付けを表すために持つ必要がある情報の部品は何かについて考える時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that meals are saved at the appropriate times, you need to make sure that meals get loaded at the appropriate time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事が適切な時に保存される今、あなたは適切な時に食事がロードされるのを確実にする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that the FoodTracker app is implementing more advanced behavior and a different UI than in the previous lessons, you’ll want to remove the pieces you don’t need.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではFoodTrackerアプリは以前のレッスンに比べてより進んだ挙動と異なるUIを実装しています、あなたは必要としない部分を取り除きたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you can save and load an individual meal, you need to save and load the meal list whenever a user adds, edits, or removes a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがここの食事を保存してロード（読み込み）できる今、あなたは、ユーザが食事を追加、編集、削除するたびに、食事リストを保存したりロードする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you have a way to refer to the interface elements from code, you need to define a user-initiated event that triggers interaction between those elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今やあなたはコードからこれらのインターフェイス要素に言及する方法を持つので、あなたが必要とするのは、これらの要素間の相互作用の引き金として「ユーザが起こす」イベントの定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you have the logic implemented, you need to do a small amount of work in MealViewController.swift to make sure the UI updates correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがロジックを実装した今では、あなたが必要とするのはMealViewController.swiftで少しばかり作業してUIが正しく更新されるよう手配することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now when you click the Add button (+) and click Cancel instead of Save, you should navigate back to the meal list without adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではあなたがAddボタン（+）をクリックしてCancelボタンをSaveボタンの代わりにクリックした時、あなたは新しい食事を追加することなく食事リストに導かれて戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now when you click the Add button (+), create a new meal, and click Save, you should see the new meal in your meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではあなたがAddボタン（+）をクリックして、新しい食事が作成され、そしてSaveをクリックする時、あなたは新しい食事をあなたの食事リストの中に見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now when you click the Add button (+), the Save button is disabled until you enter a valid (nonempty) meal name and dismiss the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではあなたがAddボタン（+）をクリックする時、Saveボタンはあなたが有効な（空でない）食事名を入力してキーボードを片付けるまで使用不能にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you need to create the actual unwind segue to trigger this action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあなたが必要とするのは、このアクションメソッドを引き起こす、実際の巻き戻しセグエを作成することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you need to display this data in the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあなたが必要とするのは、このデータをUIに表示することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you’ll create a data model to store the information that the meal scene needs to display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今あなたはあるデータモデルを作成して、食事シーンが表示するために必要とする情報を格納しようとしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, add a button (UIButton) to the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、ボタン（UIButton）をUIに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, connect that gesture recognizer to an action method in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、このジェスチャリコグナイザをあなたのコードのアクションメソッドに接続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, connect the label to your code in the same way you connected the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたがテキスト欄を接続したのと同じ方法でラベルをあなたのコードにつないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, if a save fails, you’ll see a message printed in the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今では、保存が失敗するならば、あなたはコンソールにプリントされたメッセージを見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, implement a method to load saved meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、保存された食事をロードするメソッドを実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, open your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたのストーリーボードを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, remove the action method that corresponds with the button you deleted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたが削除したボタンに対応するアクションメソッドを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, the buttons should be side by side.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今や、ボタンは横に並んでいるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, when users tap the Save button, they navigate back to the meal list scene, during which process the unwindToMealList(_:) action method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今では、ユーザがSaveボタンをタップする時、彼らは食事シーンリストへ導かれて戻ります、その処理の間にunwindToMealList(_:)アクションメソッドが呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, you need to implement the functionality necessary to change the image in this image view at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在、あなたが必要とするのは機能性の実装で、実行時にイメージビュー内の画像を変更するのに不可欠です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, you’ll add a title (to the meal list) and a button (to add additional meals) to the navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたはタイトル（食事リストに）とボタン（追加の食事を加えるために）をナビゲーションバーに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Object library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Older APIs used selectors to dynamically invoke methods at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>古いAPIは、実行時に動的にメソッドを発動するためにセレクタを使いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, select the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、テーブルビューセルを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, the icon connecting the controllers is the root view controller relationship.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、コントローラ同士を接続しているアイコンは、ルートビューコントローラ関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, click the Stack button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの右下で、Stackボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, open the Pin menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの１番下右で、Pin（固定）メニューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, open the Resolve Auto Layout Issues menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンハスの一番下右で、Resolve Auto Layout Issues（自動レイアウトの問題を解決）メニューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, Control-drag from the Save button to the Exit item at the top of the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、Saveボタンから食事シーン上部のExit項目までコントロール-ドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, select the Add button (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、追加ボタン（+）を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, select the newly added segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、新しく加えられたセグエを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the left of the dialog that appears, select Source under iOS, then select Cocoa Touch Class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログの左で、SourceをiOSの下で選んでください、それからCocoa Touch Classを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the left of the dialog that appears, select Source under iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログの左で、SourceをiOSの下で選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the simulated iPhone screen, Simulator launches your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレートされた（模擬的に再現された）iPhone画面上で、シミュレータはあなたのアプリを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the empty star image you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが加えようと思う空の星の画像を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the filled-in star image you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが加えようと思う塗りつぶされた星の画像を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the image you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが加えたい画像を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the images you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが追加したい画像を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once a constant or variable has a type, that type can’t be changed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦ある定数または変数が型を持つならば、その型は変更されることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the most frequently used frameworks in iOS app development is UIKit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSで最も頻繁に使われるフレームワークの１つは、UIKitです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the most important differences between structures and classes is that structures are always copied when they are passed around in your code, but classes are passed by reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスと構造体の最も重要な違いの１つは、構造体はそれらがあなたのコードにおいてあちこち渡されるとき常にコピーされるということです、しかしクラスは参照によって渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the primary initializers for a class; a convenience initializer within a class must ultimately call through to a designated initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスの主要イニシャライザの１つ；あるクラス内部の便宜イニシャライザは、最後には指定イニシャライザを呼ぶことに至らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only use a forced cast if you’re absolutely certain that the cast will succeed—and that if it fails, something has gone wrong in the app and it should crash.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制キャストを使用するのは、あなたがそのキャストが成功するのを絶対に確信する—しかもそれが失敗するならば、何かがあなたのアプリでおかしくなっていてそれはクラッシュすべきである場合のみにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only use the unwrap operator if you’re sure the underlying value isn’t nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンラップ演算子を使うのは、その下に潜む値がnilでないのをあなたが確信している場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open FoodTrackerTests.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerTests.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Meal.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open MealTableViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open RatingControl.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Camera Roll, and click one of the images you added to Simulator to select it and set it as the image in the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カメラロールを開いて、あなたがシミュレータに加えた画像の１つをクリックしてそれを選択し、それをイメージビューの中の画像として設定してください。、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Xcode from the /Applications directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ApplicationsディレクトリからXcodeを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Your Storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open and switch between files in a project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクト内のいくつかのファイルを開いてその間で切り替える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリをユーティリティ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the App Store app on your Mac (by default it’s in the Dock).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>App StoreアプリをあなたのMacで開きます（初期状態でそれはDockにあります）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the FoodTrackerTests folder in the project navigator by clicking the disclosure triangle next to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerフォルダをプロジェクトナビゲータにおいてそれの隣の開示三角形をクリックすることで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Identity inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Identityインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Size inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sizeインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータとユーティリティ区画をXcodeツールパーのNavigatorとUtilitiesボタンをクリックすることで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard, Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボード、Main.storyboardを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard and look at the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開いて食事シーンを見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard, Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボード、Main.storyboardを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Option-click on String and Array in the code above while looking at this playground in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上でのコードのStringとArray上でオプション-クリックしてください、Xcodeのこのプレイグラウンドで見ている見ているうちに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionally, a function can have a return type, written after the -&gt;, which indicates what the function returns as its result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>随意に、関数は戻り型を持つことができます、それは-&gt;の後に書かれ、その関数がそれの結果として返すのは何かを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionals are pervasive in Swift, and are very useful for many situations where a value may or may not be present.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルはSwiftのすみずみまで広がります、そして値が存在するかも知れないし、しないかも知れない多くの局面でたいへん有益です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or click the Resolve Auto Layout Issues icon and choose Clear Constraints to remove all constraints on the UI elements, and then try following the steps above again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>またはResolve Auto Layout IssuesアイコンをクリックしてClear Constraints（制約の消去）を選んで、そのUI要素上の全ての制約を取り除いてください、それから上の工程にもう一度従うことを試みてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Organization Identifier: Your organization identifier, if you have one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組織識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Organization Name: The name of your organization or your own name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組織名：あなたの組織の名前またはあなた自身の名前。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other templates have more complex behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のひな形は、もっと複雑なふるまいをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Others, such as view controllers and gesture recognizers, define the behavior of your app but don’t appear onscreen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のもの、例えばビューコントローラやジェスチャリコグナイザ（ジェスチャー認識、身ぶり認識）は、あなたのアプリの挙動を定義しますが画面上には現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, downcast using as?.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、as?を使ってダウンキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the button is unselected and shows the empty star image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、ボタンは選択されず空の星のイメージを見せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the optional value is unwrapped and assigned to the constant after let, which makes the unwrapped value available inside the block of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ以外では、オプショナル値はアンラップされてletの後の定数に代入されます、それはアンラップされた値がコードのブロック（この区画、かたまり）内部で利用できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outside of the Meal class, you’ll access the path using the syntax Meal.ArchiveURL.path!.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>staticクラスの外側では、あなたは構文Meal.ArchiveURL.path!を使ってこのパスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Part of the Xcode workspace window that displays all the files in your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeワークスペースウインドウの一部、あなたのプロジェクトの全てのファイルを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Part of the Xcode workspace window that shows a list of objects that can be added to a storyboard, including each object’s name, description, and visual representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeワークスペースウインドウの一部、それは、ストーリーボードに加えることができるオブジェクトのリストを、各オブジェクトの名前、説明、そして視覚的な表現を含めて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Part of the Xcode toolbar that displays messages about the build process and other information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeツールバーの一部、ビルド過程や他の情報についてのメッセージを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass data between view controllers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データをビューコントローラ間で渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass data between view controllers using the prepareForSegue(_:sender:) method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データをビューコントローラ間でprepareForSegue(_:sender:)メソッドを使って渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing true to the animated parameter animates the presentation of the image picker controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueをanimatedパラメータに渡すと、イメージピッカーコントローラの実演を動画にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform an unwind segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエを実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Persist Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データ永続</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Playgrounds are great for learning and experimenting, and this one helps get you up to speed on fundamental Swift concepts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドは学習と体験に最適です、その１つであるこれはあなたに基礎的なSwift概念をよく把握させる助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prepare the Meal Scene for Navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンをナビゲーションのために整える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new cell height in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押して新しいセルの高さをあなたのストーリーボードにおいて表示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new placeholder text in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押して新しいプレースホルダテキストをテキスト欄において表示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new text in the button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押してボタンの新しいテキストを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new text in the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンを押して新しいテキストをラベルにおいて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Presumably, users should be able to choose a photo from a collection of photos, or take one of their own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>おそらく、ユーザができるべきは、写真を写真コレクションから選ぶこと、または彼ら独自のものの１つを取ることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preview Your Interface</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのインターフェースのプレビュー（下見）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preview a storyboard UI using the Preview assistant editor</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードUIをPreviewアシスタントエディタを使ってプレビュー（下見）する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preview your app periodically to check that everything is looking the way you expect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリを定期的にプレビューして、その全てがあなたが求める状態に見えることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Process User Input</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザ入力処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Process user input from a text field and display the result in the UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄からのユーザ入力の処理とUIでのその結果の表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Product Name: FoodTracker</seg>
      </tuv>
      <tuv lang="JA">
        <seg>製品名：FoodTracker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Property observers are called every time a property’s value is set, and can be used to perform work immediately before or after the value changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバは、あるプロパティの値が設定される時すべてに呼ばれます、そしてその値が変化する直前または直後に作業を実行するために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols are first-class types, which means they can be treated like other named types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、ファーストクラス型です、それはそれらが他の名前付きの型のように扱われることができるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols can require specific instance methods and type methods to be implemented by conforming types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、特定のインスタンスメソッドおよび型メソッドを準拠している型によって実装されるように要求できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols can require that conforming types have specific instance properties, instance methods, type methods, operators, and subscripts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、準拠している型が特定のインスタンスプロパティ、インスタンスメソッド、型メソッド、演算子、そしてサブスクリプトを持つことを要求できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Providing a value when you create a constant or variable lets the compiler infer its type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある定数または変数を作成する時に値を与えることは、コンパイラにそれの型を推論させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Push navigation is designed for a drill-down interface, where you’re providing more information about whatever the user selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プッシュナビゲーションが設計されるのは、ドリルダウンのインターフェイスに対してです—そこではあなたはユーザが選択したことが何であれもっと多くの情報を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Quit Simulator by choosing Simulator &gt; Quit Simulator (or pressing Command-Q).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータをSimulator &gt; Quit Simulatorを選ぶ（またはCommadキー + Qを押す）ことで終了してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read about types in the standard library by Option-clicking the type in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの型について読んでください、それにはその型をXcodeにおいてオプション-クリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall from earlier that the prepareForSegue(_:sender:) method is called before any segue gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初めの方を思い出してください、prepareForSegue(_:sender:)メソッドは何らかのセグエが実行される前に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that Size inspector appears when you select the fifth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、サイズインスペクタが現れるのはあなたが左から5番目のボタンをインスペクタ選択バーで選んだ時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that a comment is a piece of text in a source code file that doesn’t get compiled as part of the program but provides context or useful information about individual pieces of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメントがソースコードファイル中の一片のテキストであることを思い出してください、それはプログラムの一部としてコンパイルされませんがコードの個々の部分について前後関係や役立つ情報を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that an initializer is a method that prepares an instance of a class for use, which involves setting an initial value for each property and performing any other setup or initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、イニシャライザはあるメソッドです、それはあるクラスのインスタンスを使用するために準備します、それは各プロパティの初期値を設定することと何らかの他の準備や初期化を実行することを伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that an initializer is a method that prepares an instance of a class for use, which involves setting an initial value for each property and performing any other setup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、イニシャライザ（初期化子）はひとつのメソッドです、それはクラスのインスタンスを使用する段取りを整えます、それには各プロパティに対する初期値の設定となんらかの他の設定の実行を伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the Attributes inspector appears when you select the fourth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、Attributesインスペクタが現れるのはあなたが左から４番目のボタンをインスペクタ選択バーで選択した時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the Identity inspector lets you edit properties of an object in your storyboard related to that object’s identity, such as what class the object belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、同一性インスペクタは、あなたにあなたのストーリーボードのあるオブジェクトのプロパティをそのオブジェクトの同一性に関して、例えばどのクラスにそのオブジェクトが所属するかなどを、編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the Size inspector appears when you select the fifth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、このサイズインスペクタが現れるのはあなたが左から5番目のボタンをインスペクタ選択バーで選んだ時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the asset catalog is a place to store and organize your image assets for an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、アセットカタログはあなたのアプリのためのあなたの画像資産を格納し整理するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the appropriate place to do this type of setup work is in the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、この種の設定作業に適切な場所は、viewDidLoad()メソッドの中です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that this method is only called when a user taps the Save button, so you don’t need to account for the Cancel button in this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、このメソッドはユーザがSaveボタンをタップした時のみ呼ばれます、それであなたはCancelボタンをこのメソッドにおいて考慮する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that you can use the abbreviated form anytime the enumeration value’s type is already known.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、あなたはその列挙値の型がすでに知られているときはいつでも省略形を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remember that you can use code completion to insert this method skeleton quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>忘れないでください、あなたはコード補完を使ってこのメソッドの骨格をすばやく挿入できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rename the file MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルをMealViewController.swiftに改名してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeat steps 5–8 for as many images as you like.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>５–８の処置をあなたが望む画像の数だけ繰り返してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace the print statement with this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print文をこのコードと置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resize the label so that its right edge stretches to the right margin of the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのラベルをサイズ調整して、それの右端がラベルセルの右余白まで及ぶよう伸ばしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resize the left and right edges of the text field until you see three vertical layout guides: the left margin alignment, the horizontal center alignment, and the right margin alignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の左および右端を、あなたが３つの垂直レイアウトガイド：左余白調節、横中心調節、右余白調節を見るまでリサイズ（大きさ調節）してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return to the standard editor by clicking the Standard button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準エディタにStandardボタンをクリックすることで戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Review the Source Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースコードを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Revision History</seg>
      </tuv>
      <tuv lang="JA">
        <seg>改定履歴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right after the else clause, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節のすぐ後で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right after the if statement, add this else clause:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文のすぐ後で、else節を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the Single View Application template doesn’t do much—it just displays a white screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、Single View Applicationひな形（テンプレート）は、大したことはしません—それはただ白い画面を表示するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the method declaration is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今は、このメソッド宣言は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the scene that you see on the canvas contains a single view that’s managed by a view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、あなたがキャンバス上で見るこのシーンはただ１つのビューを含みます、それはビューコントローラによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the text field’s only content is its placeholder string, but the actual text a user enters could be longer than that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところは、テキスト欄の唯一の内容は、それのプレースホルダ文字列です、しかしユーザが入力する実際のテキストはそれよりも長いことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, this class simply inherits all the behavior defined by UIViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、このクラスはUIViewControllerで定義される挙動のすべてを単に継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, you have one button in the view, but you need five total.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、あなたはひとつのボタンをこのビューに持ちます、しかしあなたが必要なのは全部で５つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run an app in Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリをシミュレータ（模擬再現プログラム）で実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running your app in Simulator with no modifications is a good way to start developing that understanding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリをシミュレータで変更なしで実行してみるのは、ちゃんと理解して開発を始めるのによい方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Save and Load the Meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の保存とロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Save and Load the Meal List</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストの保存とロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sections are visual groupings of cells within table views, which is especially useful in table views with a lot of data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セクションは、テーブルビュー内でのセルの視覚的なグループ分けです、それはテーブルビューにおいて多くのデータがあるとき特に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select AppDelegate.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegate.swiftを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select ViewController.swift in the project navigator to view it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftをプロジェクトナビゲータにおいて選択してそれを眺めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select Cocoa Touch Class, and click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoa Touch Classを選んで、Nextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select Swift File, and click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift Fileを選んで、Nextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the Set Default Label Text button, and press the Delete key to delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Set Default Label Textボタンを選択します、そしてデリートキーを押してそれを消去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the Stack View object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Stack Viewオブジェクトを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the bar button item and open the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バーボタン項目を選択して、Attributesインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the checkbox next to Aspect Ratio.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Aspect Ratio（アスペクト比、縦横比率）の隣のチェックボックスを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the meal scene by clicking on its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンをそれのシーンドックをクリックして選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the rating control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the segue from the meal list scene to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストシーンから食事シーンへのセグエを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the table view controller by clicking on its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラを、それのシーンドック上でクリックすることで選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the table view controller by clicking on its scene dock until the entire scene has a blue outline around it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラを、それのシーンドック上でクリックすることで選択してください、シーン全体がその周りに青いアウトラインを持つまで続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the third method in the list to get the init?(coder:) initializer, and press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>３つ目のメソッドをリストで選択してinit?(coder:)イニシャライザを入手するようにして、リターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Setting the value of properties that the subclass, Square, declares.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラス、Squareが宣言するプロパティの値を設定する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simulator can model a number of different types of hardware—iPad, iPhone with different screen sizes, and so on—so you can simulate your app on every device you’re developing for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、多くの異なる型のハードウェア—iPad、画面サイズの異なるiPhone、その他—を模倣できます、それであなたはあなたのアプリをあなたがそれに対して開発をしている全てのデバイス上でシミュレート（模擬実験）できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simulator gives you an idea of how your app would look and behave if it were running on a device.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、あなたのアプリが、それがある機器（デバイス）で動作していた場合にどのように見えそして振る舞うか大体わかるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simulator opens in iPhone mode, just as you specified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、まさしくあなたが指定したように、iPhoneモードで開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simulator opens the Photos app and shows the images you added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータはPhotosアプリを開いてあなたが追加した画像を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Size inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サイズ（大きさ）インスペクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Small white squares that appear on a UI element’s borders when it’s selected so you can change its size on the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>小さな白い四角形、それはUI要素のへりに、それが選択されることであなたがそれの大きさをキャンバス上で変更できるときに、現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, the FoodTracker app has a single scene managed by a view controller that represents a screen where a user can add and rate a new meal: the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今までのところ、FoodTrackerアプリはただ１つだけのシーンを持ちます、それは、ビューコントローラによって管理され、ある画面を表現してそこでユーザが新しい食事を追加して格付けする：食事シーンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, the FoodTracker app has a single scene, whose UI is managed by a single view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これまで、FoodTrackerアプリはただ１つのシーンしか持たず、それはUIがただ１つのビューコントローラによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, you’ve been working exclusively with data types from the Swift standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これまでは、あなたはもっぱらSwift標準ライブラリからのデータ型を扱ってきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So it’s important to disable that interaction when it’s in this context.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それでそれがこの状況にある時はこの相互作用を作動しないようにすることが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So what needs to happen when a user taps the image view?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それでユーザがイメージビューをタップしたとき何が起こる必要があるでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some of these are elements that appear in the UI, such as buttons and text fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらのいくつかは、UIの中に現れる要素です、例えばボタンやテキスト欄など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, initialization of an object needs to fail, such as when the values supplied as the arguments are outside of a certain range, or when data that’s expected to be there is missing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>時には、オブジェクトの初期化は失敗する必要があります、例えば引数として提供された値が指定範囲外であるとき、またはそこにあるはずのデータが見つからないときなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, the didSet property observer is called immediately after the property’s value is set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、didSetプロパティオブザーバは、プロパティの値が設定された直後に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, the comment you added indicates that this is the section of your code that lists properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、あなたが加えたコメントが示すのは、これがあなたのコードのプロパティをリストする部分だということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, when a user enters a meal name, rating, and photo in the meal scene and taps the Save button, you want MealViewController to configure a Meal object with the appropriate information and pass it back to MealTableViewController to display in the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、ユーザが食事名、格付け、そして写真を食事シーンにおいて入力してSaveボタンをタップする時、あなたはMealViewControllerがひとつのMealオブジェクトを適切な情報とともに構成して、それをMealTableViewControllerに戻して渡して食事リストにおいて表示することを望みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, when an instance of MealViewController (the meal scene) gets created, its views should be populated with data from its meal property, if that data exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、MealViewControllerのインスタンス（食事シーン）が作成されるとき、それのビューは、それのmealプロパティからのデータで満たされるべきです、そのデータが存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifying the type of this action method to be UIButton means that only button objects can connect to this action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアクションメソッドの型をUIButtonに指定することは、ボタンオブジェクトだけがこのアクションに接続できるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stack views let you leverage the power of Auto Layout, creating user interfaces that can dynamically adapt to the device’s orientation, screen size, and any changes in the available space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、あなたに「自動レイアウト」の力の影響力を行使することで、機器の向き、画面サイズ、そして利用可能な空間における何らかの変更に動的に適応するユーザインターフェースを作成させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start any method that you want to run as a test with “test” in the title, and give it a specific title that’ll be easy to identify later on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タイトルに「test」を持ちあなたがテストとして実行を望むいずれかのメソッドで始めましょう、そして後でそれが識別しやすくなる具体的なタイトルをそれに与えましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by adding a Meal property to MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealプロパティをMealViewControllerに加えることで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by adding a text field (UITextField), one such subclass of UIView, to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようなUIViewのサブクラスの１つ、テキスト欄（UITextField）をあなたのシーンに加えることで始めましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by creating a simple action: when a user taps the Set Default Label Text button in your UI, set the label to display a default value, Default Text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>簡単なアクションを作成することで始めましょう：ユーザがあなたのUIの中のSet Default Label Textボタンをタップしたとき、そのラベルが初期値Default Textを表示するよう設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start with something simple, like getting a single red button to show up in your view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>始めに簡単なことをします、例えばひとつだけ赤いボタンをあなたのビューに表示させることのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Statements can be nested to create complex, interesting behavior in a program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文は入れ子にされることで複雑な、興味深い挙動をプログラムにおいて作ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stop dragging the button when you see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのドラッグをやめた時あなたが見るのはこのようなものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stop dragging the label when you see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルのドラッグをやめた時あなたが見るのはこのようなものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stop dragging the text field when you see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄のドラッグをやめた時あなたが見るものはこのようなものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Store New Meals in the Meal List</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事を食事リストに格納する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures are great for defining lightweight data types that don’t need to have capabilities like inheritance and type casting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体が最適なのは、軽量データ型の定義です、それは継承や型キャストなどの能力を持つ必要がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses include their superclass name after their class name, separated by a colon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスは、それらのスーパークラスの名前をそれらの名前の後に、コロンで区切って含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Support Deleting Meals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の削除のサポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift and Cocoa Touch</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftとCocoa Touch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift has two types of control flow statements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、２つの型の制御流れ文を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift is designed to provide seamless interoperability with Cocoa Touch, the set of Apple frameworks you use to develop apps for iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、Cocoa Touchに関して継ぎ目のない互換性を提供するように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift standard library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Switch statements must be exhaustive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>switch文は、徹底的でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Switches in Swift are quite powerful.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftのswitch（小枝の一打ち）はかなり強力です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table view cells come with a variety of predefined behavior and default cell styles.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルは、さまざまな前もって定義された挙動と省略時のセルスタイルを備えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a few moments to familiarize yourself with the main sections of the Xcode workspace.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少しだけ時間をとってXcodeワークスペースのさまざまな主要部門に慣れておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a minute to understand what’s happening in this line of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少し時間をとってコードのこの行で何が起こっているか理解しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a moment to understand the code in the file so far.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ちょっと時間をとって、このファイルのコードのある程度理解しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Target-action is a design in which one object sends a message to another object when a specific event occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットアクションは、ひとつの設計です、そこにおいて、あるオブジェクトは特定のイベントが起こるとき別のオブジェクトにメッセージを送ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test Your Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータをテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test a data model by writing and running unit tests</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストを書いて実行することでデータモデルをテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Text fields are sized based on their contents, which define their intrinsic content size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄が大きさを決められるのに基づくのは、それらのコンテンツ（内容）です、それは、それらの固有コンテンツサイズを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That action is changing a meal’s rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのアクションはある食事の格付けを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, the flow of the app is determined by events: system events and user actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、アプリの動作の流れを決定するのはイベント：システムイベントおよびユーザアクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means that the number of rows should be the number of Meal objects in your meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが意味するのは、行の数はあなたのmeals配列の中のMealオブジェクトの数であるべきだということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s all you need to delete for now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが今のところあなたが削除に必要なすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s all you need to do to see the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これがあなたが結果を見るために必要なすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s because the for-in loop just stacked the buttons on top of each other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その理由はfor-inループが単にボタンをそれぞれの上に積み重ねたからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s where actions come in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこでアクションの出番です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The #selector expression returns the Selector value for the provided method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>#selector式は、与えられたメソッドに対するSelector値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The .Bottom animation option shows the inserted row slide in from the bottom.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>.Bottomアニメーションオプションは、挿入される行を下から滑り込むように表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The .PhotoLibrary option uses Simulator’s camera roll.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>.PhotoLibraryオプションはシミュレータのカメラロールを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate.swift source file has two primary functions:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegate.swiftソースファイルは、２つの主要な機能を持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class also contains template implementations of important methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスはまた、いくつかの重要なメソッドのひな形実装を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class contains a single property: window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスは、ただ１つのプロパティ（特性）：windowだけを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IBOutlet attribute tells Xcode that you can connect to the nameTextField property from Interface Builder (which is why the attribute has the IB prefix).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IBOutlet属性がXcodeに教えるのは、あなたがnameTextFieldプロパティにインターフェイスビルダーから接続できるということです（それはその属性がIB接頭辞を持つことが理由です）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NSCoding protocol declares two methods that any class that adopts to it must implement so that instances of that class can be encoded and decoded:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingプロトコルは、２つのメソッドを宣言します、それは、それを採用するあらゆるクラスが実装しなければならないもので、それによってそのクラスのインスタンスが符号化と複合化ができるものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UITextFieldDelegate protocol contains optional methods, which means that you’re not required to implement them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerプロトコルは、いくつかのオプショナルのメソッドを含みます、それが意味するのは、あなたがそれらの実装を要求されないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ViewController class now has a reference to the rating control in the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerクラスは今ではストーリーボードの中の格付けコントロールに対する参照を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The addSubview() method adds the button you created to the RatingControl view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このaddSubview()メソッドは、あなたが作成したボタンをRatingControlビューに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The convenience keyword denotes this initializer as a convenience initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>convenienceキーワードは、このイニシャライザが便宜イニシャライザであることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The convenience keyword next to an initializer indicates a convenience initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるイニシャライザの隣のconvenienceキーワードは、便宜イニシャライザを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The decodeIntegerForKey(_:) method unarchives an integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeIntegerForKey(_:)メソッドは、整数をアンアーカイブします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The decodeObjectForKey(_:) method unarchives the stored information stored about an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeObjectForKey(_:)メソッドは、あるオブジェクトについての格納された情報をアンアーカイブします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The else clause executes when there’s no selected row in the table view, which means a user tapped the Add button to get to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節は、テーブルピューの中に選択された行がない場合に実行されます、そしてそれはユーザがAddボタンをタップして食事シーンに行ったことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The else clause gets executed when the meal scene was pushed onto the navigation stack on top of the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節が実行されるのは、食事シーンがナビゲーションスタック上へと、食事リストシーンの上に、プッシュされた時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encodeObject(_:forKey:) method encodes any type of object, while the encodeInteger(_:forKey:) method encodes an integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeObject(_:forKey:)メソッドは、どんな型のオブジェクトでも符号化します、一方encodeInteger(_:forKey:)メソッドは整数を符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encodeWithCoder(_:) method prepares the class’s information to be archived, and the initializer unarchives the data when the class is created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder(_:)メソッドは、クラスの情報をアーカイブされるように準備します、そしてイニシャライザはそのクラスが作成される時にデータをアンアーカイブします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encodeWithCoder(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The enumerate() method returns a collection that contains elements in the ratingButtons array paired with their indexes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>enumerate()メソッドはあるコレクションを返します、それはratingButtons配列の中の要素とそれらのインデックスを組みにして含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The indexOf(_:) method attempts to find the selected button in the array of buttons and to return the index at which it was found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexOf(_:)メソッドが試みるのは、選択されたボタンをボタン配列の中で見つけること、そしてそれが見つかったのはどのインデックスかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The info dictionary contains the original image that was selected in the picker, and the edited version of that image, if one exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>info辞書は、オリジナル画像、ピッカーにおいて選択されたもの、およびその画像の編集版、もしそれがあれば、を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The init?(name:photo:rating:) initializer should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(name:photo:rating:)イニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The required keyword means this initializer must be implemented on every subclass of the class that defines this initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>requiredキーワードは、このイニシャライザを定義するクラスの全てのサブクラスでこのイニシャライザが実装されなければならないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The self refers to the ViewController class, because it’s referenced inside the scope of the ViewController class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このselfはViewControllerクラスを参照します、なぜならそれがViewControllerクラス定義のスコープないが参照されるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sender parameter points to the object that was responsible for triggering the action—in this case, a button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>senderパラメーターは、このアクションを引き起こす原因となったオブジェクトを指し示します—この場合、ボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textFieldDidBeginEditing method gets called when an editing session begins, or when the keyboard gets displayed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textFieldDidBeginEditingメソッドは、編集期間が始まる時、またはキーボードが表示される時に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textFieldDidEndEditing(_:) method gives you a chance to read the information entered into the text field and do something with it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textFieldDidEndEditing(_:)メソッドがあなたに与えるのは、テキスト欄に入力された情報を読んでそれで何かをする機会です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The { get } following the simpleDescription property indicates that it is read-only, meaning that the value of the property can be viewed, but never changed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>{ get }が続いているsimpleDescriptionプロパティは、読み出し専用であることを示します、それはそのプロパティの値が見られることはできるが、決して変更されることができないのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class is where you write your custom app-level code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスは、あなたが、あなたあつらえの「アプリ階層」のコードを書く場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IBAction attribute indicates that the method is an action that you can connect to from your storyboard in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IBAction属性が示すのは、このメソッドは、インターフェイスビルダーの中のあなたのストーリーボードからどこかへあなたが接続できるアクションだということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static keyword indicates that this constant applies to the structure itself, not an instance of the structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>staticキーワードが示すのは、この定数が構造体それ自体に適用されるということです、構造体のインスタンスにではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Meal class is a perfect candidate for unit testing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealクラスは、ユニットテストの完璧な有資格者です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The layoutSubviews method gets called at the appropriate time by the system and gives UIView subclasses a chance to perform a precise layout of their subviews.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>layoutSubviewsメソッドは、適切な時にシステムによって呼ばれます、そしてUIViewサブクラスにそれのサブビューの正確なレイアウトを実行する機会を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The weak keyword means that it’s possible for that property to have no value (be nil) at some point in its life.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーワードweak（弱い）が意味することは、そのプロパティにはそれの有効期間のある時点で値を持たない（nilである）ことが可能だということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The completion parameter refers to a completion handler, a piece of code that executes after this method completes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>completionパラメータは、完了ハンドラを参照します、それはこのメソッドが完了した後に実行されるコード片です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift standard library is a set of data types and capabilities designed for Swift and baked into the language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリは、Swift用に設計されたデータ型と能力一式であり言語に練り入れられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore (_) represents a wildcard, which you can use when you don’t need to know which iteration of the loop is currently executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンダースコア（_）は、ワイルドカード（万能札）を表します、それはあなたがループのどの繰り返しを目下実行しているか知る必要がない場合に使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Attributes inspector appears when you click the fourth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタは、あなたがインスペクタバーの左から４番目のボタンをクリックすると現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Object library appears at the bottom of the utility area on the right side of Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリは、Xcodeの右側ユーティリティ区画の１番下に見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Size inspector appears when you select the fifth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サイズインスペクタが現れるのはあなたが左から5番目のボタンをインスペクタ選択バーで選んだ時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The asset catalog is a place to store and organize your image assets for an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログは、アプリのためのあなたの画像資産を保管して整理するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The half-open range operator (..&lt;) doesn’t include the upper number, so this range goes from 0 to 4 for a total of five loop iterations, drawing five buttons instead of just one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子（..&lt;）は、高い方の数を含みません、それでこの範囲は0から4になり合計５回ループを繰り返して、５つのボタンを描画します、１つではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The outline view—which appears on the left side of the canvas—lets you see a hierarchical representation of the objects in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビュー—キャンバスの左側に現れます—は、あなたのストーリーボードの中のオブジェクトの階層表現をあなたに見させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The project navigator displays all the files in your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータは、あなたのプロジェクト内のすべてのファイルを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view controller whose contents are displayed at the beginning of a segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューコントローラは、あるセグエの始まりでコンテンツが表示されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view controller whose contents are displayed at the end of a segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューコントローラは、セグエの終わりでコンテンツが表示されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view hierarchy defines the layout of views relative to other views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビュー階層は、ビューの配置を他のビューとの関係で定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Identity inspector lets you edit properties of an object in your storyboard related to that object’s identity, such as what class the object belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタは、あなたにあなたのストーリーボードのあるオブジェクトのプロパティをそのオブジェクトの同一性に関して、例えばどのクラスにそのオブジェクトが所属するかなどを、編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nil coalescing operator is used to return the value of an optional if the optional has a value, or return a default value otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子は、オプショナルが値を持つならばオプショナルの値を、またはそうでなければ省略時の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The storyboard entry point is set to the navigation controller because the navigation controller is now a container for the table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードエントリポイントは、ナビゲーションコントローラに設定されます、なぜならナビゲーションコントローラは、現在テーブルビューコントローラのコンテナ（容れ物）だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift standard library includes a structure called Array that works well for tracking lists of items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリは、ある構造体を含みます、それはArrayと呼ばれるものでいくつかの項目からなるリストの追跡に対して申し分なく働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Action Segue menu allows you to choose what type of segue to use to transition from the meal list to the new meal view controller when the user taps the Add button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Action Segueメニューがあなたに選ばせるのは、ユーザが追加ボタンをタップする時、どんな種類のセグエを使って食事リストから新しい食事ビューコントローラに画面転換するかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The App Delegate Source File</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリデリゲート・ソースファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Group option defaults to your app name, FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Groupオプションは、初期状態であなたのアプリ名、FoodTrackerです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Pin menu should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pinメニューはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Scheme pop-up menu lets you choose which Simulator or device you’d like to run your app on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Schemeポップアップメニューは、あなたにどのシミュレーターまたはデバイスであなたのアプリを実行したいのか選ばせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Single View Application template comes with a few source code files that set up the app environment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Single View Applicationひな形は、いくつかのソースコードファイルを備えています、それはアプリ環境を準備します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Single View Application template has another source code file: ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Single View Applicationひな形は、もう一つソースコードファイル：ViewController.swiftを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift compiler knows this, and offers a fix-it to make this change in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftコンパイラはこれを知っています、そして修正を提案してこの変更をあなたのコードにしようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Tap Gesture Recognizer appears in the meal scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tap Gesture Recognizerが食事シーンドックに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The View Controller Source File</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラ・ソースファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The XCTest framework, which this file imports, is Xcode’s testing framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XCTestフレームワーク、このファイルがインポートするもの、は、Xcodeのテスト用フレームワークです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Xcode app shows up as the first search result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeアプリが検索結果の最初に現れてきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Xcode welcome window appears.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeのWelcomeウインドウが現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Xcode window, which you use to manage and navigate through the files and resources in your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeウインドウ、あなたはそれを使って、あなたのプロジェクトのファイルやリソースを管理したりそれらの間を進んで行きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ability of the Swift compiler to determine the type of a value from context, without an explicit type declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の型を文脈から、明示的な型宣言なしに判断するSwiftコンパイラの能力、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The absence of a value or no value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるべき値がないまたはどんな値もない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app delegate creates the window where your app’s content is drawn and provides a place to respond to state transitions within the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリデリゲートは、ウインドウを作成し、そこであなたのアプリのコンテンツ（内容、表示したいこと）が描画され、アプリ内部の状態推移に対して反応を示す場所を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The appropriate method of presentation for this type of scene is a modal segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この種のシーンを表現する適切な手法は、モーダルセグエです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app’s response to user action is then reflected back in the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザアクションへのアプリの応答は、それからUIに反映されて返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arrow that points to the left side of the scene on the canvas is the storyboard entry point, which means that this scene is loaded first when the app starts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上でシーンの左側面を指し示す矢印はストーリーボードエントリポイントです、それは、アプリがスタートする時にこのシーンが最初にロードされることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The background of a storyboard where you add and arrange UI elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの背景、そこにあなたはUI要素を加え整えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The background of the storyboard is the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの背景は、キャンバスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior you just implemented is an example of the target-action pattern in iOS app design.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがたった今実装した挙動は、iOSアプリ設計におけるターゲットアクションパターンの１例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The blue layout guides help you place the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>青のレイアウトガイド（割り付け・配置目じるし）は、あなたがテキスト欄を設置するのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button changes to an Add button (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンが追加ボタン（+）に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button doesn’t do anything yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このボタンはまだ何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button text changes to Cancel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンテキストがCancelに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button text changes to Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンテキストがSaveに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buttons should be side-by-side.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンは横に並んでいるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The calls the helper method you just wrote to load the data when the view loads.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが加えたばかりのヘルパーメソッドを呼び出して、ビューがロードされる時にデータをロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The cell is nested under Table View Controller Scene &gt; Table View Controller &gt; Table View.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルは、Table View Controller Scene &gt; Table View Controller &gt; Table Viewの下に入れ子にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class title changes to MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスのタイトルをMealTableViewCellに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class title changes to MealTableViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスタイトルがMealTableViewControllerに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code comments explain the setUp() and tearDown() methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードのコメントは、setUp()とtearDown()メソッドを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code completion overlay shows up.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード補完重ね表示が現れてきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code to reset the value of the label is quite simple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルの値をリセットするコードは、ごく簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code within the else clause executes a method called popViewControllerAnimated, which pops the current view controller (meal scene) off the navigation stack of navigationController and performs an animation of the transition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節の内部のコードはpopViewControllerAnimatedと呼ばれるメソッドを実行します、それは現在のビューコントローラ（食事シーン）をnavigationControllerのナビゲーションスタックからポップして（取り出して）、転換アニメーションを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler also detects methods with override that don’t actually override any method in the superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイラはまた、overrideをもつメソッドで実際にはいかなるメソッドもスーパークラスにおいてオーバーライドしないものも検知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The console is a useful debugging mechanism that appears at the bottom of the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコーソールは、有用なデバッグの仕組みです、それはエディタ区画の下に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default image displays in the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期画像がイメージビューに表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delegate can use this information to save or clear data at the right time, dismiss the keyboard, and so on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先は、この情報を使ってデータを保存したり消去したりがちょうど良いとき、キーボードを片付けたときなどに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delegate may respond by for example, updating the appearance or state of itself or of other objects in the app, or returning a value that affects how an impending event is handled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先は、例えば、それ自身やアプリ中の他のオブジェクトの外観や状態を更新すること、またはすぐに起ころうとしているイベントが取り扱われる方法に影響を及ぼす値を返すことでで応答するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delegating object—in this case, the text field—keeps a reference to the other object—the delegate—and at the appropriate time, the delegating object sends a message to the delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任しているオブジェクト—この場合、テキスト欄—は、他のオブジェクト—委任先—への参照を保有します、そして適切なときに、委任しているオブジェクトはメッセージを委任先に送ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements in the stack view center horizontally:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューの中の要素は横方向の真ん中に置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements stay in the same position, but the stack view is now pinned to the navigation bar instead of the top margin of the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それぞれの要素は同じ位置のままです、しかしスタックビューは今ではナビゲーションバーに固定されます、ビューの上部余白ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements that appear in the UI are known as views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIの中に現れる要素は、ビューとして知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The empty star image appears when a button is unselected (.Normal state).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の星の画像が現れるのは、ボタンが選択されていないときです（状態.Normal）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fact that the 5 values can mean two different things only further complicates the task.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら5の値が２つの異なる事柄を意味できるという事実は、作業をよりいっそう複雑にするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The filled-in star image appears when the button is selected (.Selected state) and when the button is both selected and highlighted (.Selected and .Highlighted states), which occurs when a user is in the process of tapping the button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>塗りつぶされた星の画像が現れるのは、ボタンが選択されたとき（状態.Selected）そしてボタンが選択されるだけでなく強調もされるときです（状態.Selectedと.Highlighted）、それが起こるのはユーザがボタンのタップを進行中のときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final step to displaying data in the UI is to connect the code defined in MealTableViewController.swift to the meal list storyboard scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データをUIにおいて表示する最後の段階は、MealTableViewController.swiftにおいて定義されるコードを食事リストストーリーボードシーンに接続することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first scene that’s shown from a storyboard when an app starts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のシーン、それは、アプリがスタートする時にストーリーボードから見せられるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first item added to a navigation controller’s navigation stack, which is never popped off (removed from) the stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラの持つナビゲーションスタックに加えられた最初の項目、それは決してスタックからはじき出されません（削除されません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first item added to the stack becomes the root view controller and is never popped off (removed from) the navigation stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのスタックに追加される最初の項目は、ルートビューコントローラになります、そして決してそのナビゲーションスタックからはじき出される（取り除かれる）ことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line calls checkValidMealName() to check if the text field has text in it, which enables the Save button if it does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の行は、checkValidMealName()を呼ぶことでテキスト欄がそれの中にテキストを持つかチェックします、そしてそれは、Saveボタンをそれがそうならば利用可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line updates the appropriate entry in meals to store the updated meal information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の行は、mealsの中の適切な登録項目を更新して、更新された食事情報を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first of these is numberOfSectionsInTableView(_:), which tells the table view how many sections to display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの最初のものはnumberOfSectionsInTableView(_:)です、それはテーブルビューにどのくらい多くのセクションが表示されるかを教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first of these, imagePickerControllerDidCancel(_:), gets called when a user taps the image picker’s Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの最初のもの、imagePickerControllerDidCancel(_:)が呼ばれるのは、ユーザがイメージピッカーの「キャンセル」ボタンをタップした時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first two test cases should pass, and the last should fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の２つのテスト項目は通るはずです、そして最後のものは失敗するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The forced form, as!, attempts the downcast and force-unwraps the result as a single compound action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制形式、as!は、ダウンキャストと結果の強制アンラップを単一の複合動作として試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The frame locations are set equal to a standard button size of 44 points and 5 points of padding, multiplied by index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配置枠の場所は、標準ボタンサイズの44ポイントと5ポイントの詰め物、それにindexを掛けたものと等しく設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The functions menu lets you jump to a section in your code quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ここにリストされた// MARK:であなたが示した部門に気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The graphical environment for building a UI in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの中にある図を用いたUI作成用環境。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The half-open range operator (..&lt;) doesn’t include the upper number, so this range goes from 0 to 3 for a total of four loop iterations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子（..&lt;）は、上位の数を含みません、それでこの範囲は合計４回のループ繰り返しに対して0から3まで進みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation should be empty at this point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実装はこの時点では空のはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実装はこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The individual rows in a table view are managed by table view cells (UITableViewCell), which are responsible for drawing their contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビュー内の個々の行は、テーブルビューセル（UITableViewCell）によって管理されます、それはその内容を描画する責任を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The interface you specified in your storyboard looks correct, so why is this happening in the iPhone preview?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのストーリーボードの中で指定したインターフェースは正しく見えます、なのになぜこれがiPhoneプレビューで起こったのでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last data source method, tableView(_:cellForRowAtIndexPath:), configures and provides a cell to display for a given row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後のデータソースメソッド、tableView(_:cellForRowAtIndexPath:)は、ひとつのセルを構成および提供します、それによって指定されたある行を画面表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last test case is expected to fail because you assert that the object is non-nil even though it’s actually nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後のテストケースは失敗するだろうと思います、なぜならあなたは、それが実際にはnilであるとしても、このオブジェクトは非nilであると表明するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last thing you need to do to set up the rating control is to give the ViewController class a reference to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールの設定としてあなたが最後にしなければならないことは、ViewControllerクラスにそれへの参照を持たせることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The layer of visual elements that lets a user interact with a piece of software.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>視覚的要素の階層（レイヤ）、それはユーザにソフトウェアのある部分と相互作用させます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lessons assume developer mode is enabled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンは、開発者モードが有効にされると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lessons build on each other, walking you through a step-by-step process of creating a simple, real-world iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レッスンは互いを足場として、あなたをある単純な、現実のiOSアプリを作成する段階的な過程を歩ませます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lessons use Xcode 7.0 and iOS SDK 9.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンはXcode7.0とiOS SDK 9.0を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The line after it, which is part of the template implementation, deletes the corresponding row from the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの後の行、ひな形実装の一部であるものは、対応する行をテーブルビューから消去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The list of items you added in the viewDidLoad() method should show up as cells in your table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがviewDidLoad()メソッドに加えた項目のリストが、セルとしてあなたのテーブルビューの中に姿を見せるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main types of tests you can write are functional tests (to check that everything is producing the values you expect) and performance tests (to check that your code is performing as fast as you expect it to).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが書くことができるテストの主な種類は、機能的なテスト（あらゆるものがあなたが予期する値を生み出していることを検査するため）と性能テスト（あなたのコードがあなたがそれがそうなると予想するほど速く実行していることを検査するため）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meal scene UI should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンUIは、このようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meal scene constraints and UI should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーン制約とUIは、このようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The member values of an enumeration are actual values, not just another way of writing their raw values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙のメンバー値は実際の値です、それら生の値をなにか別の方法で書くことではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The message is an action method defined in source code, and the target—the object that receives the message—is an object capable of performing the action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メッセージは、ソースコードにおいて定義されるアクションメソッドです、そしてターゲット—メッセージを受け取るオブジェクト—は、そのアクションを実行する能力のあるオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The message tells the delegate about an event that the delegating object is about to handle or has just handled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメッセージは、委任しているオブジェクトがまさに取り扱おうとしているまたはちょうど取り扱い終えたイベントについて委任先に教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method asks ViewController to present the view controller defined by imagePickerController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドがViewControllerに尋ねることはimagePickerControllerによって定義されるビューコントローラが存在するかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum size needed to display all the content in a view without clipping or distorting that content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューの中の全ての内容を、その内容を切り詰めたり崩したりすることなく表示するために必要な最小サイズ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of that delegate protocol is UIImagePickerControllerDelegate, and the object that you’ll define as the image picker controller’s delegate is ViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先プロトコルの名前はUIImagePickerControllerDelegateです、そしてあなたがイメージピッカーコントローラの委任先として定義するオブジェクトはViewControllerです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The natural place to track this is in a custom view controller subclass that’s connected to the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この足跡を残しておく自然な場所は、カスタムビューコントローラのサブクラスの中です、それは食事リストシーンに接続されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The navigation bar extends its background to the top of the status bar, so the status bar doesn’t overlap with your content anymore.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーは、それの背景をステータスバーの上部まで拡げます、それでステータスバーはあなたのコンテンツと今ではもう重なりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The navigation bar should now have a title and display an Add button (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーは、現在タイトルを持ち、追加ボタン（+）を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new init?(coder:) initializer should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいinit?(coder:)イニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next data source method, tableView(_:numberOfRowsInSection:), tells the table view how many rows to display in a given section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のデータソースメソッド、tableView(_:numberOfRowsInSection:)は、テーブルビューがどのくらい多くの行を指定されたセクションに表示するかを教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step in creating the FoodTracker app’s functionality is implementing the ability for a user to add a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerアプリの機能性の作成における次の段階は、ユーザが新しい食事を追加する能力の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step in creating the unwind segue is to add an action method to the destination view controller (the view controller that the segue is going to).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエを作成する次の段階は、アクションメソッドをデスティネーション（行先）ビューコントローラ（セグエが向かっている先のビューコントローラ）に加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step in finishing the meal scene UI is adding a way to display a photo of a particular meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンUIを仕上げる次の段階は、ある食事の写真を表示する方法を加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next thing you’ll need to do is add buttons to your view to allow the user to select a rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあなたがする必要があることは、ボタンをあなたのビューに加えてユーザが格付けを選べるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object that receives the action message in the target-action pattern.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットアクションパターンにおいてアクションメッセージを受け取るオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object that sends the action message is usually a control—such as a button, slider, or switch—that can trigger an event in response to user interaction such as tap, drag, or value change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクションメッセージを送るオブジェクトは、たいていはコントロールです—例えばボタン、スライダー、またはスイッチなど—それはイベントを引き起こすことがユーザとの相互作用、たとえばタップ、ドラッグ、または値の変更などに応じて行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The operator returns an optional value, which will be nil if the downcast wasn’t possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子はオプショナルの値を返します、それはダウンキャストが可能でなかったならばnilになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The optional form, as?, returns an optional value of the type you are trying to downcast to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル形式、as?は、あなたがそれへとダウンキャストを試みている型のオプショナル値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The period during which a program is executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプログラムが実行されている始めから終わりまでの期間。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The preview shows that the UI looks as expected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプレビューが見せるのは予想通りのUIです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The process of attempting to assign an optional value to a constant in a conditional statement to see if the optional contains an underlying value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプショナル値を、そのオプショナルがその裏に値を含んでいるか知るために、条件文の中の定数に割り当てようと試みる処理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The process of inserting string representations of constants, variables, literals, and expressions into longer strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数、変数、リテラル、そして式の文字列表現をより長い文字列に挿入する処理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol can then be adopted by a class, structure, or enumeration to provide an actual implementation of those requirements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、それからクラス、構造体、または列挙によって採用されて、実際の実装をそれらの要件に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol doesn’t actually provide an implementation for any of these requirements—it only describes what an implementation will look like.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは実際は実装をこれらの要件のどれにも提供しません—それはある実装がどんなふうかを記述するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol that defines a text field’s delegate is called UITextFieldDelegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の委任先を定義するプロトコルは、UITextFieldDelegateと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The prototype table view cell UI looks finished.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>試作品テーブルビューセルUIは完成して見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The push-style navigation you get by using the show segue is working just as it’s supposed to—but it’s not quite what you want when adding items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが表示セグエを使って得たこのプッシュ形式ナビゲーションは、まさにそれがしなければならない通りに機能しています—しかしそれは完全には項目を加える時にあなたが望むことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The question mark (?) means that this is a failable initializer that might return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>疑問符（?）は、それが失敗できるイニシャライザであるのを意味し、それはnilを返すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rating control will let users choose 0, 1, 2, 3, 4, or 5 stars for a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールは、ユーザに０、１、２、３、４、または５個の星をある食事に対して選ばせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The red square is the button you added in the initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この赤い四角は、あなたがイニシャライザに加えたボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remaining lessons are each accompanied by an Xcode project file that shows an example of how your code and interface should look at the end of the lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りのレッスンは、それぞれひとつのXcodeプロジェクトファイルを伴います、それはあなたのコードとインターフェイスがレッスンの終わりでどのように見えるはずかを例示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The representation or structure of data within an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリ内のデータの描写または構造。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the declaration declares a method by the name of setDefaultLabelText(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>宣言の残りは、setDefaultLabelText(_:)の名前でメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the declaration declares a variable of type UITextField named nameTextField.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この宣言の残りは、型UITextFieldで名前がnameTextFieldの変数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the elements in the stack view reposition themselves appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューの中の残りの要素は、それら自身で適切に再び位置決めをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the raw values are assigned in order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りの生の値は、順に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of this lesson assumes you have three different images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの残りは、あなたが３つの異なる画像を持つと仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value of decodeObjectForKey(_:) is AnyObject, which you downcast in the code above as a String to assign it to a name constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeObjectForKey(_:)の戻り値はAnyObjectです、それは、あなたが上のコードにおいてStringとしてダウンキャストして、それをname定数に割り当てています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The save location defaults to your project directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>保存場所は、初期状態であなたのプロジェクトディレクトリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The scene you see by default in your storyboard shows a generalized version of your interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に何もしない状態ではあなたのストーリーボードにおいてあなたが見るシーンは、あなたのインターフェースの一般化したバーションを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The screen that you see in the app will show the UI defined in this scene in your storyboard and any behavior defined in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアプリにおいて見る画面は、あなたのストーリーボード中のこのシーンに定義されるUIと、ViewController.swiftにおいて定義されるいくらかの挙動を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second UIImagePickerControllerDelegate method that you need to implement, imagePickerController(_:didFinishPickingMediaWithInfo:), gets called when a user selects a photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが実装する必要のある２番目のUIImagePickerControllerDelegateメソッド、imagePickerController(_:didFinishPickingMediaWithInfo:)が呼ばれるのは、ユーザがある写真を選択した時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second line of code in the method should now look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドのコードの２行目は今ではこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second line reloads the appropriate row in the table view to display the changed data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２行目は、テーブルビューの中の適切な行を再読み込みして、変更されたデータを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second line sets the title of the scene to that text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２行目は、このシーンのタイトルを、そのテキストに設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second method that you need to implement, textFieldDidEndEditing(_:), is called after the text field resigns its first-responder status.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが実装する必要がある２つ目のメソッド、textFieldDidEndEditing(_:)は、テキスト欄がそれのファーストレスポンダ状態を破棄した後に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of view controllers managed by a particular navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとまとめにされたビューコントローラで、ある特定のナビゲーションコントローラによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of Apple frameworks and technologies used to develop iOS apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリを開発するために使われるAppleフレームワークとテクノロジーのひとそろい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of view controllers managed by a particular navigation controller is called its navigation stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある特定のナビゲーションコントローラによって管理されるある一組のビューコントローラは、それのナビゲーションスタックと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stack view rearranges your UI elements to fill the gap that the button left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、あなたのUI要素を配列し直して下と左の隙間を埋めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view cells now look taller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルは今ではより長く見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view controller is set as the initial view controller in your storyboard, making it the first scene that loads on app launch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラは、あなたのストーリーボードの冒頭ビューコントローラとして設定され、それがアプリの起動でロードされる最初のシーンにされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view controller is the navigation controller’s root view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラは、ナビゲーションコントローラの持つルートビューコントローラです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view defaults to using dynamic data, and because you’ll need to load data in code, this is what you want it to do—you just haven’t implemented that behavior yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは初期状態で動的データを使います、そしてそのためあなたはコードにおいてデータのロードを必要とします、これはあなたがそれに行うのを望むことです—あなたは単にその挙動をまだ実装していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view is nested under Table View Controller Scene &gt; Table View Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは、Table View Controller Scene &gt; Table View Controllerの下に入れ子にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The task now is to pass the Meal object to MealTableViewController when a user taps the Save button and discard it when a user taps the Cancel button, switching from displaying the meal scene to displaying the meal list in either case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の作業はMealオブジェクトを、ユーザがSaveボタンをタップする時にはMealTableViewControllerに渡し、ユーザがCancelボタンをタップする時には廃棄して、両方の場合で食事シーンの表示から食事リストの表示へと切り替えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template implementation looks like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひな形実装はこのように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template implementation of this method includes a comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドのひな形実装はコメントを１つ含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template implementation of this method includes comments that were inserted by Xcode when it created MealTableViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの見本実装は、コメントを含みます、それは、XcodeによってそれがMealTableViewController.swiftを作成した時に挿入されたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template performs several tasks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このひな形はいくつかの作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The text field shouldn’t extend past the edge of the screen anymore.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄は、もはや画面の端を越えて広がってはいないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The text field, image view, and rating control should appear closer to the navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄、イメージビュー、そして格付けコントロールがナビゲーションバーのそばに現れるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The text field, label, and button are subviews of the content view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄、ラベル、そしてボタンは、コンテンツビューのサブビューです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of imagePickerController.sourceType is known to be UIImagePickerControllerSourceType, which is an enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerController.sourceTypeの型はimagePickerController.sourceTypeとして知られます、それは列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of dismissal depends on the type of presentation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>却下の種類は、表現の種類によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore (_) represents a wildcard, which you can use when you don’t need to know which iteration of the loop is currently executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンダースコア（_）は、ワイルドカード（万能札）を表します、それはループのどの繰り返しが現在実行されているかをあなたが知る必要がない時に使うことができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unit tests themselves are defined in a class, FoodTrackerTests, which inherits from XCTestCase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストそれ自身は、あるクラス、FoodTrackerTestsにおいて定義されます、それはXCTestCaseから継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user makes changes and taps the Save button, which updates the information and overwrites the previous entry in the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが変更を行って「Save」ボタンをタップします、するとそれは食事リストにおいて情報を更新して以前の登録項目を上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user needs to be able to select a rating by tapping a star, so you’ll replace the debugging implementation with a real implementation of the ratingButtonTapped(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが必要とするのは、格付けの選択がある星のタップによってできることです、それであなたはデバック実装を実際の実装のratingButtonTapped(_:)メソッドで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user performs actions in the interface that trigger events in the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、インターフェイスにおいていろいろな行動を行い、それはアプリにおいていろいろなイベントを引き起こします（ユーザアクション・イベント）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The window property is an optional, which means it may have no value (be nil) at some point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このウインドウプロパティはオプショナルです、それは、それがどこかの時点で値を持たない（nilである）かもしれないのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, if you need to make a change, you’ll only need to change the value in one place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それなら、あなたが変更する必要があるならば、あなたは単に一箇所で値を変えるのを必要とするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, you can click the Cancel button to dismiss the picker, or open Camera Roll and click an image to select it and set it as the image in the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのとき、あなたはCancelボタンをクリックしてピッカーを片付けることができます、またはCamera Rollを開いてある画像をクリックしてそれを選択し、それをイメージビューの中の画像として設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, you should see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それから、あなたはこのようなものを見るはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, you’ll define an action method to change the image when a tap occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうすれば、あなたはアクションメソッドを定義することで、タップが起こったとき画像を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are many ways to implement this, but you’ll focus on one that involves creating a custom view that you define in code and use in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを実装するためには多くのやり方があります、しかしあなたが焦点を合わせるものは、カスタムビューの作成を伴います、それはあなたがコードにおいて定義してあなたのストーリーボートで使うものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a corresponding initializer for each approach: init(frame:) for the frame and init?(coder:) for the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それぞれの取り組み方に合ったイニシャライザがあります：配置枠用のinit(frame:)とストーリーボード用のinit?(coder:)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a nuanced distinction between views and controls, which are specialized versions of views that respond to user actions in a specific way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある微妙な相違がビューと、ビューの特殊化版でユーザアクションに特定の方法で応答するコントロールの間にはあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s an even simpler way to include values in strings: Write the value in parentheses, and write a backslash (\) before the parentheses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いろいろな値を文字列の中に含めるさらに単純な方法があります：その値を丸括弧の中に書いてください、そして丸括弧の前にバックスラッシュ（\）を書いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s quite a lot happening in the condition for this if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このif文の条件にはなかなか多くの事が起こっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These constraints indicate spacing to the nearest leading, trailing, and top neighbors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの制約は、最も近い前方、後方、そして上方の隣りとの間隔を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These events result in the execution of the app’s logic and manipulation of its data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらのイベントは、アプリのロジックの実行とそれのデータの操作に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These lines of code encode the value of each property on the Meal class and store them with their corresponding key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのコード行は、Mealクラスでの各プロパティの値を符号化して、それらの対応するキーとともにそれらを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are written as part of the protocol’s definition in exactly the same way as for normal instance and type methods, but without curly braces or a method body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドは、プロトコルの定義の一部として、正確に通常のインスタンスおよび型メソッドと同じ方法で、しかし波括弧やメソッド本文なしで書かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These predefined methods allow the application object to talk to the app delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのあらかじめ定義されたメソッドは、アプリケーションオブジェクトがアプリデリゲートと話せるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These values will never change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの値は、決して変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are the building blocks for constructing your UI and presenting your content in a clear, elegant, and useful way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは、あなたのUIを組み立てるための、そしてあなたのコンテンツ（表示したいこと）をわかりやすく、優雅に、役に立つ形で提示するための建築ブロックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They become red when they are selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらが赤くなったらそれらが選択されたということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can add additional behavior or customization, but must eventually call through to a designated initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは追加の挙動または注文を加えることができます、しかし最後には指定イニシャライザを呼び出すことに至らなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They fully initialize all properties introduced by that class and call a superclass initializer to continue the initialization process up the superclass chain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは、そのクラスによって導入される全てのプロパティを完全に初期化して、スーパークラスのイニシャライザを呼び出して初期化処理をスーパークラス連鎖を上って続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They’re especially useful for attempted type conversions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは型変換の企てに特に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This Shape class is missing something important: an initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このShapeクラスは、重要なあるものが見当たりません：つまりイニシャライザ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This adds the new meal to the existing list of meals in the data model.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは新しい食事を、データモデルにおいて既存の食事のリストに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This animates the addition of a new row to the table view for the cell that contains information about the new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、新しい食事についての情報を含んでいるセルのためのテーブルビューへ新しい行の追加をアニメーション（動画）にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This app shows a list of meals, including a meal name, rating, and photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアプリは、食事のリストを、食事名、レーティング（採点）、及び写真を含めて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This cell represents a prototype for the other cells; the design and behavior you give this cell will be used by the other cells in the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセルは、他のセルの原型（プロトタイプ）を表しています；あなたがこのセルに与える設計と挙動はテープルビューの中の他のセルによって使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This change makes it impossible for the user to tap the Done key before typing text into the text field, ensuring that users can never enter an empty string as a meal name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この変更は、ユーザにDoneキーのタップをテキスト欄にテキストをタイプするまでは不可能にして、ユーザが絶対に空の文字列を食事名として入力することがないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This change will make the default Return key on the keyboard more pronounced to the user by changing it into a Done key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この変更は、もともとはReturnキーであるものをそのキーボード上でユーザにより目立つようにそれをDoneキーに変えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code adds any meals that were loaded to the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは何らかの食事を加えます、それはmeals配列にロードされたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code adds any meals that were successfully loaded to the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、うまくロードされた食事があればmeals配列に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code animates the dismissal of the image picker controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、イメージピッカーコントローラの退去をアニメーションにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code checks whether a row in the table view is selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、テーブルビューの中のある行が選択されるかどうかを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code compares the segue identifiers against the identifier strings assigned to them earlier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、セグエ識別子を前にそれらに割り当てられた識別子文字列と比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code computes the location in the table view where the new table view cell representing the new meal will be inserted, and stores it in a local constant called newIndexPath.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードはテーブルビューの中の場所を算出します、そこは新しい食事を表している新しいテーブルビューセルが挿入されるところです、そしてそれをローカル定数newIndexPathに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code configures the meal property with the appropriate values before segue executes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、mealプロパティを適切な値を使ってセグエが終了する前に構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code creates a frame, and uses a for-in loop to iterate over all of the buttons to set their frames.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、配置枠を作成します、そしてfor-inループを使ってボタンのすべてに繰り返しそれらの配置枠を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code creates constants from the current text field text, selected image, and rating in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、そのシーンにおける現在のテキスト欄のテキスト、選択された画像、そして格付けから定数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code declares a property on MealTableViewController and initializes it with a default value (an empty array of Meal objects).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行は１つのプロパティをMealTableViewController上で宣言して、それを省略時の値で初期化します（Mealオブジェクトの空の配列）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code defines the basic properties for the data you need to store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、基本的なプロパティをあなたが格納しなければならないデータのために定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code disables the Save button while the user is editing the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、ユーザがテキスト欄を編集している間、Saveボタンを使用不能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code ensures that if the user taps the image view while typing in the text field, the keyboard is dismissed properly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードが請け負うのは、テキスト欄にタイプしている間にユーザがイメージビューをタップしたならば、キーボードがきちんと片付けられることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code fetches the Meal object corresponding to the selected cell in the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、テーブルビューにおいて選択されたセルに対応するMealオブジェクトを取ってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code fetches the appropriate meal in the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードはmeals配列の中の適切な食事を取ってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code iterates through the button array to set the state of each button according to whether its index in the array is less than the rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、ボタン配列じゅうを繰り返して、各ボタンの状態をそれの配列中でのインデックスが格付けより少ないかどうかによって設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code makes the table view show 1 section instead of 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、テーブルビューが０ではなく１つのセクションを表示するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code removes the Meal object to be deleted from meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、Mealオブジェクトを削除して、mealsから消去されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code saves the meals array whenever a meal is deleted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、食事が削除される時はいつでも、meals配列を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code saves the meals array whenever a new one is added or an existing one is updated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、meals配列を、新しいものが加えられるか既存のものが更新される時はいつでも保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code sets each of the views in MealViewController to display data from the meal property if the meal property is non-nil, which happens only when an existing meal is being edited.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、MealViewControllerの中の各ビューを設定して、mealプロパティからのデータをそのmealプロパティが非nilならば表示します、それは既存の食事が編集される時のみ起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code tries to downcast the destination view controller of the segue to a MealViewController using the forced type cast operator (as!).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、セグエのデスティネーション（行先）ビューコントローラをMealViewControllerへとダウンキャストすることを強制型キャスト演算子（as!）を使って試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code tries to downcast sender to a MealCell using the optional type cast operator (as?).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、senderをMealCellへとダウンキャストすることをオプショナル型キャスト演算子（as?）を使って試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code uses the as? operator so that it can return nil when appropriate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、as?演算子を使います、そのためそれは適切な時にnilを返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code uses the identity operator (===) to check that the object referenced by the saveButton outlet is the same object instance as sender.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは同一性演算子（===）を使って、saveButtonアウトレットによって参照されるオブジェクトがsenderと同じオブジェクトインスタンス部あることを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code uses the optional type cast operator (as?) to try to downcast the source view controller of the segue to type MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、オプショナル型キャスト演算子（as?）を使ってダウンキャストを試み、このセグエのソースビューコントローラを型MealViewControllerにしようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code will dismiss the meal scene without storing any information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、食事シーンを、何ら情報を格納せずに立ち去ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This comment indicates that this is the section of your code that lists actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントが示すのは、これがあなたのコードのアクションをリストする部分だということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This comment is used to organize your code and to help you (and anybody else who reads your code) navigate through it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたのコードを系統立てるために、そしてあなたが（およびあなたのコードを読む他の誰でも）それを見ていく助けとするために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This creates a Boolean value that indicates whether the view controller that presented this scene is of type UINavigationController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはあるブール値を作成します、それはこのシーンを表したビューコントローラが型UINavigationControllerであるかどうかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This creates a constant with the identifier you set in the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたがストーリーボードにおいて設定した識別子を使って定数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This creates a special type of bar button item that has editing behavior built into it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、それに組み込まれた編集挙動を持つ特別な型のバーボタン項目を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This declares a property on MealViewController that is an optional   Meal, which means that at any point, it may be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あるプロパティをMealViewController上で宣言します、それはオプショナルのMealです、それが意味するのはいずれかの時点でそれがnilであるかもしれないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This delegate method is in charge of managing the table rows when it’s in editing mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この委任先メソッドは、テーブル行の管理を、それが編集モードの時に託すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This ensures that the UI is always showing an accurate representation of the rating property value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、UIが常にratingプロパティ値の正確な表現を示していることを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event signifies that the user has pressed on a button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイベントが意味するのは、ユーザがあるボタン上を押したということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example declares a Shape class with a numberOfSides property and a simpleDescription() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はShapeクラスを宣言します、それはnumberOfSidesプロパティとsimpleDescription()メソッドを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example defines a new class, NamedShape, that has an initializer which takes in a name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある新しいクラス、NamedShapeを定義します、それは１つの名前を取るイニシャライザを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example defines the Square class, a subclass of NamedShape.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、Squareクラス、NamedShapeのサブクラスを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows the use of the optional type cast operator (as?) to check whether a shape in an array of shapes is a square or a triangle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、オプショナル型キャスト演算子（as?）の使用を示して、図形からなる配列の中のある図形が四角か三角かを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exclamation point indicates that the type is an implicitly unwrapped optional, which is an optional type that will always have a value after the value is first set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この感嘆符は、その型が暗黙的アンラップオプショナルであることを示します、それはある値をその値が最初に設定された後で常に持つことになるオプショナル型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file defines a custom subclass of UIViewController named ViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このファイルはViewControllerという名前のあつらえのUIViewControllerのサブクラス（下位クラス）を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This form of the operator will always return an optional value, and the value will be nil if the downcast was not possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子の形式は、常にオプショナル値を返します、そしてその値は、ダウンキャストが可能でなかったならばnilになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This form of the operator will trigger a runtime error if you try to downcast to an incorrect class type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子の形式は、あなたが不正なクラス型へダウンキャストを試みるならば実行時エラーを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function prints a message to the standard output, which in this case is the Xcode debug console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、あるメッセージを標準出力に印字します、それはこの場合ではXcodeデバッグコンソールになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation is only using the dismissViewControllerAnimated to dismiss the meal scene because you’ve only had to account for the Add button so far.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この実装は、ただdismissViewControllerAnimatedのみを使って食事シーンを却下します、なぜならあなたは今までのところAddボタンだけを考慮すれば良いからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer acts as one of the primary initializers for a class; any initializer within a class must ultimately call through to a designated initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、それがあるクラスの主要なイニシャライザの１つとしての役割をします；あるクラス内部のどんなイニシャライザでも、最終的にある指定イニシャライザに至るまで途切れず呼び出さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a collection of tuples—groupings of values—and in this case, each tuple contains an index and a button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはタプル—いくらかの値をまとめたもの—のコレクションです、そしてこの場合、各タプルはひとつのインデックスとひとつのボタンを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) know that the code in this section is related to data persistence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたが（そしてあなたのコードを読む他の誰でもが）この節のコードがデータ永続に関するものだと知る助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) know that this method is related to the navigation flow of your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたが（そしてあなたのコードを読む他の誰でもが）このメソッドがあなたのアプリのナビゲーションの流れに関するものだと知る助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) navigate through your code and identify that this section applies to the image picker implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはコメントであって、あなた（そしてあなたのコードを読む他の誰でも）があなたのコードをあちこち見ていく手助けをするもので、この部分がイメージピッカー実装に適用されるとわかるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) navigate through your tests and identify what they correspond to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたが（そしてあなたのコードを読む他の誰でもが）あなたのテストをあちこち見ていって、それらが何に対応するのかを確認する助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a helper method that you’ll use to update the selection state of the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはヘルパーメソッド（お手伝いさんメソッド）です、あなたはそれを使ってボタンの選択状態を更新するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a helper method to disable the Save button if the text field is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはヘルパーメソッドで、テキスト欄が空ならばSaveボタンを使用不能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a helper method to load sample data into the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはヘルパーメソッドで、見本データをアプリにロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはナビゲーションバーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is an important step—you’ll see why later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは重要な処置です—あなたはなぜかが後でわかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because an implicitly unwrapped optional is assumed to always have a value after that value is initially set, although the value can change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは暗黙的アンラップオプショナルが常にある値を、その値が最初に設定された後には持つと仮定されるためです、と言ってもその値は変更できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the meal scene is embedded in its own navigation controller when it’s presented in this manner, which means that navigation controller is what presents it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンがこのやり方で表現される時それ独自のナビゲーションコントローラに埋め込まれることから、それは、ナビゲーションコントローラがそれを表すものであるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the scene on the canvas is a generalized representation of your interface that can apply to any device in any orientation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはキャンバス上のシーンがあなたのインターフェイスのある一般化した表現であるからです、それは任意の機器に対して、任意の方向において適用可能なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called type inference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは型推論と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is known as string interpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは文字列補間として知られています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is now an if statement with an else clause that executes the code within the if statement only when isPresentingInAddMealMode is true, and executes the code within the else clause otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは今ではelse節を持つif文です、それはif文の内部のコードをisPresentingInAddMealModeがtrueである時のみ実行します、そしてそれ以外ではelse節の内部のコードを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the navigation bar provided by the navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ナビゲーションコントローラによって提供されたナビゲーションバーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is to make sure that the image doesn’t show an additional highlight during the state change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは画像がその状態変更の間に追加的な強調を見せないことを確実します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is where your implementation of UITextFieldDelegate methods comes in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、UITextFieldDelegateのあなたの実装のメソッドが登場するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lesson gets you familiar with Xcode, the tool you use to write apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンは、あなたをXcodeに親しませます、それはあなたがアプリを書くために使うツールです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lesson is focused on saving a meal list across FoodTracker app sessions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、FoodTrackerアプリのセッションをまたいで食事リストを保存することに焦点を当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the system call your action method when the button is tapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、システムにあなたのアクションメソッドをボタンがタップされる時に呼び出させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets you check for a successful downcast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはあなたにダウンキャストの成功を確認させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This line of code sets the image picker controller’s source, or the place where it gets its images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行は、イメージピッカーコントローラのソースを、またはそれがそれの画像を得るところの場所を、設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This makes the layout much more flexible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、このレイアウトを圧倒的に適応性に富んだものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the operator performs a forced type cast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、この演算子が強制型キャストを行うことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the static content you supplied in the storyboard doesn’t show up at runtime, so you can’t see it when you run the app—until you implement the data model behind it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、あなたがストーリーボードにおいて提供した静的データは実行時に現れないということです、それであなたはそれをアプリを実行した時に見ることがでません—あなたがそれの背後にデータモデルを実装するまでは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means you can click the back button in the meal scene to get back to the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これの意味は、あなたは戻るボタンを食事シーンで押すことで、食事リストに戻れるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means you can set it as the delegate of the text field and implement some of its behavior to handle the text field’s user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、あなたがそれをテキスト欄の委任先として設定してそれの挙動の幾つかを実装することで、テキスト欄のユーザ入力を取り扱えるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means you can write its value as the abbreviated form .PhotoLibrary instead of UIImagePickerControllerSourceType.PhotoLibrary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この意味は、あなたがその値をUIImagePickerControllerSourceType.PhotoLibraryではなく省略形.PhotoLibraryを使って書けるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method attempts to archive the meals array to a specific location, and returns true if it’s successful.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、meals配列を特定の場所にアーカイブして、それがうまくいくならばtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method attempts to unarchive the object stored at the path Meal.ArchiveURL.path! and downcast that object to an array of Meal objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、パスMeal.ArchiveURL.path!に格納されるオブジェクトを開くアーカイブして、そのオブジェクトをMealオブジェクトの配列へとダウンキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method gives you a chance to dismiss the UIImagePickerController (and optionally, do any necessary cleanup).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはあなたにUIImagePickerControllerを片付ける機会を与えます（そして随意に、何らかの不可欠な掃除を行います）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method gives you a chance to do something with the image or images that a user selected from the picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはあなたにある機会を与えるので、それで何かをユーザがピッカーから選択した画像または複数の画像を使って行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method has a return type of an optional array of Meal objects, meaning that it might return an array of Meal objects or might return nothing (nil).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、Mealオブジェクトのオプショナル配列の型を返します、これは、それがMealオブジェクトの配列を返すか、または無（nil）を返すかもしれないのを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is called prepareForSegue(_:sender:), and it gives you a chance to store data and do any necessary cleanup on the source view controller (the view controller that the segue is coming from).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、prepareForSegue(_:sender:)と呼ばれます、そしてそれはあなたにデータの格納や何らかの必要な片付けをソース（発生）ビューコントローラ（セグエがそこから始まるビューコントローラ）上で行う機会を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is intended for initial setup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、初期設定用に提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method must be marked with the IBAction attribute and take a segue (UIStoryboardSegue) as a parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、IBAction属性で記しされて１つのセグエ（UIStoryboardSegue）をパラメータとして取らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns an optional Int because the instance you’re searching for might not exist in the collection you’re searching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、オプショナルのIntを返します、なぜならあなたが探しているインスタンスがあなたがそこで見つけようとしているコレクションの中に存在しないかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method will be called after the textFieldShouldReturn method you just implemented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、あなたが実装したばかりのtextFieldShouldReturnメソッドが呼ばれた後で呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operation creates a property for the object in your view controller file, which lets you access and manipulate that object from code at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行動は、あなたのビューコントローラファイルの中にそのオブジェクトのためのプロパティを作成します、それはあなたにそのオブジェクトを実行時にコードからアクセスおよび操作させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operation creates a method in your view controller file that gets triggered when a user interacts with the object the action method is attached to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この操作は、あなたのビューコントローラファイルの中にひとつのメソッドを作成します、それはユーザがそのアクションメソッドが取り付けられたオブジェクトと相互作用するときに引き起こされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This outlet is similar to the text field, except for its name and its type (which is a UILabel, to match the type of object that’s in the storyboard).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアウトレットはテキスト欄と似ています、その名前とその型（それは、ストーリーボードの中にあるオブジェクトの型に合うようにUILabelです）を除いては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This pattern is extremely common in iOS app programming, and you’ll be seeing much more of it throughout the rest of the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパターンは、iOSアプリプログラミングにおいて非常に普通のものです、そしてあなたはもっと多くのそれを残りのレッスンの至る所で見ているでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This range goes from 0 to 4 for a total of five loop iterations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲は0から4になり全部で5回のループ繰り返しになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This requirement ensures that one of the switch cases always executes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この要件は、切替条件の１つが常に実行されることを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sets each of the views in the table view cell to display the corresponding data from meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはテーブルビューセルの中の各ビューを、mealからの対応するデータを表示するように設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This should happen every time the meal list scene loads, which means the appropriate place to load the stored data is in viewDidLoad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、食事リストシーンがロードされるたびごとに起こるべきです、それは格納されたデータをロードするのに適切な場所はviewDidLoadであるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This style of app design where view controllers serve as the communication pipeline between your views and data model is known as MVC (Model-View-Controller).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラがあなたのビューとデータモデルの間で通信の輸送菅としての役目をするこの形式のアプリ設計は、MVC（モデル-ビュー-コントローラ）として知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This table describes the changes to Start Developing iOS Apps (Swift).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この表は、iOSアプリの開発を始める（Swift）への変更を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This time, make your buttons adjust to the size of their container view (the view you added to your storyboard) by retrieving the container view’s height.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたのボタンの調節を、それらのコンテナビュー（あなたがあなたのストーリーボードに加えたビュー）のサイズに対して、そのコンテナビュー［ボタンの容れ物であるビュー］の高さを取り出すことによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This time, you want the intrinsicContentSize() method to calculate the control’s size accounting for each of the stars and the spaces between them (one less space than stars, assuming you have at least one star).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今回は、あなたはintrinsicContentSize()メソッドで星のそれぞれを占めるコントロールの大きさとそれらの間の空きを計算すると良いでしょう（それら星より１つ少ない空き、あなたが少なくとも１つの星を持つと仮定して）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type of layout code belongs in a method called layoutSubviews, a method defined on the UIView class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この種類のレイアウトコードが相応しいのは、ひとつのメソッドでありlayoutSubviewsと呼ばれて、UIViewクラス上で定義されるメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value is either passed by `MealTableViewController` in `prepareForSegue(_:sender:)`</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（この値は、`prepareForSegue(_:sender:)`において`MealTableViewController`によって渡されるか、）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This view controller will manage the view that displays the list of meals, and have a reference to the data model behind what’s shown in the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューコントローラは、食事リストを表示するビューを管理します、そしてUIにおいて見せられるものの背後にあるデータモデルへの参照を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This way, when you need to use the keys in multiple places throughout your code, you can use the constants instead of retyping the strings (which increases the likelihood of mistakes).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>こうすることで、あなたのコードにおいて複数の箇所でいくつかのキーを使う必要がある時、あなたは文字列をなんどもタイプする（間違いの可能性を増やす）ことの代わりに定数を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This work is done by the UIApplicationMain attribute  (@UIApplicationMain), which appears toward the top of the file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この仕事は、UIApplicationMain属性（@UIApplicationMain）によって行われます、それはファイルの一番上の方に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Those buttons aren’t linked to any actions yet, so you can click them, but they don’t do anything.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらのボタンは、まだどんなアクションとも結び付けられません、それであなたはそららをクリックできますが、それらは何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throughout the lesson, you’ll start making a simple user interface (UI) for the FoodTracker app and view it in Simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンを通して、あなたはFoodTrackerアプリのためのある単純なユーザインターフェイス（UI）の作成を始めます、そしてそれをシミュレータで観察します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To accomplish this, add a default placeholder image that communicates to users that they can choose a photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを成し遂げるために、初期プレースホルダ画像を加えます、それはユーザに彼らが写真を選ぶことができるのを伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To accomplish this, you’ll use an unwind segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを成し遂げるために、あなたは巻き戻しセグエを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Auto Layout constraints to the meal scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「自動レイアウト」制約を食事シーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a Meal property to MealViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealプロパティをMealViewControllerに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a button to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンをあなたのシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a label to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンにラベルを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a navigation controller to the meal scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラ食事シーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a navigation controller to your meal list scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラをあなたの食事リストシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a new meal or edit an existing one, users navigate to a different screen where they can specify a name, rating, and photo for a particular meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事を加えたり既存のものを編集するために、ユーザーは異なる画面に進んでいきます、そこで彼らは名前、レーティング、そして写真を特定の食事に対して指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a scene with a table view to your storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを持つシーンをあなたのストーリーボードに追加するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a tap gesture recognizer to your image view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タップジェスチャリコグナイザをあなたのイメージビューに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a text field to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄をあなたのシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an Edit button to the table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editボタンをテーブルビューに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an action method to MealTableViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクションメソッドをMealTableViewControllerに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an action to the button</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクションをボタンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an image to your project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像をあなたのプロジェクトに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an image view to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをあなたのシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add images to Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像をシミュレータに追加するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add images to your project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかの画像をあなたのプロジェクトに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add rating properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けプロパティを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To address this uncertainty, you can write unit tests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この不確実性に取り組むために、あなたはユニットテストを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adjust the text field width in the meal scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンのテキスト欄の幅を調節するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adopt the UIImagePickerControllerDelegate and UINavigationControllerDelegate protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIImagePickerControllerDelegateとUINavigationControllerDelegateプロトコルに準拠するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adopt the UITextFieldDelegate protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateプロトコルを採用するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To attempt to cast an object to one of its subclass types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトをそれのサブクラス型の１つと見なす試み。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to determine when this happens, add the Save button as an outlet in MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが起こった時を判定可能にするには、SaveボタンをアウトレットとしてMealViewController.swiftに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to encode and decode itself and its properties, the Meal class needs to conform to to the NSCoding protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ自身とそれのプロパティを符号化および復号化できるようにするために、MealクラスはNSCodingプロトコルに準拠する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to rate a meal, users need a control that lets them select the number of stars they want to assign to the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事に格付けできるようにするために、ユーザに必要なのはあるコントロールです、それは彼らがその食事に付けたい星の数を選ばせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To begin designing the UI, interaction, and behavior of this control, start by creating a custom view (UIView) subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>設計をUI、相互作用、そしてこのコントロールの挙動に対して始めるには、あるあつらえのビュー（UIView）のサブクラスを作成することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To build and run your app, use the Simulator app that’s included in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリをビルドして実行するには、シミュレータアプリを使ってください、それはXcodeに含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To change the implementation of the cancel action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンセルアクションの実装を変更するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To change the segue style</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエの形式を変更するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clean up the UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIを掃除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clean up the code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードを掃除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clean up unused pieces of the project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトの使用されない部分を掃除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To collapse the console, use the Debug area toggle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンソールを折り畳むためには、Debug区画切り替えボタンを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure a custom cell for your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムセルをあなたのテーブルビューに対して構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure and display cells in your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルを構成してあなたのテーブルビューで表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the Add button in the meal scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加ボタンを食事シーンにおいて構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the navigation bar in the meal list</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事リストにおいて構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the navigation bar in the meal scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事シーンにおいて構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを設定し構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the table view cell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルを構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the text field’s keyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このテキスト欄のキーボードを設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the text field’s placeholder text</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄のプレースホルダテキストを設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To conform to NSCoding, the Meal needs to subclass NSObject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingに準拠するために、MealはNSObjectのサブクラスになる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect a rating control outlet to ViewController.swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールアウトレットをViewController.swiftに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the Save button to the MealViewController code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SaveボタンをMealViewControllerコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the gesture recognizer to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザをViewController.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the image view to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをViewController.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the label to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルをViewController.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the text field to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄をViewController.swiftコードと接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the views to the MealTableViewCell.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューをMealTableViewCell.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a button in your view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンをあなたのビューの中に作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a file path to data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データへのファイルパスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a label reset action in the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルリセット（ラベルを初期値に戻す）アクションをViewController.swiftコードの中に作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new data model class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいデータモデルを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新規プロジェクトを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a subclass of UITableViewCell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITableViewCellのサブクラスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a subclass of UITableViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITableViewControllerのサブクラスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a subclass of UIView</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewのサブクラスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a total of five buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合計５つのボタンを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a total of five buttons, use a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合計５つのボタンを作成するために、for-inループを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty array, use the initializer syntax.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の配列を作るには、初期化構文を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an outlet, Control-drag from a particular object in your storyboard to a view controller file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレットを作成するには、あなたのストーリーボードの特定のオブジェクトからビューコントローラファイルへとコントロール-ドラッグします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create and implement a cancel action method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンセルアクションメソッドを作成して実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To declare a constant for the size of the buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数をボタンのサイズのために宣言するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a data model for a meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデルを食事に対して定義するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define interaction in your app, your view controller source code needs to be able to communicate with the views in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリにおける相互作用を定義するために、あなたのビューコントローラ・ソースコードは、あなたのストーリーボードの中のビューと通信可能にされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define the behavior of something in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある物の挙動をコードにおいて定義する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To delete a meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある食事を削除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To design the interface of the custom table cell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムテーブルセルのインターフェイスを設計するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To develop iOS apps using the latest technologies described in these lessons, you need a Mac computer (OS X 10.10 or later) running the latest version of Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのレッスンにおいて解説される最新のテクノロジーを使ってiOSアプリを開発するために、あなたはXcodeの最新版が動作するMacコンピューター（OS X 10.10以降）を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To disable the Save button when there’s no item name</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Saveボタンを項目名がない時は使用不可能にするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display a default image in the image view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期画像をイメージビューで表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display a section in your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セクションをあなたのテーブルビューにおいて表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display any real data in your table cells, you need to write code to load that data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの実際のデータをあなたのテーブルセルに表示するために、あなたが必要とするのはコードを書いてそのデータをロードすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display dynamic data, a table view needs two important helpers: a data source and a delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的データを表示するために、テーブルビューは２つの重要な手助け：データソースと委任先を必要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display the view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューを表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display your custom view, you need to add a view to your UI and establish a connection between that view and the code you just wrote.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのカスタムビューを画面表示するために、あなたが必要とするのは、ビューをあなたのUIに加えて、そのビューとあなたがたった今記述したコードとの間の接続を確立することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do so, you define a simple class with a name, a photo, and a rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうするために、あなたはある簡単なクラスを名前、写真、そして格付けを使って定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do this, override the intrinsicContentSize method to match the size you specified in Interface Builder like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを行うために、intrinsicContentSizeメソッドをオーバーライドして、あなたがインターフェイスビルダーにおいて指定したサイズに合うようにしてください、このように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do this, you’ll make a few simple adjustments to your stack view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これをするために、あなたは少しばかりの簡単な調節をあなたのスタックビューに行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To download the latest version of Xcode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最新版のXcodeをダウンロードするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To extract an underlying value from an optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>裏に潜んだ値をオプショナルから引き出すためのもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To fix the test case</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このテスト項目を修正するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get access to UIKit, simply import it as a module into any Swift file or playground.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKitへのアクセスを得るために、単にそれをモジュールとして何らかのSwiftファイルまたはプレイグラウンドへインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To give the meal scene a navigation bar when presented modally, embed it in its own navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダル表示の時に食事シーンにナビゲーションバーを与えるために、それをそれ自身のナビゲーションコントローラに埋め込んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To give users the ability to select a picture, you’ll need to implement two of the delegate methods defined in UIImagePickerControllerDelegate:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザに図像を選ぶ能力を与えるために、あなたが実装する必要があるのはUIImagePickerControllerDelegateにおいて定義した委任先メソッド２つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To help you understand how to define interaction between elements in the UI, you’ll configure this label to display the text the user enters into the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUIの中の要素の間での相互作用を定義する方法を理解する助けとして、このラベルを設定してユーザがテキスト欄に入力したテキストを表示するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To identify which segue is occurring</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのセグエが生じているかを識別するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement a coding key structure</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号化キー構造体を実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the UITextFieldDelegate protocol method textFieldDidEndEditing(_:)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateのプロトコルメソッドのtextFieldDidEndEditing(_:)を実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the UITextFieldDelegate protocol method textFieldShouldReturn(_:)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateのプロトコルメソッドのtextFieldShouldReturn(_:)を実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the encodeWithCoder NSCoding method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder NSCodingメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the imagePickerController(_:didFinishPickingMediaWithInfo:) method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerController(_:didFinishPickingMediaWithInfo:)メソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the imagePickerControllerDidCancel(_:) method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerControllerDidCancel(_:)メソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the initializer to load the meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事をロードするイニシャライザを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the label reset action in the ViewController code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルリセットアクションをViewControllerコードの中に実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the method to load the meal list</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストをロードするメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the method to save the meal list</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストを保存するメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the prepareForSegue(_:sender:) method on MealViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>implement the prepareForSegue(_:sender:)メソッドをMealViewController上で実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the rating action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けアクションを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the selectImageFromPhotoLibrary(_:) action method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selectImageFromPhotoLibrary(_:)アクションメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To indicate that a class, structure, or enumeration  conforms to a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、構造体、または列挙がプロトコルに準拠することを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To keep things simple, you’ll rely on the user’s action of tapping the Return button on the text field’s keyboard to indicate that the label should update.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>物事を簡単に止めておくために、あなたはテキスト欄のキーボード上で「リターン」ボタンをタップするユーザの動作に頼ることで、ラベルが更新されることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To keep things simple, you’ll use the original, unedited image for the meal photo, which is what this line of code stores into the selectedImage constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>物事を単純に保つために、あなたはオリジナル、食事写真の無編集画像を使います、それがこのコード行が格納するのがselectedImage定数の中であるわけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To lay out the buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのボタンをレイアウトするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To link the Save button to the unwindToMealList action method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SaveボタンをunwindToMealListアクションメソッドに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To load the initial data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期データをロードするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To load the meal list at the appropriate time</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストを適切な時にロードするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To look at the AppDelegate.swift source file</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegate.swiftソースファイルを見るには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To look at the unit test file for FoodTracker</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerのためのユニットテストファイルを見つけるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it clear which coding key corresponds to each piece of data, create a structure to store the key strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どの符号化キーがデータ片のそれぞれに対応するかわかりやすくするために、ある構造体を作成してキー文字列を格納してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this code work for your app, you’ll need to change the placeholder identifier to the one you set earlier for the prototype cell in the storyboard (MealTableViewCell), and then add code to configure the cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードがあなたのアプリのために働くようにするため、あなたが必要なのは、プレースホルダ識別子をあなたが以前にストーリーボードの試作セルのために設定したもの（MealTableViewCell）に変更し、そしてそれからセルを構成するコードを加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To open your storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開くには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override or extend that behavior, you override the methods defined on UIViewController (as you see done in the ViewController.swift file with the viewDidLoad() and didReceiveMemoryWarning() methods), or implement your own custom methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この挙動をオーバーライドまたは拡張するには、あなたはUIViewControllerで定義されるメソッドをオーバーライドするか（あなたがViewController.swiftファイルにおいてviewDidLoad()とdidReceiveMemoryWarning()メソッドでそうされるのを見るように）、またはあなた独自のあつらえのメソッドを実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override the initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザをオーバーライドするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To overwrite an existing meal in the meal list, you’ll need to update the unwindToMealList(_:) action method to handle the two different cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストの中の既存の食事を上書きするには、あなたはunwindToMealList(_:)アクションメソッドを更新して２つの異なる場合を取り扱うようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To perform any sort of editing on a table view, you need to implement one of its delegate methods, tableView(_:commitEditingStyle:forRowAtIndexPath:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの種類の編集をテーブルビュー上で行うために、あなたが必要とするのは、それの委任先メソッドの１つ、tableView(_:commitEditingStyle:forRowAtIndexPath:)を実装することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To perform repeatedly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返して実行するようにする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To point the table view controller scene to MealTableViewController.swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラシーンをMealTableViewController.swiftの方に向けるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To preview your interface</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのインターフェイスをプレビューするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rename the ViewController.swift file</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftファイルを改名するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To replace an implementation of a method defined on a superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラス上で定義されるあるメソッドの実装を置き換える。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To return the number of rows in your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテーブルビューの中の行の数を返すには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run the testMealInitialization() unit test</seg>
      </tuv>
      <tuv lang="JA">
        <seg>testMealInitialization()ユニットテストを実行するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run your app in Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリをシミュレータで実行するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To save the meal list when a user adds, removes, or edits a meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが食事を追加、削除、または編集したとき食事リストを保存するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the completed sample project for this lesson, download the file and view it in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの完成見本プロジェクトを見るには、このファイルをダウンロードしてXcodeでそれを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To set ViewController as the delegate for nameTextField</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerをnameTextFieldの委任先として設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To set star images for the buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>星画像をボタンに設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To set the table view controller as the initial scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラを冒頭シーンに設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To subclass NSObject and conform to NSCoding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectのサブクラスにして、NSCodingに準拠するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To tell the stack view how to lay out your button, you also need to provide an intrinsic content size for it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューにあなたのボタンをレイアウトする方法を教えるために、あなたはまた、固有のコンテンツサイズをそれに提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To the left of the test name, find a diamond shape.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テスト名の左に、ひし形を見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To understand when these methods get called and what they need to do, it’s important to know how text fields respond to user events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何時これらのメソッドが呼ばれるか、何をそれらは実行に必要とするのかを理解するために、重要となるのは、どうやってテキスト欄がユーザイベントに応答するのかを知ることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the implementation of unwindToMealList(_:) to add or replace meals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unwindToMealList(_:)の実装を更新して、食事を加えたり置き換えたりするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the implementation of viewDidLoad</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoadの実装を更新するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the initializer implementation to call its superclass initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザ実装を更新してそれのスーパークラスのイニシャライザを呼ぶには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the layout of the stack view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューのレイアウトを更新するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To view the outline view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューで眺めるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write a unit test for Meal object initialization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストをMealオブジェクト初期化に対して書くには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transitions between scenes are called segues.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーン間の転換はセグエ（遷移。切れ目なく続くこと）と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try doing that with the constants in the code above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上のコードの定数でそうしてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try removing the conversion to String from the last line.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の行からStringへの変換を取り除いてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try removing the default case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>default条件の節を削除してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try replacing as? with as!.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>as?をas!と取り替えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try typing the second line instead of just copying and pasting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の行をコピーアンドペーストするのではなくタイプすることを試みてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 0 in the left and right boxes, and type 60 spacing in the top box.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左および右のボックス（四角い入力欄）において0をタイプしてください、そして上のボックスにおいて60をタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 0 in the left and right boxes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左と右のボックスに0をタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 320 in both the Width and Height fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>320をWidth（幅）とHeight（高さ）欄にタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 44 into the Height field and 240 into the Width field located below Intrinsic Size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intrinsic Sizeの下にある、Height（高さ）欄に44をそしてWidth（幅）欄に240をタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type New Meal and press Return to save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>New Mealをタイプしてからリターンキーを押し保存してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Your Meals and press Return to save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Your Mealsをタイプしてリターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types like String and Array are examples of data types you see in the standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringとArrayのような型は、あなたが標準ライブラリで見かけるデータ型の例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UIKit</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Selected Views, choose Update Constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Selected Views（選択中のビュー）の下で、Update Constraints（制約を更新）を選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under the comment, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand how to display views programmatically</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにビューを表示するかプログラム的に理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand syntax for (and basic concepts behind) inheritance and protocol conformance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承およびプロトコル準拠の構文（そしてその背後の基本的概念）の理解</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the View Controller Lifecycle</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラのライフサイクルを理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the advantage of using optionals and optional binding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルおよびオプショナルバインディングを使うことの利点の理解</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the delegation pattern</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デリゲートパターンの理解</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the difference between static properties and instance properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的プロパティとインスタンスプロパティの間の違いを理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the key components of a table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューの鍵となる部分を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the purpose of conditional statements and loops</seg>
      </tuv>
      <tuv lang="JA">
        <seg>条件文とループの目的を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the roles of table view delegates and data sources</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビュー委任先とデータソースの役割を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the view controller life cycle and when its callbacks occur, such as viewDidLoad, viewWillAppear and viewDidAppear</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラのライフサイクルと何時それのコールバック、例えばviewDidLoad、viewWillAppear、そしてviewDidAppearなどが発生するかを理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand when to use different type cast operators for downcasting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストに対して異なった型キャスト演算子を使う時を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unit testing is an essential part of writing code because it helps you catch errors that you might otherwise overlook.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストを行うことは、コードを記述することの極めて重要な部分です、なぜならそれは、あなたがうっかり見落とすエラーを捕らえる手助けをするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Update the rating property to include this property observer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ratingプロパティを更新して、このプロパティオブザーバを含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Update the placeholder identifier to the identifier you set in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレースホルダ識別子をあなたがストーリーボードにおいて設定した識別子に更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use UIView as a container</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewをコンテナ（容れ物）として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use class followed by the class’s name to define a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>classを使ってその後にそのクラスの名前を続けることでひとつのクラスを定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use enum to create an enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>enumを使って列挙を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use func to declare a function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>funcを関数を宣言するのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use let to make a constant and var to make a variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>letを定数を作るために、varを変数を作るために使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use print to print a message to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>printを使ってメッセージをコンソールにプリントしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use protocol to declare a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>protocolを使ってプロトコルを定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use struct to create a structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>structを使って構造体を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use where clauses to impose additional constraints in conditional statements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>条件文に追加の制約を課すためにwhere節を利用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use init to create one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initを使ってそれを作ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use init? to declare a failable initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?を使って失敗できるイニシャライザを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use optional binding in an if statement to check whether an optional contains a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルバインディングをif文の中に使ってオプショナルが値を含んでいるかどうか確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use optionals to work with values that might be missing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルを使うことで見つからないかもしれない値を扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Core Data: Unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Core Dataの使用：非選択。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a local constant to store the container view’s height, so you only need to access it once inside each method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるローカル定数を使ってコンテナビューの高さを格納してください、それであなたは各メソッドの内部で一度だけそれにアクセスする必要があるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use code like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードをこのように使ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use dot syntax to access the properties and methods of the instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ドット構文を使ってそのインスタンスのプロパティやメソッドにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use segue identifiers to determine which segue is occurring</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエ識別子を使って、どのセグエが現れているか確かめる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use stack views to create robust, flexible layouts</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューを使って、頑丈で、柔軟なレイアウトを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the init?(rawValue:) initializer to make an instance of an enumeration from a raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(rawValue:)イニシャライザを使うことで、列挙のインスタンスを生の値から作ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the rawValue property to access the raw value of an enumeration member.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rawValueプロパティを使って、ある列挙メンバーの生の値にアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the forced type cast operator (as!) only when you’re sure that the downcast will always succeed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制型キャスト演算子（as!）を、あなたがダウンキャストが常にうまくいく確信を持つ場合にのみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the optional type cast operator (as?) when you’re not sure if the downcast will succeed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル型キャスト演算子（as?）を、あなたがダウンキャストがうまくいくか確信を持てない場合は使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the half-open range operator ( ..&lt;) to make a range of indexes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子（..&lt;）を使ってインデックスの範囲を作ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the closed range operator ( ...) to make a range that includes both values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲演算子（...）を使って両方の値を含む範囲を作ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Object library to find a Label object and drag it onto the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを使ってLabelオブジェクトを探してそれをテーブルセル上にドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Object library to find a View object and drag it onto the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを使ってViewオブジェクトを見つけて、それをテーブルセル上にドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Object library to find an Image View object and drag it onto the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを使ってImage Viewオブジェクトを探してそれをテーブルセル上へドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the asset catalog to add image assets to a project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログ（資産目録）を使用して画像資産をプロジェクトに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the text field’s placeholder text to prompt the user to enter the name of a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このテキスト欄のプレースホルダテキスト（仮に入れておくテキスト）を使って、新しい食事の名前を入力するようユーザに促してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use these method templates to add custom code that will execute when the methods are called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのひな形メソッドを使ってあつらえのコードを加えてください、それはそのメソッドが呼ばれる時に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Users need an indication that they can interact with the image view to select a photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザはある相互作用を必要とします、それは、彼らがイメージビューと相互作用して写真を選択することができることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use switch statements for conditional branching beyond a binary condition</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの状態よりも多く条件によって分岐するためにswitch文を利用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use an array to store and work with data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列を使ったデータの保存と活用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use gesture recognizers as an additional level of generating events</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザ（身振り認識）を追加的位置づけイベント生成として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NSCoding protocol to read and write data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingプロトコルを使ってデータを読み書きする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the NSCoding approach, the  Meal class is in charge of storing and loading each of its properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingの手法を使って、Mealクラスはそれのプロパティの格納とロードの世話をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values are never implicitly converted to another type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値は、決して暗黙的に別の型に変換されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View and rearrange UI elements using the outline view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UI要素をアウトラインビューを使って表示して位置を直す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View controllers coordinate the flow of information between the app’s data model, which encapsulates the app’s data, and the views that display that data, manage the life cycle of their content views, handle orientation changes when the device is rotated, define the navigation within your app, and implement the behavior to respond to user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらビューコントローラは、アプリのデータをカプセル化するアプリのデータモデルとそのデータを表示するビューとの間の情報の流れを調整して、それらのコンテンツビューのライフサイクルを管理して、機器が回転される時に方向変更を取り扱い、あなたのアプリ内部の見て行き方を定義して、そしてユーザ入力への応答の挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View this set of incremental lessons as a guided introduction to building your first app—including the tools, major concepts, and best practices that will ease your path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この一連の徐々に進むレッスン（授業）を、あなたの初めてのアプリ作成のための指導付き入門書だと考えてください—それはあなたの道行きを楽にするツール、主要な概念、そして最良の慣行を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views are arranged in a hierarchical structure called the view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、ビュー階層と呼ばれる、ある階層構造の中に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views have a variety of useful built-in behavior, including displaying themselves onscreen and reacting to user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、それら自身を画面上に表示することやユーザの入力に反応することを含む、さまざまな有用な組み込みの挙動を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views not only display themselves onscreen and react to user input, they can serve as containers for other views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、それ自身を画面上で表示してユーザの入力に反応するだけではありません、それは他のビューの容れ物としての役割をすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Watch the Xcode toolbar as the build process completes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcoceツールバーがビルドプロセスが完了するのを見守ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What a user types using that keyboard gets inserted into the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがキーボードを使ってタイプすることは、テキスト欄へと挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What error do you get?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どんなエラーをあなたは得るでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What greeting do you get?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どんな挨拶をあなたは得るでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens if a user tries to save a meal with no name?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが食事を名前なしで保存しようとするとき何が起こるでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What’s Next?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次はなに？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Xcode brings up the list of potential completions, scroll through the list until you find the one you want and then press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeが見込みのある補完のリストを提出する場合、そのリストをあなたが望むものを見つけるまでずっとスクロールして、それからリターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a class is a subclass of another class, it gets all of its behavior (methods, properties, and other characteristics) from its superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスが別のクラスのサブクラスである時、それはそれのスーパークラスからその挙動の全て（メソッド、プロパティ、および他の特徴）を獲得します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a user taps a star, all stars leading up to and including that star (from the left) are filled in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがある星をタップする時、その星を含めてそれまでの前にあるのすべての星が塗りつぶされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a user wants to finish editing the text field, the text field needs to resign its first-responder status.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがテキスト欄の編集を終えたい時は、テキスト欄はそれのファーストレスポンダ状態をやめる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When that event takes place, the code gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのイベントが起こるときに、コードが実行されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the interface grows to an iPad size, the text field should grow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インターフェースがiPadサイズへと大きくなる時、テキスト欄は大きくなるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the meal scene gets dismissed, the meal list is shown.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンが退けられた時、食事リストが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user taps a text field, it automatically becomes first responder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがタップをあるテキスト欄にするとき、それは自動的にファーストレスポンダになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When this segue is triggered, it pushes the view controller for the meal scene onto the same navigation stack as the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセグエが始動される時、それは食事シーンのビューコントローラを食事シーンリストとして同じナビゲーションスタックにプッシュします（一番上に乗せます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing iOS apps, you’ll be using more than the Swift standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリを書いている時、あなたはSwift標準ライブラリ以上のものを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function, you pass in the first argument value without writing its name, and every subsequent value with its name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが関数を呼ぶ時、あなたは最初の引数値をその名前を書くことなく、そしてあらゆるその後の値はそれの名前とともに渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a method, you pass in the first argument value without writing its name, and every subsequent value with its name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがメソッドを呼ぶとき、あなたは最初の引数値をそれの名前を書くことなしに、そして続くあらゆる値をそれの名前とともに渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call an initializer, you include all arguments names along with their values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるイニシャライザを呼び出すとき、あなたは全ての引数名に加えてそれらの値を含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Delete button for a cell, the cell is removed from the list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるセルに対してDeleteボタンをクリックする時、そのセルはリストから取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Done button on the keyboard, the keyboard is dismissed and the label text changes to display the text in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがDoneボタンをキーボード上でクリックする時、キーボードは片付けられてラベルテキストは変更されてそのテキストがテキスト欄で表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Set Default Label Text button, the label changes from what’s currently displayed in the label to Default Text (the value set by the action you defined earlier).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSet Default Label Textボタンをクリックする時、ラベルは現在ラベルに表示されるものからDefault Text（あなたが以前に定義したアクションによって設定される値）へと変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Set Default Label Text button, the label should change from Meal Name (the value set in your storyboard) to Default Text (the value set by the action).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSet Default Label Textボタンをクリックするとき、ラベルはMeal Name（あなたのストーリーボードで設定した値）からDefault Text（アクションによって設定した値）に変わるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the red square, you should see the “Button pressed” message in the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが赤い四角をクリックする時、あなたは「Button pressed」メッセージをコンソールにおいて見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create a view controller subclass (like the ViewController class you’ve been working with), it inherits the methods defined in UIViewController and lets you add your own custom behavior for each method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるビューコントローラのサブクラス（あなたが扱っていたことのあるViewControllerクラスのようなもの）を作成する時には、それは、UIViewControllerで定義されるメソッドを継承し、そしてあなたにあなた独自のあつらえの挙動をそれぞれのメソッドに加えさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you ran your app in the iPhone 6 Simulator app, the view in this scene is what you saw on the device screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが、あなたのアプリをiPhone 6シミュレータアプリで実行したなら、このシーンのビューは、あなたがその機器画面で見たものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you tap on an existing cell in the table view, you want to edit an existing meal, not create a new one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが既存のセルをテーブルビューにおいてタップする時、あなたは既存の食事の編集を望みます、新しいものを造るのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you work with accepting user input from a text field, you need some help from a text field delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがテキスト欄からのユーザ入力の受け取りを扱うとき、あなたは、テキスト欄の委任先からの助けを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you’re finished, your app will look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが作業し終わった時、あなたのアプリはこのようなものに見えるでしょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever a segue gets triggered, it provides a place for you to add your own code that gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるセグエが引き起こされる時はいつでも、それはあなたのために場所を提供して、あなた自身のコードを加えさせ、それが実行されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where control enters a program or piece of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプログラムまたはコード断片に制御が進む入り口のところ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where to Go from Here</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これからどうする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where you believe this is the case, you can try to downcast to the subclass type using a type cast operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこの場合であると信じるところで、あなたは型キャスト演算子を使ってそのサブクラス型へダウンキャストを試みることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whereas before, the call to dismissViewControllerAnimated happened anytime the cancel(_:) method got called, it now only happens when isPresentingInAddMealMode is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前の、dismissViewControllerAnimatedに対する呼び出しがcancel(_:)メソッドが呼び出される時はいつでも起こるのとは反対に、それは今ではisPresentingInAddMealModeがtrueの時にだけ起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While newer APIs have largely replaced selectors with blocks, many older methods—like performSelector(_:) and addTarget(_:action:forControlEvents:)—still take selectors as arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいAPIが大部分はセレクタをブロックで置き換える一方で、多くの古いメソッドは — performSelector(_:)およびaddTarget(_:action:forControlEvents:)などは — 依然としてセレクタを引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While pressing the Shift key on your keyboard, select the text field, label, and button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキーボードのシフトキーを押したままで、テキスト欄、ラベル、およびボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While you’re editing the text field’s attributes, you can also edit the attributes of the system keyboard that’s displayed when a user selects the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがテキスト欄の属性を編集しているときに、あなたはまた、ユーザがそのテキスト欄を選択すると表示されるシステムキーボードの属性を編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Why’s that?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはなぜ？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With data displaying as expected, it’s time to provide a way to navigate from the meal list to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データが期待するように表示されているので、食事リストから食事シーンへとナビゲートする方法を提供する時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the cell configured, you can design its custom UI directly in the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルが構成されたので、あなたはそれのカスタムUIを直接にあなたのストーリーボード上で設計できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the default placeholder image added to your project, set the image view to display it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプロジェクトに加えた初期プレースホルダ画像をつかって、イメージビューがそれを表示するように設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the encoding method written, implement the initializer to decode the encoded data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号化メソッドが書かれたので、符号化されたデータを復号化するイニシャライザを実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the folder selected, in the bottom left corner, click the plus (+) button and choose New Image Set from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのフォルダが選択された状態で、１番下左隅で、プラス（+）ボタンをクリックしてNew Image Set（新規画像セット）をポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Attributes inspector in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのイメージビューが選択された状態で、Attributesインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューが選択された状態で、Attributes（属性）インスペクタを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Size inspector in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューが選択された状態で、Size（サイズ）インスペクタをユーティリティ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the meal scene selected, open the Identity inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンが選択された状態で、Identityインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the table view cell selected, open the Attributes inspector in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルが選択された状態で、Attributesインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the table view controller selected, choose Editor &gt; Embed In &gt; Navigation Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラが選択された状態で、Editor &gt; Embed In &gt; Navigation Controllerを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the table view selected, open the Size inspector in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューが選択された状態で、Sizeインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the text field selected, open the Attributes inspector in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄が選択された状態で、ユーティリティ区画のAttributesインスペクタ（「属性」管理機能。インスペクタ - 検査官、調査官、警視）を開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the text field selected, open the Size inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄が選択された状態で、ユーティリティ区画でSizeインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view controller selected, choose Editor &gt; Embed In &gt; Navigation Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラが選択された状態で、Editor &gt; Embed In &gt; Navigation Controllerを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Attributes inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューが選択された状態で、Attributesインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Identity inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューが選択された状態で、同一性インスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Identity inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューが選択された状態で、Identityインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Size inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのビューが選択された状態で、Sizeインスペクタをユーティリティ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Size inspector in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのビューが選択された状態で、Sizeインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With these methods implemented, you need to add code to save and load the list of meals whenever a user adds, removes, or edits a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドが実装されたので、あなたは、ユーザが食事を追加、編集、削除するたびに、食事のリストを保存およびロードするコードを加える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With this breadth of knowledge about Swift, you’re about to jump into making a full-fledged app in the next lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この広さのSwiftについての知識があれば、あなたはすぐに一通り揃ったアプリの作成に次のレッスンで飛び込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With this option, the cell won’t get a visual highlight when a user taps it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオプションで、セルはユーザがそれをタップした時に視覚的な強調をされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With this property the app delegate keeps track of the window in which all of your app content is drawn.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティを使ってアプリデリゲートは、そこにおいてあなたのアプリのコンテンツが描画されるウインドウの最新の状態を把握します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within that hierarchy, views enclosed within a view are called subviews, and the parent view that encloses a view is called its superview.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この階層内で、あるビューの内部に納められるビューはサブビューと呼ばれます、そしてビューを納めている親ビューはスーパービューと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with View Controllers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Table Views</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write a question mark (?) after the type of a value to mark the value as optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>疑問符（?）を値の型の後に書いて、その値をオプショナルであると記してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write failable initializers on a custom class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるイニシャライザをカスタムクラス上で書く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds a new navigation controller to your storyboard, sets the storyboard entry point to it, and creates a relationship between the new navigation controller and your existing table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、新しいナビゲーションコントローラをあなたのストーリーボードに加えて、ストーリーボードエントリポイントをそれに設定します、そして新しいナビゲーションコントローラとあなたの既存のテーブルビューコントローラとの間の関係を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to MealViewController.swift to set up the action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、不可欠なコードをMealViewController.swiftに加えて、このアクションを準備します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to set up the action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、必要なコードをViewController.swiftに加えることでアクションメソッドを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to set up the action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、不可欠なコードをViewController.swiftに加えることでアクションを確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to store a pointer to the image view and configures the storyboard to set up that connection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、不可欠なコードをViewController.swiftに加えることでイメージビューへのポインタを保管します、そしてストーリーボードを修正することでこの接続を確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to store a pointer to the text field and configures the storyboard to set up that connection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、必要なコードをViewController.swiftに加えることでテキスト欄へのポインタを保管します、そしてストーリーボードを修正することでこの接続を確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode already created one such class that you looked at earlier, ViewController.swift, and connected it to the scene you’re working on in your storyboard right now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、すでに１つそのようなクラスを作成しました、それはあなたが前に見たViewController.swiftです、そしてちょうどそれをあなたのストーリーボードで扱っているシーンに接続しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode also contains the iOS SDK, which extends Xcode to include the tools, compilers, and frameworks you need specifically for iOS development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeはiOS SDKも含みます、それはXcodeを拡張してあなたが特にiOS開発に必要とするツール、コンパイラ、そしてフレームワークを含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode analyzes your existing layout to figure out that the items should stack vertically, not horizontally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたの既存のレイアウトを解析して、それらの項目が、水平にではなしに、垂直に積み重ねられるべき状態を解決します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates MealTableViewController.swift, a source code file that defines your custom table view controller subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeはMealTableViewController.swift、あなたのカスタムテーブルビューコントローラサブクラスを定義するファイル、を作成します、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates a file called Meal.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、Meal.swiftと呼ばれるファイルを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates a file that defines the MealTableViewCell class: MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、MealTableViewCellクラスを定義するファイル：MealTableViewCell.swiftを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates a file that defines the RatingControl class: RatingControl.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、RatingControlクラスを定義するファイル：RatingControl.swiftを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode displays messages about the build process in the activity viewer, which is in the middle of the toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、メッセージをビルドプロセスについてアクティビティビューア（状況表示窓）の中で表示します、それはツールバーの中央にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode has already created a unit test file as part of the Single View Application template.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、既にユニットテストファイルをSingle View Applicationひな形の一部として作成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode includes all the features you need to design, develop, and debug an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたがアプリの設計、開発、そしてデバッグに必要とするすべての機能を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode includes everything you need to create an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたがアプリを作成するのに必要なものすべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode includes several built-in app templates for developing common types of iOS apps, such as games, apps with tab-based navigation, and table-view-based apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、いくつかの組み込みのアプリテンプレート（アプリひな形）を、一般的な種類のiOSアプリ、例えばゲーム、タブナビゲーションに基づくアプリ、およびテーブルビューに基づくアプリなどの開発のために含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode inserts the initializer skeleton for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeはそのイニシャライザの骨組みをあなたの代わりに挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode inserts the whole line for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、行全体をあなたの代わりに挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode is downloaded into your /Applications directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeがあなたの/Applicationsディレクトリにダウンロードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode lets you type in a new name for the file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたにこのファイルのための新しい名前を入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode lists each of these comments as a section title in the source code file’s functions menu, which appears if you click the name of the file at the top of the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、これらのコメントのそれぞれをソースコードファイルの関数メニューの中の部門名の１つとしてリストします、それはあなたがファイルの名前をエディタ区画の一番上でクリックするならば現れます関数メニューは、あなたに素早くあなたのコードのある部門にジャンプできるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode makes it clear from the naming that you’re creating a custom table view cell, so leave the new name as is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにはその名前の付け方からあなたがカスタムテーブルセルを作成しているのが明らかです、それで新しい名前はそのままにされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens a new window and displays a dialog in which you choose a template.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは新しいウインドウを開きダイアログを表示します、そこであなたはあるひな形を選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens the source file in the main editor area of the window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、ソースファイルをウインドウ中央の大きなエディタ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens the storyboard in Interface Builder—its visual interface editor—in the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、ストーリーボードをエディタ区画のインターフェイスビルダーで—それの視覚インターフェイスエディタで—開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens your new project in the workspace window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたの新しいプロジェクトをワークスペースウインドウ（作業場）で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode provides a library of objects that you can add to a storyboard file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたがストーリーボードファイルに加えることができるオブジェクトのライブラリ（オブジェクトの図書館）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode sets up the show segue and configures the meal scene to be displayed in a navigation controller—you see the navigation bar in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、表示セグエを設定し、食事シーンを構成することで、ナビゲーションコントローラにおいて表示されるようにします—あなたはインターフェイスビルダーにおいてナビゲーションバーを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode uses the product name you entered to name your project and the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeはあなたが入力した製品名を使ってあなたのプロジェクトとアプリを命名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode wraps the UI elements in a stack view, stacking them together.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、それらのUI要素をひとつのスタックに包んで（ラップして）、それらを積み重ねて一緒にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You adopt a protocol by listing it as part of the class declaration line.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるプロトコルをクラス定義行の一部としてそれをリストすることによって採用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You accomplish this by adding an Edit button to the table view’s navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これをEditボタンをテーブルビューのナビゲーションバーに追加することによって成し遂げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You add 1 to that index to get the corresponding rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、1をそのインデックスに加えて、該当する格付けを得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You add this constant property to define the spacing between buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこの定数プロパティを加えることで、ボタンの間の空きの取り方を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also need to keep a list of those meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたそれら食事のリストを保持する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also need to uncomment the implementation of tableView(_:canEditRowAtIndexPath:) to support editing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、編集をサポートするようにtableView(_:canEditRowAtIndexPath:)の実装のコメントを外す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add an else clause to an if statement to define more complex behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはelse節をif文に加えることでより複雑な振る舞いを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add your own comments to help you understand what’s happening in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた自身のコメントを加えて、あなたのコードにおいて何が起こっているかあなたが理解する助けとしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add your own images directly into Simulator to test the FoodTracker app with appropriate sample content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた自身の画像を直接シミュレータに追加してFoodTrackerアプリを適切な見本コンテンツを使ってテストすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also collapse the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたアウトラインビューも折り畳むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also collapse the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたアウトラインビューも折り畳むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use strings or floating-point numbers as the raw type of an enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、文字列または浮動小数点数を列挙の生の値として使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can assign UI elements a placeholder intrinsic content size if you need to design a UI for a different size than you can anticipate at design time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが設計時に見越しておくのと違うサイズに対してUIを設計する必要があるならば、あなたはUI要素にプレースホルダ固有コンテンツサイズを割り当てることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can choose a cell to delete by clicking the indicator on the left, and confirm that you want to delete it by pressing the Delete button in that cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、削除するセルを左の表示をクリックして選べます、そしてそのセルにおいてDeleteボタンを押すことであなたがそれの削除を望むのを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can click on one of the section titles to jump to that section in the file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、部門名の１つをクリックすることでファイルのその部門へジャンプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can click the Add button and navigate to the meal scene from the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは「追加」ボタンをクリックすることで、食事リストシーンから食事シーンへと導かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define an action method to accomplish anything from manipulating a piece of data to updating the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、アクションメソッドを定義することで、あるデータ断片を操作することからUIを更新することまでどんなことでも成し遂げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do this easily in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを簡単にあなたのストーリーボードに行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily wrap your existing interface in a stack view, adding the necessary constraints to make the stack view display properly in different situations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、簡単にあなたの既存のインターフェースをスタックビューで包んで、必要な制約を加えることでそのスタックビューが異なる状況で適切に表示されるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find a sample image within the Images/ folder of the downloadable file at the end of this lesson, or use your own image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、見本画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find sample images within the Images/ folder of the downloadable file at the end of this lesson, or use your own images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは見本画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find the image shown above within the Images/ folder of the downloadable file at the end of this lesson, or use your own image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、上で示される画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find the images shown above within the Images/ folder of the downloadable file at the end of this lesson, or use your own images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、上で見せた画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can jump to it quickly using the functions menu, which appears if you click the name of the file at the top of the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、素早く関数メニューを使ってジャンプできます、それはあなたがファイルの名前をエディタ区画の上部でクリックするならば現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can keep an index in a loop by using a Range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、インデックス（索引）をループにおいてRangeを使うことで保持できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can leave this blank.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを空白のままにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make sure the lines in the else clause are indented properly by selecting all of them and pressing Control-I.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、else節の中の行が適切に字下げされるようにすることが、それら全部を選択してコントロール-lを押すことで確実に行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make sure the lines in the for-in loop are indented properly by selecting all of them and pressing Control-I.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、for-inループの中の行が正しく字下げされることを、それらのすべてを選択してコントロール-Iを押すことによって確実に行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can name and rate these sample meals whatever you like, of course, but here are some examples:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれらの見本の食事に好きなように名前と格付けを付けることができます、もちろん、しかしここにいくつかの例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can now access the image view from code to change its image, but how do you know when to change the image?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今やイメージビューにコードからアクセスしてそれの画像を変更できます、しかしあなたは画像を変更する時をどうやって知るのでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can preview your app interface using the assistant editor, which displays a secondary editor side-by-side with your main one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのアプリのインターフェースを、副次的なエディタをあなたの主要なものに並べて表示するアシスタントエディタを使ってプレビューすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can represent the rating value with an Int, and the buttons as an array of UIButton objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、格付けの値をIntを使って、そしてボタンをUIButtonオブジェクトの配列として表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can reuse the rating control UI you created in an earlier lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたが前のレッスンで作成した格付けコントロールUIを再利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can run all your unit tests at the same time by pressing Command-U, or you can run an individual test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、すべてのあなたのユニットテストを同時に実行することがコマンド-Uを押すことで可能です、またあなたは個々のテストを実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can select the text field and type text into it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テキスト欄を選択してテキストをそれの中へとタイプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can specify these kinds of interface rules easily using Auto Layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれらの種類のインターフェース規則を「自動レイアウト」（自動配置）を使って簡単に指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can then create a connection between those classes and scenes in your storyboard to get the behavior you defined in code and the UI you defined in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはそれで、それらのクラスとあなたのストーリーボードの中のシーンの間の結合を作成することができ、あなたがコードにおいて定義した挙動とあなたがあなたのストーリーボードにおいて定義したUIを得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a single if statement to bind multiple values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはただ１つのif文を使って複数の値をバインドすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the abbreviated form anytime the value’s type is already known.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは省略形式をいつでもその値の型がすでに知られているときは使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the outline view toggle to collapse and expand the outline view as needed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはアウトラインビュー切替スイッチを使って、アウトラインビューを必要に応じて畳んだり広げたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this constant property to define the number of stars the control displays.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、この定数プロパティを使うことで、コントロールが表示する星の数を制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to identify which segue is occurring, and display the appropriate information in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使って、どのセグエが生じているのか識別して、適切な情報を食事シーンにおいて表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can write an action method that occurs when a gesture recognizer recognizes its assigned gesture, which is exactly what you need to do for the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるジェスチャリコグナイザがそれの割当てジェスチャを認識するときに発生するアクションメソッドを書くことができます、それは、まさしくあなたがイメージビューにする必要があるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You care about configuring and passing the Meal only if the Save button was tapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがMealを構成して渡すことについて面倒を見るのは、Saveボタンがタップされた場合のみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You choose your own keys based on what makes the most sense in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた独自のキーをあなたのアプリにおいて最も意味の通るものに基づき選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You conform to the protocol by implementing all of its requirements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはプロトコルにそれの要件のすべてを実装することによって準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create an action in the same way you create an outlet: Control-drag from a particular object in your storyboard to a view controller file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはアクションを、あなたがアウトレットを作成したのと同じ方法で作成します：あなたのストーリーボードの中の特定のオブジェクトからビューコントローラファイルまでコントロールドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You define the behavior of your view controllers in code by creating and implementing custom view controller subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、コードにおいてあつらえのビューコントローラサブクラスを作成し実装することによって、あなたのビューコントローラの挙動を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You describe your intent for the positioning of elements in a scene and then let the layout engine determine how best to implement that intent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるシーンの中の要素の位置の取り方に対するあなたの意図を記述します、そうするとレイアウト機構はどうすればその意図を実装するのに最良かを判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You describe your intent using constraints—rules that explain where one element should be located relative to another, what size it should be, or which of two elements should shrink first when something reduces the space available for each of them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたの意図を記述するのに使うのは制約です—それはある要素が別のものとの関係から置かれるべき場所、それはどのくらいの大きさであるべきか、または２つの要素のどちらがそれらそれぞれで利用可能な空間を何かが減らす時に最初に小さくされるべきかを説明する規則です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You designed your custom rating control class to be interactive, but it doesn’t need to be interactive when it’s displayed in this table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのカスタム格付けコントロールクラスを相互作用するように設計しました、しかしそれがこのテーブルビューセルにおいて表示される時は相互作用する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do this by defining additional connections—called outlets and actions—between the views in the storyboard and the view controller source code files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これを追加の接続—アウトレットおよびアクションと呼ばれるもの—をストーリーボードの中のビューとビューコントローラ・ソースコードファイルとの間に定義することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do this in the textFieldShouldReturn(_:) method, which gets called when the user taps Return (or in this case, Done) on the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれを行うのはtextFieldShouldReturn(_:)メソッドにおいてです、それが呼ばれるのはユーザがリターン（またはこの場合、Done）をキーボード上でタップした時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t call an initializer by writing init; you call it by putting parentheses with the appropriate arguments after the class name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、イニシャライザをinitを書くことによって呼び出すことはできません；あなたは、丸括弧を適切な引数とともにクラス名の後に置くことでそれを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t need this comment in your method implementation, so go ahead and delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのコメントをあなたのメソッド実装において必要としません、それで先へ進んでそれは削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t need to do anything special to make sure these methods get called at the correct time—the application object handles that part of the job for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドが正しい時に呼ばれるのを確実にするのに、あなたが何か特別なことをする必要はありません—アプリケーションオブジェクトはその仕事の一部としてあなたの代わりにそれを取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t need to use any part of the template implementation for this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、どのひな形実装部分もこのレッスンに使う必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You downcast the return value using the forced type cast operator (as!) because if the object can’t be cast as a String, or if it’s nil, something has gone wrong and the error should cause a crash at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、戻り値を強制型キャスト演算子（as!）を使ってダウンキャストします、なぜならオブジェクトがStringとしてキャストされることができないならば、またはそれがnilならば、何がが間違っていて、そのエラーは実行時でクラッシュを引き起こすべきだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You downcast this return value of decodeObjectForKey(_:) as a UIImage to be assigned to a photo constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このdecodeObjectForKey(_:)の戻り値をUIImageとしてダウンキャストして、photo定数に割り当てられるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You expect this initialization to fail because the name is an empty string, which you explicitly test against in your initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこの初期化が失敗すると予想します、なぜなら名前が空の文字列だからで、それはあなたが明示的にあなたのイニシャライザにテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You expect this test case to fail because the rating is negative, which you explicitly test against in your initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのテスト項目が失敗すると予想します、なぜなら格付けが負数だからで、それはあなたが明示的にあなたのイニシャライザにテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You have also been using the value 44 in your code to represent the button’s size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、値44をあなたのコードにおいてボタンの大きさを表すために使ってしまっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You increment the count of the squares and triangles variables by one each time the corresponding shape is found, printing the values at the end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはsquaresとcircles変数のもつ総数を該当する図形が見つけられるたびに１ずつ増やして、その値を最後に出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You just added a comment to your source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ただ単にコメントをあなたのソースコードに加えただけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You mark these constants with the static keyword, which means they apply to the class instead of an instance of the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらの定数をstaticキーワードで印します、それはこれらがこのクラスに適用されることを意味します、このクラスのインスタンスにではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may have noticed that the value of the Type field defaults to AnyObject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Type欄の値が初期状態でAnyObjectになっているのに気づくかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may have to click the disclosure triangles next to those objects to see the nested table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらのオブジェクトの隣で開示三角形をクリックして入れ子にされたテーブルビューを見る必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may have to disclose those objects to see the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらのオブジェクトを開いていって、テーブルビューセルを見なければならないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may remember seeing these at the end of some types in the AppDelegate.swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、AppDelegate.swiftファイルのいくつかの型の終わりでこれらを見ているのを覚えているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might notice that your table view has a bar on top of it now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、今ではあなたのテーブルビューがそれの上部にバーを持つことに気づくかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need a way to let users put the table view into an editing mode from which they can delete cells.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの必要なのは、ユーザにテーブルビューを編集モードの状態へ置かせることです、それによって彼らはセルを削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to account for both cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは両方の場合を考慮する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to add 1 because arrays are indexed starting with 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが1を加える必要がある理由は、配列は0で開始してインデックスを付けられるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to add code to check for those cases and to return nil if they fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのはコードを加えてこれらの場合を検査して、それらが不合格ならnilを返すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to change a few settings on this table view so you can use it in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、テープルビュー上でいくつかの設定を変更して、それをあなたのアプリにおいて利用可能なものにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to downcast because sender.sourceViewController is of type UIViewController, but you need to work with MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはダウンキャストを必要とします、なぜならsender.sourceViewControllerは型UIViewControllerですが、あなたが必要とするのはMealViewControllerを扱うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to give users a way to indicate that they want to change the image—for example, by tapping the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要なのは、ユーザにある方法を与えて、彼らが画像を変更したいことを示させることです—たとえば、イメージビューをタップすることによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to implement both the encodeWithCoder(_:) method and the initializer for the data to save and load properly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、encodeWithCoder(_:)メソッドとイニシャライザの両方をデータを保存してロードするプロパティのために実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to specify that the text field should resign its first-responder status when the user taps a button to end editing in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが指定する必要があるのは、ユーザがあるボタンをタップした時にテキスト欄での編集を終わるためにテキスト欄がそれのファーストレスポンダ状態をやめることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You now have a way to identify the Save button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今ではSaveボタンを識別する方法を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You now have two scenes, one for displaying the meal list and one for adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今２つのシーンを持ちます、食事リストを表示するために１つ、そして新しい食事を加えるために１つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You now have two segues that go to the same scene, so you need a way to identify when the user is trying to add a new meal or edit an existing one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今では同じシーンに行き着く２つのセグエを持ちます、それであなたはユーザが新しい食事の追加または既存のものの編集を試みる時に識別する方法を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You removed the comment that says #warning Incomplete implementation because you’ve completed the implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは#warning Incomplete implementationというコメントを削除しました、なぜならあなたが実装を完了したからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You resize a UI element by dragging its resize handles, which are small white squares that appear on the element’s borders.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UI要素をそれのリサイズハンドル、それは小さな四角形でその要素のへりに現れます、をドラッグすることによって大きさ調整します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You reveal an element’s resize handles by selecting it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ある要素のリサイズハンドルをそれを選択することによって見えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You see exactly what you're building while you’re building it, get immediate feedback about what’s working and what’s not, and make instantly visible changes to your UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたが作っているものをあなたがそれを作っている時に正確に見て、何が機能して何がしないかについて直に反応を得ます、そして即座に視覚的変更をあなたのUIに行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You separated this into its own method to make your code more modular and readable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのコードをよりモジュール化し読みやすくするために、これを独自のメソッドに分割しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You set the target to self, which in this case is the RatingControl class, because that’s where the action is defined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはターゲットをselfに設定します、それはこの場合にはRatingControlクラスです、なぜならそれはアクションが定義されるところだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You set the title using the navigation item of your meal list (the table view controller) rather than setting it directly on the navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはタイトルを、あなたの食事リスト（テーブルビューコントローラ）のナビゲージョン項目を使って設定します、それを直接ナビゲーションバー上に設定するのではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to click a table view cell to navigate to the meal scene, and see it prepopulated with data about the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはテーブルピューセルをクリックして食事シーンに導かれます、そしてそれがその食事についてのデータで満たされるのを見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to click inside the text field and enter text using the keyboard (if you’d like, toggle the software keyboard by pressing Command-K).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テキスト欄内をクリックして、テキストをキーボードを使って入力できるはずです（あなたがそうしたいなら、ソフトウェアキーボードをコマンドキー＋Kを押すことでオンオフできます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to click the image view to pull up an image picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、イメージビューをクリックしてイメージピッカーをプルアップできなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to see a view with a small red square inside of it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ビューと一緒に小さな赤い四角をそれの内部に見ることができるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to see the text field, label, and button you just added listed in the hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テキスト欄、ラベル、そしてボタンを正にあなたが加えたまま階層に記載されるのを見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to tap the image view to pull up an image picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、イメージビューをタップしてイメージピッカーをプルアップできなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should see five stars and be able to click one to change the rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、５つの星を見るはずです、そして１つクリックすることで格付けを変更できるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should see stars instead of red buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、星を赤いボタンの代わりに見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You still see the meal scene, but there’s no longer a button to navigate back to the meal list—instead, you see the two buttons you added, Cancel and Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはやはり食事シーンを見ます、しかしもはや食事リストに戻るよう導くボタンはありません—代わりに、あなたが加えた２つのボタン、CancelとSaveを見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You typically create a view in one of two ways: by initializing the view with a frame so that you can manually add the view to your UI, or by allowing the view to be loaded by the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは概して、ビューを２つのやり方のうちの１つで作成します：ビューをある配置枠（frame フレーム）を使って初期化（イニシャライズ）して、それであなたが手動でビューをあなたのUIに追加することによって、またはビューをストーリーボードにロードされるようにすることによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use actions to drive the flow of your app in response to user or system events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはアクションを使って、あなたのアプリの流れをユーザやシステムのイベントに応じて動かします（駆動します）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use storyboards to lay out the flow—or story—that drives your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはストーリーボードを使って、あなたのアプリを操作する流れ（フロー）—または物語（ストーリー）—を整えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the index variable to compute a new location for the button frame and set it on the button variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、index変数を使って新しい場所をボタン配置枠に対して計算して、それをbutton変数に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the canvas to add and arrange UI elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このキャンバスを使って、いろいろなUI要素を加えて整えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this representation to create an adaptive interface, which is an interface that automatically adjusts so that it looks good in the context of the current device and orientation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、この表現を使って適応インターフェイスを作成します、それは自動的に調節することでそれが現在の機器と方向の状況にふさわしく見えるようになるインターフェイスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use unwind segues to implement reverse navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、巻き戻しセグエを使って復帰ナビゲーションを実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want the Add button (+) to bring up the meal scene, so you’ll do this by having the button trigger a segue (or transition) to that scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが追加ボタン（+）に望むことは、食事シーンを画面に出すことです、それであなたは、このボタンがそのシーンへのセグエ（画面転換）を引き起こすようにしてこれを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want to return the number of meals you have.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが望むのはあなたが持つ食事の数を返すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll enable the user to tap on a meal cell to pull up a version of the meal scene that’s prepopulated with information about a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザに食事セル（食事リストの１ます）上でタップして、あるバージョンの食事シーン、ある食事についての情報で既に満たされるもの、をプルアップする（引っぱってくる）手段を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your PropertyKey structure should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのPropertyKey構造体はこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your cancel(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのcancel(_:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your imagePickerController(_:didFinishPickingMediaWithInfo) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのimagePickerController(_:didFinishPickingMediaWithInfo)メソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your imagePickerControllerDidCancel(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのimagePickerControllerDidCancel(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your init?(coder:) initializer should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのinit?(coder:)イニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your intrinsicContentSize method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのintrinsicContentSizeメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your layoutSubviews() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのlayoutSubviews()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your loadMeals() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのloadMeals()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your prepareForSegue(_:sender:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのprepareForSegue(_:sender:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your prepareForSegue(_:sender:) method should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのprepareForSegue(_:sender:)メソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your saveMeals() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのsaveMeals()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your selectImageFromPhotoLibrary(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのselectImageFromPhotoLibrary(_:)アクションメソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your setDefaultLabelText(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのsetDefaultLabelText(_:)アクションメソッドは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your tableView(_:cellForRowAtIndexPath:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtableView(_:cellForRowAtIndexPath:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your tableView(_:commitEditingStyle:forRowAtIndexPath:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtableView(_:commitEditingStyle:forRowAtIndexPath:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your testMealInitialization() unit test should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtestMealInitialization()ユニットテストは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your textFieldDidEndEditing(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtextFieldDidEndEditing(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your textFieldShouldReturn(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtextFieldShouldReturn(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your unwindToMealList(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのunwindToMealList(_:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your updateButtonSelectionStates() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのupdateButtonSelectionStates()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your viewDidLoad() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのviewDidLoad()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your viewDidLoad() method should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのviewDidLoad()メソッドはこのようにものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your UI should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのUIはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your UI should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのUIはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your Xcode window should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのXcodeはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your asset catalog should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアセットカタログはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your dialog should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのダイアログはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your first lesson is a playground, a type of Xcode file that lets you interact with the code and see the immediate results.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの最初のレッスンはプレイグラウンド（遊び場）です、それはある種類のXcodeファイルで、あなたにコードと触れ合ってすぐに結果を見ることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your first lesson is presented in the form of a guided Swift playground, a type of file that lets you change and interact with the code directly in Xcode and see the result immediately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの最初のレッスンは、案内付きSwifプレイグラウンドという形で提供されます、それはあなたにXcodeにおいてコードの変更やそれとの相互作用をさせて結果をすぐに見れるようにするある種類のファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your image view now has a 1:1 aspect ratio, so it will always show a square.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのイメージビューは今では1:1の縦横比率を持ちます、それでそれは常に正方形に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your job is to implement the appropriate protocol methods in your table view controller subclass so that your table view has the correct behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの仕事は、適切なプロトコルメソッドをあなたのビューコントローラサブクラスに実装して、あなたのテーブルビュが正しく振舞うようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your meal scene UI should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの食事シーンUIはこのようにものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your outlets in MealTableViewCell.swift should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアウトレットはMealTableViewCell.swiftにおいてこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your scene should look similar to this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your scene should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your storyboard should look similar to this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll also center the elements in your stack view to balance the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、あなたのスタックビューの要素の中心をとってUIのつり合いをとりたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll be using some of these methods in the FoodTracker app to load and display view data at the right time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらのメソッドのいくつかをFoodTrackerアプリにおいてビューデータをロードしたり表示したりするために使うことになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll be working with a class from the UIKit framework, so you need to include UIKit in your import statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはUIKitフレームワークからのクラスを扱うことになります、それであなたが必要とするのはUIKitをあなたのインポート文に含めることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll become familiar with the structure of a project in Xcode and learn how to navigate between and use basic project components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Xcodeにおけるプロジェクトの構造に馴染んで、基本的なプロジェクトコンポーネントの間をなんとか進んでいき、それを使用する方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll come back to working on the table view itself in a little while, after you design an interface for what the table view displays: its table view cells.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テーブルビューそれ自体での作業に少ししたら戻ってきます、あなたがインターフェイス設計を、テーブルビューが表示するのは何か、についてした後にです：それはテーブルビューセル（表のます目）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll configure the buttons to save or cancel adding a new meal and to bring the user back to the meal list soon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれらのボタンを、新しい食事の追加を保存またはキャンセルして、ユーザが食事リストにすぐに戻るように構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll create a second, table view-based scene, that lists the user’s meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、２番目の、テーブルビューに基づくシーンを作ります、それはユーザの食事をリスト（一覧）にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll create the new scene based on a table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、新しいシーンをテーブルビューコントローラに基づいて作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll design custom table cells to display each meal, which look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、カスタム（あつらえ）のテーブルセル（表の１ます）を設計することで、各食事の情報を整え表示します、それはこのように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll differentiate the segues based on the identifiers you assigned to them earlier: AddItem (modal segue) and ShowDetail (show segue).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、セグエをあなたがそれらに前もって割り当てた識別子：AddItem（モーダルセグエ）とShowDetail（表示セグエ）に基づいて区別します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll download the playground file, open it in Xcode, and use it to get familiar with key concepts in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、プレイグラウンドファイルをダウンロードして、それをXcodeで開き、そしてSwiftの鍵となる概念に親しむのにそれを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll find that code completion is one of the great time-saving features of Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、コード補完がXcodeの偉大な時間節約機能の１つであることを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll finish a more advanced implementation of this method in a little while, but for now, the unwindToMealList(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドのより進んだ実装を少し後でやり遂げます、しかし今のところ、unwindToMealList(_:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll fix that next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを次に修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll implement a check that determines how the current scene was presented when the user taps the Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはある検査を実装して、現在のシーンが表現された方法をユーザがCancelボタンをタップする時に特定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll implement this method in MealViewController to do exactly that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドをMealViewControllerにおいて実装することで厳密にそれが実行されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll learn more about initializers in a little while.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう少ししたら、あなたはイニシャライザについてもっと学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll learn more about the roles of views and view controllers soon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはすぐに、もっとビューおよびビューコントローラについて学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll learn unwrapping optionals later, but the most straightforward way to do it involves the force unwrap operator (!).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはオプショナルをアンラップすることを後で学びます、しかし最もわかりやすい方法はそれに強制アンラップ演算子（!）を伴わせることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll make a change to the label outlet (mealNameLabel) in a later lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あとのレッスンでラベルアウトレット（mealNameLabel）に変更を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need this button and eventually the other buttons in this view to perform an action when they’re tapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、このボタンとゆくゆくは他のボタンがこのビューにおいてあるアクションをそれらがタップされた時に行うようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need this feature later to let users interact with the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザがイメージビューと相互作用できるようにするためにこの機能を後で必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to override this method to place the buttons appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、このメソッドをオーバーライドして、ちょうどよくボタンを設置するようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to adjust where the buttons lay out in the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、ビューのどこにボタンがレイアウト（配置）されるか調節することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to click OK on the alert that asks for permission to give the FoodTracker app access to Photos.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、FoodTrackerアプリをPhotosにアクセスさせるよう許可を求める警告上でOKをクリックする必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to create outlets for the text field and label in your UI to be able to reference them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要なのは、あなたのUIの中のテキスト欄とラベルに対するアウトレットを作成して、それらが参照されることができるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to keep track of a rating value—0, 1, 2, 3, 4, or 5—as well as the buttons that a user taps to set that rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、格付けの値—0、1、2、3、4、または5—の、それだけでなくその格付けを設定するためにユーザがタップするボタンの、最新の状態を把握することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice it looks like there’s only one button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはそれがただひとつのボタンだけがあるように見えることに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice that the code above has a comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは上のコードがコメントを持つことに気がついたでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice that the text field isn’t stretching to the far edge of the scene like it used to, so you’ll fix that next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テキスト欄が前のようにシーンの端まで伸びていないことに気づくでしょう、なのであなたはそれを次に直します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice the UI elements space out vertically, and the stack view growing with them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UI要素が垂直方向に間隔を空けたことに気づくでしょう、そしてスタックビューもそれらと一緒に大きくなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice the sections you denoted by // MARK: listed here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ここにリストされたあなたが// MARK:で示したそれぞれの部門に気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice there’s a little bit of overlap between the table view cells and the status bar—you’ll fix that in the next lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テーブルビューセルとステータスパーが少しばかり重なっているのに気がつくでしょう—あなたは次のレッスンでそれを修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll rarely need to create implicitly unwrapped optionals in your own code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはめったに暗黙的アンラップオプショナルをあなたのコードにおいて必要としないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll rearrange the existing UI elements and work with an image picker to add a photo to the UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、既存のUI要素を再配置します、そして写真をUIに加えるためにイメージピッカー（画像を選び出す機能）を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll replace this debugging implementation with a real implementation in a little while.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このデバック実装を実際の実装としばらくして置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll replace this with a new implementation soon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを新しい実装でまもなく置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll see and write both types of comments throughout the source code in the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、両方の型のコメントをこのレッスンのソースコードのあちらこちらで見たり書いたりするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll see this in action later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これを後でアクションで見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll start by working on a UI for the scene that lets you add a new meal to your meal tracking app, FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、新しい食事をあなたの食事追跡アプリ、FoodTrackerに加えるシーンのUI上で作業することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll start writing code in this source code file later in this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、後ほどこのレッスンでこのソースコードファイルにコードを書き始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll use the areas identified in the window below throughout the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはレッスンを通して下のウインドウにおいて確認される区画を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll use these images when you load initial meal data into your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれらの画像を使うのは、あなたが最初の食事画像データをあなたのアプリにロードする時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll want to be able to change the image from within the code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、画像をコード内から変更できることを望むでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll work on getting the right behavior for this next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあなたは、これに対する正しい挙動を得る作業をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re attaching the ratingButtonTapped(_:) action method to the button object, which will be triggered whenever the .TouchDown event occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ratingButtonTapped(_:)アクションをbuttonオブジェクトに取り付けています、それは.TouchDownイベントが起こるたびに作動させられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re close to finalizing the meal scene UI, but first you need to do some cleanup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、食事シーンUIの完成段階に近づいています、しかしまずあなたはいくらかの掃除をする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re familiar with the target-action pattern because you’ve used it to link elements in your storyboard to action methods in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはターゲット-アクション・パターンをよく知っています、なぜならあなたはそれを使ってあなたのストーリーボードの中の要素とあなたのコードの中のアクションメソッドを結びつけているからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re giving your image view a placeholder size so you can specify the appropriate constraints in your interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのイメージビューにプレースホルダサイズを与えています、それであなたは適切な制約をあなたのインターフェイスにおいて指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re making these variables (var) instead of constants (let) because they’ll need to change throughout the course of a Meal object’s lifetime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらを変数（var）にします、定数（let）ではなく、なぜならそれらはMealオブジェクトのライフタイムの流れを通してずっと変更を必要とするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re not using your new class for anything yet, but building it gives the compiler a chance to verify that you haven’t made any typing mistakes, like forgetting the question marks (?).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはあなたの新しいクラスをまだ何にも使いません、しかしそれをビルドすることはコンパイラに機会を与えてあなたが何もタイプし間違いをしなかったことを検証します、疑問符（?）を忘れているようなことを。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re ready to start working on a storyboard for your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのアプリのストーリーボードで作業を始める準備ができています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re setting two different images for different states so you can see when the buttons have been selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは２つの異なる画像を異なる状態に対して設定しています、それであなたはボタンが選択されたのを見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re using redColor() so it’s easy to see where the view is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはredColor()を使っています、それでビューのどこにあるかがわかりやすくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re using a different process to create this class than the RatingControl class you created earlier (iOS &gt; Source &gt; Cocoa Touch Class), because you’re defining a base class for your data model, which means it doesn’t need to inherit from any other classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、以前にあなたが作成したRatingControlクラス（iOS &gt; Source &gt; Cocoa Touch Class）とは異なる過程でこのクラスを作成しています、なぜならあなたが定義しているのはあなたのデータモデルのためのベースクラスだからです、それが意味するのは、それが何ら他のクラスから継承する必要がないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ve added several of these comments so far.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、いくつかこれらのコメントを今までに加えました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>activity viewer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクティビティビューア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adaptive interface</seg>
      </tuv>
      <tuv lang="JA">
        <seg>適応インターフェイス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adopt</seg>
      </tuv>
      <tuv lang="JA">
        <seg>採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>app delegate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリデリゲート（アプリの委任先）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>application object</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションオブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>application programming interface (API)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションプログラミングインターフェイス（API）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>asset catalog</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログ（資産目録）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>assistant editor</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>base class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基盤クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>canvas</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class hierarchy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス階層</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>closed range operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>code completion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード補完</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>comment</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>completion handler</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完了ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>conditional statement</seg>
      </tuv>
      <tuv lang="JA">
        <seg>条件文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>conform to</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>console</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンソール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>constant</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>constraint</seg>
      </tuv>
      <tuv lang="JA">
        <seg>制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>content view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンテンツビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>control</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>convenience initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>便宜イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>data model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>data source</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delegate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デリゲート（委任先、移譲先）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>designated initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>destination view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デスティネーションビューコントローラ（行先ビューコントローラ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>downcast</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>entry point</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エントリポイント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enumeration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event-driven programming</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イベント駆動プログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extension</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>failable initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるイニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>first responder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファーストレスポンダ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fix-it</seg>
      </tuv>
      <tuv lang="JA">
        <seg>修正</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>force-unwrap operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制アンラップ演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>forced type cast operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制型キャスト演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>functions menu</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数メニュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>gesture recognizer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザ（身振り認識）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>global</seg>
      </tuv>
      <tuv lang="JA">
        <seg>グローバル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>half-open range operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS and Swift Terminology</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSとSwiftの専門用語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS apps are based on event-driven programming.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリは、イベント駆動プログラミングに基づきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS automatically calls these methods at appropriate times when a view controller transitions between states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSは、自動的にそれらのメソッドを適切な時に呼びます、その時とはあるビューコントローラが２つの状態間を推移するときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS handles all of the redrawing code for you, so this is actually all the code you need to write for now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSは、再描画コードのすべてをあなたの代わりに取り扱います、それでこれが実際さしあたってあなたが書く必要のあるコードのすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS has many persistent data storage solutions; in this lesson, you’ll use NSCoding as the data persistence mechanism in the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSは、多くの永続データ貯蔵の解決策を持ちます；このレッスンでは、あなたはNSCodingをデータ永続の仕組みとしてFoodTrackerアプリで使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>identity operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>immutable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不変</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>implement</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実装する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>implicitly unwrapped optional</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的アンラップオプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inheritance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザ（初期化子）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inspector pane</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスペクタ枠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>integrated development environment (IDE)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>統合開発環境（IDE）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>intrinsic content size</seg>
      </tuv>
      <tuv lang="JA">
        <seg>固有コンテンツサイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iterate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イテレート（反復適用）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>library pane</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ライブラリ枠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ローカル（局所的）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>loop</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>modal segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダルセグエ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mutable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>navigation controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>navigation stack</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションスタック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil coalescing operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>object</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>optional</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>optional binding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル束縛</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>optional type cast operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル型キャスト演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>or constructed as part of adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または加えている新しい食事の一部として組み立てられます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>outlet</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレット（出口、コンセント差し込み口）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>outline view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビュー（外観図）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>override</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーライド（優先させる）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>playground</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンド（遊び場）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>project navigator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property observer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>read-only</seg>
      </tuv>
      <tuv lang="JA">
        <seg>読み出し専用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>read-write</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込み専用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>resize handles</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リサイズハンドル（寸法調節つまみ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>root view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ルートビューコントローラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>run loop</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行ループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>runtime</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行時</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーン（場面）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>scene dock</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーンドック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエ（遷移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>show segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表示セグエ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>source view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースビューコントローラ（発生ビューコントローラ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボード（物語展開を絵で表したもの、アプリの展開）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>storyboard entry point</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードエントリポイント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string interpolation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>structure</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>subclass</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラス（下位クラス）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>subview</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>superclass</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>superview</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパービュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>target</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>target-action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットアクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tuple</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type casting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type inference</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>underscore</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンダースコア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unit test</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unwind segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unwrap</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンラップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>user interface (UI)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザインターフェイス（UI）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>utility area</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーティリティ区画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>variable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>view hierarchy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビュー階層</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>workspace window</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ワークスペースウインドウ</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
