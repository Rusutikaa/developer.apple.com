<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_1_r8695:8697" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Irreflexivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Reflexivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（反射性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Symmetry)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（対称性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Transitive comparability)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（推移的比較性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Transitive incomparability)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（推移的比較不能性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Transitivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（推移性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(read only)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>（読出し専用）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/   than or equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/   ゼロより大きいか等しくなければならない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 'firstCopy' と 'secondCopy' は [1, 2, 3, 4, 5] です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ 'numbers' is [100, 200, 300, 4, 5]</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 'numbers' は [100, 200, 300, 4, 5] です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ - Complexity: O(n)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ - 計算量: O(n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ - Parameter element: The element to set the new count on.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ - パラメータ element: 新しく数えることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ - Parameter n: The new count for `element`. `n` must be greater</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ - パラメータ n: `element`に対する新しい総数。`n`は</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ A for-in loop over 'ranges' accesses each range:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 「ranges」に対するfor-inループは、各範囲にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ A point in an x-y coordinate system.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ x-y座標システムでのある点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ All properties are *computed* based on members of the Header</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ すべてのプロパティは「ヘッダ」のメンバに基づいて*計算*されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ All successes are equivalent, so none is before any other</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ すべての成功は等しい、なので何か他の前に来るものはありません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ An array of 'Double'</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 「Double」の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ An array of 'Int' elements</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 'Int' 要素の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ An array of 'String' elements</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 'String' 要素の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ An integer type with reference semantics</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 参照意味論を持つ整数型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Ben's family is moving to another state</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ ベンの家族は別の州に引っ越そうとしています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Can only ship standard or priority to PO Boxes</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 標準または優先のみが私書箱に出荷できるなら</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Comparing with the equal-to operator never returns 'true'</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 同等演算子で比較することは決して'true'を返しません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Equivalent to the C 'ceil' function:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ C 'ceil'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Equivalent to the C 'floor' function:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ C 'floor'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Equivalent to the C 'round' function:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ C 'round'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Equivalent to the C 'trunc' function:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ C 'trunc'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Fixed point</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 不動点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Identity</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 単位元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Includes whitespace</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 空白を含む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Incorrect exponent format</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 不正な指数形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Interleave two sequences that yield the same element type</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 同じ要素型を生み出す２つのシーケンスを交互に重ねます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Invalid character</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 無効な文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Iterate over all powers of two (ignoring overflow)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ ２の階乗すべてにわたって繰り返します（オーバーフローは無視します）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Just forward to subscript</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 単に添え字に転送する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Modifications to an instance are visible from either array</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ あるインスタンスへの修正はどちらの配列からも見ることができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Order errors before successes</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 成功の前にエラーを並べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Order errors by code</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ エラーをコードによって並べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Performs an intersection with an Array&lt;Int&gt;</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ あるArray&lt;Int&gt;との共通部分を求める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Prints "false" because `Int` and `UInt8` are different types</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 「false」を出力します、`Int` と `UInt8` は異なる型であるから</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Replacements, additions, and removals are still visible</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 取替、追加、そして削除もやはり見えますが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Returns an array containing the results of</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 以下の結果を含んでいる配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Shortened forms are preferred</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 短縮形式が好まれます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Test with the 'isNaN' property instead</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 代わりに'isNaN'プロパティでテストしてください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Tests whether primes is a subset of a Range&lt;Int&gt;</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ primesが、あるRange&lt;Int&gt;の下位集合かどうかテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ The full type name is also allowed</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 完全な型名も受け入れられます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ The storage for 'numbers' is copied here</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 'numbers' のストレージはここでコピーされます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Triggers runtime error: Index out of range</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 実行時エラーの引き金となります：範囲外インデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Type inferred as 'Double'</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 型は「Double」と推論される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Updates the count stored in the set for the given element,</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 与えられた要素に対して集合の中に格納された総数を更新しながら、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Use 'abs(_:)' instead of 'magnitude'</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 'abs(_:)' を 'magnitude' の代わりに使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Use 'joined()' to access each element of each range:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 「joined()」を使うことで、各範囲の各要素にアクセスしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ Walk the elements of a tree from a node up to the root</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ あるツリーの要素をあるノードからルートへとさかのぼって移動します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ William is signing up for a different class</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ ウィリアムは違うクラスを受講します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ adding the element if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 必要なら要素を追加する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ error: ambiguous use of 'subscript'</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ エラー：「添え字」のあいまいな使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ error: cannot convert value of type '[String?]' to type 'NSArray'</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ エラー：型 '[String?]' の値を型 'NSArray' に変換することはできません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ for each prefix `p` of `self`, in order from shortest to</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ これは「self」の各接頭辞「p」に対して、順番を最短から</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ implementation details</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 実装詳細</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ longest.  For example:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ 最長へです。例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ node is leaf, then leaf.parent, then leaf.parent.parent, etc.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ nodeはleafです、それからleaf.parent、その次にleaf.parent.parent、等々。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ only in the modified array</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ ただ修正された配列においてのみです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>/ value is 1, then 2, then 4, then 8, etc.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>/ valueは１です、それから２、その次に８、等々。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>(true, newMember)<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>newMember<ept i="1">&lt;/c1&gt;</ept> was not contained in <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>newMember<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>に含まれなかったならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>(true, newMember)<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>(true, newMember)<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>newMember<ept i="1">&lt;/c1&gt;</ept> was not contained in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>newMember<ept i="1">&lt;/c1&gt;</ept>がこの集合の中に含まれなかったならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>(true, newMember)<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-infinity<ept i="0">&lt;/c0&gt;</ept> compares less than all values except for itself and NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-infinity<ept i="0">&lt;/c0&gt;</ept>は、それ自身とNaNを除くすべての値より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-infinity<ept i="0">&lt;/c0&gt;</ept> compares less than or equal to all values except NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-infinity<ept i="0">&lt;/c0&gt;</ept>は、NaNを除くすべての値より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept> can also be used as the concrete type for an instance of a type that bridges to an Objective-C class.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept>はまた、Objective-Cクラスへとブリッジするある型のインスタンスに対する具体的な型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept> represents Boolean values in Swift.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>はブール値をSwiftにおいて表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EmptyCollection<ept i="0">&lt;/c0&gt;</ept> does not have any element indices, so it is not possible to advance indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EmptyCollection<ept i="0">&lt;/c0&gt;</ept>は、全く要素インデックスを持ちません、それでインデックスを進めることは可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedSequence<ept i="0">&lt;/c0&gt;</ept> is a sequence of pairs (<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>, <bpt i="2" x="2">&lt;e2&gt;</bpt>x<ept i="2">&lt;/e2&gt;</ept>), where <bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>s are consecutive <bpt i="4" x="4">&lt;c4&gt;</bpt>Int<ept i="4">&lt;/c4&gt;</ept> values starting at zero, and <bpt i="5" x="5">&lt;e5&gt;</bpt>x<ept i="5">&lt;/e5&gt;</ept>s are the elements of a base sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedSequence<ept i="0">&lt;/c0&gt;</ept>は、ペア (<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>, <bpt i="2" x="2">&lt;e2&gt;</bpt>x<ept i="2">&lt;/e2&gt;</ept>) からなるシーケンスです、ここで<bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>はゼロで始まる連続した<bpt i="4" x="4">&lt;c4&gt;</bpt>Int<ept i="4">&lt;/c4&gt;</ept>です、そして<bpt i="5" x="5">&lt;e5&gt;</bpt>x<ept i="5">&lt;/e5&gt;</ept>は基盤シーケンスの要素です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Float80.significandBitCount<ept i="0">&lt;/c0&gt;</ept> is 63, even though 64 bits are used to store the significand in the memory representation of a <bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Float80.significandBitCount<ept i="0">&lt;/c0&gt;</ept>は63です、たとえ64ビットが使用されて仮数を<bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept>インスタンスのメモリ表現に格納するとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept> requires that the base collection’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept> setter does not invalidate indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept>が必要とするのは、基盤コレクションの持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept>のセッターがインデックスを無効にしないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept> requires that the base collection’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept> setter does not invalidate indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept>が必要とするのは、基盤コレクションの持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept>のセッターがインデックスを無効にしないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept> requires that the base collection’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept> setter does not invalidate indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept>が必要とするのは、基盤コレクションの持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept>のセッターがインデックスを無効にしないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept> requires that the base collection’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept> setter does not invalidate indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept>が必要とするのは、基盤コレクションの持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept>のセッターがインデックスを無効にしないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableSlice<ept i="0">&lt;/c0&gt;</ept> requires that the base collection’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept> setter does not invalidate indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableSlice<ept i="0">&lt;/c0&gt;</ept>が必要とするのは、基盤コレクションの持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept>のセッターがインデックスを無効にしないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableSlice<ept i="0">&lt;/c0&gt;</ept> requires that the base collection’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept> setter does not invalidate indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableSlice<ept i="0">&lt;/c0&gt;</ept>が必要とするのは、基盤コレクションの持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript(_: Index)<ept i="1">&lt;/c1&gt;</ept>のセッターがインデックスを無効にしないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessIndex<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>advanced(by:)<ept i="1">&lt;/c1&gt;</ept>, which provides a stronger semantic guarantee.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessIndex<ept i="0">&lt;/c0&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>advanced(by:)<ept i="1">&lt;/c1&gt;</ept>、それはより強い意味論的保証を提供します。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessIndex<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>distance(to:)<ept i="1">&lt;/c1&gt;</ept>, which provides a stronger semantic guarantee.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessIndex<ept i="0">&lt;/c0&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>distance(to:)<ept i="1">&lt;/c1&gt;</ept>、それはより強い意味論的保証を提供します。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> instances can represent an empty interval, unlike <bpt i="1" x="1">&lt;c1&gt;</bpt>ClosedRange<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>インスタンスは、空の間隔を表すことができます、<bpt i="1" x="1">&lt;c1&gt;</bpt>ClosedRange<ept i="1">&lt;/c1&gt;</ept>とは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a &lt; a<ept i="0">&lt;/c0&gt;</ept> is always <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> (Irreflexivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a &lt; a<ept i="0">&lt;/c0&gt;</ept>は常に<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a &lt; b<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>b &lt; c<ept i="1">&lt;/c1&gt;</ept> implies <bpt i="2" x="2">&lt;c2&gt;</bpt>a &lt; c<ept i="2">&lt;/c2&gt;</ept> (Transitivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a &lt; b<ept i="0">&lt;/c0&gt;</ept>かつ<bpt i="1" x="1">&lt;c1&gt;</bpt>b &lt; c<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>a &lt; c<ept i="2">&lt;/c2&gt;</ept>を意味する（推移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a &lt; b<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>!(b &lt; a)<ept i="1">&lt;/c1&gt;</ept> (Asymmetry)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a &lt; b<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>!(b &lt; a)<ept i="1">&lt;/c1&gt;</ept>を意味する（非対称）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a == a<ept i="0">&lt;/c0&gt;</ept> is always <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> (Reflexivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a == a<ept i="0">&lt;/c0&gt;</ept>は、常に<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>（反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a == b<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>b == c<ept i="1">&lt;/c1&gt;</ept> implies <bpt i="2" x="2">&lt;c2&gt;</bpt>a == c<ept i="2">&lt;/c2&gt;</ept> (Transitivity)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a == b<ept i="0">&lt;/c0&gt;</ept>かつ<bpt i="1" x="1">&lt;c1&gt;</bpt>b == c<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>a == c<ept i="2">&lt;/c2&gt;</ept>を意味する（推移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a == b<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>b == a<ept i="1">&lt;/c1&gt;</ept> (Symmetry)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a == b<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>b == a<ept i="1">&lt;/c1&gt;</ept>を意味する（対称）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areEquivalent(a, a)<ept i="0">&lt;/c0&gt;</ept> is always <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areEquivalent(a, a)<ept i="0">&lt;/c0&gt;</ept>は常に<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areEquivalent(a, b)<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>areEquivalent(b, a)<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areEquivalent(a, b)<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>areEquivalent(b, a)<ept i="1">&lt;/c1&gt;</ept>を意味する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder(a, a)<ept i="0">&lt;/c0&gt;</ept> is always <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder(a, a)<ept i="0">&lt;/c0&gt;</ept>は常に<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>as<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>as?<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>as!<ept i="2">&lt;/c2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>as<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>as?<ept i="1">&lt;/c1&gt;</ept>, および <bpt i="2" x="2">&lt;c2&gt;</bpt>as!<ept i="2">&lt;/c2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> is executed each time the <bpt i="1" x="1">&lt;c1&gt;</bpt>next()<ept i="1">&lt;/c1&gt;</ept> method is called on the resulting iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>は、結果として生じるイテレータで<bpt i="1" x="1">&lt;c1&gt;</bpt>next()<ept i="1">&lt;/c1&gt;</ept>メソッドが呼び出されるたびに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.joined().map(f)<ept i="0">&lt;/c0&gt;</ept> maps eagerly and returns a new array</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.joined().map(f)<ept i="0">&lt;/c0&gt;</ept>は先行にマップを行い、新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.joined()<ept i="0">&lt;/c0&gt;</ept> does not create new storage</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.joined()<ept i="0">&lt;/c0&gt;</ept>は新しいストレージを作りません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.lazy.joined().map(f)<ept i="0">&lt;/c0&gt;</ept> maps lazily and returns a <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.lazy.joined().map(f)<ept i="0">&lt;/c0&gt;</ept>は遅延にマップして、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection<ept i="1">&lt;/c1&gt;</ept>を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.lazy.reversed().map(f)<ept i="0">&lt;/c0&gt;</ept> maps lazily and returns a <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.lazy.reversed().map(f)<ept i="0">&lt;/c0&gt;</ept>は遅延にマップして<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection<ept i="1">&lt;/c1&gt;</ept>を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.reversed().map(f)<ept i="0">&lt;/c0&gt;</ept> maps eagerly and returns a new array</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.reversed().map(f)<ept i="0">&lt;/c0&gt;</ept>は、先行にマップして新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.reversed()<ept i="0">&lt;/c0&gt;</ept> does not create new storage</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c.reversed()<ept i="0">&lt;/c0&gt;</ept>は、新しいストレージを作成しません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept> is not evaluated in <bpt i="1" x="1">&lt;c1&gt;</bpt>-Ounchecked<ept i="1">&lt;/c1&gt;</ept> builds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>-Ounchecked<ept i="1">&lt;/c1&gt;</ept>ビルドにおいては評価されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept> is only evaluated in playgrounds and <bpt i="1" x="1">&lt;c1&gt;</bpt>-Onone<ept i="1">&lt;/c1&gt;</ept> builds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept>はただプレイグラウンドと<bpt i="1" x="1">&lt;c1&gt;</bpt>-Onone<ept i="1">&lt;/c1&gt;</ept>において評価されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>defaultValue<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>optional<ept i="1">&lt;/c1&gt;</ept> have the same type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>defaultValue<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>optional<ept i="1">&lt;/c1&gt;</ept>は同じ型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>defaultValue<ept i="0">&lt;/c0&gt;</ept> is the same type as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Wrapped<ept i="1">&lt;/c1&gt;</ept> type of <bpt i="2" x="2">&lt;c2&gt;</bpt>optional<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>defaultValue<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>optional<ept i="2">&lt;/c2&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>Wrapped<ept i="1">&lt;/c1&gt;</ept>型と同じ型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept> must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept>は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection that is not equal to the <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>はコレクションの有効なインデックスで、<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>プロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is always reachable from <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> by zero or more applications of <bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は、常に<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>から<bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>のゼロまたはそれ以上の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is not a valid argument to <bpt i="1" x="1">&lt;c1&gt;</bpt>subscript<ept i="1">&lt;/c1&gt;</ept>, and is always reachable from <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept> by zero or more applications of <bpt i="3" x="3">&lt;c3&gt;</bpt>index(after:)<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>subscript<ept i="1">&lt;/c1&gt;</ept>に対する有効な引数ではありません、そして常に<bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept>からゼロまたはそれ以上の<bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>greatestFiniteMagnitude.ulp<ept i="0">&lt;/c0&gt;</ept> is a finite number, even though the next greater representable value is <bpt i="1" x="1">&lt;c1&gt;</bpt>infinity<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>greatestFiniteMagnitude.ulp<ept i="0">&lt;/c0&gt;</ept>は有限数です、たとえ次のより大きい表現可能な値が<bpt i="1" x="1">&lt;c1&gt;</bpt>infinity<ept i="1">&lt;/c1&gt;</ept>であるとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be a valid index into the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>はコレクションに対する有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>は、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the string that is not equal to the string’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>は、この文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be greater than <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>より大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be less than <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>より少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> must be less than the string’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>は文字列の末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the array or equal to its <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>は、配列の有効なインデックスまたはそれの<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>プロパティでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>は配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the dictionary, and must not equal the dictionary’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>は辞書の有効なインデックスでなければなりません、そして辞書の末尾インデックスと同じではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept> must be greater than or equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> and less than <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>より大きいか等しくそして<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>より小さくなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>input<ept i="0">&lt;/c0&gt;</ept> must be the same iterator instance in repeated calls to this method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>input<ept i="0">&lt;/c0&gt;</ept>は、このメソッドに対して繰り返される呼び出しにおいて同じイテレータでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> must be greater than or equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> must be greater than or equal to zero and must not exceed the number of elements in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>は、ゼロより大きいか等しくなければなりません、そしてコレクションの中の要素の数を超えてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>は、ゼロより大きいか等しくなければなりません、そしてコレクションの要素数より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> must be greater than or equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> has a specific meaning in Swift—the absence of a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>はSwiftでは特別な意味を持ちます—値の不在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>, which gets passed as a null pointer,</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>、それはヌルポインターとして渡されます、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection that is not equal to the <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>はコレクションの有効なインデックスで、<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>プロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>は、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the dictionary and not equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>は、この辞書の有効なインデックスで、<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the range, and must not equal the range’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>は、この範囲の有効なインデックスでなければなりません、そしてこの範囲の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the set, and must not be equal to the set’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>は、この集合の有効なインデックスでなければなりません、そしてこの集合の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> must be less than the view’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>はこのビューの末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>possibleStrictSubset<ept i="0">&lt;/c0&gt;</ept> must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>possibleStrictSubset<ept i="0">&lt;/c0&gt;</ept>は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>possibleStrictSuperset<ept i="0">&lt;/c0&gt;</ept> must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>possibleStrictSuperset<ept i="0">&lt;/c0&gt;</ept>は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>possibleSuperset<ept i="0">&lt;/c0&gt;</ept> must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>possibleSuperset<ept i="0">&lt;/c0&gt;</ept>は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>radix<ept i="0">&lt;/c0&gt;</ept> must be at least 2 and at most 36.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>radix<ept i="0">&lt;/c0&gt;</ept>基数は少なくとも２そして多くて36でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.joined().map(f)<ept i="0">&lt;/c0&gt;</ept> maps eagerly and returns a new array</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.joined().map(f)<ept i="0">&lt;/c0&gt;</ept>は先行にマップを行い、新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.joined()<ept i="0">&lt;/c0&gt;</ept> does not create new storage</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.joined()<ept i="0">&lt;/c0&gt;</ept>は新しいストレージを作りません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.lazy.filter { ... }<ept i="0">&lt;/c0&gt;</ept>, for an arbitrary sequence <bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>, is a <bpt i="2" x="2">&lt;c2&gt;</bpt>LazyFilterSequence<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.lazy.filter { ... }<ept i="0">&lt;/c0&gt;</ept>は、随意のシーケンス<bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>のための、ひとつの<bpt i="2" x="2">&lt;c2&gt;</bpt>LazyFilterSequence<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.lazy.joined().map(f)<ept i="0">&lt;/c0&gt;</ept> maps lazily and returns a <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapSequence<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>s.lazy.joined().map(f)<ept i="0">&lt;/c0&gt;</ept>は遅延にマップして、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapSequence<ept i="1">&lt;/c1&gt;</ept>を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept> must be a valid index of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept>はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>transform<ept i="0">&lt;/c0&gt;</ept> accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>transform<ept i="0">&lt;/c0&gt;</ept>はこのシーケンスのひとつの要素をそれのパラメータとして受け取り、同じもしくは異なる型の変換された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>byte<ept i="1">&lt;/c1&gt;</ept> is a continuation byte; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>byte<ept i="1">&lt;/c1&gt;</ept>が継続バイトならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept> is contained in the range; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept>がこの範囲に含まれるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept> has been offset by exactly <bpt i="2" x="2">&lt;c2&gt;</bpt>n<ept i="2">&lt;/c2&gt;</ept> steps without going beyond <bpt i="3" x="3">&lt;c3&gt;</bpt>limit<ept i="3">&lt;/c3&gt;</ept>; otherwise, <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>limit<ept i="3">&lt;/c3&gt;</ept>を越えることなく、ぴったり<bpt i="2" x="2">&lt;c2&gt;</bpt>n<ept i="2">&lt;/c2&gt;</ept>幅だけ補われたならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept> is greater than or equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>rhs<ept i="2">&lt;/c2&gt;</ept>; otherwise, <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を、<bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>rhs<ept i="2">&lt;/c2&gt;</ept>より大きいか等しいならば返します；そうでなければ、<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>member<ept i="1">&lt;/c1&gt;</ept> exists in the set; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>member<ept i="1">&lt;/c1&gt;</ept>がこの集合に含まれるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>object<ept i="1">&lt;/c1&gt;</ept> is a known to have a single strong reference; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>object<ept i="1">&lt;/c1&gt;</ept>が強い参照をただ１つだけ持つものと知られているならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> has the same value as this instance; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>がこのインスタンスと同じ値を持つならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> is less than this value; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>がこの値より小さいならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is a high-surrogate code unit; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>が高位サロゲートコード単位ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなけれぱ<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is a low-surrogate code unit; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>が低位サロゲートコード単位ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなけれぱ<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>rhs<ept i="2">&lt;/c2&gt;</ept> have the same elements; otherwise, <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>rhs<ept i="2">&lt;/c2&gt;</ept>が同じ要素を持つならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the element was found in the sequence; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素がシーケンスにおいて見つけられなかったならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the initial elements of the sequence are equivalent to the elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>possiblePrefix<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの冒頭の要素が<bpt i="1" x="1">&lt;c1&gt;</bpt>possiblePrefix<ept i="1">&lt;/c1&gt;</ept>の要素と等しいならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the initial elements of the sequence are the same as the elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>possiblePrefix<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの冒頭の要素が<bpt i="1" x="1">&lt;c1&gt;</bpt>possiblePrefix<ept i="1">&lt;/c1&gt;</ept>の要素と同じならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the option set contains <bpt i="1" x="1">&lt;c1&gt;</bpt>member<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセットが<bpt i="1" x="1">&lt;c1&gt;</bpt>member<ept i="1">&lt;/c1&gt;</ept>を含むならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the sequence contains an element that satisfies <bpt i="1" x="1">&lt;c1&gt;</bpt>predicate<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスが<bpt i="1" x="1">&lt;c1&gt;</bpt>predicate<ept i="1">&lt;/c1&gt;</ept>を満たす要素を含むならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set has no elements in common with <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>と共通の要素を持たないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a strict subset of <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>の狭義の部分集合ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a strict subset of <bpt i="1" x="1">&lt;c1&gt;</bpt>possibleStrictSuperset<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>possibleStrictSuperset<ept i="1">&lt;/c1&gt;</ept>の狭義の部分集合ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a strict superset of <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>の狭義の上位集合であるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a strict superset of <bpt i="1" x="1">&lt;c1&gt;</bpt>possibleStrictSubset<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>possibleStrictSubset<ept i="1">&lt;/c1&gt;</ept>の狭義の上位集合であるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a subset of <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>の部分集合ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a subset of <bpt i="1" x="1">&lt;c1&gt;</bpt>possibleSuperset<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>possibleSuperset<ept i="1">&lt;/c1&gt;</ept>の部分集合ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a superset of <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>の上位集合であるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the set is a superset of <bpt i="1" x="1">&lt;c1&gt;</bpt>possibleSubset<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が<bpt i="1" x="1">&lt;c1&gt;</bpt>possibleSubset<ept i="1">&lt;/c1&gt;</ept>の上位集合であるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the string begins with <bpt i="1" x="1">&lt;c1&gt;</bpt>prefix<ept i="1">&lt;/c1&gt;</ept>, otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が<bpt i="1" x="1">&lt;c1&gt;</bpt>prefix<ept i="1">&lt;/c1&gt;</ept>で始まるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the string ends with <bpt i="1" x="1">&lt;c1&gt;</bpt>suffix<ept i="1">&lt;/c1&gt;</ept>, otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が<bpt i="1" x="1">&lt;c1&gt;</bpt>suffix<ept i="1">&lt;/c1&gt;</ept>で終わるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the translation detected encoding errors in <bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>翻訳が<bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept>においてエンコーディングエラーを検出したならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the two operands have equal raw values; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの演算数が等しい生の値を持つならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>、そうでなければ<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the two operands have unequal raw values; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの演算数が等しくない生の値を持つならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>、そうでなければ<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if this range and <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> have at least one element in common; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲と<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が少なくとも１つの共通の要素を持つならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if this sequence and <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> contain equivalent items, using <bpt i="2" x="2">&lt;c2&gt;</bpt>areEquivalent<ept i="2">&lt;/c2&gt;</ept> as the equivalence test; otherwise, <bpt i="3" x="3">&lt;c3&gt;</bpt>false.<ept i="3">&lt;/c3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>、このシーケンスと<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>areEquivalent<ept i="2">&lt;/c2&gt;</ept>を同等性テストとして使って同じ要素らを含むならば；そうでなければ、<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if this sequence and <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> contain the same elements in the same order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスと<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が同じ要素を同じ順序で含んでいるならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if this sequence precedes <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> in a dictionary ordering as ordered by <bpt i="2" x="2">&lt;c2&gt;</bpt>areInIncreasingOrder<ept i="2">&lt;/c2&gt;</ept>; otherwise, <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスが<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>に、<bpt i="2" x="2">&lt;c2&gt;</bpt>areInIncreasingOrder<ept i="2">&lt;/c2&gt;</ept>によって並べられる通りの辞書順序において先行するならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if this sequence precedes <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> in a dictionary ordering; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスが<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>に、ある辞書順序において先行するならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if this value is ordered below <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> in a total ordering of the floating-point type; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値が、浮動小数点型の全順序において<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>より下に並べられるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is +0.0 or -0.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>が+0.0または-0.0である場合に限り<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>がNaN（非数）である場合に限り<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is infinity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>が無限大である場合に限り<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is normal (not zero, subnormal, infinity, or NaN).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>が正規化数である（ゼロ、非正規化数、無限大、またはNaN（非数）でない）場合に限り<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is subnormal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>が非正規化数である場合に限り<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is zero, subnormal, or normal (not infinity or NaN).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>がゼロ、非正規化数、正規化数である（無限大またはNaN（非数）でない）場合に限り、<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff some characters were converted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくらかの文字が変換されなかった場合に限り<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> is the set is strict subset of <bpt i="1" x="1">&lt;c1&gt;</bpt>possibleStrictSuperset<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>ならばこの集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>possibleStrictSuperset<ept i="1">&lt;/c1&gt;</ept>の狭義の部分集合です；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept> is always reachable from <bpt i="1" x="1">&lt;c1&gt;</bpt>lowerBound<ept i="1">&lt;/c1&gt;</ept> by zero or more applications of <bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept>は、常に<bpt i="1" x="1">&lt;c1&gt;</bpt>lowerBound<ept i="1">&lt;/c1&gt;</ept>から<bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>のゼロまたはそれ以上の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept> is not a valid subscript argument and is always reachable from <bpt i="1" x="1">&lt;c1&gt;</bpt>lowerBound<ept i="1">&lt;/c1&gt;</ept> by zero or more applications of <bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept>は有効な添え字引数ではありません、そして常に<bpt i="1" x="1">&lt;c1&gt;</bpt>lowerBound<ept i="1">&lt;/c1&gt;</ept>から<bpt i="2" x="2">&lt;c2&gt;</bpt>index(after:)<ept i="2">&lt;/c2&gt;</ept>のゼロまたはそれ以上の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>v<ept i="0">&lt;/c0&gt;</ept> must be a valid Unicode scalar value, in the range <bpt i="1" x="1">&lt;c1&gt;</bpt>0...0xD7FF<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>0xE000...0x10FFFF<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>v<ept i="0">&lt;/c0&gt;</ept>は、有効なユニコードスカラー値、範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>0...0xD7FF<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>0xE000...0x10FFFF<ept i="2">&lt;/c2&gt;</ept>でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>v<ept i="0">&lt;/c0&gt;</ept> must be a valid Unicode scalar value, in the range <bpt i="1" x="1">&lt;c1&gt;</bpt>0...0xD7FF<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>0xE000...0xFFFF<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>v<ept i="0">&lt;/c0&gt;</ept>は、有効なユニコードスカラー値、範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>0...0xD7FF<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>0xE000...0xFFFF<ept i="2">&lt;/c2&gt;</ept>でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>v<ept i="0">&lt;/c0&gt;</ept> must be a valid Unicode scalar value, in the ranges <bpt i="1" x="1">&lt;c1&gt;</bpt>0...0xD7FF<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>0xE000...0x10FFFF<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>v<ept i="0">&lt;/c0&gt;</ept>は、有効なユニコードスカラー値、<bpt i="1" x="1">&lt;c1&gt;</bpt>0...0xD7FF<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>0xE000...0x10FFFF<ept i="2">&lt;/c2&gt;</ept>の範囲でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.contains(e) &amp;&amp; y.contains(e)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>x.intersection(y).contains(e)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.contains(e) &amp;&amp; y.contains(e)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>x.intersection(y).contains(e)<ept i="1">&lt;/c1&gt;</ept> （xがeを含みかつyもeを含むのは、xとyの交差がeを含む場合に限る）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.contains(e)<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>x.union(y).contains(e)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.contains(e)<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>x.union(y).contains(e)<ept i="1">&lt;/c1&gt;</ept> （xがeを含むならば、暗黙的にxとyの合併はeを含む）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.isStrictSubset(of: y)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>x.isSubset(of: y) &amp;&amp; x != y<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.isStrictSubset(of: y)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>x.isSubset(of: y) &amp;&amp; x != y<ept i="1">&lt;/c1&gt;</ept> （xがyの狭義の上位集合であるのは、yがxの下位集合でありかつxがyと等しくない場合に限る）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.isStrictSuperset(of: y)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>x.isSuperset(of: y) &amp;&amp; x != y<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.isStrictSuperset(of: y)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>x.isSuperset(of: y) &amp;&amp; x != y<ept i="1">&lt;/c1&gt;</ept> （xがyの狭義の上位集合であるのは、xがyの上位集合でありかつxがyと等しくない場合に限る）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.isSubset(of: y)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>y.isSuperset(of: x)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.isSubset(of: y)<ept i="0">&lt;/c0&gt;</ept> if and only if <bpt i="1" x="1">&lt;c1&gt;</bpt>y.isSuperset(of: x)<ept i="1">&lt;/c1&gt;</ept> （xがyの部分集合であるのは、yがxの上位集合である場合に限る）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.ulp<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>NaN<ept i="1">&lt;/c1&gt;</ept> if <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept> is not a finite number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.ulp<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>NaN<ept i="1">&lt;/c1&gt;</ept>です、<bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>が有限数でないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.union(y).contains(e)<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>x.contains(e) || y.contains(e)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.union(y).contains(e)<ept i="0">&lt;/c0&gt;</ept> implies <bpt i="1" x="1">&lt;c1&gt;</bpt>x.contains(e) || y.contains(e)<ept i="1">&lt;/c1&gt;</ept> （xとyの合併がeを含むならば、暗黙的にxがeを含むかもしくはyがeを含む）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> must be represented by a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>は、UTF-16でエンコードされる時あるサロゲートベアで表現されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>AnyObject<ept i="1">&lt;/c1&gt;</ept> can be used as the concrete type for an instance of any class, class type, or class-only protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>AnyObject<ept i="1">&lt;/c1&gt;</ept>は、あらゆるクラス、クラス型、またはクラス専用プロパティのインスタンスに対する具体的な型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept> is a binary floating-point type that has a radix of <bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>はバイナリ浮動小数点型で<bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>の基数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> is also the base protocol for the <bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>Comparable<ept i="3">&lt;/c3&gt;</ept> protocols, which allow more uses of your custom type, such as constructing sets or sorting the elements of a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>はまた、<bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>Comparable<ept i="3">&lt;/c3&gt;</ept>プロトコルのための基盤プロトコルです、それらはあなたのあつらえの型のさらなる利用を可能します、例えば集合の組み立てやコレクション要素のソートなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Optional.none<ept i="1">&lt;/c1&gt;</ept> is equivalent to the <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept> literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Optional.none<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>リテラルに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>ShippingOptions<ept i="1">&lt;/c1&gt;</ept> includes a <bpt i="2" x="2">&lt;c2&gt;</bpt>rawValue<ept i="2">&lt;/c2&gt;</ept> property of type <bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept> that stores the bit mask of available shipping options.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>ShippingOptions<ept i="1">&lt;/c1&gt;</ept>は、型<bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept>の<bpt i="2" x="2">&lt;c2&gt;</bpt>rawValue<ept i="2">&lt;/c2&gt;</ept>プロパティを含みます、それは可能な出荷オプションのビットマスクを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept> provides limited, pointer-based access to its contents, unlike Swift’s more commonly used <bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept>は、制限された、ポインタに基づくアクセスをそれの内容に提供します、Swiftのより一般的な<bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept> 型とは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> may have a lower minimal alignment that trades runtime performance for space efficiency.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>は、空間能率に対する実行時性能と引き換えに、より低い極小の引数を持ってもかまいません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>characterIndex<ept i="1">&lt;/c1&gt;</ept> must be an element in <bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf16).characters.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>characterIndex<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf16).characters.indices<ept i="2">&lt;/c2&gt;</ept>の中の一要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>characterIndex<ept i="1">&lt;/c1&gt;</ept> must be an element of <bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf8).characters.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>characterIndex<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf8).characters.indices<ept i="2">&lt;/c2&gt;</ept>の中の一要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> must be zero or greater.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>は、ゼロまたはより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept> is contained in the range if it is between the two bounds or equal to either bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept>は、それが２つの境界の間またはどちらかの境界と等しいならば、その範囲に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>maxSplits<ept i="1">&lt;/c1&gt;</ept> must be greater than or equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>maxSplits<ept i="1">&lt;/c1&gt;</ept>は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>n<ept i="1">&lt;/c1&gt;</ept> must not be negative unless the collection conforms to the <bpt i="2" x="2">&lt;c2&gt;</bpt>BidirectionalCollection<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>n<ept i="1">&lt;/c1&gt;</ept>は、そのコレクションが<bpt i="2" x="2">&lt;c2&gt;</bpt>BidirectionalCollection<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept> must contain exactly one extended grapheme cluster.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>は、厳密に１つの拡張書記素クラスタを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>sum<ept i="1">&lt;/c1&gt;</ept> would be better implemented using <bpt i="2" x="2">&lt;c2&gt;</bpt>reduce<ept i="2">&lt;/c2&gt;</ept>].</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>sum<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>reduce<ept i="2">&lt;/c2&gt;</ept>を使ってもっとよく実装されるでしょう。］</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalarIndex<ept i="1">&lt;/c1&gt;</ept> must be an element in <bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf16).unicodeScalarIndex.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalarIndex<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf16).unicodeScalarIndex.indices<ept i="2">&lt;/c2&gt;</ept>の中の一要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalarIndex<ept i="1">&lt;/c1&gt;</ept> must be an element of <bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf8).unicodeScalars.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalarIndex<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf8).unicodeScalars.indices<ept i="2">&lt;/c2&gt;</ept>の中の一要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>utf16Index<ept i="1">&lt;/c1&gt;</ept> must be an element in <bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf8).utf16.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>utf16Index<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf8).utf16.indices<ept i="2">&lt;/c2&gt;</ept>の中の一要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>utf8Index<ept i="1">&lt;/c1&gt;</ept> must be an element in <bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf16).utf8.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>utf8Index<ept i="1">&lt;/c1&gt;</ept>は、<bpt i="2" x="2">&lt;c2&gt;</bpt>String(utf16).utf8.indices<ept i="2">&lt;/c2&gt;</ept>の中の一要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>BinaryFloatingPoint<ept i="2">&lt;/c2&gt;</ept> is implemented in the standard library by <bpt i="3" x="3">&lt;c3&gt;</bpt>Float<ept i="3">&lt;/c3&gt;</ept>, <bpt i="4" x="4">&lt;c4&gt;</bpt>Double<ept i="4">&lt;/c4&gt;</ept>, and <bpt i="5" x="5">&lt;c5&gt;</bpt>Float80<ept i="5">&lt;/c5&gt;</ept> where available.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>BinaryFloatingPoint<ept i="2">&lt;/c2&gt;</ept>は、標準ライブラリにおいて<bpt i="3" x="3">&lt;c3&gt;</bpt>Float<ept i="3">&lt;/c3&gt;</ept>、<bpt i="4" x="4">&lt;c4&gt;</bpt>Double<ept i="4">&lt;/c4&gt;</ept>、そして利用可能なところでは<bpt i="5" x="5">&lt;c5&gt;</bpt>Float80<ept i="5">&lt;/c5&gt;</ept>によって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>RangeReplaceableCollection<ept i="2">&lt;/c2&gt;</ept> provides default implementations of all its other methods using this initializer and method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>RangeReplaceableCollection<ept i="2">&lt;/c2&gt;</ept>は、それの他のメソッドすべての省略時の実装をこのイニシャライザとメソッドを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>element<ept i="2">&lt;/c2&gt;</ept> is contained in the range if it is greater than or equal to the lower bound and less than the upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>element<ept i="2">&lt;/c2&gt;</ept>が範囲の中のに含まれるのは、それが下方境界より大きいか等しく上方境界より少ない場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>firstSpace<ept i="2">&lt;/c2&gt;</ept> is the position of the first space in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>firstSpace<ept i="2">&lt;/c2&gt;</ept>は、このコレクションの中の最初の空白の位置です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>for<ept i="2">&lt;/c2&gt;</ept>-<bpt i="3" x="3">&lt;c3&gt;</bpt>in<ept i="3">&lt;/c3&gt;</ept> loops are safe in this regard.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>for<ept i="2">&lt;/c2&gt;</ept>-<bpt i="3" x="3">&lt;c3&gt;</bpt>in<ept i="3">&lt;/c3&gt;</ept>ループはこの点に関して安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>pivot<ept i="2">&lt;/c2&gt;</ept> divides the collection into two subranges, <bpt i="3" x="3">&lt;c3&gt;</bpt>numbers[0..&lt;pivot]<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>numbers[pivot..&lt;8]<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>pivot<ept i="2">&lt;/c2&gt;</ept>がコレクションを２つの下位範囲、<bpt i="3" x="3">&lt;c3&gt;</bpt>numbers[0..&lt;pivot]<ept i="3">&lt;/c3&gt;</ept>と<bpt i="4" x="4">&lt;c4&gt;</bpt>numbers[pivot..&lt;8]<ept i="4">&lt;/c4&gt;</ept>へと分けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByNilLiteral<ept i="3">&lt;/c3&gt;</ept> conformance for types that use <bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept> for other purposes is discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>を他の目的に使う型のための<bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByNilLiteral<ept i="3">&lt;/c3&gt;</ept>準拠は、 推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>Optional.some(Wrapped)<ept i="3">&lt;/c3&gt;</ept> stores a wrapped value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>Optional.some(Wrapped)<ept i="3">&lt;/c3&gt;</ept>は、あるラップされた値を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;c6&gt;</bpt>x.isZero<ept i="6">&lt;/c6&gt;</ept> is equivalent to the following comparison: <bpt i="7" x="7">&lt;c7&gt;</bpt>x == 0.0<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="6" x="6">&lt;c6&gt;</bpt>x.isZero<ept i="6">&lt;/c6&gt;</ept>は次の比較に相当するものです：<bpt i="7" x="7">&lt;c7&gt;</bpt>x == 0.0<ept i="7">&lt;/c7&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Table 1<ept i="0">&lt;/e0&gt;</ept> lists the prefix operators and <bpt i="1" x="1">&lt;e1&gt;</bpt>Table 2<ept i="1">&lt;/e1&gt;</ept> lists the infix operators.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>表１<ept i="0">&lt;/e0&gt;</ept>は、接頭辞演算子を一覧にします、そして<bpt i="1" x="1">&lt;e1&gt;</bpt>表２<ept i="1">&lt;/e1&gt;</ept>は接中辞演算子を一覧にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>Axiom:<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;c1&gt;</bpt>x == y<ept i="1">&lt;/c1&gt;</ept> implies <bpt i="2" x="2">&lt;c2&gt;</bpt>x.hashValue == y.hashValue<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>公理：<ept i="0">&lt;/s0&gt;</ept><bpt i="1" x="1">&lt;c1&gt;</bpt>x == y<ept i="1">&lt;/c1&gt;</ept>は暗黙的に<bpt i="2" x="2">&lt;c2&gt;</bpt>x.hashValue == y.hashValue<ept i="2">&lt;/c2&gt;</ept>を意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 16-bit signed integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>16ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 16-bit unsigned integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>16ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 32-bit floating point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>32ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 32-bit signed integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>32ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 32-bit unsigned integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>32ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 64-bit floating point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>64ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 64-bit signed integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>64ビット符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A 64-bit unsigned integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>64ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>ClosedRange<ept i="0">&lt;/c0&gt;</ept> instance contains both its lower and upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスは、それの下方および上方境界の両方を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> that can contain the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このものと同じ要素を、出来る限りより簡単な型で、含むことができるある<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> whose elements consist of those in a <bpt i="1" x="1">&lt;c1&gt;</bpt>Base<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept> passed through a transform function returning <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>、その要素は<bpt i="1" x="1">&lt;c1&gt;</bpt>Base<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept>の中のものから成り、<bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>を返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept> instance contains both its lower bound and its upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスは、それの下側の境界とそれの上側の境界を両方とも含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomReflectable<ept i="0">&lt;/c0&gt;</ept> class can control how its mirror will represent ancestor classes by initializing the mirror with a <bpt i="1" x="1">&lt;c1&gt;</bpt>AncestorRepresentation<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CustomReflectable<ept i="0">&lt;/c0&gt;</ept>クラスは、どのようにそれのミラーが先祖クラスを表すかを<bpt i="1" x="1">&lt;c1&gt;</bpt>AncestorRepresentation<ept i="1">&lt;/c1&gt;</ept>を使うことで制御できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> of values formed by striding over a closed interval.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある完結間隔の全体をまたぐことで形成されるいくつかの値からなる<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> of values formed by striding over a half-open interval.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある半開間隔の全体をまたぐことで形成されるいくつかの値からなる<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> that can contain the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含むことができる<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> whose elements consist of those in a <bpt i="1" x="1">&lt;c1&gt;</bpt>Base<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>Sequence<ept i="2">&lt;/c2&gt;</ept> passed through a transform function returning <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>、その要素は<bpt i="1" x="1">&lt;c1&gt;</bpt>Base<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>Sequencellection<ept i="2">&lt;/c2&gt;</ept>の中のものから成り、<bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>を返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> argument selects the first <bpt i="1" x="1">&lt;c1&gt;</bpt>Child<ept i="1">&lt;/c1&gt;</ept> with a matching label.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>引数は、一致するラベルを持つ最初の<bpt i="1" x="1">&lt;c1&gt;</bpt>Child<ept i="1">&lt;/c1&gt;</ept>を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeDecodingResult<ept i="0">&lt;/c0&gt;</ept> instance, representing the next Unicode scalar, an indication of an error, or an indication that the UTF sequence has been fully decoded.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次のユニコードスカラー、エラーの症状、またはUTFシーケンスが完全にデコードされた徴候を表している、ある<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeDecodingResult<ept i="0">&lt;/c0&gt;</ept>インスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="1" x="1">&lt;c1&gt;</bpt>ReversedCollection<ept i="1">&lt;/c1&gt;</ept> instance wraps an underlying collection and provides access to its elements in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>ReversedCollection<ept i="1">&lt;/c1&gt;</ept>インスタンスは、基礎をなすコレクションをラップして、それの要素へのアクセスを逆順で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="1" x="1">&lt;c1&gt;</bpt>ReversedRandomAccessCollection<ept i="1">&lt;/c1&gt;</ept> instance wraps an underlying collection and provides access to its elements in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>ReversedRandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>インスタンスは、基礎をなすコレクションをラップして、それの要素へのアクセスを逆順で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="2" x="2">&lt;c2&gt;</bpt>Range<ept i="2">&lt;/c2&gt;</ept> instance does not contain its upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Range<ept i="2">&lt;/c2&gt;</ept>インスタンスはそれの上方の境界を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;e0&gt;</bpt>binade<ept i="0">&lt;/e0&gt;</ept> is a set of binary floating-point values that all have the same sign and exponent.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>binade<ept i="0">&lt;/e0&gt;</ept>は、バイナリ浮動小数点値の一揃いです、それは全てが同じ符号と指数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;e0&gt;</bpt>decimal value<ept i="0">&lt;/e0&gt;</ept> contains the significand, a sequence of decimal digits that may include a decimal point.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>10進の値<ept i="0">&lt;/e0&gt;</ept>は仮数、小数点を含んでも良い一連の10進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;e0&gt;</bpt>hexadecimal value<ept i="0">&lt;/e0&gt;</ept> contains the significand, either <bpt i="1" x="1">&lt;c1&gt;</bpt>0X<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>0x<ept i="2">&lt;/c2&gt;</ept>, followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>16進数値<ept i="0">&lt;/e0&gt;</ept>は、仮数、<bpt i="1" x="1">&lt;c1&gt;</bpt>0X<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>0x<ept i="2">&lt;/c2&gt;</ept>のどちらかに続く16進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;e0&gt;</bpt>normal<ept i="0">&lt;/e0&gt;</ept> value is a finite number that uses the full precision available to values of a type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ノーマル<ept i="0">&lt;/e0&gt;</ept>値は、有限数で、ある型の値に利用可能な完全な精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;e0&gt;</bpt>subnormal<ept i="0">&lt;/e0&gt;</ept> value is a nonzero number that has a lesser magnitude than the smallest normal number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>サブノーマル<ept i="0">&lt;/e0&gt;</ept>値は、非ゼロ数で、最も小さいノーマル数よりも少ない規模を持つものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether a string has no characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列が文字をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the Unicode scalar is an ASCII character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このユニコードスカラーがあるASCII文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the collection is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the instance is NaN (“not a number”).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスがNaN（非数）であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the instance is a signaling NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスがsignaling NaNであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the instance is equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスがゼロと等しいかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the instance is infinite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスが無限大であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the instance is subnormal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスがサブノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the instance’s representation is in the canonical form.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスの表現が正準形式であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the range contains no elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲が何の要素も含まないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether the static string stores a pointer to ASCII or UTF-8 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列がASCIIまたはUTF-8コードユニットへのポインタを格納しているかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether this instance is finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスが有限であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value indicating whether this instance is normal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスがノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value that indicates whether the dictionary is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書が空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value that indicates whether the set has no elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合が要素をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value that indicates whether the set is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合が空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Boolean value that is <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the static string stores a pointer to ASCII code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列がASCIIコードユニットへのポインタを格納するならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>であるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A GUI view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>GUIの見え方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A NaN compares not equal, not greater than, and not less than every value, including itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNは、それ自身を含めてあらゆる値に対して等しくない、大きくない、少なくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A NaN passed as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>として渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Quick Look can be created for an instance of any type by using the <bpt i="0" x="0">&lt;c0&gt;</bpt>PlaygroundQuickLook(reflecting:)<ept i="0">&lt;/c0&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「クイックルック」は、あらゆる型のインスタンスに対して作成されることが、<bpt i="0" x="0">&lt;c0&gt;</bpt>PlaygroundQuickLook(reflecting:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを使うことで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A UTF-16 code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つのUTF-16コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A UTF-16 encoding of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>のUTF-16符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A UTF-8 code sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-8コードシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A UTF-8 code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つのUTF-8コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A UTF-8 encoding of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>のUTF-8符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Unicode encoding form that translates between Unicode scalar values and form-specific code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるユニコード符号化形式、それはユニコードスカラー値と形式特有のコード単位の間で翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Unicode string value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコード文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A Uniform Resource Locator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>統一資源識別子（ユニフォームリソースロケータ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A bezier path.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ベジェパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A binary floating-point type’s <bpt i="0" x="0">&lt;c0&gt;</bpt>exponentBitCount<ept i="0">&lt;/c0&gt;</ept> imposes a limit on the range of the exponent for normal, finite values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バイナリ浮動小数点型のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>exponentBitCount<ept i="0">&lt;/c0&gt;</ept>は、正規化数の、有限の値に対する指数の範囲に限界を課します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A buffer into which to store the bytes from the receiver.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの中にレシーバからのバイトを格納することになるバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A capitalized representation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> that is produced using the current locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の頭文字表現、現在のロケールを使って生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A character view to convert to a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へと変換されることになる文字ビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A character view’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字ビューの「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクラスインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class whose instances contain a property of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept> and raw storage for an array of <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>, whose size is determined at instance creation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクラス、そのインスタンスは型<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>のプロパティと、そのサイズがインスタンス作成時に決められる、<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>配列の生のストレージを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closed range that forms a collection of consecutive values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>連続した値のコレクションを形成する完結範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that accepts an <bpt i="0" x="0">&lt;c0&gt;</bpt>inout<ept i="0">&lt;/c0&gt;</ept> state and returns the next element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>inout<ept i="0">&lt;/c0&gt;</ept>状態を受け取り、そしてそのシーケンスの次の要素を返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that accepts an element of this collection as its argument and returns an optional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはこのコレクションのひとつの要素をそれの引数として受け取って、ひとつのオプショナルの値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns a sequence or collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、あるシーケンスまたはコレクションを返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns an optional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、ひとつのオプショナルの値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that accepts the previous sequence element and returns the next element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは前のシーケンス要素を受け取り、次の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the <bpt i="0" x="0">&lt;c0&gt;</bpt>nextPartialResult<ept i="0">&lt;/c0&gt;</ept> closure or returned to the caller.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはある蓄積値とシーケンスのある要素を新しい蓄積値へと結合して、<bpt i="0" x="0">&lt;c0&gt;</bpt>nextPartialResult<ept i="0">&lt;/c0&gt;</ept>クロージャの次の呼び出しにおいて使われるか呼び出し側に返されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that processes one <bpt i="0" x="0">&lt;c0&gt;</bpt>outputEncoding<ept i="0">&lt;/c0&gt;</ept> code unit at a time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは１度に１つの<bpt i="0" x="0">&lt;c0&gt;</bpt>outputEncoding<ept i="0">&lt;/c0&gt;</ept>コードユニットを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that processes one code unit argument at a time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは１度に１つのコードユニット引数を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if its argument should be used to split the sequence; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つのクロージャ、それはそれの引数が使われてシーケンスを分割するならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that returns an optional element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはあるオプショナルの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes a buffer pointer to the static string’s UTF-8 code unit sequence as its sole argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは静的文字列のもつUTF-8コード単位シーケンスへのバッファポインタをそれの唯一の引数として取るものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes a character view as its argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはある文字ビューをそれの引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes a pointer to the string’s UTF-8 code unit sequence as its sole argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは文字列のもつUTF-8コード単位シーケンスへのポインタをそれの唯一の引数として取るものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは１つの要素を引数として取り、コレクションがその要素で分割されるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes an element of the sequence as a parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはシーケンスの１要素を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、その要素が合致するものかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、その要素が返される配列に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure that takes the unwrapped value of the instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスのアンラップされた値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure with an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeBufferPointer<ept i="0">&lt;/c0&gt;</ept> parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャで<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeBufferPointer<ept i="0">&lt;/c0&gt;</ept>パラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A closure with an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableBufferPointer<ept i="0">&lt;/c0&gt;</ept> parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャで<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableBufferPointer<ept i="0">&lt;/c0&gt;</ept>パラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A codec for translating between Unicode scalar values and UTF-16 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値とUTF-16コード単位の間で翻訳するためのコーデック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A codec for translating between Unicode scalar values and UTF-32 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値とUTF-32コード単位の間で翻訳するためのコーデック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A codec for translating between Unicode scalar values and UTF-8 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値とUTF-8コード単位の間で翻訳するためのコーデック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection containing a single element of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>の要素をただ１つだけ含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection containing just the keys of the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書のキーだけを含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection containing just the values of the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の値だけを含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection containing the same elements as a <bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept> collection, but on which some operations such as <bpt i="1" x="1">&lt;c1&gt;</bpt>map<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>filter<ept i="2">&lt;/c2&gt;</ept> are implemented lazily.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>コレクションと同じ要素を含んでいるあるコレクション、しかしそれの上で何らかの演算、例えば<bpt i="1" x="1">&lt;c1&gt;</bpt>map<ept i="1">&lt;/c1&gt;</ept>や<bpt i="2" x="2">&lt;c2&gt;</bpt>filter<ept i="2">&lt;/c2&gt;</ept>が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection is partitioned around a pivot index when each of the elements before the pivot is correctly ordered before each of the elements at or after the pivot.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ピボットの前の要素それぞれがピボットでのまたは後の要素それぞれの前に正しく並べられる時に、コレクションはピボットインデックスを中心として仕切られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection of <bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept> elements to insert into the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へ挿入されることになる<bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept>要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection of <bpt i="0" x="0">&lt;c0&gt;</bpt>Child<ept i="0">&lt;/c0&gt;</ept> elements describing the structure of the reflected subject.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Child<ept i="0">&lt;/c0&gt;</ept>要素のコレクションで、リフレクションされる主題の構造体を記述しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection of Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値のコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection of indices for an arbitrary bidirectional collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>随意に２方向に辿っていくコレクションのためのインデックスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection of indices for an arbitrary collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>随意なコレクションのためのインデックスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection of indices for an arbitrary random-access collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>随意な無作為アクセスのコレクションのためのインデックスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection on which normally-eager operations such as <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept> are implemented lazily.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクション、それにおいては通常は先行な演算、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>や<bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>は、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection or finite sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションまたは有限のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that contains <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> elements that are all <bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個の要素を含んでいるコレクション、それはすべてが<bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that presents the elements of its base collection in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクション、それは、それの基盤コレクションの要素を逆順で提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのもつ要素の隣接下位範囲を表すコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that supports backward as well as forward traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前方にだけでなく後方へ辿っていくこともサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that supports efficient random-access index traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>効率のよい無作為アクセスのインデックス探査をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that supports replacement of an arbitrary subrange of elements with the elements of another collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>随意の下位範囲の要素を別のコレクションの要素で置き換えることをサボートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection that supports subscript assignment.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>添え字を使った代入をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection whose element type is <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> but that is always empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの要素型は<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>である、しかし常に空であるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection whose elements are all identical.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクション、その要素は全て同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection whose elements are key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの要素がキー値ペアであるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ひとつのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>indices<ept i="0">&lt;/c0&gt;</ept> property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>indices<ept i="0">&lt;/c0&gt;</ept>プロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが特有にでなくとも参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A color.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>色。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A concatenation of the elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の要素を鎖状にひとつらなりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠しているシーケンスでコレクションではないものは、２番目の<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループにおいて幾つかの要素からなる随意のシーケンスを生み出すことを許可されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A conforming type may contain a subset of values which are treated as exceptional—that is, values that are outside the domain of meaningful arguments for the purposes of the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠している型は、普通でないものとして扱われる値の下位集合を含むでしょう — すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルの用途のための意味のある引数の領域の外側である値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A conforming type may use any integer radix, but values other than 2 (for binary floating-point types) or 10 (for decimal floating-point types) are extraordinarily rare in practice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型は、あらゆる整数基数を使うことができます、しかし２（バイナリ浮動小数点型に対して）または10（10進浮動小数点型に対して）より他の値は、実際には非常に稀です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A contiguously stored array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>隣接保管される配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A contiguously stored null-terminated UTF-8 representation of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>隣接格納されるヌル終端UTF-8表現のこの文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A custom playground Quick Look for this instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A decimal value may also include an exponent following the significand, indicating the power of 10 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>10進の値はまた、それによって仮数が乗算されるべき10の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A decoded Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>デコードされたユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dictionary is a type of hash table, providing fast access to the entries it contains.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書はある種のハッシュテーブルであり、それが含んでいる登録項目への高速なアクセスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dictionary literal is <bpt i="0" x="0">&lt;e0&gt;</bpt>not<ept i="0">&lt;/e0&gt;</ept> the same as an instance of <bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept> or the similarly named <bpt i="2" x="2">&lt;c2&gt;</bpt>DictionaryLiteral<ept i="2">&lt;/c2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルは、<bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept>または同じような名前を付けられる<bpt i="2" x="2">&lt;c2&gt;</bpt>DictionaryLiteral<ept i="2">&lt;/c2&gt;</ept>型のインスタンスと同じでは<bpt i="0" x="0">&lt;e0&gt;</bpt>ありません<ept i="0">&lt;/e0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dictionary literal is a comma-separated list of key-value pairs, in which a colon separates each key from its associated value, surrounded by square brackets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルは、「キーと値」の組（キー値ペア）のコンマ区切りのリストで角括弧で囲まれています、このキー値ペアではコロンが各キーをそれの関連値から切り離します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dictionary literal is a simple way of writing a list of key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルは、「キー値」ペアのリストを書く簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dictionary’s indices stay valid across additions to the dictionary as long as the dictionary has enough capacity to store the added values without allocating more storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書のインデックスは、辞書への変更をまたいで有効なままです、加えられた値をもっとストレージを割り当てることなく格納するために辞書が十分な容量を持つ限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A double precision floating-point numeric value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>倍精度浮動小数点数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A double-precision, floating-point value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A flattened view of a base collection of collections.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複数コレクションからなる基盤コレクションを平坦に見たもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A flattened view of the elements of this collection of collections.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複数コレクションからなるこのコレクションの要素を平坦に見たもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A flattened view of the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複数のシーケンスからなるこのシーケンスの要素のある平坦なビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A floating-point numeric type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A floating-point value to compare to this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と比較される浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A function that produces the initial <bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept> instance stored in the buffer, given the <bpt i="1" x="1">&lt;c1&gt;</bpt>buffer<ept i="1">&lt;/c1&gt;</ept> object and a function that can be called on it to get the actual number of allocated elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファに格納される初期<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>インスタンスを生成する関数、<bpt i="1" x="1">&lt;c1&gt;</bpt>buffer<ept i="1">&lt;/c1&gt;</ept>オブジェクトおよびそれの上で呼び出されて割り当てられた要素の実際の数を得ることができる関数を与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A graphical sprite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>画像スプライト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A half-open interval over a comparable type, from a lower bound up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある比較可能な型に関する間隔、下側の境界から、上側の境界までをしかし含めずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A half-open range that forms a collection of consecutive values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>連続した値のコレクションを形成する半開範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A hash value, provided by a type’s <bpt i="0" x="0">&lt;c0&gt;</bpt>hashValue<ept i="0">&lt;/c0&gt;</ept> property, is an integer that is the same for any two instances that compare equally.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるハッシュ値、ある型の持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>hashValue<ept i="0">&lt;/c0&gt;</ept>プロパティによって提供されるものは、１つの整数で、等しいと比較される何らかの２つのインスタンスに対して同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A hashable value to wrap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ラップすることになるハッシュ化値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A hexadecimal value may also include an exponent following the significand, indicating the power of 2 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>16進数値はまた、それによって仮数が乗算されるべき２の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A lazy <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> wrapper that includes the elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>遅延な<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>ラッパー、それは根底にあるコレクションの要素のうち、ある術部を満足させるものを含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A lightweight collection of key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キー値ペアの軽量コレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A list of elements of the new set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい集合の要素のリスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A lowercase copy of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の小文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A lowercase version of the string that is produced using the current locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の小文字バージョン、現在のロケールを使って生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mapping closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>マップを行うクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mask to specify options to use for converting the receiver’s contents to <bpt i="0" x="0">&lt;c0&gt;</bpt>encoding<ept i="0">&lt;/c0&gt;</ept> (if conversion is necessary).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>レシーバの内容を<bpt i="0" x="0">&lt;c0&gt;</bpt>encoding<ept i="0">&lt;/c0&gt;</ept>へ変換するために使うオプションを指定するマスク（もし変換が必要ならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A member of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の中のひとつのメンバ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Int64<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int64<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt64<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt64<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その配列を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その辞書を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのイテレータを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mirror that reflects the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その集合を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mutable pointer-to-ObjC-pointer argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>可変のpointer-to-ObjC-pointer引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A negative value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>負の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A negative, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>負の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new instance initialized with <bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept> will be equivalent to this instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept>で初期化された新しいインスタンスは、このインスタンスに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new option set made up of the elements contained in this set, in <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, or in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合の中に、<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の中に、または両方の中に含まれる要素から作り上げられるオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new option set with only the elements contained in both this set and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の両方に含まれる要素のみをもつ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new option set with only the elements contained in either this set or <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, but not in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合または<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>のどちらかに、しかし両方にではなく含まれる要素のみをもつ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new option set with the given raw value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた生の値を持つ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new range clamped to the bounds of <bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>の境界内に制限された、新しい範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new set with the unique elements of this set and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>との特有な要素を持つ新しい集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A new value that is <bpt i="0" x="0">&lt;c0&gt;</bpt>amount<ept i="0">&lt;/c0&gt;</ept> added to this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値に<bpt i="0" x="0">&lt;c0&gt;</bpt>amount<ept i="0">&lt;/c0&gt;</ept>が加えられる新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A nil-coalescing operation unwraps the left-hand side if it has a value, or it returns the right-hand side as a default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体演算は、左手側をそれが値を持つならばアンラップします、またはそれは右手側を省略時のものとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A nil-coalescing operation unwraps the left-hand side if it has a value, or returns the right-hand side as a default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体演算は、左手側をそれが値を持つならばアンラップします、または右手側を省略時のものとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A non-owning pointer to a buffer of  elements stored contiguously in memory, presenting a collection interface to the underlying elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリに隣接して格納された複数のElementからなるあるバッファへの非所有ポインタ、あるコレクションインターフェースを根底にある要素に与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A non-owning pointer to a buffer of mutable elements stored contiguously in memory, presenting a collection interface to the underlying elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリに隣接して格納された複数の可変のElementからなるあるバッファへの非所有ポインタ、あるコレクションインターフェースを根底にある要素に与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A nonstable sort may change the relative order of elements for which <bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder<ept i="0">&lt;/c0&gt;</ept> does not establish an order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>安定ではないソートは、それに対して<bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder<ept i="0">&lt;/c0&gt;</ept>が順序を確立しない要素らの相対順序を変更するかもしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A nonstable sort may change the relative order of elements that compare equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>安定ではないソートは、等しいと比較される要素らの相対順序を変更するかもしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A numeric representation of the Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーの数値表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A pivot index, such that every element before the pivot is ordered before every element at or above the pivot, using <bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder<ept i="0">&lt;/c0&gt;</ept> to determine the relative order of any two elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるピボット（軸）インデックス、そのピボットの前のすべての要素がピボットでのまたは上のすべての要素の前に、<bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder<ept i="0">&lt;/c0&gt;</ept>を使って何らかの２つの要素の相対順序を決定して、並べらます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A point.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A pointer to a null-terminated UTF-8 code sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A pointer to a null-terminated code sequence encoded in <bpt i="0" x="0">&lt;c0&gt;</bpt>encoding<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>encoding<ept i="0">&lt;/c0&gt;</ept>でエンコードされたヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A pointer to the beginning of the string’s UTF-8 encoded representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列のUTF-8符号化表現の最初の部分へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A pointer to the first element of the buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このバッファの最初の要素へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>CharacterView<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CharacterView<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>の中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenCollection<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenCollection<ept i="0">&lt;/c0&gt;</ept>の中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF16View<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UTF16Viewiew<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>CharacterView<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>CharacterView<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept>インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalars<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalars<ept i="0">&lt;/c0&gt;</ept>ビューの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A position in a string’s collection of UTF-16 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の持つUTF-16コード単位のコレクションの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A positive value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A positive, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A possible prefix to test against this string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この文字列に対してテストすることになる可能性のある接頭辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A possible suffix to test against this string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この文字列に対してテストすることになる可能性のある接尾辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A predicate that returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if its first argument should be ordered before its second argument; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある述部、それはそれの最初の引数がそれの２番目の引数の前に並べられるべきならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を返します；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A predicate that returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if its two arguments are equivalent; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある述部、それはそれの２つの引数が等しいならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を返します；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A predicate used to partition the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションに仕切りをするのに使われる述部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A protocol for legitimate arguments to <bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>descendant<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>descendant<ept i="1">&lt;/c1&gt;</ept>メソッドへの合法的な引数に対するプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A quiet NaN (“not a number”).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クワイエットNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クワイエットNaN。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A radix-2 (binary) floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるradix-2（バイナリ）浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range of integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>整数からなる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range of the collection’s indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのもつインデックスのある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range of the range’s indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲のインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range to check for elements in common.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>共通の要素を調べる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスへと変換するある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept>インスタンスへと変換するある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>インスタンスへ変換することになるある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range-replaceable collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A raw pointer for accessing data of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>のデータにアクセスするための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A raw pointer for accessing untyped data.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型付けされないデータにアクセスするための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A raw-representable instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>生の表現が可能なインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A rectangle.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>矩形。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A reference to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較する参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A representation of the string that is suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その文字列のひとつの表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A rule for rounding a floating-point number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点数を丸める為のある規則。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A second raw-representable instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>第２の生の表現が可能なインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence built around an iterator of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>のイテレータに基づいて構築されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence consisting of all the elements contained in each segment contained in some <bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept> sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの<bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>シーケンスに含まれる各断片の中に含まれるいくらかの要素から成るシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence containing the same elements as a <bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept> sequence, but on which some operations such as <bpt i="1" x="1">&lt;c1&gt;</bpt>map<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>filter<ept i="2">&lt;/c2&gt;</ept> are implemented lazily.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>シーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えば<bpt i="1" x="1">&lt;c1&gt;</bpt>map<ept i="1">&lt;/c1&gt;</ept>や<bpt i="2" x="2">&lt;c2&gt;</bpt>filter<ept i="2">&lt;/c2&gt;</ept>が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence containing the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含むことができるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence containing the same elements as this sequence, but on which some operations, such as <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>, are implemented lazily.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>や<bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence is a list of values that you can step through one at a time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスは値のリストで、あなたが１度に１つずつ段階処理していくことができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence of Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence of characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence of pairs enumerating the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスを列挙している、ペアからなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence of tuple pairs, where the elements of each pair are corresponding elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>sequence1<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>sequence2<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>対のタプルからなるシーケンス、そこにおいて各対の要素らは、<bpt i="0" x="0">&lt;c0&gt;</bpt>sequence1<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>sequence2<ept i="1">&lt;/c1&gt;</ept>の要素に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence on which normally-eager operations such as <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept> are implemented lazily.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それにおいては通常は先行な演算、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>や<bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>は、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence should provide its iterator in O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスはそれのイテレータをO(1)で提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence that can represent a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素の隣接下位範囲を表すことのできるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence that presents the elements of a base sequence of sequences concatenated using a given separator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それはいくらかのシーケンスからなるある基盤となるシーケンスの要素らを、与えられたセパレータを使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素の隣接下位範囲を表すシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence that starts with <bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept> and continues with every value returned by passing the previous element to <bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept>で始まり、そして前の要素を<bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>に渡すことによって返される値どれもが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence that yields each successive value from <bpt i="0" x="0">&lt;c0&gt;</bpt>next<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>next<ept i="0">&lt;/c0&gt;</ept>から連続した値各々をもたらします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence to compare to this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、このシーケンスと比べることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence to insert between each of this sequence’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素それぞれの間に挿入されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence whose elements are produced via repeated applications of a closure to some mutable state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャをある何らかの可変の状態へ繰り返し適用することでその要素が生み出されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by indexed subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それの要素は複数回探査されることが非破壊的に可能です、そして添え字で指し示すことによってアクセスされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sequence whose elements consist of the elements of some base sequence that also satisfy a given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それは何らかの基盤シーケンスの要素でさらにまた与えられた述部を満足させるものから成る要素たちです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A set of common requirements for Swift’s integer types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftの整数型に対する一般要件のひとそろい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A set of common requirements for Swift’s signed integer types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftの符号つき整数型のための一般要件のひとそろい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A set of common requirements for Swift’s unsigned integer types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftの符号なし整数型のための一般要件のひとそろい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A set of the same type as the current set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>現在の集合と同じ型の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A set of the same type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同じ型の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A signaling NaN (“not a number”).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シグナルNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A signaling NaN sets the floating-point exception status when used in many floating-point operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シグナルNaNは、多くの浮動小数点演算において使われる時に、浮動小数点例外状態を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A signed integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A silent NaN (“not a number”) value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>silent NaN（非数）値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A single extended grapheme cluster, which approximates a user-perceived character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある単一の拡張書記素クラスタ、それは１つのユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A single precision floating-point numeric value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単精度浮動小数点数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A single string can have greatly differing lengths when measured by its different views.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある単一の文字列は、それの異なるビューによって測られる時に大きく違っていることがありえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A single, concatenated string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単一の、連結された文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A single-precision, floating-point value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A size.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>大きさ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A slice holds a reference to the entire storage of a larger array, not just to the portion it presents, even after the original array’s lifetime ends.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きな配列のストレージ全体への参照を保持します、元の配列の寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A slice inherits the value or reference semantics of its base collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスは、それの基盤コレクションのもつ値意味論もしくは参照意味論を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A slice may hold a reference to the entire storage of a larger collection, not just to the portion it presents, even after the base collection’s lifetime ends.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きなコレクションのストレージ全体への参照を保持します、元のコレクションの寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A slice of an <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>, or <bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>、または<bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept>インスタンスの断片。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A slice stores a base collection and the start and end indices of the view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライス（断片）は、基盤コレクションおよびビューの始まりと終わりのインデックスを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sorted array of the collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのもつ要素からなるソートされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sorted array of the sequence’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンス要素のソート済み配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>サウンド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A source of text-streaming operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>テキストストリーミング操作のソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A static string can store its value as a pointer to an ASCII code unit sequence, as a pointer to a UTF-8 code unit sequence, or as a single Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列は、それの値をASCIIコード単位シーケンスへのポインタとして、UTF-8コード単位シーケンスへのポインタとして、または単一のユニコードスカラー値として格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string is a series of characters, such as <bpt i="0" x="0">&lt;c0&gt;</bpt>"Swift"<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列は一続きの文字です、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>"Swift"<ept i="0">&lt;/c0&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string is not itself a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列はそれ自身はコレクションではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string literal is a series of characters enclosed in quotes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列リテラルは、引用符に囲まれた一連の文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string representation of the scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スカラーの文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string representation of the static string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列の文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string that represents the contents of the dictionary, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の内容を表すテキスト、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string that represents the contents of the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の内容を表すテキスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string that represents the contents of the set, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の内容を表すテキスト、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string that represents the contents of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の内容を表すテキスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string to append.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>追加される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string to insert between each of the elements in this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素のそれぞれの間に挿入されることになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string to print between each item.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各項目の間に出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string to print if <bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept> is evaluated to <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> in a playground or <bpt i="2" x="2">&lt;c2&gt;</bpt>-Onone<ept i="2">&lt;/c2&gt;</ept> build.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドまたは<bpt i="2" x="2">&lt;c2&gt;</bpt>-Onone<ept i="2">&lt;/c2&gt;</ept>ビルドにおいて<bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>と等しいならば出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string to print if <bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept> is evaluated to <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>condition<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>と等しいならば出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string to print in a playground or <bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept> build.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドまたは<bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept>ビルドにおいて出力される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string type designed to represent text that is known at compile time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コンパイル時に知られるテキストを表現するために設計される文字列型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> property is a collection of <bpt i="1" x="1">&lt;e1&gt;</bpt>extended grapheme clusters<ept i="1">&lt;/e1&gt;</ept>, which approximate human-readable characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>プロパティは、いくつかの<bpt i="1" x="1">&lt;e1&gt;</bpt>拡張書記素クラスタ<ept i="1">&lt;/e1&gt;</ept>からなるあるコレクションです、それらはだいたいは人間が読むことができる文字たちです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>プロパティは、ユニコードの基本単位である21ビットコード、ユニコードスカラー値いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>プロパティは、その文字列のもつユニコードスカラー値の16ビット符号化形式、UTF-16コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>プロパティは、その文字列のもつユニコードスカラー値の８ビット符号化形式、UTF-８コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s UTF-16 view encodes the string’s Unicode scalar values as 16-bit integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列のもつUTF-16ビューは、文字列のもつユニコードスカラー値を16ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s UTF-8 view encodes the string’s Unicode scalar values as 8-bit integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の持つUTF-8ビューは、文字列の持つユニコードスカラー値を8ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s Unicode scalar values can be up to 21 bits in length.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の持つユニコードスカラー値は、長さが21ビットに至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つ以上の文字列インスタンスが同じバッファを使っている時、変化において、ある文字列の持つデータは遅延にのみコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A string’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence leaving off the last element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの最後の要素を取り除いたあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence leaving off the specified number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素を取り去ったシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence starting after the first element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの最初の要素の後から始まるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素の後から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence starting at the <bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept>位置から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence starting at the beginning of this collection with at most <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの先端で始まる多くとも<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence starting at the beginning of this sequence with at most <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの先端で始まる多くとも<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence terminating at the end of the collection with at most <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの末端で終わる多くとも<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence terminating at the end of this sequence with at most <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの末端で終わる多くとも<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence that leaves off <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> elements from the end.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある下位シーケンス、それは終わりから<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>要素を取り除いたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence that leaves off the specified number of elements at the end.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素が末尾から無くなっているシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence up to, and including, the <bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>位置に至るまでの、そしてそれを含む、下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A subsequence up to, but not including, the <bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>位置に至るまでの、しかしそれを含まないシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A suggestion of how a <bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept> is to be interpreted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>どのように<bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>の持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept>が解釈されるようになるかの提案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the Boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブール値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the array and its elements, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列とそれの要素のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the array and its elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列とそれの要素のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the character, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その文字のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the identifier, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その識別子のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the pointer, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのポインタのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the range, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the static string, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the value, or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その値のテキスト表現、または<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the value, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その値のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of the value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of this instance, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのインスタンスのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A textual representation of this instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A third value to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較する３番目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A trivial type can be copied with just a bit-for-bit copy without any indirection or reference-counting operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>自明な型は、単にビット対ビットコピーでコピーされることが、何らかの間接的または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tuple containing the number of UTF-16 code units required to encode <bpt i="0" x="0">&lt;c0&gt;</bpt>input<ept i="0">&lt;/c0&gt;</ept> and a Boolean value that indicates whether the <bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept> contained only ASCII characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>input<ept i="0">&lt;/c0&gt;</ept>をエンコードするのに必要とされるUTF-16コード単位の数と<bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept>がASCII文字だけを含んでいるかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tuple of <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>要素からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tuple of <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>要素のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tuple of the lower and upper bounds of the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲の下方および上方境界からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tuple with the new string and a Boolean value that indicates whether any repairs were made.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字列と、あらゆる修復がなされたかどうかを指し示すブール値を持つタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A two-element tuple with the key and value corresponding to <bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>に該当するキーと値を持つ２要素タプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type for propagating an unmanaged object reference.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある管理されないオブジェクト参照を伝達するための型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type for which the conforming type provides a containment test.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型、それに対して準拠しているが格納テストを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type representing an error value that can be thrown.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スローされることが可能なあるエラー値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be compared for value equality.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の同等性に対して比較されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be compared using the relational operators <bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;=<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>&gt;=<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>&gt;<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関係演算子<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;=<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>&gt;=<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>&gt;<ept i="3">&lt;/c3&gt;</ept>を使って比較されることができるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be converted to and from an associated raw value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある関連値型へおよびそれから変換されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized by string interpolation with a string literal that includes expressions.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくらかの式を含むある文字列リテラルを使う文字列補間によって初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized using a dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある辞書リテラルを使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized using an array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列リテラルを使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized using the nil literal, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nilリテラル、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized with a floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある浮動小数点リテラルを使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized with a string literal containing a single Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠している型は、単一のユニコードスカラー値を含んでいるある文字列リテラルで初期化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized with a string literal containing a single extended grapheme cluster.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ただ１つの拡張書記素クラスタを含んでいるある文字列リテラルを使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized with a string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列リテラルを使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be initialized with the Boolean literals <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブールリテラルの<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>を使って初期化されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be represented as a string in a lossless, unambiguous way.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるロスレスの、曖昧さのない方法で、文字列として表されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can be the target of text-streaming operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>テキストストリーミング操作のターゲットであることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can hold code unit values for this encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このエンコーディングのためのコードユニット値を格納できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent a Boolean literal, such as <bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブールリテラルを表すことができる型、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent a Unicode scalar literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーリテラルを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent a floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点リテラルを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent a string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列リテラルを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent an extended grapheme cluster literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>拡張書記素クラスタリテラルを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent any written exponent.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの書かれた指数を表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent either a wrapped value or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>, the absence of a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ラップされた値または、値の不在、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>のどちらかを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent the distance between two values of <bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept>の２つの値の間の隔たりを表すことができるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent the encoded exponent of a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>エンコードされた指数の値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent the encoded significand of a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>エンコードされたある値の仮数を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent the indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>昇順で、コレクションの添え字用として有効であるインデックスを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that can represent the number of steps between a pair of indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ひと組のインデックスの間の段階数を表すことができるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that conforms to <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept> can choose how to respond when this method is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept>に準拠する型は、このメソッドが呼ばれた時どのような応答をするか選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept> protocol provides the value for <bpt i="1" x="1">&lt;c1&gt;</bpt>pi<ept i="1">&lt;/c1&gt;</ept> at its best possible precision.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>pi<ept i="1">&lt;/c1&gt;</ept>に対する値をそれの最もよい可能な精度で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that explicitly supplies its own mirror, but whose descendant classes are not represented in the mirror unless they also override <bpt i="0" x="0">&lt;c0&gt;</bpt>customMirror<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>明示的にそれ自身のMirrorを提供するある型、しかしそれの子孫クラスはそれもまた<bpt i="0" x="0">&lt;c0&gt;</bpt>customMirror<ept i="0">&lt;/c0&gt;</ept>でオーバーライドされない限りはMirrorで表現されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that explicitly supplies its own mirror.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>明示的にそれ自身のMirrorを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that explicitly supplies its own playground Quick Look.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>明示的にそれ自身のプレイグラウンド「クイックルック」を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that iterates over a collection using its indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクション全体に渡ってそれのインデックスを使って繰り返し処理する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that presents a mathematical set interface to a bit mask.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>数学的なセットインターフェイスをビットマスクに与える型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides an integer hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある整数ハッシュ値を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides mathematical set operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>数学的な集合演算を提供する型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>順次的な、繰り返されるアクセスをそれの要素に提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides subscript access to its elements, with bidirectional index traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>二方向性のインデックス探査で、それの要素に対する添え字アクセスを提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides subscript access to its elements, with forward index traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前方インデックス探査で、それの要素に対する添え字アクセスを提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides subscript access to its elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの要素にアクセスする添え字を提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides the collection’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのコレクションの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that provides the sequence’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのシーケンスの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that represents a position in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that represents a position in the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that represents a subsequence of some of the sequence’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのシーケンスのもつ要素の幾つかからなる下位シーケンスを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that represents a valid position in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>有効な位置をそのコレクションにおいて表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that supplies the values of a sequence one at a time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスに属する値を１度に１つ提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that supports an “absolute value” function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「絶対値」関数をサポートする型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that supports replacement of an arbitrary subrange of elements with the elements of another collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>随意の下位範囲の要素を別のコレクションの要素で置き換えることをサボートする型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type that supports standard bitwise arithmetic operators.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ビット単位演算操作をサポートする型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type used to represent the number of steps between two <bpt i="0" x="0">&lt;c0&gt;</bpt>String.Index<ept i="0">&lt;/c0&gt;</ept> values, where one value is reachable from the other.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一方の値が他方から到達可能であるところの２つの<bpt i="0" x="0">&lt;c0&gt;</bpt>String.Index<ept i="0">&lt;/c0&gt;</ept>値の間の段階数を表すために使うある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type used to represent the number of steps between two indices, where one value is reachable from the other.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのインデックスの間の段階数を表すために使う型、そこにおいて一方の値は他方から到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type whose instances can produce the elements of this sequence, in order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型、それのインスタンスがこのシーケンスの要素を順序正しく生み出すことができるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type with a customized textual representation suitable for debugging purposes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>デバッグ目的に都合がよいようにカスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type with a customized textual representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>カスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type-erased hashable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型消去ハッシュ化値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type-erased iterator of <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>の型消去イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type-erased sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型消去シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type-erased wrapper over any collection with indices that support bidirectional traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２方向に辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type-erased wrapper over any collection with indices that support forward traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前へ辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A type-erased wrapper over any collection with indices that support random access traversal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無作為アクセスで辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A unique identifier for a class instance or metatype.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクラスインスタンスまたはメタタイプのための固有な識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid buffer class is non-<bpt i="0" x="0">&lt;c0&gt;</bpt>@objc<ept i="0">&lt;/c0&gt;</ept>, with no declared stored properties.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>有効なバッファクラスは、非<bpt i="0" x="0">&lt;c0&gt;</bpt>@objc<ept i="0">&lt;/c0&gt;</ept>で、宣言された保存プロパティを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid index of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この配列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid index of the character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字ビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid index of the collection to use as a limit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>限度として使うためのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid index of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのひとつの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid index of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A valid index of the view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>+infinity<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>+infinity<ept i="0">&lt;/c0&gt;</ept>に等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>-infinity<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-infinity<ept i="0">&lt;/c0&gt;</ept>に等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value equal to zero with a negative sign.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>負の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value equal to zero with a positive sign.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value from which to use the magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そこからの値が規模に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value from which to use the sign.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それからの値が符号に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの中の要素の数より少ないか等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value less than or equal to the number of elements in the sequence, calculated nondestructively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの要素数より少ないか等しい値、非破壊的に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value of <bpt i="0" x="0">&lt;e0&gt;</bpt>NaN<ept i="0">&lt;/e0&gt;</ept> contains the string <bpt i="1" x="1">&lt;c1&gt;</bpt>"nan"<ept i="1">&lt;/c1&gt;</ept>, case insensitive.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>NaN<ept i="0">&lt;/e0&gt;</ept>の値は、文字列<bpt i="1" x="1">&lt;c1&gt;</bpt>"nan"<ept i="1">&lt;/c1&gt;</ept>を含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value of <bpt i="0" x="0">&lt;e0&gt;</bpt>infinity<ept i="0">&lt;/e0&gt;</ept> contains one of the strings <bpt i="1" x="1">&lt;c1&gt;</bpt>"inf"<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>"infinity"<ept i="2">&lt;/c2&gt;</ept>, case insensitive.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>無限大<ept i="0">&lt;/e0&gt;</ept>の値は、文字列<bpt i="1" x="1">&lt;c1&gt;</bpt>"inf"<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>"infinity"<ept i="2">&lt;/c2&gt;</ept>のうちの１つを含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value stored into a subscript of a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept> instance must subsequently be accessible at that same position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept>インスタンスのある添え字へと格納される値は、その後にその同じ位置でアクセス可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value to calculate the distance to.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それへの隔たりを計算されるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value to update with the bits that are set in exactly one of the two arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数の内で１つしかないものが集められた、それらビットで更新されるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value to update with the intersections of bits set in the two arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビットの交差で更新される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value to update with the union of bits set in the two arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビットの合併で更新される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value to use as a default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時のものとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value type whose instances are either <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値型、そのインスタンスは<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>か<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value’s <bpt i="0" x="0">&lt;c0&gt;</bpt>floatingPointClass<ept i="0">&lt;/c0&gt;</ept> property describes its “class” as described by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値の<bpt i="0" x="0">&lt;c0&gt;</bpt>floatingPointClass<ept i="0">&lt;/c0&gt;</ept>プロパティは、それの“class”をIEEE 754仕様で記述される通りに記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A variadic list of elements of the new array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい配列の要素からなる可変長引数リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A variadic list of elements of the new set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい集合の要素からなる可変長引数リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view into a subsequence of elements of another collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある見方、別のコレクションのいくらかの要素からなる下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view of a string’s contents as a collection of UTF-16 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-16コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view of a string’s contents as a collection of UTF-8 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-8コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view of a string’s contents as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかのユニコードスカラー値のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view of a string’s contents as a collection of characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかの文字のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view of the string’s contents as a collection of characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字のコレクションとしてのその文字列のもつ内容のあるビュー（見方）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A view onto this collection that provides lazy implementations of normally eager operations, such as <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションのある見方で、それは通常は先行な演算、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>や<bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>などの遅延な実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wrapper around an opaque C pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明Cポインターの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wrapper over an underlying index that hides the specific underlying type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>根底にあるインデックスを覆うラッパー、根底にある特定の型を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>APIs that include the word “unsafe” in their name let you explicitly disable safety checks in places where you need the additional performance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それらの名前に単語「unsafe」を含むAPIは、あなたがさらなる性能を必要とするあちこちであなたに安全確認を明確に使用不能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>ASCII characters have a scalar value between 0 and 127, inclusive.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ASCII文字は、０と127の間の、それらを含む、スカラー値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Access the <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept> instance referenced by <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>により参照される<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>インスタンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Access the <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>th element of the raw array pointed to by <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>によって指し示される生の配列の<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>番目の要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Access the fundamental protocols, data types, and algorithms common to all Swift programs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべてのSwiftプログラムに共通する基本的なプロトコル、データ型、そしてアルゴリズムにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Access to the raw argc value from C.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Cからの生のargc値にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Access to the raw argv value from C. Accessing the argument vector through this pointer is unsafe.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>生のargv値にCからアクセスします。引数ベクトルにこのポインタを通してアクセスすることは安全ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Access to the swift arguments, also use lazy initialization of static properties to safely initialize the swift arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>swift引数にアクセスします、また静的プロパティの遅延初期化を使って安全にswift引数を初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses a contiguous subrange of the array’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列のもつ要素らの中のある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのもついくらかの要素からなるある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept> instance referenced by <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>によって参照される<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>インスタンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>th element in the buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このバッファの中の<bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>番目の要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the Unicode scalar value at the given position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置でユニコードスカラーにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the Unicode scalar values in the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲の中のユニコードスカラー値にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the character at the given position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた位置で文字にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the characters in the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲の中の文字にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the code unit at the given position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the contiguous subrange of elements enclosed by the specified range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された範囲によって囲まれる要素からなるある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the element at <bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>での要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the element at specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the element at the given position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた位置での要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the element at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素に指定された位置でアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the element indicated by <bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>によって指し示される要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the key-value pair at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置でキー値ペアにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the member at the given position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた位置でのメンバにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the pointee at <bpt i="0" x="0">&lt;c0&gt;</bpt>self + i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self + i<ept i="0">&lt;/c0&gt;</ept>でpointeeにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the subsequence bounded by the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲によって仕切られた下位シーケンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the text in the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲の中のテキストにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accesses the value associated with the given key for reading and writing.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたキーに結び付けられる値に読出しと書き込みのためにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing <bpt i="0" x="0">&lt;c0&gt;</bpt>pointee<ept i="0">&lt;/c0&gt;</ept> as a type that is unrelated to the underlying memory’s bound type is undefined.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基礎をなすメモリの境界型と関係のない型として<bpt i="0" x="0">&lt;c0&gt;</bpt>pointee<ept i="0">&lt;/c0&gt;</ept>にアクセスすることは、未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing Array Values</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing Individual Elements</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>個々の要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing Objective-C Methods and Properties</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Objective-Cのメソッドやプロパティへのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing String View Elements</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列ビュー要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing a type’s <bpt i="0" x="0">&lt;c0&gt;</bpt>description<ept i="0">&lt;/c0&gt;</ept> property directly or using <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept> as a generic constraint is discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型の<bpt i="0" x="0">&lt;c0&gt;</bpt>description<ept i="0">&lt;/c0&gt;</ept>プロパティに直にアクセスすることや<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept>を総称体制約として使うことは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing memory via the returned pointer is undefined if the if the memory has not been bound to <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>返されるポインタ経由でアクセスされるメモリは、メモリが<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>に束縛されていないならば未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing this property in the case of a <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept> value is a serious programming error and could lead to undefined behavior or a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>値の場合にこのプロパティにアクセスすることは、重大なプログラミングエラーです、そして未定義挙動または実行時エラーに至らせるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing this property when <bpt i="0" x="0">&lt;c0&gt;</bpt>hasPointerRepresentation<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> triggers a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>hasPointerRepresentation<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>である時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing this property when <bpt i="0" x="0">&lt;c0&gt;</bpt>hasPointerRepresentation<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> triggers a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>hasPointerRepresentation<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>である時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomDebugStringConvertible<ept i="0">&lt;/c0&gt;</ept> conformance to your custom types by defining a <bpt i="1" x="1">&lt;c1&gt;</bpt>debugDescription<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CustomDebugStringConvertible<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に<bpt i="1" x="1">&lt;c1&gt;</bpt>debugDescription<ept i="1">&lt;/c1&gt;</ept>プロパティを定義することによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomStringConvertible<ept i="0">&lt;/c0&gt;</ept> conformance to your custom types by defining a <bpt i="1" x="1">&lt;c1&gt;</bpt>description<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CustomStringConvertible<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に<bpt i="1" x="1">&lt;c1&gt;</bpt>description<ept i="1">&lt;/c1&gt;</ept>プロパティを定義することによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning a result and a <bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept> that is <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept> iff the operation caused an arithmetic overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>を加算して、結果を返します、そしてこの演算が算術的オーバーフローをもたらした場合に限り<bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add <bpt i="2" x="2">&lt;c2&gt;</bpt>Comparable<ept i="2">&lt;/c2&gt;</ept> conformance to your own custom types when you want to be able to compare instances using relational operators or use standard library methods that are designed for <bpt i="3" x="3">&lt;c3&gt;</bpt>Comparable<ept i="3">&lt;/c3&gt;</ept> types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが関係演算子を使ってインスタンスの比較ができること、または <bpt i="3" x="3">&lt;c3&gt;</bpt>Comparable<ept i="3">&lt;/c3&gt;</ept>型のために設計される標準ライブラリメソッドを使うことを望む場合は、<bpt i="2" x="2">&lt;c2&gt;</bpt>Comparable<ept i="2">&lt;/c2&gt;</ept>準拠をあなた独自のあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add multiple elements at the same time by passing another array or a sequence of any kind to the <bpt i="1" x="1">&lt;c1&gt;</bpt>append(contentsOf:)<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>append(contentsOf:)<ept i="1">&lt;/c1&gt;</ept>メソッドに別の配列や何らかの種類のシーケンスを渡すことによって、複数の要素を同時に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add the capability to be initialized with an array literal to your own custom types by declaring an <bpt i="0" x="0">&lt;c0&gt;</bpt>init(arrayLiteral:)<ept i="0">&lt;/c0&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>init(arrayLiteral:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを宣言することによって、配列リテラルで初期化される能力をあなた独自のあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add with overflow</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オーバーフロー加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adding <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> conformance to your custom types means that you can use more convenient APIs when searching for particular instances in a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に追加することが意味するのは、あなたがより便利なAPIを特定のインスタンスをあるコレクションの中で探す時に使用できるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adding IteratorProtocol Conformance to Your Type</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>IteratorProtocol準拠をあなたの型に加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adding and Removing Elements</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素の追加と削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Addition</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additional Considerations</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>追加の考慮すべきこと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept> and stores the result in <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>, trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の加算、結果を<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>に格納します、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning the result and trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の加算、結果を返して、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, silently discarding any overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の加算、黙ってあらゆるオーバーフローを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds a new element at the end of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds an element to the end of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある要素をコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the elements of a collection to the end of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションに属する要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the elements of a sequence to the end of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスに属する要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the elements of a sequence to the end of this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションに属するいくつかの要素をこのコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the elements of the given set to the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた集合の要素をこの集合に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the given element to the option set if it is not already a member.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素を、それがすでにメンバでないならばオプションセットに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the given value to this value in place, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値をこの値にその場で加えます、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds the product of the two given values to this value in place, computed without intermediate rounding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの与えられた値の積をこの値にその場で加えます、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adopted By</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>採用先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adopting this protocol in your custom types lets you perform set-related operations such as membership tests, unions, and intersections on those types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型をあなたのあつらえの型において採用することは、あなたにセット関連演算を行わせます、例えば、それらの型上での帰属テスト、合併、そして交叉など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Advances to the next element and returns it, or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if no next element exists.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の要素へ進んでそれを返します、または次の要素が存在しないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Advancing an index beyond a collection’s ending index or offsetting it before a collection’s starting index may trigger a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インデックスがコレクションの末尾インデックスを超えて進むこと、またはそれをコレクションの先端インデックスの前にずらすことは、実行時エラーの引き金となるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After adding <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomDebugStringConvertible<ept i="0">&lt;/c0&gt;</ept> conformance by implementing the <bpt i="1" x="1">&lt;c1&gt;</bpt>debugDescription<ept i="1">&lt;/c1&gt;</ept> property, <bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept> provides its own custom debugging representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CustomDebugStringConvertible<ept i="0">&lt;/c0&gt;</ept>準拠を<bpt i="1" x="1">&lt;c1&gt;</bpt>debugDescription<ept i="1">&lt;/c1&gt;</ept>プロパティを実装することによって追加後は、<bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept>はそれ独自のあつらえのデバッグ表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After adding <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomStringConvertible<ept i="0">&lt;/c0&gt;</ept> conformance by implementing the <bpt i="1" x="1">&lt;c1&gt;</bpt>description<ept i="1">&lt;/c1&gt;</ept> property, <bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept> provides its own custom representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CustomStringConvertible<ept i="0">&lt;/c0&gt;</ept>準拠を<bpt i="1" x="1">&lt;c1&gt;</bpt>description<ept i="1">&lt;/c1&gt;</ept>プロパティの実装によって加えた後、<bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept>はそれ独自のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After assigning the new value (<bpt i="0" x="0">&lt;c0&gt;</bpt>"Butler"<ept i="0">&lt;/c0&gt;</ept>) at a specific position, that value is immediately available at that same position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値（<bpt i="0" x="0">&lt;c0&gt;</bpt>"Butler"<ept i="0">&lt;/c0&gt;</ept>）を指定された位置で割り当てた後、その値はすぐにその同じ位置で利用可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After calling <bpt i="0" x="0">&lt;c0&gt;</bpt>init(stringInterpolationSegment:)<ept i="0">&lt;/c0&gt;</ept> with each segment of the string literal, this initializer is called with their string representations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>init(stringInterpolationSegment:)<ept i="0">&lt;/c0&gt;</ept>を文字列リテラルの各分節で呼び出した後、このイニシャライザはそれらの文字列表現で呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After executing the closure, rebinds memory back to <bpt i="5" x="5">&lt;c5&gt;</bpt>Pointee<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クロージャを実行後、メモリを<bpt i="5" x="5">&lt;c5&gt;</bpt>Pointee<ept i="5">&lt;/c5&gt;</ept>へと戻して再束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After implementing the <bpt i="0" x="0">&lt;c0&gt;</bpt>description<ept i="0">&lt;/c0&gt;</ept> property and declaring <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept> conformance, the <bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept> type provides its own custom representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>description<ept i="0">&lt;/c0&gt;</ept>プロパティの実装と<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept>準拠の宣言の後は、<bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept>型はそれ自身のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After partitioning a collection, there is a pivot index <bpt i="0" x="0">&lt;c0&gt;</bpt>p<ept i="0">&lt;/c0&gt;</ept> where no element before <bpt i="1" x="1">&lt;c1&gt;</bpt>p<ept i="1">&lt;/c1&gt;</ept> satisfies the <bpt i="2" x="2">&lt;c2&gt;</bpt>belongsInSecondPartition<ept i="2">&lt;/c2&gt;</ept> predicate and every element at or after <bpt i="3" x="3">&lt;c3&gt;</bpt>p<ept i="3">&lt;/c3&gt;</ept> satisfies <bpt i="4" x="4">&lt;c4&gt;</bpt>belongsInSecondPartition<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションを仕切った後、あるピボットインデックス<bpt i="0" x="0">&lt;c0&gt;</bpt>p<ept i="0">&lt;/c0&gt;</ept>があります、そこで<bpt i="1" x="1">&lt;c1&gt;</bpt>p<ept i="1">&lt;/c1&gt;</ept>の前の要素は１つも<bpt i="2" x="2">&lt;c2&gt;</bpt>belongsInSecondPartition<ept i="2">&lt;/c2&gt;</ept>述部を満たさず、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>p<ept i="3">&lt;/c3&gt;</ept>でのまたは後のあらゆる要素は<bpt i="4" x="4">&lt;c4&gt;</bpt>belongsInSecondPartition<ept i="4">&lt;/c4&gt;</ept>を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After returning <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> once, this method returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept> on every subsequent call.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いったん<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>を返した後、このメソッドはあらゆる後に続く呼び出しで<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After using <bpt i="0" x="0">&lt;c0&gt;</bpt>index(of:)<ept i="0">&lt;/c0&gt;</ept> to find the position of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index(of:)<ept i="0">&lt;/c0&gt;</ept>を使って特定の要素の位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All binary floating-point types have a radix of 2.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バイナリ浮動小数点型は、２の基数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All elements satisfying this predicate are ordered after all elements not satisfying it.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この述部を満たす全ての要素は、それを満たさない全ての要素の後に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All other values of the <bpt i="2" x="2">&lt;c2&gt;</bpt>Index<ept i="2">&lt;/c2&gt;</ept> type, such as the <bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept> property of a different collection, are invalid indices for this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Index<ept i="2">&lt;/c2&gt;</ept>型の他の値すべて、例えば異なるコレクションの<bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept>プロパティなどは、このコレクションに対する無効なインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All the elements following <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> are moved to close the gap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All the elements following the specified position are moved to close the gap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All the elements following the specified position are moved up to close the gap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置に続く要素すべては、隔たりを埋めるように繰り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All values other than NaN and infinity are considered finite, whether normal or subnormal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNと無限大の他の全ての値は、ノーマルまたはサブノーマルかにかかわらず、有限と見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allocates and points at uninitialized aligned memory for <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> instances of <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>の<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個のインスタンスに対する初期化されないアラインされたメモリでアロケートおよびポイントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allocates and points at uninitialized memory for <bpt i="0" x="0">&lt;c0&gt;</bpt>size<ept i="0">&lt;/c0&gt;</ept> bytes with <bpt i="1" x="1">&lt;c1&gt;</bpt>alignedTo<ept i="1">&lt;/c1&gt;</ept> alignment.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>alignedTo<ept i="1">&lt;/c1&gt;</ept>アラインメントで<bpt i="0" x="0">&lt;c0&gt;</bpt>size<ept i="0">&lt;/c0&gt;</ept>バイトに対して初期化されないメモリでアロケートおよびポイントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, a predicate can be satisfied by a range of <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> elements or a general condition.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるいは、述部は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>要素のある範囲またはある一般的条件によって満たされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, if you need to test whether <bpt i="0" x="0">&lt;c0&gt;</bpt>obj.getIntegerValue()<ept i="0">&lt;/c0&gt;</ept> exists, use optional binding before calling the method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるいは、あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>obj.getIntegerValue()<ept i="0">&lt;/c0&gt;</ept>が存在するかテストする必要があるならば、オプショナル束縛をそのメソッドを呼び出す前に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, if your type can act as its own iterator, implementing the requirements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept> protocol and declaring conformance to both <bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>IteratorProtocol<ept i="2">&lt;/c2&gt;</ept> are sufficient.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるいはまた、あなたの型がそれ自身イテレータとして振る舞うことができるならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept>プロトコルの要件を実装することと<bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>IteratorProtocol<ept i="2">&lt;/c2&gt;</ept>の両方に対する準拠を宣言することで十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, to create an option set instance with multiple members, assign an array literal with multiple static members of the option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるいはまた、複数のメンバをもつ１つのオプションセットインスタンスを作成するには、オプションセットの複数の静的メンバをもつ配列リテラルを割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, use this method to sort a collection of elements that do conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> when you want the sort to be descending instead of ascending.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうではなくて、あなたが昇順ではなく降順でソートしたい場合は、このメソッドを使って<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>に準拠する要素からなるコレクションをソートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although <bpt i="2" x="2">&lt;c2&gt;</bpt>.express<ept i="2">&lt;/c2&gt;</ept> is not a member of <bpt i="3" x="3">&lt;c3&gt;</bpt>options<ept i="3">&lt;/c3&gt;</ept>, <bpt i="4" x="4">&lt;c4&gt;</bpt>.express<ept i="4">&lt;/c4&gt;</ept> subsumes the remaining <bpt i="5" x="5">&lt;c5&gt;</bpt>.secondDay<ept i="5">&lt;/c5&gt;</ept> element of the option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とは言え<bpt i="2" x="2">&lt;c2&gt;</bpt>.express<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>options<ept i="3">&lt;/c3&gt;</ept>のメンバではありません、しかし<bpt i="4" x="4">&lt;c4&gt;</bpt>.express<ept i="4">&lt;/c4&gt;</ept>はこのオプションセットの残りの要素<bpt i="5" x="5">&lt;c5&gt;</bpt>.secondDay<ept i="5">&lt;/c5&gt;</ept>を包含します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be multipass: Any element may be repeatedly accessed by saving its index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスはそれが辿って行かれるとき消費されることが可能な一方、コレクションはマルチパスであることを保証されます：どんな要素もそれのインデックスを保存することによって繰り返しアクセスされるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftにおける文字列は値意味論を持ちますが、文字列はコピーオンライト戦略を使ってそれらのデータをバッファに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although the Swift overlay updates many Objective-C methods to return native Swift indices and index ranges, some still return instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>NSRange<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftオーバーレイが多くのObjective-Cメソッドを更新してSwift生来のインデックスおよびインデックス範囲を返すとはいえ、いくつかはまだ<bpt i="0" x="0">&lt;c0&gt;</bpt>NSRange<ept i="0">&lt;/c0&gt;</ept>インスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always returns <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常に<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always returns <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常に<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always traps.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常にトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always use the slice’s <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> property instead of assuming that its indices start at a particular value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常にスライスの<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>プロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always use the slice’s <bpt i="4" x="4">&lt;c4&gt;</bpt>startIndex<ept i="4">&lt;/c4&gt;</ept> and <bpt i="5" x="5">&lt;c5&gt;</bpt>endIndex<ept i="5">&lt;/c5&gt;</ept> properties instead of assuming that its indices start or end at a particular value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常にスライスの<bpt i="4" x="4">&lt;c4&gt;</bpt>startIndex<ept i="4">&lt;/c4&gt;</ept>と<bpt i="5" x="5">&lt;c5&gt;</bpt>endIndex<ept i="5">&lt;/c5&gt;</ept>プロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always zero, just like <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常にゼロ、ちょうど<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always zero, just like <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常にゼロ、ちょうど<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always zero, which is the index of the first element in a non-empty buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>常にゼロ、それは空でないバッファの中の最初の要素のインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An 8-bit signed integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>8ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An 8-bit unsigned integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>8ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept> instance forwards its operations to a base collection having the same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>インスタンスは、それの操作を同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyCollection<ept i="0">&lt;/c0&gt;</ept> instance forwards its operations to a base collection having the same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyCollection<ept i="0">&lt;/c0&gt;</ept>インスタンスは、それの操作を同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyRandomAccessCollection<ept i="0">&lt;/c0&gt;</ept> instance forwards its operations to a base collection having the same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyRandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>インスタンスは、それの操作を同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An <bpt i="0" x="0">&lt;e0&gt;</bpt>extended grapheme cluster<ept i="0">&lt;/e0&gt;</ept> is a group of one or more Unicode code points that approximates a single user-perceived character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>拡張書記素クラスタ<ept i="0">&lt;/e0&gt;</ept>は、ひとまとめにした１つ以上のユニコードコード点です、それは単一のユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An NaN value may also include a payload in parentheses following the <bpt i="0" x="0">&lt;c0&gt;</bpt>"nan"<ept i="0">&lt;/c0&gt;</ept> keyword.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaN値はまた、<bpt i="0" x="0">&lt;c0&gt;</bpt>"nan"<ept i="0">&lt;/c0&gt;</ept>キーワードに続けて丸括弧の中にペイロードを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An all-zeros exponent is reserved for subnormals and zeros, and an all-ones exponent is reserved for infinity and NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>全てゼロの指数は非正規化数とゼロのために予約されます、そして全て１の指数は無限大とNaNのために予約されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array can store any kind of elements—from integers to strings to classes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある配列は、整数から文字列まで、あるクラスであるどんなものであることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素を逆順に含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array containing the transformed elements of this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの変換済み要素を含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array literal is a simple way of expressing a list of values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列リテラルは、値のリストを表す簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array literal is not the same as an <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列リテラルは、<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>インスタンスと同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array of instances of the conforming type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型のインスタンスからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array of subsequences, split from this collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array of subsequences, split from this sequence’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array of the elements that <bpt i="0" x="0">&lt;c0&gt;</bpt>includeElement<ept i="0">&lt;/c0&gt;</ept> allowed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>includeElement<ept i="0">&lt;/c0&gt;</ept>が許可する要素からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array of the non-<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> results of calling <bpt i="1" x="1">&lt;c1&gt;</bpt>transform<ept i="1">&lt;/c1&gt;</ept> with each element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの各要素で<bpt i="1" x="1">&lt;c1&gt;</bpt>transform<ept i="1">&lt;/c1&gt;</ept>を呼ぶことの非<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>の結果の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An array that is the sole owner of its storage can perform mutating operations in place.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それのストレージのただ一人のオーナーである配列は、変化を伴う操作をそこで実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An attributed string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>属性付き文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept> if the set already contained such a member; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合がすでにそのようなメンバを含んでいるならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept>に等しい要素；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element of a slice is located under the same index in the slice and in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスの要素は、スライスにおいてそして基盤コレクションにおいて同じインデックス下に位置します、コレクションもスライスもスライスが作成されてから変化させられない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element of the reflected instance’s structure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>リフレクションされる（自己言及、自己参照の対象の）インスタンスの持つ構造体の中のある要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element to insert into the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合に挿入されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element to look for in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合において捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element to search for in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element to search for in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合において捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An empty <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> instance has equal lower and upper bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の<bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>インスタンスは、等しい下方および上方境界を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An empty array literal alone doesn’t provide enough information for the compiler to infer the intended type of the <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の配列リテラルそれだけでは、コンパイラが<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>インスタンスの意図される型を推論するのに十分な情報を提供していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An empty range has equal lower and upper bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の範囲は、等しい下方と上方範囲を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An enumeration of the elements of a sequence or collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスまたはコレクションの要素の列挙。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An equivalent range must be representable as an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等の範囲が、<bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>のインスタンスとして表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An equivalent range must be representable as an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等の範囲が、<bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept>のインスタンスとして表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An escaped textual representation of the Unicode scalar, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーのエスケープされたテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An extended-precision, floating-point value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>拡張倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An image.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>画像。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An index offset by <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> from the index <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>, unless that index would be beyond <bpt i="2" x="2">&lt;c2&gt;</bpt>limit<ept i="2">&lt;/c2&gt;</ept> in the direction of movement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インデックス<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>から<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>だけ補われたインデックス、そのインデックスが<bpt i="2" x="2">&lt;c2&gt;</bpt>limit<ept i="2">&lt;/c2&gt;</ept>を移動方向において越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An index offset by <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> from the index <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インデックス<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>から<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>だけ補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An index that traverses the same positions as an underlying index, with inverted traversal direction.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基礎をなすインデックスが指すのと同じ諸処の位置を、逆の走査順で辿っていくインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An index to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An indication of a decoding error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>デコードエラーのしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An indication that no more Unicode scalars are available in the input.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この入力の中にこれ以上利用可能なユニコードスカラーがないしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>AnySequence<ept i="0">&lt;/c0&gt;</ept> forwards its operations to an underlying base sequence having the same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type, hiding the specifics of the underlying sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnySequence<ept i="0">&lt;/c0&gt;</ept>のインスタンスは、同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持つある基礎をなす基盤シーケンスへと操作を転送します、基礎をなすシーケンスの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedIterator<ept i="0">&lt;/c0&gt;</ept> wraps a base iterator and yields successive <bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept> values, starting at zero, along with the elements of the underlying base iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedIterator<ept i="0">&lt;/c0&gt;</ept>は、基盤イテレータをラップして、連続する<bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept>値を、ゼロで開始して、基礎をなす基盤イテレータの要素と一緒に生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An instance of a class.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクラスのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An integer argument <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> select the <bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>th <bpt i="4" x="4">&lt;c4&gt;</bpt>Child<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>整数引数<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>は、<bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>番目の<bpt i="4" x="4">&lt;c4&gt;</bpt>Child<ept i="4">&lt;/c4&gt;</ept>を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An integer numeric value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>整数数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An interval over a comparable type, from a lower bound up to, and including, an upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある比較可能な型に関する間隔、下側の境界から、上側の境界までを含めて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator for <bpt i="0" x="0">&lt;c0&gt;</bpt>StrideThrough&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>StrideThrough&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator for <bpt i="0" x="0">&lt;c0&gt;</bpt>StrideTo&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>StrideTo&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator for <bpt i="0" x="0">&lt;c0&gt;</bpt>Zip2Sequence<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Zip2Sequence<ept i="0">&lt;/c0&gt;</ept>のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator for the elements in the buffer referenced by <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeBufferPointer<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutableBufferPointer<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeBufferPointer<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutableBufferPointer<ept i="1">&lt;/c1&gt;</ept>によって参照されるバッファの中の要素のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator of code units to be decoded.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>デコードされることになるいくらかのコード単位のイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator of code units to be translated, encoded as <bpt i="0" x="0">&lt;c0&gt;</bpt>inputEncoding<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>翻訳されることになるいくらかのコードユニットからなるあるイテレータ、<bpt i="0" x="0">&lt;c0&gt;</bpt>inputEncoding<ept i="0">&lt;/c0&gt;</ept>としてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator of code units to be translated, encoded as <bpt i="0" x="0">&lt;c0&gt;</bpt>sourceEncoding<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>翻訳されることになるいくらかのコード単位からなるあるイテレータ、<bpt i="0" x="0">&lt;c0&gt;</bpt>sourceEncoding<ept i="0">&lt;/c0&gt;</ept>としてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over the Unicode scalars that make up a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept> collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept>コレクションを作り上げているユニコードスカラーのすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over the dictionary with elements of type <bpt i="0" x="0">&lt;c0&gt;</bpt>(key: Key, value: Value)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>(key: Key, value: Value)<ept i="0">&lt;/c0&gt;</ept>の要素を持つ辞書のすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over the elements of a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスの要素のすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over the elements traversed by some base iterator that also satisfy a given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの基盤イテレータによって辿られるいくらかの要素でさらにまた与えられた述部を満足させるものを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over the members of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary&lt;Key, Value&gt;<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary&lt;Key, Value&gt;<ept i="0">&lt;/c0&gt;</ept>のメンバーすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over the members of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Set&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Set&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>のメンバーすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator over this collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>Set&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>要素すべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator that never produces an element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>決して要素を生成しないイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator that presents the elements of the sequences traversed by a base iterator, concatenated using a given separator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるイテレータ、それは基盤イテレータによって辿っていかれるいくらかのシーケンスに属する要素らを、与えられたセパレータを使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator that produces one or fewer instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>のインスタンスを１つまたは少数生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator that produces the elements contained in each segment produced by some <bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept> Iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの<bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>イテレータによって生成される各断片の中に含まれるいくらかの要素を生成するイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An iterator to type-erase.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型消去することになるイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An opaque C pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明Cポインター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An opaque pointer to the value of this unmanaged reference.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この管理されない参照の値への不透明ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An option set that contains no elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素を１つも含まないオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An optional type that allows implicit member access.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>暗黙的なメンバーアクセスが可能なオプショナル型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An optional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプショナル値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An ordered, random-access collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>順序付けられた、無作為アクセスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An output stream to receive the text representation of each item.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各項目のテキスト表現を受け取る出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unmanaged class reference to <bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>への管理されないクラス参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unmanaged reference to the object passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>として渡されるオブジェクトへの管理されない参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unordered collection of unique elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特有な要素の順番付けられないコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unsigned integer numeric value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>符号なし整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unsigned integer that can be used as a hash table address.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ハッシュテーブルアドレスとして使われることができる符号なし整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unsigned integer value type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An unspecified result is supplied automatically by the Swift standard library.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>未指定の結果はスウィフト標準ライブラリによって自動的に提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An uppercase copy of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この文字列の大文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An uppercase version of the string that is produced using the current locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の大文字バージョン、現在のロケールを使って生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And because <bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept> presents the same interface as <bpt i="3" x="3">&lt;c3&gt;</bpt>Array<ept i="3">&lt;/c3&gt;</ept>, you can generally perform the same operations on a slice as you could on the original array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そして<bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>Array<ept i="3">&lt;/c3&gt;</ept>と同じインターフェイスを提供するので、あなたは一般的にあなたが元の配列上でできるのと同じ操作をスライス上で実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう１つの浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another index to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の比較するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another range-replaceable collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another reference to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の比較する参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別の文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another tuple of elements of the same type as <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と同じ型の要素からなる別のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another type-erased hashable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の型消去ハッシュ化値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another valid index of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの別の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another value to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう一方の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> instance can be bridged to <bpt i="1" x="1">&lt;c1&gt;</bpt>NSString<ept i="1">&lt;/c1&gt;</ept> using the type-cast operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept>), and any <bpt i="3" x="3">&lt;c3&gt;</bpt>String<ept i="3">&lt;/c3&gt;</ept> instance that originates in Objective-C may use an <bpt i="4" x="4">&lt;c4&gt;</bpt>NSString<ept i="4">&lt;/c4&gt;</ept> instance as its storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>インスタンスは、<bpt i="1" x="1">&lt;c1&gt;</bpt>NSString<ept i="1">&lt;/c1&gt;</ept>へブリッジされることが型キャスト演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept>）を使って行えます、そして何らかの<bpt i="3" x="3">&lt;c3&gt;</bpt>String<ept i="3">&lt;/c3&gt;</ept>インスタンスでObjective-C起源のものは<bpt i="4" x="4">&lt;c4&gt;</bpt>NSString<ept i="4">&lt;/c4&gt;</ept>インスタンスをそれのストレージとして使っても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any type that conforms to <bpt i="2" x="2">&lt;c2&gt;</bpt>BitwiseOperations<ept i="2">&lt;/c2&gt;</ept>, where <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> is an instance of the conforming type, must satisfy the following conditions:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>BitwiseOperations<ept i="2">&lt;/c2&gt;</ept>に準拠するあらゆる型は、<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>が準拠している型のインスタンスであるところで、以下の条件を満足させなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept> protocol can be used as a dictionary’s <bpt i="1" x="1">&lt;c1&gt;</bpt>Key<ept i="1">&lt;/c1&gt;</ept> type, including all of Swift’s basic types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftの基本的な型のすべてを含めて、<bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠するあらゆる型は、辞書の<bpt i="1" x="1">&lt;c1&gt;</bpt>Key<ept i="1">&lt;/c1&gt;</ept>型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any type that declares conformance to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Error<ept i="0">&lt;/c0&gt;</ept> protocol can be used to represent an error in Swift’s error handling system.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Error<ept i="0">&lt;/c0&gt;</ept>プロトコルへの準拠を宣言するあらゆる型は、エラーをSwiftのエラー処理システムにおいて表すために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any value whose magnitude is so great that it would round to a value outside the range of representable numbers is rounded to <bpt i="0" x="0">&lt;e0&gt;</bpt>infinity<ept i="0">&lt;/e0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの規模が大きすぎるので表現可能な数の範囲外の値に丸められるであろう何らかの値は、<bpt i="0" x="0">&lt;e0&gt;</bpt>無限大<ept i="0">&lt;/e0&gt;</ept>に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>再割り当ての引き金となる追加操作はある性能コストを持ちます、しかしそれらは配列がより大きく成長するにつれて大抵ますます少ない頻度でしか生じません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Append the elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>rhs<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>rhs<ept i="0">&lt;/c0&gt;</ept>の要素を<bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the Unicode scalar values in the given sequence to the view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中のユニコードスカラー値をビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the characters in the given sequence to the character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中のいくらかの文字を文字ビューへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the characters in the given sequence to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中の文字を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the elements of a collection to a <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションの要素を<bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>インスタンスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the elements of a collection to an <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションの要素を<bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>インスタンスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the elements of a collection to an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションの要素を新しい配列に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the elements of a sequence to a <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスの要素を<bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>インスタンスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the elements of a sequence to an <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスの要素を<bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>インスタンスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the elements of a sequence to an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスの要素を新しい配列に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the given Unicode scalar to the view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたユニコードスカラーをビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the given character to the character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字を文字ビューへ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the given character to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字を文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the given string to the stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列をストリームへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends the given string to this string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列をこの文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Applies the given closure to a mutable view of the string’s characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャをその文字列の持つ文字の可変のビューに適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding?</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが画面上に表示される文字の数を数えているのか、またはあなたはある特定の符号化での文字列に必要とされるストレージの量を測っているのか？。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Arrays are one of the most commonly used data types in an app.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列は、アプリにおいて最も一般的に使われるデータ型の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Arrays, like all variable-size collections in the standard library, use copy-on-write optimization.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列は、標準ライブラリにおける可変サイズコレクションのすべてと同じく、コピーオンライト最適化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Arrays, sets, and option sets all conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByArrayLiteral<ept i="0">&lt;/c0&gt;</ept>, and your own custom types can as well.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列、集合、またはオプションセットは、すべて<bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByArrayLiteral<ept i="0">&lt;/c0&gt;</ept>に準拠します、そしてあなた独自のあつらえの型もまたそうできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a consequence, don’t assume that multiple <bpt i="1" x="1">&lt;c1&gt;</bpt>for<ept i="1">&lt;/c1&gt;</ept>-<bpt i="2" x="2">&lt;c2&gt;</bpt>in<ept i="2">&lt;/c2&gt;</ept> loops on a sequence will either resume iteration or restart from the beginning:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果として、あるシーケンス上での複数の<bpt i="1" x="1">&lt;c1&gt;</bpt>for<ept i="1">&lt;/c1&gt;</ept>-<bpt i="2" x="2">&lt;c2&gt;</bpt>in<ept i="2">&lt;/c2&gt;</ept>ループが反復を途中から再開するかまたは初めから再度着手するか、どちらかを決めてかからないでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a result, each view of the string <bpt i="2" x="2">&lt;c2&gt;</bpt>"🇵🇷"<ept i="2">&lt;/c2&gt;</ept> reports a different length.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果として、文字列<bpt i="2" x="2">&lt;c2&gt;</bpt>"🇵🇷"<ept i="2">&lt;/c2&gt;</ept>の各ビューは異なる長さを報告します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a result, you can chain multiple <bpt i="2" x="2">&lt;c2&gt;</bpt>??<ept i="2">&lt;/c2&gt;</ept> operators together.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果として、あなたは複数の<bpt i="2" x="2">&lt;c2&gt;</bpt>??<ept i="2">&lt;/c2&gt;</ept>を一緒に鎖状につなげることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, consider a <bpt i="0" x="0">&lt;c0&gt;</bpt>GridPoint<ept i="0">&lt;/c0&gt;</ept> type that describes a location in a grid of buttons.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つの例として、<bpt i="0" x="0">&lt;c0&gt;</bpt>GridPoint<ept i="0">&lt;/c0&gt;</ept>型を考えてみてください、それはある格子状配列のボタンにおけるある場所を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, consider a <bpt i="0" x="0">&lt;c0&gt;</bpt>StreetAddress<ept i="0">&lt;/c0&gt;</ept> structure that holds the parts of a street address: a house or building number, the street name, and an optional unit number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例として、<bpt i="0" x="0">&lt;c0&gt;</bpt>StreetAddress<ept i="0">&lt;/c0&gt;</ept>構造体を考えてください、それは通り住所の部分；家またはビル番地、通りの名、そして随意に戸番号を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, here’s an implementation of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Date<ept i="0">&lt;/c0&gt;</ept> structure that stores the year, month, and day of a date:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例として、ある日付の年、月、そして日を格納するある<bpt i="0" x="0">&lt;c0&gt;</bpt>Date<ept i="0">&lt;/c0&gt;</ept>構造体の実装がここにあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, here’s an implementation of an output stream that converts any input to its plain ASCII representation before sending it to standard output.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一例として、ここに出力ストリームの実装があります、それは何らかの入力を標準出力に送る前にそれの標準ASCII表現に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つの例として、あるシーケンスが特定の値を含むかどうか確認するために、あなたは各値を順次テストすることが、あなたが一致するものを見つけるかそのシーケンスの終わりに達するまで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As soon as the sequence has run out of elements, all subsequent calls return <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが要素を使い果たすやいなや、全てのその後の呼び出しは<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As such, it should be possible to re-create an instance from its string representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それなので、それはそれの文字列表現からインスタンスの再度作成が可能であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As with any basic operation, if this value is outside the representable range of the type, overflow or underflow occurs, and zero, a subnormal value, or infinity may result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あらゆる基本的演算でのように、この値がその型の表現可能な範囲の外側ならば、オーバーフローまたはアンダーフローが起こります、そしてゼロ、サブノーマル値、または無限大が結果となるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As you can see, complexity for each element of the argument list depends on the argument type and capabilities of the collection used to initialize the corresponding subject’s parent’s mirror.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ご覧のように、引数リストの各要素に対する複雑さは、付随する主題の親のミラーの初期化に使われる引数型とコレクションの能力に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Assignment</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Associated Types</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関連型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Associativity</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結合性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Assume that <bpt i="1" x="1">&lt;c1&gt;</bpt>S<ept i="1">&lt;/c1&gt;</ept> is a custom type that conforms to the <bpt i="2" x="2">&lt;c2&gt;</bpt>SetAlgebra<ept i="2">&lt;/c2&gt;</ept> protocol, <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept> are instances of <bpt i="5" x="5">&lt;c5&gt;</bpt>S<ept i="5">&lt;/c5&gt;</ept>, and <bpt i="6" x="6">&lt;c6&gt;</bpt>e<ept i="6">&lt;/c6&gt;</ept> is of type <bpt i="7" x="7">&lt;c7&gt;</bpt>S.Element<ept i="7">&lt;/c7&gt;</ept>—the type that the set holds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>S<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>SetAlgebra<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠するあつらえの型、<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>と<bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept>は<bpt i="5" x="5">&lt;c5&gt;</bpt>S<ept i="5">&lt;/c5&gt;</ept>のインスタンス、そして<bpt i="6" x="6">&lt;c6&gt;</bpt>e<ept i="6">&lt;/c6&gt;</ept>は型<bpt i="7" x="7">&lt;c7&gt;</bpt>S.Element<ept i="7">&lt;/c7&gt;</ept>—集合が保持する型、と仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At least one of the sequences must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>少なくともシーケンスのうちの一方は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Attempting to remove more elements than exist in the collection triggers a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの中に存在するより多くの要素の削除を試みることは実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Attempting to remove the same shipping option a second time results in <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>, because <bpt i="3" x="3">&lt;c3&gt;</bpt>options<ept i="3">&lt;/c3&gt;</ept> no longer contains <bpt i="4" x="4">&lt;c4&gt;</bpt>.priority<ept i="4">&lt;/c4&gt;</ept> as a member.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同じ出荷オプションの削除を２回目に試みることは<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>という結果になります、<bpt i="3" x="3">&lt;c3&gt;</bpt>options<ept i="3">&lt;/c3&gt;</ept>はもはや<bpt i="4" x="4">&lt;c4&gt;</bpt>.priority<ept i="4">&lt;/c4&gt;</ept>をメンバとして含まないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Avoid that name because it has different meanings in different languages, which can lead to confusion, and because it suggests that it is a good tolerance to use for comparisons, which it almost never is.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その名前を避けてください、それが異なる言語において異なる意味を持ち、それが混乱を招くので、そしてそれは比較に使うのに良い公差であると提案され、それはほとんど全くそうではないので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Axioms:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>公理：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Basic string operations are not sensitive to locale settings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基本の文字列演算は、ロケール設定に影響されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Be aware that although an <bpt i="2" x="2">&lt;e2&gt;</bpt>actual<ept i="2">&lt;/e2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt>Dictionary<ept i="3">&lt;/c3&gt;</ept> is arbitrarily-ordered, the ordering of the <bpt i="4" x="4">&lt;c4&gt;</bpt>Mirror<ept i="4">&lt;/c4&gt;</ept>’s <bpt i="5" x="5">&lt;c5&gt;</bpt>children<ept i="5">&lt;/c5&gt;</ept> will exactly match that of the literal you pass.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>気をつけるべきは、たとえ<bpt i="2" x="2">&lt;e2&gt;</bpt>実際<ept i="2">&lt;/e2&gt;</ept>の<bpt i="3" x="3">&lt;c3&gt;</bpt>Dictionary<ept i="3">&lt;/c3&gt;</ept>が随意の順番であるとしても、<bpt i="4" x="4">&lt;c4&gt;</bpt>Mirror<ept i="4">&lt;/c4&gt;</ept>の<bpt i="5" x="5">&lt;c5&gt;</bpt>children<ept i="5">&lt;/c5&gt;</ept>の順番は正確にあなたが渡したリテラルと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Be aware, therefore, that general operations on <bpt i="5" x="5">&lt;c5&gt;</bpt>LazyFilterCollection<ept i="5">&lt;/c5&gt;</ept> instances may not have the documented complexity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>自覚すべきは、したがって、<bpt i="5" x="5">&lt;c5&gt;</bpt>LazyFilterCollection<ept i="5">&lt;/c5&gt;</ept>インスタンス上での全体的な演算が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Be aware, therefore, that general operations on <bpt i="6" x="6">&lt;c6&gt;</bpt>FlattenBidirectionalCollection<ept i="6">&lt;/c6&gt;</ept> instances may not have the documented complexity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>自覚すべきは、したがって、<bpt i="6" x="6">&lt;c6&gt;</bpt>FlattenBidirectionalCollection<ept i="6">&lt;/c6&gt;</ept>インスタンス上での全体的な操作が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Be aware, therefore, that general operations on <bpt i="6" x="6">&lt;c6&gt;</bpt>FlattenCollection<ept i="6">&lt;/c6&gt;</ept> instances may not have the documented complexity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>自覚すべきは、したがって、<bpt i="6" x="6">&lt;c6&gt;</bpt>FlattenCollection<ept i="6">&lt;/c6&gt;</ept>インスタンス上での全体的な操作が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> is the default type for an array literal, without writing any other code, you can declare an array with a particular element type by providing one or more values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>は配列リテラルのための省略時の型なので、なんら他のコードを書くことなく、あなたはひとつ以上の値を提供することによって特定の要素型を持つ配列を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because <bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept> is a class, its instances can be compared using the identical-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>===<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept>がクラスであるので、それのインスタンスは同一性演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>===<ept i="1">&lt;/c1&gt;</ept>）を使って比較されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> represents a half-open range, a <bpt i="1" x="1">&lt;c1&gt;</bpt>Range<ept i="1">&lt;/c1&gt;</ept> instance does not contain its upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>は半開範囲を表すことから、<bpt i="1" x="1">&lt;c1&gt;</bpt>Range<ept i="1">&lt;/c1&gt;</ept>インスタンスはそれの上方の境界を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because <bpt i="2" x="2">&lt;c2&gt;</bpt>Range<ept i="2">&lt;/c2&gt;</ept> is half-open, iterating the values of the result produces all valid subscript arguments for <bpt i="3" x="3">&lt;c3&gt;</bpt>self<ept i="3">&lt;/c3&gt;</ept>, omitting its <bpt i="4" x="4">&lt;c4&gt;</bpt>endIndex<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Range<ept i="2">&lt;/c2&gt;</ept>が半開であるため、結果の値の繰り返し処理は、それの<bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>を除外した、全て<bpt i="4" x="4">&lt;c4&gt;</bpt>self<ept i="4">&lt;/c4&gt;</ept>に有効な添え字引数を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because <bpt i="9" x="9">&lt;c9&gt;</bpt>NSString<ept i="9">&lt;/c9&gt;</ept> is immutable, it is just as though the storage was shared by a copy: The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(<bpt i="10" x="10">&lt;e10&gt;</bpt>n<ept i="10">&lt;/e10&gt;</ept>) time and space, where <bpt i="11" x="11">&lt;e11&gt;</bpt>n<ept i="11">&lt;/e11&gt;</ept> is the length of the string’s encoded representation (or more, if the underlying <bpt i="12" x="12">&lt;c12&gt;</bpt>NSString<ept i="12">&lt;/c12&gt;</ept> has unusual performance characteristics).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="9" x="9">&lt;c9&gt;</bpt>NSString<ept i="9">&lt;/c9&gt;</ept>は不変であることから、それはストレージがいくつかのコピーによって共有されたとしても相変わらずです：何らかの連なった変更を行う演算の中の最初のものは、要素が固有の、隣接するストレージへとコピーされる原因となり、それはO(<bpt i="10" x="10">&lt;e10&gt;</bpt>n<ept i="10">&lt;/e10&gt;</ept>)の時間と空間がかかります、そこにおいて<bpt i="11" x="11">&lt;e11&gt;</bpt>n<ept i="11">&lt;/e11&gt;</ept>は文字列表現の長さです（またはそれ以上のもの、基盤となる<bpt i="12" x="12">&lt;c12&gt;</bpt>NSString<ept i="12">&lt;/c12&gt;</ept>が通常でない性能特質を持つならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because NaN compares not less than nor greater than any value, this method returns <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept> when called on NaN or when NaN is passed as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNはあらゆる値より少なくもないし大きくもないと比較されるので、このメソッドは、NaN上で呼ばれた時またはNaNが<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>として渡された時に<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because NaN is incomparable with any value, this method returns <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept> when called on NaN or when NaN is passed as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNはあらゆる値と比較可能でないので、このメソッドは、NaN上で呼ばれた時またはNaNが<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>として渡された時に<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because NaN is not equal to any value, including NaN, use this property instead of the equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>) or not-equal-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>!=<ept i="1">&lt;/c1&gt;</ept>) to test whether a value is or is not NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNは、NaNを含めてあらゆる値と等しくないので、同等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>）または不等演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>!=<ept i="1">&lt;/c1&gt;</ept>）の代わりにこのプロパティを使うことで、ある値がNaNであるのかまたはないのかをテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because Swift can’t guarantee at compile time that these methods and properties are actually available on an <bpt i="3" x="3">&lt;c3&gt;</bpt>AnyObject<ept i="3">&lt;/c3&gt;</ept> instance’s underlying type, these <bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept> symbols are available as implicitly unwrapped optional methods and properties, respectively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftはそれらのメソッドやプロパティが<bpt i="3" x="3">&lt;c3&gt;</bpt>AnyObject<ept i="3">&lt;/c3&gt;</ept>インスタンスの下に横たわる型で実際に利用可能であるとコンパイル時に保証しないため、これら<bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept>シンボルは暗黙的にアンラップされるオプショナルのメソッドやプロパティとしてそれぞれ利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because Swift provides several ways to safely unwrap optional values, you can choose the one that helps you write clear, concise code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは安全にオプショナル値をアンラップするために複数の方法を提供するので、あなたは明快な、簡潔なコードを記述する助けとしてその１つを選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a NaN always compares not equal to itself, to test whether a floating-point value is NaN, use its <bpt i="0" x="0">&lt;c0&gt;</bpt>isNaN<ept i="0">&lt;/c0&gt;</ept> property instead of the equal-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNは常にそれ自身に対して等しくないと比較されることから、浮動小数点値がNaNかどうかテストするには、それの<bpt i="0" x="0">&lt;c0&gt;</bpt>isNaN<ept i="0">&lt;/c0&gt;</ept>プロパティを同等演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>）の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a Unicode scalar value can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding to a Unicode scalar view after a call to <bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるユニコードスカラー値が単一ASCII文字相当のストレージより多く要求する可能性があることから、<bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>への呼び出しの後に文字ビューにあるユニコードスカラー値を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるユニコードスカラー値はそれの値を格納するのに21ビットに至るまで要求することができるので、いくつかのユニコードスカラーはUTF-16ではペア（一対）の16ビットコード単位によって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a closed range cannot represent an empty range, this property is always <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲は空の範囲を表すことができないので、このプロパティは常に<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a closed range includes its upper bound, a closed range whose lower bound is equal to the upper bound contains one element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲はそれの上側の境界を含むことから、それの下側の境界が上側の境界と等しい完結範囲は１つの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a closed range includes its upper bound, the ranges in the following example also overlap:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲はそれの上方の境界を含むことから、以下の例の範囲もまた重なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a half-open range does not include its upper bound, the ranges in the following example do not overlap:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>半壊範囲はそれの上方の範囲を含まないことから、以下の例の範囲は重なりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because a set is not an ordered collection, the “first” element may not be the first element that was added to the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合は順序付けられたコレクションではないことから、「最初」の要素は集合に加えられた最初の要素ではないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because any arbitrary subclass of <bpt i="4" x="4">&lt;c4&gt;</bpt>NSArray<ept i="4">&lt;/c4&gt;</ept> can become an <bpt i="5" x="5">&lt;c5&gt;</bpt>Array<ept i="5">&lt;/c5&gt;</ept>, there are no guarantees about representation or efficiency in this case.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何であれ随意の<bpt i="4" x="4">&lt;c4&gt;</bpt>NSArray<ept i="4">&lt;/c4&gt;</ept>のサブクラスが<bpt i="5" x="5">&lt;c5&gt;</bpt>Array<ept i="5">&lt;/c5&gt;</ept>になることが可能であるので、表現や効率についてはこの場合保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because any arbitrary subclass of <bpt i="5" x="5">&lt;c5&gt;</bpt>NSString<ept i="5">&lt;/c5&gt;</ept> can become a <bpt i="6" x="6">&lt;c6&gt;</bpt>String<ept i="6">&lt;/c6&gt;</ept> instance, there are no guarantees about representation or efficiency when a <bpt i="7" x="7">&lt;c7&gt;</bpt>String<ept i="7">&lt;/c7&gt;</ept> instance is backed by <bpt i="8" x="8">&lt;c8&gt;</bpt>NSString<ept i="8">&lt;/c8&gt;</ept> storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="5" x="5">&lt;c5&gt;</bpt>NSString<ept i="5">&lt;/c5&gt;</ept>の随意のサブクラスは何であれ<bpt i="6" x="6">&lt;c6&gt;</bpt>String<ept i="6">&lt;/c6&gt;</ept>インスタンスになれるので、<bpt i="7" x="7">&lt;c7&gt;</bpt>String<ept i="7">&lt;/c7&gt;</ept>インスタンスが<bpt i="8" x="8">&lt;c8&gt;</bpt>NSString<ept i="8">&lt;/c8&gt;</ept>ストレージによって裏打ちされる場合、表現または効率についての保障はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because arrays increase their allocated capacity using an exponential strategy, appending a single element to an array is an O(1) operation when averaged over many calls to the <bpt i="0" x="0">&lt;c0&gt;</bpt>append(_:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列はそれらの割り当てられた容量を指数戦略で増やすので、ある単一の要素を配列に加えることは、<bpt i="0" x="0">&lt;c0&gt;</bpt>append(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドへの多くの呼び出しにわたって平均した場合は、O(1)演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because calculating the average of the observations involves combining every value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>tempsFahrenheit<ept i="0">&lt;/c0&gt;</ept> array, any NaN values cause the result to also be NaN, as seen in this example:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>観測の平均の算出は<bpt i="0" x="0">&lt;c0&gt;</bpt>tempsFahrenheit<ept i="0">&lt;/c0&gt;</ept>配列のすべての値を足し合わせることを必然的に含むことから、何らかのNaN値はまたNaNになるという結果を引き起こします、この例で見られるように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because default implementations of the remainder of the relational operators are provided by the standard library, you’ll be able to use <bpt i="6" x="6">&lt;c6&gt;</bpt>!=<ept i="6">&lt;/c6&gt;</ept>, <bpt i="7" x="7">&lt;c7&gt;</bpt>&gt;<ept i="7">&lt;/c7&gt;</ept>, <bpt i="8" x="8">&lt;c8&gt;</bpt>&lt;=<ept i="8">&lt;/c8&gt;</ept>, and <bpt i="9" x="9">&lt;c9&gt;</bpt>&gt;=<ept i="9">&lt;/c9&gt;</ept> with instances of your type without any further code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関係演算子の残りの省略時の実装は標準ライブラリによって提供されることから、あなたは<bpt i="6" x="6">&lt;c6&gt;</bpt>!=<ept i="6">&lt;/c6&gt;</ept>、<bpt i="7" x="7">&lt;c7&gt;</bpt>&gt;<ept i="7">&lt;/c7&gt;</ept>、<bpt i="8" x="8">&lt;c8&gt;</bpt>&lt;=<ept i="8">&lt;/c8&gt;</ept>、そして<bpt i="9" x="9">&lt;c9&gt;</bpt>&gt;=<ept i="9">&lt;/c9&gt;</ept>をあなたの型のインスタンスにおいてなんらこれ以上のコード無しに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because each character in a string can be made up of one or more Unicode code points, the number of characters in a string may not match the length of the Unicode code point representation or the length of the string in a particular binary representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列中の各文字はひとつ以上のユニコード点から成り立つことができるので、ある文字列の文字数はユニコードコード点表現の長さ、または特定のバイナリ表現での文字列の長さと一致しないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because each character in a string can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding characters to a string after a call to <bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列中の各文字が単一ASCII文字相当のストレージより多く要求する可能性があることから、<bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>への呼び出しの後に文字列に文字を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because each element of a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept> instance is its own index, for the range <bpt i="1" x="1">&lt;c1&gt;</bpt>(-99..&lt;100)<ept i="1">&lt;/c1&gt;</ept> the element at index <bpt i="2" x="2">&lt;c2&gt;</bpt>0<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept>インスタンスの各要素がそれ自身インデックスであることから、範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>(-99..&lt;100)<ept i="1">&lt;/c1&gt;</ept>に対してインデックス<bpt i="2" x="2">&lt;c2&gt;</bpt>0<ept i="2">&lt;/c2&gt;</ept>での要素は<bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because each element of a character view can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding characters to the character view after a call to <bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字ビューの各要素が単一ASCII文字相当のストレージより多く要求する可能性があることから、<bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>への呼び出しの後に文字ビューに文字を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because floating-point types such as <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept> are their own <bpt i="2" x="2">&lt;c2&gt;</bpt>Stride<ept i="2">&lt;/c2&gt;</ept> types, they cannot be used as the bounds of a countable range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点型、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>は、それら独自の<bpt i="2" x="2">&lt;c2&gt;</bpt>Stride<ept i="2">&lt;/c2&gt;</ept>型であるので、それらは可付番範囲の境界として使われることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because it is used much less frequently than the usual comparisons, there is no operator form of this relation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは普通の比較と比べてあまり頻繁に使われないことから、この関係の演算子形式はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because many functions and initializers fully specify the types of their parameters, you can often use an array literal with or without elements as a parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くの関数とイニシャライザはそれらのパラメータの型を完全に指定することから、あなたはしばしば要素のあるまたはない配列リテラルをパラメータとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of buffering, it is impossible to find the corresponding position in the iterator for a given returned <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> or an error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>パッファを行うことのため、ある指定の戻り値<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>やエラーに対して対応する位置をイテレータにおいて見つけることは不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because testing whether one NaN is equal to another NaN results in <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>, use the <bpt i="1" x="1">&lt;c1&gt;</bpt>isNaN<ept i="1">&lt;/c1&gt;</ept> property to test whether a value is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるNaNが別のNaNと等しいかどうかテストすることは<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>の結果になることから、<bpt i="1" x="1">&lt;c1&gt;</bpt>isNaN<ept i="1">&lt;/c1&gt;</ept>プロパティを使うことである値がNaNかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the <bpt i="0" x="0">&lt;c0&gt;</bpt>GridPoint<ept i="0">&lt;/c0&gt;</ept> type is not hashable yet, it can’t be used as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type for a set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>GridPoint<ept i="0">&lt;/c0&gt;</ept>型はまだハッシュ化されていないので、それは集合のための<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型として使われることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the <bpt i="0" x="0">&lt;c0&gt;</bpt>String(reflecting:)<ept i="0">&lt;/c0&gt;</ept> initializer works for instances of <bpt i="1" x="1">&lt;e1&gt;</bpt>any<ept i="1">&lt;/e1&gt;</ept> type, returning an instance’s <bpt i="2" x="2">&lt;c2&gt;</bpt>debugDescription<ept i="2">&lt;/c2&gt;</ept> if the value passed conforms to <bpt i="3" x="3">&lt;c3&gt;</bpt>CustomDebugStringConvertible<ept i="3">&lt;/c3&gt;</ept>, accessing a type’s <bpt i="4" x="4">&lt;c4&gt;</bpt>debugDescription<ept i="4">&lt;/c4&gt;</ept> property directly or using <bpt i="5" x="5">&lt;c5&gt;</bpt>CustomDebugStringConvertible<ept i="5">&lt;/c5&gt;</ept> as a generic constraint is discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String(reflecting:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザが<bpt i="1" x="1">&lt;e1&gt;</bpt>あらゆる<ept i="1">&lt;/e1&gt;</ept>型のインスタンスに対して働いて、渡される値が<bpt i="3" x="3">&lt;c3&gt;</bpt>CustomDebugStringConvertible<ept i="3">&lt;/c3&gt;</ept>に準拠するならばインスタンスの<bpt i="2" x="2">&lt;c2&gt;</bpt>debugDescription<ept i="2">&lt;/c2&gt;</ept>を返すので、ある型の <bpt i="4" x="4">&lt;c4&gt;</bpt>debugDescription<ept i="4">&lt;/c4&gt;</ept>プロパティに直にアクセスすることや、総称体制約として<bpt i="5" x="5">&lt;c5&gt;</bpt>CustomDebugStringConvertible<ept i="5">&lt;/c5&gt;</ept>を使うことは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the <bpt i="1" x="1">&lt;c1&gt;</bpt>Error<ept i="1">&lt;/c1&gt;</ept> protocol has no requirements of its own, you can declare conformance on any custom type you create.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Error<ept i="1">&lt;/c1&gt;</ept>プロトコルはそれ自身の要件を持たないので、あなたは準拠を宣言することがあなたが作成するあらゆるあつらえの型で可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the <bpt i="1" x="1">&lt;c1&gt;</bpt>hypotenuse(_:_:)<ept i="1">&lt;/c1&gt;</ept> function uses a generic parameter constrained to the <bpt i="2" x="2">&lt;c2&gt;</bpt>FloatingPoint<ept i="2">&lt;/c2&gt;</ept> protocol, you can call it using any floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>hypotenuse(_:_:)<ept i="1">&lt;/c1&gt;</ept>関数は<bpt i="2" x="2">&lt;c2&gt;</bpt>FloatingPoint<ept i="2">&lt;/c2&gt;</ept>プロトコルに制約された総称体パラメータを使うので、あなたはそれを呼び出すことがあらゆる浮動小数点型を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the result of this nil-coalescing operation is itself an optional value, you can chain default values by using <bpt i="0" x="0">&lt;c0&gt;</bpt>??<ept i="0">&lt;/c0&gt;</ept> multiple times.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このnil合体演算の結果がそれ自体オプショナル値であることから、あなたは幾らかの省略時の値を<bpt i="0" x="0">&lt;c0&gt;</bpt>??<ept i="0">&lt;/c0&gt;</ept>を複数回使うことで連鎖することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the strings are identical up to the 14th character, comparing only those characters results in a return value of <bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これら文字列が14番目の文字に至るまで全く同じなので、それらの文字だけ比較することは<bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept>の値を返す結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the supplied predicate returns <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept> when its first argument is greater than its second argument, larger elements are ordered before smaller elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>提供された述部はそれの最初の引数がそれの２番目の引数より大きい場合に<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>を返すので、より大きい要素がより小さい要素の前に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because the underlying types of <bpt i="4" x="4">&lt;c4&gt;</bpt>x<ept i="4">&lt;/c4&gt;</ept> and <bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept> are different, the two variables do not compare as equal despite having equal underlying values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>x<ept i="4">&lt;/c4&gt;</ept>と<bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept>の基礎をなす型は異なることから、２つの変数は等しい基礎をなす値を持つにもかかわらず等しいと比較されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because this initializer does not perform any checks, it should be used as an optimization only when you are absolutely certain that <bpt i="0" x="0">&lt;c0&gt;</bpt>lower<ept i="0">&lt;/c0&gt;</ept> is less than or equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>upper<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは何ら確認を行わないので、それは、あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>lower<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>upper<ept i="1">&lt;/c1&gt;</ept>より少ないか等しいことを絶対に確信している場合にのみ１つの最適化として使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before appending, the array allocates new storage that is large enough store the resulting elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>追加の前に、この配列は新しいストレージを割り当てます、それは結果として生じる要素らを格納するのに十分に大きいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Behind the scenes, Swift uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>animals<ept i="0">&lt;/c0&gt;</ept> array’s iterator to loop over the contents of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>舞台裏で、Swiftは<bpt i="0" x="0">&lt;c0&gt;</bpt>animals<ept i="0">&lt;/c0&gt;</ept>配列のもつイテレータを使って、その配列の要素のすべてにわたって繰り返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Besides maintaining the order of the original dictionary literal, <bpt i="1" x="1">&lt;c1&gt;</bpt>DictionaryLiteral<ept i="1">&lt;/c1&gt;</ept> also allows duplicates keys.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>元の辞書リテラルの順番を維持する他に、<bpt i="1" x="1">&lt;c1&gt;</bpt>DictionaryLiteral<ept i="1">&lt;/c1&gt;</ept>はまた他とそっくり同じキーを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bidirectional collections can therefore offer additional operations, such as a <bpt i="1" x="1">&lt;c1&gt;</bpt>last<ept i="1">&lt;/c1&gt;</ept> property that provides efficient access to the last element and a <bpt i="2" x="2">&lt;c2&gt;</bpt>reversed()<ept i="2">&lt;/c2&gt;</ept> method that presents the elements in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>二方向性のコレクションは、従って追加の演算を提案します、例えば最後の要素への手際のよいアクセスを提供する<bpt i="1" x="1">&lt;c1&gt;</bpt>last<ept i="1">&lt;/c1&gt;</ept>プロパティ、そして要素を逆順で提示する<bpt i="2" x="2">&lt;c2&gt;</bpt>reversed()<ept i="2">&lt;/c2&gt;</ept>メソッドなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bidirectional collections offer traversal backward from any valid index, not including a collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>二方向性のコレクションは、あらゆる有効な、しかしコレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>を含まないインデックスから後方へ辿っていくことを提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Binding memory to a type is potentially undefined if the memory is ever accessed as an unrelated type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型へ束縛されるメモリは、そのメモリがこれまでに関係ない型としてアクセスされるならば、潜在的に未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Binds the allocated memory to type <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> and returns an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept> to the bound memory at <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アロケートされたメモリを型<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>へ束縛して、<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept>を<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>での束縛されたメモリへ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Binds the allocated memory to type <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> and returns an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept> to the bound memory at <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アロケートされたメモリを型<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>へ束縛して、<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept>を<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>での束縛されたメモリへ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise AND</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise AND and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の論理積と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise NOT</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise OR</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise OR and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の論理和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise XOR</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の排他的論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise XOR and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の排他的論理和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise left shift</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の左シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise right shift</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位の右シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitwise shift</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のシフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Breaks the guarantees of Swift’s type system; use with extreme care.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スウィフト型システムの保証を壊します；最大限の注意を払ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging Between Array and NSArray</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ArrayとNSArrayの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging Between Dictionary and NSDictionary</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>DictionaryとNSDictionaryの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging Between Set and NSSet</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>SetとNSSetの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging between String and NSString</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>StringとNSStringの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging from <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>NSArray<ept i="1">&lt;/c1&gt;</ept> takes O(1) time and O(1) space if the array’s elements are already instances of a class or an <bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept> protocol; otherwise, it takes O(<bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>) time and space.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>から<bpt i="1" x="1">&lt;c1&gt;</bpt>NSArray<ept i="1">&lt;/c1&gt;</ept>へのブリッジは、配列のもつ要素がすでにあるクラスまたは<bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept>プロトコルのインスタンスであるならば、O(1)時間とO(1)空間をとります；そうでなければ、それはO(<bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>)の時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging from <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>NSDictionary<ept i="1">&lt;/c1&gt;</ept> always takes O(1) time and space.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept>から<bpt i="1" x="1">&lt;c1&gt;</bpt>NSDictionary<ept i="1">&lt;/c1&gt;</ept>へのブリッジは、常にO(1)時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging from <bpt i="0" x="0">&lt;c0&gt;</bpt>NSArray<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept> first calls the <bpt i="2" x="2">&lt;c2&gt;</bpt>copy(with:)<ept i="2">&lt;/c2&gt;</ept> (<bpt i="3" x="3">&lt;c3&gt;</bpt>- copyWithZone:<ept i="3">&lt;/c3&gt;</ept> in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>NSArray<ept i="0">&lt;/c0&gt;</ept>から<bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept>へのブリッジはまず<bpt i="2" x="2">&lt;c2&gt;</bpt>copy(with:)<ept i="2">&lt;/c2&gt;</ept>（Objective-Cでの<bpt i="3" x="3">&lt;c3&gt;</bpt>- copyWithZone:<ept i="3">&lt;/c3&gt;</ept>）メソッドをその配列上で呼び出すことである不変のコピーを取得します、そしてそれから追加のSwift簿記作業を実行します、それはO(1)時間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging from <bpt i="0" x="0">&lt;c0&gt;</bpt>NSDictionary<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept> first calls the <bpt i="2" x="2">&lt;c2&gt;</bpt>copy(with:)<ept i="2">&lt;/c2&gt;</ept> method (<bpt i="3" x="3">&lt;c3&gt;</bpt>- copyWithZone:<ept i="3">&lt;/c3&gt;</ept> in Objective-C) on the dictionary to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>NSDictionary<ept i="0">&lt;/c0&gt;</ept>から<bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept>へのブリッジは、最初に<bpt i="2" x="2">&lt;c2&gt;</bpt>copy(with:)<ept i="2">&lt;/c2&gt;</ept>メソッド（Objective-Cでの<bpt i="3" x="3">&lt;c3&gt;</bpt>- copyWithZone:<ept i="3">&lt;/c3&gt;</ept>）をその辞書上で呼び出して可変のコピーを取得して、それからO(1)時間を取る追加的なSwift簿記作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging from <bpt i="0" x="0">&lt;c0&gt;</bpt>NSSet<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>Set<ept i="1">&lt;/c1&gt;</ept> first calls the <bpt i="2" x="2">&lt;c2&gt;</bpt>copy(with:)<ept i="2">&lt;/c2&gt;</ept> method (<bpt i="3" x="3">&lt;c3&gt;</bpt>- copyWithZone:<ept i="3">&lt;/c3&gt;</ept> in Objective-C) on the set to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>NSSet<ept i="0">&lt;/c0&gt;</ept>から<bpt i="1" x="1">&lt;c1&gt;</bpt>Set<ept i="1">&lt;/c1&gt;</ept>へのブリッジは、最初に<bpt i="2" x="2">&lt;c2&gt;</bpt>copy(with:)<ept i="2">&lt;/c2&gt;</ept>メソッド（Objective-Cにおける<bpt i="3" x="3">&lt;c3&gt;</bpt>- copyWithZone:<ept i="3">&lt;/c3&gt;</ept>）を集合上で呼び出すことで可変のコピーを取得して、それからO(1)時間をとる追加的なSwift簿記作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bridging from <bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>NSSet<ept i="1">&lt;/c1&gt;</ept> always takes O(1) time and space.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept>から<bpt i="1" x="1">&lt;c1&gt;</bpt>NSSet<ept i="1">&lt;/c1&gt;</ept>へのブリッジは、常にO(1)の時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, Swift’s integer and pointer types are usable as the bounds of a countable range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、Swiftの整数およびボインタ型は可付番範囲の境界として使用に適します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, a collection conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol by supplying a <bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept> as its associated <bpt i="2" x="2">&lt;c2&gt;</bpt>Iterator<ept i="2">&lt;/c2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態で、コレクションは<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルに、<bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept>をそれの関連<bpt i="2" x="2">&lt;c2&gt;</bpt>Iterator<ept i="2">&lt;/c2&gt;</ept>型として提供することによって準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, a representation is automatically generated and any <bpt i="4" x="4">&lt;c4&gt;</bpt>customMirror<ept i="4">&lt;/c4&gt;</ept> implementation is bypassed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、ある表現は自動的に生成されてどのような<bpt i="4" x="4">&lt;c4&gt;</bpt>customMirror<ept i="4">&lt;/c4&gt;</ept>実装も迂回されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, any custom collection type you create will inherit a <bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept> method that returns an <bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept> instance, making it unnecessary to declare your own.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態で、あなたが作成するあらゆるあつらえのコレクション型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept>インスタンスを返す<bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept>メソッドを継承していて、それをあなた自身で宣言する必要をないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, most types in the standard library are hashable, including strings, numeric and Boolean types, enumeration cases without associated values, and even sets themselves.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態で、標準ライブラリの中のほとんどの型はハッシュ化されています、文字列、数のおよびブールの型、関連値なしの列挙ケース節、そして集合それら自身さえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, the standard library guarantees memory safety.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に何もしなくとも、標準ライブラリはメモリ安全を保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By sending the output of the <bpt i="3" x="3">&lt;c3&gt;</bpt>print(_:to:)<ept i="3">&lt;/c3&gt;</ept> function to an instance of <bpt i="4" x="4">&lt;c4&gt;</bpt>ASCIILogger<ept i="4">&lt;/c4&gt;</ept>, you invoke its <bpt i="5" x="5">&lt;c5&gt;</bpt>write(_:)<ept i="5">&lt;/c5&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>print(_:to:)<ept i="3">&lt;/c3&gt;</ept>関数の出力を<bpt i="4" x="4">&lt;c4&gt;</bpt>ASCIILogger<ept i="4">&lt;/c4&gt;</ept>のインスタンスに送ることによって、あなたはそれの<bpt i="5" x="5">&lt;c5&gt;</bpt>write(_:)<ept i="5">&lt;/c5&gt;</ept>メソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calculates the bits that are set in exactly one of the two arguments and stores the result in the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数の内で１つしかないものが集められ、その結果を最初の引数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calculates the intersection of bits set in the two arguments and stores the result in the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビットの交差を計算して、結果を最初の引数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calculates the intersections of bits sets in the two arguments and stores the result in the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数における複数のビットの交差をそれぞれ計算して、結果を最初の引数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calculates the union of bits set in the two arguments and stores the result in the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビットの合併を計算して、結果を最初の引数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calculates the union of bits sets in the two arguments and stores the result in the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビット集合いくらかの合併を計算して、結果を最初の引数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> on each element in <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> in the same order as a <bpt i="2" x="2">&lt;e2&gt;</bpt>for-in loop.<ept i="2">&lt;/e2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>を、<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>の中の各要素上で、<bpt i="2" x="2">&lt;e2&gt;</bpt>for-in loop<ept i="2">&lt;/e2&gt;</ept>と同じ順序で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>s to the stored <bpt i="2" x="2">&lt;c2&gt;</bpt>Header<ept i="2">&lt;/c2&gt;</ept> and raw <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept> storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>格納<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>生ストレージそれぞれへの<bpt i="2" x="2">&lt;c2&gt;</bpt>UnsafeMutablePointer<ept i="2">&lt;/c2&gt;</ept>を使って<bpt i="3" x="3">&lt;c3&gt;</bpt>body<ept i="3">&lt;/c3&gt;</ept>を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> with an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept> to the <bpt i="2" x="2">&lt;c2&gt;</bpt>Element<ept i="2">&lt;/c2&gt;</ept> storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>ストレージへの<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>を使って<bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> with an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept> to the stored <bpt i="2" x="2">&lt;c2&gt;</bpt>Header<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この格納<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>への<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>を使って<bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;c0&gt;</bpt>index(where:)<ept i="0">&lt;/c0&gt;</ept> again, this time on the slice created in step 2.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index(where:)<ept i="0">&lt;/c0&gt;</ept>をもう一度呼び出します、今回は手順２で作成したスライス上で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;c0&gt;</bpt>index(where:)<ept i="0">&lt;/c0&gt;</ept> to find the index of the first element in the <bpt i="1" x="1">&lt;c1&gt;</bpt>absences<ept i="1">&lt;/c1&gt;</ept> array that is greater than zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index(where:)<ept i="0">&lt;/c0&gt;</ept>を呼んで<bpt i="1" x="1">&lt;c1&gt;</bpt>absences<ept i="1">&lt;/c1&gt;</ept>配列の中の、ゼロより大きい最初の要素がもつインデックスを手に入れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call the given output stream’s <bpt i="2" x="2">&lt;c2&gt;</bpt>write(_:)<ept i="2">&lt;/c2&gt;</ept> method in your implementation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた出力ストリームのもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>write(_:)<ept i="2">&lt;/c2&gt;</ept>メソッドをあなたの実装において呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling the <bpt i="1" x="1">&lt;c1&gt;</bpt>removeSubrange(_:)<ept i="1">&lt;/c1&gt;</ept> method instead is preferred.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>removeSubrange(_:)<ept i="1">&lt;/c1&gt;</ept>メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling the <bpt i="3" x="3">&lt;c3&gt;</bpt>insert(contentsOf:at:)<ept i="3">&lt;/c3&gt;</ept> method instead is preferred.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>insert(contentsOf:at:)<ept i="3">&lt;/c3&gt;</ept>メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling the function with different class types shows how the <bpt i="2" x="2">&lt;c2&gt;</bpt>getDefaultValue()<ept i="2">&lt;/c2&gt;</ept> class method is only conditionally available.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数を異なるクラス型で呼び出すことは、どのように<bpt i="2" x="2">&lt;c2&gt;</bpt>getDefaultValue()<ept i="2">&lt;/c2&gt;</ept>クラスメソッドが条件付きでのみ利用可能であるのかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling the related <bpt i="0" x="0">&lt;c0&gt;</bpt>sorted()<ept i="0">&lt;/c0&gt;</ept> method is equivalent to calling this method and passing the less-than operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>) as the predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関連した<bpt i="0" x="0">&lt;c0&gt;</bpt>sorted()<ept i="0">&lt;/c0&gt;</ept>メソッドを呼び出すことは、このメソッドを呼び出して、より小さい演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>）を述部として渡すことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this method invalidates all indices with respect to the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを呼び出すことは、この辞書に関するすべてのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this method invalidates any existing indices for use with this dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを呼び出すことは、この辞書で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this method invalidates any existing indices for use with this string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを呼び出すことは、この文字列で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this method may invalidate all saved indices of this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを呼び出すことは、このコレクションの全ての保存されたインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this method may invalidate any existing indices for use with this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを呼び出すことは、このコレクションで使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calls a closure with a pointer to the array’s contiguous storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるクロージャを配列のもつ隣接ストレージへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calls the given closure on each element in the sequence in the same order as a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたクロージャをそのシーケンスの各要素上で<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループと同じ順番で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calls the given closure with a pointer to the array’s mutable contiguous storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャを配列のもつ可変の隣接ストレージへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Casting</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Casting AnyObject Instances to a Known Type</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>AnyObjectインスタンスを既知の型へキャストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Casting is always safe in the context of a <bpt i="0" x="0">&lt;c0&gt;</bpt>switch<ept i="0">&lt;/c0&gt;</ept> statement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キャストは<bpt i="0" x="0">&lt;c0&gt;</bpt>switch<ept i="0">&lt;/c0&gt;</ept>文の文脈においては常に安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Character View</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Checking that the iterator was exhausted is not sufficient, because the decoder can store buffered data from the input iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イテレータが使い尽くされてしまったことの確認は十分とは言えません、デコーダが入力イテレータからのバッファ済みデータを格納することができるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Checks a necessary condition for making forward progress.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは進捗を前へ進めるために必要な条件を確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Class instance identity, on the other hand, is compared using the triple-equals identical-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>===<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一方、クラスインスタンス同一性は、３つの等号の同一性演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>===<ept i="0">&lt;/c0&gt;</ept>）を使って比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Closed range</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Collections are used extensively throughout the standard library.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションは標準ライブラリの至る所で広範囲にわたって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Collections that conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept> gain the ability to change the value of their elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept>に準拠するコレクションは、それらの要素の値を変更する能力を獲得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Combine strings using the concatenation operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>+<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>連結演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>+<ept i="0">&lt;/c0&gt;</ept>）を使って文字列を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Command-line arguments for the current process.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>現在のプロセスに対するコマンドライン引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Common data structures such as <bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Dictionary<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>, and <bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>Set<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一般的なデータ構造体、例えば<bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Dictionary<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>、そして<bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>Set<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compare two <bpt i="0" x="0">&lt;c0&gt;</bpt>Strideable<ept i="0">&lt;/c0&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの<bpt i="0" x="0">&lt;c0&gt;</bpt>Strideable<ept i="0">&lt;/c0&gt;</ept>を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compares strings as sorted by the Finder.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列をFinderでソートされるように比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compares the string and a given string using a case-insensitive, localized, comparison.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>大文字小文字を考慮しない、ローカライズされた比較を使って、文字列を与えられた文字列と比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compares the string and a given string using a localized comparison.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ローカライズされた比較を使って、文字列を与えられた文字列と比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compares the string using the specified options and returns the lexical ordering for the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列を指定されたオプションを使って比較して、範囲の語彙的順序を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Comparing strings for equality using the equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>) or a relational operator (like <bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>&gt;=<ept i="2">&lt;/c2&gt;</ept>) is always performed using the Unicode canonical representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>）または関係演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>&gt;=<ept i="2">&lt;/c2&gt;</ept>のような）を使う文字列の比較は、常にユニコード正準表現を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Comparison</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: Amortized O(1) if the dictionary does not wrap a bridged <bpt i="0" x="0">&lt;c0&gt;</bpt>NSDictionary<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：この辞書が、ブリッジされた<bpt i="0" x="0">&lt;c0&gt;</bpt>NSDictionary<ept i="0">&lt;/c0&gt;</ept>をラップしないならば均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: Amortized O(1) if the dictionary does not wrap a bridged <bpt i="0" x="0">&lt;c0&gt;</bpt>NSDictionary<ept i="0">&lt;/c0&gt;</ept>; otherwise, the performance is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：この辞書が、ブリッジされた<bpt i="0" x="0">&lt;c0&gt;</bpt>NSDictionary<ept i="0">&lt;/c0&gt;</ept>をラップしないならば均してO(1)；それ以外では、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: Amortized O(1) over many additions.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：多くの追加にわたって均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: Amortized O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量（複雑さ）：均して（一定期間償還して）O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: Averages to O(1) over many calls to <bpt i="0" x="0">&lt;c0&gt;</bpt>popFirst()<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：多くの<bpt i="0" x="0">&lt;c0&gt;</bpt>popFirst()<ept i="0">&lt;/c0&gt;</ept>に対する呼び出しにわたって均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) if <bpt i="0" x="0">&lt;c0&gt;</bpt>Index<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>RandomAccessIndex<ept i="1">&lt;/c1&gt;</ept>; O(<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>) otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：<bpt i="0" x="0">&lt;c0&gt;</bpt>Index<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>RandomAccessIndex<ept i="1">&lt;/c1&gt;</ept>に準拠するならばO(1)；そうでないならばO(<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) if <bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>RandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>; O(<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>) otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：<bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>RandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>に準拠するならばO(1)；そうでないならばO(<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>; otherwise, O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> is the absolute value of <bpt i="3" x="3">&lt;c3&gt;</bpt>n<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(1) コレクションが<bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>に準拠するならば；そうでなければ、O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)、そこで<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>n<ept i="3">&lt;/c3&gt;</ept>の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>; otherwise, O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> is the length of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(1) コレクションが<bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>に準拠するならば；そうでなければ、O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)、そこで<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>; otherwise, O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> is the resulting distance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(1) コレクションが<bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>に準拠するならば；そうでなければ、O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)、そこで<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>は結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>; otherwise, O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(1) コレクションが<bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>に準拠するならば；そうでなければ、O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1) on average, over many additions to the same collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：同じコレクションへの多くの追加に対して、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;c0&gt;</bpt>self.count<ept i="0">&lt;/c0&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;c0&gt;</bpt>self.count<ept i="0">&lt;/c0&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;c0&gt;</bpt>separator.count<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;c0&gt;</bpt>separator.count<ept i="0">&lt;/c0&gt;</ept>)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;c0&gt;</bpt>subrange.count<ept i="0">&lt;/c0&gt;</ept>) if you are replacing a suffix of the array with an empty collection; otherwise, O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> is the length of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：あなたが配列の末尾を空のコレクションで置き換えるならばO(<bpt i="0" x="0">&lt;c0&gt;</bpt>subrange.count<ept i="0">&lt;/c0&gt;</ept>)；そうでなければ、O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)、そこで<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept> + <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>m<ept i="2">&lt;/e2&gt;</ept> is the length of this sequence and <bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept> is the length of the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept> + <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)、ここで<bpt i="2" x="2">&lt;e2&gt;</bpt>m<ept i="2">&lt;/e2&gt;</ept>はこのシーケンスの長さで、<bpt i="3" x="3">&lt;e3&gt;</bpt>n<ept i="3">&lt;/e3&gt;</ept>は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept> is the combined length of the character view and <bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept>は文字ビューと<bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept> is the combined length of the collection and <bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>はコレクションと<bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept> is the combined length of the string and <bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept>は文字列と<bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept> is the combined length of the view and <bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>m<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>m<ept i="1">&lt;/e1&gt;</ept>はビューと<bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>) if the array is bridged, where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the array; otherwise, O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：配列がブリッジされるならばO(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は配列の長さです；そうでなければ、O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>) if the underlying string is bridged from Objective-C, where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the string; otherwise, O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：基礎をなす文字列がObjective-CからブリッジされるならばO(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は文字列の長さです；そうでなければ、O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>maxLength<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>maxLength<ept i="2">&lt;/c2&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the absolute value of <bpt i="2" x="2">&lt;c2&gt;</bpt>n<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、そこで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>n<ept i="2">&lt;/c2&gt;</ept>の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the capacity being reserved.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は確保されている容量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the combined length of the string and <bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は文字列と<bpt i="2" x="2">&lt;c2&gt;</bpt>newElements<ept i="2">&lt;/c2&gt;</ept>を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the count of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は配列の総数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the resulting array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は結果となる配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the resulting collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は結果となるコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the resulting view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は結果となるビューの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the sequence if the sequence is a collection or wraps a collection; otherwise, O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>はシーケンスがコレクションまたはラップされたコレクションならばシーケンスの長さです；そうでなければ、O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>はシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は文字列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>はコレクションの始まりから省かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>はシーケンスの始まりから省かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the number of elements to drop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は省く要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the number of key-value pairs in the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は辞書の中のキー値ペアの数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the ratio between unfiltered and filtered collection counts.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>はコレクションのフィルタされないものとフィルタされたもの数の比率です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the resulting distance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the specified number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)、ここで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は指定された要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Complexity: Reading an element from an array is O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>計算量：ある要素を配列から読み出すことはO(1)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Concrete instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>SignedNumber<ept i="0">&lt;/c0&gt;</ept> can specialize this function by conforming to <bpt i="1" x="1">&lt;c1&gt;</bpt>AbsoluteValuable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>SignedNumber<ept i="0">&lt;/c0&gt;</ept>の具体的なインスタンスは、<bpt i="1" x="1">&lt;c1&gt;</bpt>AbsoluteValuable<ept i="1">&lt;/c1&gt;</ept>に準拠することによってこの関数を特殊化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to ExpressibleByArrayLiteral</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByArrayLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to ExpressibleByExtendedGraphemeClusterLiteral</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByExtendedGraphemeClusterLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to ExpressibleByFloatLiteral</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByFloatLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to ExpressibleByStringLiteral</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByStringLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to ExpressibleByUnicodeScalarLiteral</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByUnicodeScalarLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the BidirectionalCollection Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>BidirectionalCollectionプロトコルへの準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the BitwiseOperations Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>BitwiseOperationsプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the Collection Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Collectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the Comparable Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Comparableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the CustomDebugStringConvertible Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>CustomDebugStringConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the CustomStringConvertible Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>CustomStringConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the Equatable Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Equatableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the ExpressibleByDictionaryLiteral Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByDictionaryLiteralプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the ExpressibleByStringInterpolation Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ExpressibleByStringInterpolationプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the Hashable Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Hashableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the MutableCollection Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>MutableCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the RandomAccessCollection Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>RandomAccessCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the RangeReplaceableCollection Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>RangeReplaceableCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the Sequence Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Sequenceプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the SetAlgebra Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>SetAlgebraプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the TextOutputStream Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>TextOutputStreamプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming to the TextOutputStreamable Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>TextOutputStreamableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming types are notionally continuous, one-dimensional values that can be offset and measured.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型は、概念上連続的な、一次元の値で、それはオフセットされることと計測されることができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforming types can be initialized with integer literals.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型は、整数リテラルを使って初期化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conforms To</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Consider a class called <bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept> that wraps an integer value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept>と呼ばれるクラスを考えてください、それはある整数値をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt16<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt16<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt32<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt32<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int64<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt64<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int64<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt64<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt8<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt8<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Int16<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>Int16<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Int32<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>Int32<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt64<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Int64<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt64<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>Int64<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Int8<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>Int8<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept> having the same bitwise representation as the least significant bits of the provided bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>を提供されたビットパターンの最下位ビットと同じビット単位表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct a <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept> having the same memory representation as the <bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>bitPattern<ept i="2">&lt;/c2&gt;</ept>と同じメモリ表現を持つようにして組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct from an ASCII representation in the given <bpt i="0" x="0">&lt;c0&gt;</bpt>radix<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた<bpt i="0" x="0">&lt;c0&gt;</bpt>radix<ept i="0">&lt;/c0&gt;</ept>（基数）でのASCII表現から組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct from an integer offset.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>整数オフセットから組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construct with value <bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値<bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept>を使って組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Contains a buffer object, and provides access to an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept> and contiguous storage for an arbitrary number of <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> instances stored in that buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファオブジェクトを収容します、そして<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>のインスタンスへのアクセスおよびそのバッファに格納される随意の数の<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>インスタンスの隣接保管を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Continuation bytes take the form <bpt i="0" x="0">&lt;c0&gt;</bpt>0b10xxxxxx<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>継続バイトは、形式<bpt i="0" x="0">&lt;c0&gt;</bpt>0b10xxxxxx<ept i="0">&lt;/c0&gt;</ept>を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> property is an O(<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>) operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>反対に、前方または双方向性のコレクションはコレクション全体を辿っていくことで含まれる要素の数を数えるので、それの<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>プロパティにアクセスすることはO(<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>)演算になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conversion stops when the buffer fills or when the conversion isn’t possible due to the chosen encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファが一杯になる場合または選択されたエンコーディングによって変換が可能でない場合は、変換は停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Convert <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> to type <bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>, trapping on overflow in -Onone and -O builds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>を型<bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>に変換します、-Ononeおよび-Oビルドにおいてオーバーフローをトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Convert from <bpt i="0" x="0">&lt;c0&gt;</bpt>AutoreleasingUnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AutoreleasingUnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>から変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Convert from Swift’s widest signed integer type, trapping on overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スウィフトの持つ最も広い符号付き整数型から変換します、オーバーフローではトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Convert from Swift’s widest unsigned integer type, trapping on overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スウィフトの最も広い符号なし整数型から変換します、オーバーフローではトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Convert other <bpt i="0" x="0">&lt;c0&gt;</bpt>AutoreleasingUnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別の<bpt i="0" x="0">&lt;c0&gt;</bpt>AutoreleasingUnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>に転換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts a pattern of bits to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるパターンのビットを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts a pattern of bits to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるパターンのビットを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts a typed <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept> to an opaque C pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型付けされた<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>を不透明Cポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts a typed <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept> to an opaque C pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型付けされた<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept>を不透明Cポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an UnsafeMutablePointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UnsafeMutablePointerを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an UnsafeMutablePointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UnsafeMutablePointerを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an UnsafeMutableRawPointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UnsafeMutableRawPointerを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an UnsafePointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UnsafePointerを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an UnsafeRawPointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるUnsafeRawPointerを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an opaque pointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明ポインタを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts an opaque pointer to an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明ポインタを<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts from <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept> to an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer<ept i="1">&lt;/c1&gt;</ept> of the same <bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>から同じ<bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer<ept i="1">&lt;/c1&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts from <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept> of the same <bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept>から同じ<bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts from an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept> to UnsafeMutablePointer&lt;T&gt; given that the region of memory starting at <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is already bound to type <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>からUnsafeMutablePointer<it pos="begin" x="1">&lt;T&gt;へ変換します、&lt;c1&gt;</it>self<ept i="1">&lt;/c1&gt;</ept>で始まるメモリ領域がすでに型<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>に束縛されるとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts from an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept> to UnsafePointer&lt;T&gt; given that the region of memory starting at <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> is already bound to type <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>からUnsafePointer<it pos="begin" x="1">&lt;T&gt;へ変換します、&lt;c1&gt;</it>self<ept i="1">&lt;/c1&gt;</ept>で始まるメモリ領域がすでに型<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>に束縛されるとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts from an opaque pointer to a typed pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明なCポインタから型付けされたポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>’s content to a given encoding and stores them in a buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>のもつ内容を与えられた符号化に変換してそれらをバッファに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Copies <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> bytes from <bpt i="1" x="1">&lt;c1&gt;</bpt>source<ept i="1">&lt;/c1&gt;</ept> into memory at <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>source<ept i="1">&lt;/c1&gt;</ept>から<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>バイトを<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>でのメモリへとコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Copying an iterator is safe, but advancing one copy of an iterator by calling its <bpt i="1" x="1">&lt;c1&gt;</bpt>next()<ept i="1">&lt;/c1&gt;</ept> method may invalidate other copies of that iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるイテレータをコピーすることは安全です、しかしあるインスタンスの１つのコピーをそれのメソッド<bpt i="1" x="1">&lt;c1&gt;</bpt>next()<ept i="1">&lt;/c1&gt;</ept>メソッドを呼び出すことによって前に進めることは、そのイテレータの他のコピーを無価値にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Counting the Length of a String</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の長さを数える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> instance from the new index values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>インスタンスを新しいインデックス値から作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create a new dictionary by using a dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい辞書を辞書リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create a new instance of the most-derived class, calling <bpt i="0" x="0">&lt;c0&gt;</bpt>factory<ept i="0">&lt;/c0&gt;</ept> on the partially-constructed object to generate an initial <bpt i="1" x="1">&lt;c1&gt;</bpt>Header<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も派生したクラスの新しいインスンタスを作成します、部分的に組み立てられたオブジェクト上で<bpt i="0" x="0">&lt;c0&gt;</bpt>factory<ept i="0">&lt;/c0&gt;</ept>を呼び出して初期<bpt i="1" x="1">&lt;c1&gt;</bpt>Value<ept i="1">&lt;/c1&gt;</ept>を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create a slice of the <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array starting after the index found in step 1.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列のスライスを、手順１で見つけたインデックスの後から開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create a slice of the <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array that holds the second half of the days.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>学期後半の日付を保持する、<bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列のスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create an enumeration that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Error<ept i="0">&lt;/c0&gt;</ept> protocol with a case for each possible error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Error<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する列挙を、各ありうるエラーに対して１つのケース節で作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create an instance initialized to <bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create an instance initialized to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ゼロに初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create instances of <bpt i="1" x="1">&lt;c1&gt;</bpt>Bool<ept i="1">&lt;/c1&gt;</ept> by using one of the Boolean literals <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept> or by assigning the result of a Boolean method or operation to a variable or constant.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Bool<ept i="1">&lt;/c1&gt;</ept>のインスタンスをブールのリテラル<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>および<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>のうちの１つを使うことによって、またはブールのメソッドや演算の結果を変数や定数に代入することによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create new instances of floating-point types using integer or floating-point literals.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点型の新しいインスタンスを、整数または浮動小数点リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create with new storage containing an initial <bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept> and space for at least <bpt i="1" x="1">&lt;c1&gt;</bpt>minimumCapacity<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>element<ept i="2">&lt;/c2&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある初期<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>と少なくとも<bpt i="1" x="1">&lt;c1&gt;</bpt>minimumCapacity<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>element<ept i="2">&lt;/c2&gt;</ept>に対する空間を格納している新しいストレージを使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a NaN (“not a number”) value with the specified payload.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたペイロードをもつNaN（「非数」）値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a Unicode scalar with the specified numeric value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a Unicode scalar with the specified value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a character containing the given Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたユニコードスカラー値を含んでいるひとつの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a character from a single-character string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある単一文字の文字列から１つの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a character with the specified value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された値でひとつの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a collection containing the specified number of the given element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の与えられた要素を含んでいるコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a dictionary initialized with a dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルで初期化される辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a dictionary with at least the given number of elements worth of storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>少なくとも指定された要素の数に相当するストレージを持つ辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a duplicate of the given Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたユニコードスカラーの複製を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a flattened view of <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>の平坦な見方を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> instance from the given dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>インスタンスを与えられた辞書リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new array containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しい配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new character view containing the characters in the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中のいくらかの文字を含んでいるある新しい文字ビューを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new collection by concatenating the elements of a collection and a sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションとあるシーケンスの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new collection by concatenating the elements of a sequence and a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスとあるコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new collection by concatenating the elements of two collections.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new collection containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new floating-point value using the sign of one value and the magnitude of another.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値の符号ともう一方の規模とを使って新しい浮動小数点値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new index wrapping <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>をラップしている新しいインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance by rounding the given floating-point value toward zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた浮動小数点値をゼロへ丸めることによって、新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance from the given string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance from the given value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値から新しいインスタンスを作成します、最も近い可能な表現に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance from the specified sign and bit patterns.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された符号とビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance initialized to the given value, if it can be represented without rounding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それが丸めなしに表されることができるならば、与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance initialized to the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance of a collection containing the elements of a sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスの要素を含んでいるあるコレクションの新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance that approximates the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値におおよそ相当する新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new instance with the specified raw value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された生の値を持つ新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new option set from the given raw value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた生の値から新しいオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new sequence that wraps and forwards operations to <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>をラップしてそれへと演算を転送する新規シーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new set from a finite sequence of items.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの要素からなる有限のシーケンスから集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new string by concatenating the given interpolations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた補間を連結することによって新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new string by copying and validating the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーして検証することによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new string by copying the null-terminated data referenced by the given pointer using the specified encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のデータをコピーすることによって作成します、指定された符号化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new string containing the characters in the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中のいくらかの文字を含んでいるある新しい文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new string representing the given string repeated the specified number of times.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された回数繰り返された与えられた文字列を表している新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new value from the given floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた不動小数点リテラルから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new value from the given integer literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた整数リテラルから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new value from the given sign, exponent, and significand.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号、指数、そして仮数から新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new value with the given bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたビットパターンから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new value, rounded to the closest possible representatation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値を作成します、最も近い可能な表現に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new, empty array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい、空の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new, empty collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい、空のコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a new, empty set with at least the specified number of elements’ worth of storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>少なくとも指定された要素の数に相当するストレージを持つ新しい、空の集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a sequence of pairs built out of two underyling sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a sequence that presents the elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept> sequences concatenated using <bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンス、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>シーケンスたちの要素を、与えられた<bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept>を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a sequence whose <bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept> method forwards to <bpt i="1" x="1">&lt;c1&gt;</bpt>makeUnderlyingIterator<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの<bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept>メソッドを<bpt i="1" x="1">&lt;c1&gt;</bpt>makeUnderlyingIterator<ept i="1">&lt;/c1&gt;</ept>へと転送するあるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a set containing the elements of the given array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた配列リテラルの要素を含んでいる集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string containing the given character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字を含んでいる文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string containing the given expression’s textual representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた式のもつテキスト表現を含んでいる文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string containing the given value’s textual representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値のもつテキスト表現を含んでいる文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string corresponding to the given collection of Unicode scalars.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたユニコードスカラーのコレクションに対応する文字列を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string corresponding to the given sequence of UTF-16 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたUTF-16コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string corresponding to the given sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたUTF-8コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string from the given character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字ビューから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string representing the given value in base 10.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値を基数10で表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string representing the given value in the specified base.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値を与えられた基数で表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string representing the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a string with a detailed representation of the given value, suitable for debugging.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値の詳細な表現での文字列を作成します、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a type-erased collection that wraps the given collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたコレクションをラップする型消去コレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a type-erased hashable value that wraps the given instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型消去ハッシュ化値を作成します、それは与えられたインスタンスをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a value initialized to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ゼロに初期化される値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a view into the given collection that allows access to elements within the specified range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたコレクションに関するあるビューを作成します、それは指定された範囲の内の要素にアクセスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a view of the given string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列のビューを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept> having the same underlying collection as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>と同じ基礎をなすコレクションを持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyCollection<ept i="0">&lt;/c0&gt;</ept> having the same underlying collection as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>と同じ基礎をなすコレクションを持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyCollection<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyRandomAccessCollection<ept i="0">&lt;/c0&gt;</ept> having the same underlying collection as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>と同じ基盤コレクションを持っている<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyRandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>OpaquePointer<ept i="0">&lt;/c0&gt;</ept> from a given address in memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリ中の与えられたアドレスから<bpt i="0" x="0">&lt;c0&gt;</bpt>OpaquePointer<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept> from another <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別の<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>から<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept> with a given pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたパターンのビットから<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept> from another <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutableRawPointer<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableRawPointer<ept i="0">&lt;/c0&gt;</ept>を別の<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutableRawPointer<ept i="1">&lt;/c1&gt;</ept>から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept> from another <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別の<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer<ept i="1">&lt;/c1&gt;</ept>から<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept> with a given pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたパターンのビットから<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept> from another <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeRawPointer<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別の<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeRawPointer<ept i="1">&lt;/c1&gt;</ept>から<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeRawPointer<ept i="0">&lt;/c0&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an UnsafeMutablePointer over the <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> contiguous <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> instances beginning at <bpt i="2" x="2">&lt;c2&gt;</bpt>start<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個の隣接する<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>インスタンスに対するひとつのUnsafeMutablePointerを<bpt i="2" x="2">&lt;c2&gt;</bpt>start<ept i="2">&lt;/c2&gt;</ept>で開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an UnsafePointer over the <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> contiguous <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> instances beginning at <bpt i="2" x="2">&lt;c2&gt;</bpt>start<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個の隣接する<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>インスタンスに対するひとつのUnsafePointerを<bpt i="2" x="2">&lt;c2&gt;</bpt>start<ept i="2">&lt;/c2&gt;</ept>で開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an array containing the elements of a sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスの要素を含んでいる配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an array from the given array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された配列リテラルから配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の文字ビューを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty static string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の静的文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an empty view instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のビューインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an index in the given UTF-16 view that corresponds exactly to the specified <bpt i="0" x="0">&lt;c0&gt;</bpt>CharacterView<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-16ビューの中のあるインデックスを作成します、それは指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>CharacterView<ept i="0">&lt;/c0&gt;</ept>位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an index in the given UTF-16 view that corresponds exactly to the specified <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-16ビューの中のあるインデックスを作成します、それは指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept>位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an index in the given UTF-16 view that corresponds exactly to the specified <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-16ビューの中のあるインデックスを作成します、それは指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept>位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an index in the given UTF-8 view that corresponds exactly to the specified <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF16View<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-8ビューの中のあるインデックスを作成します、それは指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>UTF16View<ept i="0">&lt;/c0&gt;</ept>位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an index in the given UTF-8 view that corresponds exactly to the specified <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept> position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-8ビューの中のあるインデックスを作成します、それは指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept>位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an index in the given UTF-8 view that corresponds exactly to the specified string position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-8ビューの中のあるインデックスを作成します、それは指定された文字列位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance by concatenating the given values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくらかの与えられた値を連結することによってインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance containing just <bpt i="0" x="0">&lt;c0&gt;</bpt>element<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ただ<bpt i="0" x="0">&lt;c0&gt;</bpt>element<ept i="0">&lt;/c0&gt;</ept>だけを含んでいるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance containing the appropriate representation for the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値に対する適切な表現を含んでいるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance equivalent to the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲と等しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance from the description of a given <bpt i="0" x="0">&lt;c0&gt;</bpt>LosslessStringConvertible<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた<bpt i="0" x="0">&lt;c0&gt;</bpt>LosslessStringConvertible<ept i="0">&lt;/c0&gt;</ept>インスタンスの叙述からインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>に初期化されるインスタクスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to a single Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある単一のユニコードスカラーへと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to a single character that is made up of one or more Unicode code points.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ひとつ以上のユニコードコード点でできているある単一の文字へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the given Boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたブール値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the given Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたユニコードスカラー値へ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the given extended grapheme cluster literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた拡張書記素クラスタリテラルへ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the given string value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列値へ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the specified Boolean literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたブールリテラルに初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the specified floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された浮動小数点値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized to the value of a string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列リテラルの値へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized with <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>で初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized with the given elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素で初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance initialized with the given key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた「キー値」ペアで初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance of the UTF-16 codec.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-16コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance of the UTF-32 codec.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-32コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance of the UTF-8 codec.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-8コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance of the codec.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance representing the given logical value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた論理値を表しているインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance that stores the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値を格納するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance that uniquely identifies the given class instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクラスインスタンスを固有に識別するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance that uniquely identifies the given metatype.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたメタタイプを固有に識別するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance whose iterator is a copy of <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それのイテレータが<bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>のコピーであるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance with the given bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた境界を使ってインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an integer from its big-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それのビッグエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an integer from its little-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それのリトルエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an integer that captures the full value of the given object identifier.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたオブジェクト識別子の完全な値を捕獲する整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an iterator that presents the elements of the sequences traversed by <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>, concatenated using <bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるイテレータ、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept>によって辿っていかれるいくらかのシーケンスに属するいくらかの要素を、<bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept>を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an iterator that wraps a base iterator but whose type depends only on the base iterator’s element type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基盤イテレータをラップするイテレータを作成します、しかしそれの型は基盤イテレータのもつ要素型にのみ影響を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an iterator that wraps the given closure in its <bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャをそれの<bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>の中にラップするイテレータを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an unmanaged reference with an unbalanced retain.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>管理されない参照を不均衡なリテイン（保持）で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates an unmanaged reference without performing an unbalanced retain.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>管理されない参照を不均衡なリテイン（保持）を実行することなしに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creating and iterating over a <bpt i="0" x="0">&lt;c0&gt;</bpt>Countdown<ept i="0">&lt;/c0&gt;</ept> sequence uses a <bpt i="1" x="1">&lt;c1&gt;</bpt>CountdownIterator<ept i="1">&lt;/c1&gt;</ept> to handle the iteration.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Countdown<ept i="0">&lt;/c0&gt;</ept>シーケンス全体にわたっての作成や反復は、その反復を取り扱う<bpt i="1" x="1">&lt;c1&gt;</bpt>CountdownIterator<ept i="1">&lt;/c1&gt;</ept>を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>De-initializes the <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>s starting at <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>, returning their memory to an uninitialized state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>で開始して<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個の<bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>をデイニシャライズします、それらのメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deallocates uninitialized memory allocated for <bpt i="0" x="0">&lt;c0&gt;</bpt>bytes<ept i="0">&lt;/c0&gt;</ept> number of bytes with <bpt i="1" x="1">&lt;c1&gt;</bpt>alignedTo<ept i="1">&lt;/c1&gt;</ept> alignment.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>alignedTo<ept i="1">&lt;/c1&gt;</ept>アラインメントで<bpt i="0" x="0">&lt;c0&gt;</bpt>bytes<ept i="0">&lt;/c0&gt;</ept>バイト数に対してアロケートされた初期化されないメモリをデアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deallocates uninitialized memory allocated for <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> instances of <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>の<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>インスタンスに対してアロケートされた初期化されないメモリをデアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Declaration</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Declare a <bpt i="1" x="1">&lt;c1&gt;</bpt>next()<ept i="1">&lt;/c1&gt;</ept> method that advances one step in the related sequence and returns the current element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>next()<ept i="1">&lt;/c1&gt;</ept>メソッドを宣言してください、それは関連シーケンスにおいて一歩前へ進みます、そして現在の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Declare additional preconfigured option set values as static properties initialized with an array literal containing other option values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>追加のあらかじめ構成されるオプションセット値を、他のオプション値を含んでいる配列リテラルで初期化される静的プロパティとして宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Default Implementations</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>デフォルト実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てるまたは全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested, or to take no action at all.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てること、または全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Depending on your needs, you may find it useful to “upgrade” instances of this type to <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>AnyRandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのさまざまな必要に応じて、この型のインスタンスを<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>AnyRandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>に「アップグレード」するのは便利なことをあなたは発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Describes the parts—such as stored properties, collection elements, tuple elements, or the active enumeration case—that make up a particular instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>さまざまな部品—例えば保存プロパティ、コレクションの要素、タプルの要素、またはアクティブな列挙ケース節など—特定のインスタンスを作り上げるものを叙述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Description</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dictionaries are empty when created with an initializer or an empty dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書は、イニシャライザまたは空の辞書リテラルで作成した場合は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dictionary Literals as Function Parameters</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関数パラメータとしての辞書リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dictionary has two subscripting interfaces:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書は２つの添え字インターフェイスを持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Discussion</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divide</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>除算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divide <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning a result and a <bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept> that is <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept> iff the operation caused an arithmetic overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の除算、結果を返します、そしてこの演算が算術的オーバーフローをもたらした場合に限り<bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divide <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning the remainder and a <bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept> that is <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept> iff the operation caused an arithmetic overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の除算、余りを返します、そしてこの演算が算術的オーバーフローをもたらした場合に限り<bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divide and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>除算と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divides <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept> and stores the remainder in <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>, trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の除算、余りを<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>に格納します、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divides <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept> and stores the result in <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>, trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の除算、結果を<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>に格納します、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divides <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning the remainder and trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の除算、余りを返して、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divides <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning the result and trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の除算、結果を返して、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Divides this value by the given value in place, rounding to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値を与えられた値でその場で除算します、表現可能な値に丸めています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not advance the iterator or any copies of the iterator outside this method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イテレータやなんらかのイテレータのなんらかのコピーをこのメソッドの外側で前進させないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not call this initializer directly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not declare new conformances to this protocol; they will not work as expected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい準拠事項をこのプロトコルに宣言しないでください；
それは期待するようには機能しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not persist the hash value across program runs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複数のプログラム実行にまたがるハッシュ値に固執しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not rely on anything about <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> (the array that is the target of this method) during the execution of the <bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept> closure: It may not appear to have its correct value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept>クロージャの実行の間、<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>（このメソッドのターゲットである配列）について何であれ依存しないでください：それは、それの正しい値を持つように見えないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not save hash values to use during a future execution.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>将来の実行の間に使うためにハッシュ値を保存しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not use the string that is the target of this method inside the closure passed to <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>, as it may not have its correct value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドのターゲットである文字列を<bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>に渡されるクロージ内部で使わないでください、それがそれの正しい値を持たないかもしれないので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Does not NULL-terminate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ヌル終端しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Does not include any dynamically-allocated or “remote” storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>どんな動的割り当てされたまたは「遠隔」ストレージも含めません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don’t call this initializer directly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザを直に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don’t expect any particular ordering of key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの特定のキー値ペア順番付けを当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don’t expect any particular ordering of set elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの特定の集合要素順番を当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don’t rely on a previously stored index value after altering a collection with any operation that can change its length.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの長さを変えることができる何らかの演算でコレクションを改める後に、以前に格納されたインデックス値を当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don’t use the equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>) to test whether a value is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>を使ってある値がNaNかどうかをテストしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don’t use this property to check whether a floating point value is negative.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロパティを使って浮動小数点値が負かどうか調べないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Download the playground below to get started.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドを下でダウンロードして始めましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dumps an object’s contents using its mirror to standard output.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるオブジェクトの内容をそれのミラーを使って標準出力にダンプします（どさっと落とします）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dumps an object’s contents using its mirror to the specified output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オブジェクトの内容をそれのミラーを使って指定された出力ストリームにダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>During instance creation, in particular during <bpt i="0" x="0">&lt;c0&gt;</bpt>ManagedBuffer.create<ept i="0">&lt;/c0&gt;</ept>’s call to initialize, <bpt i="1" x="1">&lt;c1&gt;</bpt>ManagedBuffer<ept i="1">&lt;/c1&gt;</ept>’s <bpt i="2" x="2">&lt;c2&gt;</bpt>header<ept i="2">&lt;/c2&gt;</ept> property is as-yet uninitialized, and therefore reading the <bpt i="3" x="3">&lt;c3&gt;</bpt>header<ept i="3">&lt;/c3&gt;</ept> property during <bpt i="4" x="4">&lt;c4&gt;</bpt>ManagedBuffer.create<ept i="4">&lt;/c4&gt;</ept> is undefined.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンス作成の間、特に<bpt i="0" x="0">&lt;c0&gt;</bpt>ManagedBuffer.create<ept i="0">&lt;/c0&gt;</ept>でのイニシャライザ呼び出しの間、<bpt i="1" x="1">&lt;c1&gt;</bpt>ManagedBuffer<ept i="1">&lt;/c1&gt;</ept>の<bpt i="2" x="2">&lt;c2&gt;</bpt>header<ept i="2">&lt;/c2&gt;</ept>プロパティは今の所まだイニシャライズされていません、そしてそれゆえ<bpt i="3" x="3">&lt;c3&gt;</bpt>header<ept i="3">&lt;/c3&gt;</ept>プロパティを読み出すことは<bpt i="4" x="4">&lt;c4&gt;</bpt>ManagedBuffer.create<ept i="4">&lt;/c4&gt;</ept>の間は未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>During the registration period, you need to add and remove names as students add and drop the class.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>履修期間の間、あなたはそのクラスに生徒を加えたり落としたりするたびに名前を加えたり取り除いたりする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> argument results in a linear search.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>引数は線形検索という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeDecodingResult<ept i="0">&lt;/c0&gt;</ept> instance can represent a Unicode scalar value, an indication that no more Unicode scalars are available, or an indication of a decoding error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeDecodingResult<ept i="0">&lt;/c0&gt;</ept>インスタンスは、ユニコードスカラー値、これ以上利用可能なユニコードスカラーがないしるし、またはデコードエラーのしるしとして表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each array has an independent value that includes the values of all of its elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各配列はひとつの独立した値を持ち、それはそれのいくらかある要素の値すべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each bit of <bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept> potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the <bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept>の各ビットは、潜在的にオプションセットの１つの要素を表します、けれども生の値は他とまったく異なった<bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept>型の値として定義されないビットを含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each bit of the raw value potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the <bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>生の値の各ビットは潜在的にオプションセットの１つの要素を表します、けれども生の値は他とまったく異なった<bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept>型の値として定義されないビットを含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each code unit is stored as a <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt16<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各コード単位は<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt16<ept i="1">&lt;/c1&gt;</ept>インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each code unit is stored as a <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt8<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各コード単位は<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt8<ept i="1">&lt;/c1&gt;</ept>インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each element of a <bpt i="2" x="2">&lt;c2&gt;</bpt>CharacterView<ept i="2">&lt;/c2&gt;</ept> collection is a <bpt i="3" x="3">&lt;c3&gt;</bpt>Character<ept i="3">&lt;/c3&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>CharacterView<ept i="2">&lt;/c2&gt;</ept>コレクションの要素それぞれは、ひとつの<bpt i="3" x="3">&lt;c3&gt;</bpt>Character<ept i="3">&lt;/c3&gt;</ept>インスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each element of the <bpt i="3" x="3">&lt;c3&gt;</bpt>characters<ept i="3">&lt;/c3&gt;</ept> view is represented by a <bpt i="4" x="4">&lt;c4&gt;</bpt>Character<ept i="4">&lt;/c4&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>characters<ept i="3">&lt;/c3&gt;</ept>ビューの各要素は、<bpt i="4" x="4">&lt;c4&gt;</bpt>Character<ept i="4">&lt;/c4&gt;</ept>インスタンスによって表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each element of the range is its own corresponding index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の各要素はそれ自身の付随インデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each entry in the table is identified using its key, which is a hashable type such as a string or number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのテーブル（表）の中の登録項目はそれのキーを使って特定され、そのキーはハッシュ化型、例えば文字列や数などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each floating-point type has its own possible range and precision.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各浮動小数点型は、それ独自の可能な範囲と精度を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each ill-formed sequence is replaced with a Unicode replacement character (<bpt i="3" x="3">&lt;c3&gt;</bpt>"\u{FFFD}"<ept i="3">&lt;/c3&gt;</ept>) and is measured as such.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各誤形式シーケンスは、ユニコード代替文字（<bpt i="3" x="3">&lt;c3&gt;</bpt>"\u{FFFD}"<ept i="3">&lt;/c3&gt;</ept>）で置き換えられます、そしてそういったものとして測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each key in <bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept> must be unique.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各キーは<bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept>において特有でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each key in the keys collection has a unique value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このキーコレクションの中の各キーは、特有な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each of these collections is a particular type of <bpt i="0" x="0">&lt;e0&gt;</bpt>view<ept i="0">&lt;/e0&gt;</ept> of the string’s visible and data representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのコレクションの各々は、その文字列の持つ可視のおよびデータの表現である、ある特定の型の<bpt i="0" x="0">&lt;e0&gt;</bpt>view<ept i="0">&lt;/e0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それらスカラー値のそれぞれは、今度は、ある単一のUTF-16またはUTF-8コード単位にぴったり合うには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each scalar value is represented by a <bpt i="1" x="1">&lt;c1&gt;</bpt>UnicodeScalar<ept i="1">&lt;/c1&gt;</ept> instance and is equivalent to a UTF-32 code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各スカラー値は、<bpt i="1" x="1">&lt;c1&gt;</bpt>UnicodeScalar<ept i="1">&lt;/c1&gt;</ept>インスタンスによって表されます、そしてUTF-32コード単位と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each segment of the string literal before, between, and after any included expressions, along with the individual expressions themselves, are passed to the <bpt i="0" x="0">&lt;c0&gt;</bpt>init(stringInterpolationSegment:)<ept i="0">&lt;/c0&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あらゆる含められた式の前、間、後の文字列リテラル各分節は、個々の式それ自体も含めて、<bpt i="0" x="0">&lt;c0&gt;</bpt>init(stringInterpolationSegment:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each time an element of the lazy sequence is accessed, an element of the underlying array is accessed and transformed by the closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>遅延シーケンスの中のある要素がアクセスされるたびに、基礎をなす配列の中のある要素がアクセスされてクロージャによって変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each time the <bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept> method is called on a <bpt i="1" x="1">&lt;c1&gt;</bpt>CountdownIterator<ept i="1">&lt;/c1&gt;</ept> instance, it calculates the new next value, checks to see whether it has reached zero, and then returns either the number, or <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept> if the iterator is finished returning elements of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>メソッドが<bpt i="1" x="1">&lt;c1&gt;</bpt>CountdownIterator<ept i="1">&lt;/c1&gt;</ept>インスタンス上で呼ばれるたびに、それは新しい次の値を計算し、それがゼロに届いたか見るために調べ、そしてそれからその数、またはそのイテレータがシーケンスの要素を返すことを完了するならば<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>のどちらかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each visible character in the <bpt i="0" x="0">&lt;c0&gt;</bpt>cafe<ept i="0">&lt;/c0&gt;</ept> string is a separate element of the <bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>cafe<ept i="0">&lt;/c0&gt;</ept>文字列の中の可視の文字のそれぞれは、<bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept>ビューに属するある単独の要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Elements are sorted in ascending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素は昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Elements that are in either one or the other, but not both, are left out of the result of the intersection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一方または他方のどちらかにある、しかし両方にではない、要素は、交叉の結果から除外されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Elements that are used to split the collection are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Elements that are used to split the sequence are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Encodes a Unicode scalar as a UTF-32 code unit by calling the given closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-32コード単位としてのユニコードスカラーを与えられたクロージャを呼び出すことによってエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Encodes a Unicode scalar as a series of code units by calling the given closure on each code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャを各コード単位上で呼び出すことによって、ユニコードスカラーを一連のコード単位としてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enumerates all the lines in a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のすべての行を列挙します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enumerates the substrings of the specified type in the specified range of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された範囲の文字列の中の指定された型の下位文字列を列挙します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enumeration Case</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enumeration Cases</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enumerations</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enumerations with Raw Values</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>生の値を持つ列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equal</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equality implies substitutability—any two instances that compare equally can be used interchangeably in any code that depends on their values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等性は代替可能性を暗黙的に意味します—同等性を比較されるあらゆる２つのインスタンスは、それらの値に影響を受けるあらゆるコードにおいて入れ替えて使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equality is Separate From Identity</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等性は同一性と別個のものです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equality is the inverse of inequality.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同等性は、不等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equivalent to</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に等価です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equivalent to <bpt i="0" x="0">&lt;c0&gt;</bpt>self.rangeOfString(other) != nil<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に等しい <bpt i="0" x="0">&lt;c0&gt;</bpt>self.rangeOfString(other) != nil<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Equivalent to <bpt i="0" x="0">&lt;c0&gt;</bpt>{ defer { deinitialize() }; return pointee }()<ept i="0">&lt;/c0&gt;</ept>, but more efficient.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>{ defer { deinitialize() }; return pointee }()<ept i="0">&lt;/c0&gt;</ept>に等しい、しかしより手際よいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Errors are written into the inout <bpt i="0" x="0">&lt;c0&gt;</bpt>error<ept i="0">&lt;/c0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>エラーはインアウト<bpt i="0" x="0">&lt;c0&gt;</bpt>error<ept i="0">&lt;/c0&gt;</ept>引数へ書き込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Evaluate <bpt i="0" x="0">&lt;c0&gt;</bpt>f()<ept i="0">&lt;/c0&gt;</ept> and return its result, ensuring that <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is not destroyed before f returns.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>f()<ept i="0">&lt;/c0&gt;</ept>を評価してそれの結果を返します、fが返る前に<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>が破壊されないことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Evaluate <bpt i="0" x="0">&lt;c0&gt;</bpt>f(x)<ept i="0">&lt;/c0&gt;</ept> and return its result, ensuring that <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is not destroyed before f returns.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>f(x)<ept i="0">&lt;/c0&gt;</ept>を評価してそれの結果を返します、fが返る前に<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>が破壊されないことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Evaluates the given closure when this <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> instance is not <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>, passing the unwrapped value as a parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャをこの<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>インスタンスが<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>でない場合に評価します、アンラップされた値をパラメータとして渡しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Evaluation of the <bpt i="2" x="2">&lt;c2&gt;</bpt>&amp;&amp;<ept i="2">&lt;/c2&gt;</ept> operator is one of the following:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>&amp;&amp;<ept i="2">&lt;/c2&gt;</ept>演算子の評価は、次のうちの１つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Evaluation of the <bpt i="2" x="2">&lt;c2&gt;</bpt>||<ept i="2">&lt;/c2&gt;</ept> operator is one of the following:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>||<ept i="2">&lt;/c2&gt;</ept>演算子の評価は、次のうちの１つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every <bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept> instance is composed of one or more Unicode code points that are grouped together as an <bpt i="1" x="1">&lt;e1&gt;</bpt>extended grapheme cluster<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての<bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept>インスタンスは、１つの<bpt i="1" x="1">&lt;e1&gt;</bpt>拡張書記素クラスタ<ept i="1">&lt;/e1&gt;</ept>として一緒にまとめられる１つの以上のユニコードコード点から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every <bpt i="1" x="1">&lt;c1&gt;</bpt>Float<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>Double<ept i="2">&lt;/c2&gt;</ept> value is canonical, but noncanonical values of the <bpt i="3" x="3">&lt;c3&gt;</bpt>Float80<ept i="3">&lt;/c3&gt;</ept> type exist, and noncanonical values may exist for other types that conform to the <bpt i="4" x="4">&lt;c4&gt;</bpt>FloatingPoint<ept i="4">&lt;/c4&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての<bpt i="1" x="1">&lt;c1&gt;</bpt>Float<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>Double<ept i="2">&lt;/c2&gt;</ept>値は正準です、しかし<bpt i="3" x="3">&lt;c3&gt;</bpt>Float80<ept i="3">&lt;/c3&gt;</ept>型の非正準値も存在します、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>FloatingPoint<ept i="4">&lt;/c4&gt;</ept>プロトコルに準拠する他の型に対して非正準値が存在するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every array reserves a specific amount of memory to hold its contents.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての配列はある特定の量のメモリを確保することでその内容を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every dictionary is an unordered collection of key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての辞書は、キー値ペアの順番付けられないコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every distinct value of the conforming type has a corresponding unique value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>RawValue<ept i="0">&lt;/c0&gt;</ept> type, but there may be values of the <bpt i="1" x="1">&lt;c1&gt;</bpt>RawValue<ept i="1">&lt;/c1&gt;</ept> type that don’t have a corresponding value of the conforming type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型のすべての個々の値は、<bpt i="0" x="0">&lt;c0&gt;</bpt>RawValue<ept i="0">&lt;/c0&gt;</ept>型の対応する特有な値を持ちます、しかし準拠する型の値に対応しない<bpt i="1" x="1">&lt;c1&gt;</bpt>RawValue<ept i="1">&lt;/c1&gt;</ept>型の値があっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every value except NaN compares less than or equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>+infinity<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNを除くあらゆる値は、<bpt i="0" x="0">&lt;c0&gt;</bpt>+infinity<ept i="0">&lt;/c0&gt;</ept>より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Every value except for NaN and <bpt i="0" x="0">&lt;c0&gt;</bpt>+infinity<ept i="0">&lt;/c0&gt;</ept> compares less than <bpt i="1" x="1">&lt;c1&gt;</bpt>+infinity<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNと<bpt i="0" x="0">&lt;c0&gt;</bpt>+infinity<ept i="0">&lt;/c0&gt;</ept>を除くあらゆる値は、<bpt i="1" x="1">&lt;c1&gt;</bpt>+infinity<ept i="1">&lt;/c1&gt;</ept>より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example Buffer Class</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファクラスの例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Exceptional values need not take part in the strict total order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それら普通でない値は、全順序において役割を果たすには及びません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Exchange the values of <bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>の値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Expanding this set to include types that represent more than simple Boolean values is discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単純なブール値より多く表現する型を含めるためにこの集合を拡大することは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Expected Performance</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>期待される性能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Experiment with Swift standard library types and learn high-level concepts using visualizations and practical examples.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いろいろなSwift標準ライブラリ型を試したり、視覚化や実践例を使うことで高水準概念を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Explicit construction from an UnsafeMutablePointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UnsafeMutablePointerからの明示的な組み立て。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Explicitly convert to <bpt i="0" x="0">&lt;c0&gt;</bpt>IntMax<ept i="0">&lt;/c0&gt;</ept>, trapping on overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>明示的に<bpt i="0" x="0">&lt;c0&gt;</bpt>IntMax<ept i="0">&lt;/c0&gt;</ept>に変換します、オーバーフローではトラップします（-Ouncheckedビルドを除く）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Explicitly convert to <bpt i="0" x="0">&lt;c0&gt;</bpt>IntMax<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>明示的に<bpt i="0" x="0">&lt;c0&gt;</bpt>IntMax<ept i="0">&lt;/c0&gt;</ept>に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Explore the Standard Library</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリ探索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Exposing nonvalue aspects of <bpt i="2" x="2">&lt;c2&gt;</bpt>Equatable<ept i="2">&lt;/c2&gt;</ept> types other than class identity is discouraged, and any that <bpt i="3" x="3">&lt;e3&gt;</bpt>are<ept i="3">&lt;/e3&gt;</ept> exposed should be explicitly pointed out in documentation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Equatable<ept i="2">&lt;/c2&gt;</ept>型の非値の面を露出することはクラス識別子を除いて推奨されません、そして露出<bpt i="3" x="3">&lt;e3&gt;</bpt>される<ept i="3">&lt;/e3&gt;</ept>ものは何でも、明白に文書において指摘されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Extending the compared character count to 15 includes the differing characters, so a nonzero result is returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較する文字を15を数えるまで広げることは異なる文字を含みます、それで非ゼロの結果が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Failure to satisfy that assumption is a serious programming error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>了解事項を満たすことの失敗は、重大なプログラミングエラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, report the average temperature and observation counts:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最後に、平均温度と観測数を報告します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finds and returns the range in the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> of the first character from a given character set found in a given range with given options.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲の中の見つけられる措定された文字集合からの最初の文字の<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>での範囲を見つけて返します、与えられたオプションを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finds and returns the range of the first occurrence of a given string within a given range of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>, subject to given options, using the specified locale, if any.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲の<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>内で与えられた文字列の最初の出現の範囲を見つけて返します、与えられたオプションに従います、指定されたロケールを使います、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finds and returns the range of the first occurrence of a given string, taking the current locale into account.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列の最初の出現の範囲を見つけて返します、アカウントに対する現在のロケールをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, a set of observations in Celsius is parsed from strings to <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> values:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>まず、摂氏での観測の一揃いは、文字列から<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>値へ解析されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, retrieve a sequence’s iterator, and then call the iterator’s <bpt i="2" x="2">&lt;c2&gt;</bpt>next()<ept i="2">&lt;/c2&gt;</ept> method until it returns <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>まず、あるシーケンスのもつイテレータを見つけて取ってきてください、そしてそのイテレータの持つ<bpt i="2" x="2">&lt;c2&gt;</bpt>next()<ept i="2">&lt;/c2&gt;</ept>メソッドを、それが<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Floating-point types are used to represent fractional numbers, like 5.5, 100.0, or 3.14159274.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点型は、5.5、100.0、または3.14159274のような、小数を表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Floating-point types represent values that are neither finite numbers nor infinity as NaN, an abbreviation for “not a number.” Comparing a NaN with any value, including another NaN, results in <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点型は、有限数でも無限大でもない値を「not a number」の略語、NaNで表します。NaNを別のNaNを含む何らかの値と比較することは、<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Floating-point values are represented as a <bpt i="0" x="0">&lt;e0&gt;</bpt>sign<ept i="0">&lt;/e0&gt;</ept> and a <bpt i="1" x="1">&lt;e1&gt;</bpt>magnitude<ept i="1">&lt;/e1&gt;</ept>, where the magnitude is calculated using the type’s <bpt i="2" x="2">&lt;e2&gt;</bpt>radix<ept i="2">&lt;/e2&gt;</ept> and the instance’s <bpt i="3" x="3">&lt;e3&gt;</bpt>significand<ept i="3">&lt;/e3&gt;</ept> and <bpt i="4" x="4">&lt;e4&gt;</bpt>exponent<ept i="4">&lt;/e4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点値は、<bpt i="0" x="0">&lt;e0&gt;</bpt>符号<ept i="0">&lt;/e0&gt;</ept>と<bpt i="1" x="1">&lt;e1&gt;</bpt>規模<ept i="1">&lt;/e1&gt;</ept>として表されます、そこにおいて規模はその型の<bpt i="2" x="2">&lt;e2&gt;</bpt>基数<ept i="2">&lt;/e2&gt;</ept>とインスタンスの<bpt i="3" x="3">&lt;e3&gt;</bpt>仮数<ept i="3">&lt;/e3&gt;</ept>と<bpt i="4" x="4">&lt;e4&gt;</bpt>指数<ept i="4">&lt;/e4&gt;</ept>を使って計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For <bpt i="3" x="3">&lt;c3&gt;</bpt>nan<ept i="3">&lt;/c3&gt;</ept> or <bpt i="4" x="4">&lt;c4&gt;</bpt>-infinity<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>x.nextDown<ept i="5">&lt;/c5&gt;</ept> is <bpt i="6" x="6">&lt;c6&gt;</bpt>x<ept i="6">&lt;/c6&gt;</ept> itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>nan<ept i="3">&lt;/c3&gt;</ept>または<bpt i="4" x="4">&lt;c4&gt;</bpt>-infinity<ept i="4">&lt;/c4&gt;</ept>に対して、<bpt i="5" x="5">&lt;c5&gt;</bpt>x.nextDown<ept i="5">&lt;/c5&gt;</ept>は<bpt i="6" x="6">&lt;c6&gt;</bpt>x<ept i="6">&lt;/c6&gt;</ept>それ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For <bpt i="3" x="3">&lt;c3&gt;</bpt>nan<ept i="3">&lt;/c3&gt;</ept> or <bpt i="4" x="4">&lt;c4&gt;</bpt>infinity<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>x.nextUp<ept i="5">&lt;/c5&gt;</ept> is <bpt i="6" x="6">&lt;c6&gt;</bpt>x<ept i="6">&lt;/c6&gt;</ept> itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>nan<ept i="3">&lt;/c3&gt;</ept>または<bpt i="4" x="4">&lt;c4&gt;</bpt>infinity<ept i="4">&lt;/c4&gt;</ept>に対して、<bpt i="5" x="5">&lt;c5&gt;</bpt>x.nextUp<ept i="5">&lt;/c5&gt;</ept>は<bpt i="6" x="6">&lt;c6&gt;</bpt>x<ept i="6">&lt;/c6&gt;</ept>それ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a type <bpt i="1" x="1">&lt;c1&gt;</bpt>F<ept i="1">&lt;/c1&gt;</ept>, positive and negative infinity are represented as <bpt i="2" x="2">&lt;c2&gt;</bpt>F.infinity<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>-F.infinity<ept i="3">&lt;/c3&gt;</ept>, respectively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="1" x="1">&lt;c1&gt;</bpt>F<ept i="1">&lt;/c1&gt;</ept>に対して、正と負の無限大はそれぞれ<bpt i="2" x="2">&lt;c2&gt;</bpt>F.infinity<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>-F.infinity<ept i="3">&lt;/c3&gt;</ept>のように表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a value <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>, the comparison <bpt i="1" x="1">&lt;c1&gt;</bpt>x.sign == .minus<ept i="1">&lt;/c1&gt;</ept> is not necessarily the same as <bpt i="2" x="2">&lt;c2&gt;</bpt>x &lt; 0<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>に対して、比較<bpt i="1" x="1">&lt;c1&gt;</bpt>x.sign == .minus<ept i="1">&lt;/c1&gt;</ept>は必ずしも<bpt i="2" x="2">&lt;c2&gt;</bpt>x &lt; 0<ept i="2">&lt;/c2&gt;</ept>と同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a value <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> of a floating-point type <bpt i="2" x="2">&lt;c2&gt;</bpt>F<ept i="2">&lt;/c2&gt;</ept>, the magnitude can be calculated as the following, where <bpt i="3" x="3">&lt;c3&gt;</bpt>**<ept i="3">&lt;/c3&gt;</ept> is exponentiation:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点型<bpt i="2" x="2">&lt;c2&gt;</bpt>F<ept i="2">&lt;/c2&gt;</ept>の値<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>に対して、規模は次のように計算されることができます、ここで<bpt i="3" x="3">&lt;c3&gt;</bpt>**<ept i="3">&lt;/c3&gt;</ept>は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> is always zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>のインスタンスに対して、<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>は常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> is always zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>のインスタンスに対して、<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>は常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any enumeration with a string, integer, or floating-point raw type, the Swift compiler automatically adds <bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept> conformance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列、整数、または浮動小数点の生の型を持つ何らかの列挙に対して、Swiftコンパイラは自動的に<bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept>準拠を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any finite value <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextDown<ept i="1">&lt;/c1&gt;</ept> is greater than <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの有限の値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>に対して、<bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextDown<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>より大きいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any finite value <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextUp<ept i="1">&lt;/c1&gt;</ept> is greater than <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの有限値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>に対して、<bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextUp<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>より大きいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any floating-point value <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> of type <bpt i="1" x="1">&lt;c1&gt;</bpt>F<ept i="1">&lt;/c1&gt;</ept>, the result of the following is equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>, with the distinction that the result is canonicalized if <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> is in a noncanonical encoding:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの浮動小数点値型<bpt i="1" x="1">&lt;c1&gt;</bpt>F<ept i="1">&lt;/c1&gt;</ept>の<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>に対して、以下の結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>と等しいです、その違いは<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>が非正準符号化になるならば結果は正準化されることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any representable power of two, <bpt i="0" x="0">&lt;c0&gt;</bpt>significandWidth<ept i="0">&lt;/c0&gt;</ept> is zero, because <bpt i="1" x="1">&lt;c1&gt;</bpt>significand<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>1.0<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あらゆる表現可能な２の冪に対して、<bpt i="0" x="0">&lt;c0&gt;</bpt>significandWidth<ept i="0">&lt;/c0&gt;</ept>はゼロです、なぜなら<bpt i="1" x="1">&lt;c1&gt;</bpt>significand<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>1.0<ept i="2">&lt;/c2&gt;</ept>だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any value <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>x.magnitude.sign<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>.plus<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>に対して、<bpt i="1" x="1">&lt;c1&gt;</bpt>x.magnitude.sign<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>.plus<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any values <bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>a != b<ept i="2">&lt;/c2&gt;</ept> implies that <bpt i="3" x="3">&lt;c3&gt;</bpt>a == b<ept i="3">&lt;/c3&gt;</ept> is <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの<bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>a != b<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>a == b<ept i="3">&lt;/c3&gt;</ept>が<bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>であることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For any values <bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>a == b<ept i="2">&lt;/c2&gt;</ept> implies that <bpt i="3" x="3">&lt;c3&gt;</bpt>a != b<ept i="3">&lt;/c3&gt;</ept> is <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの値<bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>a == b<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>a != b<ept i="3">&lt;/c3&gt;</ept>が<bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>であることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For arrays of most <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> types, this storage is a contiguous block of memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型の配列に対して、このストレージは隣接メモリブロックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For arrays with an <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type that is a class or <bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept> protocol type, this storage can be a contiguous block of memory or an instance of <bpt i="3" x="3">&lt;c3&gt;</bpt>NSArray<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クラスや<bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept>プロトコル型である<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持つ配列に対して、このストレージは隣接メモリブロックまたは<bpt i="3" x="3">&lt;c3&gt;</bpt>NSArray<ept i="3">&lt;/c3&gt;</ept>のインスタンスであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For bridging to be possible, the <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept> type of a set must be a class, an <bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept> protocol (a protocol imported from Objective-C or marked with the <bpt i="5" x="5">&lt;c5&gt;</bpt>@objc<ept i="5">&lt;/c5&gt;</ept> attribute), or a type that bridges to a Foundation type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブリッジが可能にされるには、集合の<bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>型は、クラス、<bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept>プロトコル（Objective-Cからインポートされるまたは<bpt i="5" x="5">&lt;c5&gt;</bpt>@objc<ept i="5">&lt;/c5&gt;</ept>属性で印されるプロトコル）、またはあるFoundation型にブリッジする型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For bridging to be possible, the <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept> type of your array must be a class, an <bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept> protocol (a protocol imported from Objective-C or marked with the <bpt i="5" x="5">&lt;c5&gt;</bpt>@objc<ept i="5">&lt;/c5&gt;</ept> attribute), or a type that bridges to a Foundation type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブリッジが可能にされるには、あなたの配列の<bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>型は、あるクラス、<bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept>プロトコル（Objective-Cからインポートされるまたは<bpt i="5" x="5">&lt;c5&gt;</bpt>@objc<ept i="5">&lt;/c5&gt;</ept>属性で印されるプロトコル）、またはあるFoundation型にブリッジされる型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For bridging to be possible, the <bpt i="3" x="3">&lt;c3&gt;</bpt>Key<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>Value<ept i="4">&lt;/c4&gt;</ept> types of a dictionary must be classes, <bpt i="5" x="5">&lt;c5&gt;</bpt>@objc<ept i="5">&lt;/c5&gt;</ept> protocols, or types that bridge to Foundation types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブリッジが可能にされるには、辞書の<bpt i="3" x="3">&lt;c3&gt;</bpt>Key<ept i="3">&lt;/c3&gt;</ept>と<bpt i="4" x="4">&lt;c4&gt;</bpt>Value<ept i="4">&lt;/c4&gt;</ept>型がクラス、<bpt i="5" x="5">&lt;c5&gt;</bpt>@objc<ept i="5">&lt;/c5&gt;</ept>プロトコル、またはFoundation型にブリッジする型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For clearer, more concise code, the example above could use the array’s <bpt i="1" x="1">&lt;c1&gt;</bpt>contains(_:)<ept i="1">&lt;/c1&gt;</ept> method, which every sequence inherits from <bpt i="2" x="2">&lt;c2&gt;</bpt>Sequence<ept i="2">&lt;/c2&gt;</ept>, instead of iterating manually:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より明確な、もっと簡潔なコードのために、上のコードは、すべてのシーケンスが<bpt i="2" x="2">&lt;c2&gt;</bpt>Sequence<ept i="2">&lt;/c2&gt;</ept>から継承する、配列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>contains(_:)<ept i="1">&lt;/c1&gt;</ept>メソッドを使うことが、労力を要する反復の代わりに可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For collections that don’t conform to <bpt i="2" x="2">&lt;c2&gt;</bpt>RandomAccessCollection<ept i="2">&lt;/c2&gt;</ept>, accessing the <bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept> property iterates through the elements of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>RandomAccessCollection<ept i="2">&lt;/c2&gt;</ept>に準拠しないコレクションに対して、<bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept>プロパティにアクセスすることはコレクションの要素を始めから終わりまで反復します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, <bpt i="1" x="1">&lt;c1&gt;</bpt>Range(0...Int.max)<ept i="1">&lt;/c1&gt;</ept> violates this precondition because an equivalent <bpt i="2" x="2">&lt;c2&gt;</bpt>Range&lt;Int&gt;<ept i="2">&lt;/c2&gt;</ept> would need an <bpt i="3" x="3">&lt;c3&gt;</bpt>upperBound<ept i="3">&lt;/c3&gt;</ept> equal to <bpt i="4" x="4">&lt;c4&gt;</bpt>Int.max + 1<ept i="4">&lt;/c4&gt;</ept>, which is unrepresentable as an <bpt i="5" x="5">&lt;c5&gt;</bpt>Int<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="1" x="1">&lt;c1&gt;</bpt>Range(0...Int.max)<ept i="1">&lt;/c1&gt;</ept>は、この前提条件に違反します、なぜなら<bpt i="2" x="2">&lt;c2&gt;</bpt>Range&lt;Int&gt;<ept i="2">&lt;/c2&gt;</ept>の等価物は、<bpt i="4" x="4">&lt;c4&gt;</bpt>Int.max + 1<ept i="4">&lt;/c4&gt;</ept>と等しい<bpt i="3" x="3">&lt;c3&gt;</bpt>upperBound<ept i="3">&lt;/c3&gt;</ept>を必要とするからです、それは<bpt i="5" x="5">&lt;c5&gt;</bpt>Int<ept i="5">&lt;/c5&gt;</ept>として表現不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop can iterate over the elements of any value whose type conforms to the <bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Sequence<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept> protocol, and any type that conforms to the <bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>ExpressibleByStringLiteral<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept> protocol can have values assigned from string literals.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループは、その型が<bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Sequence<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>プロトコルに準拠する何らかの値であるいくらかの要素に繰り返し処理して行くことができます、そして<bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>ExpressibleByStringLiteral<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept>プロトコルに準拠するあらゆる型は、文字列リテラルからの代入値を持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a <bpt i="2" x="2">&lt;c2&gt;</bpt>CountableRange<it pos="begin" x="8">&lt;Int8&gt;</it><ept i="2">&lt;/c2&gt;</ept> instance can use <bpt i="3" x="3">&lt;c3&gt;</bpt>Int8.max<ept i="3">&lt;/c3&gt;</ept> as its upper bound, but it can’t represent a range that includes <bpt i="4" x="4">&lt;c4&gt;</bpt>Int8.max<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="2" x="2">&lt;c2&gt;</bpt>CountableRange<it pos="begin" x="8">&lt;Int8&gt;</it><ept i="2">&lt;/c2&gt;</ept>インスタンスは<bpt i="3" x="3">&lt;c3&gt;</bpt>Int8.max<ept i="3">&lt;/c3&gt;</ept>をそれの上側の境界として使うことができます、しかしそれは<bpt i="4" x="4">&lt;c4&gt;</bpt>Int8.max<ept i="4">&lt;/c4&gt;</ept>を含む範囲を表すことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a country’s Unicode flag character is made up of two regional indicator code points that correspond to that country’s ISO 3166-1 alpha-2 code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある国のユニコードの国旗文字は、その国のISO 3166-1 alpha-2コードに対応する２つの地域指定コード点から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a lowercase “e” with an acute accent above it (<bpt i="1" x="1">&lt;c1&gt;</bpt>"é"<ept i="1">&lt;/c1&gt;</ept>) uses 2 bytes for its UTF-8 representation: <bpt i="2" x="2">&lt;c2&gt;</bpt>0b11000011<ept i="2">&lt;/c2&gt;</ept> (195) and <bpt i="3" x="3">&lt;c3&gt;</bpt>0b10101001<ept i="3">&lt;/c3&gt;</ept> (169).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、それの上に鋭アクセントを持つ小文字の“e”（<bpt i="1" x="1">&lt;c1&gt;</bpt>"é"<ept i="1">&lt;/c1&gt;</ept>）は、それのUTF-8表現のために２バイト使います：<bpt i="2" x="2">&lt;c2&gt;</bpt>0b11000011<ept i="2">&lt;/c2&gt;</ept>（195）と<bpt i="3" x="3">&lt;c3&gt;</bpt>0b10101001<ept i="3">&lt;/c3&gt;</ept>（169）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a random-access collection, which can measure the distance between two indices in O(1) time, will be able to calculate its <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> property in O(1) time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ランダムアクセスのコレクションは、２つのインデックス間の隔たりをO(1)時間で測ることが可能で、それの<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>プロパティをO(1)時間で計算することができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a random-access collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> property is calculated in O(1) instead of requiring iteration of an entire collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、無作為アクセスコレクションのもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>プロパティは、コレクション全体の反復を要求したりせずにO(1)で計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, an ASCII character like the capital letter <bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept> is represented by a single element in each of its four views.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、大文字の<bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept>のようなあるひとつのASCII文字は、それの４つのビューのそれぞれにおいて単一の要素で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みは<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte returns <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、UTF-8の継続バイトの位置を変換する試みは<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, because UTF-8 and UTF-16 represent high Unicode code points differently, an attempt to convert the position of a UTF-8 continuation byte fails.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、UTF-8とUTF-16は高位ユニコードコード点を異なって表すので、UTF-8の継続バイトの位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, because UTF-8 and UTF-16 represent high Unicode code points differently, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair fails.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、UTF-8とUTF-16は高位ユニコードコード点を異なって表すので、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, consider a custom <bpt i="0" x="0">&lt;c0&gt;</bpt>Countdown<ept i="0">&lt;/c0&gt;</ept> sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あるあつらえの<bpt i="0" x="0">&lt;c0&gt;</bpt>Countdown<ept i="0">&lt;/c0&gt;</ept>シーケンスを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, consider a custom type called <bpt i="0" x="0">&lt;c0&gt;</bpt>ShippingOptions<ept i="0">&lt;/c0&gt;</ept> that is an option set of the possible ways to ship a customer’s purchase.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="0" x="0">&lt;c0&gt;</bpt>ShippingOptions<ept i="0">&lt;/c0&gt;</ept>と呼ばれるあつらえの型を考えてください、それは顧客の購入品を出荷する可能な方法のオプションセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, given an eager <bpt i="1" x="1">&lt;c1&gt;</bpt>scan<ept i="1">&lt;/c1&gt;</ept> method defined as follows</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下のように定義される即時<bpt i="1" x="1">&lt;c1&gt;</bpt>scan<ept i="1">&lt;/c1&gt;</ept>メソッドを与えられて</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if a variable has the type <bpt i="3" x="3">&lt;c3&gt;</bpt>Int?<ept i="3">&lt;/c3&gt;</ept>, that’s just another way of writing <bpt i="4" x="4">&lt;c4&gt;</bpt>Optional&lt;Int&gt;<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある変数が型<bpt i="3" x="3">&lt;c3&gt;</bpt>Int?<ept i="3">&lt;/c3&gt;</ept>を持つとすれば、それは<bpt i="4" x="4">&lt;c4&gt;</bpt>Optional&lt;Int&gt;<ept i="4">&lt;/c4&gt;</ept>を記述することのありきたりのやり方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if the two <bpt i="0" x="0">&lt;c0&gt;</bpt>year<ept i="0">&lt;/c0&gt;</ept> properties are equal but the two <bpt i="1" x="1">&lt;c1&gt;</bpt>month<ept i="1">&lt;/c1&gt;</ept> properties are not, the date with the lesser value for <bpt i="2" x="2">&lt;c2&gt;</bpt>month<ept i="2">&lt;/c2&gt;</ept> is the lesser of the two dates.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、２つの<bpt i="0" x="0">&lt;c0&gt;</bpt>year<ept i="0">&lt;/c0&gt;</ept>プロパティは等しいけれども２つの<bpt i="1" x="1">&lt;c1&gt;</bpt>month<ept i="1">&lt;/c1&gt;</ept>プロパティは異なるならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>month<ept i="2">&lt;/c2&gt;</ept>に対してより少ない値を持つ日付は２つの日付のうちより少ないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if you update the last element of the <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array from <bpt i="1" x="1">&lt;c1&gt;</bpt>0<ept i="1">&lt;/c1&gt;</ept> to <bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>, the <bpt i="3" x="3">&lt;c3&gt;</bpt>secondHalf<ept i="3">&lt;/c3&gt;</ept> slice is unchanged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列の最後の要素を<bpt i="1" x="1">&lt;c1&gt;</bpt>0<ept i="1">&lt;/c1&gt;</ept>から<bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>に更新する場合、<bpt i="3" x="3">&lt;c3&gt;</bpt>secondHalf<ept i="3">&lt;/c3&gt;</ept>スライスは変化していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if you want to print only the first word in a string, search for the index of the first space and then create a subsequence up to that position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたがある文字列の最初の単語だけを出力するのを望むならば、最初の半角空白のインデックスを捜して、それからその位置までの下位シーケンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if your array’s elements conform to <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>, you can call the <bpt i="2" x="2">&lt;c2&gt;</bpt>sort()<ept i="2">&lt;/c2&gt;</ept> method without using arguments to sort the elements of your array in ascending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたの配列のもつ要素が<bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>に準拠するならば、あなたは<bpt i="2" x="2">&lt;c2&gt;</bpt>sort()<ept i="2">&lt;/c2&gt;</ept>メソッドを引数を使うことなく呼び出して、あなたの配列の要素を昇順にソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, it would be reasonable to implement alternative operations in which operating on a signaling NaN triggers a runtime error or results in a diagnostic for debugging purposes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、それらにおいてはシグナルNaNに関する演算が実行時エラーを引き起こすまたはデバッグ目的の診断という結果になるといった、代替の演算を実装するのが妥当であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, like every Unicode scalar, the musical fermata symbol (“𝄐”) can be represented in UTF-32 as a single code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、すべてのユニコードスカラーのように、音楽のフェルマータ符号（“𝄐”）はUTF-32において単一のコード単位として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, passing a closed range with an upper bound of <bpt i="1" x="1">&lt;c1&gt;</bpt>Int.max<ept i="1">&lt;/c1&gt;</ept> triggers a runtime error, because the resulting half-open range would require an upper bound of <bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max + 1<ept i="2">&lt;/c2&gt;</ept>, which is not representable as an <bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、完結範囲を<bpt i="1" x="1">&lt;c1&gt;</bpt>Int.max<ept i="1">&lt;/c1&gt;</ept>の下方境界として渡すことは実行時エラーの引き金となります、結果の半開範囲は<bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max + 1<ept i="2">&lt;/c2&gt;</ept>の上方境界を要求するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, passing an empty range as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> triggers a runtime error, because an empty range cannot be represented by a <bpt i="2" x="2">&lt;c2&gt;</bpt>CountableClosedRange<ept i="2">&lt;/c2&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、空の範囲を<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>として渡すことは実行時エラーの引き金となります、空の範囲は<bpt i="2" x="2">&lt;c2&gt;</bpt>CountableClosedRange<ept i="2">&lt;/c2&gt;</ept>インスタンスによって表現されることができないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, suppose you have an array holding the number of absences from each class during a session.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたがある学期（２学期制）の各クラスの欠席者数が入った配列を持つと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>Counter<ept i="0">&lt;/c0&gt;</ept> enumeration defined here has an <bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept> raw value type and gives the first case a raw value of <bpt i="2" x="2">&lt;c2&gt;</bpt>1<ept i="2">&lt;/c2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ここで定義される<bpt i="0" x="0">&lt;c0&gt;</bpt>Counter<ept i="0">&lt;/c0&gt;</ept>列挙は、<bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept>の生の値型を持ち、そして最初のケース節に生の値の<bpt i="2" x="2">&lt;c2&gt;</bpt>1<ept i="2">&lt;/c2&gt;</ept>を与えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> type has an <bpt i="1" x="1">&lt;c1&gt;</bpt>exponentBitCount<ept i="1">&lt;/c1&gt;</ept> of 8, which gives an exponent bias of <bpt i="2" x="2">&lt;c2&gt;</bpt>127<ept i="2">&lt;/c2&gt;</ept> by the calculation above.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>型は、８の<bpt i="1" x="1">&lt;c1&gt;</bpt>exponentBitCount<ept i="1">&lt;/c1&gt;</ept>を持ちます、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>127<ept i="2">&lt;/c2&gt;</ept>の指数バイアスを上記の計算によって与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>contains()<ept i="0">&lt;/c0&gt;</ept> method on <bpt i="1" x="1">&lt;c1&gt;</bpt>allowedMoves<ept i="1">&lt;/c1&gt;</ept> performs a bitwise AND operation to check whether the option set contains an element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="0" x="0">&lt;c0&gt;</bpt>contains()<ept i="0">&lt;/c0&gt;</ept>メソドは<bpt i="1" x="1">&lt;c1&gt;</bpt>allowedMoves<ept i="1">&lt;/c1&gt;</ept>上で、ビット単位AND演算を実行して、オプションセットがある要素を含むかどうか調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>keys<ept i="0">&lt;/c0&gt;</ept> property of a dictionary isn’t an array with its own storage, it’s a collection that maps its elements from the dictionary only when they’re accessed, saving the time and space needed to allocate an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、辞書の<bpt i="0" x="0">&lt;c0&gt;</bpt>keys<ept i="0">&lt;/c0&gt;</ept>プロパティはそれ自身のストレージを持つことになる配列ではありません、それはコレクションです、それはそれの要素らをそれらがアクセスされた時に限り辞書からマップします、そして配列を割り当てるのに必要とされる時間と空間を節約しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>sum(_:)<ept i="0">&lt;/c0&gt;</ept> function shown here takes an <bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept> array as a parameter:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ここで示す<bpt i="0" x="0">&lt;c0&gt;</bpt>sum(_:)<ept i="0">&lt;/c0&gt;</ept>関数は、<bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept>リテラルをパラメータとしてとります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="1" x="1">&lt;c1&gt;</bpt>digits()<ept i="1">&lt;/c1&gt;</ept> function in the following example creates an iterator over a collection that lazily maps the elements of a <bpt i="2" x="2">&lt;c2&gt;</bpt>CountableRange&lt;Int&gt;<ept i="2">&lt;/c2&gt;</ept> instance to strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下の例の<bpt i="1" x="1">&lt;c1&gt;</bpt>digits()<ept i="1">&lt;/c1&gt;</ept>関数は、あるコレクションを覆うイテレータを作成します、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>CountableRange&lt;Int&gt;<ept i="2">&lt;/c2&gt;</ept>インスタンスの要素を文字列へと遅延にマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="1" x="1">&lt;c1&gt;</bpt>log(name:value:)<ept i="1">&lt;/c1&gt;</ept> function shown here has an unconstrained generic <bpt i="2" x="2">&lt;c2&gt;</bpt>value<ept i="2">&lt;/c2&gt;</ept> parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ここで示す<bpt i="1" x="1">&lt;c1&gt;</bpt>log(name:value:)<ept i="1">&lt;/c1&gt;</ept>関数は、制約のない総称体の<bpt i="2" x="2">&lt;c2&gt;</bpt>value<ept i="2">&lt;/c2&gt;</ept>パラメータを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="3" x="3">&lt;c3&gt;</bpt>removeSubrange<ept i="3">&lt;/c3&gt;</ept> method is implemented by calling <bpt i="4" x="4">&lt;c4&gt;</bpt>replaceRange<ept i="4">&lt;/c4&gt;</ept> with an empty collection for the <bpt i="5" x="5">&lt;c5&gt;</bpt>newElements<ept i="5">&lt;/c5&gt;</ept> parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、<bpt i="3" x="3">&lt;c3&gt;</bpt>removeSubrange<ept i="3">&lt;/c3&gt;</ept> メソッドは、<bpt i="4" x="4">&lt;c4&gt;</bpt>replaceRange<ept i="4">&lt;/c4&gt;</ept>を<bpt i="5" x="5">&lt;c5&gt;</bpt>newElements<ept i="5">&lt;/c5&gt;</ept>パラメータに対する空のコレクションとともに呼び出すことによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="5" x="5">&lt;c5&gt;</bpt>Direction<ept i="5">&lt;/c5&gt;</ept> type defines an option set for the four directions you can move in a game.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、この<bpt i="5" x="5">&lt;c5&gt;</bpt>Direction<ept i="5">&lt;/c5&gt;</ept>型はオプションセットをあなたがあるゲームの中で移動できる４つの方向に対して定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the code sample below creates a dictionary with string keys and values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、下のコード見本はある辞書を文字列のキーと値で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following code sample creates a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instance with a value of <bpt i="1" x="1">&lt;c1&gt;</bpt>7<ept i="1">&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下のコード見本は<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスを<bpt i="1" x="1">&lt;c1&gt;</bpt>7<ept i="1">&lt;/c1&gt;</ept>の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following code sample creates a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instance with a value of <bpt i="1" x="1">&lt;c1&gt;</bpt>밥<ept i="1">&lt;/c1&gt;</ept>, the Korean word for rice:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下のコード見本は<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスをコリアン語での米、<bpt i="1" x="1">&lt;c1&gt;</bpt>밥<ept i="1">&lt;/c1&gt;</ept>の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following code sample creates a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instance with a value of an emoji character:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下のコード見本は<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスをあるemoji文字の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following code sample does not compile, because it attempts to use the integer <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> in a logical context:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下のコードサンプルはコンパイルしません、なぜならそれが整数<bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>を論理的文脈において使おうとするからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following code sample finds the index of the first space in the string’s character view and then converts that to the same position in the UTF-16 view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、最初の空白のインデックスを文字列のもつ文字ビューの中で見つけて、それからそれをUTF-16ビューでの同じ位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following code sample finds the index of the first space in the string’s character view and then converts that to the same position in the UTF-8 view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、以下の例は最初の空白のインデックスを文字列のもつ文字ビューの中で見つけて、それからそれをUTF-8ビューでの同じ位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following conversions result in <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、次の変換は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>という結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the integer value 1050 can be represented in its entirety as the string “1050”.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、整数値1050はそっくりそのまま文字列「1050」として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (<bpt i="0" x="0">&lt;c0&gt;</bpt>\u{1D110}<ept i="0">&lt;/c0&gt;</ept>) but requires four code units for its UTF-8 representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（<bpt i="0" x="0">&lt;c0&gt;</bpt>\u{1D110}<ept i="0">&lt;/c0&gt;</ept>）ですが４つのコード単位をそれのUTF-8表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (<bpt i="0" x="0">&lt;c0&gt;</bpt>\u{1D110}<ept i="0">&lt;/c0&gt;</ept>) but requires two code units for its UTF-16 representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（<bpt i="0" x="0">&lt;c0&gt;</bpt>\u{1D110}<ept i="0">&lt;/c0&gt;</ept>）ですが２つのコード単位をそれのUTF-16表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the result of the failable <bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept> initializer is unconditionally unwrapped in the example below.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、この失敗できる<bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept>イニシャライザの結果は、下の例において無条件にアンラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the special “not a number” value for floating-point types (<bpt i="1" x="1">&lt;c1&gt;</bpt>FloatingPoint.nan<ept i="1">&lt;/c1&gt;</ept>) compares as neither less than, greater than, nor equal to any normal floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、浮動小数点型のための特別な「数でない」値（<bpt i="1" x="1">&lt;c1&gt;</bpt>FloatingPoint.nan<ept i="1">&lt;/c1&gt;</ept>）は、何らかの通常の浮動小数点値とより少ないでも、より大きいでも、等しいでもないような比較をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, this custom <bpt i="0" x="0">&lt;c0&gt;</bpt>Point<ept i="0">&lt;/c0&gt;</ept> struct uses the default representation supplied by the standard library.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、このあつらえの<bpt i="0" x="0">&lt;c0&gt;</bpt>Point<ept i="0">&lt;/c0&gt;</ept> structは、標準ライブラリによって提供される省略時の表現を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, this custom <bpt i="0" x="0">&lt;c0&gt;</bpt>Point<ept i="0">&lt;/c0&gt;</ept> struct uses the default representation supplied by the standard library:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、このあつらえの<bpt i="0" x="0">&lt;c0&gt;</bpt>Point<ept i="0">&lt;/c0&gt;</ept> structは、標準ライブラリによって提供される省略時の表現を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to check whether an array contains a particular value, you can pass the value itself to the <bpt i="1" x="1">&lt;c1&gt;</bpt>contains(_:)<ept i="1">&lt;/c1&gt;</ept> method when the array’s element conforms to <bpt i="2" x="2">&lt;c2&gt;</bpt>Equatable<ept i="2">&lt;/c2&gt;</ept> instead of providing a closure that determines equivalence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある配列がある特定の値を含むかどうか調べるには、あなたはその値自体を<bpt i="1" x="1">&lt;c1&gt;</bpt>contains(_:)<ept i="1">&lt;/c1&gt;</ept>メソッドに渡すことが、その配列の要素が<bpt i="2" x="2">&lt;c2&gt;</bpt>Equatable<ept i="2">&lt;/c2&gt;</ept>に準拠する場合には、同等を判定するクロージャを提供する代わりに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to display the last 20 children of a mirror if they can be accessed efficiently, you might write:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あるミラーの最後の20のchildrenを、もしそれらが効率的にアクセス可能なら、表示するには、あなたは以下を書くことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to find the key for a particular value in a dictionary, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>index(where:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある特定の値に対するキーを辞書の中で捜すには、<bpt i="0" x="0">&lt;c0&gt;</bpt>index(where:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to get the reversed version of a string, reverse its characters and initialize a new <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> instance from the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある文字列の逆版を得るには、それの文字を逆にして、新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>インスタンスをその結果から初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to get the reversed version of an array, initialize a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> instance from the result of this <bpt i="1" x="1">&lt;c1&gt;</bpt>reversed()<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある配列の逆順版を手に入れるには、新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>インスタンスを、この<bpt i="1" x="1">&lt;c1&gt;</bpt>reversed()<ept i="1">&lt;/c1&gt;</ept>メソッドの結果から初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to retrieve the first word of a longer string, you can search the <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> view for a space and then create a new string from a prefix of the <bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept> view up to that point.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>ビューの空白を捜して、それから新しい文字列を<bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept>ビューの前の部分からその地点までから作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, use this initializer to create a string with ten <bpt i="0" x="0">&lt;c0&gt;</bpt>"00"<ept i="0">&lt;/c0&gt;</ept> strings in a row.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、このイニシャライザを使うことで、10個の<bpt i="0" x="0">&lt;c0&gt;</bpt>"00"<ept i="0">&lt;/c0&gt;</ept>文字列を１行に持つ文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can add elements to an array of strings by calling any of the inserting or appending operations that the <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept> protocol defines.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはいくつかの要素をある配列に加えることが、<bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルが定義する何らかの挿入または追加を行う演算を呼び出すことによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can also access the first character of <bpt i="1" x="1">&lt;c1&gt;</bpt>text<ept i="1">&lt;/c1&gt;</ept> using the <bpt i="2" x="2">&lt;c2&gt;</bpt>first<ept i="2">&lt;/c2&gt;</ept> property, which has the value of the first element of the collection, or <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept> if the collection is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはまた<bpt i="1" x="1">&lt;c1&gt;</bpt>text<ept i="1">&lt;/c1&gt;</ept>の最初の文字にアクセスすることが<bpt i="2" x="2">&lt;c2&gt;</bpt>first<ept i="2">&lt;/c2&gt;</ept>プロパティを使って行えます、それはコレクションの最初の要素の値、またはコレクションが空ならば<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can concatenate the elements of a <bpt i="1" x="1">&lt;c1&gt;</bpt>Range&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept> instance and an integer array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはある<bpt i="1" x="1">&lt;c1&gt;</bpt>Range&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept>インスタンスとある整数配列とに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can concatenate the elements of an integer array and a <bpt i="1" x="1">&lt;c1&gt;</bpt>Range&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはある整数配列とある<bpt i="1" x="1">&lt;c1&gt;</bpt>Range&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept>インスタンスとに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can concatenate the elements of two integer arrays.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたは２つの整数配列に属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can efficiently test a set for membership of an element or check its intersection with another set:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはある要素の帰属について能率的にテストすること、またはそれの別の集合との交差を調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can replace an element of an array by using its subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたは配列の中のある要素をそれの添え字を使うことによって置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can sort <bpt i="0" x="0">&lt;e0&gt;</bpt>part<ept i="0">&lt;/e0&gt;</ept> of a mutable collection by calling the mutable <bpt i="1" x="1">&lt;c1&gt;</bpt>sort()<ept i="1">&lt;/c1&gt;</ept> method on a subscripted subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはある可変コレクションの<bpt i="0" x="0">&lt;e0&gt;</bpt>一部分<ept i="0">&lt;/e0&gt;</ept>をソートすることが可変<bpt i="1" x="1">&lt;c1&gt;</bpt>sort()<ept i="1">&lt;/c1&gt;</ept>メソッドを添え字で指定した下位シーケンス上で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you could create an <bpt i="0" x="0">&lt;c0&gt;</bpt>IntPairs<ept i="0">&lt;/c0&gt;</ept> structure that holds a list of two-integer tuples and use an initializer that accepts a <bpt i="1" x="1">&lt;c1&gt;</bpt>DictionaryLiteral<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>IntPairs<ept i="0">&lt;/c0&gt;</ept>構造体を作成することができます、それは２整数のタプルのリストを保持して、<bpt i="1" x="1">&lt;c1&gt;</bpt>DictionaryLiteral<ept i="1">&lt;/c1&gt;</ept>インスタンスを受け入れるイニシャライザを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you create an empty <bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept> instance with either this initializer or with an empty array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたは空の<bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept>インスタンスを、このイニシャライザでまたは空の配列リテラルでのどちらかで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you might typically use a <bpt i="2" x="2">&lt;c2&gt;</bpt>for<ept i="2">&lt;/c2&gt;</ept>-<bpt i="3" x="3">&lt;c3&gt;</bpt>in<ept i="3">&lt;/c3&gt;</ept> loop to print each of the elements in an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたは概して<bpt i="2" x="2">&lt;c2&gt;</bpt>for<ept i="2">&lt;/c2&gt;</ept>-<bpt i="3" x="3">&lt;c3&gt;</bpt>in<ept i="3">&lt;/c3&gt;</ept>ループを使って、ある配列の中の各要素を出力するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you might want to create an array with the integers from 1 through 7.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたは配列を１から７までの整数で作成したいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For extensible floating-point types, <bpt i="0" x="0">&lt;c0&gt;</bpt>significandBitCount<ept i="0">&lt;/c0&gt;</ept> should be the maximum allowed significand width (without counting any leading integral bit of the significand).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>拡張可能な浮動小数点型に対して、<bpt i="0" x="0">&lt;c0&gt;</bpt>significandBitCount<ept i="0">&lt;/c0&gt;</ept>は許される最大仮数幅であるはずです（全く仮数の先頭整数ビットを数えることなく）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For fixed-width floating-point types, this is the actual number of fractional significand bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>固定長浮動小数点型に対して、これは少数部仮数ビットの実際の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For instances of <bpt i="4" x="4">&lt;c4&gt;</bpt>NSArray<ept i="4">&lt;/c4&gt;</ept> that are already immutable, <bpt i="5" x="5">&lt;c5&gt;</bpt>copy(with:)<ept i="5">&lt;/c5&gt;</ept> usually returns the same array in O(1) time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>元から不変である<bpt i="4" x="4">&lt;c4&gt;</bpt>NSArray<ept i="4">&lt;/c4&gt;</ept>のインスタンスに対しては、<bpt i="5" x="5">&lt;c5&gt;</bpt>copy(with:)<ept i="5">&lt;/c5&gt;</ept>は大抵は同じ配列をO(1)時間で返します；そうでなければ、コピーすることの性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For instances of <bpt i="4" x="4">&lt;c4&gt;</bpt>NSDictionary<ept i="4">&lt;/c4&gt;</ept> that are already immutable, <bpt i="5" x="5">&lt;c5&gt;</bpt>copy(with:)<ept i="5">&lt;/c5&gt;</ept> usually returns the same dictionary in O(1) time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すでに可変の<bpt i="4" x="4">&lt;c4&gt;</bpt>NSDictionary<ept i="4">&lt;/c4&gt;</ept>のインスタンスに対しては、<bpt i="5" x="5">&lt;c5&gt;</bpt>copy(with:)<ept i="5">&lt;/c5&gt;</ept>は通常同じインスタンスをO(1)時間で返します；そうでなければ、このコピー性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For instances of <bpt i="4" x="4">&lt;c4&gt;</bpt>NSSet<ept i="4">&lt;/c4&gt;</ept> that are already immutable, <bpt i="5" x="5">&lt;c5&gt;</bpt>copy(with:)<ept i="5">&lt;/c5&gt;</ept> returns the same set in constant time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>元から不変である<bpt i="4" x="4">&lt;c4&gt;</bpt>NSSet<ept i="4">&lt;/c4&gt;</ept>のインスタンスに対しては、<bpt i="5" x="5">&lt;c5&gt;</bpt>copy(with:)<ept i="5">&lt;/c5&gt;</ept>は同じ集合を定数時間で返します；そうでなければ、コピーすることの性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about operation declarations, see <bpt i="2" x="2">&lt;a2&gt;</bpt>Operator Declaration<ept i="2">&lt;/a2&gt;</ept> in <bpt i="3" x="3">&lt;a3&gt;</bpt>The Swift Programming Language (Swift 3)<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算子宣言についての更なる情報として<bpt i="2" x="2">&lt;a2&gt;</bpt>演算子宣言<ept i="2">&lt;/a2&gt;</ept>を<bpt i="3" x="3">&lt;a3&gt;</bpt>Swiftプログラミング言語（Swift 3）<ept i="3">&lt;/a3&gt;</ept>で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about the Unicode terms used in this discussion, see the Unicode.org glossary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この解説において使われるユニコード用語についてのさらなる情報は、Unicode.org用語集を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about the available rounding rules, see the <bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPointRoundingRule<ept i="0">&lt;/c0&gt;</ept> enumeration.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>利用可能な丸め規則についてのさらなる情報として、<bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPointRoundingRule<ept i="0">&lt;/c0&gt;</ept>列挙を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about using arrays, see <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>ArraySlice<ept i="1">&lt;/c1&gt;</ept>, with which <bpt i="2" x="2">&lt;c2&gt;</bpt>ContiguousArray<ept i="2">&lt;/c2&gt;</ept> shares most properties and methods.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の使用についてのさらなる情報は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>ArraySlice<ept i="1">&lt;/c1&gt;</ept>を見てください、それらと<bpt i="2" x="2">&lt;c2&gt;</bpt>ContiguousArray<ept i="2">&lt;/c2&gt;</ept>はほとんどのプロパティとメソッドを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about using arrays, see <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>, with which <bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept> shares most properties and methods.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の使用についてのさらなる情報として、<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>を見てください、それらと<bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept>はほとんどのプロパティとメソッドを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For most numbers <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>, this is the difference between <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept> and the next greater (in magnitude) representable number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの数<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>に対して、これは<bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>と次の（規模における）より大きい表現可能な数との間の差異です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For most purposes, the <bpt i="0" x="0">&lt;c0&gt;</bpt>ManagedBuffer<ept i="0">&lt;/c0&gt;</ept> class works fine for this purpose, and can simply be used on its own.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの用途に対して、<bpt i="0" x="0">&lt;c0&gt;</bpt>ManagedBuffer<ept i="0">&lt;/c0&gt;</ept>クラスはこの目的のためにすぐれて機能します、そして簡単に単独で使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For operations that require adding or removing elements, see the <bpt i="1" x="1">&lt;c1&gt;</bpt>RangeReplaceableCollection<ept i="1">&lt;/c1&gt;</ept> protocol instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素の追加や削除を要求する演算に対しては、<bpt i="1" x="1">&lt;c1&gt;</bpt>RangeReplaceableCollection<ept i="1">&lt;/c1&gt;</ept>プロトコルを代わりに見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For ordinary sets, an element equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>member<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>member<ept i="1">&lt;/c1&gt;</ept> is contained in the set; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>普通の集合に対して、<bpt i="1" x="1">&lt;c1&gt;</bpt>member<ept i="1">&lt;/c1&gt;</ept>が集合に含まれているならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>member<ept i="0">&lt;/c0&gt;</ept>に等しい要素；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For ordinary sets, an element equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept> if the set already contained such a member; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>普通の集合に対して、集合がすでにそのようなメンバを含んでいるならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept>に等しい要素；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For other collections the counters may be out of range or of the wrong type to use as an index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>他のコレクションに対してこれらのカウンタは、インデックスとして使うのには範囲外または間違った型になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For other values of <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>x.significand<ept i="2">&lt;/c2&gt;</ept> is defined as follows:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別の値<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>x.significand<ept i="2">&lt;/c2&gt;</ept>は次のように定義されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For performance reasons, the newly allocated storage may be larger than the requested capacity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>性能上の理由から、新しく割り当てられたストレージは要請された容量より大きいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For sets where the set type and element type are the same, like <bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept> types, this method returns any intersection between the set and <bpt i="1" x="1">&lt;c1&gt;</bpt>[member]<ept i="1">&lt;/c1&gt;</ept>, or <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept> if the intersection is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept>型など、集合型と要素型が同じであるところの集合に対して、このメソッドは集合と<bpt i="1" x="1">&lt;c1&gt;</bpt>[member]<ept i="1">&lt;/c1&gt;</ept>の間の何らかの交叉、または交叉が空ならば<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For sets where the set type and element type are the same, like <bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept> types, this method returns any intersection between the set and <bpt i="1" x="1">&lt;c1&gt;</bpt>[newMember]<ept i="1">&lt;/c1&gt;</ept>, or <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept> if the intersection is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept>型など、集合型と要素型が同じであるところの集合に対して、このメソッドは集合と<bpt i="1" x="1">&lt;c1&gt;</bpt>[newMember]<ept i="1">&lt;/c1&gt;</ept>の間の何らかの交叉、または交叉が空ならば<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば整数および他の構造体のような単純な型にとって、これは、あなたがある配列の中のある値を変更する場合、その要素の値はその配列の何らかのコピーにおいては変化しないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the <bpt i="3" x="3">&lt;c3&gt;</bpt>ShippingOptions<ept i="3">&lt;/c3&gt;</ept> declaration, see the <bpt i="4" x="4">&lt;c4&gt;</bpt>OptionSet<ept i="4">&lt;/c4&gt;</ept> protocol discussion.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>ShippingOptions<ept i="3">&lt;/c3&gt;</ept>宣言については、<bpt i="4" x="4">&lt;c4&gt;</bpt>OptionSet<ept i="4">&lt;/c4&gt;</ept>プロトコル解説を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the inherited methods to work properly, conforming types must meet the following axioms.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>継承されたメソッドを適切に働かせるためには、準拠する型は以下の原則に応じる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this reason, imported Objective-C types frequently use <bpt i="2" x="2">&lt;c2&gt;</bpt>AnyObject<ept i="2">&lt;/c2&gt;</ept> as the type for properties, method parameters, and return values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この理由から、インポートされたObjective-C型はしばしば<bpt i="2" x="2">&lt;c2&gt;</bpt>AnyObject<ept i="2">&lt;/c2&gt;</ept>をプロパティ、メソッドパラメータ、そして戻り値の型として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this reason, the first operation that uses the contents of the dictionary may take O(<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この理由のために、辞書の内容を使う最初の演算はO(<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>)をとるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two finite values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, the remainder <bpt i="2" x="2">&lt;c2&gt;</bpt>r<ept i="2">&lt;/c2&gt;</ept> of dividing <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> by <bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept> satisfies <bpt i="5" x="5">&lt;c5&gt;</bpt>x == y * q + r<ept i="5">&lt;/c5&gt;</ept>, where <bpt i="6" x="6">&lt;c6&gt;</bpt>q<ept i="6">&lt;/c6&gt;</ept> is the integer nearest to <bpt i="7" x="7">&lt;c7&gt;</bpt>x / y<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの有限値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>を<bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept>で割った余り<bpt i="2" x="2">&lt;c2&gt;</bpt>r<ept i="2">&lt;/c2&gt;</ept>は<bpt i="5" x="5">&lt;c5&gt;</bpt>x == y * q + r<ept i="5">&lt;/c5&gt;</ept>を満足させます、ここで<bpt i="6" x="6">&lt;c6&gt;</bpt>q<ept i="6">&lt;/c6&gt;</ept>は<bpt i="7" x="7">&lt;c7&gt;</bpt>x / y<ept i="7">&lt;/c7&gt;</ept>に最も近い整数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two tuples to compare as equal, each corresponding pair of components must be equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプルが等しいと比較されるには、対応する構成要素同士がそれぞれ等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>d<ept i="1">&lt;/c1&gt;</ept>, the result of a <bpt i="2" x="2">&lt;c2&gt;</bpt>x.advanced(by: d)<ept i="2">&lt;/c2&gt;</ept> is equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>x + d<ept i="3">&lt;/c3&gt;</ept>—a new value <bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept> such that <bpt i="5" x="5">&lt;c5&gt;</bpt>x.distance(to: y)<ept i="5">&lt;/c5&gt;</ept> approximates <bpt i="6" x="6">&lt;c6&gt;</bpt>d<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>d<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>x.advanced(by: d)<ept i="2">&lt;/c2&gt;</ept>の結果は<bpt i="3" x="3">&lt;c3&gt;</bpt>x + d<ept i="3">&lt;/c3&gt;</ept>に等しいです—新しい値<bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept>は、<bpt i="5" x="5">&lt;c5&gt;</bpt>x.distance(to: y)<ept i="5">&lt;/c5&gt;</ept>が<bpt i="6" x="6">&lt;c6&gt;</bpt>d<ept i="6">&lt;/c6&gt;</ept>の近似です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, the result of <bpt i="2" x="2">&lt;c2&gt;</bpt>maximum(x, y)<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> if <bpt i="4" x="4">&lt;c4&gt;</bpt>x &gt; y<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept> if <bpt i="6" x="6">&lt;c6&gt;</bpt>x &lt;= y<ept i="6">&lt;/c6&gt;</ept>, or whichever of <bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept> or <bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept> is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>maximum(x, y)<ept i="2">&lt;/c2&gt;</ept>の結果は<bpt i="4" x="4">&lt;c4&gt;</bpt>x &gt; y<ept i="4">&lt;/c4&gt;</ept>ならば<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>、<bpt i="6" x="6">&lt;c6&gt;</bpt>x &lt;= y<ept i="6">&lt;/c6&gt;</ept><ept i="6">&lt;/c6&gt;</ept>ならば<bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept>、または他のものがクワイエットNaNならば<bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept>か<bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept>どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, the result of <bpt i="2" x="2">&lt;c2&gt;</bpt>maximumMagnitude(x, y)<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> if <bpt i="4" x="4">&lt;c4&gt;</bpt>x.magnitude &gt; y.magnitude<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept> if <bpt i="6" x="6">&lt;c6&gt;</bpt>x.magnitude &lt;= y.magnitude<ept i="6">&lt;/c6&gt;</ept>, or whichever of <bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept> or <bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept> is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>maximumMagnitude(x, y)<ept i="2">&lt;/c2&gt;</ept>の結果は<bpt i="4" x="4">&lt;c4&gt;</bpt>x.magnitude &gt; y.magnitude<ept i="4">&lt;/c4&gt;</ept>ならば<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>、<bpt i="6" x="6">&lt;c6&gt;</bpt>x.magnitude &lt;= y.magnitude<ept i="6">&lt;/c6&gt;</ept>ならば<bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept>、または他のものがクワイエットNaNならば<bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept>か<bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept>どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, the result of <bpt i="2" x="2">&lt;c2&gt;</bpt>minimum(x, y)<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> if <bpt i="4" x="4">&lt;c4&gt;</bpt>x &lt;= y<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept> if <bpt i="6" x="6">&lt;c6&gt;</bpt>y &lt; x<ept i="6">&lt;/c6&gt;</ept>, or whichever of <bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept> or <bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept> is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>minimum(x, y)<ept i="2">&lt;/c2&gt;</ept>の結果は<bpt i="4" x="4">&lt;c4&gt;</bpt>x &lt;= y<ept i="4">&lt;/c4&gt;</ept>ならば<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>、<bpt i="6" x="6">&lt;c6&gt;</bpt>y &lt; x<ept i="6">&lt;/c6&gt;</ept><ept i="6">&lt;/c6&gt;</ept>ならば<bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept>、または他のものがクワイエットNaNならば<bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept>か<bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept>どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, the result of <bpt i="2" x="2">&lt;c2&gt;</bpt>minimumMagnitude(x, y)<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> if <bpt i="4" x="4">&lt;c4&gt;</bpt>x.magnitude &lt;= y.magnitude<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept> if <bpt i="6" x="6">&lt;c6&gt;</bpt>y.magnitude &lt; x.magnitude<ept i="6">&lt;/c6&gt;</ept>, or whichever of <bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept> or <bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept> is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>minimumMagnitude(x, y)<ept i="2">&lt;/c2&gt;</ept>の結果は<bpt i="4" x="4">&lt;c4&gt;</bpt>x.magnitude &lt;= y.magnitude<ept i="4">&lt;/c4&gt;</ept>ならば<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>、<bpt i="6" x="6">&lt;c6&gt;</bpt>y.magnitude &lt; x.magnitude<ept i="6">&lt;/c6&gt;</ept><ept i="6">&lt;/c6&gt;</ept>ならば<bpt i="5" x="5">&lt;c5&gt;</bpt>y<ept i="5">&lt;/c5&gt;</ept>、または他のものがクワイエットNaNならば<bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept>か<bpt i="8" x="8">&lt;c8&gt;</bpt>y<ept i="8">&lt;/c8&gt;</ept>どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For two values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, the result of <bpt i="2" x="2">&lt;c2&gt;</bpt>x.distance(to: y)<ept i="2">&lt;/c2&gt;</ept> is equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>y - x<ept i="3">&lt;/c3&gt;</ept>—a distance <bpt i="4" x="4">&lt;c4&gt;</bpt>d<ept i="4">&lt;/c4&gt;</ept> such that <bpt i="5" x="5">&lt;c5&gt;</bpt>x.advanced(by: d)<ept i="5">&lt;/c5&gt;</ept> approximates <bpt i="6" x="6">&lt;c6&gt;</bpt>y<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>x.distance(to: y)<ept i="2">&lt;/c2&gt;</ept>の結果は<bpt i="3" x="3">&lt;c3&gt;</bpt>y - x<ept i="3">&lt;/c3&gt;</ept>に等しいです—隔たり<bpt i="4" x="4">&lt;c4&gt;</bpt>d<ept i="4">&lt;/c4&gt;</ept>は、<bpt i="5" x="5">&lt;c5&gt;</bpt>x.advanced(by: d)<ept i="5">&lt;/c5&gt;</ept>が<bpt i="6" x="6">&lt;c6&gt;</bpt>y<ept i="6">&lt;/c6&gt;</ept>の近似です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For value equality, see the equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>) and the <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の同等性については、同等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>）そして<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>プロトコルを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For value inequality, see the not-equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>!=<ept i="0">&lt;/c0&gt;</ept>) and the <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の不等性については、不等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>!=<ept i="0">&lt;/c0&gt;</ept>）そして<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>プロトコルを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For values <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept> and their truncated integer quotient <bpt i="2" x="2">&lt;c2&gt;</bpt>q<ept i="2">&lt;/c2&gt;</ept>, the remainder <bpt i="3" x="3">&lt;c3&gt;</bpt>r<ept i="3">&lt;/c3&gt;</ept> satisfies <bpt i="4" x="4">&lt;c4&gt;</bpt>x == y * q + r<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>および切り捨てられる整数指数<bpt i="2" x="2">&lt;c2&gt;</bpt>q<ept i="2">&lt;/c2&gt;</ept>に対して、余り<bpt i="3" x="3">&lt;c3&gt;</bpt>r<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>x == y * q + r<ept i="4">&lt;/c4&gt;</ept>を満足させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Framework</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>フレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>From Protocol</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>由来プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions and methods such as <bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>print(_:separator:terminator:)<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>sorted()<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>, and <bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>abs(_:)<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関数やメソッド、<bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>print(_:separator:terminator:)<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>sorted()<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>、そして<bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>abs(_:)<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept>など</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions that use a <bpt i="2" x="2">&lt;c2&gt;</bpt>TextOutputStream<ept i="2">&lt;/c2&gt;</ept> target may call <bpt i="3" x="3">&lt;c3&gt;</bpt>write(_:)<ept i="3">&lt;/c3&gt;</ept> multiple times per writing operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>TextOutputStream<ept i="2">&lt;/c2&gt;</ept>ターゲットを使う関数は、<bpt i="3" x="3">&lt;c3&gt;</bpt>write(_:)<ept i="3">&lt;/c3&gt;</ept>を書き込み操作のたびに複数回呼び出すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Fundamental data types such as <bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Double<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>, and <bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>String<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基本的なデータ型、例えば<bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Double<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>、そして<bpt i="4" x="4">&lt;a4&gt;</bpt><bpt i="5" x="5">&lt;c5&gt;</bpt>String<ept i="5">&lt;/c5&gt;</ept><ept i="4">&lt;/a4&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Further modifications to <bpt i="2" x="2">&lt;c2&gt;</bpt>numbers<ept i="2">&lt;/c2&gt;</ept> are made in place, while the two copies continue to share the original storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>numbers<ept i="2">&lt;/c2&gt;</ept>への以降の修正は、そこでなされます、一方２つのコピーは元々のストレージの共有を続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generally, a <bpt i="1" x="1">&lt;c1&gt;</bpt>Character<ept i="1">&lt;/c1&gt;</ept> instance matches what the reader of a string will perceive as a single character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一般的に、ある<bpt i="1" x="1">&lt;c1&gt;</bpt>Character<ept i="1">&lt;/c1&gt;</ept>インスタンスがマッチするのは、ある文字列の読み手が単一の文字と知覚するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enums.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接的処置を含まないものは自明です、インポートされたCのstructとenumのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generate a default mirror for all ancestor classes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>全ての先祖クラスに対するある省略時のミラーを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic Constraints</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>総称体制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic Instance Method</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>総称体インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Gets the value of this unmanaged reference as a managed reference and consumes an unbalanced retain of it.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この管理されない参照の値を管理された参照として取得します、そしてそれのある不均衡なリテイン（保持）を使い果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Gets the value of this unmanaged reference as a managed reference without consuming an unbalanced retain of it.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この管理されない参照の値を管理された参照として取得します、それのある不均衡なリテイン（保持）を使い果たすことなしにです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Getting a dictionary’s value using a key returns an optional value, so <bpt i="0" x="0">&lt;c0&gt;</bpt>imagePaths["star"]<ept i="0">&lt;/c0&gt;</ept> has type <bpt i="1" x="1">&lt;c1&gt;</bpt>Optional&lt;String&gt;<ept i="1">&lt;/c1&gt;</ept> or, written in the preferred manner, <bpt i="2" x="2">&lt;c2&gt;</bpt>String?<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の持つ値をあるキーを使って取得することはあるオプショナル値を返します、それで<bpt i="0" x="0">&lt;c0&gt;</bpt>imagePaths["star"]<ept i="0">&lt;/c0&gt;</ept>は型<bpt i="1" x="1">&lt;c1&gt;</bpt>Optional&lt;String&gt;<ept i="1">&lt;/c1&gt;</ept>または、より好ましい流儀で書かれて、<bpt i="2" x="2">&lt;c2&gt;</bpt>String?<ept i="2">&lt;/c2&gt;</ept>を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Getting and Setting Dictionary Values</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の値の取得と設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Given a version like this, though,</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、このようなバージョンを与えられるならば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Given two tuples <bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>, the first tuple is after or the same as the second tuple if and only if <bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &gt; b1<ept i="2">&lt;/c2&gt;</ept> or (<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &gt;= (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプル<bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>を与えられて、最初のタプルが２番目のタブルより後ろかそれと同じであるのは、<bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &gt; b1<ept i="2">&lt;/c2&gt;</ept>または(<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept>および<bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &gt;= (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Given two tuples <bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>, the first tuple is after the second tuple if and only if <bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &gt; b1<ept i="2">&lt;/c2&gt;</ept> or (<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &gt; (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプル<bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>を与えられて、最初のタプルが２番目のタブルより後ろであるのは、<bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &gt; b1<ept i="2">&lt;/c2&gt;</ept>または(<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept>および<bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &gt; (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Given two tuples <bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>, the first tuple is before or the same as the second tuple if and only if <bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &lt; b1<ept i="2">&lt;/c2&gt;</ept> or (<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &lt;= (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプル<bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>を与えられて、最初のタプルが２番目のタブルより前かそれと同じであるのは、<bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &lt; b1<ept i="2">&lt;/c2&gt;</ept>または(<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept>および<bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &lt;= (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Given two tuples <bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>, the first tuple is before the second tuple if and only if <bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &lt; b1<ept i="2">&lt;/c2&gt;</ept> or (<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &lt; (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプル<bpt i="0" x="0">&lt;c0&gt;</bpt>(a1, a2, ..., aN)<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>(b1, b2, ..., bN)<ept i="1">&lt;/c1&gt;</ept>を与えられて、最初のタプルが２番目のタブルより前であるのは、<bpt i="2" x="2">&lt;c2&gt;</bpt>a1 &lt; b1<ept i="2">&lt;/c2&gt;</ept>または(<bpt i="3" x="3">&lt;c3&gt;</bpt>a1 == b1<ept i="3">&lt;/c3&gt;</ept>および<bpt i="4" x="4">&lt;c4&gt;</bpt>(a2, ..., aN) &lt; (b2, ..., bN)<ept i="4">&lt;/c4&gt;</ept>)である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Greater than</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より大きい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Greater than or equal</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より大きいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Growing the Size of an Array</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の大きさの増大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Half-open range</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>半開範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hash values are not guaranteed to be equal across different executions of your program.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ハッシュ値は、あなたのプログラムの異なる実行をまたいで等しいことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here a default path is supplied for an image that is missing from <bpt i="3" x="3">&lt;c3&gt;</bpt>imagePaths<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここで省略時のパスは、<bpt i="3" x="3">&lt;c3&gt;</bpt>imagePaths<ept i="3">&lt;/c3&gt;</ept>から見つからない画像に対して提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here are the required operators for the <bpt i="0" x="0">&lt;c0&gt;</bpt>BitwiseOperations<ept i="0">&lt;/c0&gt;</ept> protocol:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにあるのは<bpt i="0" x="0">&lt;c0&gt;</bpt>BitwiseOperations<ept i="0">&lt;/c0&gt;</ept>プロトコルに必要とされる演算子です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, a set of strings is created from an array literal holding only strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここでは、文字列の集合が文字列のみを保持する配列リテラルから作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, a set of strings is created from an array literal holding only strings:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここでは、文字列の集合が文字列のみを保持する配列リテラルから作成されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, an array of strings is created from an array literal holding only strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここでは、文字列からなる配列が、文字列だけを保持している配列リテラルから作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, an array of strings is created from an array literal holding only strings:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここでは、文字列の配列が、文字列だけを保持する配列リテラルから作成されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, the value for the key <bpt i="0" x="0">&lt;c0&gt;</bpt>"Coral"<ept i="0">&lt;/c0&gt;</ept> is updated from <bpt i="1" x="1">&lt;c1&gt;</bpt>16<ept i="1">&lt;/c1&gt;</ept> to <bpt i="2" x="2">&lt;c2&gt;</bpt>18<ept i="2">&lt;/c2&gt;</ept> and a new key-value pair is added for the key <bpt i="3" x="3">&lt;c3&gt;</bpt>"Cerise"<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここでは、キー<bpt i="0" x="0">&lt;c0&gt;</bpt>"Coral"<ept i="0">&lt;/c0&gt;</ept>に対する値が<bpt i="1" x="1">&lt;c1&gt;</bpt>16<ept i="1">&lt;/c1&gt;</ept>から<bpt i="2" x="2">&lt;c2&gt;</bpt>18<ept i="2">&lt;/c2&gt;</ept>に更新され、そして新しいキー値ペアがキー<bpt i="3" x="3">&lt;c3&gt;</bpt>"Cerise"<ept i="3">&lt;/c3&gt;</ept>に対して加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, three elements in the middle of an array of integers are replaced by the five elements of a <bpt i="1" x="1">&lt;c1&gt;</bpt>Repeated&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここでは、整数からなるある配列の真ん中の３つの要素が<bpt i="1" x="1">&lt;c1&gt;</bpt>Repeated&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept>インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s a definition of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Countdown<ept i="0">&lt;/c0&gt;</ept> sequence that serves as its own iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに<bpt i="0" x="0">&lt;c0&gt;</bpt>Countdown<ept i="0">&lt;/c0&gt;</ept>シーケンスの定義があります、それはそれ自身イテレータとしての務めを果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of a type that declares the minimal requirements for a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにある型の例があります、それはあるコレクションのための最小限の要件を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of accessing the first character in a string through its subscript:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにあるのはある文字列の最初の文字にそれの添え字を通してアクセスする例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of checking whether each code unit in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view is a lead surrogate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに、ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューの中の各コード単位が先行するサロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of checking whether each code unit in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view is a trailing surrogate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに、ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューの中の各コード単位が後に続くサロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of creating a set and an array using array literals:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに配列リテラルを使って集合と配列を作成する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of creating an array initialized with five strings containing the letter <bpt i="0" x="0">&lt;e0&gt;</bpt>Z<ept i="0">&lt;/e0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに、字<bpt i="0" x="0">&lt;e0&gt;</bpt>Z<ept i="0">&lt;/e0&gt;</ept>を含んでいる５つの文字列で初期化される配列を作成する例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of inserting a range of integers into an array of the same type:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに整数の範囲を同じ型の配列へ挿入する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of sorting a list of students’ names.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに、生徒名のリストをソートする例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of the number -8.5 represented as an instance of the <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> type, which defines a radix of 2.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>型のあるインスタンスとして表される数-8.5の例があります、それは２の基数を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example of transforming a string to all lowercase letters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに、ある文字列を小文字の文字に変換する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example that finds a student name that begins with the letter “A”:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに、文字「A」で始まる生徒名を見つける例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example that sorts the first half of an array of integers:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにある例があります、それは整数からなるある配列の前半分をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an example that uses a predicate that orders elements from largest to smallest:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにある例は、最も大きいものから最も小さいものへ要素を並べる述部を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an implementation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>reduce1(_:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに<bpt i="0" x="0">&lt;c0&gt;</bpt>reduce1(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドの実装があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an implementation of those steps, showing how to retrieve a substring described by an <bpt i="0" x="0">&lt;c0&gt;</bpt>NSRange<ept i="0">&lt;/c0&gt;</ept> instance from the middle of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにこれらの手順のひとつの実装があります、<bpt i="0" x="0">&lt;c0&gt;</bpt>NSRange<ept i="0">&lt;/c0&gt;</ept>インスタンスによって叙述される下位文字列をある文字列の真ん中から取り出す方法を示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s an implementation of those steps:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにこれらの手順の実装があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s how to find the longest string in a sequence, using the <bpt i="1" x="1">&lt;c1&gt;</bpt>animals<ept i="1">&lt;/c1&gt;</ept> array introduced earlier as an example:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに最も長い文字列をあるシーケンスの中で見つける方法があります、前に導入された<bpt i="1" x="1">&lt;c1&gt;</bpt>animals<ept i="1">&lt;/c1&gt;</ept>配列を例として使っています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s how you can catch any <bpt i="0" x="0">&lt;c0&gt;</bpt>XMLParsingError<ept i="0">&lt;/c0&gt;</ept> errors thrown by the <bpt i="1" x="1">&lt;c1&gt;</bpt>parse(_:)<ept i="1">&lt;/c1&gt;</ept> function:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにあるのは、あなたが<bpt i="1" x="1">&lt;c1&gt;</bpt>parse(_:)<ept i="1">&lt;/c1&gt;</ept>関数によってスローされる何らかの<bpt i="0" x="0">&lt;c0&gt;</bpt>XMLParsingError<ept i="0">&lt;/c0&gt;</ept>エラーを捕まえる方法です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s how you would create a dictionary of HTTP response codes and their related messages:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここにあるのは、あなたがHTTP応答コードとそれらの関連メッセージの辞書を作成する方法です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s the definition for <bpt i="1" x="1">&lt;c1&gt;</bpt>IntegerRef<ept i="1">&lt;/c1&gt;</ept> and the <bpt i="2" x="2">&lt;c2&gt;</bpt>==<ept i="2">&lt;/c2&gt;</ept> function that makes it conform to <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに<bpt i="1" x="1">&lt;c1&gt;</bpt>IntegerRef<ept i="1">&lt;/c1&gt;</ept>とそれを<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>に準拠させる<bpt i="2" x="2">&lt;c2&gt;</bpt>==<ept i="2">&lt;/c2&gt;</ept>関数の定義があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s the initial declaration of the <bpt i="1" x="1">&lt;c1&gt;</bpt>GridPoint<ept i="1">&lt;/c1&gt;</ept> type:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに<bpt i="1" x="1">&lt;c1&gt;</bpt>GridPoint<ept i="1">&lt;/c1&gt;</ept>型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here’s the initial declaration of the <bpt i="1" x="1">&lt;c1&gt;</bpt>StreetAddress<ept i="1">&lt;/c1&gt;</ept> type:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ここに<bpt i="1" x="1">&lt;c1&gt;</bpt>StreetAddress<ept i="1">&lt;/c1&gt;</ept>型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept> may be 0 even for a nonzero <bpt i="3" x="3">&lt;c3&gt;</bpt>start<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、<bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>は非ゼロ<bpt i="3" x="3">&lt;c3&gt;</bpt>start<ept i="3">&lt;/c3&gt;</ept>に対しても０であっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、２つの配列が同じオブジェクトへの参照を含むならば、あなたは両方の配列からそのオブジェクトの持つプロパティへの変更を観察するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, in cases where objects of various different classes must serve as storage, <bpt i="1" x="1">&lt;c1&gt;</bpt>ManagedBufferPointer<ept i="1">&lt;/c1&gt;</ept> is needed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、種々の異なるクラスのオブジェクトがストレージとして供されなければならない場合には、<bpt i="1" x="1">&lt;c1&gt;</bpt>ManagedBufferPointer<ept i="1">&lt;/c1&gt;</ept>が必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, in optimized builds (<bpt i="2" x="2">&lt;c2&gt;</bpt>-O<ept i="2">&lt;/c2&gt;</ept>), no check is performed to ensure that the current instance actually has a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、最適化ビルド（<bpt i="2" x="2">&lt;c2&gt;</bpt>-O<ept i="2">&lt;/c2&gt;</ept>）において、現在のインスタンスが実際に値を持つか確かめる確認は全く実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, in order to meet the complexity guarantees of a random-access collection, either the index for your custom type must conform to the <bpt i="4" x="4">&lt;c4&gt;</bpt>Strideable<ept i="4">&lt;/c4&gt;</ept> protocol or you must implement the <bpt i="5" x="5">&lt;c5&gt;</bpt>index(_:offsetBy:)<ept i="5">&lt;/c5&gt;</ept> and <bpt i="6" x="6">&lt;c6&gt;</bpt>distance(from:to:)<ept i="6">&lt;/c6&gt;</ept> methods with O(1) efficiency.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、無作為アクセスコレクションの計算量（複雑さ）保証を達成する手段として、あなたのあつらえの型に対するインデックスが<bpt i="4" x="4">&lt;c4&gt;</bpt>Strideable<ept i="4">&lt;/c4&gt;</ept>プロトコルに準拠する、またはあなたが<bpt i="5" x="5">&lt;c5&gt;</bpt>index(_:offsetBy:)<ept i="5">&lt;/c5&gt;</ept>および<bpt i="6" x="6">&lt;c6&gt;</bpt>distance(from:to:)<ept i="6">&lt;/c6&gt;</ept>メソッドをO(1)の効率で実装する、いずれかをしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, optimizer improvements are needed before they can be removed without affecting performance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、それらが性能上の影響なしに取り除かれることができる前に効果的な改良品が必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, subscripting that range still works in a generic context:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、この範囲に添え字を使うことは総称体の文脈では依然として働きます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, the type of a function, method, or closure always includes a return type, which is <bpt i="0" x="0">&lt;c0&gt;</bpt>Void<ept i="0">&lt;/c0&gt;</ept> if otherwise unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、関数、メソッド、またはクロージャは、常に戻り型を含みます、それは指定されないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>Void<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, violating a requirement can trigger a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とはいえ、要件を破ることは実行時エラーを引き起こすことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Identical</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同一である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Identical to <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>と同一。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Identical to <bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept> in an empty range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の範囲での<bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept>に同じ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>Stride<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Integer<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>self.advanced(by: x) == other<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Stride<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Integer<ept i="1">&lt;/c1&gt;</ept>に準拠するならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>self.advanced(by: x) == other<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>Stride<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Integer<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>self.distance(to: x) == n<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Stride<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Integer<ept i="1">&lt;/c1&gt;</ept>に準拠するならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>self.distance(to: x) == n<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>areEquivalent(a, b)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>areEquivalent(b, c)<ept i="1">&lt;/c1&gt;</ept> are both <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>, then <bpt i="3" x="3">&lt;c3&gt;</bpt>areEquivalent(a, c)<ept i="3">&lt;/c3&gt;</ept> is also <bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areEquivalent(a, b)<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>areEquivalent(b, c)<ept i="1">&lt;/c1&gt;</ept>が両方とも<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>ならば、そのとき<bpt i="3" x="3">&lt;c3&gt;</bpt>areEquivalent(a, c)<ept i="3">&lt;/c3&gt;</ept>もまた<bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder(a, b)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>areInIncreasingOrder(b, c)<ept i="1">&lt;/c1&gt;</ept> are both <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>, then <bpt i="3" x="3">&lt;c3&gt;</bpt>areInIncreasingOrder(a, c)<ept i="3">&lt;/c3&gt;</ept> is also <bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder(a, b)<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>areInIncreasingOrder(b, c)<ept i="1">&lt;/c1&gt;</ept>が両方とも<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>ならば、そのとき<bpt i="3" x="3">&lt;c3&gt;</bpt>areInIncreasingOrder(a, c)<ept i="3">&lt;/c3&gt;</ept>もまた<bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>cString<ept i="0">&lt;/c0&gt;</ept> contains ill-formed UTF-8 code unit sequences, this initializer replaces them with the Unicode replacement character (<bpt i="1" x="1">&lt;c1&gt;</bpt>"\u{FFFD}"<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CString<ept i="0">&lt;/c0&gt;</ept>が文法的に正しくないUTF-8コードユニットシーケンスを含むならば、それらをある代替文字（<bpt i="1" x="1">&lt;c1&gt;</bpt>"\u{FFFD}"<ept i="1">&lt;/c1&gt;</ept>）で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>start<ept i="1">&lt;/c1&gt;</ept>, the result is zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>start<ept i="1">&lt;/c1&gt;</ept>に等しいならば、結果はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>, an empty subsequence is returned in the result for each consecutive pair of <bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept> elements in the collection and for each instance of <bpt i="2" x="2">&lt;c2&gt;</bpt>separator<ept i="2">&lt;/c2&gt;</ept> at the start or end of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>ならば、このコレクション中の連続する<bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept>要素の対それぞれに、そしてコレクションの始めと終わりの<bpt i="2" x="2">&lt;c2&gt;</bpt>separator<ept i="2">&lt;/c2&gt;</ept>インスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>, an empty subsequence is returned in the result for each consecutive pair of <bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept> elements in the sequence and for each instance of <bpt i="2" x="2">&lt;c2&gt;</bpt>separator<ept i="2">&lt;/c2&gt;</ept> at the start or end of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>ならば、このシーケンス中の連続する<bpt i="1" x="1">&lt;c1&gt;</bpt>separator<ept i="1">&lt;/c1&gt;</ept>要素の対それぞれに、そしてシーケンスの始めと終わりの<bpt i="2" x="2">&lt;c2&gt;</bpt>separator<ept i="2">&lt;/c2&gt;</ept>インスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the <bpt i="1" x="1">&lt;c1&gt;</bpt>isSeparator<ept i="1">&lt;/c1&gt;</ept> predicate and for each element at the start or end of the collection satisfying the <bpt i="2" x="2">&lt;c2&gt;</bpt>isSeparator<ept i="2">&lt;/c2&gt;</ept> predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>isSeparator<ept i="1">&lt;/c1&gt;</ept>述部を満たす連続する要素のペアそれぞれに対しておよび<bpt i="2" x="2">&lt;c2&gt;</bpt>isSeparator<ept i="2">&lt;/c2&gt;</ept>述部を満たすコレクションの始まりまたは終わりでの要素それぞれに対して結果において１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the <bpt i="1" x="1">&lt;c1&gt;</bpt>isSeparator<ept i="1">&lt;/c1&gt;</ept> predicate and for each element at the start or end of the sequence satisfying the <bpt i="2" x="2">&lt;c2&gt;</bpt>isSeparator<ept i="2">&lt;/c2&gt;</ept> predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>isSeparator<ept i="1">&lt;/c1&gt;</ept>述部を満たす連続する要素のペアそれぞれに対しておよび<bpt i="2" x="2">&lt;c2&gt;</bpt>isSeparator<ept i="2">&lt;/c2&gt;</ept>述部を満たすシーケンスの始まりまたは終わりでの要素それぞれに対して結果において１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt; c.startIndex &amp;&amp; i &lt;= c.endIndex<ept i="0">&lt;/c0&gt;</ept> <bpt i="1" x="1">&lt;c1&gt;</bpt>c.index(after: c.index(before: i)) == i<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt; c.startIndex &amp;&amp; i &lt;= c.endIndex<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>c.index(after: c.index(before: i)) == i<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt; startIndex &amp;&amp; i &lt;= endIndex<ept i="0">&lt;/c0&gt;</ept> <bpt i="1" x="1">&lt;c1&gt;</bpt>index(after: index(before: i)) == i<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt; startIndex &amp;&amp; i &lt;= endIndex<ept i="0">&lt;/c0&gt;</ept>ならば<bpt i="1" x="1">&lt;c1&gt;</bpt>index(after: index(before: i)) == i<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt;= c.startIndex &amp;&amp; i &lt; c.endIndex<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>c.index(before: c.index(after: i)) == i<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt;= c.startIndex &amp;&amp; i &lt; c.endIndex<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>c.index(before: c.index(after: i)) == i<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt;= startIndex &amp;&amp; i &lt; endIndex<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>index(before: index(after: i)) == i<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt;= startIndex &amp;&amp; i &lt; endIndex<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>index(before: index(after: i)) == i<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> is equal to the string’s end index, this methods appends <bpt i="1" x="1">&lt;c1&gt;</bpt>newElement<ept i="1">&lt;/c1&gt;</ept> to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>が文字列の末尾インデックスと等しいならば、このメソッドは<bpt i="1" x="1">&lt;c1&gt;</bpt>newElement<ept i="1">&lt;/c1&gt;</ept>を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> is equal to the string’s end index, this methods appends the contents of <bpt i="1" x="1">&lt;c1&gt;</bpt>newElements<ept i="1">&lt;/c1&gt;</ept> to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>が文字列の末尾インデックスと等しいならば、このメソッドは<bpt i="1" x="1">&lt;c1&gt;</bpt>newElements<ept i="1">&lt;/c1&gt;</ept>の内容を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomDebugStringConvertible<ept i="1">&lt;/c1&gt;</ept> protocol, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>instance.debugDescription<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept>が準拠するのが<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomDebugStringConvertible<ept i="1">&lt;/c1&gt;</ept>プロトコルならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>instance.debugDescription<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept> protocol, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>instance.description<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept>が準拠するのが<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept>プロトコルならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>instance.description<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Streamable<ept i="1">&lt;/c1&gt;</ept> protocol, the result is obtained by calling <bpt i="2" x="2">&lt;c2&gt;</bpt>instance.write(to: s)<ept i="2">&lt;/c2&gt;</ept> on an empty string <bpt i="3" x="3">&lt;c3&gt;</bpt>s<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept>が準拠するのが<bpt i="1" x="1">&lt;c1&gt;</bpt>Streamable<ept i="1">&lt;/c1&gt;</ept>プロトコルならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>instance.write(to: s)<ept i="2">&lt;/c2&gt;</ept>を空の文字列<bpt i="3" x="3">&lt;c3&gt;</bpt>s<ept i="3">&lt;/c3&gt;</ept>上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>isRepairing<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> and an ill-formed sequence is detected, this method returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isRepairing<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>で誤形式シーケンスが検出されるならば、このメソッドは<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> exceeds <bpt i="1" x="1">&lt;c1&gt;</bpt>s.count<ept i="1">&lt;/c1&gt;</ept>, the result contains all the elements of <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>s.count<ept i="1">&lt;/c1&gt;</ept>を超過するならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>の要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> exceeds <bpt i="1" x="1">&lt;c1&gt;</bpt>self.count<ept i="1">&lt;/c1&gt;</ept>, the result contains all the elements of <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>self.count<ept i="1">&lt;/c1&gt;</ept>を越えるならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>の全ての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits + 1<ept i="0">&lt;/c0&gt;</ept> subsequences are returned, the last one is a suffix of the original collection containing the remaining elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits + 1<ept i="0">&lt;/c0&gt;</ept>の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元コレクションの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits + 1<ept i="0">&lt;/c0&gt;</ept> subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits + 1<ept i="0">&lt;/c0&gt;</ept>の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元シーケンスの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>n &lt; 0<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>n &gt;= self.distance(from: i, to: self.startIndex)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n &lt; 0<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>n &gt;= self.distance(from: i, to: self.startIndex)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept> has no effect if it is less than <bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept>は、それが<bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>より少ないならば効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept> should be greater than <bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept> to have any effect.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept>が何らかの効果を持つには<bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>より大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>n &lt;= self.distance(from: i, to: self.endIndex)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>ならば<bpt i="1" x="1">&lt;c1&gt;</bpt>n &lt;= self.distance(from: i, to: self.endIndex)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>, a limit that is less than <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept> has no effect.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt; 0<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>より少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept> is not contained in the set but subsumes current members of the set, the subsumed members are returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept>がこの集合の中に含まれないしかしこの集合の現在の要素を包含するならば、包含されたメンバが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> can’t be represented as an instance of <bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept> without rounding, the result of this initializer is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> can’t be represented as an instance of <bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept> without rounding, the result of this initializer is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept>のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> can’t be represented as an instance of <bpt i="1" x="1">&lt;c1&gt;</bpt>Float<ept i="1">&lt;/c1&gt;</ept> without rounding, the result of this initializer is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Float<ept i="1">&lt;/c1&gt;</ept>のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept> is nil, <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> must be 0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept>がnilならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>は０でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomDebugStringConvertible<ept i="1">&lt;/c1&gt;</ept> protocol, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>subject.debugDescription<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>が準拠するのが<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomDebugStringConvertible<ept i="1">&lt;/c1&gt;</ept>プロトコルならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>subject.debugDescription<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept> protocol, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>subject.description<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>が準拠するのが<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomStringConvertible<ept i="1">&lt;/c1&gt;</ept>プロトコルならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>subject.description<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>TextOutputStreamable<ept i="1">&lt;/c1&gt;</ept> protocol, the result is obtained by calling <bpt i="2" x="2">&lt;c2&gt;</bpt>subject.write(to: s)<ept i="2">&lt;/c2&gt;</ept> on an empty string <bpt i="3" x="3">&lt;c3&gt;</bpt>s<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>が準拠するのが<bpt i="1" x="1">&lt;c1&gt;</bpt>TextOutputStreamable<ept i="1">&lt;/c1&gt;</ept>プロトコルならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>subject.write(to: s)<ept i="2">&lt;/c2&gt;</ept>を空の文字列<bpt i="3" x="3">&lt;c3&gt;</bpt>s<ept i="3">&lt;/c3&gt;</ept>上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> is not a class instance, <bpt i="1" x="1">&lt;c1&gt;</bpt>ancestorRepresentation<ept i="1">&lt;/c1&gt;</ept> is ignored.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>がクラスインスタンスでないならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>ancestorRepresentation<ept i="1">&lt;/c1&gt;</ept>は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>text<ept i="0">&lt;/c0&gt;</ept> does not match the regular expression “[+-]?[0-9a-zA-Z]+”, or the value it denotes in the given <bpt i="1" x="1">&lt;c1&gt;</bpt>radix<ept i="1">&lt;/c1&gt;</ept> is not representable, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>text<ept i="0">&lt;/c0&gt;</ept>が正規表現“[+-]?[0-9a-zA-Z]+”に合致しない、またはそれが意味する値が与えられた<bpt i="1" x="1">&lt;c1&gt;</bpt>radix<ept i="1">&lt;/c1&gt;</ept>において表現可能でないならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>, newline characters and character combinations are stripped from the result; otherwise, newline characters or character combinations are preserved.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>ならば、改行文字および文字組み合わせは結果から剥ぎ取られます；そうでなければ、改行文字および文字組み合わせは保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>, the set’s storage capacity is preserved; if <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>, the underlying storage is released.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>ならば、集合が持つストレージ容量を維持します；<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>ならば基盤をなすストレージは解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>userPrefs[greetingKey]<ept i="0">&lt;/c0&gt;</ept> has a value, that value is assigned to <bpt i="1" x="1">&lt;c1&gt;</bpt>greeting<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>userPrefs[greetingKey]<ept i="0">&lt;/c0&gt;</ept>が値を持つならば、その値は<bpt i="1" x="1">&lt;c1&gt;</bpt>greeting<ept i="1">&lt;/c1&gt;</ept>に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> contains unpaired UTF-16 surrogates, the result is <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>がペアでないUTF-16サロゲートを含むならば、結果は<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> is an ill-formed UTF-8 code sequence, the result is <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>が文法的に正しくないUTF-8コードシーケンスを含むならば、結果は<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x == y<ept i="0">&lt;/c0&gt;</ept>, returns <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x == y<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x == y<ept i="0">&lt;/c0&gt;</ept>, returns <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x == y<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is +/-infinity or NaN, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.exponent<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max<ept i="2">&lt;/c2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が+/-infinityまたはNaNならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.exponent<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max<ept i="2">&lt;/c2&gt;</ept>です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is 10, <bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>1.01<ept i="2">&lt;/c2&gt;</ept> in binary, so <bpt i="3" x="3">&lt;c3&gt;</bpt>x.significandWidth<ept i="3">&lt;/c3&gt;</ept> is 2.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が10ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept>は２進数で<bpt i="2" x="2">&lt;c2&gt;</bpt>1.01<ept i="2">&lt;/c2&gt;</ept>です、それで<bpt i="3" x="3">&lt;c3&gt;</bpt>x.significandWidth<ept i="3">&lt;/c3&gt;</ept>は２です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>-greatestFiniteMagnitude<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextDown<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>-infinity<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>-greatestFiniteMagnitude<ept i="1">&lt;/c1&gt;</ept>ならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextDown<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>-infinity<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>-infinity<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextUp<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>-greatestFiniteMagnitude<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>-infinity<ept i="1">&lt;/c1&gt;</ept>ならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextUp<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>-greatestFiniteMagnitude<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>-leastNonzeroMagnitude<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextUp<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>-0.0<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>-leastNonzeroMagnitude<ept i="1">&lt;/c1&gt;</ept>ならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextUp<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>-0.0<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>greatestFiniteMagnitude<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextUp<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>infinity<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>greatestFiniteMagnitude<ept i="1">&lt;/c1&gt;</ept>ならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextUp<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>infinity<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>infinity<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextDown<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>greatestFiniteMagnitude<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>infinity<ept i="1">&lt;/c1&gt;</ept>ならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextDown<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>greatestFiniteMagnitude<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>leastNonzeroMagnitude<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextDown<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>0.0<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>leastNonzeroMagnitude<ept i="1">&lt;/c1&gt;</ept>ならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>x.nextDown<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>0.0<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is Float.pi, <bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>1.10010010000111111011011<ept i="2">&lt;/c2&gt;</ept> in binary, and <bpt i="3" x="3">&lt;c3&gt;</bpt>x.significandWidth<ept i="3">&lt;/c3&gt;</ept> is 23.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>がFloat.piならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept>は２進数で<bpt i="2" x="2">&lt;c2&gt;</bpt>1.10010010000111111011011<ept i="2">&lt;/c2&gt;</ept>です、それで<bpt i="3" x="3">&lt;c3&gt;</bpt>x.significandWidth<ept i="3">&lt;/c3&gt;</ept>は23です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is NaN, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept> is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>がNaNならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept>はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is infinity, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept> is 1.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が無限大ならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept>は1.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is very small in magnitude, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.ulp<ept i="1">&lt;/c1&gt;</ept> may be a subnormal number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>が規模において非常に小さいならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>x.ulp<ept i="1">&lt;/c1&gt;</ept>はサブノーマル数かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is zero, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.exponent<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>Int.min<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>がゼロならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.exponent<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>Int.min<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is zero, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextDown<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>-leastNonzeroMagnitude<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>がゼロならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextDown<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>-leastNonzeroMagnitude<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is zero, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextUp<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>leastNonzeroMagnitude<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>がゼロならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.nextUp<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>leastNonzeroMagnitude<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> is zero, then <bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept> is 0.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>がゼロならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>x.significand<ept i="1">&lt;/c1&gt;</ept>は0.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept> are incomparable, and <bpt i="3" x="3">&lt;c3&gt;</bpt>b<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>c<ept i="4">&lt;/c4&gt;</ept> are incomparable, then <bpt i="5" x="5">&lt;c5&gt;</bpt>a<ept i="5">&lt;/c5&gt;</ept> and <bpt i="6" x="6">&lt;c6&gt;</bpt>c<ept i="6">&lt;/c6&gt;</ept> are also incomparable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept>が比較できないならば、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>b<ept i="3">&lt;/c3&gt;</ept>と<bpt i="4" x="4">&lt;c4&gt;</bpt>c<ept i="4">&lt;/c4&gt;</ept>が比較できないならば、そのとき<bpt i="5" x="5">&lt;c5&gt;</bpt>a<ept i="5">&lt;/c5&gt;</ept>と<bpt i="6" x="6">&lt;c6&gt;</bpt>c<ept i="6">&lt;/c6&gt;</ept>もまた比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept> has a return value, it is used as the return value for the <bpt i="2" x="2">&lt;c2&gt;</bpt>withUnsafeBufferPointer(_:)<ept i="2">&lt;/c2&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept>が戻り値を持つならば、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>withUnsafeBufferPointer(_:)<ept i="2">&lt;/c2&gt;</ept>メソッドの戻り値として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept> has a return value, it is used as the return value for the <bpt i="2" x="2">&lt;c2&gt;</bpt>withUnsafeMutableBufferPointer(_:)<ept i="2">&lt;/c2&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept>が戻り値を持つならば、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>withUnsafeMutableBufferPointer(_:)<ept i="2">&lt;/c2&gt;</ept>メソッドの戻り値として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept> is not found in the collection, returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>element<ept i="1">&lt;/c1&gt;</ept>がコレクションの中に見つけられないならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>key<ept i="1">&lt;/c1&gt;</ept> already exists in the dictionary, <bpt i="2" x="2">&lt;c2&gt;</bpt>value<ept i="2">&lt;/c2&gt;</ept> replaces the existing associated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>key<ept i="1">&lt;/c1&gt;</ept>が既に辞書の中に存在するならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>value<ept i="2">&lt;/c2&gt;</ept>が既存の結び付けられる値に取って代わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> contains multiple instances of equivalent elements, only the first instance is kept.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が同等の要素を複数含むならば、最初の要素だけが残されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>repairingIllFormedSequences<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>repairingIllFormedSequences<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>ならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>stopOnError<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>stopOnError<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>ならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="1" x="1">&lt;c1&gt;</bpt>text<ept i="1">&lt;/c1&gt;</ept> has invalid characters or is in an invalid format, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>text<ept i="1">&lt;/c1&gt;</ept>が無効な文字を持つまたは無効な形式であるならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="2" x="2">&lt;c2&gt;</bpt>n<ept i="2">&lt;/c2&gt;</ept> is positive, this is the same value as the result of <bpt i="3" x="3">&lt;c3&gt;</bpt>n<ept i="3">&lt;/c3&gt;</ept> calls to <bpt i="4" x="4">&lt;c4&gt;</bpt>index(after:)<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>n<ept i="2">&lt;/c2&gt;</ept>が正ならば、これは<bpt i="3" x="3">&lt;c3&gt;</bpt>n<ept i="3">&lt;/c3&gt;</ept>で<bpt i="4" x="4">&lt;c4&gt;</bpt>index(after:)<ept i="4">&lt;/c4&gt;</ept>を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="2" x="2">&lt;c2&gt;</bpt>repairingIllFormedSequences<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept> and an ill-formed sequence is detected, this method returns <bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>repairingIllFormedSequences<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>で誤形式シーケンスが検出されるならば、このメソッドは<bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept> is equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>y<ept i="3">&lt;/c3&gt;</ept>, returns <bpt i="4" x="4">&lt;c4&gt;</bpt>x<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>y<ept i="3">&lt;/c3&gt;</ept>と等しいならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>x<ept i="4">&lt;/c4&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept> is equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>y<ept i="3">&lt;/c3&gt;</ept>, returns <bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>y<ept i="3">&lt;/c3&gt;</ept>と等しいならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>y<ept i="4">&lt;/c4&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="3" x="3">&lt;c3&gt;</bpt>i<ept i="3">&lt;/c3&gt;</ept> is equal to the collection’s <bpt i="4" x="4">&lt;c4&gt;</bpt>endIndex<ept i="4">&lt;/c4&gt;</ept> property, the complexity is O(<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>), where <bpt i="6" x="6">&lt;e6&gt;</bpt>n<ept i="6">&lt;/e6&gt;</ept> is the length of <bpt i="7" x="7">&lt;c7&gt;</bpt>newElements<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>i<ept i="3">&lt;/c3&gt;</ept>がコレクションの<bpt i="4" x="4">&lt;c4&gt;</bpt>endIndex<ept i="4">&lt;/c4&gt;</ept>プロパティと等しいならば、計算量はO(<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>)です、ここで<bpt i="6" x="6">&lt;e6&gt;</bpt>n<ept i="6">&lt;/e6&gt;</ept>は<bpt i="7" x="7">&lt;c7&gt;</bpt>newElements<ept i="7">&lt;/c7&gt;</ept>の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="3" x="3">&lt;c3&gt;</bpt>key<ept i="3">&lt;/c3&gt;</ept> isn’t already a key of the dictionary, the <bpt i="4" x="4">&lt;c4&gt;</bpt>(key, value)<ept i="4">&lt;/c4&gt;</ept> pair is added.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>key<ept i="3">&lt;/c3&gt;</ept>がまだこの辞書のキーでないならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>(key, value)<ept i="4">&lt;/c4&gt;</ept>ペアが加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="3" x="3">&lt;c3&gt;</bpt>object<ept i="3">&lt;/c3&gt;</ept> is <bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>, the return value is <bpt i="5" x="5">&lt;c5&gt;</bpt>false<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>object<ept i="3">&lt;/c3&gt;</ept>が<bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>ならば、戻り値は<bpt i="5" x="5">&lt;c5&gt;</bpt>false<ept i="5">&lt;/c5&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="3" x="3">&lt;c3&gt;</bpt>possiblePrefix<ept i="3">&lt;/c3&gt;</ept> has no elements, the return value is <bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>possiblePrefix<ept i="3">&lt;/c3&gt;</ept>が１つも要素を持たないならば、戻り値は<bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>ならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> is not NaN, <bpt i="4" x="4">&lt;c4&gt;</bpt>x.magnitude<ept i="4">&lt;/c4&gt;</ept> is the absolute value of <bpt i="5" x="5">&lt;c5&gt;</bpt>x<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>がNaNでないならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>x.magnitude<ept i="4">&lt;/c4&gt;</ept>は<bpt i="5" x="5">&lt;c5&gt;</bpt>x<ept i="5">&lt;/c5&gt;</ept>の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="4" x="4">&lt;c4&gt;</bpt>next<ept i="4">&lt;/c4&gt;</ept> never returns <bpt i="5" x="5">&lt;c5&gt;</bpt>nil<ept i="5">&lt;/c5&gt;</ept>, the sequence is infinite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>next<ept i="4">&lt;/c4&gt;</ept>が決して<bpt i="5" x="5">&lt;c5&gt;</bpt>nil<ept i="5">&lt;/c5&gt;</ept>を返さないならば、 このシーケンスは果てがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="5" x="5">&lt;c5&gt;</bpt>n<ept i="5">&lt;/c5&gt;</ept> is negative, this is the same value as the result of <bpt i="6" x="6">&lt;c6&gt;</bpt>-n<ept i="6">&lt;/c6&gt;</ept> calls to <bpt i="7" x="7">&lt;c7&gt;</bpt>index(before:)<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="5" x="5">&lt;c5&gt;</bpt>n<ept i="5">&lt;/c5&gt;</ept>が負ならば、これは<bpt i="6" x="6">&lt;c6&gt;</bpt>-n<ept i="6">&lt;/c6&gt;</ept>が<bpt i="7" x="7">&lt;c7&gt;</bpt>index(before:)<ept i="7">&lt;/c7&gt;</ept>を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="8" x="8">&lt;c8&gt;</bpt>x / y<ept i="8">&lt;/c8&gt;</ept> is exactly halfway between two integers, <bpt i="9" x="9">&lt;c9&gt;</bpt>q<ept i="9">&lt;/c9&gt;</ept> is chosen to be even.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="8" x="8">&lt;c8&gt;</bpt>x / y<ept i="8">&lt;/c8&gt;</ept>が正確に２つの整数の間の中ほどならば、<bpt i="9" x="9">&lt;c9&gt;</bpt>q<ept i="9">&lt;/c9&gt;</ept>は偶数である方を選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If EOF has already been reached when <bpt i="0" x="0">&lt;c0&gt;</bpt>readLine()<ept i="0">&lt;/c0&gt;</ept> is called, the result is <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>readLine()<ept i="0">&lt;/c0&gt;</ept>が呼ばれるときEOFがすでに到達されているならば、結果は<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If a participating type fails to satisfy these expectations, the functions and methods work as documented, except for their performance guarantees.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある関与している型がこれらの予想を満たすのに失敗するならば、その関数やメソッドは文書化される通りに働きます、しかしそれらの性能保証は別です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If a type’s radix is 2, then for finite nonzero numbers, the significand is in the range <bpt i="0" x="0">&lt;c0&gt;</bpt>1.0 ..&lt; 2.0<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型の基数が２であるならば、そのとき有限の非ゼロの数に対して、仮数は範囲<bpt i="0" x="0">&lt;c0&gt;</bpt>1.0 ..&lt; 2.0<ept i="0">&lt;/c0&gt;</ept>の中になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If an element equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept> is already contained in the set, <bpt i="1" x="1">&lt;c1&gt;</bpt>newMember<ept i="1">&lt;/c1&gt;</ept> replaces the existing element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept>に等しい要素が既にこの集合に含まれるならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>newMember<ept i="1">&lt;/c1&gt;</ept>は既存の要素と置き換わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If an element equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept> is already contained in the set, this method has no effect.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>newMember<ept i="0">&lt;/c0&gt;</ept>に等しい要素が既にこの集合に含まれるならば、このメソッドは効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If an element equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>newMember<ept i="2">&lt;/c2&gt;</ept> was already contained in the set, the method returns <bpt i="3" x="3">&lt;c3&gt;</bpt>(false, oldMember)<ept i="3">&lt;/c3&gt;</ept>, where <bpt i="4" x="4">&lt;c4&gt;</bpt>oldMember<ept i="4">&lt;/c4&gt;</ept> is the element that was equal to <bpt i="5" x="5">&lt;c5&gt;</bpt>newMember<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>newMember<ept i="2">&lt;/c2&gt;</ept>に等しい要素が既に集合に含まれたならば、メソッドは<bpt i="3" x="3">&lt;c3&gt;</bpt>(false, oldMember)<ept i="3">&lt;/c3&gt;</ept>を返します、ここで<bpt i="4" x="4">&lt;c4&gt;</bpt>oldMember<ept i="4">&lt;/c4&gt;</ept>は<bpt i="5" x="5">&lt;c5&gt;</bpt>newMember<ept i="5">&lt;/c5&gt;</ept>に等しかった要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If any are found, the result of the initializer is <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何か見つけられるならば、イニシャライザの結果は<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If both <bpt i="9" x="9">&lt;c9&gt;</bpt>x<ept i="9">&lt;/c9&gt;</ept> and <bpt i="10" x="10">&lt;c10&gt;</bpt>y<ept i="10">&lt;/c10&gt;</ept> are NaN, or either <bpt i="11" x="11">&lt;c11&gt;</bpt>x<ept i="11">&lt;/c11&gt;</ept> or <bpt i="12" x="12">&lt;c12&gt;</bpt>y<ept i="12">&lt;/c12&gt;</ept> is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="9" x="9">&lt;c9&gt;</bpt>x<ept i="9">&lt;/c9&gt;</ept>と<bpt i="10" x="10">&lt;c10&gt;</bpt>y<ept i="10">&lt;/c10&gt;</ept>の両方がNaN、または<bpt i="11" x="11">&lt;c11&gt;</bpt>x<ept i="11">&lt;/c11&gt;</ept>または<bpt i="12" x="12">&lt;c12&gt;</bpt>y<ept i="12">&lt;/c12&gt;</ept>のどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If both values are <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>, the operator returns <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>両方の値が<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>ならば、演算子は<bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If either of the values is <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>, the operator returns <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値のどちらかが<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>ならば、演算子は<bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If included, the exponent is separated by a single character, <bpt i="0" x="0">&lt;c0&gt;</bpt>e<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>E<ept i="1">&lt;/c1&gt;</ept>, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もし含むならば、指数は１つの文字<bpt i="0" x="0">&lt;c0&gt;</bpt>e<ept i="0">&lt;/c0&gt;</ept>もしくは<bpt i="1" x="1">&lt;c1&gt;</bpt>E<ept i="1">&lt;/c1&gt;</ept>によって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If included, the exponent is separated by a single character, <bpt i="0" x="0">&lt;c0&gt;</bpt>p<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>P<ept i="1">&lt;/c1&gt;</ept>, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もし含むならば、指数は１つの文字<bpt i="0" x="0">&lt;c0&gt;</bpt>p<ept i="0">&lt;/c0&gt;</ept>もしくは<bpt i="1" x="1">&lt;c1&gt;</bpt>P<ept i="1">&lt;/c1&gt;</ept>によって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If no elements in the collection match <bpt i="1" x="1">&lt;c1&gt;</bpt>belongsInSecondPartition<ept i="1">&lt;/c1&gt;</ept>, the returned index is equal to the collection’s <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの中の要素が１つも<bpt i="1" x="1">&lt;c1&gt;</bpt>belongsInSecondPartition<ept i="1">&lt;/c1&gt;</ept>に一致しないならば、返されるインデックスはコレクションの<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If no elements in the collection satisfy the given predicate, returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素が与えられた述部を満たすことがないならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If no such storage exists, it is first created.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのようなストレージが存在しないならば、それが最初に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If not, any value in <bpt i="2" x="2">&lt;c2&gt;</bpt>defaults[greetingKey]<ept i="2">&lt;/c2&gt;</ept> will succeed, and if not that, <bpt i="3" x="3">&lt;c3&gt;</bpt>greeting<ept i="3">&lt;/c3&gt;</ept> will be set to the non-optional default value, <bpt i="4" x="4">&lt;c4&gt;</bpt>"Greetings!"<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでないならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>defaults[greetingKey]<ept i="2">&lt;/c2&gt;</ept>の中の何らかの値が後を継ぎます、そしてそれもないならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>greeting<ept i="3">&lt;/c3&gt;</ept>は非オプショナルの省略時の値、<bpt i="4" x="4">&lt;c4&gt;</bpt>"Greetings!"<ept i="4">&lt;/c4&gt;</ept>に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the <bpt i="0" x="0">&lt;c0&gt;</bpt>Bound<ept i="0">&lt;/c0&gt;</ept> type has a maximal value, it can serve as an upper bound but can never be contained in a <bpt i="1" x="1">&lt;c1&gt;</bpt>CountableRange&lt;Bound&gt;<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Bound<ept i="0">&lt;/c0&gt;</ept>型が最大の値を持つならば、それは上側の境界としての務めを果たすことができますが、決して<bpt i="1" x="1">&lt;c1&gt;</bpt>CountableRange&lt;Bound&gt;<ept i="1">&lt;/c1&gt;</ept>インスタンスには含まれることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> instance is empty, <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> is equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>インスタンスが空ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> instance is empty, <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> is equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>インスタンスが空ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the UTF-8 view is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-8ビューが空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array grows larger than its capacity, it discards its current storage and allocates a larger one.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列がそれの容量より大きく成長するならば、それはそれの現在のストレージ（貯蔵所）を廃棄してより大きなものを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array is empty, <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept> is equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列が空ならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array is empty, these properties are <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その配列が空であるならば、これらのプロパティは<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array uses a bridged <bpt i="0" x="0">&lt;c0&gt;</bpt>NSArray<ept i="0">&lt;/c0&gt;</ept> instance as its storage, the efficiency is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この配列が、ブリッジされた<bpt i="0" x="0">&lt;c0&gt;</bpt>NSArray<ept i="0">&lt;/c0&gt;</ept>インスタンスをそれのストレージとして使うならば、効率は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array uses a bridged <bpt i="2" x="2">&lt;c2&gt;</bpt>NSArray<ept i="2">&lt;/c2&gt;</ept> instance as its storage, the efficiency is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この配列が、ブリッジされた<bpt i="2" x="2">&lt;c2&gt;</bpt>NSArray<ept i="2">&lt;/c2&gt;</ept>インスタンスをそれのストレージとして使うならば、効率は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the array’s <bpt i="5" x="5">&lt;c5&gt;</bpt>Element<ept i="5">&lt;/c5&gt;</ept> type is a struct or enumeration, <bpt i="6" x="6">&lt;c6&gt;</bpt>Array<ept i="6">&lt;/c6&gt;</ept> and <bpt i="7" x="7">&lt;c7&gt;</bpt>ContiguousArray<ept i="7">&lt;/c7&gt;</ept> should have similar efficiency.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の<bpt i="5" x="5">&lt;c5&gt;</bpt>Element<ept i="5">&lt;/c5&gt;</ept>型が構造体または列挙であるならば、<bpt i="6" x="6">&lt;c6&gt;</bpt>Array<ept i="6">&lt;/c6&gt;</ept>と<bpt i="7" x="7">&lt;c7&gt;</bpt>ContiguousArray<ept i="7">&lt;/c7&gt;</ept>は同じような効率を持つはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the call to <bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange(_:with:)<ept i="3">&lt;/c3&gt;</ept> simply removes characters at the end of the view, the complexity is O(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>), where <bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept> is equal to <bpt i="6" x="6">&lt;c6&gt;</bpt>bounds.count<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange(_:with:)<ept i="3">&lt;/c3&gt;</ept>への呼び出しが単にいくらかの文字をビューの終わりから削除するだけならば、計算量はO(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>)です、ここで<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>は<bpt i="6" x="6">&lt;c6&gt;</bpt>bounds.count<ept i="6">&lt;/c6&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the call to <bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange(_:with:)<ept i="3">&lt;/c3&gt;</ept> simply removes elements at the end of the string, the complexity is O(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>), where <bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept> is equal to <bpt i="6" x="6">&lt;c6&gt;</bpt>bounds.count<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange(_:with:)<ept i="3">&lt;/c3&gt;</ept>への呼び出しが単に要素を文字列の終わりから削除するだけならば、計算量はO(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>)です、ここで<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>は<bpt i="6" x="6">&lt;c6&gt;</bpt>bounds.count<ept i="6">&lt;/c6&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the call to <bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange(_:with:)<ept i="3">&lt;/c3&gt;</ept> simply removes text at the end of the string, the complexity is O(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>), where <bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept> is equal to <bpt i="6" x="6">&lt;c6&gt;</bpt>bounds.count<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange(_:with:)<ept i="3">&lt;/c3&gt;</ept>への呼び出しが単にテキストを文字列の終わりから削除するだけならば、計算量はO(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>)です、ここで<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>は<bpt i="6" x="6">&lt;c6&gt;</bpt>bounds.count<ept i="6">&lt;/c6&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the call to <bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange<ept i="3">&lt;/c3&gt;</ept> simply appends the contents of <bpt i="4" x="4">&lt;c4&gt;</bpt>newElements<ept i="4">&lt;/c4&gt;</ept> to the collection, the complexity is O(<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>), where <bpt i="6" x="6">&lt;e6&gt;</bpt>n<ept i="6">&lt;/e6&gt;</ept> is the length of <bpt i="7" x="7">&lt;c7&gt;</bpt>newElements<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>replaceSubrange<ept i="3">&lt;/c3&gt;</ept>への呼び出しが単に<bpt i="4" x="4">&lt;c4&gt;</bpt>newElements<ept i="4">&lt;/c4&gt;</ept>の内容をコレクションに追加するだけならば、計算量はO(<bpt i="5" x="5">&lt;e5&gt;</bpt>n<ept i="5">&lt;/e5&gt;</ept>)です、ここで<bpt i="6" x="6">&lt;e6&gt;</bpt>n<ept i="6">&lt;/e6&gt;</ept>は<bpt i="7" x="7">&lt;c7&gt;</bpt>newElements<ept i="7">&lt;/c7&gt;</ept>の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the closure has a return value, it is used as the return value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>withCString(_:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クロージャが戻り値を持つならば、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>withCString(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドの戻り値として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the closure has a return value, it is used as the return value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>withUTF8Buffer(invoke:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クロージャが戻り値を持つならば、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>withUTF8Buffer(invoke:)<ept i="0">&lt;/c0&gt;</ept>メソッドの戻り値として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the collection does not have sufficient capacity for another element, additional storage is allocated before appending <bpt i="0" x="0">&lt;c0&gt;</bpt>newElement<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが別の要素に対して十分な容量を持たないならば、追加のストレージが<bpt i="0" x="0">&lt;c0&gt;</bpt>newElement<ept i="0">&lt;/c0&gt;</ept>を追加する前に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the collection is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the collection is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the collection is empty, <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept> is equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが空ならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the collection is empty, <bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept> is equal to <bpt i="4" x="4">&lt;c4&gt;</bpt>startIndex<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書が空ならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>startIndex<ept i="4">&lt;/c4&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the collection is empty, the value of this property is <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが空であるならば、このプロパティは<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dictionary doesn’t contain the key, the key and value are added as a new key-value pair.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書がそのキーを含まないならば、キーと値は新しいキー値ペアとして加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dictionary wraps a bridged <bpt i="1" x="1">&lt;c1&gt;</bpt>NSDictionary<ept i="1">&lt;/c1&gt;</ept>, the performance is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書が、ブリッジされた<bpt i="1" x="1">&lt;c1&gt;</bpt>NSDictionary<ept i="1">&lt;/c1&gt;</ept>をラップするならば、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dynamic type of <bpt i="0" x="0">&lt;c0&gt;</bpt>obj<ept i="0">&lt;/c0&gt;</ept> doesn’t implement a <bpt i="1" x="1">&lt;c1&gt;</bpt>getIntegerValue()<ept i="1">&lt;/c1&gt;</ept> method, the system returns a runtime error when you initialize <bpt i="2" x="2">&lt;c2&gt;</bpt>certainValue<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>obj<ept i="0">&lt;/c0&gt;</ept>の動的型が<bpt i="1" x="1">&lt;c1&gt;</bpt>getIntegerValue()<ept i="1">&lt;/c1&gt;</ept>メソッドを実装しないならば、システムは実行時エラーをあなたが<bpt i="2" x="2">&lt;c2&gt;</bpt>certainValue<ept i="2">&lt;/c2&gt;</ept>を初期化する時に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dynamic type of <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomPlaygroundQuickLookable<ept i="1">&lt;/c1&gt;</ept>, returns the result of calling its <bpt i="2" x="2">&lt;c2&gt;</bpt>customPlaygroundQuickLook<ept i="2">&lt;/c2&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>の動的な型が<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomPlaygroundQuickLookable<ept i="1">&lt;/c1&gt;</ept>に準拠するならば、それの<bpt i="2" x="2">&lt;c2&gt;</bpt>customPlaygroundQuickLook<ept i="2">&lt;/c2&gt;</ept>プロパティを呼び出すことの結果が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dynamic type of <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomReflectable<ept i="1">&lt;/c1&gt;</ept>, the resulting mirror is determined by its <bpt i="2" x="2">&lt;c2&gt;</bpt>customMirror<ept i="2">&lt;/c2&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>の動的な型が<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomReflectable<ept i="1">&lt;/c1&gt;</ept>に準拠するならば、結果として生じるミラーは、それの<bpt i="2" x="2">&lt;c2&gt;</bpt>customMirror<ept i="2">&lt;/c2&gt;</ept>プロパティによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dynamic type of <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> has value semantics, subsequent mutations of <bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept> will not observable in <bpt i="2" x="2">&lt;c2&gt;</bpt>Mirror<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>の動的な型が値意味論を持つならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept>の下位セグメント変異体たちは<bpt i="2" x="2">&lt;c2&gt;</bpt>Mirror<ept i="2">&lt;/c2&gt;</ept>の中で見分けがつかないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列に属する要素らがクラスのインスタンスらであるならば、意味論は同じです、にもかかわらずそれらは最初は異なっているように思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the given key is found in the dictionary, this method returns an index into the dictionary that corresponds with the key-value pair.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたキーがこの辞書の中に見つかるならば、このメソッドは辞書の中へのあるインデックスを返し、それがそのキー値ペアに対応するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the given key is not present in the dictionary, this method adds the key-value pair and returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたキーがこの辞書の中に存在しないならば、このメソッドはそのキー値ペアを加えて<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the key is found in the dictionary, this method returns the key’s associated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キーが辞書の中に見つけられるならば、このメソッドはそのキーの結び付けられる値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the key isn’t found in the dictionary, <bpt i="0" x="0">&lt;c0&gt;</bpt>removeValue(forKey:)<ept i="0">&lt;/c0&gt;</ept> returns <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キーがコレクションの中に見つけられないならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>removeValue(forKey:)<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最大長がコレクションの要素の数を超えるならば、結果はコレクションの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最大長がコレクションの要素の数を超えるならば、結果はコレクション全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最大長がシーケンスの要素の数を超えるならば、結果はシーケンスの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the memory is bound to type <bpt i="0" x="0">&lt;c0&gt;</bpt>U<ept i="0">&lt;/c0&gt;</ept>, then it now contains a value of type <bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリが型<bpt i="0" x="0">&lt;c0&gt;</bpt>U<ept i="0">&lt;/c0&gt;</ept>へ束縛されるならば、それではそれは今では型<bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>の値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the memory is bound to type <bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>, then it contains values of type <bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリが型<bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>へ束縛されるならば、そのときそれは型<bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>の値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省かれることになる要素の数がコレクションの要素の数を超えるならば、結果は空の下位シーケンスになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>取り除く要素の数がシーケンスの要素数を超えるならば、結果は空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the passed instance conforms to <bpt i="3" x="3">&lt;c3&gt;</bpt>CustomStringConvertible<ept i="3">&lt;/c3&gt;</ept>, the <bpt i="4" x="4">&lt;c4&gt;</bpt>String(describing:)<ept i="4">&lt;/c4&gt;</ept> initializer and the <bpt i="5" x="5">&lt;c5&gt;</bpt>print(_:)<ept i="5">&lt;/c5&gt;</ept> function use the instance’s custom <bpt i="6" x="6">&lt;c6&gt;</bpt>description<ept i="6">&lt;/c6&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>渡されたインスタンスが<bpt i="3" x="3">&lt;c3&gt;</bpt>CustomStringConvertible<ept i="3">&lt;/c3&gt;</ept>に準拠するならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>String(describing:)<ept i="4">&lt;/c4&gt;</ept>イニシャライザと<bpt i="5" x="5">&lt;c5&gt;</bpt>print(_:)<ept i="5">&lt;/c5&gt;</ept>関数はそのインスタンスのあつらえの<bpt i="6" x="6">&lt;c6&gt;</bpt>description<ept i="6">&lt;/c6&gt;</ept>プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the payload contains any other characters, it is ignored.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ペイロードが何か他の文字を含むならば、それは無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the position passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8Index<ept i="0">&lt;/c0&gt;</ept> doesn’t have an exact corresponding position in <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>, the result of the initializer is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>utf8Index<ept i="0">&lt;/c0&gt;</ept>として渡された位置がまさにその対応する位置を<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>において持たないならば、イニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the position passed in <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16Index<ept i="0">&lt;/c0&gt;</ept> doesn’t have an exact corresponding position in <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>, the result of the initializer is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>utf16Index<ept i="0">&lt;/c0&gt;</ept>に渡された位置がまさにその対応する位置を<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>において持たないならば、イニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the sequence has no elements, returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが要素を持たないならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the sequence has no elements, returns <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが要素を持たないならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the sequence has no elements, the result is an empty subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが１つも要素を持たないならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the set already contains one or more elements that are also in <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, the existing members are kept.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の中にもある１つ以上の要素をこの集合がすでに含むならば、既存のメンバはそのままにしておかれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the set is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the set is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the set is empty, returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the set is empty, the value of this property is <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合が空であるならば、このプロパティは<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the static string stores a single Unicode scalar value, the value of <bpt i="0" x="0">&lt;c0&gt;</bpt>isASCII<ept i="0">&lt;/c0&gt;</ept> is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列が単一のユニコードスカラー値を格納するならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>isASCII<ept i="0">&lt;/c0&gt;</ept>の値は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the static string stores a single Unicode scalar value, the value of <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8CodeUnitCount<ept i="0">&lt;/c0&gt;</ept> is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列が単一のユニコードスカラー値を格納するならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8CodeUnitCount<ept i="0">&lt;/c0&gt;</ept>の値は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the string is empty, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the two ranges do not overlap, the result is a single-element range at the upper or lower bound of <bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの範囲が重ならないならば、結果は<bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>の上方または下方での単一要素範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the two ranges do not overlap, the result is an empty range within the bounds of <bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの範囲が重ならないならば、結果は<bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>の境界内の空の範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the two sequences passed to <bpt i="0" x="0">&lt;c0&gt;</bpt>zip(_:_:)<ept i="0">&lt;/c0&gt;</ept> are different lengths, the resulting sequence is the same length as the shorter sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>zip(_:_:)<ept i="0">&lt;/c0&gt;</ept>に渡された２つのシーケンスが異なる長さであるならは、結果のシーケンスはより短いシーケンスと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the type supports subnormal values, <bpt i="0" x="0">&lt;c0&gt;</bpt>leastNonzeroMagnitude<ept i="0">&lt;/c0&gt;</ept> is smaller than <bpt i="1" x="1">&lt;c1&gt;</bpt>leastNormalMagnitude<ept i="1">&lt;/c1&gt;</ept>; otherwise they are equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その型がサブノーマル値をサポートするならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>leastNonzeroMagnitude<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>leastNormalMagnitude<ept i="1">&lt;/c1&gt;</ept>より小さいです；そうでなければそれらは等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the underlying collection stored by <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> does not satisfy <bpt i="1" x="1">&lt;c1&gt;</bpt>BidirectionalCollection<ept i="1">&lt;/c1&gt;</ept>, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>によって格納される基礎をなすコレクションが<bpt i="1" x="1">&lt;c1&gt;</bpt>BidirectionalCollection<ept i="1">&lt;/c1&gt;</ept>の条件を満たさないならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the underlying collection stored by <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> does not satisfy <bpt i="1" x="1">&lt;c1&gt;</bpt>RandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>, the result is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>によって格納される基礎をなすコレクションが<bpt i="1" x="1">&lt;c1&gt;</bpt>RandomAccessCollection<ept i="1">&lt;/c1&gt;</ept>の条件を満たさないならば、結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value is <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>, the result of the operation is <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>; if the value is <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>, the result is <bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値が<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>ならば、この演算の結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>です；値が<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>ならば、結果は<bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value of an existing key is updated, <bpt i="0" x="0">&lt;c0&gt;</bpt>updateValue(_:forKey:)<ept i="0">&lt;/c0&gt;</ept> returns the original value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>既存のキーの値が更新されるならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>updateValue(_:forKey:)<ept i="0">&lt;/c0&gt;</ept>は元の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a <bpt i="3" x="3">&lt;c3&gt;</bpt>Double.nan<ept i="3">&lt;/c3&gt;</ept>, the least significant bits are used.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ペイロードの値が<bpt i="3" x="3">&lt;c3&gt;</bpt>Double.nan<ept i="3">&lt;/c3&gt;</ept>のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a <bpt i="3" x="3">&lt;c3&gt;</bpt>Float.nan<ept i="3">&lt;/c3&gt;</ept>, the least significant bits are used.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ペイロードの値が<bpt i="3" x="3">&lt;c3&gt;</bpt>Float.nan<ept i="3">&lt;/c3&gt;</ept>のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a <bpt i="3" x="3">&lt;c3&gt;</bpt>Float80.nan<ept i="3">&lt;/c3&gt;</ept>, the least significant bits are used.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ペイロードの値が<bpt i="3" x="3">&lt;c3&gt;</bpt>Float80.nan<ept i="3">&lt;/c3&gt;</ept>のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value you pass to <bpt i="0" x="0">&lt;c0&gt;</bpt>significand<ept i="0">&lt;/c0&gt;</ept> is NaN, the result is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>significand<ept i="0">&lt;/c0&gt;</ept>に渡す値がNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value you pass to <bpt i="0" x="0">&lt;c0&gt;</bpt>significand<ept i="0">&lt;/c0&gt;</ept> is zero or infinite, the result is zero or infinite, regardless of the value of <bpt i="1" x="1">&lt;c1&gt;</bpt>exponent<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>significand<ept i="0">&lt;/c0&gt;</ept>に渡す値がゼロまたは無限大ならば、結果はゼロまたは無限大です、<bpt i="1" x="1">&lt;c1&gt;</bpt>exponent<ept i="1">&lt;/c1&gt;</ept>の値に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>復旧の助けになりうるそのエラーについての追加の詳細があるならば、関連値を使ってその情報を含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there are multiple equal greatest arguments, returns the last one.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>等しい最大の引数が複数あるならば、最後のものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there are multiple equal greatest arguments, the result is the last one.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>等しい最大の引数が複数あるならば、結果は最後のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there are multiple equal least arguments, returns the first one.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>等しい最少の引数が複数あるならば、最初のものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there are multiple equal least arguments, the result is the first one.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複数の最も少ない引数があるならば、結果は最初の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there is no upper limit, then <bpt i="1" x="1">&lt;c1&gt;</bpt>significandBitCount<ept i="1">&lt;/c1&gt;</ept> should be <bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>上限がないならば、そのとき<bpt i="1" x="1">&lt;c1&gt;</bpt>significandBitCount<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If there is no value of the type that corresponds with the specified raw value, this initializer returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された生の値に対応する型の値が１つもないならば、このイニシャライザは<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this index does not have an exact corresponding position in <bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept>, this method returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスがまさにその対応する位置を<bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept>において持たないならば、イニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this index does not have an exact corresponding position in <bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalars<ept i="1">&lt;/c1&gt;</ept>, this method returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスがまさにその対応する位置を<bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalars<ept i="1">&lt;/c1&gt;</ept>において持たないならば、イニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this index does not have an exact corresponding position in <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>, this method returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスがまさにその対応する位置を<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>において持たないならば、イニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this index does not have an exact corresponding position in <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>, this method returns <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスがまさにその対応する位置を<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>において持たないならば、イニシャライザの結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this instance is <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>, returns <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスが<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>ならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this type has value semantics, the <bpt i="0" x="0">&lt;c0&gt;</bpt>PlaygroundQuickLook<ept i="0">&lt;/c0&gt;</ept> instance should be unaffected by subsequent mutations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型が値意味論を持つならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>PlaygroundQuickLook<ept i="0">&lt;/c0&gt;</ept>はその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型が値意味論を持つならば、ミラーはインスタンスのその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> are both finite numbers, the truncating remainder has the same sign as <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> and is strictly smaller in magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>が両方とも有限の数ならば、切り捨てられる余りは<bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>と同じ符号を持ち、そして厳密に同じ規模になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> are finite numbers, the remainder is in the closed range <bpt i="1" x="1">&lt;c1&gt;</bpt>-abs(other / 2)...abs(other / 2)<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>が有限数ならば、あまりは完結範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>-abs(other / 2)...abs(other / 2)<ept i="1">&lt;/c1&gt;</ept>の中に入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this value is a finite nonzero number, <bpt i="0" x="0">&lt;c0&gt;</bpt>significandWidth<ept i="0">&lt;/c0&gt;</ept> is the number of fractional bits required to represent the value of <bpt i="1" x="1">&lt;c1&gt;</bpt>significand<ept i="1">&lt;/c1&gt;</ept>; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>significandWidth<ept i="2">&lt;/c2&gt;</ept> is -1.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値が有限の非ゼロ数ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>significandWidth<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>significand<ept i="1">&lt;/c1&gt;</ept>の値を表すのに必要とされる小数部ビットの数です；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>significandWidth<ept i="2">&lt;/c2&gt;</ept>は-1です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの表現可能な値が同等であるくらい近いならば、結果はその仮数ビットパターンにおいてより多く後ろに続くゼロを持つ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが数のわかった要素をコレクションに加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are adding a known number of elements to an array, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが数のわかった要素を配列に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are not satisfied with the representation supplied for your type by default, you can make it conform to the <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomPlaygroundQuickLookable<ept i="1">&lt;/c1&gt;</ept> protocol and provide a custom <bpt i="2" x="2">&lt;c2&gt;</bpt>PlaygroundQuickLook<ept i="2">&lt;/c2&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが初期状態であなたの型に対して提供される表現に満足しないならば、あなたはそれを<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomPlaygroundQuickLookable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠するようにして、あつらえの<bpt i="2" x="2">&lt;c2&gt;</bpt>PlaygroundQuickLook<ept i="2">&lt;/c2&gt;</ept>インスタンスを提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are sorting strings to present to the end user, use <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> APIs that perform localized comparison instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、代わりに<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are sorting strings to present to the end user, use <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> APIs that perform localized comparison.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing a collection and mutations need to invalidate indices, don’t use <bpt i="2" x="2">&lt;c2&gt;</bpt>MutableBidirectionalSlice<ept i="2">&lt;/c2&gt;</ept> as its subsequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがインデックスを無効にする必要があるあるコレクションや変異体らを書いているならば、それの下位シーケンス型として<bpt i="2" x="2">&lt;c2&gt;</bpt>MutableBidirectionalSlice<ept i="2">&lt;/c2&gt;</ept>を使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing a collection and mutations need to invalidate indices, don’t use <bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRandomAccessSlice<ept i="2">&lt;/c2&gt;</ept> as its subsequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがインデックスを無効にする必要があるあるコレクションや変異体らを書いているならば、それの下位シーケンス型として<bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRandomAccessSlice<ept i="2">&lt;/c2&gt;</ept>を使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing a collection and mutations need to invalidate indices, don’t use <bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRangeReplaceableBidirectionalSlice<ept i="2">&lt;/c2&gt;</ept> as its subsequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがインデックスを無効にする必要があるあるコレクションや変異体らを書いているならば、それの下位シーケンス型として<bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRangeReplaceableBidirectionalSlice<ept i="2">&lt;/c2&gt;</ept>を使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing a collection and mutations need to invalidate indices, don’t use <bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRangeReplaceableRandomAccessSlice<ept i="2">&lt;/c2&gt;</ept> as its subsequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがインデックスを無効にする必要があるあるコレクションや変異体らを書いているならば、それの下位シーケンス型として<bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRangeReplaceableRandomAccessSlice<ept i="2">&lt;/c2&gt;</ept>を使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing a collection and mutations need to invalidate indices, don’t use <bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRangeReplaceableSlice<ept i="2">&lt;/c2&gt;</ept> as its subsequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがインデックスを無効にする必要があるあるコレクションや変異体らを書いているならば、それの下位シーケンス型として<bpt i="2" x="2">&lt;c2&gt;</bpt>MutableRangeReplaceableSlice<ept i="2">&lt;/c2&gt;</ept>を使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing a collection and mutations need to invalidate indices, don’t use <bpt i="2" x="2">&lt;c2&gt;</bpt>MutableSlice<ept i="2">&lt;/c2&gt;</ept> as its subsequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがインデックスを無効にする必要があるあるコレクションや変異体らを書いているならば、それの下位シーケンス型として<bpt i="2" x="2">&lt;c2&gt;</bpt>MutableSlice<ept i="2">&lt;/c2&gt;</ept>を使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you assign <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> as the value for the given key, the dictionary removes that key and its associated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが与えられたキーに値として<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を割り当てるならば、辞書はそのキーとそれの結び付けられた値を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you assign <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> to an existing key, the key and its associated value are removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を既存のキーに割り当てるならば、そのキーとそれの関連値は削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you change a reference to an object in one array, only that array has a reference to the new object.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがある配列におけるあるオブジェクトへの参照を変更するならば、単にその配列が新しいオブジェクトへの参照を持つだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> protocol in order to give a more useful and more efficient interface for sequence and collection operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがそれの要素に繰り返しアクセスを提供できるあつらえのシーケンスを作成しているならば、より実用的でより効率的なインターフェイスをシーケンスおよびコレクション演算に与えるために、それの型が<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠するのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you have prior knowledge that an <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept> instance has a particular type, you can use the unconditional downcast operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>as!<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept>インスタンスがある特定の型を持つという事前の知識を持つならば、無条件のダウンキャスト演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>as!<ept i="1">&lt;/c1&gt;</ept>）を使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you know approximately how many elements you will need to store, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept> method before appending to the array to avoid intermediate reallocations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>どのくらい多くの要素をあなたが格納する必要があるかをあなたがおおよそ知っているならば、配列に追加する前に<bpt i="0" x="0">&lt;c0&gt;</bpt>reserveCapacity(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って中間的な再割り当てを回避するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期されない複製を引き起すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが同じ型での逆にされたコレクションを必要とするならば、あなたはコレクションのもつシーケンス基盤のまたはコレクション基盤のイニシャライザを使うことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need an array that is preinitialized with a fixed number of default values, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>Array(repeating:count:)<ept i="0">&lt;/c0&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがある固定された数の省略時の値であらかじめ初期化される配列を必要とするならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>Array(repeating:count:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need an ordered collection of key-value pairs and don’t need the fast key lookup that <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept> provides, see the <bpt i="1" x="1">&lt;c1&gt;</bpt>DictionaryLiteral<ept i="1">&lt;/c1&gt;</ept> type for an alternative.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが順番付けられたキー値ペアのコレクションを必要とするそして<bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept>が提供する高速な検索を必要としないならば、代わりのものとして<bpt i="1" x="1">&lt;c1&gt;</bpt>DictionaryLiteral<ept i="1">&lt;/c1&gt;</ept>型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to access a specific position in a UTF-16 view, use Swift’s index manipulation methods.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがUTF-16ビューにおいて特定の位置にアクセスする必要があるならば、Swiftのインデックス操作メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to create a range that includes the maximal value of its <bpt i="0" x="0">&lt;c0&gt;</bpt>Bound<ept i="0">&lt;/c0&gt;</ept> type, see the <bpt i="1" x="1">&lt;c1&gt;</bpt>CountableClosedRange<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがそれの<bpt i="0" x="0">&lt;c0&gt;</bpt>Bound<ept i="0">&lt;/c0&gt;</ept>型の最大の値を含む範囲を作成する必要があるならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>CountableClosedRange<ept i="1">&lt;/c1&gt;</ept>型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to iterate over consecutive floating-point values, see the <bpt i="4" x="4">&lt;c4&gt;</bpt>stride(from:through:by:)<ept i="4">&lt;/c4&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが連続した不動小数点値にわたって反復適用していく必要があるならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>stride(from:through:by:)<ept i="4">&lt;/c4&gt;</ept>関数を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to iterate over consecutive floating-point values, see the <bpt i="4" x="4">&lt;c4&gt;</bpt>stride(from:to:by:)<ept i="4">&lt;/c4&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが連続した不動小数点値にわたって反復適用していく必要があるならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>stride(from:to:by:)<ept i="4">&lt;/c4&gt;</ept>関数を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to pass those keys to a method that takes an array, however, use this initializer to convert that list from its type of <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection&lt;Dictionary&lt;String, Int&gt;, Int&gt;<ept i="1">&lt;/c1&gt;</ept> to a simple <bpt i="2" x="2">&lt;c2&gt;</bpt>[String]<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、あなたが配列を取るメソッドにそれらキーを渡す必要があるならば、このイニシャライザを使ってそのリストをそれの型の<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection&lt;Dictionary&lt;String, Int&gt;, Int&gt;<ept i="1">&lt;/c1&gt;</ept>から単純な<bpt i="2" x="2">&lt;c2&gt;</bpt>[String]<ept i="2">&lt;/c2&gt;</ept>へ変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to test whether values are contained within a closed interval bound by floating-point values, see the <bpt i="3" x="3">&lt;c3&gt;</bpt>ClosedRange<ept i="3">&lt;/c3&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが、いくつかの値がある完結間隔境界内に含まれるかどうかを、いくつかの浮動小数点値によってテストする必要があるならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>ClosedRange<ept i="3">&lt;/c3&gt;</ept>型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to test whether values are contained within an interval bound by floating-point values, see the <bpt i="3" x="3">&lt;c3&gt;</bpt>Range<ept i="3">&lt;/c3&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが、いくつかの値がある間隔境界内に含まれるかどうかを、いくつかの浮動小数点値によってテストする必要があるならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>Range<ept i="3">&lt;/c3&gt;</ept>型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>, the operation preserves the storage capacity that the collection has, otherwise the underlying storage is released.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡すならば、演算はそのコレクションが持つストレージ容量を保全します、そうでなければ基礎をなすストレージは解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass a zero-length range as the <bpt i="0" x="0">&lt;c0&gt;</bpt>subrange<ept i="0">&lt;/c0&gt;</ept> parameter, this method inserts the elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>newElements<ept i="1">&lt;/c1&gt;</ept> at <bpt i="2" x="2">&lt;c2&gt;</bpt>subrange.startIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがゼロ長範囲を<bpt i="0" x="0">&lt;c0&gt;</bpt>subrange<ept i="0">&lt;/c0&gt;</ept>パラメータとして渡すならば、このメソッドは<bpt i="1" x="1">&lt;c1&gt;</bpt>newElements<ept i="1">&lt;/c1&gt;</ept>の要素を<bpt i="2" x="2">&lt;c2&gt;</bpt>subrange.startIndex<ept i="2">&lt;/c2&gt;</ept>で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass the array’s <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> property as the <bpt i="1" x="1">&lt;c1&gt;</bpt>index<ept i="1">&lt;/c1&gt;</ept> parameter, the new element is appended to the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが配列の<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>プロパティを<bpt i="1" x="1">&lt;c1&gt;</bpt>index<ept i="1">&lt;/c1&gt;</ept>パラメータとして渡すならば、新しい要素が配列に追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass the collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> property as the <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept> parameter, the new element is appended to the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがコレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>プロパティを<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>パラメータとして渡すならば、新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass the collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> property as the <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept> parameter, the new elements are appended to the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがコレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>プロパティを<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>パラメータとして渡すならば、新しいいくらかの要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが数のわかった要素をコレクションに加えることになっているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If your array’s <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type is a class or <bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept> protocol and you do not need to bridge the array to <bpt i="2" x="2">&lt;c2&gt;</bpt>NSArray<ept i="2">&lt;/c2&gt;</ept> or pass the array to Objective-C APIs, using <bpt i="3" x="3">&lt;c3&gt;</bpt>ContiguousArray<ept i="3">&lt;/c3&gt;</ept> may be more efficient and have more predictable performance than <bpt i="4" x="4">&lt;c4&gt;</bpt>Array<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたの配列の<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型がクラスまたは<bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept>プロトコルで、あなたがその配列を<bpt i="2" x="2">&lt;c2&gt;</bpt>NSArray<ept i="2">&lt;/c2&gt;</ept>にブリッジしたりその配列をObjective-C APIに渡したりする必要がないならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>ContiguousArray<ept i="3">&lt;/c3&gt;</ept>を使うことは<bpt i="4" x="4">&lt;c4&gt;</bpt>Array<ept i="4">&lt;/c4&gt;</ept>よりもより効率的でありそしてより予測どおりの性能を持つでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you’re sure of the dynamic type of <bpt i="6" x="6">&lt;c6&gt;</bpt>obj<ept i="6">&lt;/c6&gt;</ept>, you can call <bpt i="7" x="7">&lt;c7&gt;</bpt>getIntegerValue()<ept i="7">&lt;/c7&gt;</ept> directly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="6" x="6">&lt;c6&gt;</bpt>obj<ept i="6">&lt;/c6&gt;</ept>の動的型に確信を持つならば、あなたは<bpt i="7" x="7">&lt;c7&gt;</bpt>getIntegerValue()<ept i="7">&lt;/c7&gt;</ept>を直接に呼び出すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ill-formed sequences are replaced with the Unicode replacement character (<bpt i="2" x="2">&lt;c2&gt;</bpt>"\u{FFFD}"<ept i="2">&lt;/c2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>誤形式シーケンスは、ユニコード代替文字（<bpt i="2" x="2">&lt;c2&gt;</bpt>"\u{FFFD}"<ept i="2">&lt;/c2&gt;</ept>）で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Imagine you have a set of temperature data for which you need to report some general statistics: the total number of observations, the number of valid observations, and the average temperature.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが幾つかの一般統計：観測総数、有効観測数、そして平均温度を報告しなければならない一揃いの温度データを持つと想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implementing an iterator that conforms to <bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept> is simple.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept>に準拠するイテレータを実装するのは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Important</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In -O builds, has no effect.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>-Oビルドでは、影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In -Ounchecked builds, the optimizer may assume that this function is never called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>-Ouncheckedビルドでは、最適化はこの関数が決して呼ばれないと決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i="0" x="0">&lt;c0&gt;</bpt>-O<ept i="0">&lt;/c0&gt;</ept> builds (the default for Xcode’s Release configuration), <bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept> is not evaluated, and there are no effects.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-O<ept i="0">&lt;/c0&gt;</ept>ビルド（省略時のXcodeのRelease構成）では、<bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept>は評価されません、そして影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i="0" x="0">&lt;c0&gt;</bpt>-O<ept i="0">&lt;/c0&gt;</ept> builds (the default for Xcode’s Release configuration), stops program execution.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-O<ept i="0">&lt;/c0&gt;</ept>ビルド（XcodeのRelease構成の初期設定）では、プログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i="0" x="0">&lt;c0&gt;</bpt>-O<ept i="0">&lt;/c0&gt;</ept> builds (the default for Xcode’s Release configuration): If <bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept> evaluates to <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>, stop program execution.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-O<ept i="0">&lt;/c0&gt;</ept>ビルド（省略時のXcodeのRelease構成）では：<bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>に評価されるならば、プログラム実行を止めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i="0" x="0">&lt;c0&gt;</bpt>-Ounchecked<ept i="0">&lt;/c0&gt;</ept> builds, <bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept> is not evaluated, but the optimizer may assume that it <bpt i="2" x="2">&lt;e2&gt;</bpt>always<ept i="2">&lt;/e2&gt;</ept> evaluates to <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-Ounchecked<ept i="0">&lt;/c0&gt;</ept>ビルドにおいて、<bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept>は評価されません、しかし最適化は、それが<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>に<bpt i="2" x="2">&lt;e2&gt;</bpt>常に<ept i="2">&lt;/e2&gt;</ept>評価されると決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i="0" x="0">&lt;c0&gt;</bpt>-Ounchecked<ept i="0">&lt;/c0&gt;</ept> builds, the optimizer may assume that this function is never called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>-Ounchecked<ept i="0">&lt;/c0&gt;</ept>ビルドでは、最適化はこの関数が決して呼ばれないと決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Swift, <bpt i="0" x="0">&lt;e0&gt;</bpt>reachability<ept i="0">&lt;/e0&gt;</ept> refers to the ability to produce one value from the other through zero or more applications of <bpt i="1" x="1">&lt;c1&gt;</bpt>index(after:)<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftでは、<bpt i="0" x="0">&lt;e0&gt;</bpt>到達可能性 reachability<ept i="0">&lt;/e0&gt;</ept>は、ゼロ以上の<bpt i="1" x="1">&lt;c1&gt;</bpt>index(after:)<ept i="1">&lt;/c1&gt;</ept>の適用を通して、ある値を別のものから生み出す能力のことを言います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Swift, every string provides a view of its contents as characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftでは、あらゆる文字列はそれの内容のビューを文字列として提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Swift, only class instances and metatypes have unique identities.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スウィフトでは、クラスインスタンスとメタタイプだけが固有な識別子を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a <bpt i="0" x="0">&lt;c0&gt;</bpt>CollectionOfOne<ept i="0">&lt;/c0&gt;</ept> instance, <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> is always identical to <bpt i="2" x="2">&lt;c2&gt;</bpt>index(after: startIndex)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>CollectionOfOne<ept i="0">&lt;/c0&gt;</ept>インスタンスにおいて、<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>は常に<bpt i="2" x="2">&lt;c2&gt;</bpt>index(after: startIndex)<ept i="2">&lt;/c2&gt;</ept>と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a <bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated<ept i="0">&lt;/c0&gt;</ept> collection, <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> is always equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated<ept i="0">&lt;/c0&gt;</ept>コレクションにおいて、<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>は常に<bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a <bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated<ept i="0">&lt;/c0&gt;</ept> collection, <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> is always equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated<ept i="0">&lt;/c0&gt;</ept>コレクションにおいて、<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>は常にゼロと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a <bpt i="0" x="0">&lt;c0&gt;</bpt>Zip2Sequence<ept i="0">&lt;/c0&gt;</ept> instance, the elements of the <bpt i="1" x="1">&lt;e1&gt;</bpt>i<ept i="1">&lt;/e1&gt;</ept>th pair are the <bpt i="2" x="2">&lt;e2&gt;</bpt>i<ept i="2">&lt;/e2&gt;</ept>th elements of each underlying sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Zip2Sequence<ept i="0">&lt;/c0&gt;</ept>インスタンスにおいて、<bpt i="1" x="1">&lt;e1&gt;</bpt>i<ept i="1">&lt;/e1&gt;</ept>番目の対に属する要素らは、基盤となるシーケンスそれぞれの<bpt i="2" x="2">&lt;e2&gt;</bpt>i<ept i="2">&lt;/e2&gt;</ept>番目の要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a collection, the subsequence should also conform to <bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションにおいて、下位シーケンスはまた<bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>に準拠すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a mutable <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept> instance, you can modify in place a value that you’ve accessed through a keyed subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>可変の<bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept>インスタンスでは、あなたがキーによる添え字を通してアクセスしたある値をその場で修正できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to changing the value of an individual element, you can also change the values of a slice of elements in a mutable collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある一個の要素の値を変えることに加えて、あなたはまた可変コレクションの要素のスライスに属するいくらかの値を変更することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to representing specific numbers, floating-point types also have special values for working with overflow and nonnumeric results of calculation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特定の数を表すことに加えて、浮動小数点型はまた、オーバーフローおよび非数の計算結果で使うための特別な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept> type’s set operations, you can use any nonmutating sequence or collection methods with a set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept>型の持つ集合演算に加えて、あなたはあらゆる非可変のシーケンスまたはコレクションメソッドを集合で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to the methods that collections inherit from the <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol, you gain access to methods that depend on accessing an element at a specific position when using a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルから継承するメソッドに加えて、あなたは、コレクション使用時に特定の位置での要素へのアクセスを当てにするメソッドへのアクセスを手に入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, because <bpt i="1" x="1">&lt;c1&gt;</bpt>abs(_:)<ept i="1">&lt;/c1&gt;</ept> always returns a value of the same type, even in a generic context, using the function instead of the <bpt i="2" x="2">&lt;c2&gt;</bpt>magnitude<ept i="2">&lt;/c2&gt;</ept> property is encouraged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加えて、<bpt i="1" x="1">&lt;c1&gt;</bpt>abs(_:)<ept i="1">&lt;/c1&gt;</ept>は常に同じ型の値を返すことから、総称体の文脈においてさえも、この関数を<bpt i="2" x="2">&lt;c2&gt;</bpt>magnitude<ept i="2">&lt;/c2&gt;</ept>プロパティの代わりに使うことは推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, because <bpt i="2" x="2">&lt;c2&gt;</bpt>IntegerRef<ept i="2">&lt;/c2&gt;</ept> conforms to the <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept> protocol, instances can also be compared using the equal-to operator (<bpt i="4" x="4">&lt;c4&gt;</bpt>==<ept i="4">&lt;/c4&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加えて、<bpt i="2" x="2">&lt;c2&gt;</bpt>IntegerRef<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>プロトコルに準拠することから、インスタンスはまた同等性演算子（<bpt i="4" x="4">&lt;c4&gt;</bpt>==<ept i="4">&lt;/c4&gt;</ept>）を使って比較されることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as <bpt i="3" x="3">&lt;c3&gt;</bpt>suffix(_:)<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>さらに加えて、二方向性のコレクションはいくらかのシーケンスおよびコレクションメソッドのもっと手際の良い実装を持ちます、例えば<bpt i="3" x="3">&lt;c3&gt;</bpt>suffix(_:)<ept i="3">&lt;/c3&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, the following conditions must hold:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加えて、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, there are two other edge cases:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>加えて、２つの別の境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty UTF-16 view, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のUTF-16ビューにおいて、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty UTF-8 view, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のUTF-8ビューにおいて、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty Unicode scalars view, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のユニコードスカラービューにおいて、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty character view, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の文字ビューにおいて、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty character view, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の文字ビューにおいて、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty collection, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex == endIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のコレクションでは、<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex == endIndex<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty range, <bpt i="0" x="0">&lt;c0&gt;</bpt>lowerBound<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>upperBound<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の範囲では、<bpt i="0" x="0">&lt;c0&gt;</bpt>lowerBound<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>upperBound<ept i="1">&lt;/c1&gt;</ept>に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty range, <bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>lowerBound<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の範囲では、<bpt i="0" x="0">&lt;c0&gt;</bpt>upperBound<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>lowerBound<ept i="1">&lt;/c1&gt;</ept>に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty string, <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が空ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In an empty string, <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> is equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の文字列において、<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In case an invalid input value, nil is returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無効な入力値の場合、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In case of an invalid input value, nil is returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無効な入力値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In case of an invalid unicode scalar value, nil is returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無効なユニコードスカラー値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In code, the absence of a value is typically written using the <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> literal rather than the explicit <bpt i="1" x="1">&lt;c1&gt;</bpt>.none<ept i="1">&lt;/c1&gt;</ept> enumeration case.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コードにおいて、ある値の不在は一般的に<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>リテラルを使って書かれます、明示的な<bpt i="1" x="1">&lt;c1&gt;</bpt>.none<ept i="1">&lt;/c1&gt;</ept>列挙ケース節ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In debug builds (<bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept>), the <bpt i="1" x="1">&lt;c1&gt;</bpt>unsafelyUnwrapped<ept i="1">&lt;/c1&gt;</ept> property has the same behavior as using the postfix <bpt i="2" x="2">&lt;c2&gt;</bpt>!<ept i="2">&lt;/c2&gt;</ept> operator and triggers a runtime error if the instance is <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>デバッグビルド（<bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept>）において、<bpt i="1" x="1">&lt;c1&gt;</bpt>unsafelyUnwrapped<ept i="1">&lt;/c1&gt;</ept>プロパティは後置<bpt i="2" x="2">&lt;c2&gt;</bpt>!<ept i="2">&lt;/c2&gt;</ept>演算子を使うのと同じ挙動を持ち、そしてインスタンスが<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>ならば実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, <bpt i="0" x="0">&lt;c0&gt;</bpt>s.flatMap(transform)<ept i="0">&lt;/c0&gt;</ept>  is equivalent to <bpt i="1" x="1">&lt;c1&gt;</bpt>Array(s.map(transform).joined())<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>実際のところ、<bpt i="0" x="0">&lt;c0&gt;</bpt>s.flatMap(transform)<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>Array(s.map(transform).joined())<ept i="1">&lt;/c1&gt;</ept>に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In general, though, the observability of such mutations is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一般には、けれども、そのような変異体の識別性は指定されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In most cases, it’s best to ignore this protocol and use the <bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalCollection<ept i="0">&lt;/c0&gt;</ept> protocol instead, because it has a more complete interface.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの場合において、このプロトコルを無視して代わりに<bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalCollectionType<ept i="0">&lt;/c0&gt;</ept>を使うことが最良です、それがより完全なインターフェースを持つので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In most cases, it’s best to ignore this protocol and use the <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> protocol instead, because it has a more complete interface.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの場合には、このプロトコルを無視して、<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>プロトコルを代わりに使うのが最良です、なぜならそれがより完全なインターフェイスを持つからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In most cases, it’s best to ignore this protocol and use the <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept> protocol instead, because it has a more complete interface.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの場合には、このプロトコルを無視して、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルを代わりに使うのが最良です、なぜならそれがより完全なインターフェイスを持つからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In most cases, it’s best to ignore this protocol and use the <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept> protocol instead, because it has a more complete interface.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの場合には、このプロトコルを無視して、<bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルを代わりに使うのが最良です、なぜならそれがより完全なインターフェイスを持つからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In most cases, it’s best to ignore this protocol and use the <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept> protocol instead, because it has a more complete interface.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんどの場合には、このプロトコルを無視して、<bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルを代わりに使うのが最良です、なぜならそれがより完全なインターフェイスを持つからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other languages, similar data types are known as hashes or associated arrays.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>他の言語では、同じようなデータ型はハッシュまたは連想配列として知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, for ordinary collections <bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept> having bidirectional indices:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>言い換えると、二方向性のインデックスを持つ通常のコレクション<bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>は：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, for ordinary collections <bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>言い換えれば、よくあるコレクション<bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>に対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, for ordinary sequences <bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>言い換えれば、よくあるシーケンス <bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>に対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, initializing the <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept> constant in the example above using string interpolation is equivalent to the following code:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>言い換えれば、文字列補間を使う上の例での<bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>定数の初期化は、以下のコードと等しいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, <bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout.size(ofValue: x)<ept i="0">&lt;/c0&gt;</ept>, when <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is a class instance, is the same regardless of how many stored properties <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept> has.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に、<bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout.size(ofValue: x)<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>がクラスインスタンスの時、<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>がどのくらい多くのプロパティを格納しているかに関係なく同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, <bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout&lt;T&gt;.size<ept i="0">&lt;/c0&gt;</ept>, when <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> is a class type, is the same regardless of how many stored properties <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept> has.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に、<bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout&lt;T&gt;.size<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>がクラス型の時、<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>がどのくらい多くのプロパティを格納しているかに関係なく同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, <bpt i="3" x="3">&lt;c3&gt;</bpt>x.sign == .minus<ept i="3">&lt;/c3&gt;</ept> if <bpt i="4" x="4">&lt;c4&gt;</bpt>x<ept i="4">&lt;/c4&gt;</ept> is -0, and while <bpt i="5" x="5">&lt;c5&gt;</bpt>x &lt; 0<ept i="5">&lt;/c5&gt;</ept> is always <bpt i="6" x="6">&lt;c6&gt;</bpt>false<ept i="6">&lt;/c6&gt;</ept> if <bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept> is NaN, <bpt i="8" x="8">&lt;c8&gt;</bpt>x.sign<ept i="8">&lt;/c8&gt;</ept> could be either <bpt i="9" x="9">&lt;c9&gt;</bpt>.plus<ept i="9">&lt;/c9&gt;</ept> or <bpt i="10" x="10">&lt;c10&gt;</bpt>.minus<ept i="10">&lt;/c10&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とりわけ、<bpt i="4" x="4">&lt;c4&gt;</bpt>x<ept i="4">&lt;/c4&gt;</ept>が-0ならば<bpt i="3" x="3">&lt;c3&gt;</bpt>x.sign == .minus<ept i="3">&lt;/c3&gt;</ept>、一方で<bpt i="7" x="7">&lt;c7&gt;</bpt>x<ept i="7">&lt;/c7&gt;</ept>がNaNならば<bpt i="5" x="5">&lt;c5&gt;</bpt>x &lt; 0<ept i="5">&lt;/c5&gt;</ept>は常に<bpt i="6" x="6">&lt;c6&gt;</bpt>false<ept i="6">&lt;/c6&gt;</ept>です、<bpt i="8" x="8">&lt;c8&gt;</bpt>x.sign<ept i="8">&lt;/c8&gt;</ept>は<bpt i="9" x="9">&lt;c9&gt;</bpt>.plus<ept i="9">&lt;/c9&gt;</ept>または<bpt i="10" x="10">&lt;c10&gt;</bpt>.minus<ept i="10">&lt;/c10&gt;</ept>のどちらかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, because <bpt i="2" x="2">&lt;c2&gt;</bpt>cafe<ept i="2">&lt;/c2&gt;</ept> was declared using the decomposed form of the <bpt i="3" x="3">&lt;c3&gt;</bpt>"é"<ept i="3">&lt;/c3&gt;</ept> character, <bpt i="4" x="4">&lt;c4&gt;</bpt>unicodeScalars<ept i="4">&lt;/c4&gt;</ept> contains the code points for both the letter <bpt i="5" x="5">&lt;c5&gt;</bpt>"e"<ept i="5">&lt;/c5&gt;</ept> (101) and the accent character <bpt i="6" x="6">&lt;c6&gt;</bpt>"´"<ept i="6">&lt;/c6&gt;</ept> (769).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とりわけ、<bpt i="2" x="2">&lt;c2&gt;</bpt>cafe<ept i="2">&lt;/c2&gt;</ept>は分解形式の<bpt i="3" x="3">&lt;c3&gt;</bpt>"é"<ept i="3">&lt;/c3&gt;</ept>文字を使って宣言されたことから、<bpt i="4" x="4">&lt;c4&gt;</bpt>unicodeScalars<ept i="4">&lt;/c4&gt;</ept>は字<bpt i="5" x="5">&lt;c5&gt;</bpt>"e"<ept i="5">&lt;/c5&gt;</ept>（101）とアクセント文字<bpt i="6" x="6">&lt;c6&gt;</bpt>"´"<ept i="6">&lt;/c6&gt;</ept>（769）両方のコード点を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, in -O builds, no test is performed to ensure that <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> actually has dynamic type <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に、-Oビルドでは、<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>が実際に動的に型<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>を持つことを請け合うテストは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, note that <bpt i="0" x="0">&lt;c0&gt;</bpt>j<ept i="0">&lt;/c0&gt;</ept>, the index of the second day with absences, was found in a slice of the original array and then used to access a value in the original <bpt i="1" x="1">&lt;c1&gt;</bpt>absences<ept i="1">&lt;/c1&gt;</ept> array itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に、欠席者のいる第２の日付のインデックス、<bpt i="0" x="0">&lt;c0&gt;</bpt>j<ept i="0">&lt;/c0&gt;</ept>が、オリジナル配列のひとつのスライス上で捜されて、それから値のアクセスのためにオリジナルの<bpt i="1" x="1">&lt;c1&gt;</bpt>absences<ept i="1">&lt;/c1&gt;</ept>配列自身において使われる点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, passing NaN as <bpt i="3" x="3">&lt;c3&gt;</bpt>other<ept i="3">&lt;/c3&gt;</ept> always results in <bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とりわけ、NaNを<bpt i="3" x="3">&lt;c3&gt;</bpt>other<ept i="3">&lt;/c3&gt;</ept>として渡すことは常に<bpt i="4" x="4">&lt;c4&gt;</bpt>nil<ept i="4">&lt;/c4&gt;</ept>の結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, that slice, unlike an array, may have a nonzero <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> and an <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept> that is not equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に、そのスライスは、配列と違い、非ゼロの<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept>に等しくない<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>を持つかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the names <bpt i="2" x="2">&lt;c2&gt;</bpt>"Alicia"<ept i="2">&lt;/c2&gt;</ept>, <bpt i="3" x="3">&lt;c3&gt;</bpt>"Chris"<ept i="3">&lt;/c3&gt;</ept>, and <bpt i="4" x="4">&lt;c4&gt;</bpt>"Diana"<ept i="4">&lt;/c4&gt;</ept> are removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>個別的には、名前<bpt i="2" x="2">&lt;c2&gt;</bpt>"Alicia"<ept i="2">&lt;/c2&gt;</ept>、<bpt i="3" x="3">&lt;c3&gt;</bpt>"Chris"<ept i="3">&lt;/c3&gt;</ept>、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>"Diana"<ept i="4">&lt;/c4&gt;</ept>は、削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the names <bpt i="2" x="2">&lt;c2&gt;</bpt>"Bethany"<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>"Eric"<ept i="3">&lt;/c3&gt;</ept> are removed from <bpt i="4" x="4">&lt;c4&gt;</bpt>employees<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>個別的には、<bpt i="2" x="2">&lt;c2&gt;</bpt>"Bethany"<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>"Eric"<ept i="3">&lt;/c3&gt;</ept>が<bpt i="4" x="4">&lt;c4&gt;</bpt>employees<ept i="4">&lt;/c4&gt;</ept>から削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the names <bpt i="6" x="6">&lt;c6&gt;</bpt>"Alicia"<ept i="6">&lt;/c6&gt;</ept>, <bpt i="7" x="7">&lt;c7&gt;</bpt>"Chris"<ept i="7">&lt;/c7&gt;</ept>, and <bpt i="8" x="8">&lt;c8&gt;</bpt>"Diana"<ept i="8">&lt;/c8&gt;</ept> are removed from <bpt i="9" x="9">&lt;c9&gt;</bpt>employees<ept i="9">&lt;/c9&gt;</ept> while the name <bpt i="10" x="10">&lt;c10&gt;</bpt>"Forlani"<ept i="10">&lt;/c10&gt;</ept> is added.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>個別的には、名前<bpt i="6" x="6">&lt;c6&gt;</bpt>"Alicia"<ept i="6">&lt;/c6&gt;</ept>、<bpt i="7" x="7">&lt;c7&gt;</bpt>"Chris"<ept i="7">&lt;/c7&gt;</ept>、そして<bpt i="8" x="8">&lt;c8&gt;</bpt>"Diana"<ept i="8">&lt;/c8&gt;</ept>は、<bpt i="9" x="9">&lt;c9&gt;</bpt>employees<ept i="9">&lt;/c9&gt;</ept>から削除される一方で名前<bpt i="10" x="10">&lt;c10&gt;</bpt>"Forlani"<ept i="10">&lt;/c10&gt;</ept>は加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the names <bpt i="6" x="6">&lt;c6&gt;</bpt>"Alicia"<ept i="6">&lt;/c6&gt;</ept>, <bpt i="7" x="7">&lt;c7&gt;</bpt>"Chris"<ept i="7">&lt;/c7&gt;</ept>, and <bpt i="8" x="8">&lt;c8&gt;</bpt>"Diana"<ept i="8">&lt;/c8&gt;</ept> are removed from <bpt i="9" x="9">&lt;c9&gt;</bpt>employees<ept i="9">&lt;/c9&gt;</ept> while the names <bpt i="10" x="10">&lt;c10&gt;</bpt>"Forlani"<ept i="10">&lt;/c10&gt;</ept> and <bpt i="11" x="11">&lt;c11&gt;</bpt>"Greta"<ept i="11">&lt;/c11&gt;</ept> are added.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>個別的には、名前<bpt i="6" x="6">&lt;c6&gt;</bpt>"Alicia"<ept i="6">&lt;/c6&gt;</ept>、<bpt i="7" x="7">&lt;c7&gt;</bpt>"Chris"<ept i="7">&lt;/c7&gt;</ept>、そして<bpt i="8" x="8">&lt;c8&gt;</bpt>"Diana"<ept i="8">&lt;/c8&gt;</ept>は、<bpt i="9" x="9">&lt;c9&gt;</bpt>employees<ept i="9">&lt;/c9&gt;</ept>から削除される一方で名前<bpt i="10" x="10">&lt;c10&gt;</bpt>"Forlani"<ept i="10">&lt;/c10&gt;</ept>と<bpt i="11" x="11">&lt;c11&gt;</bpt>"Greta"<ept i="11">&lt;/c11&gt;</ept>は加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the names <bpt i="6" x="6">&lt;c6&gt;</bpt>"Bethany"<ept i="6">&lt;/c6&gt;</ept> and <bpt i="7" x="7">&lt;c7&gt;</bpt>"Eric"<ept i="7">&lt;/c7&gt;</ept> do not appear in <bpt i="8" x="8">&lt;c8&gt;</bpt>eitherNeighborsOrEmployees<ept i="8">&lt;/c8&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>個別的には、名前<bpt i="6" x="6">&lt;c6&gt;</bpt>"Bethany"<ept i="6">&lt;/c6&gt;</ept>と<bpt i="7" x="7">&lt;c7&gt;</bpt>"Eric"<ept i="7">&lt;/c7&gt;</ept>は、<bpt i="8" x="8">&lt;c8&gt;</bpt>eitherNeighborsOrEmployees<ept i="8">&lt;/c8&gt;</ept>の中に現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, this discussion mentions extended grapheme clusters and Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とりわけ、この解説は拡張書記素クラスタとユニコードスカラー値について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, this discussion mentions extended grapheme clusters, Unicode scalar values, and canonical equivalence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とりわけ、この解説は拡張書記素クラスタ、ユニコードスカラー値、そして正準等価について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, to find the value matching a key, you must search through every element of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>特に、あるキーに合った値を見つけるには、あなたはコレクションのすべての要素を通して検索しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stop program execution in a debuggable state after printing <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドおよび-Ononeビルド（省略時のXcodeのDebug構成）では、<bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>を出力した後にデバッグ可能状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In playgrounds and <bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept> builds (the default for Xcode’s Debug configuration), stops program execution in a debuggable state after printing <bpt i="1" x="1">&lt;c1&gt;</bpt>message<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドおよび<bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept>ビルド（XcodeのDebug構成の初期設定）では、<bpt i="1" x="1">&lt;c1&gt;</bpt>message<ept i="1">&lt;/c1&gt;</ept>を出力した後デバッグ可能な状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In playgrounds and <bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept> builds (the default for Xcode’s Debug configuration): If <bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept> evaluates to <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>, stop program execution in a debuggable state after printing <bpt i="3" x="3">&lt;c3&gt;</bpt>message<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドおよび<bpt i="0" x="0">&lt;c0&gt;</bpt>-Onone<ept i="0">&lt;/c0&gt;</ept>ビルド（省略時のXcodeのDebug構成）において：<bpt i="1" x="1">&lt;c1&gt;</bpt>condition<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>に評価されるならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>message<ept i="3">&lt;/c3&gt;</ept>を出力した後にデバッグ可能状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In short, this function is suitable for exploring the structure of a <bpt i="1" x="1">&lt;c1&gt;</bpt>Mirror<ept i="1">&lt;/c1&gt;</ept> in a REPL or playground, but don’t expect it to be efficient.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>短くいえば、この関数はREPLやプレイグラウンドにおける<bpt i="1" x="1">&lt;c1&gt;</bpt>Mirror<ept i="1">&lt;/c1&gt;</ept>の構造体の探索に適します、しかしそれが効率的であるのを期待できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In some cases, <bpt i="6" x="6">&lt;c6&gt;</bpt>oldMember<ept i="6">&lt;/c6&gt;</ept> may be distinguishable from <bpt i="7" x="7">&lt;c7&gt;</bpt>newMember<ept i="7">&lt;/c7&gt;</ept> by identity comparison or some other means.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの場合には、<bpt i="6" x="6">&lt;c6&gt;</bpt>oldMember<ept i="6">&lt;/c6&gt;</ept>は同一性比較または何らかの他の意味で<bpt i="7" x="7">&lt;c7&gt;</bpt>newMember<ept i="7">&lt;/c7&gt;</ept>から区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In some cases, a returned element may be distinguishable from <bpt i="3" x="3">&lt;c3&gt;</bpt>newMember<ept i="3">&lt;/c3&gt;</ept> by identity comparison or some other means.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの場合には、ある返される要素は、同一性比較または何らかの他の意味で<bpt i="3" x="3">&lt;c3&gt;</bpt>newMember<ept i="3">&lt;/c3&gt;</ept>から区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In some cases, the returned element may be distinguishable from <bpt i="2" x="2">&lt;c2&gt;</bpt>newMember<ept i="2">&lt;/c2&gt;</ept> by identity comparison or some other means.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの場合には、返される要素は、同一性比較または何らかの他の意味で<bpt i="2" x="2">&lt;c2&gt;</bpt>newMember<ept i="2">&lt;/c2&gt;</ept>から区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In that case, a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> view contains more values than its <bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その場合には、ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>ビューは、<bpt i="1" x="1">&lt;c1&gt;</bpt>characters<ept i="1">&lt;/c1&gt;</ept>ビューより多くの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In that case, the method returns <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その場合には、このメソッドは<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the <bpt i="0" x="0">&lt;c0&gt;</bpt>Zip2Sequence<ept i="0">&lt;/c0&gt;</ept> instance returned by this function, the elements of the <bpt i="1" x="1">&lt;e1&gt;</bpt>i<ept i="1">&lt;/e1&gt;</ept>th pair are the <bpt i="2" x="2">&lt;e2&gt;</bpt>i<ept i="2">&lt;/e2&gt;</ept>th elements of each underlying sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数によって返される<bpt i="0" x="0">&lt;c0&gt;</bpt>Zip2Sequence<ept i="0">&lt;/c0&gt;</ept>インスタンスにおいて、<bpt i="1" x="1">&lt;e1&gt;</bpt>i<ept i="1">&lt;/e1&gt;</ept>番目の対の要素らは、基盤となる各シーケンスの<bpt i="2" x="2">&lt;e2&gt;</bpt>i<ept i="2">&lt;/e2&gt;</ept>番目の要素らです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the case of the <bpt i="0" x="0">&lt;c0&gt;</bpt>Directions<ept i="0">&lt;/c0&gt;</ept> option set, an instance can contain zero, one, or more of the four defined directions.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Directions<ept i="0">&lt;/c0&gt;</ept>オプションセットの場合では、あるインスタンスは４つ定義された方向のうちゼロ、１つ、またはそれ以上を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the encoded representation of a Unicode scalar value, each UTF-8 code unit after the first is called a <bpt i="0" x="0">&lt;e0&gt;</bpt>continuation byte<ept i="0">&lt;/e0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるユニコードスカラー値の符号化された表現において、最初のものの後の各UTF-8コード単位は、<bpt i="0" x="0">&lt;e0&gt;</bpt>継続バイト<ept i="0">&lt;/e0&gt;</ept>と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the example above, <bpt i="0" x="0">&lt;c0&gt;</bpt>moreNumbers<ept i="0">&lt;/c0&gt;</ept> has the same type as <bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept>, which is <bpt i="2" x="2">&lt;c2&gt;</bpt>[Int]<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>上の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>moreNumbers<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept>と同じ型を持ちます、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>[Int]<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the example above, <bpt i="3" x="3">&lt;c3&gt;</bpt>firstSpace<ept i="3">&lt;/c3&gt;</ept> is used to extract the prefix that contains elements up to that index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>上の例において、<bpt i="3" x="3">&lt;c3&gt;</bpt>firstSpace<ept i="3">&lt;/c3&gt;</ept>は、そのインデックスまでの要素を含んでいるもの、prefixを抽出するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the example below, a <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers<ept i="0">&lt;/c0&gt;</ept> array is created along with two copies that share the same storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>numbers<ept i="0">&lt;/c0&gt;</ept>配列は２つのコピーと連れだって作成されます、それは同じストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the example, <bpt i="0" x="0">&lt;c0&gt;</bpt>obj<ept i="0">&lt;/c0&gt;</ept> has a static type of <bpt i="1" x="1">&lt;c1&gt;</bpt>AnyObject<ept i="1">&lt;/c1&gt;</ept> and a dynamic type of <bpt i="2" x="2">&lt;c2&gt;</bpt>IntegerRef<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>obj<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>AnyObject<ept i="1">&lt;/c1&gt;</ept>の静的型と<bpt i="2" x="2">&lt;c2&gt;</bpt>IntegerRef<ept i="2">&lt;/c2&gt;</ept>の動的型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the example, because the <bpt i="0" x="0">&lt;c0&gt;</bpt>express<ept i="0">&lt;/c0&gt;</ept> static property is assigned an array literal with the <bpt i="1" x="1">&lt;c1&gt;</bpt>nextDay<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>secondDay<ept i="2">&lt;/c2&gt;</ept> options, it will contain those two elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>express<ept i="0">&lt;/c0&gt;</ept>静的プロパティは<bpt i="1" x="1">&lt;c1&gt;</bpt>nextDay<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>secondDay<ept i="2">&lt;/c2&gt;</ept>オプションを持つ配列リテラルを割り当てられるので、それはそれら２つの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, <bpt i="2" x="2">&lt;c2&gt;</bpt>y<ept i="2">&lt;/c2&gt;</ept> is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="2" x="2">&lt;c2&gt;</bpt>y<ept i="2">&lt;/c2&gt;</ept>はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, a new element is inserted into <bpt i="1" x="1">&lt;c1&gt;</bpt>classDays<ept i="1">&lt;/c1&gt;</ept>, a set of days of the week.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、新しい要素が、一揃いの曜日<bpt i="1" x="1">&lt;c1&gt;</bpt>classDays<ept i="1">&lt;/c1&gt;</ept>へ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、数からなる配列は、30より大きな要素に合致するという述部によって仕切られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>.priority<ept i="0">&lt;/c0&gt;</ept> shipping option is removed from the <bpt i="1" x="1">&lt;c1&gt;</bpt>options<ept i="1">&lt;/c1&gt;</ept> option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>.priority<ept i="0">&lt;/c0&gt;</ept>出荷オプションは、<bpt i="1" x="1">&lt;c1&gt;</bpt>options<ept i="1">&lt;/c1&gt;</ept>オプションセットから削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>.secondDay<ept i="0">&lt;/c0&gt;</ept> shipping option is added to the <bpt i="1" x="1">&lt;c1&gt;</bpt>freeOptions<ept i="1">&lt;/c1&gt;</ept> option set if <bpt i="2" x="2">&lt;c2&gt;</bpt>purchasePrice<ept i="2">&lt;/c2&gt;</ept> is greater than 50.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>.secondDay<ept i="0">&lt;/c0&gt;</ept>出荷オプションは、<bpt i="2" x="2">&lt;c2&gt;</bpt>purchasePrice<ept i="2">&lt;/c2&gt;</ept>が50.0より大きいならば、<bpt i="1" x="1">&lt;c1&gt;</bpt>freeOptions<ept i="1">&lt;/c1&gt;</ept>オプションセットを加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>attendeesAndVisitors<ept i="0">&lt;/c0&gt;</ept> set is made up of the elements of the <bpt i="1" x="1">&lt;c1&gt;</bpt>attendees<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>visitors<ept i="2">&lt;/c2&gt;</ept> sets:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>attendeesAndVisitors<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>attendees<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>visitors<ept i="2">&lt;/c2&gt;</ept>集合の要素から作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>attendeesAndVisitors<ept i="0">&lt;/c0&gt;</ept> set is made up of the elements of the <bpt i="1" x="1">&lt;c1&gt;</bpt>attendees<ept i="1">&lt;/c1&gt;</ept> set and the <bpt i="2" x="2">&lt;c2&gt;</bpt>visitors<ept i="2">&lt;/c2&gt;</ept> array:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>attendeesAndVisitors<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>attendees<ept i="1">&lt;/c1&gt;</ept>集合と<bpt i="2" x="2">&lt;c2&gt;</bpt>visitors<ept i="2">&lt;/c2&gt;</ept>配列の要素から作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>bothNeighborsAndEmployees<ept i="0">&lt;/c0&gt;</ept> set is made up of the elements that are in <bpt i="1" x="1">&lt;e1&gt;</bpt>both<ept i="1">&lt;/e1&gt;</ept> the <bpt i="2" x="2">&lt;c2&gt;</bpt>employees<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>neighbors<ept i="3">&lt;/c3&gt;</ept> sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>bothNeighborsAndEmployees<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="2" x="2">&lt;c2&gt;</bpt>employees<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>neighbors<ept i="3">&lt;/c3&gt;</ept>集合の<bpt i="1" x="1">&lt;e1&gt;</bpt>両方<ept i="1">&lt;/e1&gt;</ept>にある要素から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>eitherNeighborsOrEmployees<ept i="0">&lt;/c0&gt;</ept> set is made up of the elements of the <bpt i="1" x="1">&lt;c1&gt;</bpt>employees<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>neighbors<ept i="2">&lt;/c2&gt;</ept> sets that are not in both <bpt i="3" x="3">&lt;c3&gt;</bpt>employees<ept i="3">&lt;/c3&gt;</ept> <bpt i="4" x="4">&lt;e4&gt;</bpt>and<ept i="4">&lt;/e4&gt;</ept> <bpt i="5" x="5">&lt;c5&gt;</bpt>neighbors<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>eitherNeighborsOrEmployees<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>employees<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>neighbors<ept i="2">&lt;/c2&gt;</ept>集合の要素で、<bpt i="3" x="3">&lt;c3&gt;</bpt>employees<ept i="3">&lt;/c3&gt;</ept><bpt i="4" x="4">&lt;e4&gt;</bpt>および<ept i="4">&lt;/e4&gt;</ept><bpt i="5" x="5">&lt;c5&gt;</bpt>neighbors<ept i="5">&lt;/c5&gt;</ept>の両方の中にはないものから作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept> set is disjoint with the <bpt i="1" x="1">&lt;c1&gt;</bpt>visitors<ept i="1">&lt;/c1&gt;</ept> set because no name appears in both sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>visitors<ept i="1">&lt;/c1&gt;</ept>集合と交わりを持ちません、両方に現れる名前がないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept> set is disjoint with the elements of the <bpt i="1" x="1">&lt;c1&gt;</bpt>visitors<ept i="1">&lt;/c1&gt;</ept> array because no name appears in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>visitors<ept i="1">&lt;/c1&gt;</ept>配列の要素と交わりを持ちません、両方に現れる名前がないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>nonNeighbors<ept i="0">&lt;/c0&gt;</ept> set is made up of the elements of the <bpt i="1" x="1">&lt;c1&gt;</bpt>employees<ept i="1">&lt;/c1&gt;</ept> set that are not elements of <bpt i="2" x="2">&lt;c2&gt;</bpt>neighbors<ept i="2">&lt;/c2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>nonNeighbors<ept i="0">&lt;/c0&gt;</ept>集合は<bpt i="1" x="1">&lt;c1&gt;</bpt>employees<ept i="1">&lt;/c1&gt;</ept>集合の要素で<bpt i="2" x="2">&lt;c2&gt;</bpt>neighbors<ept i="2">&lt;/c2&gt;</ept>の要素でないものから作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例では、そのクロージャは、あるHTTP応答を記述するあつらえ列挙の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept> set that are also elements of the <bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept> array are removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept>集合の要素でまた<bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept>配列の要素でもあるものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept> set that are also members of <bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept> are removed from <bpt i="2" x="2">&lt;c2&gt;</bpt>employees<ept i="2">&lt;/c2&gt;</ept>, while the elements of <bpt i="3" x="3">&lt;c3&gt;</bpt>neighbors<ept i="3">&lt;/c3&gt;</ept> that are not members of <bpt i="4" x="4">&lt;c4&gt;</bpt>employees<ept i="4">&lt;/c4&gt;</ept> are added to <bpt i="5" x="5">&lt;c5&gt;</bpt>employees<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept>集合の要素でまた<bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept>のメンバであるものは<bpt i="2" x="2">&lt;c2&gt;</bpt>employees<ept i="2">&lt;/c2&gt;</ept>から削除されます、一方で<bpt i="3" x="3">&lt;c3&gt;</bpt>neighbors<ept i="3">&lt;/c3&gt;</ept>の要素で<bpt i="4" x="4">&lt;c4&gt;</bpt>employees<ept i="4">&lt;/c4&gt;</ept>の要素でないものは<bpt i="5" x="5">&lt;c5&gt;</bpt>employees<ept i="5">&lt;/c5&gt;</ept>に加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept> set that are also members of the <bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept> set are removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept>集合の要素でまた<bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept>集合のメンバでもあるものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept> set that are not also members of the <bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept> set are removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>employees<ept i="0">&lt;/c0&gt;</ept>集合の要素でまた<bpt i="1" x="1">&lt;c1&gt;</bpt>neighbors<ept i="1">&lt;/c1&gt;</ept>集合のメンバではないものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>visitors<ept i="0">&lt;/c0&gt;</ept> set are added to the <bpt i="1" x="1">&lt;c1&gt;</bpt>attendees<ept i="1">&lt;/c1&gt;</ept> set:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>visitors<ept i="0">&lt;/c0&gt;</ept>集合の要素は<bpt i="1" x="1">&lt;c1&gt;</bpt>attendees<ept i="1">&lt;/c1&gt;</ept>集合に加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the key-value pair for the key <bpt i="0" x="0">&lt;c0&gt;</bpt>"Aquamarine"<ept i="0">&lt;/c0&gt;</ept> is removed from the dictionary by assigning <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> to the key-based subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>"Aquamarine"<ept i="0">&lt;/c0&gt;</ept>に対するキー値ペアは、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>をキー基盤の添え字に割り当てることによって辞書から削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following example, the predicate provides an ordering for an array of a custom <bpt i="0" x="0">&lt;c0&gt;</bpt>HTTPResponse<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例では、その述部はあつらえの<bpt i="0" x="0">&lt;c0&gt;</bpt>HTTPResponse<ept i="0">&lt;/c0&gt;</ept>型の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following examples, the binary representation of any values are shown in a comment to the right, like this:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例において、あらゆる値のバイナリ表現は右のコメントで示されます、このように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next example, <bpt i="0" x="0">&lt;c0&gt;</bpt>y<ept i="0">&lt;/c0&gt;</ept> has a value of <bpt i="1" x="1">&lt;c1&gt;</bpt>21.5<ept i="1">&lt;/c1&gt;</ept>, which is encoded as <bpt i="2" x="2">&lt;c2&gt;</bpt>1.34375 * 2 ** 4<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>y<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>21.5<ept i="1">&lt;/c1&gt;</ept>の値を持ちます、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>1.34375 * 2 ** 4<ept i="2">&lt;/c2&gt;</ept>のようにエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next example, the <bpt i="0" x="0">&lt;c0&gt;</bpt>.express<ept i="0">&lt;/c0&gt;</ept> element is passed to <bpt i="1" x="1">&lt;c1&gt;</bpt>remove(_:)<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例では、<bpt i="0" x="0">&lt;c0&gt;</bpt>.express<ept i="0">&lt;/c0&gt;</ept>要素が<bpt i="1" x="1">&lt;c1&gt;</bpt>remove(_:)<ept i="1">&lt;/c1&gt;</ept>に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the standard library, you can use the <bpt i="1" x="1">&lt;c1&gt;</bpt>Set<ept i="1">&lt;/c1&gt;</ept> type with elements of any hashable type, or you can easily create bit masks with <bpt i="2" x="2">&lt;c2&gt;</bpt>SetAlgebra<ept i="2">&lt;/c2&gt;</ept> conformance using the <bpt i="3" x="3">&lt;c3&gt;</bpt>OptionSet<ept i="3">&lt;/c3&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリにおいて、あなたは<bpt i="1" x="1">&lt;c1&gt;</bpt>Set<ept i="1">&lt;/c1&gt;</ept>型を何らかのハッシュ型の要素で使うことができます、またはあなたは<bpt i="2" x="2">&lt;c2&gt;</bpt>SetAlgebra<ept i="2">&lt;/c2&gt;</ept>準拠を持つビットマスクを<bpt i="3" x="3">&lt;c3&gt;</bpt>OptionSet<ept i="3">&lt;/c3&gt;</ept>プロトコルを使って簡単に作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, the newly created set drops the duplicate value (“Dave”) and doesn’t maintain the order of the array literal’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この場合において、新たに作成された集合は、重複した値（「Dave」）を落とします、そして配列リテラルのもつ要素の順番を維持しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, the values stored in the array are references to objects that live outside the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この場合、配列に格納される値らは、その配列の外側で生活しているオブジェクトらへの参照です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この場合、あるシーケンスが消耗可能になっているそして反復を再開することになるか、またはあるシーケンスがコレクションであるそして最初の要素から反復を再度着手することになるか、あなたはどちらか決めてかかることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>filter<ept i="0">&lt;/c0&gt;</ept> is used to include only names shorter than five characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>filter<ept i="0">&lt;/c0&gt;</ept>は５つの文字より短い名前のみ含めるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>goodNumber<ept i="0">&lt;/c0&gt;</ept> is assigned a value of <bpt i="1" x="1">&lt;c1&gt;</bpt>100<ept i="1">&lt;/c1&gt;</ept> because <bpt i="2" x="2">&lt;c2&gt;</bpt>Int("100")<ept i="2">&lt;/c2&gt;</ept> succeeded in returning a non-<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept> result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>goodNumber<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>100<ept i="1">&lt;/c1&gt;</ept>の値を割り当てられます、なぜなら<bpt i="2" x="2">&lt;c2&gt;</bpt>Int("100")<ept i="2">&lt;/c2&gt;</ept>が非<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>の結果を返すことに成功したからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>goodNumber<ept i="0">&lt;/c0&gt;</ept> is assigned a value of <bpt i="1" x="1">&lt;c1&gt;</bpt>100<ept i="1">&lt;/c1&gt;</ept> because <bpt i="2" x="2">&lt;c2&gt;</bpt>Int("100")<ept i="2">&lt;/c2&gt;</ept> succeeds in returning a non-<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept> result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>goodNumber<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>100<ept i="1">&lt;/c1&gt;</ept>の値を割り当てられます、なぜなら<bpt i="2" x="2">&lt;c2&gt;</bpt>Int("100")<ept i="2">&lt;/c2&gt;</ept>が非<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>の結果を返すことに成功するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> tests whether <bpt i="1" x="1">&lt;c1&gt;</bpt>error<ept i="1">&lt;/c1&gt;</ept> is an empty string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>error<ept i="1">&lt;/c1&gt;</ept>が空の文字列かどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> tests whether <bpt i="1" x="1">&lt;c1&gt;</bpt>measurements.count<ept i="1">&lt;/c1&gt;</ept> is greater than zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>measurements.count<ept i="1">&lt;/c1&gt;</ept>がゼロより大きいかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> is used first to convert the names in the array to lowercase strings and then to count their characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例では、<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>は最初に配列中の名前を小文字文字列に変換するために、それからそれらの文字を数えるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> has a value of <bpt i="1" x="1">&lt;c1&gt;</bpt>21.5<ept i="1">&lt;/c1&gt;</ept>, which is stored as <bpt i="2" x="2">&lt;c2&gt;</bpt>1.34375 * 2**4<ept i="2">&lt;/c2&gt;</ept>, where <bpt i="3" x="3">&lt;c3&gt;</bpt>**<ept i="3">&lt;/c3&gt;</ept> is exponentiation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>21.5<ept i="1">&lt;/c1&gt;</ept>の値を持ちます、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>1.34375 * 2**4<ept i="2">&lt;/c2&gt;</ept>として格納されます、ここで<bpt i="3" x="3">&lt;c3&gt;</bpt>**<ept i="3">&lt;/c3&gt;</ept>は冪です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、３つの範囲からなる配列は平坦化されます、それで各範囲の要素は順に反復されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, an existing element is inserted into <bpt i="2" x="2">&lt;c2&gt;</bpt>classDays<ept i="2">&lt;/c2&gt;</ept>, a set of days of the week.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、既存の要素が、一揃いの曜日<bpt i="2" x="2">&lt;c2&gt;</bpt>classDays<ept i="2">&lt;/c2&gt;</ept>へ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, both assignments to the <bpt i="0" x="0">&lt;c0&gt;</bpt>printedMessage<ept i="0">&lt;/c0&gt;</ept> variable call this Boolean literal initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>printedMessage<ept i="0">&lt;/c0&gt;</ept>変数への代入は両方ともこのブールリテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, note the difference in the result of using <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>flatMap<ept i="1">&lt;/c1&gt;</ept> with a transformation that returns an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>flatMap<ept i="1">&lt;/c1&gt;</ept>をある配列を返す変換とともに使うことの結果における違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, note the difference in the result of using <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>flatMap<ept i="1">&lt;/c1&gt;</ept> with a transformation that returns an optional <bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept> value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>flatMap<ept i="1">&lt;/c1&gt;</ept>をあるオプショナル<bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept>値を返す変換とともに使うことの結果における違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the <bpt i="3" x="3">&lt;c3&gt;</bpt>colors<ept i="3">&lt;/c3&gt;</ept> array can be bridged to <bpt i="4" x="4">&lt;c4&gt;</bpt>NSArray<ept i="4">&lt;/c4&gt;</ept> because its <bpt i="5" x="5">&lt;c5&gt;</bpt>String<ept i="5">&lt;/c5&gt;</ept> elements bridge to <bpt i="6" x="6">&lt;c6&gt;</bpt>NSString<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例では、<bpt i="3" x="3">&lt;c3&gt;</bpt>colors<ept i="3">&lt;/c3&gt;</ept>配列は<bpt i="4" x="4">&lt;c4&gt;</bpt>NSArray<ept i="4">&lt;/c4&gt;</ept>にブリッジされることができます、なぜならそれの<bpt i="5" x="5">&lt;c5&gt;</bpt>String<ept i="5">&lt;/c5&gt;</ept>要素が<bpt i="6" x="6">&lt;c6&gt;</bpt>NSString<ept i="6">&lt;/c6&gt;</ept>にブリッジするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the assignment to the <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> variable calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the assignment to the <bpt i="0" x="0">&lt;c0&gt;</bpt>letterK<ept i="0">&lt;/c0&gt;</ept> constant is handled by this initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>letterK<ept i="0">&lt;/c0&gt;</ept>定数への代入は、このイニシャライザによって舞台裏で取り扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the assignment to the <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> constant calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the assignments to the <bpt i="0" x="0">&lt;c0&gt;</bpt>twasBrillig<ept i="0">&lt;/c0&gt;</ept> constant calls this Boolean literal initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>twasBrillig<ept i="0">&lt;/c0&gt;</ept>定数への代入はこのブールリテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the compiler infers the full type of each array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例では、コンパイラは各配列の完全な型を推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the expression <bpt i="0" x="0">&lt;c0&gt;</bpt>singleDigits.dropFirst(5))<ept i="0">&lt;/c0&gt;</ept> is equivalent to calling this initializer with with <bpt i="1" x="1">&lt;c1&gt;</bpt>singleDigits<ept i="1">&lt;/c1&gt;</ept> and a range covering the last five items of <bpt i="2" x="2">&lt;c2&gt;</bpt>singleDigits.indices<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、式<bpt i="0" x="0">&lt;c0&gt;</bpt>singleDigits.dropFirst(5))<ept i="0">&lt;/c0&gt;</ept>は、このイニシャライザを<bpt i="1" x="1">&lt;c1&gt;</bpt>singleDigits<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>singleDigits.indices<ept i="2">&lt;/c2&gt;</ept>の終わり５項目を対象とする範囲とともに呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the resulting array is the same length as <bpt i="1" x="1">&lt;c1&gt;</bpt>words<ept i="1">&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、結果の配列は<bpt i="1" x="1">&lt;c1&gt;</bpt>words<ept i="1">&lt;/c1&gt;</ept>と同じ長さです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, three elements in the middle of an array of integers are replaced by the five elements of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例では、整数からなる配列の真ん中の３つの要素が、<bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept>インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this view, many individual characters—for example, “é”, “김”, and “🇮🇳”—can be made up of multiple Unicode code points.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くの単一の文字 — 例えば「é」、「김」、そして「🇮🇳」など — が、複数のユニコードコード点から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Including More Data in Errors</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>さらなるデータをエラーに含める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indicates that a precondition was violated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは前提条件が破られたことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indicates that an internal sanity check failed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これはある内部的な正常性確認が失敗したことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indices for a subscripting a string are shared with the string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の添え字用のインデックスは、その文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>ビューを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indices of a slice can be used interchangeably with indices of the base collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライスのインデックスは、基盤コレクションのインデックスと交換可能に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>二方向性のコレクションにおいて前方および後方に移動されるインデックス値は、各方向で同じ量だけ移動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inequality is the inverse of equality.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不等性は、同等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Infinite values with the same sign are equal to each other.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同じ符号を持つ無限大値は互いに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Infinity</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Infinity compares greater than all finite numbers and equal to other infinite values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無限大は、すべての有限の数より大きい、そして他の無限大の値と等しいと比較されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Infix operators</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>接中辞演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inherits From</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initialize for the given <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた<bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>に対して初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializers</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes <bpt i="0" x="0">&lt;c0&gt;</bpt>self.pointee<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> consecutive copies of <bpt i="2" x="2">&lt;c2&gt;</bpt>newValue<ept i="2">&lt;/c2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self.pointee<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>個の連続した<bpt i="2" x="2">&lt;c2&gt;</bpt>newValue<ept i="2">&lt;/c2&gt;</ept>のコピーで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes memory starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>s beginning at <bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>, and returning the source memory to an uninitialized state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まるメモリを、<bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>で開始して<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>個の<bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>を使って置き換えます、そしてソースメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes memory starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>s beginning at <bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まるメモリを、<bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>で開始して<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>個の<bpt i="2" x="2">&lt;c2&gt;</bpt>Pointee<ept i="2">&lt;/c2&gt;</ept>で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes memory starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept> values beginning at <bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept> and binds the initialized memory to type <bpt i="4" x="4">&lt;c4&gt;</bpt>T<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まるメモリを、<bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>で開始して<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>個の<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>値で初期化します、そして初期化されたメモリを型<bpt i="4" x="4">&lt;c4&gt;</bpt>T<ept i="4">&lt;/c4&gt;</ept>へ束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes memory starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept> values beginning at <bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>, binds the initialized memory to type <bpt i="4" x="4">&lt;c4&gt;</bpt>T<ept i="4">&lt;/c4&gt;</ept>, and returns the source memory to an uninitialized state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まるメモリを、<bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>で開始して<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>個の<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>値で初期化します、初期化されたメモリを型<bpt i="4" x="4">&lt;c4&gt;</bpt>T<ept i="4">&lt;/c4&gt;</ept>へ束縛します、そしてソースメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes memory starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> with the elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>source<ept i="1">&lt;/c1&gt;</ept> and binds the initialized memory to type <bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まるメモリを<bpt i="1" x="1">&lt;c1&gt;</bpt>source<ept i="1">&lt;/c1&gt;</ept>の要素らで初期化します、そして初期化されたメモリを型<bpt i="2" x="2">&lt;c2&gt;</bpt>T<ept i="2">&lt;/c2&gt;</ept>へ束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes memory starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> with the elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>source<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まるメモリを<bpt i="1" x="1">&lt;c1&gt;</bpt>source<ept i="1">&lt;/c1&gt;</ept>の要素らで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Initializes this memory location <bpt i="0" x="0">&lt;c0&gt;</bpt>self + strideof(T) * index<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> consecutive copies of <bpt i="2" x="2">&lt;c2&gt;</bpt>value<ept i="2">&lt;/c2&gt;</ept> and binds the initialized memory to type <bpt i="3" x="3">&lt;c3&gt;</bpt>T<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメモリ位置<bpt i="0" x="0">&lt;c0&gt;</bpt>self + strideof(T) * index<ept i="0">&lt;/c0&gt;</ept>を、<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>個の連続する<bpt i="2" x="2">&lt;c2&gt;</bpt>value<ept i="2">&lt;/c2&gt;</ept>のコピーで初期化します、そして初期化されたメモリを型<bpt i="3" x="3">&lt;c3&gt;</bpt>T<ept i="3">&lt;/c3&gt;</ept>へ束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts a collection of characters at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列からなるコレクションを指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts a new character at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts a new element at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある新しい要素を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts a new element into the collection at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある新しい要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts the elements of a sequence into the collection at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスに属する複数の要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts the elements of another set into this option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別のセットの要素をこのオブションセットへと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts the elements of the given sequence into the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの要素を集合に挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts the given element in the set if it is not already present.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それが既に存在するのでないならば、与えられた要素を集合へと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts the given element into the set unconditionally.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素を集合へと無条件に挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Inserts the given element into the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素をセットへと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instance Method</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instance Methods</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instance Properties</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>様々なインスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instance Property</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instances must be aligned to <bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout&lt;Pointee&gt;.alignment<ept i="0">&lt;/c0&gt;</ept>, i.e. <bpt i="1" x="1">&lt;c1&gt;</bpt>(UnsafePointer<it pos="begin" x="8">&lt;Int8&gt;</it>(self) - nil) % MemoryLayout&lt;Pointee&gt;.alignment == 0<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンスは<bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout&lt;Pointee&gt;.alignment<ept i="0">&lt;/c0&gt;</ept>にアラインされなければなりません、すなわち<bpt i="1" x="1">&lt;c1&gt;</bpt>(UnsafePointer<it pos="begin" x="8">&lt;Int8&gt;</it>(self) - nil) % MemoryLayout&lt;Pointee&gt;.alignment == 0<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>UnfoldSequence<ept i="0">&lt;/c0&gt;</ept> are created with the functions <bpt i="1" x="1">&lt;c1&gt;</bpt>sequence(first:next:)<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>sequence(state:next:)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnfoldSequence<ept i="0">&lt;/c0&gt;</ept>のインスタンスは、関数<bpt i="1" x="1">&lt;c1&gt;</bpt>sequence(first:next:)<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>sequence(state:next:)<ept i="2">&lt;/c2&gt;</ept>で作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instances of conforming types can be encoded, and appropriately passed, as elements of a C <bpt i="0" x="0">&lt;c0&gt;</bpt>va_list<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型のインスタンスは、符号化されること、そして適切に渡されることが、C <bpt i="0" x="0">&lt;c0&gt;</bpt>va_list<ept i="0">&lt;/c0&gt;</ept>の要素として可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instances of conforming types can be subtracted, arithmetically negated, and initialized from <bpt i="0" x="0">&lt;c0&gt;</bpt>0<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠している型のインスタンスは、減じられること、計算的に負にされること、そして<bpt i="0" x="0">&lt;c0&gt;</bpt>0<ept i="0">&lt;/c0&gt;</ept>から初期化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instances of the <bpt i="0" x="0">&lt;c0&gt;</bpt>StaticString<ept i="0">&lt;/c0&gt;</ept> type are immutable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>StaticString<ept i="0">&lt;/c0&gt;</ept>型のインスタンスは、不変です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instances of types that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>TextOutputStreamable<ept i="0">&lt;/c0&gt;</ept> protocol can write their value to instances of any type that conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>TextOutputStream<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>TextOutputStreamable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型のインスタンスは、それらの値を<bpt i="1" x="1">&lt;c1&gt;</bpt>TextOutputStream<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠するあらゆる型のインスタンスへ書き出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instantiates an instance of the conforming type from a string representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型のインスタンスを文字列表現から初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead of accessing this property directly, convert an instance of any type to a string by using the <bpt i="0" x="0">&lt;c0&gt;</bpt>String(describing:)<ept i="0">&lt;/c0&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロパティに直接にアクセスする代わりに、何らかの型のインスタンスを<bpt i="0" x="0">&lt;c0&gt;</bpt>String(describing:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを使って文字列へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead of copying over the elements of a slice to new storage, an <bpt i="1" x="1">&lt;c1&gt;</bpt>ArraySlice<ept i="1">&lt;/c1&gt;</ept> instance presents a view onto the storage of a larger array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある断片部分（スライス）の要素をすっかり新しいストレージにコピーする代わりに、<bpt i="1" x="1">&lt;c1&gt;</bpt>ArraySlice<ept i="1">&lt;/c1&gt;</ept>インスタンスはある大きな配列に関するある見方（ビュー）を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead of returning an iterator with a type that encapsulates the implementation of the collection, the <bpt i="3" x="3">&lt;c3&gt;</bpt>digits()<ept i="3">&lt;/c3&gt;</ept> function first wraps the iterator in an <bpt i="4" x="4">&lt;c4&gt;</bpt>AnyIterator<ept i="4">&lt;/c4&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの実装をカプセル化するある型をもつイテレータを返すのではなく、<bpt i="3" x="3">&lt;c3&gt;</bpt>digits()<ept i="3">&lt;/c3&gt;</ept>関数はイテレータを<bpt i="4" x="4">&lt;c4&gt;</bpt>AnyIterator<ept i="4">&lt;/c4&gt;</ept>インスタンスの中にまずラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept> instance by using one of the Boolean literals <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>インスタンスをブールリテラル<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>のうちの１つを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, create a new array by using an array literal as its value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、配列リテラルをその値として使うことで新しい配列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, create a new set using an array literal as its value by enclosing a comma-separated list of values in square brackets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、新しい集合を配列リテラルをそれの値として、コンマ区切りの値のリストを角カッコで囲むことによって、作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, create a new value by using a literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、新しい値をリテラルを使うことによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, create a slice of a collection by using the collection’s range-based subscript or by using methods that return a subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、そのコレクションのもつ範囲に基づく添え字によって、または下位シーケンスを返すメソッドを使うことによって、コレクションのスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, each presents a view onto the storage of the <bpt i="2" x="2">&lt;c2&gt;</bpt>absences<ept i="2">&lt;/c2&gt;</ept> array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、<bpt i="2" x="2">&lt;c2&gt;</bpt>absences<ept i="2">&lt;/c2&gt;</ept>配列のストレージ上でのひとつのビューをそれぞれが提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, initialize a variable or constant using one of the Boolean literals <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、変数や定数をブールリテラル<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>のうちの１つを使って初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, it has properties that present its contents as meaningful collections.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その代わりに、それはいくつかのプロパティを持ち、それらがその内容を意味のあるコレクションとして各自提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, use only the <bpt i="2" x="2">&lt;c2&gt;</bpt>UnsafeMutableBufferPointer<ept i="2">&lt;/c2&gt;</ept> argument to <bpt i="3" x="3">&lt;c3&gt;</bpt>body<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その代わりに、<bpt i="3" x="3">&lt;c3&gt;</bpt>body<ept i="3">&lt;/c3&gt;</ept>への<bpt i="2" x="2">&lt;c2&gt;</bpt>UnsafeMutableBufferPointer<ept i="2">&lt;/c2&gt;</ept>引数だけを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (<bpt i="0" x="0">&lt;c0&gt;</bpt>\(<ept i="0">&lt;/c0&gt;</ept>…<bpt i="1" x="1">&lt;c1&gt;</bpt>)<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、文字列補間を使って、バックスラッシュ<bpt i="0" x="0">&lt;c0&gt;</bpt>\(<ept i="0">&lt;/c0&gt;</ept>…<bpt i="1" x="1">&lt;c1&gt;</bpt>)<ept i="1">&lt;/c1&gt;</ept>を前に置いた丸括弧に囲まれた値、リテラル、変数、または式を含めることで、新しい文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, use the Boolean literal <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept> to create a new <bpt i="1" x="1">&lt;c1&gt;</bpt>Bool<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、ブールリテラル<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>を使って新しい<bpt i="1" x="1">&lt;c1&gt;</bpt>Bool<ept i="1">&lt;/c1&gt;</ept>インスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, use the closure’s <bpt i="1" x="1">&lt;c1&gt;</bpt>String.CharacterView<ept i="1">&lt;/c1&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、クロージャのもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>String.CharacterView<ept i="1">&lt;/c1&gt;</ept>引数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, use the nonmutable <bpt i="3" x="3">&lt;c3&gt;</bpt>Slice<ept i="3">&lt;/c3&gt;</ept> or define your own subsequence type that takes your index invalidation requirements into account.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、非可変<bpt i="3" x="3">&lt;c3&gt;</bpt>Slice<ept i="3">&lt;/c3&gt;</ept>を使うかまたはあなたのインデックス無効化要件を考慮に入れるあなた独自の下位シーケンス型を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, use the value’s <bpt i="1" x="1">&lt;c1&gt;</bpt>isNaN<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代わりに、その値の<bpt i="1" x="1">&lt;c1&gt;</bpt>isNaN<ept i="1">&lt;/c1&gt;</ept>プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, when you need an operation to have a specific numeric result, filter out any NaN values using the <bpt i="0" x="0">&lt;c0&gt;</bpt>isNaN<ept i="0">&lt;/c0&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうではなく、あなたがある特定の数値結果を持つ演算を必要とする場合、あらゆるNaN値を<bpt i="0" x="0">&lt;c0&gt;</bpt>isNaN<ept i="0">&lt;/c0&gt;</ept>特性を使って除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, you can perform set operations with another set, an array, or any other sequence type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それどころか、あなたは集合演算を他の集合、配列、またはあらゆる他のシーケンス型とで実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Integer Index Ambiguity</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>整数インデックスのあいまいさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Interprets the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> as a path in the file system and attempts to perform filename completion, returning a numeric value that indicates whether a match was possible, and by reference the longest path that matches the <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>にマッチする最も長いパスを参照渡しすることによって、<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>をファイルシステムにおけるパスとして解釈してファイル名補完を試みます、マッチが可能だったかどうかを指し示す数値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invalid bytes are replaced by Unicode replacement characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無効なバイトは、ユニコード代替文字で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invalidates all indices with respect to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この文字列に関する全てのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invoke <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> with a C <bpt i="1" x="1">&lt;c1&gt;</bpt>va_list<ept i="1">&lt;/c1&gt;</ept> argument derived from <bpt i="2" x="2">&lt;c2&gt;</bpt>args<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>args<ept i="2">&lt;/c2&gt;</ept>から引き出したC <bpt i="1" x="1">&lt;c1&gt;</bpt>va_list<ept i="1">&lt;/c1&gt;</ept>引数を使って<bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>を発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invokes <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> with an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept> to <bpt i="2" x="2">&lt;c2&gt;</bpt>arg<ept i="2">&lt;/c2&gt;</ept> and returns the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>arg<ept i="2">&lt;/c2&gt;</ept>への<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutablePointer<ept i="1">&lt;/c1&gt;</ept>を使って<bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>を発動して結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invokes <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> with an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer<ept i="1">&lt;/c1&gt;</ept> to <bpt i="2" x="2">&lt;c2&gt;</bpt>arg<ept i="2">&lt;/c2&gt;</ept> and returns the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>arg<ept i="2">&lt;/c2&gt;</ept>への<bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafePointer<ept i="1">&lt;/c1&gt;</ept>を使って<bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>を発動して結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invokes the given closure on the contents of the string, represented as a pointer to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャを、UTF-8コード単位のヌル終端シーケンスへのポインタとして表される文字列の内容上で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invokes the given closure with a buffer containing the static string’s UTF-8 code unit sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列のUTF-8コード単位シーケンスを含んでいるバッファとともに与えられたクロージャを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It acts as an iterator by using a collection’s indices to step over each value in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、コレクションのインデックスを使ってコレクションの中の各値のすべてを渡っていくあるイテレータとしての役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It does not copy the elements from the collection into separate storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、要素をそのコレクションから別個のストレージへとコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is better than an <bpt i="3" x="3">&lt;c3&gt;</bpt>unsafeBitCast<ept i="3">&lt;/c3&gt;</ept> because it’s more restrictive, and because checking is still performed in debug builds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは<bpt i="3" x="3">&lt;c3&gt;</bpt>unsafeBitCast<ept i="3">&lt;/c3&gt;</ept>よりも良いです、なぜならそれはもっと制限的であるから、そして検査することは依然としてデバッグビルドにおいて実行されるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is called by the compiler to handle dictionary literals.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、辞書リテラルを取り扱うためにコンパイラによって呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is unusual to need to call this method directly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを直接呼び出す必要は通常ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler for each string interpolation segment when you use string interpolation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それはあなたが文字列補間を使う時にコンパイラによって各文字列補間分節に対して使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when interpreting string interpolations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは文字列補間を解釈する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance by using a floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスを浮動小数点リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance by using an integer literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスを整数リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Float80<ept i="0">&lt;/c0&gt;</ept> instance by using a floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Float80<ept i="0">&lt;/c0&gt;</ept>インスタンスを浮動小数点リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Float80<ept i="0">&lt;/c0&gt;</ept> instance by using an integer literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Float80<ept i="0">&lt;/c0&gt;</ept>インスタンスを整数リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> instance by using a floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>インスタンスを浮動小数点リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> instance by using an integer literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>インスタンスを整数リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you create a string using string interpolation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それはあなたが文字列補間を使って文字列を作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you initialize a string using a string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが文字列リテラルを使って文字列を初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you initialize an <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> instance with a <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>インスタンスを<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>リテラルで初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you use a Boolean literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたがブールリテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you use a string literal to initialize a <bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが文字列リテラルを使って<bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept>インスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you use an array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが配列リテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used by the compiler when you use string interpolation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それはあなたが文字列補間を使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used by the compiler when you initialize a static string using a string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが文字列リテラルを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used by the compiler when you initialize a static string using an extended grapheme cluster.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが拡張初期素クラスタを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used by the compiler when you initialize a static string with a Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたがユニコードスカラーで静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used by the compiler when you initialize a string using a string literal containing a single extended grapheme cluster.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが単一の拡張初期素クラスタを格納する文字列リテラルを使って文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used by the compiler when you initialize a string using a string literal that contains a single Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが単一のユニコードスカラー値を含む文字列リテラルを使って文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used by the compiler when you use a string literal to initialize a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは、あなたが文字列リテラルを使って<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It only works for APIs that have a <bpt i="0" x="0">&lt;c0&gt;</bpt>va_list<ept i="0">&lt;/c0&gt;</ept> variant, so for example, it isn’t much use if all you have is:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それは<bpt i="0" x="0">&lt;c0&gt;</bpt>va_list<ept i="0">&lt;/c0&gt;</ept>バリアントを持つAPIに対してのみ働きます、あなたが次のものしか持っていないならば、それはあまり使うことはありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Iterating Over the Contents of a Dictionary</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の内容すべてにわたって反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Iterating over a dictionary yields the key-value pairs as two-element tuples.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある辞書すべてを対象として反復することは、キー値ペアを２要素タプルとして生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションの要素すべてにそれの位置によって反復していくことは、そのコレクションすべてにそれのイテレータを使って反復していくのと同じ要素を同じ順序で生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Its <bpt i="1" x="1">&lt;c1&gt;</bpt>deinit<ept i="1">&lt;/c1&gt;</ept> must destroy its stored <bpt i="2" x="2">&lt;c2&gt;</bpt>Header<ept i="2">&lt;/c2&gt;</ept> and any constructed <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの<bpt i="1" x="1">&lt;c1&gt;</bpt>deinit<ept i="1">&lt;/c1&gt;</ept>は、それの格納された<bpt i="2" x="2">&lt;c2&gt;</bpt>Header<ept i="2">&lt;/c2&gt;</ept>とあらゆる構成された<bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>を破棄しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Its requirements are inherited by <bpt i="0" x="0">&lt;c0&gt;</bpt>ForwardIndex<ept i="0">&lt;/c0&gt;</ept> and thus must be satisfied by types conforming to that protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの要件は<bpt i="0" x="0">&lt;c0&gt;</bpt>ForwardIndex<ept i="0">&lt;/c0&gt;</ept>によって継承されます、そしてそれゆえにそのプロトコルに準拠している型によって満たされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It’s your responsibility to verify the memory safety of code that uses unsafe APIs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらの（安全でない）unsafe APIが使うコードのメモリ安全を立証するのは、あなたの責務です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Language</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>言語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Lastly, use the eponymous <bpt i="0" x="0">&lt;c0&gt;</bpt>replaceSubrange(_:with:)<ept i="0">&lt;/c0&gt;</ept> method to replace a subrange of elements with the contents of another collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最後に、名前の元となった<bpt i="0" x="0">&lt;c0&gt;</bpt>replaceSubrange(_:with:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、いくつかの要素からなる下位範囲を別のコレクションの内容で置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Lazy sequences can be used to avoid needless storage allocation and computation, because they use an underlying sequence for storage and compute their elements on demand.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>遅延シーケンスは、不必要なストレージの割り当てと計算を防止するために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Learn how the Swift standard library uses protocols and generics to express powerful constraints.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>どのようにSwift標準ライブラリがプロトコルや総称体を使ってパワフルな制約を表すかを学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Left associative</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>左結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Left bit shift and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>左ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Less than</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より小さい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Less than or equal</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より小さいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Likewise, <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept> types can remove one or more elements using a single operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同様に、<bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept>型は、１つ以上の要素をただ１つの演算を使うことによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Likewise, if <bpt i="2" x="2">&lt;c2&gt;</bpt>n &lt; 0<ept i="2">&lt;/c2&gt;</ept>, a limit that is greater than <bpt i="3" x="3">&lt;c3&gt;</bpt>i<ept i="3">&lt;/c3&gt;</ept> has no effect.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同様に、<bpt i="2" x="2">&lt;c2&gt;</bpt>n &lt; 0<ept i="2">&lt;/c2&gt;</ept>ならば、<bpt i="3" x="3">&lt;c3&gt;</bpt>i<ept i="3">&lt;/c3&gt;</ept>より大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Likewise, if <bpt i="3" x="3">&lt;c3&gt;</bpt>n &lt; 0<ept i="3">&lt;/c3&gt;</ept>, <bpt i="4" x="4">&lt;c4&gt;</bpt>limit<ept i="4">&lt;/c4&gt;</ept> has no effect if it is greater than <bpt i="5" x="5">&lt;c5&gt;</bpt>i<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同様に、<bpt i="3" x="3">&lt;c3&gt;</bpt>n &lt; 0<ept i="3">&lt;/c3&gt;</ept>、<bpt i="4" x="4">&lt;c4&gt;</bpt>limit<ept i="4">&lt;/c4&gt;</ept>は、それが<bpt i="5" x="5">&lt;c5&gt;</bpt>i<ept i="5">&lt;/c5&gt;</ept>より大きいならば効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Likewise, if <bpt i="3" x="3">&lt;c3&gt;</bpt>n &lt; 0<ept i="3">&lt;/c3&gt;</ept>, <bpt i="4" x="4">&lt;c4&gt;</bpt>limit<ept i="4">&lt;/c4&gt;</ept> should be less than <bpt i="5" x="5">&lt;c5&gt;</bpt>i<ept i="5">&lt;/c5&gt;</ept> to have any effect.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同様に、<bpt i="3" x="3">&lt;c3&gt;</bpt>n &lt; 0<ept i="3">&lt;/c3&gt;</ept>ならば、<bpt i="4" x="4">&lt;c4&gt;</bpt>limit<ept i="4">&lt;/c4&gt;</ept>が何らかの効果を持つには<bpt i="5" x="5">&lt;c5&gt;</bpt>i<ept i="5">&lt;/c5&gt;</ept>より少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Likewise, if you pass a zero-length collection as the <bpt i="0" x="0">&lt;c0&gt;</bpt>newElements<ept i="0">&lt;/c0&gt;</ept> parameter, this method removes the elements in the given subrange without replacement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同様に、あなたがゼロ長コレクションを<bpt i="0" x="0">&lt;c0&gt;</bpt>newElements<ept i="0">&lt;/c0&gt;</ept>パラメータとして渡すならば、このメソッドは与えられた下位範囲の中の要素を置き換えることなく削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Locale-independent case-insensitive operation, and other needs, can be achieved by calling <bpt i="0" x="0">&lt;c0&gt;</bpt>rangeOfString(_:options:_, range:_locale:_)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ロケール独立で大文字小文字を考慮しない演算、そして他の需要は、<bpt i="0" x="0">&lt;c0&gt;</bpt>rangeOfString(_:options:_, range:_locale:_)<ept i="0">&lt;/c0&gt;</ept>を呼び出すことによって成し遂げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logical AND</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logical NOT</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logical OR</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logical conjunction</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理連言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logical disjunction</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理選言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Long-term storage of <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> instances is discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>インスタンスの長期ストレージは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can appear to be memory and object leakage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリとオブジェクトの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can erroneously appear to be memory leakage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Making your own custom types conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> enables many useful operations, like <bpt i="1" x="1">&lt;c1&gt;</bpt>for<ept i="1">&lt;/c1&gt;</ept>-<bpt i="2" x="2">&lt;c2&gt;</bpt>in<ept i="2">&lt;/c2&gt;</ept> looping and the <bpt i="3" x="3">&lt;c3&gt;</bpt>contains<ept i="3">&lt;/c3&gt;</ept> method, without much effort.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのあつらえの型を<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>に準拠させることは、多くの有用な演算能力を与えます、<bpt i="1" x="1">&lt;c1&gt;</bpt>for<ept i="1">&lt;/c1&gt;</ept>-<bpt i="2" x="2">&lt;c2&gt;</bpt>in<ept i="2">&lt;/c2&gt;</ept>ループおよび<bpt i="3" x="3">&lt;c3&gt;</bpt>contains<ept i="3">&lt;/c3&gt;</ept>メソッドのように、あまり苦労せずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Manage the given <bpt i="0" x="0">&lt;c0&gt;</bpt>buffer<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>buffer<ept i="0">&lt;/c0&gt;</ept>を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many functions and methods document the requirements that must be satisfied by the caller, such as an array index being valid; memory safety is guaranteed even if a requirement is violated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くの関数やメソッドはいくらかの要件を文書化します、それは呼び出し側によって満たされる必要があるものです、例えば有効な配列インデックスなど；メモリ安全は、たとえある要件が破られたとしても保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many functions and methods have documented performance characteristics.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くの関数やメソッドは、性能上の特徴を文書化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode code points.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くの単一の文字、例えば「é」、「김」、そして「🇮🇳」などが、複数のユニコードコード点から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many language features have a corresponding protocol—any type that conforms to the protocol can be used with that feature.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くの言語機能は、対応するプロトコルを持ちます—そのプロトコルに準拠するあらゆる型は、その機能とともに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many sequence and collection operations return an array or a type-erasing collection wrapper instead of a set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>多くのシーケンスおよびコレクション演算は、集合ではなく、ある配列またはある型消去コレクションラッパーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many types in the standard library already conform to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリの多くの型はすでに<bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many types in the standard library conform to <bpt i="1" x="1">&lt;c1&gt;</bpt>Hashable<ept i="1">&lt;/c1&gt;</ept>: strings, integers, floating-point and Boolean values, and even sets provide a hash value by default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリの中の多くの型が<bpt i="1" x="1">&lt;c1&gt;</bpt>Hashable<ept i="1">&lt;/c1&gt;</ept>に準拠します：文字列、整数、浮動小数点、およびブール値、そしてたとえ初期状態でハッシュ値を提供する集合でさえ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many value types in Swift bridge to Objective-C counterparts, like <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftでの多くの値型は、Objective-Cの相当物へとブリッジします、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>や<bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept>のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>May also supply a “display style” property that suggests how this structure might be rendered.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>またどのようにこの構造体がレンダリングされることになるかを提案する「表示形式」プロパティを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Memory is allocated and value is initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリは割り当てられて値が初期化される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Memory is allocated, but value has not been initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリは割り当てられる、しかし値は初期化されていない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Memory is not allocated (for example, pointer is null, or memory has been deallocated previously).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリは割り当てられない（例えば、ポインタがnullである、または以前に割り当て解除されてしまっている）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Memory safety is also not guaranteed if there is a race condition in multithreaded code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>メモリ安全はまた、マルチスレッドコードにおける競合状態があるならば保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Mirrors are used by playgrounds and the debugger.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>さまざまなMirrorがプレイグラウンドとデバッガによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Modifying Copies of Arrays</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列のコピーを修正する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Modifying a copy of a string leaves the original unaffected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のコピーを修正しても、元のものはそのままで影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Modifying and Comparing Strings</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の修正と比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, a collection’s indices form a finite range of the positions of the collection’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その上、コレクションのインデックスは、コレクションの要素の位置からなる有限の範囲を形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, inequality is the inverse of equality, so any custom implementation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>!=<ept i="0">&lt;/c0&gt;</ept> operator must guarantee that <bpt i="1" x="1">&lt;c1&gt;</bpt>a != b<ept i="1">&lt;/c1&gt;</ept> implies <bpt i="2" x="2">&lt;c2&gt;</bpt>!(a == b)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その上に、不等性は同等性の逆です、それで<bpt i="0" x="0">&lt;c0&gt;</bpt>!=<ept i="0">&lt;/c0&gt;</ept>演算子のあらゆるあつらえの実装は、<bpt i="1" x="1">&lt;c1&gt;</bpt>a != b<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>!(a == b)<ept i="2">&lt;/c2&gt;</ept>を意味することを保証しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most basic types in the Swift standard library conform to <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swift標準ライブラリの基本的な型のほとんどは<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most collections in the standard library use <bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept> as their iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリの中のほとんどのコレクションは、<bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept>をそれらのイテレータとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most operations with a NaN operand produce a NaN result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaN演算数を使うほとんどの演算は、結果NaNを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiple copies of an array share the same storage until you modify one of the copies.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある配列の複数のコピーは、あなたがコピーの１つを修正するまでは、同じストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiplication</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>乗法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiplies <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept> and stores the result in <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>, trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の乗算、結果を<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>に格納します、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiplies <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning the result and trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の乗算、結果を返して、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiplies <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, silently discarding any overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の乗算、黙ってあらゆるオーバーフローを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiplies this value by the given value in place, rounding to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と与えられた値をその場で乗算します、表現可能な値に丸めています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiply</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>乗算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiply <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning a result and a <bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept> that is <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept> iff the operation caused an arithmetic overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の乗算、結果を返します、そしてこの演算が算術的オーバーフローをもたらした場合に限り<bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiply and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>乗算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multiply, ignoring overflow</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>乗算、オーバーフローを無視</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Must never be called, since this collection is always empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>決して呼ばないでください、このコレクションは常に空であるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Mutating variant: sort</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>可変型式：sort</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>NaN (“not a number”)</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaN（「非数」）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>NaN is not equal to any value, including itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNは、それ自身を含めてあらゆる値と等しくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>NaN propagates through many arithmetic operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNは、いくつもの算術演算をずっと伝播していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>NaN values compare not equal to every value, including themselves.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNは、それら自身を含めてあらゆる値に対して等しくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Neither the <bpt i="0" x="0">&lt;c0&gt;</bpt>firstHalf<ept i="0">&lt;/c0&gt;</ept> nor <bpt i="1" x="1">&lt;c1&gt;</bpt>secondHalf<ept i="1">&lt;/c1&gt;</ept> slices allocate any new storage of their own.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>firstHalf<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>secondHalf<ept i="1">&lt;/c1&gt;</ept>スライスのどちらも、なんらそれら独自の新規ストレージを割り当てません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Nested Types</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>入れ子にされた型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next, create unique options as static properties of your custom type using unique powers of two (1, 2, 4, 8, 16, and so forth) for each individual property’s raw value so that each property can be represented by a single bit of the type’s raw value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に、それぞれが特有なオプションをあなたのあつらえの型の静的プロパティとして作成してください、特有な２の冪（1、2、4、8、16、およびそれ以降）を各個別プロパティの生の値に対して使います、それで各プロパティはその型の持つ生の値からなるある単一ビットによって表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next, implement the <bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept> operator function, the requirement inherited from the <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に、<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>演算子関数、<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>プロトコルから継承される要件を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next, the <bpt i="1" x="1">&lt;c1&gt;</bpt>while<ept i="1">&lt;/c1&gt;</ept> loop calls the iterator’s <bpt i="2" x="2">&lt;c2&gt;</bpt>next()<ept i="2">&lt;/c2&gt;</ept> method repeatedly, binding each element that is returned to <bpt i="3" x="3">&lt;c3&gt;</bpt>animal<ept i="3">&lt;/c3&gt;</ept> and exiting when the <bpt i="4" x="4">&lt;c4&gt;</bpt>next()<ept i="4">&lt;/c4&gt;</ept> method returns <bpt i="5" x="5">&lt;c5&gt;</bpt>nil<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に、<bpt i="1" x="1">&lt;c1&gt;</bpt>while<ept i="1">&lt;/c1&gt;</ept>ループは、そのイテレータのもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>next()<ept i="2">&lt;/c2&gt;</ept>メソッドを繰り返し呼び出して、返される各要素を<bpt i="3" x="3">&lt;c3&gt;</bpt>animal<ept i="3">&lt;/c3&gt;</ept>に束縛して、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>next()<ept i="4">&lt;/c4&gt;</ept>メソッドが<bpt i="5" x="5">&lt;c5&gt;</bpt>nil<ept i="5">&lt;/c5&gt;</ept>を返すとき退出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next, the observations in Celsius are converted to Fahrenheit:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次に、摂氏での観測は華氏に変換されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Nil coalescing</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No buffering storage is allocated and each traversal step invokes <bpt i="0" x="0">&lt;c0&gt;</bpt>predicate<ept i="0">&lt;/c0&gt;</ept> on one or more underlying elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファするストレージが割り当てられること、そしてひとつひとつ見ていく各処理が１つまたはそれ以上の基盤となる要素上で<bpt i="0" x="0">&lt;c0&gt;</bpt>predicate<ept i="0">&lt;/c0&gt;</ept>を呼び出すことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>Int16<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>Int16<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>Int32<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>Int32<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>Int64<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>Int64<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>Int8<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>Int8<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう – それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt16<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt16<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう – それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt32<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt32<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt64<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt64<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt8<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt8<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう - それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs, and the resulting <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt<ept i="3">&lt;/c3&gt;</ept> may not have the same numeric value as <bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>–it is only guaranteed to use the same pattern of bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査が起こることはありません、そして結果の<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt<ept i="3">&lt;/c3&gt;</ept>は<bpt i="4" x="4">&lt;c4&gt;</bpt>bitPattern<ept i="4">&lt;/c4&gt;</ept>と同じ数値を持たないでしょう – それはただ同じビットのパターンを使うことだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No range or overflow checking occurs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲またはオーバーフロー検査は発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>None</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not equal</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>等しくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not identical</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同一でない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>Float80.significandBitCount<ept i="0">&lt;/c0&gt;</ept> is 63, even though 64 bits are used to store the significand in the memory representation of a <bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept> (unlike other floating-point types, <bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept> explicitly stores the leading integral significand bit, but the <bpt i="3" x="3">&lt;c3&gt;</bpt>BinaryFloatingPoint<ept i="3">&lt;/c3&gt;</ept> APIs provide an abstraction so that users don’t need to be aware of this detail).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Float80.significandBitCount<ept i="0">&lt;/c0&gt;</ept>は63であることに注意してください、64ビットが使用されて仮数を<bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept>メモリ表現に格納するとしてもです（他の浮動小数点型と違い、<bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept>は明示的に先頭整数仮数ビットを格納します、しかし<bpt i="3" x="3">&lt;c3&gt;</bpt>BinaryFloatingPoint<ept i="3">&lt;/c3&gt;</ept> APIはある抽象化を提供します、それでユーザはこの詳細に通じている必要はありません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>isFinite<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>isInfinite<ept i="1">&lt;/c1&gt;</ept> do not form a dichotomy, because they are not total: If <bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>NaN<ept i="3">&lt;/c3&gt;</ept>, then both properties are <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isFinite<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>isInfinite<ept i="1">&lt;/c1&gt;</ept>は二項対立を形作らないことに注意してください、なぜならそれらが全てではないからです：<bpt i="2" x="2">&lt;c2&gt;</bpt>x<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>NaN<ept i="3">&lt;/c3&gt;</ept>ならば、そのとき両方のプロパティとも<bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="10" x="10">&lt;c10&gt;</bpt>q<ept i="10">&lt;/c10&gt;</ept> is <bpt i="11" x="11">&lt;e11&gt;</bpt>not<ept i="11">&lt;/e11&gt;</ept> <bpt i="12" x="12">&lt;c12&gt;</bpt>x / y<ept i="12">&lt;/c12&gt;</ept> computed in floating-point arithmetic, and that <bpt i="13" x="13">&lt;c13&gt;</bpt>q<ept i="13">&lt;/c13&gt;</ept> may not be representable in any available integer type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="10" x="10">&lt;c10&gt;</bpt>q<ept i="10">&lt;/c10&gt;</ept>が浮動小数点算術で計算される<bpt i="12" x="12">&lt;c12&gt;</bpt>x / y<ept i="12">&lt;/c12&gt;</ept>では<bpt i="11" x="11">&lt;e11&gt;</bpt>ない<ept i="11">&lt;/e11&gt;</ept>こと、そして<bpt i="13" x="13">&lt;c13&gt;</bpt>q<ept i="13">&lt;/c13&gt;</ept>は何らかの利用可能な整数型において表現可能でないかもしれないことに注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that in some cases the result may be <bpt i="5" x="5">&lt;c5&gt;</bpt>.Text(String(reflecting: subject))<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくらかの場合にはその結果は<bpt i="5" x="5">&lt;c5&gt;</bpt>.Text(String(reflecting: subject))<ept i="5">&lt;/c5&gt;</ept>になるかもしれないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that in this example, <bpt i="0" x="0">&lt;c0&gt;</bpt>imagePaths<ept i="0">&lt;/c0&gt;</ept> is subscripted using a dictionary index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例において、<bpt i="0" x="0">&lt;c0&gt;</bpt>imagePaths<ept i="0">&lt;/c0&gt;</ept>が辞書インデックスを使って添え字をすることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that some elements in the <bpt i="0" x="0">&lt;c0&gt;</bpt>temperatureData<ept i="0">&lt;/c0&gt;</ept> array are not valid numbers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>temperatureData<ept i="0">&lt;/c0&gt;</ept>配列の幾つかの要素は有効な数字ではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the <bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept> operator provided by the standard library is used in this example, not the <bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept> operator implemented above.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリによって提供される<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>演算子がこの例で使われることに注意してください、上で実装される<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>演算子ではなしに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> array is suitably-aligned <bpt i="1" x="1">&lt;s1&gt;</bpt>raw memory<ept i="1">&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>配列は、<bpt i="1" x="1">&lt;s1&gt;</bpt>生のメモリ<ept i="1">&lt;/s1&gt;</ept>に適切に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note: this property need not be implemented by conforming types, it has a default implementation in a protocol extension that just returns <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>注意：このプロパティは準拠する型で実装される必要はありません、それはプロトコル拡張において初期実装、単に<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>を返すものを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now suppose you have an array of addresses that you need to check for a particular address.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>今あなたがいくらかの住所からなる配列、あなたがある特定の住所を確認する必要があるものを持つと仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now that <bpt i="0" x="0">&lt;c0&gt;</bpt>Date<ept i="0">&lt;/c0&gt;</ept> conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>, you can compare instances of the type with any of the relational operators.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>今や<bpt i="0" x="0">&lt;c0&gt;</bpt>Date<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>に準拠します、あなたはこの型のインスタンスを関係演算子のどれででも比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now that <bpt i="0" x="0">&lt;c0&gt;</bpt>GridPoint<ept i="0">&lt;/c0&gt;</ept> conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Hashable<ept i="1">&lt;/c1&gt;</ept> protocol, you can create a set of previously tapped grid points.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>GridPoint<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Hashable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠する今、あなたは以前にタップされた格子点の集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now that the <bpt i="0" x="0">&lt;c0&gt;</bpt>shorterIndices<ept i="0">&lt;/c0&gt;</ept> array holds the indices of the shorter names in the <bpt i="1" x="1">&lt;c1&gt;</bpt>names<ept i="1">&lt;/c1&gt;</ept> set, you can use those indices to access elements in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>現在、<bpt i="0" x="0">&lt;c0&gt;</bpt>shorterIndices<ept i="0">&lt;/c0&gt;</ept>配列は<bpt i="1" x="1">&lt;c1&gt;</bpt>names<ept i="1">&lt;/c1&gt;</ept>集合の中の短い名前のインデックスを保持します、あなたはそれらのインデックスを使って集合の中の要素にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Numerals greater than 9 are represented as Roman letters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>９より大きい数詞はローマ字で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Objects with a concrete type of <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept> maintain a specific dynamic type and can be cast to that type using one of the type-cast operators (<bpt i="1" x="1">&lt;c1&gt;</bpt>as<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>as?<ept i="2">&lt;/c2&gt;</ept>, or <bpt i="3" x="3">&lt;c3&gt;</bpt>as!<ept i="3">&lt;/c3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>具体的な型として<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept>を持つオブジェクトは、特定の動的な型を保守して、その型へと型キャスト演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>as<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>as?<ept i="2">&lt;/c2&gt;</ept>。または<bpt i="3" x="3">&lt;c3&gt;</bpt>as!<ept i="3">&lt;/c3&gt;</ept>）の１つを使ってキャストされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Obtain each separate iterator from separate calls to the sequence’s <bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept> method rather than by copying.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのシーケンスのもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept>メソッドへの独立した呼び出しから独立したイテレータを取得してください、コピーによってではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Offsets the given index by the specified distance, or so that it equals the given limiting index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスを指定された間隔で補います、またはそれでそれは与えられた限界インデックスと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Offsets the given index by the specified distance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスを指定された間隔で補います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Often, the optimizer can eliminate bounds checks within an array algorithm, but when that fails, invoking the same algorithm on the buffer pointer passed into your closure lets you trade safety for speed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しばしば、最適化機能は配列アルゴリズム内部で境界検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムをあなたのクロージャへ渡されるパッファポインタ上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On 32-bit platforms, <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> is the same size as <bpt i="1" x="1">&lt;c1&gt;</bpt>Int32<ept i="1">&lt;/c1&gt;</ept>, and on 64-bit platforms, <bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept> is the same size as <bpt i="3" x="3">&lt;c3&gt;</bpt>Int64<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>32ビットプラットホーム上では、<bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>Int32<ept i="1">&lt;/c1&gt;</ept>と同じ大きさです、そして64ビットプラットホーム上では、<bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>Int64<ept i="3">&lt;/c3&gt;</ept>と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On 32-bit platforms, <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept> is the same size as <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt32<ept i="1">&lt;/c1&gt;</ept>, and on 64-bit platforms, <bpt i="2" x="2">&lt;c2&gt;</bpt>UInt<ept i="2">&lt;/c2&gt;</ept> is the same size as <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt64<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>32ビットプラットホーム上では、<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt32<ept i="1">&lt;/c1&gt;</ept>と同じ大きさです、そして64ビットプラットホーム上では、<bpt i="2" x="2">&lt;c2&gt;</bpt>UInt<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt64<ept i="3">&lt;/c3&gt;</ept>と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On This Page</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この項には</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On removal, this method invalidates all indices with respect to the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>除去において、このメソッドはこの辞書に関するすべてのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On targets that do not support subnormals, <bpt i="2" x="2">&lt;c2&gt;</bpt>x.ulp<ept i="2">&lt;/c2&gt;</ept> may be rounded to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>サブノーマルをサポートしない対象において、<bpt i="2" x="2">&lt;c2&gt;</bpt>x.ulp<ept i="2">&lt;/c2&gt;</ept>はゼロに丸められるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, an emoji flag character is constructed from a pair of Unicode scalars values, like <bpt i="0" x="0">&lt;c0&gt;</bpt>"\u{1F1F5}"<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>"\u{1F1F7}"<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一方で、あるひとつのemoji国旗文字は一対のユニコードスカラー値から構築されます、<bpt i="0" x="0">&lt;c0&gt;</bpt>"\u{1F1F5}"<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>"\u{1F1F7}"<ept i="1">&lt;/c1&gt;</ept>のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> has been returned, all subsequent calls return <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一旦<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>が返されるならば、すべての続いて起こる呼び出しは<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> has been returned, all subsequent calls return <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一旦<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>が返されるならば、すべての続いて起こる呼び出しは<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once again, use pattern matching to conditionally catch errors.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>再び、パターンマッチを条件付きでエラーを捕まえるのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One example is the <bpt i="0" x="0">&lt;c0&gt;</bpt>reduce1(_:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つの例は<bpt i="0" x="0">&lt;c0&gt;</bpt>reduce1(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of the values to multiply before adding to this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値に加えられる前に掛け合わされる値のうちの１つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only the <bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept> type conforms to <bpt i="2" x="2">&lt;c2&gt;</bpt>ExpressibleByNilLiteral<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept>型だけが<bpt i="2" x="2">&lt;c2&gt;</bpt>ExpressibleByNilLiteral<ept i="2">&lt;/c2&gt;</ept>に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only three types provided by Swift—<bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>DarwinBoolean<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>ObjCBool<ept i="2">&lt;/c2&gt;</ept>—are treated as Boolean values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftによって提供される３つの型—<bpt i="0" x="0">&lt;c0&gt;</bpt>Bool<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>DarwinBoolean<ept i="1">&lt;/c1&gt;</ept>、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>ObjCBool<ept i="2">&lt;/c2&gt;</ept>—だけがブール値とみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Opaque pointers are used to represent C pointers to types that cannot be represented in Swift, such as incomplete struct types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明ポインタは、スウィフトでは表されることができない型、例えば不完全なstruct型などへのCポインタを表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Operations on types conforming to the <bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept> protocol should support this behavior, but they might also support other options.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型での演算はこの挙動をサポートします、しかしそれらはまた他の選択肢もサポートするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Operations with infinite values follow real arithmetic as much as possible: Adding or subtracting a finite value, or multiplying or dividing infinity by a nonzero finite value, results in infinity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無限大値を伴う演算は、実数算術にできうる限り従います：ある無限大値を加算や減算すること、または非ゼロの有限値によって無限に乗算や除算することは、無限大の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Operator</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Operator Functions</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算子関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Operators</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>様々な演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Optimizations are sometimes applied that can reduce the amount of copying.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最適化は時折適用されて、コピー回数を減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Option Sets</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Option set values have a one-to-one correspondence with their associated raw values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセット値それらは、それらの関連する生の値と一対一の対応を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Option sets all conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept> by inheritance using the <bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセットすべては、<bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept>への準拠を<bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept>プロトコルを使って継承することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Option sets use bitwise operations on their associated raw values to implement their mathematical set operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセットは、ビット単位演算をそれらの関連する生の値上で使うことで、それらの数学的集合演算を実施します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Optional Binding</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプショナル束縛</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Optional Chaining</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプショナル連鎖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other classes derived from such an ancestor are given a default mirror.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのような先祖から派生する別のクラスは、省略時のミラーを与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other than these signaling operations, a signaling NaN behaves in the same manner as a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのシグナル演算の他は、シグナルNaNはクワイエットNaNと同じ流儀で振舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>ancestorRepresentation<ept i="2">&lt;/c2&gt;</ept> determines whether ancestor classes will be represented and whether their <bpt i="3" x="3">&lt;c3&gt;</bpt>customMirror<ept i="3">&lt;/c3&gt;</ept> implementations will be used.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>ancestorRepresentation<ept i="2">&lt;/c2&gt;</ept>は先祖クラスたちが表されるかどうかそしてそれらの<bpt i="3" x="3">&lt;c3&gt;</bpt>customMirror<ept i="3">&lt;/c3&gt;</ept>実装が使われるかどうかを判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, a Unicode replacement character (<bpt i="2" x="2">&lt;c2&gt;</bpt>"\u{FFFD}"<ept i="2">&lt;/c2&gt;</ept>) is inserted for each detected error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、ユニコード代用文字（<bpt i="2" x="2">&lt;c2&gt;</bpt>"\u{FFFD}"<ept i="2">&lt;/c2&gt;</ept>）が各検出エラーに対して挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, iteration will stop if an encoding error is detected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、反復はエンコーディングエラーが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, iteration will stop if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、反復は誤形式シーケンスが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, returns <bpt i="3" x="3">&lt;c3&gt;</bpt>(false, oldMember)<ept i="3">&lt;/c3&gt;</ept>, where <bpt i="4" x="4">&lt;c4&gt;</bpt>oldMember<ept i="4">&lt;/c4&gt;</ept> is the member of the set equal to <bpt i="5" x="5">&lt;c5&gt;</bpt>newMember<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、<bpt i="3" x="3">&lt;c3&gt;</bpt>(false, oldMember)<ept i="3">&lt;/c3&gt;</ept>を返します、そこで<bpt i="4" x="4">&lt;c4&gt;</bpt>oldMember<ept i="4">&lt;/c4&gt;</ept>は<bpt i="5" x="5">&lt;c5&gt;</bpt>newMember<ept i="5">&lt;/c5&gt;</ept>に等しいこの集合のメンバです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, returns a <bpt i="3" x="3">&lt;c3&gt;</bpt>PlaygroundQuickLook<ept i="3">&lt;/c3&gt;</ept> synthesized for <bpt i="4" x="4">&lt;c4&gt;</bpt>subject<ept i="4">&lt;/c4&gt;</ept> by the language.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、<bpt i="3" x="3">&lt;c3&gt;</bpt>subject<ept i="3">&lt;/c3&gt;</ept>のために言語によって合成される<bpt i="4" x="4">&lt;c4&gt;</bpt>PlaygroundQuickLook<ept i="4">&lt;/c4&gt;</ept>が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, the result is generated by the language.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうでなければ、結果は言語によって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Overview</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Parameter: A metatype.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>パラメータ：あるメタタイプ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Parameters</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Parses the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> as a text representation of a property list, returning an NSString, NSData, NSArray, or NSDictionary object, according to the topmost element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>をプロパティリストのテキスト表現として構文解析します、１番上の要素に従って、NSString、NSData、NSArray、またはNSDictionaryオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> If you do not need this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがこの値を必要としないならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if you do not need this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがこの値を必要としないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if you need the result to use only ASCII characters; otherwise, pass <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが結果にASCII文字のみ使うことを必要とするならば<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to create a new string, even when the data referenced by <bpt i="1" x="1">&lt;c1&gt;</bpt>cString<ept i="1">&lt;/c1&gt;</ept> contains ill-formed sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡すと、<bpt i="1" x="1">&lt;c1&gt;</bpt>cString<ept i="1">&lt;/c1&gt;</ept>によって参照されるデータが誤形式シーケンスを含む時であっても新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to create a signaling NaN or <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> to create a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シグナルNaNを作成するために<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を、またはクワイエットNaNを作成するために<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to keep the existing capacity of the array after removing its elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡すと、この配列の既存の容量をそれの要素の削除後に保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to measure the length of <bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept> even when <bpt i="2" x="2">&lt;c2&gt;</bpt>input<ept i="2">&lt;/c2&gt;</ept> contains ill-formed sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡すと、<bpt i="2" x="2">&lt;c2&gt;</bpt>input<ept i="2">&lt;/c2&gt;</ept>が誤形式シーケンスを含む時であっても<bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept>の長さを測ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to prevent the release of the string’s allocated storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡して文字列のもつ割り当てストレージの解放を防止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to request that the collection avoid releasing its storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡して、コレクションがそのストレージを解放するのを回避するよう要求してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to stop translation when an encoding error is detected in <bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡すと、翻訳はエンコーディングエラーが<bpt i="1" x="1">&lt;c1&gt;</bpt>input<ept i="1">&lt;/c1&gt;</ept>において検出されるときに停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> to use uppercase letters to represent numerals greater than 9, or <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> to use lowercase letters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を渡すことで大文字を使って９より大きい数詞を表します、または<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>では小文字を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept> to interrupt the creation of the new string if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>を渡すと新しい文字列の作成は、誤形式シーケンスが検出されるならば中断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass <bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept> to immediately stop measuring <bpt i="5" x="5">&lt;c5&gt;</bpt>input<ept i="5">&lt;/c5&gt;</ept> when an ill-formed sequence is encountered.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>false<ept i="4">&lt;/c4&gt;</ept>を渡すと、誤形式シーケンスと出くわす場合に<bpt i="5" x="5">&lt;c5&gt;</bpt>input<ept i="5">&lt;/c5&gt;</ept>の計測を直ちに中止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass a dictionary literal with <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> keys as <bpt i="1" x="1">&lt;c1&gt;</bpt>children<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>を使った辞書リテラルを<bpt i="1" x="1">&lt;c1&gt;</bpt>children<ept i="1">&lt;/c1&gt;</ept>として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass the greater-than operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>&gt;<ept i="1">&lt;/c1&gt;</ept>) operator as the predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より大きい（<bpt i="1" x="1">&lt;c1&gt;</bpt>&gt;<ept i="1">&lt;/c1&gt;</ept>）演算子を述部として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Passing a NaN to an operation generally results in NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>NaNをある演算に渡すことは、一般的にNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Passing an sequence with no elements or an empty collection as <bpt i="0" x="0">&lt;c0&gt;</bpt>possiblePrefix<ept i="0">&lt;/c0&gt;</ept> always results in <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つの要素もないシーケンスまたは空のコレクションを<bpt i="0" x="0">&lt;c0&gt;</bpt>possiblePrefix<ept i="0">&lt;/c0&gt;</ept>として渡すことは、常に<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Passing any other format or any additional characters as <bpt i="0" x="0">&lt;c0&gt;</bpt>text<ept i="0">&lt;/c0&gt;</ept> results in <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何か他の形式または追加文字を<bpt i="0" x="0">&lt;c0&gt;</bpt>text<ept i="0">&lt;/c0&gt;</ept>として渡すことは、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Passing pointers to mutable arrays of ObjC class pointers is not directly supported.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ObjCクラスポインタの可変配列へポインタを渡すことは、直接にサポートされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Passing the collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> as the <bpt i="1" x="1">&lt;c1&gt;</bpt>start<ept i="1">&lt;/c1&gt;</ept> parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>start<ept i="1">&lt;/c1&gt;</ept>パラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Passing the collection’s starting index as the <bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの開始インデックスを<bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>パラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pattern match</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>パターン・マッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Perform string transliteration.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列変換を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performance Optimizations</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>性能最適化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing a bitwise AND operation with a value and <bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept> always returns <bpt i="1" x="1">&lt;c1&gt;</bpt>allZeros<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のAND演算をある値と<bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept>で実行することは、常に<bpt i="1" x="1">&lt;c1&gt;</bpt>allZeros<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing a bitwise NOT operation on <bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept> returns a value with every bit set to <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のNOT演算を<bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept>で実行することは、すべてのビットが<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>に設定された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing a bitwise OR operation with a value and <bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept> always returns the same value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のOR演算をある値と<bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept>で実行することは、常に同じ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing a bitwise XOR operation with a value and <bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept> always returns the same value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のXOR演算をある値と<bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept>で実行することは、常に同じ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing a bitwise XOR with a value and <bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept> always returns the same value:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位XORをある値と<bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept>で実行することは、常に同じ値を返します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing an invalid cast triggers a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不正なキャストを行うことは実行時エラーの引き金になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performing truncating division with floating-point values results in a truncated integer quotient and a remainder.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不動小数点値で切り捨て除算を実行することは、切り捨てられる整数指数と余りという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a logical AND operation on two Bool values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理AND演算を２つのブール値上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a logical NOT operation on a Boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理否定演算をあるブール値上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a logical OR operation on two Bool values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理OR演算を２つのブール値上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> instance or a default <bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept> value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体演算を実行します、ラップされた値の<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>インスタンスまたは省略時の<bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept>値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> instance or a default value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体演算を実行します、ラップされた値の<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>インスタンスまたは省略時の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a traditional C-style assert with an optional message.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>随意のメッセージを持つ伝統的なC形式アサートを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs an unbalanced autorelease of the object.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オブジェクトのある不均衡なオートリリース（自動解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs an unbalanced release of the object.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オブジェクトのある不均衡なリリース（解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs an unbalanced retain of the object.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オブジェクトのある不均衡なリテイン（保持）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs linguistic analysis on the specified string by enumerating the specific range of the string, providing the Block with the located tags.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>言語学的分析を指定された文字列上で文字列の特定の範囲を列挙することによって実行します、位置決めタグを持つBlockを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Plain text.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレーンテキスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Playgrounds and the debugger will show a representation similar to the one used for instances of the kind indicated by the <bpt i="0" x="0">&lt;c0&gt;</bpt>DisplayStyle<ept i="0">&lt;/c0&gt;</ept> case name when the <bpt i="1" x="1">&lt;c1&gt;</bpt>Mirror<ept i="1">&lt;/c1&gt;</ept> is used for display.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プレイグラウンドとデバッガは、<bpt i="1" x="1">&lt;c1&gt;</bpt>Mirror<ept i="1">&lt;/c1&gt;</ept>が表示のために使われる時に<bpt i="0" x="0">&lt;c0&gt;</bpt>DisplayStyle<ept i="0">&lt;/c0&gt;</ept>ケース節名によって指し示される種類のインスタンスに対して使われるものに似た表現を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept> for background; <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollectionProtocol<ept i="1">&lt;/c1&gt;</ept> is an analogous component, but for collections.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>予備知識として<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>をぜひ見てください；<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollectionProtocol<ept i="1">&lt;/c1&gt;</ept>は、類似した、しかしコレクションのためのコンポーネントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Positive infinity compares greater than every finite value and negative infinity, while negative infinity compares less than every finite value and positive infinity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の無限大はすべての有限値と負の無限大より大きいと比較されます、一方負の無限大はすべての有限値と正の無限大より小さいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Positive infinity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>self.intersection([e]).isEmpty<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self.intersection([e]).isEmpty<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>s at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>ら、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>が初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>s at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> are initialized and the <bpt i="2" x="2">&lt;c2&gt;</bpt>Pointees<ept i="2">&lt;/c2&gt;</ept> at <bpt i="3" x="3">&lt;c3&gt;</bpt>source..&lt;source + count<ept i="3">&lt;/c3&gt;</ept> are uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>らが初期化されること、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>source..&lt;source + count<ept i="3">&lt;/c3&gt;</ept>での<bpt i="2" x="2">&lt;c2&gt;</bpt>Pointees<ept i="2">&lt;/c2&gt;</ept>が初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>s at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> are initialized and the memory at <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>らが初期化されること、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>でのメモリが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>s at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>らが初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> values at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept>そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>値らが初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> values at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept> are initialized and the memory at <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>値らが初期化されること、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>でのメモリが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> values at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + source.count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + source.count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept>で<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>値が初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>(self + strideof(T) * index)..&lt;(self + strideof(T) * index) + count<ept i="0">&lt;/c0&gt;</ept> is bound to type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> and initialized; the value should eventually be destroyed or moved from to avoid leaks.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>(self + strideof(T) * index)..&lt;(self + strideof(T) * index) + count<ept i="0">&lt;/c0&gt;</ept>でのメモリが型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>に束縛されて初期化されること；値は結局は破壊またはそこから移動されて漏洩を回避されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept> is bound to type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept>でのメモリが型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>に束縛されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + source.count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept> is bound to type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + source.count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept>でのメモリが型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>に束縛されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self+count<ept i="0">&lt;/c0&gt;</ept> is initialized to raw bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self+count<ept i="0">&lt;/c0&gt;</ept>でのメモリは生のバイトへ割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory has been deallocated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：メモリは割り当て解除されていること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory is allocated, but not initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：メモリは割り当てられます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory is bound to ‘T’ starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> continuing through <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> + <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept> * <bpt i="3" x="3">&lt;c3&gt;</bpt>MemoryLayout&lt;T&gt;.stride<ept i="3">&lt;/c3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：メモリが、<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まり<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> + <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept> * <bpt i="3" x="3">&lt;c3&gt;</bpt>MemoryLayout&lt;T&gt;.stride<ept i="3">&lt;/c3&gt;</ept>まで続いている‘T’に束縛されること</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory is initialized to raw bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：メモリは生のバイトへ割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The memory is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：メモリが初期化されていないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The pointee is allocated, but not initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：pointeeは割り当てられます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Postcondition: The pointee is initialized; the value should eventually be destroyed or moved from to avoid leaks.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>事後条件：pointeeは初期化されます；値は結局は破壊またはそこから移動されて漏洩を回避されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precedence group</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>優先順位グループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>!self.isEmpty<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>!self.isEmpty<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>(startIndex...endIndex).contains(bounds.lowerBound)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>(startIndex...endIndex).contains(bounds.upperBound)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>(startIndex...endIndex).contains(bounds.lowerBound)<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>(startIndex...endIndex).contains(bounds.upperBound)<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>(startIndex..&lt;endIndex).contains(i)<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>(startIndex..&lt;endIndex).contains(i)<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> is a trivial type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>が自明な型であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept> do not alias each other.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>a<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>b<ept i="1">&lt;/c1&gt;</ept>が互いのエイリアスでないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>buffer<ept i="0">&lt;/c0&gt;</ept> is an instance of a non-<bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept> class whose <bpt i="2" x="2">&lt;c2&gt;</bpt>deinit<ept i="2">&lt;/c2&gt;</ept> destroys its stored <bpt i="3" x="3">&lt;c3&gt;</bpt>Header<ept i="3">&lt;/c3&gt;</ept> and any constructed <bpt i="4" x="4">&lt;c4&gt;</bpt>Element<ept i="4">&lt;/c4&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>buffer<ept i="0">&lt;/c0&gt;</ept>は非<bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept>クラスのインスタンスです、それの<bpt i="2" x="2">&lt;c2&gt;</bpt>deinit<ept i="2">&lt;/c2&gt;</ept>はそれの格納された<bpt i="3" x="3">&lt;c3&gt;</bpt>Header<ept i="3">&lt;/c3&gt;</ept>とあらゆる構成された<bpt i="4" x="4">&lt;c4&gt;</bpt>Element<ept i="4">&lt;/c4&gt;</ept>を破棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>count &gt;= 0<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>count &gt;= 0<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> is non-negative.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>が負でないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt; startIndex &amp;&amp; i &lt;= endIndex<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>i &gt; startIndex &amp;&amp; i &lt;= endIndex<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> has a well-defined successor.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>が定義の明確な次にくるものを持つこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept> is non-negative.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>が負でないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength &gt;= 0<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength &gt;= 0<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>minimumCapacity &gt;= 0<ept i="0">&lt;/c0&gt;</ept>, and the type indicated by <bpt i="1" x="1">&lt;c1&gt;</bpt>bufferClass<ept i="1">&lt;/c1&gt;</ept> is a non-<bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept> class with no declared stored properties.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>minimumCapacity &gt;= 0<ept i="0">&lt;/c0&gt;</ept>、そして<bpt i="1" x="1">&lt;c1&gt;</bpt>bufferClass<ept i="1">&lt;/c1&gt;</ept>によって示される型が非<bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept>クラスで宣言された保存プロパティを持たないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt;= 0<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>n &gt;= 0<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept> has not been applied to a copy of <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> since the copy was made.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>のコピーに、そのコピーが作成されて以来まったく適用されていないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>position == 0<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>position == 0<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>position &gt;= 0 &amp;&amp; position &lt; endIndex<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>position &gt;= 0 &amp;&amp; position &lt; endIndex<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> indicates a valid position in <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>position != endIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>の中の有効な位置を指し示して<bpt i="2" x="2">&lt;c2&gt;</bpt>position != endIndex<ept i="2">&lt;/c2&gt;</ept>であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept> is a valid position in <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>position != endIndex<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>の中の有効な位置であり<bpt i="2" x="2">&lt;c2&gt;</bpt>position != endIndex<ept i="2">&lt;/c2&gt;</ept>であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>self != nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self != nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> is a finite collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>は有限のコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept> can be represented as ASCII (0..&lt;128).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept>がASCII（0..&lt;128）として表現できること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept> can be represented as UInt32.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept>がUInt32として表現されることが可能なこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: <bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept> can be represented as UInt64.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>v.value<ept i="0">&lt;/c0&gt;</ept>がUInt64として表現されることが可能なこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: If the memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self+count<ept i="0">&lt;/c0&gt;</ept> is bound to a type <bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>, then <bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept> is a trivial type, the underlying pointers <bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>self<ept i="4">&lt;/c4&gt;</ept> are properly aligned for type <bpt i="5" x="5">&lt;c5&gt;</bpt>U<ept i="5">&lt;/c5&gt;</ept>, and <bpt i="6" x="6">&lt;c6&gt;</bpt>count<ept i="6">&lt;/c6&gt;</ept> is a multiple of <bpt i="7" x="7">&lt;c7&gt;</bpt>MemoryLayout&lt;U&gt;.stride<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self+count<ept i="0">&lt;/c0&gt;</ept>でのメモリが型<bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>に束縛されるならば、そのとき<bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>が自明な型であること、基礎をなすポインタの<bpt i="3" x="3">&lt;c3&gt;</bpt>source<ept i="3">&lt;/c3&gt;</ept>と<bpt i="4" x="4">&lt;c4&gt;</bpt>self<ept i="4">&lt;/c4&gt;</ept>が適切に<bpt i="5" x="5">&lt;c5&gt;</bpt>U<ept i="5">&lt;/c5&gt;</ept>にアラインされること、そして<bpt i="6" x="6">&lt;c6&gt;</bpt>count<ept i="6">&lt;/c6&gt;</ept>が<bpt i="7" x="7">&lt;c7&gt;</bpt>MemoryLayout&lt;U&gt;.stride<ept i="7">&lt;/c7&gt;</ept>の倍数であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>s at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>ら、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>が初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>s at <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>での<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>らが初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept> is bound to <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリ<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>に束縛されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self + index * strideof(T)..&lt;self + (index + count) * strideof(T)<ept i="0">&lt;/c0&gt;</ept> is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self + index * strideof(T)..&lt;self + (index + count) * strideof(T)<ept i="0">&lt;/c0&gt;</ept>でのメモリが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept> is uninitialized and the <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> values at <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept>でのメモリが初期化されないそして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>での<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>が初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept> is uninitialized, and the <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> values at <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept>でのメモリが初期化されないこと、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>での<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>が初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count<ept i="0">&lt;/c0&gt;</ept> is uninitialized and the <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointees<ept i="1">&lt;/c1&gt;</ept> at <bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept> are initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count<ept i="0">&lt;/c0&gt;</ept>でのメモリが初期化されないこと、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>source..&lt;source + count<ept i="2">&lt;/c2&gt;</ept>での<bpt i="1" x="1">&lt;c1&gt;</bpt>Pointees<ept i="1">&lt;/c1&gt;</ept>が初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count<ept i="0">&lt;/c0&gt;</ept> is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + count<ept i="0">&lt;/c0&gt;</ept>でのメモリが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + source.count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept> is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self..&lt;self + source.count * MemoryLayout&lt;T&gt;.stride<ept i="0">&lt;/c0&gt;</ept>でのメモリが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>source..&lt;source + count<ept i="0">&lt;/c0&gt;</ept> is initialized to some trivial type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>source..&lt;source + count<ept i="0">&lt;/c0&gt;</ept>でのメモリがなんらかの自明な型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>に初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory is bound to ‘T’ starting at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> for some unspecified capacity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリが、いくらかの不特定の容量に対する<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>で始まる‘T’に束縛されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory is initialized to a value of some type, <bpt i="0" x="0">&lt;c0&gt;</bpt>U<ept i="0">&lt;/c0&gt;</ept>, such that <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> is layout compatible with <bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリがなんらかの型<bpt i="0" x="0">&lt;c0&gt;</bpt>U<ept i="0">&lt;/c0&gt;</ept>の値へと初期化されること、そういうわけで<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>と互換性のあるレイアウトであること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory is not initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory is uninitialized, or initialized to some trivial type <bpt i="0" x="0">&lt;c0&gt;</bpt>U<ept i="0">&lt;/c0&gt;</ept> such that <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept> are mutually layout compatible.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリがなんらかの自明な型<bpt i="0" x="0">&lt;c0&gt;</bpt>U<ept i="0">&lt;/c0&gt;</ept>へと初期化されない、または初期化されること、そういうわけで<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>は互いに互換性のあるレイアウトであること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory is uninitialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリが初期化されていないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory regions <bpt i="0" x="0">&lt;c0&gt;</bpt>source..&lt;source + count<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept> do not overlap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリ領域<bpt i="0" x="0">&lt;c0&gt;</bpt>source..&lt;source + count<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count * MemoryLayout&lt;T&gt;.stride<ept i="1">&lt;/c1&gt;</ept>に重なり部分がないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The memory regions <bpt i="0" x="0">&lt;c0&gt;</bpt>source..&lt;source + count<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept> do not overlap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：メモリ領域<bpt i="0" x="0">&lt;c0&gt;</bpt>source..&lt;source + count<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>self..&lt;self + count<ept i="1">&lt;/c1&gt;</ept>に重なり部分がないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The next location exists.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：次の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The next position is representable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：次の位置が表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The next position is valid.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：次の位置が有効であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The pointee is initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：pointeeが初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The pointee is not initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：pointeeが初期化されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The previous location exists.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：前の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The previous position is valid.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：前の位置が有効であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The underlying pointer is properly aligned for accessing <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：基礎をなすポインタが<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>にアクセスするために適切にアラインされること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The underlying pointer plus <bpt i="0" x="0">&lt;c0&gt;</bpt>offset<ept i="0">&lt;/c0&gt;</ept> is properly aligned for accessing <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：基礎をなすポインタに<bpt i="0" x="0">&lt;c0&gt;</bpt>offset<ept i="0">&lt;/c0&gt;</ept>を足したものが、<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>にアクセスするために適切にアラインされること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: The underlying pointer plus <bpt i="0" x="0">&lt;c0&gt;</bpt>offset<ept i="0">&lt;/c0&gt;</ept> is properly aligned for storing type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：基礎をなすポインタに<bpt i="0" x="0">&lt;c0&gt;</bpt>offset<ept i="0">&lt;/c0&gt;</ept>を足したものが、型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>を格納するために適切にアラインされること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: Type ‘T’ is layout compatible with type ‘Pointee’.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：型‘T’が型‘Pointee’と互換性のあるレイアウトであること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: an equivalent range is representable as an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：同等の範囲が<bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept>のインスタンスとして表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: the pointee at <bpt i="0" x="0">&lt;c0&gt;</bpt>self + i<ept i="0">&lt;/c0&gt;</ept> is initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：<bpt i="0" x="0">&lt;c0&gt;</bpt>self + i<ept i="0">&lt;/c0&gt;</ept>でのpointeeが初期化されること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Precondition: the pointee has been initialized with an instance of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件：pointeeが型<bpt i="0" x="0">&lt;c0&gt;</bpt>Pointee<ept i="0">&lt;/c0&gt;</ept>のインスタンスを使って初期化されていること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Prefix operators</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>接頭辞演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素を格納するようにコレクションを準備します、そうすることが基礎をなす型に対して適切である場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Print the result using the index found in step 2 on the original <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>手順２で見つけたインデックスをオリジナル<bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Print the results using the indices found in steps 1 and 3 on the original <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>手順１と手順３で見つけたインデックスをオリジナル<bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produce a string with the first character from each word changed to the corresponding uppercase value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各単語の最初の文字が対応する大文字に変えられた状態の文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces a string containing the bytes in a given C array, interpreted according to a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号化によって解釈される、与えられたC配列の中のバイトを含んでいる文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces a string created by copying the data from a given C array of UTF8-encoded bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF8符号化されたバイトからなる与えられたC配列からコピーするデータによって作成される文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces a string created by reading data from a given URL and returns by reference the encoding used to interpret the data.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>データを解釈するのに使われる符号化を参照渡しすることによって、与えられたURLからの読み込みデータによって作成される文字列を生成して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces a string created by reading data from a given URL interpreted using a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号化を使って解釈される、与えられたURLからの読み込みデータによって作成される文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ファイルを解釈するのに使われる符号化を参照渡しすることによって、与えられたパスからの読み込みデータによって作成される文字列を生成して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces a string created by reading data from the file at a given path interpreted using a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号化を使って解釈される、与えられたパスでのファイルからの読み込みデータによって作成される文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces an initialized <bpt i="0" x="0">&lt;c0&gt;</bpt>NSString<ept i="0">&lt;/c0&gt;</ept> object equivalent to the given <bpt i="1" x="1">&lt;c1&gt;</bpt>bytes<ept i="1">&lt;/c1&gt;</ept> interpreted in the given <bpt i="2" x="2">&lt;c2&gt;</bpt>encoding<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた<bpt i="2" x="2">&lt;c2&gt;</bpt>encoding<ept i="2">&lt;/c2&gt;</ept>で解釈される与えられた<bpt i="1" x="1">&lt;c1&gt;</bpt>bytes<ept i="1">&lt;/c1&gt;</ept>に等しい、初期化された<bpt i="0" x="0">&lt;c0&gt;</bpt>NSString<ept i="0">&lt;/c0&gt;</ept>オブシェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces an initialized <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期化された<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>オブシェクトを作成します、それは与えられた符号化での与えられたバイト解釈のバッファ由来の与えられた数のバイトを含んでいます、そして随意にそのバッファを解放します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Produces each element by passing the output of the <bpt i="3" x="3">&lt;c3&gt;</bpt>Base<ept i="3">&lt;/c3&gt;</ept> <bpt i="4" x="4">&lt;c4&gt;</bpt>IteratorProtocol<ept i="4">&lt;/c4&gt;</ept> through a transform function returning <bpt i="5" x="5">&lt;c5&gt;</bpt>Element<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>Base<ept i="3">&lt;/c3&gt;</ept> <bpt i="4" x="4">&lt;c4&gt;</bpt>IteratorProtocol<ept i="4">&lt;/c4&gt;</ept>の出力を<bpt i="5" x="5">&lt;c5&gt;</bpt>Element<ept i="5">&lt;/c5&gt;</ept>を返す変換関数を通して渡すことによって各要素を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Protocol Requirements</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>プロトコル要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Protocols</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>様々なプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Protocols that describe abstractions such as <bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>抽象概念を記述するプロトコル、例えば<bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>および<bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Protocols used to customize operations that are available to all types, such as <bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>CustomDebugStringConvertible<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>CustomReflectable<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>全ての型で利用可能である演算をカスタマイズするために使われるプロトコル、例えば<bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>CustomDebugStringConvertible<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>および<bpt i="2" x="2">&lt;a2&gt;</bpt><bpt i="3" x="3">&lt;c3&gt;</bpt>CustomReflectable<ept i="3">&lt;/c3&gt;</ept><ept i="2">&lt;/a2&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Protocols used to provide implementations that would otherwise require boilerplate code, such as <bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そうしなければ定型文コードが必要な実装を提供するために使われるプロトコル、例えば<bpt i="0" x="0">&lt;a0&gt;</bpt><bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept><ept i="0">&lt;/a0&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Random-access collections can measure move indices any distance and can measure the distance between indices in O(1) time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無作為アクセスのコレクションは、任意の隔たりの移動インデックスを測定できます、そしてインデックス間の隔たりの測定をO(1)時間で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Range formation</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲形成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Range-replaceable collections provide operations that insert and remove elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲交換可能なコレクションは、いくつかの要素の挿入や削除を行う演算を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reachability is defined by the ability to produce one value from the other via zero or more applications of <bpt i="0" x="0">&lt;c0&gt;</bpt>index(after:)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>到達可能性は、０以上の<bpt i="0" x="0">&lt;c0&gt;</bpt>index(after:)<ept i="0">&lt;/c0&gt;</ept>の適用を経て他のものからある値を生成する能力によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reads raw bytes from memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self + offset<ept i="0">&lt;/c0&gt;</ept> and constructs a value of type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>生のバイトをメモリから<bpt i="0" x="0">&lt;c0&gt;</bpt>self + offset<ept i="0">&lt;/c0&gt;</ept>で読み込みます、そして型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>の値を構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rebinds memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> to type <bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept> with capacity to hold <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept> adjacent <bpt i="3" x="3">&lt;c3&gt;</bpt>T<ept i="3">&lt;/c3&gt;</ept> values while executing the <bpt i="4" x="4">&lt;c4&gt;</bpt>body<ept i="4">&lt;/c4&gt;</ept> closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>でのメモリを型<bpt i="1" x="1">&lt;c1&gt;</bpt>T<ept i="1">&lt;/c1&gt;</ept>へ再束縛します、<bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>個の隣接する<bpt i="3" x="3">&lt;c3&gt;</bpt>T<ept i="3">&lt;/c3&gt;</ept>値を保持する容量を持ちます、<bpt i="4" x="4">&lt;c4&gt;</bpt>body<ept i="4">&lt;/c4&gt;</ept>クロージャを実行する間にです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reflect upon the given <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された<bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept>をリフレクションします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Related Symbols</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関連シンボル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Relationships</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関係</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Remainder</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>剰余</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Remainder and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>剰余と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes all elements from the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列からすべての要素を取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes all elements from the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>全ての要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes all elements of this option set that are not also present in the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このオプションセットに属し、また与えられたセットの中に含まれない、すべての要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes all key-value pairs from the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべてのキー値ペアを辞書から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes all members from the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合からすべてのメンバを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the character at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置での文字を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the element at the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置での要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the first element of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the first element of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the first key-value pair of the dictionary if the dictionary isn’t empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その辞書が空でないならば、辞書の中の最初のキー値ペアを削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the key-value pair at the specified index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キー値ペアを指定されたインデックスで削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the last element of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の最後の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes and returns the last element of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの最後の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the characters in the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲の中の文字を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the element at the given index of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスでの集合の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements in the specified subrange from the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された下位範囲中のいくらかの要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements of the given sequence from the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの要素を集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements of the given set from this set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた集合の要素をこの集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements of the set that are also in the given sequence and adds the members of the sequence that are not already in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合の要素で与えられたシーケンスの中にもあるものを削除します、そしてシーケンスのメンバで集合の中にはまだないものを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた集合の中にもあるこの集合の要素を削除します、そして与えられた集合のメンバでこの集合の中にはまだないものを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements of the set that aren’t also in the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中にはない、この集合の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the elements of this set that aren’t also in the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた集合の中にはない、この集合の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the first element of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の最初の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the given element and all elements subsumed by it.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素とそれによって包括されるすべての要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the given element and any elements subsumed by the given element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素と、与えられた要素によって包括されるあらゆる要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the given key and its associated value from the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたキーと関連値を辞書から取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the given number of elements from the end of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the specified element from the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された要素を集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the specified number of elements from the beginning of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素をコレクションの始まりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the specified number of elements from the end of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Removes the specified subrange of elements from the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくらかの要素からなる指定された下位範囲をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reorders the elements in the collection and returns a pivot index, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素を並べ替えて、ピボット（軸となる）インデックスを返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that do not match the predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのもつ要素を並べ替えます、例えば、与えられた述部にマッチする要素全てが、その述部にマッチしない要素全ての後になるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Repeated Access</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>繰り返してアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Repeatedly calling this method returns all the elements of the underlying sequence in order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Repeatedly calling this method returns, in order, all the elements of the underlying sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replace this set with the elements contained in this set or the given set, but not both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合を、この集合または与えられた集合の中に含まれる、しかし両方にではない要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> initialized <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>s starting at <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept> with the <bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept> <bpt i="4" x="4">&lt;c4&gt;</bpt>Pointee<ept i="4">&lt;/c4&gt;</ept>s at <bpt i="5" x="5">&lt;c5&gt;</bpt>source<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>で開始して<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個の初期化された<bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>を、<bpt i="5" x="5">&lt;c5&gt;</bpt>source<ept i="5">&lt;/c5&gt;</ept>での<bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept>個の<bpt i="4" x="4">&lt;c4&gt;</bpt>Pointee<ept i="4">&lt;/c4&gt;</ept>を使って置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> initialized <bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>s starting at <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept> with the <bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept> <bpt i="4" x="4">&lt;c4&gt;</bpt>Pointee<ept i="4">&lt;/c4&gt;</ept>s starting at <bpt i="5" x="5">&lt;c5&gt;</bpt>source<ept i="5">&lt;/c5&gt;</ept>, returning the source memory to an uninitialized state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>で開始して<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>個の初期化された<bpt i="1" x="1">&lt;c1&gt;</bpt>Pointee<ept i="1">&lt;/c1&gt;</ept>を、<bpt i="5" x="5">&lt;c5&gt;</bpt>source<ept i="5">&lt;/c5&gt;</ept>での<bpt i="3" x="3">&lt;c3&gt;</bpt>count<ept i="3">&lt;/c3&gt;</ept>個の<bpt i="4" x="4">&lt;c4&gt;</bpt>Pointee<ept i="4">&lt;/c4&gt;</ept>を使って置き換えます、ソースメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces a range of elements with the elements in the specified collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある範囲の要素を指定されたコレクションの要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the characters within the specified bounds with the given characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された境界内のいくらかの文字を、与えられたいくらかの文字で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the elements within the specified bounds with the given Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された領域内の要素を与えられたユニコードスカラー値で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the given index with its predecessor.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスをそれの前のものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the given index with its successor.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスをそれの後に続くものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the specified subrange of elements with the given collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくらかの要素からなる指定された下位範囲を与えられたコレクションで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the text within the specified bounds with the given characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された領域内のテキストを与えられた幾らかの文字で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the text within the specified bounds with the given string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された領域内のテキストを与えられた文字列で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このセットを、このセットか与えられたセットのどちらかの中に、しかし両方ではなく、含まれるすべての要素を含んでいる新しいセットで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces this string with the empty string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この文字列を空の文字列で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces this value with its additive inverse.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値をそれの加法の逆元で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces this value with its square root, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値をそれの平方根で置き換えます、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces this value with the remainder of itself divided by the given value using truncating division.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>切り捨て除算を使ってそれ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces this value with the remainder of itself divided by the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Represent <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> with child values given by <bpt i="1" x="1">&lt;c1&gt;</bpt>unlabeledChildren<ept i="1">&lt;/c1&gt;</ept>, using an optional <bpt i="2" x="2">&lt;c2&gt;</bpt>displayStyle<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>unlabeledChildren<ept i="0">&lt;/c0&gt;</ept>によって与えられる子を使った<bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept>を再表現します、オプショナルの<bpt i="2" x="2">&lt;c2&gt;</bpt>displayStyle<ept i="2">&lt;/c2&gt;</ept>を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Represent <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> with labeled structure described by <bpt i="1" x="1">&lt;c1&gt;</bpt>children<ept i="1">&lt;/c1&gt;</ept>, using an optional <bpt i="2" x="2">&lt;c2&gt;</bpt>displayStyle<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>children<ept i="0">&lt;/c0&gt;</ept>によって記述されたラベル付き構造体を使って<bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept>を再表現します、オプショナルの<bpt i="2" x="2">&lt;c2&gt;</bpt>displayStyle<ept i="2">&lt;/c2&gt;</ept>を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Represent <bpt i="0" x="0">&lt;c0&gt;</bpt>subject<ept i="0">&lt;/c0&gt;</ept> with structure described by <bpt i="1" x="1">&lt;c1&gt;</bpt>children<ept i="1">&lt;/c1&gt;</ept>, using an optional <bpt i="2" x="2">&lt;c2&gt;</bpt>displayStyle<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>children<ept i="0">&lt;/c0&gt;</ept>によって記述される構造体を使って<bpt i="1" x="1">&lt;c1&gt;</bpt>subject<ept i="1">&lt;/c1&gt;</ept>を再表現します、オプショナル<bpt i="2" x="2">&lt;c2&gt;</bpt>displayStyle<ept i="2">&lt;/c2&gt;</ept>を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Represent this number using Swift’s widest native signed integer type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この数をスウィフトの最も広いネイティヴの符号付き整数型を使って表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Represent this number using Swift’s widest native unsigned integer type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この数をスウィフトの最も広いネイティヴの符号なし整数型を使って表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Representation of ancestor classes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>先祖クラスの表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Representation of the sub-structure and optional “display style” of any arbitrary subject instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位構造体の再表現、およびあらゆる随意の主題インスタンスのオプショナルの「表示形式」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Representing Strings: Views</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の表現：ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Requires: The next value is representable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>必要なこと：次にくる値が表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Requires: The previous value is representable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>必要なこと：前にある値が表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reserves enough space in the character view’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数のASCII文字を格納するのに十分な空間を文字ビューのもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reserves enough space in the string’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数のASCII文字を格納するのに十分な空間を文字列のもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reserves enough space in the view’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数のASCII文字を格納するのに十分な空間をビューのもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reserves enough space to store the specified number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の要素を格納するのに十分な空間を確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションのストレージを保持することは、あなたがコレクションをもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Retaining the storage can be a useful optimization when you’re planning to grow the string again.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ストレージを保持することは、あなたが文字列をもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Retrieve the localized description for this error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このエラーの現地語化された説明を取ってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Retrieves the <bpt i="0" x="0">&lt;c0&gt;</bpt>pointee<ept i="0">&lt;/c0&gt;</ept>, returning the referenced memory to an uninitialized state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>pointee<ept i="0">&lt;/c0&gt;</ept>を取ってきます、参照されたメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Return Value</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>戻り値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Return a specific descendant of the reflected subject, or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> Returns a specific descendant of the reflected subject, or <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> if no such descendant exists.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>リフレクションされている主題の特定の子孫を返します、またはそのような子孫が存在しないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Return an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素すべてに対するあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>end - self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end - self<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>t0<ept i="1">&lt;/c1&gt;</ept> is identical to <bpt i="2" x="2">&lt;c2&gt;</bpt>t1<ept i="2">&lt;/c2&gt;</ept>; i.e. if they are both <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept> or they both represent the same type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>t0<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>t1<ept i="2">&lt;/c2&gt;</ept>と同一である場合に限り返します；すなわちそれらが両方とも<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>かまたはそれらが両方とも同じ型を表している場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>bitPattern<ept i="1">&lt;/c1&gt;</ept> is zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>bitPattern<ept i="1">&lt;/c1&gt;</ept>がゼロならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>from<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>from<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>ならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if the string was not found.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が見つけられなかったならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>, indicating that there are no more elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もう要素は無いことを指し示す、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>self + n<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self + n<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> contains <bpt i="2" x="2">&lt;c2&gt;</bpt>string<ept i="2">&lt;/c2&gt;</ept>, taking the current locale into account.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>string<ept i="2">&lt;/c2&gt;</ept>を含んでいる場合にのみ<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を返します、アカウントに対する現在のロケールをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if the arrays do not contain the same elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>をそれらの配列がまったく同じ要素らを含むのでないならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> if these arrays contain the same elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>をそれらの配列がまったく同じ要素らを含むならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> is non-empty and contained within <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept> by case-insensitive, non-literal search, taking into account the current locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が空でなく、大文字小文字を考慮しない、非リテラル検索によって<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>に含まれる場合にのみ<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept> is non-empty and contained within <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept> by case-sensitive, non-literal search.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>other<ept i="1">&lt;/c1&gt;</ept>が空でなく、大文字小文字を考慮する、非リテラル検索によって<bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept>に含まれる場合にのみ<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> holds the only strong reference to its buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>がそれのバッファへの強い参照を保持する場合に限り<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> iff <bpt i="1" x="1">&lt;c1&gt;</bpt>t0<ept i="1">&lt;/c1&gt;</ept> is identical to <bpt i="2" x="2">&lt;c2&gt;</bpt>t1<ept i="2">&lt;/c2&gt;</ept>; i.e. if they are both <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept> or they both represent the same type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>t0<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>t1<ept i="2">&lt;/c2&gt;</ept>と同一である場合に限り返します；すなわちそれらが両方とも<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>かまたはそれらが両方とも同じ型を表している場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns <bpt i="0" x="0">&lt;c0&gt;</bpt>x - self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x - self<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>CVaListPointer<ept i="0">&lt;/c0&gt;</ept> built from <bpt i="1" x="1">&lt;c1&gt;</bpt>args<ept i="1">&lt;/c1&gt;</ept> that’s backed by autoreleased storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オートリリースされるストレージによって裏付けられる<bpt i="1" x="1">&lt;c1&gt;</bpt>args<ept i="1">&lt;/c1&gt;</ept>から作られる<bpt i="0" x="0">&lt;c0&gt;</bpt>CVaListPointer<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>Data<ept i="0">&lt;/c0&gt;</ept> containing a representation of the <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> encoded using a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号化を使って符号化される<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>の表現を含んでいる<bpt i="0" x="0">&lt;c0&gt;</bpt>Data<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept> containing the concatenated non-nil results of mapping transform over this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクション全体にわたる変換マッピングの非nilの結果を鎖状に連結して含んでいる<bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapBidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapCollection<ept i="0">&lt;/c0&gt;</ept> containing the concatenated non-nil results of mapping transform over this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクション全体にわたる変換マッピングの非nilの結果を鎖状に連結して含んでいる<bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapCollection<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapCollection<ept i="0">&lt;/c0&gt;</ept> over this <bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>を覆う<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapSequence<ept i="0">&lt;/c0&gt;</ept> containing the concatenated non-nil results of mapping transform over this <bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept>全体にわたる変換マッピングの非nilの結果を鎖状に連結して含んでいる<bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapSequence<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyMapSequence<ept i="0">&lt;/c0&gt;</ept> over this <bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>を覆う<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyMapCollection<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept> <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> such that <bpt i="2" x="2">&lt;c2&gt;</bpt>self.distance(to: x)<ept i="2">&lt;/c2&gt;</ept> approximates <bpt i="3" x="3">&lt;c3&gt;</bpt>n<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept> + <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>を返します、<bpt i="2" x="2">&lt;c2&gt;</bpt>self.distance(to: x)<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>n<ept i="3">&lt;/c3&gt;</ept>の近似となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> initialized by converting given <bpt i="1" x="1">&lt;c1&gt;</bpt>data<ept i="1">&lt;/c1&gt;</ept> into Unicode characters using a given <bpt i="2" x="2">&lt;c2&gt;</bpt>encoding<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた<bpt i="1" x="1">&lt;c1&gt;</bpt>data<ept i="1">&lt;/c1&gt;</ept>をユニコード文字に与えられた<bpt i="2" x="2">&lt;c2&gt;</bpt>encoding<ept i="2">&lt;/c2&gt;</ept>を使って変換することによって初期化された<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> object initialized by using a given format string as a template into which the remaining argument values are substituted according to given locale information.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた書式化文字列をテンプレートとして使って残りの引数値がそれに対する代用とされることによって初期化される<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>オブジェクトを返します、与えられたロケール情報に従います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> object initialized by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた書式化文字列をテンプレートとして使ってユーザの省略時のロケールに従って残りの引数値がそれに対する代用とされることによって初期化される<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> object initialized by using a given format string as a template into which the remaining argument values are substituted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた書式化文字列をテンプレートとして使って残りの引数値がそれに対する代用とされることによって初期化される<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether any corresponding components of the two tuples are not equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプルの対応する構成要素いずれかが等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the corresponding components of two tuples are equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのタプルの対応する構成要素らが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first argument represents a position before the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数が２番目の引数の前の位置を表すかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の後ろまたはそれと同じ順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の後ろの順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の前またはそれと同じ順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の前の順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the given element is contained within the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素がこの範囲内に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the given object is a class instance known to have a single strong reference.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたオブジェクトが強い参照をただ１つだけ持つと知られるクラスインスタンスであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同等かどうかを、与えられた述部を同等性テストとして使って指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同じかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された述部を満足させるある要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence contains the given element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが別のシーケンスの前に来るかどうかをある語彙筆記的順序（辞書）順序において、与えられた述部を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>) to compare elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのシーケンスが別のシーケンスの前に来るかどうかを、ある語彙筆記的順序（辞書）順序において、より小さい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>）を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a UTF-8 continuation byte.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたコード単位がUTF-8継続バイトかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a high-surrogate code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたコード単位が上位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a low-surrogate code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたコード単位が下位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the string begins with the specified prefix.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が指定された接頭辞で始まるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the string ends with the specified suffix.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が指定された接尾辞で終わるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the two arguments are equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the two arguments are not equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより少ないまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより少ないかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance is equal to the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスが与えられた値と等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance is less than or equal to the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスが与えられた値より小さいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance is less than the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスが与えられた値より小さいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance should precede the given value in an ascending sort.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスがある昇順ソートにおいて与えられた値より前にくるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this range and the given range contain an element in common.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲と与えられた範囲がある要素を共通に含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスともう一方のシーケンスが同等の要素を含むかどうかを、与えられた述部を同等テストとして使って指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスともう一方のシーケンスが同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two indices wrap equal underlying indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのインデックスが等しい基礎をなすインデックスをラップするかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two references point to different object instances.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの参照が異なるオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two references point to the same object instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの参照が同じオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two sets have equal elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの集合がまったく等しい要素らを持つかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two type-erased hashable instances wrap the same type and value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの型消去ハッシュ化インスタンスが同じ型および値をラップするかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two values are equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value indicating whether two values are not equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether a given element is a member of the option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素がオプションセットのメンバであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> can be converted to a given encoding without loss of information.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>が与えられた符号化に情報の損失なしに変換されることができるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the first argument is greater than or equal to the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数が２番目の引数より大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the first argument is greater than the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数が２番目の引数より大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the first argument is less than or equal to the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数が２番目の引数より少ないまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the first argument is less than the second argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の引数が２番目の引数より少ないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the given element exists in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素が集合の中の存在するかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set has no members in common with the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられたシーケンスと共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set has no members in common with the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が、与えられた集合と共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a strict subset of the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられたシーケンスの狭義の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a strict superset of the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられたシーケンスの狭義の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a subset of another set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は別の集合の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a subset of the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられたシーケンスの下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a superset of the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられたシーケンスの上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a superset of the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合が、与えられた集合の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the two arguments have equal values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数が同等な値を持つかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the two arguments have unequal values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数が同等でない値を持つかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set has no members in common with the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられた集合と共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a strict subset of the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられた集合の狭義の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a strict superset of the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられた集合の狭義の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a subset of the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられた集合の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a superset of the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合は与えられた集合の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a capitalized representation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> using the specified locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の頭文字表現を指定されたロケールを使って返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a closed range that contains both of its bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの境界の両方を含む完結範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a collection representing a contiguous sub-range of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>のもつ要素の隣接している下位範囲を表すコレクションを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a copy of this range clamped to the given limiting range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた限界範囲に締め金具で留められる（制限を課される）、この範囲のコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a countable closed range that contains both of its bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの境界の両方を含む可付番完結範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a countable half-open range that contains its lower bound but not its upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの下側の境界は含むがそれの上側の境界はそうしない可付番半開範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a dictionary object initialized with the keys and values found in the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>において見つけられるキーと値で初期化される辞書オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a half-open range that contains its lower bound but not its upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの下側の境界は含むがそれの上側の境界はそうしない半開範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a human-readable string giving the name of a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号化の名前を与えている、人間が読むことができる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a lazy sequence that concatenates the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスに属する複数のシーケンスの要素を鎖状に連結する遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a lowercase version of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の小文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a mirror that reflects the UTF-16 view of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のUTF-16ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a mirror that reflects the UTF-8 view of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のUTF-8ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a mirror that reflects the Unicode scalars view of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のユニコードスカラービューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new option set of the elements contained in this set, in the given set, or in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このセットの中に、与えられたセットの中に、または両方の中に、含まれる要素からなる新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new option set with only the elements contained in both this set and the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このセットと与えられたセットの両方の中に含まれる要素だけを持つ新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new option set with the elements contained in this set or in the given set, but not in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このセットの中にまたは与えられたセットの中に、しかし両方の中にではなく、含まれる要素からなる新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set containing the elements of this set that do not occur in the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたシーケンスの中の現れないこの集合の要素を含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set containing the elements of this set that do not occur in the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた集合の中の現れないこの集合の要素を含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set with the elements of both this and the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これと与えられた集合の両方の要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set with the elements of both this set and the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合と与えられたシーケンスの両方の要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set with the elements that are common to both this set and the given sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合と与えられたシーケンスの両方に共通である要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set with the elements that are common to both this set and the given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合と与えられた集合の両方に共通である要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set with the elements that are either in this set or in the given sequence, but not in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合の中か与えられたシーケンスの中かどちらかの、しかし両方の中にではない要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new set with the elements that are either in this set or in the given set, but not in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合の中か与えられた集合の中かどちらかの、しかし両方の中にではない要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各要素の間に与えられたセパレータを加えて、シーケンスの要素を連結することによる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string containing the characters of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> from the one at a given index to the end.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスでのものから終わりまでの<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の文字を含んでいる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string containing the characters of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> up to, but not including, the one at a given index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスでのものに至るまでの、しかしそれを含んでいない、<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の文字を含んでいる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string formed from the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> by either removing characters from the end, or by appending as many occurrences as necessary of a given pad string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>終わりから文字を削除することによって、または与えられた詰め物文字列を必要なだけ現れるよう加えることによって、<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>から書式化された新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string in which all occurrences of a target string in a specified range of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> are replaced by another given string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字列を返します、そこにおいて指定された範囲の<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の中の目標文字列のすべての出現は、別の指定された文字列によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string in which the characters in a specified range of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> are replaced by a given string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい文字列を返します、そこにおいて指定された範囲の<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の中の文字は与えられた文字列によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string made by appending a given string to the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列を<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>に追加することによって作られる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string made by removing from both ends of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> characters contained in a given character set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字集合の中に含まれる文字を<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の両端から削除することによって作られる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string made by replacing in the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> all percent escapes with the matching characters as determined by a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>において全てのパーセントエスケープを、与えられた符号化によって決定されるとき、マッチする文字で置き換えることによって作られる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string made from the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> by replacing all characters not in the specified set with percent encoded characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された集合の中にないすべての文字をパーセントエンコード文字で置き換えることによって、<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>から作成される新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new string made from the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> by replacing all percent encoded sequences with the matching UTF-8 characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべてのパーセントエンコードシーケンスを合致するUTF-8文字で置き換えることによって、<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>から作成される新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a new value advanced by the given distance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインスタンスによって引き上げられる新しい値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a representation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> as a C string using a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた符号化を使っているC文字列としての<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の表現を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a representation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> using a given encoding to determine the percent escapes necessary to convert the <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> into a legal URL string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>のある表現を返します、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>を合法なURL文字列へ変換するのに必要なパーセントエスケープを決定するのに与えられた符号化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a sequence formed from <bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept> and repeated lazy applications of <bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept>からそして繰り返し<bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>を遅延適用して形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a sequence formed from repeated lazy applications of <bpt i="0" x="0">&lt;c0&gt;</bpt>next<ept i="0">&lt;/c0&gt;</ept> to a mutable <bpt i="1" x="1">&lt;c1&gt;</bpt>state<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>繰り返し<bpt i="0" x="0">&lt;c0&gt;</bpt>next<ept i="0">&lt;/c0&gt;</ept>を可変の<bpt i="1" x="1">&lt;c1&gt;</bpt>state<ept i="1">&lt;/c1&gt;</ept>に遅延適用することから形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a sequence of pairs (<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>, <bpt i="1" x="1">&lt;e1&gt;</bpt>x<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> represents a consecutive integer starting at zero, and <bpt i="3" x="3">&lt;e3&gt;</bpt>x<ept i="3">&lt;/e3&gt;</ept> represents an element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ベア (<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>, <bpt i="1" x="1">&lt;e1&gt;</bpt>x<ept i="1">&lt;/e1&gt;</ept>) のシーケンスを返します、そこで<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>はゼロで開始する連続した数を表します、そして<bpt i="3" x="3">&lt;e3&gt;</bpt>x<ept i="3">&lt;/e3&gt;</ept>はシーケンスの要素を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a slice, up to <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> in length, containing the final elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある断片を返します、長さ<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>まで、<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>の最後の要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a stride <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> such that <bpt i="1" x="1">&lt;c1&gt;</bpt>self.advanced(by: x)<ept i="1">&lt;/c1&gt;</ept> approximates <bpt i="2" x="2">&lt;c2&gt;</bpt>other<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>進み幅<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>を返します、<bpt i="1" x="1">&lt;c1&gt;</bpt>self.advanced(by: x)<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>other<ept i="2">&lt;/c2&gt;</ept>の近似となります（otherはラベルtoで指定されるもの？）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string containing characters the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> and a given string have in common, starting from the beginning of each up to the first characters that aren’t equivalent.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>と与えられた文字列が共通して持っている文字を、それぞれの開始点から始めて等しくない最初の文字に至るまで含んでいる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた書式化文字列をテンプレートとして使ってユーザの省略時のロケールに従って残りの引数値がそれに対する代用とされることによって作成される文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string made by appending to the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> a string constructed from a given format string and the following arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>に、ある与えられたフォーマット文字列と続く引数から構築される文字列を加えることで作られる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string made by normalizing the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>’s contents using Form C.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>のもつ内容を形式Cを使って正規化することによって作られる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string made by normalizing the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>’s contents using Form D.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>のもつ内容を形式Dを使って正規化することによって作られる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string made by normalizing the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>’s contents using Form KC.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>のもつ内容を形式KCを使って正規化することによって作られる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string made by normalizing the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>’s contents using Form KD.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>のもつ内容を形式KDを使って正規化することによって作られる文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string object containing the characters of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> that lie within a given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲内に横たわる<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の文字を含んでいる文字列オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string read from standard input through the end of the current line or until EOF is reached.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準入力から現在の行の終わりまでまたはEOFが到達されるまで読み込んだ文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string representation of the Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーの文字列表現を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a string with the given character folding options applied.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字フォールディングオプションが適用された状態の文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the first <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>個の要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the first element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最初の要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the given number of final elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた数の末尾要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の冒頭要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the last <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最後の<bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>個の要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the last element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最後の要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence containing all but the specified number of final elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された数の末尾要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence from the specified position to the end of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された位置からコレクションの終わりまでの下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence from the start of the collection through the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの始まりから指定された位置までも含む下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence from the start of the collection up to, but not including, the specified position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの始まりから指定された位置まで、しかしそれは含めない下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence, up to <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> in length, containing the initial elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位シーケンスを返します、長さ<bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>まで、最初の要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、シーケンスの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの冒頭の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a subsequence, up to the specified maximum length, containing the initial elements of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、シーケンスの冒頭の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a value less than or equal to the number of elements in <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;s1&gt;</bpt>nondestructively<ept i="1">&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の要素数より少ないか等しい値を返します、<bpt i="1" x="1">&lt;s1&gt;</bpt>非破壊的<ept i="1">&lt;/s1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a value less than or equal to the number of elements in the sequence, nondestructively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの要素数より少ないか等しい値を返します、非破壊的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a version of the string with all letters converted to lowercase, taking into account the specified locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての文字が小文字に変換される、この文字列の変形版を返します、指定されたロケールを考慮に入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a version of the string with all letters converted to uppercase, taking into account the specified locale.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての文字が大文字に変換される、この文字列の変形版を返します、指定されたロケールを考慮に入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a view presenting the elements of the collection in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素を逆順に表しているある見方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> containing the elements of <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>, in order, that satisfy the predicate <bpt i="2" x="2">&lt;c2&gt;</bpt>includeElement<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>述部<bpt i="2" x="2">&lt;c2&gt;</bpt>includeElement<ept i="2">&lt;/c2&gt;</ept>を満たす<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>の要素を、順に、含んでいる<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;T&gt;<ept i="0">&lt;/c0&gt;</ept> this memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメモリへの<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;T&gt;<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;T&gt;<ept i="0">&lt;/c0&gt;</ept> to this memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメモリに対する<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;T&gt;<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an Array of the encodings string objects support in the application’s environment.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アプリケーションの環境においてサポートされる符号化文字列オブジェクトの配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an UnsafeMutableRawPointer to this memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメモリへのUnsafeMutableRawPointerを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing substrings from the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> that have been divided by a given separator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>からの下位文字列のいくつかを含んでいる配列を返します、それは与えられた分離記号によって分割されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing substrings from the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> that have been divided by characters in a given set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>からの下位文字列のいくつかを含んでいる配列を返します、それは与えられた集合の中の文字によって分割されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果を連結したものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素を逆順に含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing the non-<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果で非-<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>のものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing the results of mapping the given closure over the sequence’s elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの要素全体にわたって与えられたクロージャをマップする結果を含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された述部を満足させるものであるシーケンスの要素を、順序通りに、含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an array of linguistic tags for the specified range and requested tags within the receiving string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>受け取っている文字列内で指定された範囲と要求されたタグに対する言語学的タグからなる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an empty iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します、その隔たりが与えられた限界インデックスを超えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an index that is the specified distance from the given index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an initialized <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> object that contains a given number of characters from a given array of UTF-16 Code Units</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期化された<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>オブジェクトを返します、それは与えられた数の文字をユニコード文字からなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an initialized <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> object that contains a given number of characters from a given array of Unicode characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期化された<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>オブジェクトを返します、それは与えられた数の文字をユニコードスカラーからなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an iterator over the Unicode scalars that make up this view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このビューから構成される幾らかのユニコードスカラーのすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an iterator over the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書のキー値ペアすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an iterator over the elements of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an iterator over the elements of this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの要素すべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an iterator over the members of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合のメンバすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an uppercase version of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の大文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns by reference the beginning of the first line and the end of the last line touched by the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲による最初の行の始まりと到達される最後の行の終わりを参照渡しによって返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns by reference the beginning of the first paragraph and the end of the last paragraph touched by the given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲による最初の段落の始まりと到達される最後の段落の終わりを参照渡しによって返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns nil if <bpt i="0" x="0">&lt;c0&gt;</bpt>bitPattern<ept i="0">&lt;/c0&gt;</ept> is zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>bitPattern<ept i="0">&lt;/c0&gt;</ept>がゼロならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns nil if <bpt i="0" x="0">&lt;c0&gt;</bpt>from<ept i="0">&lt;/c0&gt;</ept> is nil.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>from<ept i="0">&lt;/c0&gt;</ept>がnilならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns nil if <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is nil.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がnilならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the C-string encoding assumed for any method accepting a C string as an argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C文字列を引数として受け入れる何らかのメソッドのために仮定されるC文字列符号化を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the absolute value of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の絶対値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the actual number of matching paths.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>マッチするパスの実数値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the additive inverse of this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the big-endian representation of the integer, changing the byte order if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その整数のビッグエンディアン表現を返します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the bits of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>, interpreted as having type <bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>のビットを、型<bpt i="1" x="1">&lt;c1&gt;</bpt>U<ept i="1">&lt;/c1&gt;</ept>を持つと解釈して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the bits that are set in exactly one of the two arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数の内で１つしかないものが集められ、それらビットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各要素の間に与えられたセパレータを挿入して、このシーケンスに属する複数のシーケンスの要素を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the concatenated results of mapping <bpt i="0" x="0">&lt;c0&gt;</bpt>transform<ept i="0">&lt;/c0&gt;</ept> over <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>全体にわたる<bpt i="1" x="1">&lt;c1&gt;</bpt>transform<ept i="1">&lt;/c1&gt;</ept>マッピングの結果を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the contiguous memory footprint of <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>の隣接メモリフットプリントを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the current integer with the byte order swapped.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バイト順を交換した現在の整数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the default memory alignment of <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>の省略時のメモリアラインメントを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the difference between <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の間の差異を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the difference of this value and the given value, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と与えられた値の差を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the distance between two indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのインデックス間の隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the distance from this value to the specified value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値から指定された値までの隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> that satisfy <bpt i="1" x="1">&lt;c1&gt;</bpt>isIncluded<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の要素で<bpt i="1" x="1">&lt;c1&gt;</bpt>isIncluded<ept i="1">&lt;/c1&gt;</ept>を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> that satisfy <bpt i="1" x="1">&lt;c1&gt;</bpt>predicate<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の要素で<bpt i="1" x="1">&lt;c1&gt;</bpt>predicate<ept i="1">&lt;/c1&gt;</ept>を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of the collection in reverse order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素を逆順に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of the collection, sorted using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素を返します、与えられた述部を要素間の比較として使ってソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of the collection, sorted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素を、ソートして、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた述部を要素間の比較として使ってソートされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of the sequence, sorted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの要素を、ソートして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of this collection of collections, concatenated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションに属する複数のコレクションの要素を、鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the elements of this sequence of sequences, concatenated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスに属する複数のシーケンスの要素を、鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the fastest encoding to which the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> may be converted without loss of information.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>が情報の損失無しに変換されるであろう最速の符号化を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the first element of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>, or <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> if <bpt i="2" x="2">&lt;c2&gt;</bpt>self<ept i="2">&lt;/c2&gt;</ept> is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の最初の要素を、または<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>が空ならば<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the first element of the sequence that satisfies the given predicate or nil if no such element is found.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた述部を満たすシーケンスの最初の要素を、またはそのような要素が見つからないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the first index in which an element of the collection satisfies the given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初のインデックスで、それにおけるコレクションの要素が与えられた述部を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the first index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された値がコレクションにおいて現れるところの最初のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the greater of the two given values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの与えられた値の大きい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the greater of two comparable values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの比較可能な値のうちより大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the greatest argument passed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>渡された引数の最も大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the high-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの上位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the index for the given key.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたキーに対するインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the index of the given element in the set, or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if the element is not a member of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素の集合の中のインデックス、またはその要素が集合のメンバでないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the intersection of bits set in the two arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビットの交差を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the inverse of the bits set in the argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>引数におけるビットの逆順を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the least argument passed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>渡された引数の最も少ないものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the lesser of the two given values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの与えられた値のより小さい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the lesser of two comparable values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの比較可能な値のうちより小さいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the little-endian representation of the integer, changing the byte order if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その整数のリトルエンディアン表現を返します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素と等しい要素を避けるようにして、このコレクションの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた述部を満たす要素を含んでいない、このコレクションの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素と等しい要素を避けるようにして、このシーケンスの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた述部を満たす要素を含んでいない、このシーケンスの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the low-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの下位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the maximum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the maximum element in the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the maximum number of bytes needed to store the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> in a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>を指定された符号化において格納するのに必要なバイト数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the minimum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the minimum element in the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the next consecutive location after <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>の後の、以降に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the next consecutive position after <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>の後の、以降に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the next consecutive position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以降に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the number of UTF-16 code units required for the given code unit sequence when transcoded to UTF-16, and a Boolean value indicating whether the sequence was found to contain only ASCII characters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-16にコード変換するときに指定されたコードユニットシーケンスに必要とされるUTF-16コードユニットの数を、およびそのシーケンスがASCII文字だけを含むことを発見されたかどうかを指し示すブール値を、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the number of bytes from the start of one instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> to the start of the next in an <bpt i="1" x="1">&lt;c1&gt;</bpt>Array&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Array&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept>の中のあるインスタンス<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>の始まりから次のものの始まりまでのバイト数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the number of bytes required to store the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> in a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>を指定された符号化において格納するのに要求されるバイト数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the number of code units required to encode the given Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたユニコードスカラーをエンコードするのに必要とされるコードユニットの数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the object instance being used for storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ストレージのために使われているオブジェクトインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position immediately after <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>の直後の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position immediately after the given index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスの直後の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position immediately before the given index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスの直前の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position immediately preceding <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>の直前の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position in the given UTF-16 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-16ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position in the given UTF-8 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたUTF-8ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position in the given string that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列の中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the position in the given view of Unicode scalars that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたユニコードスカラーのビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the previous consecutive location before <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>前の、以前に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the previous consecutive position before <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>前の、以前に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the previous consecutive position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以前に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the product of this value and the given value, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と与えられた値の積を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the quotient of this value and the given value, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と与えられた値の商を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the range in the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> of the composed character sequence located at a given index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたインデックスで位置する合成文字シーケンスの<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>での範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the range in the string of the composed character sequences for a given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲に対する合成文字シーケンスの文字列での範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the range of characters representing the line or lines containing a given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲を含んでいる行または複数行を表している文字の範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the range of characters representing the paragraph or paragraphs containing a given range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた範囲を含んでいる段落または複数段落を表している文字の範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the range of valid index values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>有効なインデックス値の範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the remainder of this value divided by the given value using truncating division.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>切り捨て除算を使って与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの与えられた値の積をこの値に加える結果を返します、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the result of calling the given combining closure with each element of this sequence and an accumulating value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた結合処理クロージャをこのシーケンスの各要素およびある集積値とともに呼び出す結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the result of invoking <bpt i="0" x="0">&lt;c0&gt;</bpt>compare:options:<ept i="0">&lt;/c0&gt;</ept> with <bpt i="1" x="1">&lt;c1&gt;</bpt>NSCaseInsensitiveSearch<ept i="1">&lt;/c1&gt;</ept> as the only option.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>compare:options:<ept i="0">&lt;/c0&gt;</ept>を、単なるオプションとしての<bpt i="1" x="1">&lt;c1&gt;</bpt>NSCaseInsensitiveSearch<ept i="1">&lt;/c1&gt;</ept>とともに発動する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the result of negating <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>を負数にした結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the sequence of values (<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>self + stride<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>self + 2 * stride<ept i="2">&lt;/c2&gt;</ept>, … <bpt i="3" x="3">&lt;e3&gt;</bpt>last<ept i="3">&lt;/e3&gt;</ept>) where <bpt i="4" x="4">&lt;e4&gt;</bpt>last<ept i="4">&lt;/e4&gt;</ept> is the last value in the progression less than or equal to <bpt i="5" x="5">&lt;c5&gt;</bpt>end<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値のシーケンス (<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>self + stride<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>self + 2 * stride<ept i="2">&lt;/c2&gt;</ept>、… <bpt i="3" x="3">&lt;e3&gt;</bpt>last<ept i="3">&lt;/e3&gt;</ept>) を返します、そこで<bpt i="4" x="4">&lt;e4&gt;</bpt>last<ept i="4">&lt;/e4&gt;</ept>はこの数列の中の最後の値で、<bpt i="5" x="5">&lt;c5&gt;</bpt>end<ept i="5">&lt;/c5&gt;</ept>より少ないかそれと等しいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the sequence of values (<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>self + stride<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>self + 2 * stride<ept i="2">&lt;/c2&gt;</ept>, … <bpt i="3" x="3">&lt;e3&gt;</bpt>last<ept i="3">&lt;/e3&gt;</ept>) where <bpt i="4" x="4">&lt;e4&gt;</bpt>last<ept i="4">&lt;/e4&gt;</ept> is the last value in the progression that is less than <bpt i="5" x="5">&lt;c5&gt;</bpt>end<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値のシーケンス (<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>self + stride<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>self + 2 * stride<ept i="2">&lt;/c2&gt;</ept>、… <bpt i="3" x="3">&lt;e3&gt;</bpt>last<ept i="3">&lt;/e3&gt;</ept>) を返します、そこで<bpt i="4" x="4">&lt;e4&gt;</bpt>last<ept i="4">&lt;/e4&gt;</ept>はこの数列の中の最後の値で、<bpt i="5" x="5">&lt;c5&gt;</bpt>end<ept i="5">&lt;/c5&gt;</ept>より少ないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the smallest encoding to which the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> can be converted without loss of information.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>が情報の損失無しに変換されることができる最小の符号化を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the square root of the value, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値の平方根を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the sum of this value and the given value, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と与えられた値の合計を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the union of bits set in the two arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数におけるビットの合併を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the value with greater magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より大きい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the value with lesser magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より小さい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns this value rounded to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された丸め規則を使って整数値に丸められたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns this value rounded to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「教科書丸め」を使って整数値に丸めたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Right associative</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>右結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Right bit shift and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>右ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Round to the closest allowed value that is greater than or equal to the source.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ソースより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Round to the closest allowed value that is less than or equal to the source.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ソースより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Round to the closest allowed value whose magnitude is greater than or equal to that of the source.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの規模がソースのそれより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Round to the closest allowed value whose magnitude is less than or equal to that of the source.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの規模がソースのそれより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Round to the closest allowed value; if two values are equally close, the even one is chosen.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、偶数のものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Round to the closest allowed value; if two values are equally close, the one with greater magnitude is chosen.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、より大きい規模を持つものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rounds the value to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された丸め規則を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rounds this value to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「教科書丸め」を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>S() == []</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>S() == [] （空の集合は空の配列リテラルと同等です）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Saved indices may become invalid as a result of mutating operations; for more information about index invalidation in mutable collections, see the reference for the <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>RangeReplaceableCollection<ept i="1">&lt;/c1&gt;</ept> protocols, as well as for the specific type you’re using.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>保存されたインデックスは可変の演算の結果に無効となるかもしれません；可変コレクションにおけるインデックス無効化についてのさらなる情報は、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>RangeReplaceableCollection<ept i="1">&lt;/c1&gt;</ept>プロトコルに対してのリファレンスを、あなたが使っている特定の型に対してだけでなく、見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Scalar values representing characters that are normally unprintable or that otherwise require escaping are escaped with a backslash.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>通常は出力できないまたはそうするにはエスケープする必要がある、スカラー値表現の文字は、バックスラッシュでエスケープされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="0" x="0">&lt;c0&gt;</bpt>isUniquelyReferenced<ept i="0">&lt;/c0&gt;</ept> for details.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>詳細のために<bpt i="0" x="0">&lt;c0&gt;</bpt>isUniquelyReferenced<ept i="0">&lt;/c0&gt;</ept>を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See Also</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See Also: <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollection<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollection<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See Also: <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollectionProtocol<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollectionProtocol<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenCollection<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次を参照してください：<bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenCollection<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenSequence<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次を参照してください：<bpt i="0" x="0">&lt;c0&gt;</bpt>FlattenSequence<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequence<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollectionProtocol<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>LazyCollection<ept i="2">&lt;/c2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequence<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollectionProtocol<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>LazyCollection<ept i="2">&lt;/c2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollection<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyCollection<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>LazySequence<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>LazySequence<ept i="1">&lt;/c1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>ReversedCollection<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>ReversedCollection<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>ReversedRandomAccessCollection<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>ReversedRandomAccessCollection<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照：<bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>RangeReplaceableCollection<ept i="2">&lt;/c2&gt;</ept> protocols for more methods available to arrays.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列で利用出来る更にたくさんのメソッドを<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>RangeReplaceableCollection<ept i="2">&lt;/c2&gt;</ept>プロトコルで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the failable initializers of <bpt i="3" x="3">&lt;c3&gt;</bpt>AnyBidirectionalCollection<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>AnyRandomAccessCollection<ept i="4">&lt;/c4&gt;</ept> for details.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>AnyBidirectionalCollection<ept i="3">&lt;/c3&gt;</ept>と<bpt i="4" x="4">&lt;c4&gt;</bpt>AnyRandomAccessCollection<ept i="4">&lt;/c4&gt;</ept>の失敗できるイニシャライザを詳細としてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the failable initializers of <bpt i="6" x="6">&lt;c6&gt;</bpt>AnyBidirectionalCollection<ept i="6">&lt;/c6&gt;</ept> and <bpt i="7" x="7">&lt;c7&gt;</bpt>AnyRandomAccessCollection<ept i="7">&lt;/c7&gt;</ept> for details.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>詳細として<bpt i="6" x="6">&lt;c6&gt;</bpt>AnyBidirectionalCollection<ept i="6">&lt;/c6&gt;</ept>と<bpt i="7" x="7">&lt;c7&gt;</bpt>AnyRandomAccessCollection<ept i="7">&lt;/c7&gt;</ept>の失敗できるイニシャライザを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See those types for more information.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>さらなる情報としてそれらの型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sequence and Collection Operations</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスおよびコレクション演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sequence operations taking closure arguments, such as <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>, are normally eager: they use the closure immediately and return a new array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クロージャ引数を取るシーケンス操作、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>filter<ept i="1">&lt;/c1&gt;</ept>は、普通は先行処理です：これらはクロージャを即座に使用します、そしてある新しい配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sequences provide access to their elements by creating an iterator, which keeps track of its iteration process and returns one element at a time as it advances through the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>さまざまなシーケンスは、あるイテレータを作成することによってそれらの要素に対するアクセスを提供します、それはそれの反復処理を追跡し続けてそれがそのシーケンスを始めから終わりへと前進するごとに１度に１つ要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set <bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept> is a strict subset of another set <bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept> if every member of <bpt i="2" x="2">&lt;e2&gt;</bpt>A<ept i="2">&lt;/e2&gt;</ept> is also a member of <bpt i="3" x="3">&lt;e3&gt;</bpt>B<ept i="3">&lt;/e3&gt;</ept> and <bpt i="4" x="4">&lt;e4&gt;</bpt>B<ept i="4">&lt;/e4&gt;</ept> contains at least one element that is not a member of <bpt i="5" x="5">&lt;e5&gt;</bpt>A<ept i="5">&lt;/e5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合<bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept>がもう１つの集合<bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept>の狭義の部分集合であるのは、<bpt i="2" x="2">&lt;e2&gt;</bpt>A<ept i="2">&lt;/e2&gt;</ept>のすべてのメンバがまた<bpt i="3" x="3">&lt;e3&gt;</bpt>B<ept i="3">&lt;/e3&gt;</ept>のメンバであり、<bpt i="4" x="4">&lt;e4&gt;</bpt>B<ept i="4">&lt;/e4&gt;</ept>が少なくとも１つの<bpt i="5" x="5">&lt;e5&gt;</bpt>A<ept i="5">&lt;/e5&gt;</ept>のメンバではない要素を含む場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set <bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept> is a strict superset of another set <bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept> if every member of <bpt i="2" x="2">&lt;e2&gt;</bpt>B<ept i="2">&lt;/e2&gt;</ept> is also a member of <bpt i="3" x="3">&lt;e3&gt;</bpt>A<ept i="3">&lt;/e3&gt;</ept> and <bpt i="4" x="4">&lt;e4&gt;</bpt>A<ept i="4">&lt;/e4&gt;</ept> contains at least one element that is <bpt i="5" x="5">&lt;e5&gt;</bpt>not<ept i="5">&lt;/e5&gt;</ept> a member of <bpt i="6" x="6">&lt;e6&gt;</bpt>B<ept i="6">&lt;/e6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合<bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept>がもう１つの集合<bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept>の狭義の上位集合であるのは、<bpt i="2" x="2">&lt;e2&gt;</bpt>B<ept i="2">&lt;/e2&gt;</ept>のすべてのメンバがまた<bpt i="3" x="3">&lt;e3&gt;</bpt>A<ept i="3">&lt;/e3&gt;</ept>のメンバであり、<bpt i="4" x="4">&lt;e4&gt;</bpt>A<ept i="4">&lt;/e4&gt;</ept>が少なくとも１つの<bpt i="6" x="6">&lt;e6&gt;</bpt>B<ept i="6">&lt;/e6&gt;</ept>のメンバでは<bpt i="5" x="5">&lt;e5&gt;</bpt>ない<ept i="5">&lt;/e5&gt;</ept>要素を含む場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set <bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept> is a subset of another set <bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept> if every member of <bpt i="2" x="2">&lt;e2&gt;</bpt>A<ept i="2">&lt;/e2&gt;</ept> is also a member of <bpt i="3" x="3">&lt;e3&gt;</bpt>B<ept i="3">&lt;/e3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合<bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept>がもう１つの集合<bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept>の狭義の部分集合であるのは、<bpt i="2" x="2">&lt;e2&gt;</bpt>A<ept i="2">&lt;/e2&gt;</ept>のすべてのメンバがまた<bpt i="3" x="3">&lt;e3&gt;</bpt>B<ept i="3">&lt;/e3&gt;</ept>のメンバである場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set <bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept> is a superset of another set <bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept> if every member of <bpt i="2" x="2">&lt;e2&gt;</bpt>B<ept i="2">&lt;/e2&gt;</ept> is also a member of <bpt i="3" x="3">&lt;e3&gt;</bpt>A<ept i="3">&lt;/e3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合<bpt i="0" x="0">&lt;e0&gt;</bpt>A<ept i="0">&lt;/e0&gt;</ept>がもう１つの集合<bpt i="1" x="1">&lt;e1&gt;</bpt>B<ept i="1">&lt;/e1&gt;</ept>の狭義の上位集合であるのは、<bpt i="2" x="2">&lt;e2&gt;</bpt>B<ept i="2">&lt;/e2&gt;</ept>のすべてのメンバがまた<bpt i="3" x="3">&lt;e3&gt;</bpt>A<ept i="3">&lt;/e3&gt;</ept>のメンバである場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set Operations</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set and dictionary performance depends on hash values that minimize collisions for their associated element and key types, respectively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合と辞書の性能は、ハッシュ値、それらの関連要素やキーの型の食い違いをできるだけ少なくすること、に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set operations are not limited to use with other sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合演算は、他の集合との使用に制限されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets provide a suite of mathematical set operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合は、数学的な集合演算のひとそろいを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sharing indices between collections and their subsequences is an important part of the design of Swift’s collection algorithms.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションとそれらの下位シーケンスとの間のインデックスの共有は、Swiftのコレクションアルゴリズム設計の重要な部分のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Signaling NaNs typically raise the Invalid flag when used in general computing operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シグナルNaNは、一般的な計算操作に使われる時に通常は無効フラグをあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similar to the <bpt i="1" x="1">&lt;c1&gt;</bpt>reduce(_:_:)<ept i="1">&lt;/c1&gt;</ept> method defined in the standard library, which takes an initial value and a combining closure, <bpt i="2" x="2">&lt;c2&gt;</bpt>reduce1(_:)<ept i="2">&lt;/c2&gt;</ept> uses the first element of the sequence as the initial value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期値と結合クロージャをとる、標準ライブラリ定義の<bpt i="1" x="1">&lt;c1&gt;</bpt>reduce(_:_:)<ept i="1">&lt;/c1&gt;</ept>メソッドとよく似て、 <bpt i="2" x="2">&lt;c2&gt;</bpt>reduce1(_:)<ept i="2">&lt;/c2&gt;</ept>はシーケンスの最初の要素を初期値として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Simply assign an array literal to a variable or constant with the <bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept> type specified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単にある配列リテラルを<bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept>型指定子を持つ変数または定数に代入してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Simply surround a comma-separated list of values, instances, or literals with square brackets to create an array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単にコンマ区切りの値、インスタンス、またはリテラルを角括弧で囲むことで、配列リテラルを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since equality between instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> types is an equivalence relation, any of your custom types that conform to <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> must satisfy three conditions, for any values <bpt i="2" x="2">&lt;c2&gt;</bpt>a<ept i="2">&lt;/c2&gt;</ept>, <bpt i="3" x="3">&lt;c3&gt;</bpt>b<ept i="3">&lt;/c3&gt;</ept>, and <bpt i="4" x="4">&lt;c4&gt;</bpt>c<ept i="4">&lt;/c4&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>型のインスタンス間の同等性は等値関係であることから、<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>に準拠するあなたのあつらえの型は何であれ、任意の値<bpt i="2" x="2">&lt;c2&gt;</bpt>a<ept i="2">&lt;/c2&gt;</ept>、<bpt i="3" x="3">&lt;c3&gt;</bpt>b<ept i="3">&lt;/c3&gt;</ept>、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>c<ept i="4">&lt;/c4&gt;</ept>に対して、３つの条件を満たす必要があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Slices Are Views onto Arrays</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスは配列に関する見方です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Slices Inherit Semantics</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスは意味論を継承します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Slices Maintain Indices</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスはインデックスを維持します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Slices Share Indices</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスはインデックスを共有します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Slices maintain the same indices of the larger array for the same elements, so the starting index of a slice depends on how it was created, letting you perform index-based operations on either a full array or a slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスはより大きな配列と同じインデックスを同じ要素に対して維持します、そのためスライスの開始インデックスはそれがどう作成されたかによって決まり、あなたにインデックスに基づく演算を完全な配列またはスライスのどちらでも実行させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Solve complex problems, and write high-performance, readable code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複雑な問題を解決します、そして高性能の、読みやすいコードを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some algorithms, however, may call for direct iterator use.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>幾つかのアルゴリズムは、しかしながら、直にイテレータを使うために呼び出すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some characters that are visible in a string are made up of more than one Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列の中に見ることができるいくつかの文字は、１つ以上のユニコードスカラー値で構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some operations that are efficient on a dictionary are slower when using <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書上で効率的ないくつかの演算は<bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>を使う場合より遅くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some sequence and collection operations can be used more simply when the elements conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかのシーケンスとコレクションの演算子は、要素が<bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>に準拠する時はより簡単に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some special cases apply:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかの特別な場合が適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you may want different error states to include the same common data, such as the position in a file or some of your application’s state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>時にはあなたは、いくらかの異なるエラー状態をこの同じ通常のデータに含めたいかもしれません、例えばあるファイル中の位置やあなたのアプリケーションの何らかの状態など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sorts the collection in place, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションをその場でソートします、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sorts the collection in place.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションをその場でソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specifically, it does not validate that a high-surrogate code unit precedes <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>具体的には、それは高位サロゲートコード単位が<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の前にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specifically, it does not validate that a low-surrogate code unit follows <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>具体的には、それは低位サロゲートコード単位が<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の後にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specifically, you use the <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> type to hold elements of a single type, the array’s <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>とりわけ、あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>型をある単一の型、その配列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型、の複数の要素を保持するために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Standard input is interpreted as <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF-8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準入力は、<bpt i="0" x="0">&lt;c0&gt;</bpt>UTF-8<ept i="0">&lt;/c0&gt;</ept>として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts or continues decoding a UTF-16 sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるUTF-16シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts or continues decoding a UTF-32 sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるUTF-32シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts or continues decoding a UTF-8 sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるUTF-8シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts or continues decoding a code unit sequence into Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コード単位シーケンスをユニコードスカラー値へデコードすることを開始するまたは継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Stores a value’s bytes into raw memory at <bpt i="0" x="0">&lt;c0&gt;</bpt>self + offset<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値のもつバイトを生のメモリへ<bpt i="0" x="0">&lt;c0&gt;</bpt>self + offset<ept i="0">&lt;/c0&gt;</ept>で格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Storing a copy of a nontrivial value into memory requires that the user know the type of value previously in memory, and requires initialization or assignment of the memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>自明でない値のコピーのメモリへの格納は、ユーザがメモリの中の以前の値の型を知っていることが必要となります、そしてメモリの初期化または割り当てが必要となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Strideable’s implementation is potentially less efficient and cannot handle misaligned pointers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Strideableの実装は、潜在的に効率的でなく、そして調整不良のポインタを取り扱うことが出来ません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列バッファは指数成長戦略を使います、それはある文字列へ追加することを、多くの追加演算を平均した時に定数時間演算にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String interpolation is a multiple-step initialization process.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列補間は、複数段階の初期化処理です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String interpolations are an easy way to build a string from multiple pieces.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列補間は、多様な断片からある文字列を組み立てる簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String interpolations are string literals that evaluate any included expressions and convert the results to string form.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列補間は文字列リテラルです、それは、何らかの含まれた式を評価して、その結果を文字列形式へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Strings always have value semantics.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列は常に値意味論を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Strings in Swift are Unicode correct, locale insensitive, and designed to be efficient.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftでの文字列は、ユニコードに正確です、ロケールに影響されません、そして効率的であるように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Strings in Swift conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol, so the names are sorted in ascending order according to the less-than operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列はSwift では<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠します、それでこれらの名前はより小さい演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>）によって昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Structures</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subclasses must not have any stored properties; any storage needed should be included in <bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>サブクラスは、どんな保存プロパティも持つ必要はありません；必要とされるあらゆるストレージは<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>の中に含められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subnormal numbers are often called <bpt i="0" x="0">&lt;e0&gt;</bpt>denormal<ept i="0">&lt;/e0&gt;</ept> or <bpt i="1" x="1">&lt;e1&gt;</bpt>denormalized<ept i="1">&lt;/e1&gt;</ept>—these are different names for the same concept.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>サブノーマル数は、しばしば<bpt i="0" x="0">&lt;e0&gt;</bpt>デノーマル<ept i="0">&lt;/e0&gt;</ept>または<bpt i="1" x="1">&lt;e1&gt;</bpt>デノーマライズされた<ept i="1">&lt;/e1&gt;</ept>と呼ばれます—それらは同じ概念に対する異なる名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subnormal values do not use the full precision available to values of a type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>サブノーマル値は、ある型の値に利用可能な完全な精度を使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subscripting a dictionary with a key returns an optional value, because a dictionary might not hold a value for the key that you use in the subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるキーで辞書に添え字を使うことは、オプショナル値を返します、なぜなら辞書はあなたが添え字に使ったキーに対して値を保持しないかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subscripting with a key takes the following form:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キーによる添え字は以下の形式をとります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subscripting with a key, yielding an optional value:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キーによる添え字、オプショナル値を生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subscripting with an index, yielding a key-value pair:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インデックスによる添え字、キー値ペアを生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subscripts</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtract</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtract <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning a result and a <bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept> that is <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept> iff the operation caused an arithmetic overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の減算、結果を返します、そしてこの演算が算術的オーバーフローをもたらした場合に限り<bpt i="2" x="2">&lt;c2&gt;</bpt>Bool<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtract and assign</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>減算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtract with overflow</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オーバーフロー減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtracts <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept> and stores the result in <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>, trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の減算、結果を<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>に格納します、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtracts <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, returning the result and trapping in case of arithmetic overflow (except in -Ounchecked builds).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の減算、結果を返して、計算オーバーフローの場合にトラップします（-Ouncheckedビルドの場合は除きます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtracts <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, silently discarding any overflow.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の減算、黙ってあらゆるオーバーフローを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Subtracts the given value from this value in place, rounding to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた値をこの値からその場で減じます、表現可能な値に丸めています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Suggests a display style for the reflected subject.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>リフレクションされる主題のための表示形式を提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Suppose you are tasked with finding the first two days with absences in the session.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがこの学期において欠席者のある最初の２つの日付を見つける任務を負うと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Suppose you need to store a list of the names of students that are signed up for a class you’re teaching.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが生徒の名前のリストをしまっておく必要があると仮定してみましょう、それはあなたが教えているクラスに受講届けを出されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Suppress the representation of all ancestor classes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>全ての先祖クラスの表現を抑制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift Standard Library</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swif標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift Standard Library Functions</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swift標準ライブラリ関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift Standard Library Operators</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swift標準ライブラリ演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift Standard Library Type Aliases</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swift標準ライブラリ型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift makes it as easy to create a new set as to create a new array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは、新しい集合を作成することを新しい配列を作成するのと同じくらい簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift makes it easy to create arrays in your code using an array literal: simply surround a comma separated list of values with square brackets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは、あなたのコードにおける配列の作成を配列リテラルを使うことで簡単にします：単にコンマ区切りの値のリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift provides a default debugging textual representation for any type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは、省略時のデバッグ用テキスト表現をあらゆる型に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift streamlines interoperation with C string APIs by letting you pass a <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> instance to a function as an <bpt i="1" x="1">&lt;c1&gt;</bpt>Int8<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>UInt8<ept i="2">&lt;/c2&gt;</ept> pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは、あなたに<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>インスタンスを関数へ<bpt i="1" x="1">&lt;c1&gt;</bpt>Int8<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>UInt8<ept i="2">&lt;/c2&gt;</ept>ポインタとして渡させることによって、C文字列APIとの相互作用を能率化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift uses a sequence’s or collection’s iterator internally to enable the <bpt i="2" x="2">&lt;c2&gt;</bpt>for<ept i="2">&lt;/c2&gt;</ept>-<bpt i="3" x="3">&lt;c3&gt;</bpt>in<ept i="3">&lt;/c3&gt;</ept> loop language construct.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは、あるシーケンスのもつまたはコレクションのもつイテレータを内部的に使うことで、<bpt i="2" x="2">&lt;c2&gt;</bpt>for<ept i="2">&lt;/c2&gt;</ept>-<bpt i="3" x="3">&lt;c3&gt;</bpt>in<ept i="3">&lt;/c3&gt;</ept>ループ言語構成体を可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift uses only simple Boolean values in conditional contexts to help avoid accidental programming errors and to help maintain the clarity of each control statement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftは、単純なブール値だけを条件文脈において使用することによって、思いがけないプログラミングエラーを防ぐのを助けます、そして各制御文の明瞭性を保つのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift’s <bpt i="3" x="3">&lt;c3&gt;</bpt>String<ept i="3">&lt;/c3&gt;</ept> type conforms to <bpt i="4" x="4">&lt;c4&gt;</bpt>TextOutputStream<ept i="4">&lt;/c4&gt;</ept> already, so you can capture the output from <bpt i="5" x="5">&lt;c5&gt;</bpt>print(_:to:)<ept i="5">&lt;/c5&gt;</ept> and <bpt i="6" x="6">&lt;c6&gt;</bpt>dump(_:to:)<ept i="6">&lt;/c6&gt;</ept> in a string instead of logging it to standard output.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftの<bpt i="3" x="3">&lt;c3&gt;</bpt>String<ept i="3">&lt;/c3&gt;</ept>型は、すでに<bpt i="4" x="4">&lt;c4&gt;</bpt>TextOutputStream<ept i="4">&lt;/c4&gt;</ept>に準拠します、なのであなたは<bpt i="5" x="5">&lt;c5&gt;</bpt>print(_:to:)<ept i="5">&lt;/c5&gt;</ept>および<bpt i="6" x="6">&lt;c6&gt;</bpt>dump(_:to:)<ept i="6">&lt;/c6&gt;</ept>からの出力を文字列の中に捕えることが、それを標準出力に記録する代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift’s enumerations are well suited to represent simple errors.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftの列挙は、単純なエラーを表すのによく適します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Swift’s type system usually shows the wrapped type’s name with a trailing question mark (<bpt i="2" x="2">&lt;c2&gt;</bpt>?<ept i="2">&lt;/c2&gt;</ept>) instead of showing the full type name.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftのもつ型システムは通常、ラップされた型の名前を後に続く疑問符（<bpt i="2" x="2">&lt;c2&gt;</bpt>?<ept i="2">&lt;/c2&gt;</ept>）で示します、完全な型の名前を示す代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Symbols</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シンボル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>TODO: Optimize where <bpt i="0" x="0">&lt;c0&gt;</bpt>C<ept i="0">&lt;/c0&gt;</ept> is a <bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArrayBuffer<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべきこと：最適化、そこで<bpt i="0" x="0">&lt;c0&gt;</bpt>C<ept i="0">&lt;/c0&gt;</ept>は<bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArrayBuffer<ept i="1">&lt;/c1&gt;</ept>である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Table 1</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>表 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Table 2</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>表２</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ternary</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>三項</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ternary conditional</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>三項条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That default representation is used by the <bpt i="0" x="0">&lt;c0&gt;</bpt>String(reflecting:)<ept i="0">&lt;/c0&gt;</ept> initializer and the <bpt i="1" x="1">&lt;c1&gt;</bpt>debugPrint(_:)<ept i="1">&lt;/c1&gt;</ept> function for types that don’t provide their own.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の表現は、<bpt i="0" x="0">&lt;c0&gt;</bpt>String(reflecting:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザおよび<bpt i="1" x="1">&lt;c1&gt;</bpt>debugPrint(_:)<ept i="1">&lt;/c1&gt;</ept>関数によって、それらが自前で提供しない型に対して使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, for a mutable collection instance <bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>, index <bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>, and value <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>, the two sets of assignments in the following code sample must be equivalent:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、ある可変コレクションインスタンス<bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>、インデックス<bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>、そして値<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>に対して、以下のコード見本における２組の代入は同等なものでなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, for any elements <bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>c<ept i="3">&lt;/c3&gt;</ept>, the following conditions must hold:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、何らかの要素<bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>c<ept i="3">&lt;/c3&gt;</ept>に対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, for any index <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> into a bidirectional collection <bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、二方向性のコレクション<bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>に対する何らかのインデックス<bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>は：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, for two instances <bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept> of the same type, if <bpt i="3" x="3">&lt;c3&gt;</bpt>a == b<ept i="3">&lt;/c3&gt;</ept> then <bpt i="4" x="4">&lt;c4&gt;</bpt>a.hashValue == b.hashValue<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、同じ型の２つのインスタンス<bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept>に対して、<bpt i="3" x="3">&lt;c3&gt;</bpt>a == b<ept i="3">&lt;/c3&gt;</ept>ならばそのとき<bpt i="4" x="4">&lt;c4&gt;</bpt>a.hashValue == b.hashValue<ept i="4">&lt;/c4&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableRangeReplaceableSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>MutableSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableBidirectionalSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableRandomAccessSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableSlice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableSlice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That is, if a <bpt i="0" x="0">&lt;c0&gt;</bpt>Slice<ept i="0">&lt;/c0&gt;</ept> instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>Slice<ept i="0">&lt;/c0&gt;</ept>インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>??<ept i="0">&lt;/c0&gt;</ept> operator also works with another <bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept> instance on the right-hand side.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>??<ept i="0">&lt;/c0&gt;</ept>演算子はまた、別の<bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept>インスタンスを右手側でも扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>ASCIILogger<ept i="0">&lt;/c0&gt;</ept> type’s <bpt i="1" x="1">&lt;c1&gt;</bpt>write(_:)<ept i="1">&lt;/c1&gt;</ept> method processes its string input by escaping each Unicode scalar, with the exception of <bpt i="2" x="2">&lt;c2&gt;</bpt>"\n"<ept i="2">&lt;/c2&gt;</ept> line returns.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ASCIILogger<ept i="0">&lt;/c0&gt;</ept>型のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>write(_:)<ept i="1">&lt;/c1&gt;</ept>メソッドは、それの文字列入力を各ユニコードスカラーをエスケープすることによって処理します、<bpt i="2" x="2">&lt;c2&gt;</bpt>"\n"<ept i="2">&lt;/c2&gt;</ept>行復帰を除いては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyHashable<ept i="0">&lt;/c0&gt;</ept> type forwards equality comparisons and hashing operations to an underlying hashable value, hiding its specific underlying type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyHashable<ept i="0">&lt;/c0&gt;</ept>型は、さまざまな同等性比較およびハッシュ演算をある基盤をなすハッシュ化値に転送して、それの特定の基礎をなす型を隠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> type makes it fast and efficient for you to perform operations on sections of a larger array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>型は、ある大きな配列の各部分上で演算を実行することをあなたの代わりにより速くより効率的にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Base<ept i="0">&lt;/c0&gt;</ept> (presumably non-lazy) sequence from which <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> was created.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それから<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>が作成された<bpt i="1" x="1">&lt;c1&gt;</bpt>Base<ept i="1">&lt;/c1&gt;</ept>（おそらく非遅延の）シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>BinaryFloatingPoint<ept i="0">&lt;/c0&gt;</ept> protocol extends the <bpt i="1" x="1">&lt;c1&gt;</bpt>FloatingPoint<ept i="1">&lt;/c1&gt;</ept> protocol with operations specific to floating-point binary types, as defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>BinaryFloatingPoint<ept i="0">&lt;/c0&gt;</ept>プロトコルは、<bpt i="1" x="1">&lt;c1&gt;</bpt>FloatingPoint<ept i="1">&lt;/c1&gt;</ept>プロトコルを、IEEE 754仕様書で定義されるとおりに、浮動小数点バイナリ型に特有の演算で拡張します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept> type represents a character made up of one or more Unicode scalar values, grouped by a Unicode boundary algorithm.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept>型は、あるユニコード境界アルゴリズムによって一群にされる、ひとつ以上のユニコードスカラー値から成り立っている１つの文字を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>プロトコルは、多くの演算に対して省略時の実装を宣言および提供していて、それは要素がそれらの添え字によってアクセス可能になっているのを当てにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>CollectionOfTwo<ept i="0">&lt;/c0&gt;</ept> structure is a fixed-size collection that always holds two elements of a specific type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;c0&gt;</bpt>CollectionOfTwo<ept i="0">&lt;/c0&gt;</ept>構造体は固定サイズのコレクションです、それは常にある決まった型の２つの要素を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>CollectionOfTwo<ept i="0">&lt;/c0&gt;</ept> type uses the default iterator type, <bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept>, because it doesn’t define its own <bpt i="2" x="2">&lt;c2&gt;</bpt>makeIterator()<ept i="2">&lt;/c2&gt;</ept> method or <bpt i="3" x="3">&lt;c3&gt;</bpt>Iterator<ept i="3">&lt;/c3&gt;</ept> associated type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CollectionOfTwo<ept i="0">&lt;/c0&gt;</ept>型は省略時のイテレータ型、<bpt i="1" x="1">&lt;c1&gt;</bpt>IndexingIterator<ept i="1">&lt;/c1&gt;</ept>を使います、なぜならそれはそれ独自の<bpt i="2" x="2">&lt;c2&gt;</bpt>makeIterator()<ept i="2">&lt;/c2&gt;</ept>メソッドまたは<bpt i="3" x="3">&lt;c3&gt;</bpt>Iterator<ept i="3">&lt;/c3&gt;</ept>関連型を定義しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol is used for types that have an inherent order, such as numbers and strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルは、本来備わっている順番を持つ型、例えば数や文字列などで使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>ArraySlice<ept i="1">&lt;/c1&gt;</ept> types are not bridged; instances of those types always have a contiguous block of memory as their storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>ArraySlice<ept i="1">&lt;/c1&gt;</ept>型はブリッジされません；それらの型のインスタンスは常に隣接するメモリブロックをそれらのストレージとして持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept> type is a specialized array that always stores its elements in a contiguous region of memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>は、それの要素がメモリの隣接領域に常に格納される特殊化された配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept> protocol declares common arithmetic operations, so you can write functions and algorithms that work on any floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept>プロトコルは通常の算術演算子を宣言します、それであなたは何らかの浮動小数点型上で働く関数およびアルゴリズムを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Index<ept i="0">&lt;/c0&gt;</ept> used for subscripting a <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyFilterCollection<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>LazyFilterCollection<ept i="1">&lt;/c1&gt;</ept>に添え字をつけるために使われる<bpt i="0" x="0">&lt;c0&gt;</bpt>Index<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>IndexingIterator<ept i="0">&lt;/c0&gt;</ept> type is the default iterator for any collection that doesn’t declare its own.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>IndexingIterator<ept i="0">&lt;/c0&gt;</ept>型は、それ独自のものを宣言しないあらゆるコレクションに対する省略時のイテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept> protocol is tightly linked with the <bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept>プロトコルは、<bpt i="1" x="1">&lt;c1&gt;</bpt>Sequence<ept i="1">&lt;/c1&gt;</ept>プロトコルときつく結び付けられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept> used by <bpt i="1" x="1">&lt;c1&gt;</bpt>MapSequence<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>MapCollection<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>MapSequence<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>MapCollection<ept i="2">&lt;/c2&gt;</ept>によって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept> protocol allows changing the values of a collection’s elements but not the length of the collection itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルは、コレクションのもつ要素の値の変更を可能にします、しかしコレクション自体の長さはそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept> protocol uses a raw value that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>BitwiseOperations<ept i="1">&lt;/c1&gt;</ept> to provide mathematical set operations like <bpt i="2" x="2">&lt;c2&gt;</bpt>union(_:)<ept i="2">&lt;/c2&gt;</ept>, <bpt i="3" x="3">&lt;c3&gt;</bpt>intersection(_:)<ept i="3">&lt;/c3&gt;</ept> and <bpt i="4" x="4">&lt;c4&gt;</bpt>contains(_:)<ept i="4">&lt;/c4&gt;</ept> with O(1) performance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept>プロトコルは、<bpt i="1" x="1">&lt;c1&gt;</bpt>BitwiseOperations<ept i="1">&lt;/c1&gt;</ept>に準拠する生の値を使うことで、<bpt i="2" x="2">&lt;c2&gt;</bpt>union(_:)<ept i="2">&lt;/c2&gt;</ept>、<bpt i="3" x="3">&lt;c3&gt;</bpt>intersection(_:)<ept i="3">&lt;/c3&gt;</ept>、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>contains(_:)<ept i="4">&lt;/c4&gt;</ept>のような数学的集合演算をO(1)の性能で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> type is an enumeration with two cases.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>型は、２つのケース節を持つ列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept> protocol adds further constraints on the associated <bpt i="1" x="1">&lt;c1&gt;</bpt>Indices<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>SubSequence<ept i="2">&lt;/c2&gt;</ept> types, but otherwise imposes no additional requirements over the <bpt i="3" x="3">&lt;c3&gt;</bpt>BidirectionalCollection<ept i="3">&lt;/c3&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RandomAccessCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルは、一層の制約を関連<bpt i="1" x="1">&lt;c1&gt;</bpt>Indices<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>SubSequence<ept i="2">&lt;/c2&gt;</ept>型に加えます、しかしそれ以外では<bpt i="3" x="3">&lt;c3&gt;</bpt>BidirectionalCollection<ept i="3">&lt;/c3&gt;</ept>プロトコルを超える追加要件は課されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept> protocol is seen mainly in two categories of types: enumerations with raw value types and option sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept>プロトコルが主に見られるのは、２つの部類の型：列挙で生の値型を持つものとオプションセットにおいてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>) unless documented otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルは要素アクセスについて他の要件を設けません、それでシーケンスを辿っていくおきまりの仕事はO(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)と考えるべきです、そうでないと文書化されるのでない限り。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルは、準拠する型に関して、それらが反復によって破壊的に消費されることになるかについて要件を設けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルは、シーケンスのもつ値への順次的なアクセスを頼りにするような多くの一般的な演算に対して省略時の実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept> types each handle array literals in their own way to create new instances.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept>型は、それぞれ配列リテラルをそれら独自の方法で取り扱って、新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>StreetAddress<ept i="0">&lt;/c0&gt;</ept> type now conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>StreetAddress<ept i="0">&lt;/c0&gt;</ept>型は、今や<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept> types conform to the <bpt i="2" x="2">&lt;c2&gt;</bpt>ExpressibleByStringLiteral<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept>型は、<bpt i="2" x="2">&lt;c2&gt;</bpt>ExpressibleByStringLiteral<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>UnicodeScalar<ept i="3">&lt;/c3&gt;</ept> types all conform to the <bpt i="4" x="4">&lt;c4&gt;</bpt>ExpressibleByUnicodeScalarLiteral<ept i="4">&lt;/c4&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>UnicodeScalar<ept i="3">&lt;/c3&gt;</ept>型は、すべて<bpt i="4" x="4">&lt;c4&gt;</bpt>ExpressibleByUnicodeScalarLiteral<ept i="4">&lt;/c4&gt;</ept>プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept> types conform to the <bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByExtendedGraphemeClusterLiteral<ept i="3">&lt;/c3&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>StaticString<ept i="1">&lt;/c1&gt;</ept>、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept>型は、<bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByExtendedGraphemeClusterLiteral<ept i="3">&lt;/c3&gt;</ept>プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF16View<ept i="0">&lt;/c0&gt;</ept> in which to find the new position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それにおいて新しい位置を見つける<bpt i="0" x="0">&lt;c0&gt;</bpt>UTF16View<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept> in which to find the new position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それにおいて新しい位置を見つける<bpt i="0" x="0">&lt;c0&gt;</bpt>UTF8View<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeCodec<ept i="0">&lt;/c0&gt;</ept> protocol declares methods that decode code unit sequences into Unicode scalar values and encode Unicode scalar values into code unit sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeCodec<ept i="0">&lt;/c0&gt;</ept>プロトコルは、コード単位シーケンスをユニコードスカラー値へデコードする、ユニコードスカラー値をコード単位シーケンスへエンコードするメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> type, representing a single Unicode scalar value, is the element type of a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalars<ept i="1">&lt;/c1&gt;</ept> collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単一のユニコードスカラー値を表している、<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>型は、ある文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalars<ept i="1">&lt;/c1&gt;</ept>コレクションの要素型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>adding(_:)<ept i="0">&lt;/c0&gt;</ept> method implements the addition operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>adding(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される加算演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>adjective<ept i="0">&lt;/c0&gt;</ept> constant is created by calling this initializer with a slice of the <bpt i="1" x="1">&lt;c1&gt;</bpt>picnicGuest.unicodeScalars<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>adjective<ept i="0">&lt;/c0&gt;</ept>定数は、このイニシャライザを<bpt i="1" x="1">&lt;c1&gt;</bpt>picnicGuest.unicodeScalars<ept i="1">&lt;/c1&gt;</ept>ビューのスライスとともに呼び出すことによって作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>adjective<ept i="0">&lt;/c0&gt;</ept> constant is created by calling this initializer with a slice of the <bpt i="1" x="1">&lt;c1&gt;</bpt>picnicGuest.utf16<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>adjective<ept i="0">&lt;/c0&gt;</ept>定数は、このイニシャライザを<bpt i="1" x="1">&lt;c1&gt;</bpt>picnicGuest.utf16<ept i="1">&lt;/c1&gt;</ept>ビューのスライスとともに呼び出すことによって作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>adjective<ept i="0">&lt;/c0&gt;</ept> constant is created by calling this initializer with a slice of the <bpt i="1" x="1">&lt;c1&gt;</bpt>picnicGuest.utf8<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>adjective<ept i="0">&lt;/c0&gt;</ept>定数は、このイニシャライザを<bpt i="1" x="1">&lt;c1&gt;</bpt>picnicGuest.utf8<ept i="1">&lt;/c1&gt;</ept>ビューのスライスとともに呼び出すことによって作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept> static property is the identity element for bitwise OR and XOR operations and the fixed point for bitwise AND operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>allZeros<ept i="0">&lt;/c0&gt;</ept>静的プロパティは、ビット単位ORおよびXOR演算に対する単位元、そしてビット単位AND演算に対する不動点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept> property can be cast back to its original type using one of the casting operators (<bpt i="1" x="1">&lt;c1&gt;</bpt>as?<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>as!<ept i="2">&lt;/c2&gt;</ept>, or <bpt i="3" x="3">&lt;c3&gt;</bpt>as<ept i="3">&lt;/c3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>プロパティは、それの元の型へキャストされて戻されることがキャスト演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>as?<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>as!<ept i="2">&lt;/c2&gt;</ept>、または<bpt i="3" x="3">&lt;c3&gt;</bpt>as<ept i="3">&lt;/c3&gt;</ept>）を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>divided(by:)<ept i="0">&lt;/c0&gt;</ept> method implements the division operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>divided(by:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される除算演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> property of an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeBufferPointer<ept i="1">&lt;/c1&gt;</ept> instance is always identical to <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeBufferPointer<ept i="1">&lt;/c1&gt;</ept>インスタンスの<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>プロパティは、常に<bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> property of an <bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutableBufferPointer<ept i="1">&lt;/c1&gt;</ept> instance is always identical to <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>UnsafeMutableBufferPointer<ept i="1">&lt;/c1&gt;</ept>インスタンスの<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>プロパティは、常に<bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>exponent<ept i="0">&lt;/c0&gt;</ept> property has the following edge cases:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>exponent<ept i="0">&lt;/c0&gt;</ept>プロパティは、次の境界事例を持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>firstSpace<ept i="0">&lt;/c0&gt;</ept> constant is an index into the <bpt i="1" x="1">&lt;c1&gt;</bpt>text.characters<ept i="1">&lt;/c1&gt;</ept> collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>firstSpace<ept i="0">&lt;/c0&gt;</ept>定数は、<bpt i="1" x="1">&lt;c1&gt;</bpt>text.characters<ept i="1">&lt;/c1&gt;</ept>コレクションに対するあるインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>getDefaultValue(_:)<ept i="0">&lt;/c0&gt;</ept> function uses optional chaining to safely call the implicitly unwrapped class method on <bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>getDefaultValue(_:)<ept i="0">&lt;/c0&gt;</ept>関数は、オプショナル連鎖を使って、暗黙的にアンラップされるクラスメソッドを<bpt i="1" x="1">&lt;c1&gt;</bpt>c<ept i="1">&lt;/c1&gt;</ept>上で安全に呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>hashValue<ept i="0">&lt;/c0&gt;</ept> property in this example combines the hash values of a grid point’s <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>y<ept i="2">&lt;/c2&gt;</ept> values using the bitwise XOR operator (<bpt i="3" x="3">&lt;c3&gt;</bpt>^<ept i="3">&lt;/c3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例における<bpt i="0" x="0">&lt;c0&gt;</bpt>hashValue<ept i="0">&lt;/c0&gt;</ept>プロパティは、ある格子点の<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>y<ept i="2">&lt;/c2&gt;</ept>値のハッシュ値をビット単位の排他的論理和演算子（<bpt i="3" x="3">&lt;c3&gt;</bpt>^<ept i="3">&lt;/c3&gt;</ept>）を使って結合します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>invalidInput<ept i="0">&lt;/c0&gt;</ept> case includes the invalid character as an associated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>invalidInput<ept i="0">&lt;/c0&gt;</ept>ケース節は、無効な文字を関連値として含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>isEqual(to:)<ept i="0">&lt;/c0&gt;</ept> method implements the equality predicate defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isEqual(to:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される同等性述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>isKnownUniquelyReferenced(_:)<ept i="0">&lt;/c0&gt;</ept> function is useful for implementating the copy-on-write optimization for the deep storage of value types:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isKnownUniquelyReferenced(_:)<ept i="0">&lt;/c0&gt;</ept>関数は、値型の深い貯蔵に対してコピーオンライト最適化を実装するのに便利です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>isLess(than:)<ept i="0">&lt;/c0&gt;</ept> method implements the less-than predicate defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isLess(than:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される「より少ない」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>isLessThanOrEqualTo(_:)<ept i="0">&lt;/c0&gt;</ept> method implements the less-than-or-equal predicate defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isLessThanOrEqualTo(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される「より少ないか等しい」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>isTotallyOrdered(belowOrEqualTo:)<ept i="0">&lt;/c0&gt;</ept> method implements the total order relation as defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isTotallyOrdered(belowOrEqualTo:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、全順序関係をIEEE 754仕様によって定義されるとおりに実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>isZero<ept i="0">&lt;/c0&gt;</ept> property of a value <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept> when <bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept> represents either <bpt i="4" x="4">&lt;c4&gt;</bpt>-0.0<ept i="4">&lt;/c4&gt;</ept> or <bpt i="5" x="5">&lt;c5&gt;</bpt>+0.0<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>の<bpt i="0" x="0">&lt;c0&gt;</bpt>isZero<ept i="0">&lt;/c0&gt;</ept>プロパティは、<bpt i="3" x="3">&lt;c3&gt;</bpt>x<ept i="3">&lt;/c3&gt;</ept>が<bpt i="4" x="4">&lt;c4&gt;</bpt>-0.0<ept i="4">&lt;/c4&gt;</ept>または<bpt i="5" x="5">&lt;c5&gt;</bpt>+0.0<ept i="5">&lt;/c5&gt;</ept>のどちらかである場合に<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>joined<ept i="0">&lt;/c0&gt;</ept> method is always lazy, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>joined<ept i="0">&lt;/c0&gt;</ept>メソッドは常に遅延です、しかしそれの結果に適用されるアルゴリズム上に、遅延性を暗黙的に授けられません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept> method returns another custom type, an iterator named <bpt i="1" x="1">&lt;c1&gt;</bpt>CountdownIterator<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>makeIterator()<ept i="0">&lt;/c0&gt;</ept>メソッドは、別のあつらえの型、<bpt i="1" x="1">&lt;c1&gt;</bpt>CountdownIterator<ept i="1">&lt;/c1&gt;</ept>と名前をつけられるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>maximum<ept i="0">&lt;/c0&gt;</ept> method implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>maxNum<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maximum<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>maxNum<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>maximumMagnitude<ept i="0">&lt;/c0&gt;</ept> method implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>maxNumMag<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maximumMagnitude<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>maxNumMag<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>minimum<ept i="0">&lt;/c0&gt;</ept> method implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>minNum<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>minimum<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>minNum<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>minimumMagnitude<ept i="0">&lt;/c0&gt;</ept> method implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>minNumMag<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>minimumMagnitude<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>minNumMag<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>multiplied(by:)<ept i="0">&lt;/c0&gt;</ept> method implements the multiplication operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>multiplied(by:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される乗算演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>nextPartialResult<ept i="0">&lt;/c0&gt;</ept> closure is called sequentially with an accumulating value initialized to <bpt i="1" x="1">&lt;c1&gt;</bpt>initialResult<ept i="1">&lt;/c1&gt;</ept> and each element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nextPartialResult<ept i="0">&lt;/c0&gt;</ept>クロージャは<bpt i="1" x="1">&lt;c1&gt;</bpt>initialResult<ept i="1">&lt;/c1&gt;</ept>に初期化された蓄積値およびシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>nextPartialResult<ept i="0">&lt;/c0&gt;</ept> closure is called with the initial result and the first element of <bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept>, returning the sum: <bpt i="2" x="2">&lt;c2&gt;</bpt>1<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nextPartialResult<ept i="0">&lt;/c0&gt;</ept>クロージャが初期結果と<bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept>の最初の要素とともに呼び出されて、その合計：<bpt i="2" x="2">&lt;c2&gt;</bpt>1<ept i="2">&lt;/c2&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers<ept i="0">&lt;/c0&gt;</ept> array is now arranged in two partitions.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>numbers<ept i="0">&lt;/c0&gt;</ept>配列は今や２つの区分に整頓されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>partition(by:)<ept i="0">&lt;/c0&gt;</ept> method reorders the elements of the collection and returns a pivot index that satisfies this condition, using the given predicate to determine the relative order of any two elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>partition(by:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、何らかの２つの要素の相対順序を決定するために与えられた述部を使って、コレクションの要素を再配置します、そしてこの状態に当てはまるピボットインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>reduce1(_:)<ept i="0">&lt;/c0&gt;</ept> method makes certain kinds of sequence operations simpler.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>reduce1(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、特定の種類のシーケンス演算をより簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>responseMessages<ept i="0">&lt;/c0&gt;</ept> variable is inferred to have type <bpt i="1" x="1">&lt;c1&gt;</bpt>[Int: String]<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>responseMessages<ept i="0">&lt;/c0&gt;</ept>変数は、型<bpt i="1" x="1">&lt;c1&gt;</bpt>[Int: String]<ept i="1">&lt;/c1&gt;</ept>を持つと推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>reversed()<ept i="0">&lt;/c0&gt;</ept> method is always lazy when applied to a collection with bidirectional indices, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x.reversed()<ept i="0">&lt;/c0&gt;</ept>メソッドは、双方向性のインデックスを持つコレクションに適用される時は常に遅延です、しかしそれの結果に適用されるアルゴリズムに暗黙的に遅延性を授けることはしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>round()<ept i="0">&lt;/c0&gt;</ept> method uses the <bpt i="1" x="1">&lt;c1&gt;</bpt>.toNearestOrAwayFromZero<ept i="1">&lt;/c1&gt;</ept> rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>round()<ept i="0">&lt;/c0&gt;</ept>メソッドは<bpt i="1" x="1">&lt;c1&gt;</bpt>.toNearestOrAwayFromZero<ept i="1">&lt;/c1&gt;</ept>丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>rounded()<ept i="0">&lt;/c0&gt;</ept> method uses the <bpt i="1" x="1">&lt;c1&gt;</bpt>.toNearestOrAwayFromZero<ept i="1">&lt;/c1&gt;</ept> rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>rounded()<ept i="0">&lt;/c0&gt;</ept>メソッドは<bpt i="1" x="1">&lt;c1&gt;</bpt>.toNearestOrAwayFromZero<ept i="1">&lt;/c1&gt;</ept>丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>sign<ept i="0">&lt;/c0&gt;</ept> property is <bpt i="1" x="1">&lt;c1&gt;</bpt>.minus<ept i="1">&lt;/c1&gt;</ept> if the value’s signbit is set, and <bpt i="2" x="2">&lt;c2&gt;</bpt>.plus<ept i="2">&lt;/c2&gt;</ept> otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>sign<ept i="0">&lt;/c0&gt;</ept>プロパティは、値のsignbitがセットされるならば<bpt i="1" x="1">&lt;c1&gt;</bpt>.minus<ept i="1">&lt;/c1&gt;</ept>です、そしてそうでないなら<bpt i="2" x="2">&lt;c2&gt;</bpt>.plus<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>significandBitPattern<ept i="0">&lt;/c0&gt;</ept> property does not include the leading integral bit of the significand, even for types like <bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept> that store it explicitly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>significandBitPattern<ept i="0">&lt;/c0&gt;</ept>プロパティは、仮数の先頭整数ビットを含みません、それを明示的に格納する<bpt i="1" x="1">&lt;c1&gt;</bpt>Float80<ept i="1">&lt;/c1&gt;</ept>のような型に対してさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>sink<ept i="0">&lt;/c0&gt;</ept> closure is called with each resulting UTF-32 code unit as the function iterates over its input.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>sink<ept i="0">&lt;/c0&gt;</ept>クロージャは、結果UTF-32コードユニットそれぞれで、それのinputに反復していく関数として呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>subtracting(_:)<ept i="0">&lt;/c0&gt;</ept> method implements the addition operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>subtracting(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、IEEE 754仕様によって定義される減算演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>ulpOfOne<ept i="0">&lt;/c0&gt;</ept> constant corresponds to the C macros <bpt i="1" x="1">&lt;c1&gt;</bpt>FLT_EPSILON<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>DBL_EPSILON<ept i="2">&lt;/c2&gt;</ept>, and others with a similar purpose.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ulpOfOne<ept i="0">&lt;/c0&gt;</ept>定数は、Cマクロ<bpt i="1" x="1">&lt;c1&gt;</bpt>FLT_EPSILON<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>DBL_EPSILON<ept i="2">&lt;/c2&gt;</ept>、そして類似した目的を持つ他のものに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> view’s elements comprise each Unicode scalar value in the <bpt i="1" x="1">&lt;c1&gt;</bpt>cafe<ept i="1">&lt;/c1&gt;</ept> string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>ビューのもつ各要素は、<bpt i="1" x="1">&lt;c1&gt;</bpt>cafe<ept i="1">&lt;/c1&gt;</ept>文字列の中の各ユニコードスカラー値からなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>unsafelyUnwrapped<ept i="0">&lt;/c0&gt;</ept> property is recommended over calling the <bpt i="1" x="1">&lt;c1&gt;</bpt>unsafeBitCast(_:)<ept i="1">&lt;/c1&gt;</ept> function because the property is more restrictive and because accessing the property still performs checking in debug builds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>unsafelyUnwrapped<ept i="0">&lt;/c0&gt;</ept>プロパティは、<bpt i="1" x="1">&lt;c1&gt;</bpt>unsafeBitCast(_:)<ept i="1">&lt;/c1&gt;</ept>関数呼び出し全般で推奨されます、なぜならこのプロパティはより制限的であるから、そしてこのプロパティにアクセスすることはデバッグビルドにおいて依然として確認を実行するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>unsafelyUnwrapped<ept i="0">&lt;/c0&gt;</ept> property provides the same value as the forced unwrap operator (postfix <bpt i="1" x="1">&lt;c1&gt;</bpt>!<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>unsafelyUnwrapped<ept i="0">&lt;/c0&gt;</ept>プロパティは、強制アンラップ演算子（後置<bpt i="1" x="1">&lt;c1&gt;</bpt>!<ept i="1">&lt;/c1&gt;</ept>）と同じ値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>withCString(_:)<ept i="0">&lt;/c0&gt;</ept> method ensures that the sequence’s lifetime extends through the execution of <bpt i="1" x="1">&lt;c1&gt;</bpt>f<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>withCString(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドは、シーケンスの生涯が<bpt i="1" x="1">&lt;c1&gt;</bpt>f<ept i="1">&lt;/c1&gt;</ept>の実行の終わりまで延びることを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>String(describing:)<ept i="1">&lt;/c1&gt;</ept> initializer is the preferred way to convert an instance of <bpt i="2" x="2">&lt;e2&gt;</bpt>any<ept i="2">&lt;/e2&gt;</ept> type to a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>String(describing:)<ept i="1">&lt;/c1&gt;</ept>イニシャライザは、<bpt i="2" x="2">&lt;e2&gt;</bpt>あらゆる<ept i="2">&lt;/e2&gt;</ept>型のインスタンスをある文字列へ変換する好ましい方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> type bridges with the Objective-C class <bpt i="2" x="2">&lt;c2&gt;</bpt>NSString<ept i="2">&lt;/c2&gt;</ept> and offers interoperability with C functions that works with strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>型は、Objective-Cクラス<bpt i="2" x="2">&lt;c2&gt;</bpt>NSString<ept i="2">&lt;/c2&gt;</ept>とブリッジします、そしてC関数で文字列を扱うものと相互運用を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>apple<ept i="1">&lt;/c1&gt;</ept> string contains a single emoji character made up of a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>apple<ept i="1">&lt;/c1&gt;</ept>文字列は、UTF-16でエンコードされる場合あるサロゲートペアから作り上げられる単一のemoji文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>binade<ept i="1">&lt;/c1&gt;</ept> property is a member of the same binade as this value, but with a unit significand.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>binade<ept i="1">&lt;/c1&gt;</ept>プロパティは、この値と同じbinadeに属するあるメンバです、しかしある単位仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>makeIterator()<ept i="1">&lt;/c1&gt;</ept> method is provided as a default implementation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>makeIterator()<ept i="1">&lt;/c1&gt;</ept>メソッドは、省略時の実装として提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>rawValue<ept i="1">&lt;/c1&gt;</ept> property must be of a type that conforms to the <bpt i="2" x="2">&lt;c2&gt;</bpt>BitwiseOperations<ept i="2">&lt;/c2&gt;</ept> protocol, such as <bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept> or <bpt i="4" x="4">&lt;c4&gt;</bpt>UInt8<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>rawValue<ept i="1">&lt;/c1&gt;</ept>プロパティは、<bpt i="2" x="2">&lt;c2&gt;</bpt>BitwiseOperations<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠する型の１つでなければなりません、例えば<bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept>または<bpt i="4" x="4">&lt;c4&gt;</bpt>UInt8<ept i="4">&lt;/c4&gt;</ept>など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;c1&gt;</bpt>strncmp<ept i="1">&lt;/c1&gt;</ept> function takes two <bpt i="2" x="2">&lt;c2&gt;</bpt>const char*<ept i="2">&lt;/c2&gt;</ept> pointers and an integer specifying the number of characters to compare.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>strncmp<ept i="1">&lt;/c1&gt;</ept>関数は、２つの<bpt i="2" x="2">&lt;c2&gt;</bpt>const char*<ept i="2">&lt;/c2&gt;</ept>ポインタと、比較する文字数を指定している整数を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>..&lt;<ept i="2">&lt;/c2&gt;</ept> operator creates a range that doesn’t include the upper bound, so it’s always safe to use with <bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>..&lt;<ept i="2">&lt;/c2&gt;</ept>演算子は上方の境界を含まないある範囲を作成します、それでそれは常に<bpt i="3" x="3">&lt;c3&gt;</bpt>endIndex<ept i="3">&lt;/c3&gt;</ept>と使うのに安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>Countdown<ept i="2">&lt;/c2&gt;</ept> structure’s definition is short: It contains only the starting count and the <bpt i="3" x="3">&lt;c3&gt;</bpt>makeIterator()<ept i="3">&lt;/c3&gt;</ept> method required by the <bpt i="4" x="4">&lt;c4&gt;</bpt>Sequence<ept i="4">&lt;/c4&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Countdown<ept i="2">&lt;/c2&gt;</ept>構造体の定義は短いです：それはただ数え始めと<bpt i="4" x="4">&lt;c4&gt;</bpt>Sequence<ept i="4">&lt;/c4&gt;</ept>プロトコルによって要求される<bpt i="3" x="3">&lt;c3&gt;</bpt>makeIterator()<ept i="3">&lt;/c3&gt;</ept>メソッドだけを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>CountdownIterator<ept i="2">&lt;/c2&gt;</ept> type keeps track of both the <bpt i="3" x="3">&lt;c3&gt;</bpt>Countdown<ept i="3">&lt;/c3&gt;</ept> sequence that it’s iterating and the number of times it has returned a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>CountdownIterator<ept i="2">&lt;/c2&gt;</ept>型は、それが反復している<bpt i="3" x="3">&lt;c3&gt;</bpt>Countdown<ept i="3">&lt;/c3&gt;</ept>シーケンスそしてそれが値を返した回数の両方の情報を得続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>DictionaryLiteral<ept i="2">&lt;/c2&gt;</ept> instance preserves the order of the elements as passed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>DictionaryLiteral<ept i="2">&lt;/c2&gt;</ept>インスタンスは、要素の順番を渡された通りに保全します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept> protocol inherits from the <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept> protocol, so you must also add an equal-to operator (<bpt i="4" x="4">&lt;c4&gt;</bpt>==<ept i="4">&lt;/c4&gt;</ept>) function for your custom type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept>プロトコルは、<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>プロトコルから継承します、それであなたはまた同等演算子（<bpt i="4" x="4">&lt;c4&gt;</bpt>==<ept i="4">&lt;/c4&gt;</ept>）関数をあなたのあつらえの型に加える必要もまたあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>Key<ept i="2">&lt;/c2&gt;</ept> type of the dictionary is <bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept>, and the <bpt i="4" x="4">&lt;c4&gt;</bpt>Value<ept i="4">&lt;/c4&gt;</ept> type of the dictionary is <bpt i="5" x="5">&lt;c5&gt;</bpt>String<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の<bpt i="2" x="2">&lt;c2&gt;</bpt>Key<ept i="2">&lt;/c2&gt;</ept>型は<bpt i="3" x="3">&lt;c3&gt;</bpt>Int<ept i="3">&lt;/c3&gt;</ept>です、そして辞書の<bpt i="4" x="4">&lt;c4&gt;</bpt>Value<ept i="4">&lt;/c4&gt;</ept>型は<bpt i="5" x="5">&lt;c5&gt;</bpt>String<ept i="5">&lt;/c5&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>formtruncatingRemainder(dividingBy:)<ept i="2">&lt;/c2&gt;</ept> method is always exact.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>formtruncatingRemainder(dividingBy:)<ept i="2">&lt;/c2&gt;</ept>メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>remainder(dividingBy:)<ept i="2">&lt;/c2&gt;</ept> method is always exact.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>remainder(dividingBy:)<ept i="2">&lt;/c2&gt;</ept>メソッドは常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>truncatingRemainder(dividingBy:)<ept i="2">&lt;/c2&gt;</ept> method is always exact.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>truncatingRemainder(dividingBy:)<ept i="2">&lt;/c2&gt;</ept>メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="3" x="3">&lt;c3&gt;</bpt>==<ept i="3">&lt;/c3&gt;</ept> operator is a requirement of the <bpt i="4" x="4">&lt;c4&gt;</bpt>Equatable<ept i="4">&lt;/c4&gt;</ept> protocol, which <bpt i="5" x="5">&lt;c5&gt;</bpt>Comparable<ept i="5">&lt;/c5&gt;</ept> extends—see that protocol’s documentation for more information about equality in Swift.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>==<ept i="3">&lt;/c3&gt;</ept>演算子は、<bpt i="5" x="5">&lt;c5&gt;</bpt>Comparable<ept i="5">&lt;/c5&gt;</ept>が拡張する<bpt i="4" x="4">&lt;c4&gt;</bpt>Equatable<ept i="4">&lt;/c4&gt;</ept>プロトコルの要件です — そのプロトコルの文書をSwiftにおける同等性についてのさらなる情報のために見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="3" x="3">&lt;c3&gt;</bpt>SetAlgebra<ept i="3">&lt;/c3&gt;</ept> protocol is specifically designed to accommodate both kinds of set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>SetAlgebra<ept i="3">&lt;/c3&gt;</ept>プロトコルは、とりわけ両方の種類の集合に配慮するように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="3" x="3">&lt;c3&gt;</bpt>base<ept i="3">&lt;/c3&gt;</ept> property of the slice is equal to <bpt i="4" x="4">&lt;c4&gt;</bpt>singleDigits<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このスライスの<bpt i="3" x="3">&lt;c3&gt;</bpt>base<ept i="3">&lt;/c3&gt;</ept>プロパティは、<bpt i="4" x="4">&lt;c4&gt;</bpt>singleDigits<ept i="4">&lt;/c4&gt;</ept>に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="3" x="3">&lt;c3&gt;</bpt>deinit<ept i="3">&lt;/c3&gt;</ept> of <bpt i="4" x="4">&lt;c4&gt;</bpt>bufferClass<ept i="4">&lt;/c4&gt;</ept> must destroy its stored <bpt i="5" x="5">&lt;c5&gt;</bpt>Header<ept i="5">&lt;/c5&gt;</ept> and any constructed <bpt i="6" x="6">&lt;c6&gt;</bpt>Element<ept i="6">&lt;/c6&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>bufferClass<ept i="3">&lt;/c3&gt;</ept>の<bpt i="4" x="4">&lt;c4&gt;</bpt>deinit<ept i="4">&lt;/c4&gt;</ept>は、それの保存した<bpt i="5" x="5">&lt;c5&gt;</bpt>Header<ept i="5">&lt;/c5&gt;</ept>とあらゆる構成した<bpt i="6" x="6">&lt;c6&gt;</bpt>Element<ept i="6">&lt;/c6&gt;</ept>を破棄しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="4" x="4">&lt;c4&gt;</bpt>^<ept i="4">&lt;/c4&gt;</ept> operator is one way to combine two integer values into a single value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>^<ept i="4">&lt;/c4&gt;</ept>演算子は、２つの整数値を単一の値へ結合する１つの方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;e0&gt;</bpt>exponent<ept i="0">&lt;/e0&gt;</ept> of a floating-point value is the integer part of the logarithm of the value’s magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点値の<bpt i="0" x="0">&lt;e0&gt;</bpt>指数<ept i="0">&lt;/e0&gt;</ept>は、値の規模の対数の整数部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;e1&gt;</bpt>exponent bias<ept i="1">&lt;/e1&gt;</ept> of a type <bpt i="2" x="2">&lt;c2&gt;</bpt>F<ept i="2">&lt;/c2&gt;</ept> can be calculated as the following, where <bpt i="3" x="3">&lt;c3&gt;</bpt>**<ept i="3">&lt;/c3&gt;</ept> is exponentation:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型<bpt i="2" x="2">&lt;c2&gt;</bpt>F<ept i="2">&lt;/c2&gt;</ept>の<bpt i="1" x="1">&lt;e1&gt;</bpt>指数バイアス<ept i="1">&lt;/e1&gt;</ept>は、以下のように計算されます、ここで<bpt i="3" x="3">&lt;c3&gt;</bpt>**<ept i="3">&lt;/c3&gt;</ept>は冪です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Boolean value to negate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>否定するブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘_Bool’ and C++ ‘bool’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Cの「_Bool」およびC++の「bool」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘char’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Cの「char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘double’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「double」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘float’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「float」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘int’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘long long’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘long’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘short’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘signed char’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「signed char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘unsigned char’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「unsigned char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘unsigned int’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「unsigned int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘unsigned long long’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「unsigned long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘unsigned long’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「unsigned long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C ‘unsigned short’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C「unsigned short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C++ ‘wchar_t’ type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C++「wchar_t」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C++11 ‘char16_t’ type, which has UTF-16 encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C++11「char16_t」型、それはUTF-16エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The C++11 ‘char32_t’ type, which has UTF-32 encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>C++11「char32_t」型、それはUTF-32エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The IEEE 754 floating-point classes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>IEEE 754浮動小数点の様々な部類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The IEEE 754 specification defines a <bpt i="0" x="0">&lt;e0&gt;</bpt>canonical<ept i="0">&lt;/e0&gt;</ept>, or preferred, encoding of a floating-point value’s representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>IEEE 754仕様は、ある<bpt i="0" x="0">&lt;e0&gt;</bpt>正準の<ept i="0">&lt;/e0&gt;</ept>、または推奨の、浮動小数点値の表現のエンコーディングを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The NaN values in the <bpt i="0" x="0">&lt;c0&gt;</bpt>tempsCelsius<ept i="0">&lt;/c0&gt;</ept> array are propagated through the conversion and remain NaN in <bpt i="1" x="1">&lt;c1&gt;</bpt>tempsFahrenheit<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>tempsCelsius<ept i="0">&lt;/c0&gt;</ept>配列の中のNaN値は、変換を通して伝播されていき、<bpt i="1" x="1">&lt;c1&gt;</bpt>tempsFahrenheit<ept i="1">&lt;/c1&gt;</ept>においてNaNのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Swift standard library defines a base layer of functionality for writing Swift programs, including:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swift標準ライブラリは、Swiftプログラムを記述するための機能性の基盤層を定義していて、以下を含んでいます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Swift standard library’s text-related types, <bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>, <bpt i="3" x="3">&lt;c3&gt;</bpt>Character<ept i="3">&lt;/c3&gt;</ept>, and <bpt i="4" x="4">&lt;c4&gt;</bpt>UnicodeScalar<ept i="4">&lt;/c4&gt;</ept>, all conform to <bpt i="5" x="5">&lt;c5&gt;</bpt>TextOutputStreamable<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swift標準ライブラリのテキスト関連の型、<bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>、<bpt i="3" x="3">&lt;c3&gt;</bpt>Character<ept i="3">&lt;/c3&gt;</ept>、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>UnicodeScalar<ept i="4">&lt;/c4&gt;</ept>は、すべて<bpt i="5" x="5">&lt;c5&gt;</bpt>TextOutputStreamable<ept i="5">&lt;/c5&gt;</ept>に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The UTF-16 code units of a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view match the elements accessed through indexed <bpt i="1" x="1">&lt;c1&gt;</bpt>NSString<ept i="1">&lt;/c1&gt;</ept> APIs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューのUTF-16コード単位は、<bpt i="1" x="1">&lt;c1&gt;</bpt>NSString<ept i="1">&lt;/c1&gt;</ept> APIでインデックスを使われることでアクセスされる要素と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode code point <bpt i="0" x="0">&lt;c0&gt;</bpt>"\u{301}"<ept i="0">&lt;/c0&gt;</ept> modifies the preceding character to include an accent, so <bpt i="1" x="1">&lt;c1&gt;</bpt>"e\u{301}"<ept i="1">&lt;/c1&gt;</ept> has the same canonical representation as the single Unicode code point <bpt i="2" x="2">&lt;c2&gt;</bpt>"é"<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードコード点<bpt i="0" x="0">&lt;c0&gt;</bpt>"\u{301}"<ept i="0">&lt;/c0&gt;</ept>は、先行する文字を修飾してアクセントを含めます、それで<bpt i="1" x="1">&lt;c1&gt;</bpt>"e\u{301}"<ept i="1">&lt;/c1&gt;</ept>は単一のユニコード点<bpt i="2" x="2">&lt;c2&gt;</bpt>"é"<ept i="2">&lt;/c2&gt;</ept>と同じ正準表現を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode code point to use for the scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このスカラーのために使うユニコードコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode encoding of <bpt i="0" x="0">&lt;c0&gt;</bpt>input<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>input<ept i="0">&lt;/c0&gt;</ept>のユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode encoding of the data referenced by <bpt i="0" x="0">&lt;c0&gt;</bpt>cString<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>cString<ept i="0">&lt;/c0&gt;</ept>によって参照されるデータのユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode scalar value of <bpt i="1" x="1">&lt;e1&gt;</bpt>A<ept i="1">&lt;/e1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>65<ept i="2">&lt;/c2&gt;</ept>, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;e1&gt;</bpt>A<ept i="1">&lt;/e1&gt;</ept>のユニコードスカラー値は<bpt i="2" x="2">&lt;c2&gt;</bpt>65<ept i="2">&lt;/c2&gt;</ept>です、それはUTF-16およびUTF-8両方において単一のコード単位の中にぴったり収まるにの十分に小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode scalar value to convert into a character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>１つの文字へ変換するユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode scalar value to encode.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>エンコードするあるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode scalar’s hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーのもつハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode-safe comparison matches Unicode scalar values rather than the code points used to compose them.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコード安全での比較は、ユニコードスカラー値を比べます、それらを組み立てるのに使われるコード点ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The absence of a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値の不在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection uses.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アクセスされるスライス（切片）は、同じ要素に対して元のコレクションが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アクセスされるスライス（切片）は、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual capacity of the created dictionary is the smallest power of 2 that is greater than or equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>minimumCapacity<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>作成された辞書の実際の容量は、<bpt i="0" x="0">&lt;c0&gt;</bpt>minimumCapacity<ept i="0">&lt;/c0&gt;</ept>より大きいか等しい最も小さい２の冪です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual capacity of the created set will be the smallest power of 2 that is greater than or equal to <bpt i="0" x="0">&lt;c0&gt;</bpt>minimumCapacity<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>作成された集合の実際の容量は、<bpt i="0" x="0">&lt;c0&gt;</bpt>minimumCapacity<ept i="0">&lt;/c0&gt;</ept>より大きいか等しい最も小さい２の冪です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual number of elements that can be stored in this object.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このオブジェクトに格納されることができる要素の実際の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The additive inverse of this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値の加法の逆元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The allowed formats for each of these representations is then as follows:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらの表現のそれぞれに対する許される形式はそれで以下になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The alpha-2 code for The United States is “US”, so its flag character is made up of the Unicode code points <bpt i="0" x="0">&lt;c0&gt;</bpt>"\u{1F1FA}"<ept i="0">&lt;/c0&gt;</ept> (REGIONAL INDICATOR SYMBOL LETTER U) and <bpt i="1" x="1">&lt;c1&gt;</bpt>"\u{1F1F8}"<ept i="1">&lt;/c1&gt;</ept> (REGIONAL INDICATOR SYMBOL LETTER S).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アメリカ合衆国に対するalpha-2コードは、「US」です、それでそれの国旗文字はユニコードコード点<bpt i="0" x="0">&lt;c0&gt;</bpt>"\u{1F1FA}"<ept i="0">&lt;/c0&gt;</ept>（REGIONAL INDICATOR SYMBOL LETTER U）と<bpt i="1" x="1">&lt;c1&gt;</bpt>"\u{1F1F8}"<ept i="1">&lt;/c1&gt;</ept>（REGIONAL INDICATOR SYMBOL LETTER S）から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The array to append to.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>追加先の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The array’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The assignment to the <bpt i="0" x="0">&lt;c0&gt;</bpt>oBreve<ept i="0">&lt;/c0&gt;</ept> constant calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>oBreve<ept i="0">&lt;/c0&gt;</ept>定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The assignment to the <bpt i="0" x="0">&lt;c0&gt;</bpt>snowflake<ept i="0">&lt;/c0&gt;</ept> constant calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>snowflake<ept i="0">&lt;/c0&gt;</ept>定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The associated <bpt i="0" x="0">&lt;c0&gt;</bpt>Bound<ept i="0">&lt;/c0&gt;</ept> type is both the element and index type of <bpt i="1" x="1">&lt;c1&gt;</bpt>CountableRange<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関連<bpt i="0" x="0">&lt;c0&gt;</bpt>Bound<ept i="0">&lt;/c0&gt;</ept>型は、要素およびインデックスの両方とも<bpt i="1" x="1">&lt;c1&gt;</bpt>CountableRange<ept i="1">&lt;/c1&gt;</ept>型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The available number of fractional significand bits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>利用可能な小数の仮数ビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The base to use for the string representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列表現のために使う底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The base, precision, and exponent range are not fixed in any way by this protocol, but it enforces the basic requirements of any IEEE 754 floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基数、精度、そして指数範囲は、このプロトコルによって何らかの方法で固定されません、しかしそれはIEEE 754浮動小数点型どれかの基本要件を強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bit pattern matches the binary interchange format defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビットパターンはIEEE 754仕様書で定義されるバイナリ交換形式に一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bit pattern of the value’s encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の持つエンコーディングのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bit pattern to use for the exponent field of the new value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値の指数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bit pattern to use for the significand field of the new value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値の仮数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bitwise AND operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&amp;<ept i="0">&lt;/c0&gt;</ept>) returns a value that has each bit set to <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> where <bpt i="2" x="2">&lt;e2&gt;</bpt>both<ept i="2">&lt;/e2&gt;</ept> of its arguments had that bit set to <bpt i="3" x="3">&lt;c3&gt;</bpt>1<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のAND（論理積）演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&amp;<ept i="0">&lt;/c0&gt;</ept>）は、それの引数の<bpt i="2" x="2">&lt;e2&gt;</bpt>両方<ept i="2">&lt;/e2&gt;</ept>がそのビットを<bpt i="3" x="3">&lt;c3&gt;</bpt>1<ept i="3">&lt;/c3&gt;</ept>に設定したところの各ビットを<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>に設定するある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bitwise NOT operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>~<ept i="0">&lt;/c0&gt;</ept>) is a prefix operator that returns a value in which all the bits of its argument are flipped: Bits that are <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> in the argument are <bpt i="2" x="2">&lt;c2&gt;</bpt>0<ept i="2">&lt;/c2&gt;</ept> in the result, and bits that are <bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept> in the argument are <bpt i="4" x="4">&lt;c4&gt;</bpt>1<ept i="4">&lt;/c4&gt;</ept> in the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のNOT演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>~<ept i="0">&lt;/c0&gt;</ept>）は前置演算子で、それの引数のビットすべてがひっくり返されるある値を返します：引数において<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>であるビットは結果において<bpt i="2" x="2">&lt;c2&gt;</bpt>0<ept i="2">&lt;/c2&gt;</ept>になります、そして引数において<bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept>であるビットは結果において<bpt i="4" x="4">&lt;c4&gt;</bpt>1<ept i="4">&lt;/c4&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bitwise NOT operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>~<ept i="0">&lt;/c0&gt;</ept>) is a prefix operator that returns a value where all the bits of its argument are flipped: Bits that are <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> in the argument are <bpt i="2" x="2">&lt;c2&gt;</bpt>0<ept i="2">&lt;/c2&gt;</ept> in the result, and bits that are <bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept> in the argument are <bpt i="4" x="4">&lt;c4&gt;</bpt>1<ept i="4">&lt;/c4&gt;</ept> in the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のNOT（論理否定）演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>~<ept i="0">&lt;/c0&gt;</ept>）は、前置演算子で、それの引数のビットすべてがひっくり返されるある値を返します：引数において<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>であるビットは結果において<bpt i="2" x="2">&lt;c2&gt;</bpt>0<ept i="2">&lt;/c2&gt;</ept>になります、そして引数において<bpt i="3" x="3">&lt;c3&gt;</bpt>0<ept i="3">&lt;/c3&gt;</ept>であるビットは結果において<bpt i="4" x="4">&lt;c4&gt;</bpt>1<ept i="4">&lt;/c4&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bitwise OR operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>|<ept i="0">&lt;/c0&gt;</ept>) returns a value that has each bit set to <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> where <bpt i="2" x="2">&lt;e2&gt;</bpt>one or both<ept i="2">&lt;/e2&gt;</ept> of its arguments had that bit set to <bpt i="3" x="3">&lt;c3&gt;</bpt>1<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のOR（論理和）演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>|<ept i="0">&lt;/c0&gt;</ept>）は、それの引数の<bpt i="2" x="2">&lt;e2&gt;</bpt>一方または両方<ept i="2">&lt;/e2&gt;</ept>がそのビットを<bpt i="3" x="3">&lt;c3&gt;</bpt>1<ept i="3">&lt;/c3&gt;</ept>に設定したところの各ビットを<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>に設定するある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bitwise XOR operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>^<ept i="0">&lt;/c0&gt;</ept>), or exclusive OR operator, returns a value that has each bit set to <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> where <bpt i="2" x="2">&lt;e2&gt;</bpt>one or the other but not both<ept i="2">&lt;/e2&gt;</ept> of its operators has that bit set to <bpt i="3" x="3">&lt;c3&gt;</bpt>1<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビット単位のXOR演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>^<ept i="0">&lt;/c0&gt;</ept>）、または排他的OR演算子は、それの演算子の<bpt i="2" x="2">&lt;e2&gt;</bpt>一方または他方しかし両方ではなく<ept i="2">&lt;/e2&gt;</ept>がビットを<bpt i="3" x="3">&lt;c3&gt;</bpt>1<ept i="3">&lt;/c3&gt;</ept>に設定するところの各ビットを<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>に設定するある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bound type of the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の境界型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bounds of the range must be valid indices of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の境界は、配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bounds of the range must be valid indices of the character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲の境界は、文字ビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bounds of the range must be valid indices of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲の境界は、コレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bounds of the range must be valid indices of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bounds of the range must be valid indices of the view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲の境界は、ビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The bounds of the result are always limited to the bounds of <bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果の領域は、常に<bpt i="0" x="0">&lt;c0&gt;</bpt>limits<ept i="0">&lt;/c0&gt;</ept>の領域に制限されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The call to <bpt i="0" x="0">&lt;c0&gt;</bpt>animals.makeIterator()<ept i="0">&lt;/c0&gt;</ept> returns an instance of the array’s iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>animals.makeIterator()<ept i="0">&lt;/c0&gt;</ept>への呼び出しは、配列のもつイテレータの１つのインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The call to <bpt i="1" x="1">&lt;c1&gt;</bpt>index(where:)<ept i="1">&lt;/c1&gt;</ept> in the following example must traverse the whole collection to make sure that no element matches the given predicate:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例における<bpt i="1" x="1">&lt;c1&gt;</bpt>index(where:)<ept i="1">&lt;/c1&gt;</ept>に対する呼び出しは、コレクション全体を辿っていって、与えられた条件に合う要素がないことを確実にする必要があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The case-sensitive comparison will only match strings whose corresponding characters have the same case.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>大文字小文字考慮での比較は、対応する文字の大文字小文字が同じである文字列同士のみが一致することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The character that was removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除された文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The character to append to the character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字ビューに追加されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The character to append to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列に追加されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The character to convert to a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列へと変換されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The character’s hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その文字の持つハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The class of the object used for storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ストレージのために使われるオブジェクトのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The classification of this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値の分類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The closure is called again repeatedly with the previous call’s return value and each element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クロージャは、前の呼び出しの戻り値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The code point to use for the scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このスカラーのために使うコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The code sample below declares a dictionary called <bpt i="1" x="1">&lt;c1&gt;</bpt>interestingNumbers<ept i="1">&lt;/c1&gt;</ept> with string keys and values that are integer arrays, then sorts each array in-place in descending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下のコード見本は、<bpt i="1" x="1">&lt;c1&gt;</bpt>interestingNumbers<ept i="1">&lt;/c1&gt;</ept>と呼ばれる辞書を文字列キーと整数配列である値で宣言します、それから各配列をその場で降順にソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The code units of that buffer match the code units in the string’s <bpt i="4" x="4">&lt;c4&gt;</bpt>utf8<ept i="4">&lt;/c4&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このバッファのコード単位は、文字列のもつ<bpt i="4" x="4">&lt;c4&gt;</bpt>utf8<ept i="4">&lt;/c4&gt;</ept>ビューでのコード単位と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The collection being appended to allocates any additional necessary storage to hold the new elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションは追加されることによって、新しい要素を保有するために何らかの追加的に必要なストレージを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The collection must not be empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションは空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The collection to create a view into.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それに対してビューが作成されることになるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The collection to wrap.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ラップされるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The collection’s “past the end” position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの「終わりを過ぎた」位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The common requirements for types that support integer arithmetic.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>整数計算をサポートする型に対する一般要件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The comparison is both case sensitive and Unicode safe.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>比較は、大文字小文字考慮のみならずユニコード安全でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The compiler prevents bridging the <bpt i="7" x="7">&lt;c7&gt;</bpt>moreColors<ept i="7">&lt;/c7&gt;</ept> array, on the other hand, because its <bpt i="8" x="8">&lt;c8&gt;</bpt>Element<ept i="8">&lt;/c8&gt;</ept> type is <bpt i="9" x="9">&lt;c9&gt;</bpt>Optional&lt;String&gt;<ept i="9">&lt;/c9&gt;</ept>, which does <bpt i="10" x="10">&lt;e10&gt;</bpt>not<ept i="10">&lt;/e10&gt;</ept> bridge to a Foundation type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コンパイラは、<bpt i="7" x="7">&lt;c7&gt;</bpt>moreColors<ept i="7">&lt;/c7&gt;</ept>配列をブリッジすることを妨げます、別の見方をすれば、それの<bpt i="8" x="8">&lt;c8&gt;</bpt>Element<ept i="8">&lt;/c8&gt;</ept>型が<bpt i="9" x="9">&lt;c9&gt;</bpt>Optional&lt;String&gt;<ept i="9">&lt;/c9&gt;</ept>であるので、それはFoundation型にブリッジ<bpt i="10" x="10">&lt;e10&gt;</bpt>しません<ept i="10">&lt;/e10&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The condition to test.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>テストする条件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The contiguous memory footprint of <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>の隣接メモリフットプリント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The conversion of <bpt i="0" x="0">&lt;c0&gt;</bpt>p<ept i="0">&lt;/c0&gt;</ept> to a string in the assignment to <bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept> uses the <bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept> type’s <bpt i="3" x="3">&lt;c3&gt;</bpt>description<ept i="3">&lt;/c3&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>への代入における<bpt i="0" x="0">&lt;c0&gt;</bpt>p<ept i="0">&lt;/c0&gt;</ept>の文字列への変換は、<bpt i="2" x="2">&lt;c2&gt;</bpt>Point<ept i="2">&lt;/c2&gt;</ept>型の<bpt i="3" x="3">&lt;c3&gt;</bpt>description<ept i="3">&lt;/c3&gt;</ept>プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The correct approach in Swift is to compare the <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept> value with zero in the <bpt i="1" x="1">&lt;c1&gt;</bpt>while<ept i="1">&lt;/c1&gt;</ept> statement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Swiftにおける正しい取り組みは、<bpt i="1" x="1">&lt;c1&gt;</bpt>while<ept i="1">&lt;/c1&gt;</ept>文において<bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>値を0と比較することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The corresponding Swift type to <bpt i="0" x="0">&lt;c0&gt;</bpt>va_list<ept i="0">&lt;/c0&gt;</ept> in imported C APIs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インポートされたC APIの<bpt i="0" x="0">&lt;c0&gt;</bpt>va_list<ept i="0">&lt;/c0&gt;</ept>に対応するスウィフト型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The corresponding value of the raw type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この生の型の対応している値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The custom mirror for this instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスのためのあつらえのミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default IEEE 754 behavior of operations involving a signaling NaN is to raise the Invalid flag in the floating-point environment and return a quiet NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シグナルNaNを伴う演算の初期状態のIEEE 754挙動は、無効なフラグを浮動小数点環境において上げて、クワイエットNaNを返すことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default implementation of the <bpt i="3" x="3">&lt;c3&gt;</bpt>!=<ept i="3">&lt;/c3&gt;</ept> operator function satisfies this requirement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>!=<ept i="3">&lt;/c3&gt;</ept>演算子関数の省略時の実装は、この要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態は<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時では<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態は<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is a newline (<bpt i="0" x="0">&lt;c0&gt;</bpt>"\n"<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では改行（<bpt i="0" x="0">&lt;c0&gt;</bpt>"\n"<ept i="0">&lt;/c0&gt;</ept>）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is a single space (<bpt i="0" x="0">&lt;c0&gt;</bpt>" "<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、単一の空白（<bpt i="0" x="0">&lt;c0&gt;</bpt>" "<ept i="0">&lt;/c0&gt;</ept>）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is an empty string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the file where <bpt i="1" x="1">&lt;c1&gt;</bpt>assert(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>assert(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the file where <bpt i="1" x="1">&lt;c1&gt;</bpt>assertionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>assertionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the file where <bpt i="1" x="1">&lt;c1&gt;</bpt>fatalError(_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>fatalError(_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the file where <bpt i="1" x="1">&lt;c1&gt;</bpt>precondition(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>precondition(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the file where <bpt i="1" x="1">&lt;c1&gt;</bpt>preconditionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>preconditionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the line number where <bpt i="1" x="1">&lt;c1&gt;</bpt>assert(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>assert(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the line number where <bpt i="1" x="1">&lt;c1&gt;</bpt>assertionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>assertionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the line number where <bpt i="1" x="1">&lt;c1&gt;</bpt>fatalError(_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>fatalError(_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the line number where <bpt i="1" x="1">&lt;c1&gt;</bpt>precondition(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>precondition(_:_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is the line number where <bpt i="1" x="1">&lt;c1&gt;</bpt>preconditionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態では、<bpt i="1" x="1">&lt;c1&gt;</bpt>preconditionFailure(_:file:line:)<ept i="1">&lt;/c1&gt;</ept>が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default memory alignment of <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>の省略時のメモリアラインメント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default separator is an empty string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時のセパレータは空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default type for an otherwise-unconstrained Boolean literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブールリテラルである他は別途制約されない省略時用の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default type for an otherwise-unconstrained Unicode extended grapheme cluster literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別途制約されないユニコード拡張書記素クラスタリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default type for an otherwise-unconstrained floating point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別途制約されない浮動小数点リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default type for an otherwise-unconstrained integer literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別途制約されない整数リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default type for an otherwise-unconstrained string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別途制約されない文字列リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default type for an otherwise-unconstrained unicode scalar literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>別途制約されないユニコードスカラーリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default value is <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の値は<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default value is <bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の値は<bpt i="2" x="2">&lt;c2&gt;</bpt>Int.max<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default value is <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の値は、<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default value is <bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の値は、<bpt i="4" x="4">&lt;c4&gt;</bpt>true<ept i="4">&lt;/c4&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The description property of a conforming type must be a value-preserving representation of the original value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型の説明プロパティは、元の値の値保全表現でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The destination Unicode encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>行き先ユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dictionary literal is made up of one or more key-value pairs, separated by commas and surrounded with square brackets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルは、コンマで区切られて角括弧で囲まれた１つ以上のキー値ペアで構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dictionary’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The difference of this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の隔たり、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The distance between <bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>end<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>start<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>end<ept i="1">&lt;/c1&gt;</ept>の隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The distance between this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>との間の隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The distance between two indexes (always zero).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つのインデックスの間の隔たり（常にゼロ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The distance to advance this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値を前進させる距離。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The distance to offset <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>を補う間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element at the specified index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定されたインデックスでの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element of the set to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除されることになる集合の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element that should be split upon.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それで分離されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element that was removed from the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合から削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to append to the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列に追加されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to append to the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to check for containment.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この要素が含まれるかを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to find in the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスにおいて見つける要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to insert.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>挿入される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to look for in the option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセットにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to remove from the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合から削除されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element to repeat.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>繰り返される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element type of a <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>: a tuple containing an individual key-value pair.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>の要素型：個々のキー値ペアを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element type of a dictionary: a tuple containing an individual key-value pair.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の要素型：個々のキー値ペアを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element type of the option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセットの要素型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The element type of the range; the same type as the range’s bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の要素型；範囲の境界と同じ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements at that index and later indices are shifted back to make room.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのインデックスおよび後のインデックスでの要素は、後ろに移って場所をあけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers<ept i="0">&lt;/c0&gt;</ept> are rearranged so that every element in the subrange before <bpt i="1" x="1">&lt;c1&gt;</bpt>pivot<ept i="1">&lt;/c1&gt;</ept> is ordered before every element in the subrange after.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>numbers<ept i="0">&lt;/c0&gt;</ept>の要素は再整理されて、<bpt i="1" x="1">&lt;c1&gt;</bpt>pivot<ept i="1">&lt;/c1&gt;</ept>の前の下位範囲の全ての要素が、後の下位範囲の全ての要素の前に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view are the code units for the string when encoded in UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューの要素は、UTF-16で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> view are the code units for the string when encoded in UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>ビューの要素は、UTF-8で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the range are the consecutive values from its lower bound up to, and including, its upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲に属する要素は、それの下側の境界の値から上側の境界まで、そしてそれを含めての連続した値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the result are computed lazily, each time they are read, by calling <bpt i="2" x="2">&lt;c2&gt;</bpt>transform<ept i="2">&lt;/c2&gt;</ept> function on a base element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果のそれぞれの要素は遅延に計算されます、毎回それらは、基盤となる要素上で<bpt i="2" x="2">&lt;c2&gt;</bpt>transform<ept i="2">&lt;/c2&gt;</ept>関数を呼び出すことによって読み出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the result are computed on-demand, as the result is used.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果の要素は、要求に応じて、結果が使われるときに計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the resulting array are ordered according to the given predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果の配列の要素は、与えられた述部にしたがって並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the sequence are computed lazily and the sequence may potentially be infinite in length.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスに属する要素らは、遅延に計算されます、そしてこのシーケンスの長さは潜在的に無限大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of the sequence are obtained by invoking <bpt i="0" x="0">&lt;c0&gt;</bpt>next<ept i="0">&lt;/c0&gt;</ept> with a mutable state.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの要素は、 <bpt i="0" x="0">&lt;c0&gt;</bpt>next<ept i="0">&lt;/c0&gt;</ept>をある可変の状態とともに発動することによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of this collection match those accessed through indexed <bpt i="0" x="0">&lt;c0&gt;</bpt>NSString<ept i="0">&lt;/c0&gt;</ept> APIs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの要素は、<bpt i="0" x="0">&lt;c0&gt;</bpt>NSString<ept i="0">&lt;/c0&gt;</ept> APIでインデックスを使ってアクセスされるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of this view are a concatenation of the elements of each collection in the base.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この見方での要素たちは、その基盤の中の各コレクションの要素の連結です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements of this view are a concatenation of the elements of each sequence in the base.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この見方での要素たちは、その基盤の中の各シーケンスのもつ要素の連結です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements to append to the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列に追加する要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements to append to the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらの要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements to use as members of the new set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい集合の要素として使うための要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The elements traversed are the concatenation of those in each segment produced by the base iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辿っていかれる要素は、基盤イテレータによって生成される各セグメント（メモリ管理単位？）におけるそれらの連結です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Int16<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Int32<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Int64<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Int64<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Int8<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt32<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt64<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt64<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt8<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset of type <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>の空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The empty bitset.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のビット集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The encoding to use for the returned bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>返されたバイトに対して使うためのエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>末尾インデックスは、あるコレクションの最後の要素を１つ過ぎた位置を参照します、それでそれはある要素に対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The exact list of search options applied may change over time.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>適用される検索オプションの正確なリストは、時につれ変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The example below uses this subscript to access the characters up to, but not including, the first comma (<bpt i="0" x="0">&lt;c0&gt;</bpt>","<ept i="0">&lt;/c0&gt;</ept>) in the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下の例は、この添え字を使って、文字列の中の最初のコンマ（<bpt i="0" x="0">&lt;c0&gt;</bpt>","<ept i="0">&lt;/c0&gt;</ept>）に至るまで、しかしそれを含めない、いくらかの文字にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The example below uses this subscript to access the scalar values up to, but not including, the first comma (<bpt i="0" x="0">&lt;c0&gt;</bpt>","<ept i="0">&lt;/c0&gt;</ept>) in the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下の例は、この添え字を使って、文字列の中の最初のコンマ（<bpt i="0" x="0">&lt;c0&gt;</bpt>","<ept i="0">&lt;/c0&gt;</ept>）に至るまで、しかしそれを含めない、いくらかのスカラー値にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The example below uses two strings with different forms of the <bpt i="0" x="0">&lt;c0&gt;</bpt>"é"<ept i="0">&lt;/c0&gt;</ept> character—the first uses the composed form and the second uses the decomposed form.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、異なる形式の<bpt i="0" x="0">&lt;c0&gt;</bpt>"é"<ept i="0">&lt;/c0&gt;</ept>文字を持つ２つの文字列を使います—最初は合成形式を使い、そして２番目は分解形式を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The explicit permission to implement further operations lazily applies only in contexts where the sequence is statically known to conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>もっと遅延に演算を実施する明示的な許可は、そこにおいてシーケンスは静的に<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>に準拠することを見分けられる文脈においてのみ適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The exponent of the floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点値の指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The expression to represent.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この式を表現することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The file name to print with <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept> if the assertion fails.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>表明（アサーション）がうまくいかないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>とともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The file name to print with <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept> if the precondition fails.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>前提条件がうまくいかないならば<bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>とともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The file name to print with <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>とともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The final accumulated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最終的に蓄積された値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The final example passes <bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept> for the <bpt i="1" x="1">&lt;c1&gt;</bpt>omittingEmptySubsequences<ept i="1">&lt;/c1&gt;</ept> parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最後の例は<bpt i="0" x="0">&lt;c0&gt;</bpt>false<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>omittingEmptySubsequences<ept i="1">&lt;/c1&gt;</ept>パラメータに対して渡します、それで返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The final example passes <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> for the <bpt i="1" x="1">&lt;c1&gt;</bpt>allowEmptySlices<ept i="1">&lt;/c1&gt;</ept> parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最後の例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>allowEmptySlices<ept i="1">&lt;/c1&gt;</ept>パラメータに渡します、それで返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first and second code units of the pair, designated <bpt i="0" x="0">&lt;e0&gt;</bpt>leading<ept i="0">&lt;/e0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>trailing<ept i="1">&lt;/e1&gt;</ept> surrogates, make up a <bpt i="2" x="2">&lt;e2&gt;</bpt>surrogate pair<ept i="2">&lt;/e2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このペアの最初と２番目のコード単位、<bpt i="0" x="0">&lt;e0&gt;</bpt>先行<ept i="0">&lt;/e0&gt;</ept>および<bpt i="1" x="1">&lt;e1&gt;</bpt>後続<ept i="1">&lt;/e1&gt;</ept>サロゲートと呼ばれるものが、ひとつの<bpt i="2" x="2">&lt;e2&gt;</bpt>サロゲートペア<ept i="2">&lt;/e2&gt;</ept>を作り上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element in the sequence is always <bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept>, and each successive element is the result of invoking <bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept> with the previous element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスでの最初の要素は常に<bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept>です、そして続く要素それぞれは<bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>を前の要素とともに発動することの結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element of a nonempty array is always at index zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でない配列の最初の要素は、常にインデックス０です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element of the collection if the collection is not empty; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが空でないならばコレクションの最初の要素；そうでなければ<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element of the dictionary is not necessarily the first element added.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の最初の要素は、必ずしも追加された最初の要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element of the set is not necessarily the first element added to the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の最初の要素は、必ずしも集合に追加された最初の要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first element to be returned from the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスから返されることになる最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first index where <bpt i="0" x="0">&lt;c0&gt;</bpt>element<ept i="0">&lt;/c0&gt;</ept> is found.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>element<ept i="0">&lt;/c0&gt;</ept>が見つけられたところの最初のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first key-value pair of the dictionary if the dictionary is not empty; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書が空でないならばこの辞書の最初のキー値ペア；そうでなければ、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first match or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if there was no match.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の合致するもの、または合うものがなかったならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first optional value that isn’t <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> stops the chain and becomes the result of the whole expression.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>でない最初のオプショナル値は、連鎖を停止して、式全体の結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first partition, <bpt i="1" x="1">&lt;c1&gt;</bpt>numbers.prefix(upTo: p)<ept i="1">&lt;/c1&gt;</ept>, is made up of the elements that are not greater than 30.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の区分、<bpt i="1" x="1">&lt;c1&gt;</bpt>numbers.prefix(upTo: p)<ept i="1">&lt;/c1&gt;</ept>は、30より大きいものでない要素から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first sequence or collection to zip.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>組み合わされる第１のシーケンスまたはコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first use of <bpt i="2" x="2">&lt;c2&gt;</bpt>split<ept i="2">&lt;/c2&gt;</ept> returns each word that was originally separated by one or more spaces.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>split<ept i="2">&lt;/c2&gt;</ept>の最初の利用は、各単語を返します、それはもともと１つ以上の空白で隔てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The flexible behavior of the <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept> protocol is similar to Objective-C’s <bpt i="1" x="1">&lt;c1&gt;</bpt>id<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept>プロトコルの柔軟な挙動は、Objective-Cのもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>id<ept i="1">&lt;/c1&gt;</ept>型に似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The floating-point types in the standard library are <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept> where available.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリにおける浮動小数点型は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>、そして利用可能なところでは<bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と同じ符号と指数を持つ浮動小数点値、しかし1.0の仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following code encodes a fermata in UTF-16:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下のコードは、フェルマータをUTF-16でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following code encodes a fermata in UTF-32:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下のコードは、フェルマータをUTF-32でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following code encodes a fermata in UTF-8:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下のコードはフェルマータをUTF-8でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following code uses the <bpt i="1" x="1">&lt;c1&gt;</bpt>UTF8<ept i="1">&lt;/c1&gt;</ept> codec to encode a fermata in UTF-8:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下のコードは、<bpt i="1" x="1">&lt;c1&gt;</bpt>UTF8<ept i="1">&lt;/c1&gt;</ept>コーデックを使ってUTF-8でのフェルマータをエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example accesses an element of an array through its subscript to print its value:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、配列のある要素にそれの添え字によってアクセスしてそれの値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example accesses the fourth code unit in both the <bpt i="2" x="2">&lt;c2&gt;</bpt>flowers<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>nsflowers<ept i="3">&lt;/c3&gt;</ept> strings:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="2" x="2">&lt;c2&gt;</bpt>flowers<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>nsflowers<ept i="3">&lt;/c3&gt;</ept>文字列の両方で４番目のコード単位にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example adds a new number to an array of integers:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、ある新しい要素を整数からなる配列へ加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example adds an emoji globe to the end of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は地球絵文字をある文字列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example appends the elements of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Range&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept> instance to an array of integers:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Range&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept>インスタンスからなるいくらかの要素を整数からなる配列に追加します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example builds a customized greeting by using the <bpt i="0" x="0">&lt;c0&gt;</bpt>append(_:)<ept i="0">&lt;/c0&gt;</ept> method:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例はあつらえの挨拶を<bpt i="0" x="0">&lt;c0&gt;</bpt>append(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使うことによって作ります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example calculates the remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、8.625を0.75で割ることの余りを計算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example calculates the truncating remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、8.625を0.75で除算することの切り捨てられる余りを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example calls this initializer with pointers to the contents of two different <bpt i="0" x="0">&lt;c0&gt;</bpt>CChar<ept i="0">&lt;/c0&gt;</ept> arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、このイニシャライザを２つの異なる<bpt i="0" x="0">&lt;c0&gt;</bpt>CChar<ept i="0">&lt;/c0&gt;</ept>配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example calls this method with pointers to the contents of two different <bpt i="0" x="0">&lt;c0&gt;</bpt>CChar<ept i="0">&lt;/c0&gt;</ept> arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、このメソッドを２つの異なる<bpt i="0" x="0">&lt;c0&gt;</bpt>CChar<ept i="0">&lt;/c0&gt;</ept>配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example checks to see if <bpt i="2" x="2">&lt;c2&gt;</bpt>imagePaths<ept i="2">&lt;/c2&gt;</ept> contains any paths in the <bpt i="3" x="3">&lt;c3&gt;</bpt>"/glyphs"<ept i="3">&lt;/c3&gt;</ept> directory:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="2" x="2">&lt;c2&gt;</bpt>imagePaths<ept i="2">&lt;/c2&gt;</ept>が何らかのパスを<bpt i="3" x="3">&lt;c3&gt;</bpt>"/glyphs"<ept i="3">&lt;/c3&gt;</ept>ディレクトリの中に含むかどうかを調べるために検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example compares the date of the first moon landing with the release of David Bowie’s song “Space Oddity”:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、最初の月面着陸の日付をデビッド・ボウイの歌「Space Oddity」のリリース日と比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example compares tuples made up of 2 components:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は２つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example compares tuples made up of 3 components:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、３つの構成要素で構成されるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example compares tuples made up of 4 components:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は４つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example compares tuples made up of 5 components:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は５つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example compares tuples made up of 6 components:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は６つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example converts the maximal <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> value to a string and prints its length:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、最大限の<bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>値を文字列へ変換してそれの長さを出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example converts the maximal <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept> value to a string and prints its length:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、最大限の<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt<ept i="0">&lt;/c0&gt;</ept>値を文字列へ変換してそれの長さを出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example converts the position of the Unicode scalar <bpt i="0" x="0">&lt;c0&gt;</bpt>"e"<ept i="0">&lt;/c0&gt;</ept> into its corresponding position in the string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ユニコードスカラー<bpt i="0" x="0">&lt;c0&gt;</bpt>"e"<ept i="0">&lt;/c0&gt;</ept>の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>ビューでのそれの対応位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example converts the position of the teacup emoji (<bpt i="0" x="0">&lt;c0&gt;</bpt>"🍵"<ept i="0">&lt;/c0&gt;</ept>) into its corresponding position in the string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ティーカップ絵文字（<bpt i="0" x="0">&lt;c0&gt;</bpt>"🍵"<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>ビューでのそれの対応位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates a <bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept> collection containing five zeroes:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、５つのゼロを含んでいるある<bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept>コレクションを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates a collection containing the name “Humperdinck” repeated five times:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、５回繰り返した名前「Humperdinck」を含んでいるコレクションを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates a new character from the uppercase version of a string that only holds one character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、１つの文字を保持するだけのある文字列の大文字バージョンから、新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates a new dictionary and prints the value of a key found in the dictionary (<bpt i="0" x="0">&lt;c0&gt;</bpt>"Coral"<ept i="0">&lt;/c0&gt;</ept>) and a key not found in the dictionary (<bpt i="1" x="1">&lt;c1&gt;</bpt>"Cerise"<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は新しい辞書を作成して、辞書に見つかるキー（<bpt i="0" x="0">&lt;c0&gt;</bpt>"Coral"<ept i="0">&lt;/c0&gt;</ept>）と辞書に見つからないキー（<bpt i="1" x="1">&lt;c1&gt;</bpt>"Cerise"<ept i="1">&lt;/c1&gt;</ept>）の値を出力します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates an array initialized with five strings containing the letter <bpt i="0" x="0">&lt;e0&gt;</bpt>Z<ept i="0">&lt;/e0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、字<bpt i="0" x="0">&lt;e0&gt;</bpt>Z<ept i="0">&lt;/e0&gt;</ept>を含んでいる５つの文字列で初期化される配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates an array of integers from an array literal, then appends the elements of another collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、整数からなるある配列を配列リテラルから作成します、それから別のコレクションの要素を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates an example class <bpt i="0" x="0">&lt;c0&gt;</bpt>A<ept i="0">&lt;/c0&gt;</ept> and compares instances of the class using their object identifiers and the identical-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>===<ept i="1">&lt;/c1&gt;</ept>):</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、ある見本クラス<bpt i="0" x="0">&lt;c0&gt;</bpt>A<ept i="0">&lt;/c0&gt;</ept>を作成して、そのクラスのインスタンスをそれらのオブジェクト識別子と同一演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>===<ept i="1">&lt;/c1&gt;</ept>）を使って比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates an iterator that counts up from the initial value of an integer <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> to 15:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例はあるイテレータを作成します、それは初期値の整数<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>から15まで数え上げます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example creates two type-erased hashable values: <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> wraps an <bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept> with the value 42, while <bpt i="2" x="2">&lt;c2&gt;</bpt>y<ept i="2">&lt;/c2&gt;</ept> wraps a <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt8<ept i="3">&lt;/c3&gt;</ept> with the same numeric value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は２つの型消去ハッシュ化値を作成します：<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>は値42を持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>Int<ept i="1">&lt;/c1&gt;</ept>をラップします、一方<bpt i="2" x="2">&lt;c2&gt;</bpt>y<ept i="2">&lt;/c2&gt;</ept>は同じ数値を持つ<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt8<ept i="3">&lt;/c3&gt;</ept>をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example declares <bpt i="1" x="1">&lt;c1&gt;</bpt>singleDigits<ept i="1">&lt;/c1&gt;</ept>, a range of single digit integers, and then drops the first element to create a slice of that range, <bpt i="2" x="2">&lt;c2&gt;</bpt>singleNonZeroDigits<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、１桁整数からなる範囲、<bpt i="1" x="1">&lt;c1&gt;</bpt>singleDigits<ept i="1">&lt;/c1&gt;</ept>を宣言します、それから最初の要素を落としてその範囲のあるスライス、<bpt i="2" x="2">&lt;c2&gt;</bpt>singleNonZeroDigits<ept i="2">&lt;/c2&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例はある関数を宣言します、それは、それの２つの直角側を与えられる直角三角形の斜辺の長さを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example decodes the UTF-16 encoded bytes of a string into an array of <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instances.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列のUTF-16エンコードされたバイトを、<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instances.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instances:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスの配列へとデコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example defines an <bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept> type, an integer type with reference semantics.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある<bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept>型、参照意味論を持つ整数型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example drops the first element from an array of integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、整数からなる配列から最初の要素を落とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example enumerates the elements of an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある配列の要素を列挙します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example enumerates the elements of an array:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある配列の要素を列挙します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example finds the index of the first space in the string’s character view and then converts that to the same position in the UTF-8 view:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、最初の空白のインデックスを文字列のもつ文字ビューの中で見つけて、それからそれをUTF-8ビューでの同じ位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example finds the index of the solid heart pictograph in the string’s character view and then converts that to the same position in the Unicode scalars view:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、最初の塗りつぶしハート絵文字のインデックスをその文字列のもつ文字ビューの中で見つけて、それからそれをユニコードスカラービューでの同じ位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example finds the length of the UTF-16 encoding of the string <bpt i="0" x="0">&lt;c0&gt;</bpt>"Fermata 𝄐"<ept i="0">&lt;/c0&gt;</ept>, starting with its UTF-8 representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、文字列<bpt i="0" x="0">&lt;c0&gt;</bpt>"Fermata 𝄐"<ept i="0">&lt;/c0&gt;</ept>のUTF-16エンコーディングの長さを、それのUTF-8表現で開始して見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example finds the position of a space in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> view and then converts that position to an index in the string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある空白の位置を文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>ビューの中で見つけて、それからその位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example finds the position of a space in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view and then converts that position to an index in the string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある空白の位置を文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューの中で見つけて、それからその位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example finds the position of a space in a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> view and then converts that position to an index in the string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある空白の位置を文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>ビューの中で見つけて、それからその位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、文字列の開始インデックスから４位置進んだインデックスを取得して、それからその位置の文字を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、配列の始まりから４位置進んだインデックスを入手して、それからその位置での要素を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example prints a closed range of integers to a string:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>続く例は、整数の完結範囲をある文字列へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example prints a string, a closed range of integers, and a group of floating-point values to standard output:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列、整数の完結範囲、グループの浮動小数点値を標準出力に出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example prints the debugging representation of a string, a closed range of integers, and a group of floating-point values to standard output:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列、整数の完結範囲、グループの浮動小数点値のデバッグ表現を標準出力に出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example rounds a value using four different rounding rules:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例はある値を４つの丸め規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example rounds several values using this default rule:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例はいくつかの値をこの初期設定での規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example searches a string’s Unicode scalars view for a capital letter and then prints the character and Unicode scalar value at the found index:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列のもつユニコートスカラービューで大文字を捜して、それから見つかったインデックスでの文字とユニコードスカラー値を出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example searches a string’s character view for a capital letter and then prints the character at the found index:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列のもつ文字ビューで大文字を捜して、それから見つかったインデックスでの文字を出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example searches for the index of the number <bpt i="0" x="0">&lt;c0&gt;</bpt>40<ept i="0">&lt;/c0&gt;</ept> in an array of integers, and then prints the suffix of the array starting at that index:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、整数からなる配列において数<bpt i="0" x="0">&lt;c0&gt;</bpt>40<ept i="0">&lt;/c0&gt;</ept>のインデックスを捜して、それからそのインデックスで始まる配列の末尾を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example searches for the index of the number <bpt i="2" x="2">&lt;c2&gt;</bpt>40<ept i="2">&lt;/c2&gt;</ept> in an array of integers, and then prints the prefix of the array up to, and including, that index:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、整数からなる配列において数<bpt i="2" x="2">&lt;c2&gt;</bpt>40<ept i="2">&lt;/c2&gt;</ept>のインデックスを捜して、それからそのインデックスに至るまでの、そしてそれを含めて、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example searches for the index of the number <bpt i="2" x="2">&lt;c2&gt;</bpt>40<ept i="2">&lt;/c2&gt;</ept> in an array of integers, and then prints the prefix of the array up to, but not including, that index:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、整数からなる配列において数<bpt i="2" x="2">&lt;c2&gt;</bpt>40<ept i="2">&lt;/c2&gt;</ept>のインデックスを捜して、それからそのインデックスに至るまでの、しかしそれを含めずに、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows an <bpt i="0" x="0">&lt;c0&gt;</bpt>IntParsingError<ept i="0">&lt;/c0&gt;</ept> enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>IntParsingError<ept i="0">&lt;/c0&gt;</ept>列挙を示します、それが捕える（キャプチャ）のは、文字列から整数を構文解析（パース）する時に起こる可能性のある２つの異なる種類のエラー：文字列によって表される値が整数データ型に対して大きすぎるところのオーバーフロー、そして非数の文字が入力内に見つけられるところの無効な入力です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how NaN values operate in different contexts.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、どのようにNaN値が異なる前後関係において作動するかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how an array of strings can be joined to a single, comma-separated string:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、どのように文字列からなる配列が単一の、コンマ区切りの文字列へと連結されることができるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how an iterator can be used explicitly to emulate a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、イテレータが明示的に使われて<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how the <bpt i="3" x="3">&lt;c3&gt;</bpt>contains(_:)<ept i="3">&lt;/c3&gt;</ept> method can be used with an array of strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="3" x="3">&lt;c3&gt;</bpt>contains(_:)<ept i="3">&lt;/c3&gt;</ept>メソッドが文字列からなる配列で使われることができるのを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how you can bridge an <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> instance to <bpt i="1" x="1">&lt;c1&gt;</bpt>NSArray<ept i="1">&lt;/c1&gt;</ept> to use the <bpt i="2" x="2">&lt;c2&gt;</bpt>write(to:atomically:)<ept i="2">&lt;/c2&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、どのようにあなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>インスタンスを<bpt i="1" x="1">&lt;c1&gt;</bpt>NSArray<ept i="1">&lt;/c1&gt;</ept>へとブリッジして、<bpt i="2" x="2">&lt;c2&gt;</bpt>write(to:atomically:)<ept i="2">&lt;/c2&gt;</ept>メソッドを使うかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how you can determine free shipping options based on a customer’s purchase price:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、どうやってあなたが顧客の購入品価格を基に無償出荷オプションを判定できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows how you can iterate over the contents of the buffer pointer:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、どのようにあなたがバッファポインタの内容にわたって反復することができるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows modifying the contents of the <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableBufferPointer<ept i="0">&lt;/c0&gt;</ept> argument to <bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept> alters the contents of the array:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept>への<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutableBufferPointer<ept i="0">&lt;/c0&gt;</ept>引数の内容の修正が配列の内容を変えることを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows the array literal initializer for a hypothetical <bpt i="1" x="1">&lt;c1&gt;</bpt>OrderedSet<ept i="1">&lt;/c1&gt;</ept> type, which has setlike semantics but maintains the order of its elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、仮設的な<bpt i="1" x="1">&lt;c1&gt;</bpt>OrderedSet<ept i="1">&lt;/c1&gt;</ept>型のための配列リテラルイニシャライザを示します、それは集合的な意味論を持つけれどもそれの要素の順番を維持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows the dictionary literal initializer for a hypothetical <bpt i="1" x="1">&lt;c1&gt;</bpt>CountedSet<ept i="1">&lt;/c1&gt;</ept> type, which uses setlike semantics while keeping track of the count for duplicate elements:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、仮設的な<bpt i="1" x="1">&lt;c1&gt;</bpt>CountedSet<ept i="1">&lt;/c1&gt;</ept>型のための辞書リテラルイニシャライザを示します、それは集合的な意味論を使う一方で重複する要素に対する総数を追跡し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example transcodes the UTF-8 representation of the string <bpt i="0" x="0">&lt;c0&gt;</bpt>"Fermata 𝄐"<ept i="0">&lt;/c0&gt;</ept> into UTF-32.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、文字列<bpt i="0" x="0">&lt;c0&gt;</bpt>"Fermata 𝄐"<ept i="0">&lt;/c0&gt;</ept>のUTF-8表現をUTF-32にコード変換（トランスコード）します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example transforms a string to uppercase letters:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列を大文字の文字に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example updates the value for the <bpt i="1" x="1">&lt;c1&gt;</bpt>404<ept i="1">&lt;/c1&gt;</ept> code to be simply “Not found” and removes the key-value pair for the <bpt i="2" x="2">&lt;c2&gt;</bpt>500<ept i="2">&lt;/c2&gt;</ept> code entirely.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="1" x="1">&lt;c1&gt;</bpt>404<ept i="1">&lt;/c1&gt;</ept>コードの値を単純に「Not found」に更新して、<bpt i="2" x="2">&lt;c2&gt;</bpt>500<ept i="2">&lt;/c2&gt;</ept>コードに対するキー値ペアをすっかり削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses <bpt i="0" x="0">&lt;c0&gt;</bpt>isTotallyOrdered(below:)<ept i="0">&lt;/c0&gt;</ept> to sort an array of floating-point values, including some that are NaN:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>isTotallyOrdered(below:)<ept i="0">&lt;/c0&gt;</ept>を使って、NaNである何かを含んでいる、浮動小数点値の配列をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses a structure to represent an error when parsing an XML document, including the line and column numbers where the error occurred:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、構造体を使ってXML書類をパースする時にエラーを表して、行およびコラム番号をエラーが生じたときに含めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses indexed subscripting to update an array’s second element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、インデックスでの添え字を使って、配列の２番目の要素を更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses optional chaining to access the <bpt i="1" x="1">&lt;c1&gt;</bpt>hasSuffix(_:)<ept i="1">&lt;/c1&gt;</ept> method on a <bpt i="2" x="2">&lt;c2&gt;</bpt>String?<ept i="2">&lt;/c2&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、オプショナル連鎖を使って、<bpt i="1" x="1">&lt;c1&gt;</bpt>hasSuffix(_:)<ept i="1">&lt;/c1&gt;</ept>メソッドに<bpt i="2" x="2">&lt;c2&gt;</bpt>String?<ept i="2">&lt;/c2&gt;</ept>インスタンス上でアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>zip(_:_:)<ept i="0">&lt;/c0&gt;</ept> function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は<bpt i="0" x="0">&lt;c0&gt;</bpt>zip(_:_:)<ept i="0">&lt;/c0&gt;</ept>関数を使って、同時に文字列からなる配列とある可付番範囲の全体にわたって反復します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses the <bpt i="3" x="3">&lt;c3&gt;</bpt>zip(_:_:)<ept i="3">&lt;/c3&gt;</ept> function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="3" x="3">&lt;c3&gt;</bpt>zip(_:_:)<ept i="3">&lt;/c3&gt;</ept>関数を使って、文字列からなるある配列とある可付番範囲に同時に反復適用します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses the C <bpt i="0" x="0">&lt;c0&gt;</bpt>strncmp<ept i="0">&lt;/c0&gt;</ept> function to compare the beginning of two Swift strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、C <bpt i="0" x="0">&lt;c0&gt;</bpt>strncmp<ept i="0">&lt;/c0&gt;</ept>関数を使って２つのSwift文字列を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-16 code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-16コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-8 code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-8コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses this initializer to create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance with the sign of <bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept> and the magnitude of <bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、このイニシャライザを使って新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスを<bpt i="1" x="1">&lt;c1&gt;</bpt>a<ept i="1">&lt;/c1&gt;</ept>の符号と<bpt i="2" x="2">&lt;c2&gt;</bpt>b<ept i="2">&lt;/c2&gt;</ept>の規模で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following example uses this initializer to create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、このイニシャライザを使って新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following examples show the effects of the <bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>omittingEmptySubsequences<ept i="1">&lt;/c1&gt;</ept> parameters when splitting a string at each space character (” “).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、ある文字列を各空白文字（” “）で分割する場合の<bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>omittingEmptySubsequences<ept i="1">&lt;/c1&gt;</ept>パラメータの効果を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following examples show the effects of the <bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>omittingEmptySubsequences<ept i="1">&lt;/c1&gt;</ept> parameters when splitting a string using a closure that matches spaces.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>omittingEmptySubsequences<ept i="1">&lt;/c1&gt;</ept>パラメータの効果を、空白にマッチするクロージャを使って文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following examples use this dictionary of image names and file paths:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以降の例は、この画像名とファイルパスの辞書を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following family of operator overloads are redundant with Strideable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の演算子オーバーロードのファミリは、Strideableにとって冗長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following special cases also apply:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の特別な場合もまた適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The given string may begin with a plus or minus sign character (<bpt i="0" x="0">&lt;c0&gt;</bpt>+<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>-<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた文字列は、プラスまたはマイナス符号文字（<bpt i="0" x="0">&lt;c0&gt;</bpt>+<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>-<ept i="1">&lt;/c1&gt;</ept>）で始まっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The global <bpt i="0" x="0">&lt;c0&gt;</bpt>abs(_:)<ept i="0">&lt;/c0&gt;</ept> function provides more familiar syntax when you need to find an absolute value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>グローバル<bpt i="0" x="0">&lt;c0&gt;</bpt>abs(_:)<ept i="0">&lt;/c0&gt;</ept>関数は、あなたが絶対値を見つける必要がある時により親しみやすい構文を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The greater of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>のより大きい方、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The greater of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>のうちより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The greatest finite number representable by this type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型によって表現可能な最も大きな有限数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The greatest of all the arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての引数のうち最も大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The greatest representable value that compares less than this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>表現可能な最も大きい値で、この値と比較してより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The hash value for the Boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ブール値に対するハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The hash value for the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合に対するハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The hash value is not guaranteed to be stable across different invocations of the same program.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ハッシュ値は、同じプログラムの異なる発動をまたいで変動のないことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The identical-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>===<ept i="0">&lt;/c0&gt;</ept>) returns <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept> when comparing two references to different object instances, even if the two instances have the same value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>同一性演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>===<ept i="0">&lt;/c0&gt;</ept>）は、２つのインスタンスを比較して異なるオブジェクトインスタンスであるとき<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>を返します、２つのインスタンスが同じ値を持つとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The identifier’s hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>識別子の持つハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The identity of a class instance is not part of an instance’s value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クラスインスタンスの同一性は、インスタンスの持つ値の部分のことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The implementation of the <bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept> function returns the same value whether its two arguments are the same instance or are two different instances with the same integer stored in their <bpt i="1" x="1">&lt;c1&gt;</bpt>value<ept i="1">&lt;/c1&gt;</ept> properties.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>関数の実装は、それの２つの引数が同じインスタンスであろうと、それらの<bpt i="1" x="1">&lt;c1&gt;</bpt>value<ept i="1">&lt;/c1&gt;</ept>プロハティの中に格納される同じ整数を持つ２つの異なるインスタンスであろうと、同じ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index at which to start the resulting subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それで結果の下位シーケンスが始まるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index for <bpt i="0" x="0">&lt;c0&gt;</bpt>key<ept i="0">&lt;/c0&gt;</ept> and its associated value if <bpt i="1" x="1">&lt;c1&gt;</bpt>key<ept i="1">&lt;/c1&gt;</ept> is in the dictionary; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>key<ept i="0">&lt;/c0&gt;</ept>とそれの結び付けられた値のインデックス、<bpt i="1" x="1">&lt;c1&gt;</bpt>key<ept i="1">&lt;/c1&gt;</ept>が辞書の中にあるならば；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index must be a valid index of <bpt i="0" x="0">&lt;c0&gt;</bpt>String(utf16).utf8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスは<bpt i="0" x="0">&lt;c0&gt;</bpt>String(utf16).utf8<ept i="0">&lt;/c0&gt;</ept>の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index must be a valid index of <bpt i="0" x="0">&lt;c0&gt;</bpt>String(utf8).utf16<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスは<bpt i="0" x="0">&lt;c0&gt;</bpt>String(utf8).utf16<ept i="0">&lt;/c0&gt;</ept>の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index of <bpt i="0" x="0">&lt;c0&gt;</bpt>member<ept i="0">&lt;/c0&gt;</ept> if it exists in the set; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それがこの集合に含まれるならば<bpt i="0" x="0">&lt;c0&gt;</bpt>member<ept i="0">&lt;/c0&gt;</ept>のインデックス；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index of the first element for which <bpt i="0" x="0">&lt;c0&gt;</bpt>predicate<ept i="0">&lt;/c0&gt;</ept> returns <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それに対して<bpt i="0" x="0">&lt;c0&gt;</bpt>predicate<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返す最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index of the first element in the reordered collection that matches <bpt i="0" x="0">&lt;c0&gt;</bpt>belongsInSecondPartition<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>並べ直されたコレクションの中の最初の要素のインデックス、それは<bpt i="0" x="0">&lt;c0&gt;</bpt>belongsInSecondPartition<ept i="0">&lt;/c0&gt;</ept>に合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index of the last element to include in the resulting subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果の下位シーケンスの中に含まれることになる最後の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index of the lead surrogate is successfully converted to a position in <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>, but the index of the trailing surrogate is not.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>先頭サロゲートはうまく<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>での位置に変換されます、しかし後続サロゲートのインデックスは違います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index of the member to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除するメンバのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index type for a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>ビューのためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index type for subscripting a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列で添え字を使うためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index type for subscripting a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューでの添え字のためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index type for subscripting a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>ビューでの添え字のためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index type for subscripting the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合で添え字を使うためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index type of a dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書のインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index value immediately after <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>の直後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index value immediately before <bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>i<ept i="0">&lt;/c0&gt;</ept>の直前のインデックス値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの添え字に使うのに有効である、昇順でのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The indices that are valid for subscripting the range, in ascending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>昇順で、範囲の添え字として有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The initial state that will be passed to the closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>初期状態、それはクロージャに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The initializer creates the string representation of <bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept> in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イニシャライザは、<bpt i="0" x="0">&lt;c0&gt;</bpt>instance<ept i="0">&lt;/c0&gt;</ept>の文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The initializer creates the string representation of <bpt i="1" x="1">&lt;c1&gt;</bpt>instance<ept i="1">&lt;/c1&gt;</ept> in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イニシャライザは、<bpt i="1" x="1">&lt;c1&gt;</bpt>instance<ept i="1">&lt;/c1&gt;</ept>の文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The input string to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The input string to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>Float80<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Float80<ept i="0">&lt;/c0&gt;</ept>インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The input string to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The instance passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept> will leak if nothing eventually balances the retain.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>として渡されるインスタンスは、リテインが結局は均衡を保つことがないならば漏洩します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The instances of <bpt i="6" x="6">&lt;c6&gt;</bpt>NSArray<ept i="6">&lt;/c6&gt;</ept> and <bpt i="7" x="7">&lt;c7&gt;</bpt>Array<ept i="7">&lt;/c7&gt;</ept> share storage using the same copy-on-write optimization that is used when two instances of <bpt i="8" x="8">&lt;c8&gt;</bpt>Array<ept i="8">&lt;/c8&gt;</ept> share storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="6" x="6">&lt;c6&gt;</bpt>NSArray<ept i="6">&lt;/c6&gt;</ept>と<bpt i="7" x="7">&lt;c7&gt;</bpt>Array<ept i="7">&lt;/c7&gt;</ept>のインスタンスは、２つの<bpt i="8" x="8">&lt;c8&gt;</bpt>Array<ept i="8">&lt;/c8&gt;</ept>のインスタンスがストレージを共有するときに使われる、同じコピーオンライト最適化を使ってストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The instances of <bpt i="6" x="6">&lt;c6&gt;</bpt>NSDictionary<ept i="6">&lt;/c6&gt;</ept> and <bpt i="7" x="7">&lt;c7&gt;</bpt>Dictionary<ept i="7">&lt;/c7&gt;</ept> share storage using the same copy-on-write optimization that is used when two instances of <bpt i="8" x="8">&lt;c8&gt;</bpt>Dictionary<ept i="8">&lt;/c8&gt;</ept> share storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="6" x="6">&lt;c6&gt;</bpt>NSDictionary<ept i="6">&lt;/c6&gt;</ept>と<bpt i="7" x="7">&lt;c7&gt;</bpt>Dictionary<ept i="7">&lt;/c7&gt;</ept>インスタンスは、<bpt i="8" x="8">&lt;c8&gt;</bpt>Dictionary<ept i="8">&lt;/c8&gt;</ept>の２つのインスタンスが ストレージを共有するとき使われるのと、同じコピーオンライト最適化を使ってストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The instances of <bpt i="6" x="6">&lt;c6&gt;</bpt>NSSet<ept i="6">&lt;/c6&gt;</ept> and <bpt i="7" x="7">&lt;c7&gt;</bpt>Set<ept i="7">&lt;/c7&gt;</ept> share storage using the same copy-on-write optimization that is used when two instances of <bpt i="8" x="8">&lt;c8&gt;</bpt>Set<ept i="8">&lt;/c8&gt;</ept> share storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="6" x="6">&lt;c6&gt;</bpt>NSSet<ept i="6">&lt;/c6&gt;</ept>と<bpt i="7" x="7">&lt;c7&gt;</bpt>Set<ept i="7">&lt;/c7&gt;</ept>インスタンスは、<bpt i="8" x="8">&lt;c8&gt;</bpt>Set<ept i="8">&lt;/c8&gt;</ept>の２つのインスタンスが ストレージを共有するとき使われるのと、同じコピーオンライト最適化を使ってストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The integer encoding of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>Double<ept i="0">&lt;/c0&gt;</ept>インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The integer encoding of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The integer to convert to a floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点値へ変換されることになる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The integer types in the standard library all conform to <bpt i="1" x="1">&lt;c1&gt;</bpt>BitwiseOperations<ept i="1">&lt;/c1&gt;</ept> by default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリの整数型は初期状態ですべて<bpt i="1" x="1">&lt;c1&gt;</bpt>BitwiseOperations<ept i="1">&lt;/c1&gt;</ept>に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The integral value found by rounding using <bpt i="0" x="0">&lt;c0&gt;</bpt>rule<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>rule<ept i="0">&lt;/c0&gt;</ept>を使って丸められることによって見出される整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The intersection of <bpt i="0" x="0">&lt;c0&gt;</bpt>[member]<ept i="0">&lt;/c0&gt;</ept> and the set, if the intersection was nonempty; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>[member]<ept i="0">&lt;/c0&gt;</ept>とこの集合の交叉、その交叉が空でなかったならば；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The intersection of <bpt i="0" x="0">&lt;c0&gt;</bpt>[newMember]<ept i="0">&lt;/c0&gt;</ept> and the set if the intersection was nonempty; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>[newMember]<ept i="0">&lt;/c0&gt;</ept>とこの集合の交叉、その交叉が空でなかったならば；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The iterator for <bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedSequence<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedSequence<ept i="0">&lt;/c0&gt;</ept>のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The joined sequence of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>つなぎ合わされたシーケンス要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key to associate with <bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>value<ept i="0">&lt;/c0&gt;</ept>と結び付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key to find in the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このキーが辞書において捜されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key to remove along with its associated value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それの関連する値とともに削除されるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key type of a dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key-value pair at position <bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>位置<bpt i="0" x="0">&lt;c0&gt;</bpt>position<ept i="0">&lt;/c0&gt;</ept>でのキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key-value pair that correspond to <bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>index<ept i="0">&lt;/c0&gt;</ept>に対応するキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The key-value pairs that will make up the new dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい辞書を作り上げるキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The largest native signed integer type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も大きいネイティヴ（実装環境依存）の符号付き整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The largest native unsigned integer type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も大きいネイティヴ（実装環境依存）の符号なし整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last element of the array if the array is not empty; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列が空でないならば配列の最後の要素；そうでなければ<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last element of the collection if the collection has one or more elements; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが１つ以上の要素を持つならばコレクションの最後の要素；そうでなければ<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last element of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの最後の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The leading surrogate code unit of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> when encoded in UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-16でエンコードされる時の<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の先行サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The least normal exponent for values of the type <bpt i="0" x="0">&lt;c0&gt;</bpt>F<ept i="0">&lt;/c0&gt;</ept> is <bpt i="1" x="1">&lt;c1&gt;</bpt>1 - bias<ept i="1">&lt;/c1&gt;</ept>, and the largest finite exponent is <bpt i="2" x="2">&lt;c2&gt;</bpt>bias<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="0" x="0">&lt;c0&gt;</bpt>F<ept i="0">&lt;/c0&gt;</ept>の最小正規化指数は、<bpt i="1" x="1">&lt;c1&gt;</bpt>1 - bias<ept i="1">&lt;/c1&gt;</ept>です、最大有限指数は<bpt i="2" x="2">&lt;c2&gt;</bpt>bias<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The least of all the arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての引数のうち最も少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The least positive normal number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も小さい正のノーマル数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The least positive number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も小さい正の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The least representable value that compares greater than this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>表現可能な最も小さい値で、この値と比較してより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The left-hand side of the operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算子の左手側。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The length in bytes of the static string’s ASCII or UTF-8 representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的文字列のASCIIまたはUTF-8表現のバイトでの長さ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The lesser of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>のうちより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The line number to print along with <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept> if the assertion fails.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>表明（アサーション）がうまくいかないならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>とともに出力する行番号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The line number to print along with <bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>message<ept i="0">&lt;/c0&gt;</ept>に加えて出力される行番号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logical AND operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&amp;&amp;<ept i="0">&lt;/c0&gt;</ept>) combines two Bool values and returns <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> if both of the values are <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理AND演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&amp;&amp;<ept i="0">&lt;/c0&gt;</ept>）は、２つのブール値を組み合わせて、両方の値が<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>ならば<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logical NOT operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>!<ept i="0">&lt;/c0&gt;</ept>) inverts a Boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理NOT演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>!<ept i="0">&lt;/c0&gt;</ept>）は、ブール値を逆にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logical OR operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>||<ept i="0">&lt;/c0&gt;</ept>) combines two Bool values and returns <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> if at least one of the values is <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>論理OR演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>||<ept i="0">&lt;/c0&gt;</ept>）は、２つのブール値を組み合わせて、少なくとも値のうちの１つが<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>ならば<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logical value for the new instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいインスタンスのための論理値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The longer scalar values may need two <bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept> values for storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より長いスカラー値は、２つの<bpt i="0" x="0">&lt;c0&gt;</bpt>UInt16<ept i="0">&lt;/c0&gt;</ept>値をストレージとして必要とするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The lower bound for the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の下側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The lower bound of a <bpt i="2" x="2">&lt;c2&gt;</bpt>CountableRange<ept i="2">&lt;/c2&gt;</ept> instance is its start index, and the upper bound is its end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>CountableRange<ept i="2">&lt;/c2&gt;</ept>インスタンスの下側の境界はそれの始まりのインデックスです、そして上側の境界はそれの終わりのインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The magnitude of a floating-point value <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> of type <bpt i="1" x="1">&lt;c1&gt;</bpt>F<ept i="1">&lt;/c1&gt;</ept> can be calculated by using the following formula, where <bpt i="2" x="2">&lt;c2&gt;</bpt>**<ept i="2">&lt;/c2&gt;</ept> is exponentiation:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型<bpt i="1" x="1">&lt;c1&gt;</bpt>F<ept i="1">&lt;/c1&gt;</ept>の浮動小数点値<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の規模は、以下の公式を使って計算されることができます、そこで<bpt i="2" x="2">&lt;c2&gt;</bpt>**<ept i="2">&lt;/c2&gt;</ept>は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The magnitude of this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値の規模。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The mathematical constant pi.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>数学の定数pi。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The maximum number of bytes to write to buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファに書き込む最大バイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The maximum number of elements to return.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>返される要素の最大限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The maximum number of times to split the collection, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The maximum number of times to split the sequence, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The memory layout of a type, describing its size, stride, and alignment.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある型のメモリレイアウト、それはそれのサイズ、ストライド、およびアラインメントを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The memory referenced by an instance can be in one of the following states:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンスによって参照されるメモリは、以下の状態の１つであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The minimum number of <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>s that must be able to be stored in the new buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいバッファに格納されることが可能でなければならない<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>の最小限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The minimum number of ASCII character’s worth of storage to allocate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>割り当てる最小数のASCII文字相当のストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The minimum number of elements that the newly created set should be able to store without reallocating its storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しく作成された集合がそれのストレージを再割り当てすることなしに格納可能であるであろう要素の最小限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The minimum number of key-value pairs to allocate storage for in the new dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい辞書におけるキー値ペアの最小限の数、それに対してストレーシが割り当てられることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The minimum of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>の最小、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most common way to access values in a dictionary is to use a key as a subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の中の値にアクセスする最も普通の方法は、キーを添え字として使うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most common way to iterate over the elements of a sequence is to use a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの要素のすべてにわたって反復するための最も一般的な方法は、<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループを使うことです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most familiar use of relational operators is to compare numbers, as in the following example:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最もよく知られている関係演算子の使用は、数の比較に対してです、以下の例でのように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The naming of those macros is slightly misleading, because <bpt i="2" x="2">&lt;c2&gt;</bpt>infinity<ept i="2">&lt;/c2&gt;</ept> is greater than this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜなら<bpt i="2" x="2">&lt;c2&gt;</bpt>infinity<ept i="2">&lt;/c2&gt;</ept>はこの値より大きいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The naming of those macros is slightly misleading, because subnormals, zeros, and negative numbers are smaller than this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜならサブノーマル、ゼロ、そして負の数はこの値より小さいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も近い整数値、または、２つの整数値が同じくらい近いならば、より大きい規模を持つ整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new Unicode scalar values to add to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へ加える新しいユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new array, on the other hand, matches the order and number of elements provided.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>一方、新しい配列は、提供された要素の順番と数に合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new character to insert into the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へ挿入する新しい文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new characters to add to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へ加える新しいいくらかの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new characters to add to the view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ビューへ加える新しいいくらかの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new element is inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい要素は、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new element to insert into the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列に挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new element to insert into the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションに挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new elements are inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいいくらかの要素が、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new elements to add to the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列に加えられることになる新しい要素ら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new elements to add to the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションに加える新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new elements to insert into the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションへ挿入される新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new storage is a multiple of the old storage’s size.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいストレージは古いストレージの大きさの倍数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new text to add to the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へ加える新しいテキスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new value to add to the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この辞書に加える新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new value’s exponent.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値の持つ指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new value’s significand.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値の持つ仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next code sample shows a possible extension to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> type that parses the integer value of a <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> instance, throwing an error when there is a problem during parsing.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次のコード例が示すのは、<bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>型に対する１つの可能な拡張で、それは<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>インスタンスの整数値をパースして、パースの間に問題がある時はエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next element in the collection if an element is available; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素が利用可能ならばコレクションの次の要素；そうでなければ<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next element in the underlying sequence if a next element exists; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の要素が存在するならば基礎をなすシーケンス中の次の要素；そうでなければ、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next example attempts to convert the indices of the two UTF-16 code points that represent the teacup emoji (<bpt i="0" x="0">&lt;c0&gt;</bpt>"🍵"<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、ティーカップ絵文字（<bpt i="0" x="0">&lt;c0&gt;</bpt>"🍵"<ept i="0">&lt;/c0&gt;</ept>）を表す２つのUTF-16コード点のインデックスの変換を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next example attempts to retrieve an index six positions from <bpt i="0" x="0">&lt;c0&gt;</bpt>s.startIndex<ept i="0">&lt;/c0&gt;</ept> but fails, because that distance is beyond the index passed as <bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は<bpt i="0" x="0">&lt;c0&gt;</bpt>s.startIndex<ept i="0">&lt;/c0&gt;</ept>から６位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔は<bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept>として渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next example attempts to retrieve an index ten positions from <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.startIndex<ept i="0">&lt;/c0&gt;</ept>, but fails, because that distance is beyond the index passed as <bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は<bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.startIndex<ept i="0">&lt;/c0&gt;</ept>から10位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔は<bpt i="1" x="1">&lt;c1&gt;</bpt>limit<ept i="1">&lt;/c1&gt;</ept>として渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next example tries to find the correct text for a greeting in two separate dictionaries before falling back to a static default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、挨拶として正しいテキストを２つの独立した辞書から見つけることをある静的な省略時のものに落ち着く前に試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next example uses key-based subscripting of the <bpt i="0" x="0">&lt;c0&gt;</bpt>responseMessages<ept i="0">&lt;/c0&gt;</ept> dictionary with two keys that exist in the dictionary and one that does not.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>次の例は、キーに基づく添え字を<bpt i="0" x="0">&lt;c0&gt;</bpt>responseMessages<ept i="0">&lt;/c0&gt;</ept>辞書に使います、ですが２つのキーは辞書に存在し１つはそうでありません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of bits required to represent the value’s significand.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の仮数を表すのに必要とされるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of bits used to represent the type’s exponent.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の指数を表すのに使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of bytes from the start of one instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept> to the start of the next in an <bpt i="1" x="1">&lt;c1&gt;</bpt>Array&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Array&lt;T&gt;<ept i="1">&lt;/c1&gt;</ept>の中のあるインスタンス<bpt i="0" x="0">&lt;c0&gt;</bpt>T<ept i="0">&lt;/c0&gt;</ept>の始まりから次のものの始まりまでのバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of bytes used from buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>バッファから使われるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements (always one).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素の数を返します（常に１つ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements (always zero).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素の数を返します（常にゼロ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements in the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その配列中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements in the buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このバッファの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements in the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements in the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements in this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションの要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの始まりから省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスの始まりから落とす要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements to drop off the end of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションの終わりで省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements to drop off the end of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの末尾から取り除く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements to remove from the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションから削除される要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除する要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of key-value pairs in the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の中のキー値ペアの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of new elements need not match the number of elements being removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい要素の数は、削除される要素の数と一致する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of times to repeat <bpt i="0" x="0">&lt;c0&gt;</bpt>element<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>element<ept i="0">&lt;/c0&gt;</ept>を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of times to repeat <bpt i="0" x="0">&lt;c0&gt;</bpt>repeatedValue<ept i="0">&lt;/c0&gt;</ept> in the resulting string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>repeatedValue<ept i="0">&lt;/c0&gt;</ept>を結果文字列の中で繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of times to repeat the value passed in the <bpt i="0" x="0">&lt;c0&gt;</bpt>repeating<ept i="0">&lt;/c0&gt;</ept> parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>repeating<ept i="0">&lt;/c0&gt;</ept>パラメータで渡された値を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number of visible characters is generally the most natural way to count the length of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>目に見える文字の数は、一般的には文字列の長さを数える最も自然な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The number’s hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その数の持つハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The object referenced by this <bpt i="0" x="0">&lt;c0&gt;</bpt>Unmanaged<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;c0&gt;</bpt>Unmanaged<ept i="0">&lt;/c0&gt;</ept>インスタンスによって参照されるオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The operation doesn’t require going beyond the limiting <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.endIndex<ept i="0">&lt;/c0&gt;</ept> value, so it succeeds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この操作は、限度である<bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.endIndex<ept i="0">&lt;/c0&gt;</ept>値を越えることを要求しません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The operation doesn’t require going beyond the limiting <bpt i="0" x="0">&lt;c0&gt;</bpt>s.endIndex<ept i="0">&lt;/c0&gt;</ept> value, so it succeeds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算は、限界である<bpt i="0" x="0">&lt;c0&gt;</bpt>s.endIndex<ept i="0">&lt;/c0&gt;</ept>値を超えていく必要はありません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The optional <bpt i="0" x="0">&lt;c0&gt;</bpt>label<ept i="0">&lt;/c0&gt;</ept> may be used when appropriate, e.g. to represent the name of a stored property or of an active <bpt i="1" x="1">&lt;c1&gt;</bpt>enum<ept i="1">&lt;/c1&gt;</ept> case, and will be used for lookup when <bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>s are passed to the <bpt i="3" x="3">&lt;c3&gt;</bpt>descendant<ept i="3">&lt;/c3&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのオプショナル<bpt i="0" x="0">&lt;c0&gt;</bpt>label<ept i="0">&lt;/c0&gt;</ept>は適切な時に、例えば、保存プロパティのまたはアクティブな<bpt i="1" x="1">&lt;c1&gt;</bpt>enum<ept i="1">&lt;/c1&gt;</ept>ケース節の名前を再表現するのに使用できます、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>descendant<ept i="3">&lt;/c3&gt;</ept>メソッドに渡される時に検索用に使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The order of key-value pairs in a dictionary is stable between mutations but is otherwise unpredictable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書中のキー値ペアの順番は各変化間は安定しています、しかしそれ以外では予測できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The order of the key-value pairs is kept intact in the resulting <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キー値ペアの順序は、<bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>インスタンスにおいて損なわれず保たれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other value to multiply.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>掛け合わされることになるもう一方の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The output from each call to <bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept> includes a newline by default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept>への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The output from each call to <bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept> includes a newline by default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept>への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The output from each call to <bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept> includes a newline by default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept>への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The output from each call to <bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept> includes a newline by default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept>への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The payload consists of a sequence of decimal digits, or the characters <bpt i="1" x="1">&lt;c1&gt;</bpt>0X<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>0x<ept i="2">&lt;/c2&gt;</ept> followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ペイロードは、一連の10進の桁、または文字<bpt i="1" x="1">&lt;c1&gt;</bpt>0X<ept i="1">&lt;/c1&gt;</ept>か<bpt i="2" x="2">&lt;c2&gt;</bpt>0x<ept i="2">&lt;/c2&gt;</ept>に続く一連の16進の桁から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The payload for this option should always be “<bpt i="0" x="0">&lt;c0&gt;</bpt>{ super.customMirror }<ept i="0">&lt;/c0&gt;</ept>”:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このオプションに対する積荷は、常に「<bpt i="0" x="0">&lt;c0&gt;</bpt>{ super.customMirror }<ept i="0">&lt;/c0&gt;</ept>」であるべきです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The payload to use for the new NaN value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいNaN値のために使うためのペイロード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The performance of accessing <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>first<ept i="1">&lt;/c1&gt;</ept>, any methods that depend on <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>, or of advancing a <bpt i="3" x="3">&lt;c3&gt;</bpt>FlattenBidirectionalCollectionIndex<ept i="3">&lt;/c3&gt;</ept> depends on how many empty subcollections are found in the base collection, and may not offer the usual performance given by <bpt i="4" x="4">&lt;c4&gt;</bpt>Collection<ept i="4">&lt;/c4&gt;</ept> or <bpt i="5" x="5">&lt;c5&gt;</bpt>BidirectionalIndex<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>first<ept i="1">&lt;/c1&gt;</ept>、あらゆる<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>依存のメソッドでのアクセスにおける、または<bpt i="3" x="3">&lt;c3&gt;</bpt>FlattenBidirectionalCollectionIndex<ept i="3">&lt;/c3&gt;</ept>での進んでいくことにおける性能は、どのくらい多くの空の下位コレクションが基盤コレクションにおいて見つけられるかに依存します、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>Collection<ept i="4">&lt;/c4&gt;</ept>または<bpt i="5" x="5">&lt;c5&gt;</bpt>BidirectionalIndex<ept i="5">&lt;/c5&gt;</ept>によって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The performance of accessing <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>first<ept i="1">&lt;/c1&gt;</ept>, any methods that depend on <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>, or of advancing a <bpt i="3" x="3">&lt;c3&gt;</bpt>FlattenCollectionIndex<ept i="3">&lt;/c3&gt;</ept> depends on how many empty subcollections are found in the base collection, and may not offer the usual performance given by <bpt i="4" x="4">&lt;c4&gt;</bpt>Collection<ept i="4">&lt;/c4&gt;</ept> or <bpt i="5" x="5">&lt;c5&gt;</bpt>ForwardIndex<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>first<ept i="1">&lt;/c1&gt;</ept>、あらゆる<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>依存のメソッドでのアクセスにおける、または<bpt i="3" x="3">&lt;c3&gt;</bpt>FlattenCollectionIndex<ept i="3">&lt;/c3&gt;</ept>での進んでいくことにおける性能は、どのくらい多くの空の下位コレクションが基盤コレクションにおいて見つけられるかに依存します、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>Collection<ept i="4">&lt;/c4&gt;</ept>または<bpt i="5" x="5">&lt;c5&gt;</bpt>ForwardIndex<ept i="5">&lt;/c5&gt;</ept>によって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The performance of accessing <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>first<ept i="1">&lt;/c1&gt;</ept>, any methods that depend on <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>, or of advancing a <bpt i="3" x="3">&lt;c3&gt;</bpt>LazyFilterIndex<ept i="3">&lt;/c3&gt;</ept> depends on how sparsely the filtering predicate is satisfied, and may not offer the usual performance given by <bpt i="4" x="4">&lt;c4&gt;</bpt>Collection<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>first<ept i="1">&lt;/c1&gt;</ept>、あらゆる<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>依存のメソッドでのアクセスにおける、または<bpt i="3" x="3">&lt;c3&gt;</bpt>LazyFilterIndex<ept i="3">&lt;/c3&gt;</ept>での進んでいくことにおける性能は、どのくらいフィルタ述部が満たされるのがまばらかに依存します、そして<bpt i="4" x="4">&lt;c4&gt;</bpt>Collection<ept i="4">&lt;/c4&gt;</ept>によって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The performance of advancing a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyFilterIndex<ept i="0">&lt;/c0&gt;</ept> depends on how sparsely the filtering predicate is satisfied, and may not offer the usual performance given by models of <bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>LazyFilterIndex<ept i="0">&lt;/c0&gt;</ept>の進んでいく性能は、どのくらいまばらにフィルタリングの述部が満たされるかに依存します、そして<bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>のモデルによって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The performance of some collection operations depends on the type of index that the collection provides.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>いくつかのコレクション演算の性能は、コレクションの提供するインデックスの型に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The pointer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ポインタは、ただクロージャの実行の間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The pointer should be aligned to <bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout&lt;Element&gt;.alignment<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ポインタは、<bpt i="0" x="0">&lt;c0&gt;</bpt>MemoryLayout&lt;Element&gt;.alignment<ept i="0">&lt;/c0&gt;</ept>にアラインされるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The pointer’s hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのポインタの持つハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position at which to insert the new element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そこで新しい要素が挿入されることになる位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position at which to insert the new elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そこで新しいいくらかの要素が挿入されるところの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position corresponding to <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> in the underlying collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基盤コレクションの中の<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>に一致している位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position in <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスに正確に対応する<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position in <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスに正確に対応する<bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position in <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスに正確に対応する<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position in <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> that corresponds exactly to this index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスに正確に対応する<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the character to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除する文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the element to access.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>アクセスする要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the element to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除する要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first Unicode scalar value if the string is nonempty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列が空でないならば、最初のユニコードスカラー値の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first character in a nonempty character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でない文字ビューの中の最初の文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first character in a nonempty string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でない文字列の中の最初の文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first code unit if the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> is nonempty; identical to <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>が空で無いならば最初のコードユニットの位置；そうでないならば<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first code unit if the UTF-8 view is nonempty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-8ビューが空でないならば、最初のコードユニットの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first element in a non-empty collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でないコレクションにおける最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first element in a nonempty array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でない集合の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first element in a nonempty collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でないコレクションの中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first element in a nonempty dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空でない辞書の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first element in the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the first element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the key-value pair to access.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この位置のキー値ペアにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The position of the key-value pair to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除されるキー値ペアの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The positions of a <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyFilterIndex<ept i="0">&lt;/c0&gt;</ept> correspond to those positions <bpt i="1" x="1">&lt;c1&gt;</bpt>p<ept i="1">&lt;/c1&gt;</ept> in its underlying collection <bpt i="2" x="2">&lt;c2&gt;</bpt>c<ept i="2">&lt;/c2&gt;</ept> such that <bpt i="3" x="3">&lt;c3&gt;</bpt>c[p]<ept i="3">&lt;/c3&gt;</ept> satisfies the predicate with which the <bpt i="4" x="4">&lt;c4&gt;</bpt>LazyFilterIndex<ept i="4">&lt;/c4&gt;</ept> was initialized.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>LazyFilterIndex<ept i="0">&lt;/c0&gt;</ept>の位置は、それを使って<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyFilterIndex<ept i="1">&lt;/c1&gt;</ept>が初期化されたところの述部を満足させる<bpt i="2" x="2">&lt;c2&gt;</bpt>c[p]<ept i="2">&lt;/c2&gt;</ept>といったように、それの基盤コレクション<bpt i="3" x="3">&lt;c3&gt;</bpt>c<ept i="3">&lt;/c3&gt;</ept>での位置<bpt i="4" x="4">&lt;c4&gt;</bpt>p<ept i="4">&lt;/c4&gt;</ept>に一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The positive difference between 1.0 and the next greater representable number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>1.0と次により大きい表現可能な数との間の正の差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The positive infinity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の無限大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The predicate must be a <bpt i="0" x="0">&lt;e0&gt;</bpt>equivalence relation<ept i="0">&lt;/e0&gt;</ept> over the elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>述部は要素に対して<bpt i="0" x="0">&lt;e0&gt;</bpt>同値関係<ept i="0">&lt;/e0&gt;</ept>でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The predicate must be a <bpt i="0" x="0">&lt;e0&gt;</bpt>strict weak ordering<ept i="0">&lt;/e0&gt;</ept> over the elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>述部は、それら要素に対して<bpt i="0" x="0">&lt;e0&gt;</bpt>厳密弱順序<ept i="0">&lt;/e0&gt;</ept>でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The predicate orders errors before successes and sorts the error responses by their error code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この述部はエラーを成功の前に並べて、そしてそれらエラー応答をそのエラーコードによってソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The presence of a value, stored as <bpt i="0" x="0">&lt;c0&gt;</bpt>Wrapped<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある値の存在、<bpt i="0" x="0">&lt;c0&gt;</bpt>Wrapped<ept i="0">&lt;/c0&gt;</ept>として格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The product of <bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>, added to this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値に加えられることになる、<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>の積。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The product of this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の積、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The protocol to which all class types implicitly conform.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>全てのクラスが暗黙的に準拠するプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The protocol to which all classes implicitly conform.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それに対して全てのクラスが暗黙的に準拠するプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The quotient of this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の商、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The radix, or base of exponentiation, for a floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある浮動小数点型の基数、または冪演算の底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The radix, or base of exponentiation, for this floating-point type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この浮動小数点型に対しての基数、または冪での底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of characters in the receiver to get.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>取得することになるレシーバにおける文字の範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of characters to replace.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>置き換える文字範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of elements to replace.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>置き換えることになる要素範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of indices to allow access to in the new slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいスライスにおいて、アクセスするのが許されるインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of text to replace.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>置き換えるテキスト範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of the collection to be removed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除されることになるコレクションの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range of the elements to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除する要素の範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range to clamp the bounds of this range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この範囲に制限を課すための範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range’s lower bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その範囲の下方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range’s upper bound.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その範囲の上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The range’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw encoding of the value’s exponent field.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の指数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw encoding of the value’s significand field.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値の仮数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw type that can be used to represent all values of the conforming type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠している型のすべての値を表すために使われることができる生の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw value must therefore be of a type that conforms to the <bpt i="2" x="2">&lt;c2&gt;</bpt>BitwiseOperations<ept i="2">&lt;/c2&gt;</ept> protocol, such as <bpt i="3" x="3">&lt;c3&gt;</bpt>UInt8<ept i="3">&lt;/c3&gt;</ept> or <bpt i="4" x="4">&lt;c4&gt;</bpt>Int<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>生の値はしたがって<bpt i="2" x="2">&lt;c2&gt;</bpt>BitwiseOperations<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠する型、例えば<bpt i="3" x="3">&lt;c3&gt;</bpt>UInt8<ept i="3">&lt;/c3&gt;</ept>または<bpt i="4" x="4">&lt;c4&gt;</bpt>Int<ept i="4">&lt;/c4&gt;</ept>などでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw value of the <bpt i="1" x="1">&lt;c1&gt;</bpt>allowedMoves<ept i="1">&lt;/c1&gt;</ept> instance is the result of the bitwise OR of its three members’ raw values:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>allowedMoves<ept i="1">&lt;/c1&gt;</ept>インスタンスの生の値は、それの３つのメンバの持つ生の値のビット単位ORの結果です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw value of the option set to create.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>作成されるオプションセットの生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The raw value to use for the new instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいインスタンスのために使う生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The remainder of the relational operator functions are implemented by the standard library for any type that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>残りの関係演算子関数は、<bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>に準拠するあらゆる型に対して標準ライブラリによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The remainder of this value divided by <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> using truncating division.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>切り捨て除算を使って<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The remainder of this value divided by <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The remaining range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>残っている範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The removed element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The requested number of elements to store.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>依頼された格納される要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result can be negative only if the collection conforms to the <bpt i="2" x="2">&lt;c2&gt;</bpt>BidirectionalCollection<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果は、そのコレクションが<bpt i="2" x="2">&lt;c2&gt;</bpt>BidirectionalCollection<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠する場合に限り、負であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result is <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>from<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果は、<bpt i="1" x="1">&lt;c1&gt;</bpt>from<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>ならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result is always exact.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果は常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result is always positive.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果は常に正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of evaluating <bpt i="4" x="4">&lt;c4&gt;</bpt>rhs<ept i="4">&lt;/c4&gt;</ept> is the result of the <bpt i="5" x="5">&lt;c5&gt;</bpt>&amp;&amp;<ept i="5">&lt;/c5&gt;</ept> operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>rhs<ept i="4">&lt;/c4&gt;</ept>を評価することの結果は、<bpt i="5" x="5">&lt;c5&gt;</bpt>&amp;&amp;<ept i="5">&lt;/c5&gt;</ept>演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of evaluating <bpt i="4" x="4">&lt;c4&gt;</bpt>rhs<ept i="4">&lt;/c4&gt;</ept> is the result of the <bpt i="5" x="5">&lt;c5&gt;</bpt>||<ept i="5">&lt;/c5&gt;</ept> operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>rhs<ept i="4">&lt;/c4&gt;</ept>を評価することの結果は、<bpt i="5" x="5">&lt;c5&gt;</bpt>||<ept i="5">&lt;/c5&gt;</ept>演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of one Unicode decoding step.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ひとつのユニコード復号化処理の結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of the given closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられたクロージャの結果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of the initializer has the same magnitude as <bpt i="0" x="0">&lt;c0&gt;</bpt>magnitudeOf<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イニシャライザの結果は、<bpt i="0" x="0">&lt;c0&gt;</bpt>magnitudeOfgnOf<ept i="0">&lt;/c0&gt;</ept>と同じ規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of the initializer has the same sign as <bpt i="0" x="0">&lt;c0&gt;</bpt>signOf<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イニシャライザの結果は、<bpt i="0" x="0">&lt;c0&gt;</bpt>signOf<ept i="0">&lt;/c0&gt;</ept>と同じ符号を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of the operation is <bpt i="5" x="5">&lt;c5&gt;</bpt>false<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算の結果は、<bpt i="5" x="5">&lt;c5&gt;</bpt>false<ept i="5">&lt;/c5&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of the operation is <bpt i="5" x="5">&lt;c5&gt;</bpt>true<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算の結果は、<bpt i="5" x="5">&lt;c5&gt;</bpt>true<ept i="5">&lt;/c5&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of this operation will be the same type as its arguments.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算の結果は、それの引数と同じ型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of this operation will have the nonoptional type of the left-hand side’s <bpt i="0" x="0">&lt;c0&gt;</bpt>Wrapped<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算の結果は、左手側のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>Wrapped<ept i="0">&lt;/c0&gt;</ept>型の非オプショナル型を持つことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting <bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>children<ept i="1">&lt;/c1&gt;</ept> may be upgraded to <bpt i="2" x="2">&lt;c2&gt;</bpt>AnyRandomAccessCollection<ept i="2">&lt;/c2&gt;</ept> later.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果として生じる<bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>の<bpt i="1" x="1">&lt;c1&gt;</bpt>children<ept i="1">&lt;/c1&gt;</ept>は、後で<bpt i="2" x="2">&lt;c2&gt;</bpt>AnyRandomAccessCollection<ept i="2">&lt;/c2&gt;</ept>にアップグレードされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting <bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>superclassMirror<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror<ept i="0">&lt;/c0&gt;</ept>の持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>superclassMirror<ept i="1">&lt;/c1&gt;</ept>の結果は<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting array consists of at most <bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits + 1<ept i="0">&lt;/c0&gt;</ept> subsequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果の配列は、多くとも<bpt i="0" x="0">&lt;c0&gt;</bpt>maxSplits + 1<ept i="0">&lt;/c0&gt;</ept>の下位シーケンスから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting collection has the type of argument on the right-hand side.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果となるコレクションは、右手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting collection has the type of the argument on the left-hand side.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果となるコレクションは、左手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting flattened array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果として生じる平たくされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting subsequence <bpt i="0" x="0">&lt;e0&gt;</bpt>does not include<ept i="0">&lt;/e0&gt;</ept> the element at the position <bpt i="1" x="1">&lt;c1&gt;</bpt>end<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果となるシーケンスは、位置<bpt i="1" x="1">&lt;c1&gt;</bpt>end<ept i="1">&lt;/c1&gt;</ept>での要素を<bpt i="0" x="0">&lt;e0&gt;</bpt>含みません<ept i="0">&lt;/e0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The resulting subsequence <bpt i="0" x="0">&lt;e0&gt;</bpt>includes<ept i="0">&lt;/e0&gt;</ept> the element at the position <bpt i="1" x="1">&lt;c1&gt;</bpt>end<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果となるシーケンスは、位置<bpt i="1" x="1">&lt;c1&gt;</bpt>end<ept i="1">&lt;/c1&gt;</ept>での要素を<bpt i="0" x="0">&lt;e0&gt;</bpt>含みます<ept i="0">&lt;/e0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The results of those calls are passed to the <bpt i="0" x="0">&lt;c0&gt;</bpt>init(stringInterpolation:)<ept i="0">&lt;/c0&gt;</ept> initializer in the order in which they appear in the string literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それらの呼び出しの結果は、文字列リテラルにおいてそれらが現れる順番で<bpt i="0" x="0">&lt;c0&gt;</bpt>init(stringInterpolation:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result’s <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> is the same as that of <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>は、<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>のそれと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result’s child labels will all be <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果の持つ子のラベルはすべて<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return type of <bpt i="0" x="0">&lt;c0&gt;</bpt>sequence(first:next:)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>sequence(first:next:)<ept i="0">&lt;/c0&gt;</ept>の型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return type of functions that do not return normally; a type with no values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>普通に戻らない関数の戻り型；値なしでの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return type of functions that don’t explicitly specify a return type; an empty tuple (i.e., <bpt i="0" x="0">&lt;c0&gt;</bpt>()<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>戻り型を明示的に指定されない関数の戻り型；空のタプル（すなわち、<bpt i="0" x="0">&lt;c0&gt;</bpt>()<ept i="0">&lt;/c0&gt;</ept>）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> closure parameter, if any.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>クロージャパラメータの戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> closure, if any, is the return value of this method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>クロージャの戻り値が、もしあれば、このメソッドの戻り値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept> closure, if any.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>クロージャの戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>f<ept i="0">&lt;/c0&gt;</ept> closure, if any.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>クロージャ<bpt i="0" x="0">&lt;c0&gt;</bpt>f<ept i="0">&lt;/c0&gt;</ept>の戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The return value of the call to <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.partition()<ept i="0">&lt;/c0&gt;</ept> is the pivot for the rearranged <bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept> array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.partition()<ept i="0">&lt;/c0&gt;</ept>への呼び出しの戻り値は、再整理された<bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept>配列のためのピボットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The returned <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> instance uses the same indices for the same elements as the original array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>返された<bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>インスタンスは、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The returned bytes are not NUL-terminated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>返される値はヌル終端ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The returned pivot is equal to the collection’s end index only if the collection is empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>返されるピボットがコレクションの末尾インデックスであるのは、コレクションが空である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reverse is not true: Two instances with equal hash values are not necessarily equal to each other.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>逆は真ではありません：同じハッシュ値を持つ２つのインスタンスは必ず互いに等しいわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The right-hand side of the operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算子の右手側。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The rounding rule to use.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この丸め規則を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same state is passed to all invocations of <bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>, so subsequent calls will see any mutations made by previous calls.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その同じ状態は、<bpt i="1" x="1">&lt;c1&gt;</bpt>next<ept i="1">&lt;/c1&gt;</ept>のすべてに呼び出しに対して渡されます、なので続いて起こる呼び出しは前の呼び出しによって為される何らかの変化を見ることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The search is locale-aware, case and diacritic insensitive.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この検索は、ロケール対応で、大文字小文字と発音記号は無視します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second byte is a continuation byte.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２番目のバイトが継続バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second example passes <bpt i="0" x="0">&lt;c0&gt;</bpt>1<ept i="0">&lt;/c0&gt;</ept> for the <bpt i="1" x="1">&lt;c1&gt;</bpt>maxSplits<ept i="1">&lt;/c1&gt;</ept> parameter, so the original string is split just once, into two new strings.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２番目の例は<bpt i="0" x="0">&lt;c0&gt;</bpt>1<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>maxSplits<ept i="1">&lt;/c1&gt;</ept>パラメータに渡します、それで元の文字列は一度だけ分割されて、２つの新しい文字列になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second partition, <bpt i="2" x="2">&lt;c2&gt;</bpt>numbers.suffix(from: p)<ept i="2">&lt;/c2&gt;</ept>, is made up of the elements that <bpt i="3" x="3">&lt;e3&gt;</bpt>are<ept i="3">&lt;/e3&gt;</ept> greater than 30.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つ目の区分、<bpt i="2" x="2">&lt;c2&gt;</bpt>numbers.suffix(from: p)<ept i="2">&lt;/c2&gt;</ept>は、30より大きいもので<bpt i="3" x="3">&lt;e3&gt;</bpt>ある<ept i="3">&lt;/e3&gt;</ept>要素から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second sequence or collection to zip.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>組み合わされる第２のシーケンスまたはコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence ends when <bpt i="2" x="2">&lt;c2&gt;</bpt>next<ept i="2">&lt;/c2&gt;</ept> returns <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このシーケンスは、<bpt i="2" x="2">&lt;c2&gt;</bpt>next<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返す時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence must be finite.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence of elements for the new collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいコレクションのための要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence of elements to turn into an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列になることになる、いくらかの要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence’s iterator is used directly to retrieve the initial value before looping over the rest of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスのもつイテレータが直に使われて、残りのシーケンスにループする前に初期値をとってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence’s maximum element if the sequence is not empty; otherwise, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが空でないならばシーケンスの最大の要素；そうでなければ<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence’s maximum element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最大の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence’s minimum element, according to <bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最小の要素、<bpt i="0" x="0">&lt;c0&gt;</bpt>areInIncreasingOrder<ept i="0">&lt;/c0&gt;</ept>による。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sequence’s minimum element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスの最小の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The set must not be empty.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合は空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The shortened form is preferred for ease of reading and writing code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この短縮された形式は、コードの読み書きの容易さのためにより好ましいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sign for a negative value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>負の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sign for a positive value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>正の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sign of a floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sign of the floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sign of the new value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sign to use for the new value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値に対して使うための符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The significand (http://en.wikipedia.org/wiki/Significand) is frequently also called the “mantissa”, but this terminology is slightly incorrect (see the “Use of ‘mantissa’” section on the linked Wikipedia page for more details).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「仮数 Significand」（http://en.wikipedia.org/wiki/Significand）は、しばしば「mantissa」とも呼ばれます、しかしこの用語は少しばかり不正確です（詳細として「Use of ‘mantissa’」節をリンクされたWikipediaページで見てください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The significand is frequently also called the <bpt i="0" x="0">&lt;e0&gt;</bpt>mantissa<ept i="0">&lt;/e0&gt;</ept>, but significand is the preferred terminology in the IEEE 754 specification, to allay confusion with the use of mantissa for the fractional part of a logarithm.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>仮数（significand）はしばしば<bpt i="0" x="0">&lt;e0&gt;</bpt>mantissa<ept i="0">&lt;/e0&gt;</ept>とも呼ばれます、しかし仮数がIEEE 754使用において推奨される用語です、対数の少数部分に対する仮数（mantissa）の使用との混同を静めるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The significand may include a decimal point.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>仮数は、小数点を含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The significand of <bpt i="3" x="3">&lt;c3&gt;</bpt>y<ept i="3">&lt;/c3&gt;</ept> is therefore 1.34375.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>y<ept i="3">&lt;/c3&gt;</ept>の仮数はしたがって1.34375です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The significand of the floating-point value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>浮動小数点値の仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The single-character string to convert to a <bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Character<ept i="0">&lt;/c0&gt;</ept>インスタンスへと変換される単一文字文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sorting algorithm is not stable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このソートアルゴリズムは、安定ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The square root of the value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値の平方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The standard library floating-point types—<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept> where available—all conform to the <bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByFloatLiteral<ept i="3">&lt;/c3&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリ浮動小数点型—<bpt i="0" x="0">&lt;c0&gt;</bpt>Float<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>、そして利用可能なところでは<bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept>—は、すべて<bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByFloatLiteral<ept i="3">&lt;/c3&gt;</ept>プロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The standard library implements codecs for the UTF-8, UTF-16, and UTF-32 encoding schemes as the <bpt i="1" x="1">&lt;c1&gt;</bpt>UTF8<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>UTF16<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>UTF32<ept i="3">&lt;/c3&gt;</ept> types, respectively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリは、UTF-8、UTF-16、そしてUTF-32エンコードスキームに対するコーデックを<bpt i="1" x="1">&lt;c1&gt;</bpt>UTF8<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>UTF16<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>UTF32<ept i="3">&lt;/c3&gt;</ept>型としてそれぞれ実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The standard library provides an implementation for the not-equal-to operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>!=<ept i="2">&lt;/c2&gt;</ept>) for any <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept> type, which calls the custom <bpt i="4" x="4">&lt;c4&gt;</bpt>==<ept i="4">&lt;/c4&gt;</ept> function and negates its result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリは、不等演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>!=<ept i="2">&lt;/c2&gt;</ept>）のある実装をあらゆる<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>型に対して実装します、それはあつらえの<bpt i="4" x="4">&lt;c4&gt;</bpt>==<ept i="4">&lt;/c4&gt;</ept>関数を呼び出してそれの結果の逆を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The start and end of a subrange must be valid indices of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位範囲の始まりと終わりは、配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The starting position for iterating members of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合のメンバを反復するための開始位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The static members <bpt i="4" x="4">&lt;c4&gt;</bpt>NextDay<ept i="4">&lt;/c4&gt;</ept>, <bpt i="5" x="5">&lt;c5&gt;</bpt>SecondDay<ept i="5">&lt;/c5&gt;</ept>, <bpt i="6" x="6">&lt;c6&gt;</bpt>Priority<ept i="6">&lt;/c6&gt;</ept>, and <bpt i="7" x="7">&lt;c7&gt;</bpt>Standard<ept i="7">&lt;/c7&gt;</ept> are unique, individual options.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>静的メンバ<bpt i="4" x="4">&lt;c4&gt;</bpt>NextDay<ept i="4">&lt;/c4&gt;</ept>、<bpt i="5" x="5">&lt;c5&gt;</bpt>SecondDay<ept i="5">&lt;/c5&gt;</ept>、<bpt i="6" x="6">&lt;c6&gt;</bpt>Priority<ept i="6">&lt;/c6&gt;</ept>、そして<bpt i="7" x="7">&lt;c7&gt;</bpt>Standard<ept i="7">&lt;/c7&gt;</ept>は特有で、別個のオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The static string must store a pointer to either ASCII or UTF-8 code units.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この静的文字列は、ASCIIまたはUTF-8コード単位どちらかへのポインタを格納しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The static string must store a single Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この静的文字列は、単一のユニコードスカラー値を格納しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The static type of the subject being reflected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>リフレクションされている主題の静的型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The stored <bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>格納された<bpt i="0" x="0">&lt;c0&gt;</bpt>Header<ept i="0">&lt;/c0&gt;</ept>インスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The stored Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>格納されるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string literal is broken into pieces.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列リテラルは断片へと分解されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string of characters read from standard input.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準入力から読み込まれた一続きの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>text<ept i="0">&lt;/c0&gt;</ept> can represent a real number in decimal or hexadecimal format or special floating-point values for infinty and NaN (“not a number”).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>text<ept i="0">&lt;/c0&gt;</ept>として渡される文字列は、10進または16進数形式における実数、または無限大とNaN（「非数」）に対する特別な浮動小数点値を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string to print after all items have been printed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべての項目が出力された後に出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string to print.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>出力するメッセージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string to repeat.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>繰り返すことになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string to use for the index conversion.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インデックス変換に使う文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string’s hash value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その文字列の持つハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string’s value represented as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値のコレクションとして表される、文字列のもつ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The subrange of the array to replace.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>置き換えられることになる配列の下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The subrange of the collection to remove.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除することになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The subrange of the collection to replace.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>置き換えることになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sum of this value and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>, rounded to a representable value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の合計、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sum of types that can be used as a Quick Look representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「クイックルック」表現として使われることのできる型の総和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The tables below list the operators declared in the standard library, including their associativity and precedence group.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の表は、標準ライブラリにおいて定義される演算子を、それらの結合性と優先順位グループを含めて一覧にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The textual representation for each item is the same as that obtained by calling <bpt i="1" x="1">&lt;c1&gt;</bpt>String(item)<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各項目のテキスト表現は、<bpt i="1" x="1">&lt;c1&gt;</bpt>String(item)<ept i="1">&lt;/c1&gt;</ept>を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The textual representation for each item is the same as that obtained by calling <bpt i="1" x="1">&lt;c1&gt;</bpt>String(reflecting: item)<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>各項目のテキスト表現は、<bpt i="1" x="1">&lt;c1&gt;</bpt>String(reflecting: item)<ept i="1">&lt;/c1&gt;</ept>を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The total number of elements that the array can contain using its current storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その配列がそれの現在のストレージを使って含むことができる要素の総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The trailing surrogate code unit of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> when encoded in UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-16でエンコードされる時の<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の後続サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The traversal protocol modeled by <bpt i="0" x="0">&lt;c0&gt;</bpt>children<ept i="0">&lt;/c0&gt;</ept>’s indices (<bpt i="1" x="1">&lt;c1&gt;</bpt>ForwardIndex<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>BidirectionalIndex<ept i="2">&lt;/c2&gt;</ept>, or <bpt i="3" x="3">&lt;c3&gt;</bpt>RandomAccessIndex<ept i="3">&lt;/c3&gt;</ept>) is captured so that the resulting <bpt i="4" x="4">&lt;c4&gt;</bpt>Mirror<ept i="4">&lt;/c4&gt;</ept>’s <bpt i="5" x="5">&lt;c5&gt;</bpt>children<ept i="5">&lt;/c5&gt;</ept> may be upgraded later.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>children<ept i="0">&lt;/c0&gt;</ept>のインデックス（<bpt i="1" x="1">&lt;c1&gt;</bpt>ForwardIndex<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>BidirectionalIndex<ept i="2">&lt;/c2&gt;</ept>、または<bpt i="3" x="3">&lt;c3&gt;</bpt>RandomAccessIndex<ept i="3">&lt;/c3&gt;</ept>）によってモデルにされるトラバーサルプロトコルは、結果として生じる<bpt i="4" x="4">&lt;c4&gt;</bpt>Mirror<ept i="4">&lt;/c4&gt;</ept>の<bpt i="5" x="5">&lt;c5&gt;</bpt>children<ept i="5">&lt;/c5&gt;</ept>が後でアップグレードされることができるようにキャプチャされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The two arguments must have the same <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの引数は、同じ<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The two loops in the following example produce the same output:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下の例における２つのループは、同じ出力を生み出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type aliased by <bpt i="0" x="0">&lt;c0&gt;</bpt>BooleanLiteralType<ept i="0">&lt;/c0&gt;</ept> must conform to the <bpt i="1" x="1">&lt;c1&gt;</bpt>ExpressibleByBooleanLiteral<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>BooleanLiteralType<ept i="0">&lt;/c0&gt;</ept>によってエイリアス（別名）を付けられる型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>ExpressibleByBooleanLiteral<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type of element returned by <bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>によって返される要素のもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type of element traversed by the iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイテレータによって辿っていかれる要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type of the elements of an array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列リテラルの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type of the underlying collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基礎をなすコレクションの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type used to represent sub-structure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>下位構造体を再表現するために使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The types of <bpt i="0" x="0">&lt;c0&gt;</bpt>shortForm<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>longForm<ept i="1">&lt;/c1&gt;</ept> in the following code sample are the same:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下のコード例における<bpt i="0" x="0">&lt;c0&gt;</bpt>shortForm<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>longForm<ept i="1">&lt;/c1&gt;</ept>の型は、同じです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The types of the two underlying indices must be identical.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの基礎をなすインデックスの型は同一でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The underlying collection of the slice.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このスライスの基礎をなすコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The underlying collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基礎をなすコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The underlying iterator whose elements are being filtered.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基礎をなすイテレータ、それの要素がフィルタされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The underlying sequence whose elements are being filtered</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基盤となるシーケンス、それの要素がフィルタされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The unit in the last place of 1.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>1.0の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The unit in the last place of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The upper and lower bounds of <bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept> must be valid indices of the string and not equal to the string’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept>範囲の上方および下方の境界はこの文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The upper and lower bounds of <bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept> must be valid indices of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept>の上方および下方の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The upper and lower bounds of the <bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept> range must be valid indices of the collection and <bpt i="1" x="1">&lt;c1&gt;</bpt>bounds.upperBound<ept i="1">&lt;/c1&gt;</ept> must be less than the collection’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept>範囲の上方および下方の境界はこのコレクションの有効なインデックスでなければなりません、そして<bpt i="1" x="1">&lt;c1&gt;</bpt>bounds.upperBound<ept i="1">&lt;/c1&gt;</ept>はこのコレクションの末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The upper and lower bounds of the <bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept> range must be valid indices of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>bounds<ept i="0">&lt;/c0&gt;</ept>範囲の上方および下方の境界は、このコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The upper bound for the range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>範囲の上側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value associated with <bpt i="0" x="0">&lt;c0&gt;</bpt>key<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>key<ept i="1">&lt;/c1&gt;</ept> is in the dictionary; otherwise, <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>key<ept i="0">&lt;/c0&gt;</ept>と結び付けられた値、<bpt i="1" x="1">&lt;c1&gt;</bpt>key<ept i="1">&lt;/c1&gt;</ept>が辞書の中にあるならば；そうでなければ、<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of <bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept> must be greater than or equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>maxLength<ept i="0">&lt;/c0&gt;</ept>の値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is represented exactly by the new instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の値は、新しいインスタンスによって正確に表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>の値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of <bpt i="3" x="3">&lt;c3&gt;</bpt>significandWidth<ept i="3">&lt;/c3&gt;</ept> is always -1 or between zero and <bpt i="4" x="4">&lt;c4&gt;</bpt>significandBitCount<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>significandWidth<ept i="3">&lt;/c3&gt;</ept>の値は、常に-1、もしくはゼロと<bpt i="4" x="4">&lt;c4&gt;</bpt>significandBitCount<ept i="4">&lt;/c4&gt;</ept>の間です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of every element in this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このコレクションのすべての要素の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of the <bpt i="0" x="0">&lt;c0&gt;</bpt>member<ept i="0">&lt;/c0&gt;</ept> parameter if it was a member of the set; otherwise, <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>member<ept i="0">&lt;/c0&gt;</ept>パラメータの値、それが集合のメンバであったならば；そうでなければ、<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value of the new instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいインスタンスのための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>bitPattern<ept i="0">&lt;/c0&gt;</ept> is interpreted in the binary interchange format defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>bitPattern<ept i="0">&lt;/c0&gt;</ept>として渡される値は、IEEE 754仕様書で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> must not offset <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept> beyond the <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept> or before the <bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept> of this collection, unless the index passed as <bpt i="4" x="4">&lt;c4&gt;</bpt>limit<ept i="4">&lt;/c4&gt;</ept> prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>として渡される値は、このコレクションの<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>を越えてまたは<bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept>の前で<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>を補ってはなりません、<bpt i="4" x="4">&lt;c4&gt;</bpt>limit<ept i="4">&lt;/c4&gt;</ept>として渡されるインデックスがそれらの境界を越えて補うのを防止するのでない限り。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> must not offset <bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept> beyond the <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept> or before the <bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept> of this collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>として渡される値は、このコレクションの<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>を越えてまたは<bpt i="3" x="3">&lt;c3&gt;</bpt>startIndex<ept i="3">&lt;/c3&gt;</ept>の前で<bpt i="1" x="1">&lt;c1&gt;</bpt>i<ept i="1">&lt;/c1&gt;</ept>を補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept> must not result in such an operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>n<ept i="0">&lt;/c0&gt;</ept>として渡された値は、そのような演算結果に終わってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value that was removed, or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if the key was not present in the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>削除された値、またはキーがこの辞書の中に存在しなかったならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value that was replaced, or <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> if a new key-value pair was added.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>取って代わられた値、または新しいキー値ペアが加えられたならば<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to add.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to compare with this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と比較するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to convert to a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列へ変換する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to multiply by this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値と掛け合わせられることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to subtract from this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to subtract.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値を取り去ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to use for the new instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいインスタンスのために使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value to use when dividing this value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値を除算するときに使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value type of a dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルの値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value wrapped by this instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスによってラップされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The values passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>exponentBitPattern<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>significandBitPattern<ept i="1">&lt;/c1&gt;</ept> are interpreted in the binary interchange format defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>exponentBitPattern<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>significandBitPattern<ept i="1">&lt;/c1&gt;</ept>に渡される値は、IEEE 754仕様書で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The view to use for the index conversion.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インデックス変換に使うビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The way these code points are grouped is defined by a canonical, localized, or otherwise tailored Unicode segmentation algorithm.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのコード点が一群にされる方法は、ある正準の、ローカライズされた、ないしは別の方法で仕立てられたユニコード分節アルゴリズムによって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The width of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> when encoded in UTF-16, either <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-16でエンコードされる時の<bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>の幅、<bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept>または<bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>のどちらか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wrapped value of this instance, unwrapped without checking whether the instance is <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>インスタンスのラップされた値、そのインスタンスが<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>かどうか確認せずにアンラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The “past the end” index of the resulting subsequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>結果のシーケンスの「終わりを過ぎた」インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The “past the end” position for the set—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合に対する「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are some edge cases to be aware of:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>知られているいくつかの境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is no guarantee that <bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept> is an element of the sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>end<ept i="0">&lt;/c0&gt;</ept>がこのシーケンスの要素であることは保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is no notion of identity for structs, enums, functions, or tuples.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>構造体、列挙、関数、またはタプルに対して識別の観念はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There may be smaller positive numbers, but they are <bpt i="0" x="0">&lt;e0&gt;</bpt>subnormal<ept i="0">&lt;/e0&gt;</ept>, meaning that they are represented with less precision than normal numbers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>より小さい正の数があるでしょう、しかしそれらは<bpt i="0" x="0">&lt;e0&gt;</bpt>サブノーマル<ept i="0">&lt;/e0&gt;</ept>であり、それらがノーマル数よりより少ない精密さで表現されることを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Therefore, <bpt i="4" x="4">&lt;c4&gt;</bpt>x.binade<ept i="4">&lt;/c4&gt;</ept> is equal to <bpt i="5" x="5">&lt;c5&gt;</bpt>1.0 * 2**4<ept i="5">&lt;/c5&gt;</ept>, or <bpt i="6" x="6">&lt;c6&gt;</bpt>16.0<ept i="6">&lt;/c6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それゆえに、<bpt i="4" x="4">&lt;c4&gt;</bpt>x.binade<ept i="4">&lt;/c4&gt;</ept>は<bpt i="5" x="5">&lt;c5&gt;</bpt>1.0 * 2**4<ept i="5">&lt;/c5&gt;</ept>、または<bpt i="6" x="6">&lt;c6&gt;</bpt>16.0<ept i="6">&lt;/c6&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Therefore, <bpt i="6" x="6">&lt;c6&gt;</bpt>options<ept i="6">&lt;/c6&gt;</ept> is emptied and the intersection between <bpt i="7" x="7">&lt;c7&gt;</bpt>.express<ept i="7">&lt;/c7&gt;</ept> and <bpt i="8" x="8">&lt;c8&gt;</bpt>options<ept i="8">&lt;/c8&gt;</ept> is returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>したがって、<bpt i="6" x="6">&lt;c6&gt;</bpt>options<ept i="6">&lt;/c6&gt;</ept>は空にされて<bpt i="7" x="7">&lt;c7&gt;</bpt>.express<ept i="7">&lt;/c7&gt;</ept>と<bpt i="8" x="8">&lt;c8&gt;</bpt>options<ept i="8">&lt;/c8&gt;</ept>の間の交叉が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Therefore, a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept> instance cannot represent an empty range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それゆえに、<bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスは空の範囲として表すことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Therefore, the first in any sequence of mutating operations may cost O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>) time and space.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それゆえに、何らかの一連の変化を伴う演算において最初に、O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)時間と空間を要するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Therefore, the fundamental difference between random-access and bidirectional collections is that operations that depend on index movement or distance measurement offer significantly improved efficiency.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それゆえに、無作為アクセスと二方向性のコレクションの根本的な違いは、インデックス移動や間隔測定に依存する演算が、著しく改善される効率を提示することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There’s almost always a better way to do anything.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ほとんど常により良い方法が何をするにも存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These characteristics are guaranteed only when all participating protocols' performance expectations are satisfied.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらの特徴は、全ての関与しているプロトコルの性能予想が満たされる場合にのみ保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These code points are combined by Unicode’s boundary algorithms into <bpt i="0" x="0">&lt;e0&gt;</bpt>extended grapheme clusters<ept i="0">&lt;/e0&gt;</ept>, represented by the <bpt i="1" x="1">&lt;c1&gt;</bpt>Character<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのコード点は、ユニコード境界アルゴリズムによって<bpt i="0" x="0">&lt;e0&gt;</bpt>拡張書記素クラスタ<ept i="0">&lt;/e0&gt;</ept>へと、<bpt i="1" x="1">&lt;c1&gt;</bpt>Character<ept i="1">&lt;/c1&gt;</ept>型によって表されるものへと、組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by Swift’s <bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのコード点は、ユニコード境界アルゴリズムによって拡張書記素クラスタへと、Swiftのもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept>型によって表されるものへと、組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのコード点は、ユニコードの境界アルゴリズムによって拡張書記素クラスタへと組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These counters can only be used as indices in instances of zero-based, integer-indexed collections, such as <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのカウンタはインデックスとして使われることが、ゼロ基盤の、整数インデックスのコレクション、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>そして<bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>などのインスタンスにおいてのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These elements are computed lazily, each time they’re read, by calling the transform function on a base element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらの要素は、それらが読み出されるたびに、基盤要素上で変換関数を呼び出すことによって遅延計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These letters start with <bpt i="0" x="0">&lt;c0&gt;</bpt>"A"<ept i="0">&lt;/c0&gt;</ept> if <bpt i="1" x="1">&lt;c1&gt;</bpt>uppercase<ept i="1">&lt;/c1&gt;</ept> is <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>; otherwise, with <bpt i="3" x="3">&lt;c3&gt;</bpt>"a"<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>uppercase<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>ならば、これらの文字は<bpt i="0" x="0">&lt;c0&gt;</bpt>"A"<ept i="0">&lt;/c0&gt;</ept>で始まります；そうでなければ、<bpt i="3" x="3">&lt;c3&gt;</bpt>"a"<ept i="3">&lt;/c3&gt;</ept>で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These pointers are only valid for the duration of the call to <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのポインタは、ただ<bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>への呼び出しの間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These two operations impose a strict total order on the values of a type, in which exactly one of the following must be true for any two values <bpt i="2" x="2">&lt;c2&gt;</bpt>a<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>b<ept i="3">&lt;/c3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これら２つの演算子は、ある型の値に全順序を課します、そこにおいて任意の２つの値<bpt i="2" x="2">&lt;c2&gt;</bpt>a<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>b<ept i="3">&lt;/c3&gt;</ept>に対して、厳密に以下のうちの１つが真でなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This <bpt i="0" x="0">&lt;e0&gt;</bpt>key-based<ept i="0">&lt;/e0&gt;</ept> subscript returns the value for the given key if the key is found in the dictionary, or <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> if the key is not found.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この<bpt i="0" x="0">&lt;e0&gt;</bpt>キー基盤<ept i="0">&lt;/e0&gt;</ept>の添え字は、そのキーが辞書において見つけられるならば指定されたキーに対する値を、またはキーが見つからないならば<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This assignment to the <bpt i="0" x="0">&lt;c0&gt;</bpt>nextStop<ept i="0">&lt;/c0&gt;</ept> constant calls this string literal initializer behind the scenes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nextStop<ept i="0">&lt;/c0&gt;</ept>定数への代入はこの文字列リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This associated type appears as a requirement in the <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol, but it is restated here with stricter constraints.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関連型は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルの中のある要件として現れます、しかしここでより厳格な制約で言い直されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This buffer can then be shared by different copies of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このバッファは、それからある文字列の異なるコピーによって共有されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be achieved via a typed <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept> or via a raw pointer <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>, as follows, where <bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept> is the previous type and <bpt i="3" x="3">&lt;c3&gt;</bpt>T<ept i="3">&lt;/c3&gt;</ept> is the copied value’s type: <bpt i="4" x="4">&lt;c4&gt;</bpt>let typedPtr = self.bindMemory(to: U.self, capacity: 1)<ept i="4">&lt;/c4&gt;</ept> <bpt i="5" x="5">&lt;c5&gt;</bpt>typedPtr.deinitialize(count: 1)<ept i="5">&lt;/c5&gt;</ept> <bpt i="6" x="6">&lt;c6&gt;</bpt>self.initializeMemory(as: T.self, to: newValue)<ept i="6">&lt;/c6&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、型付けされた<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer<ept i="0">&lt;/c0&gt;</ept>経由でまたは生のポインタ<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>経由で獲得されることができます、以下のように、そこで<bpt i="2" x="2">&lt;c2&gt;</bpt>U<ept i="2">&lt;/c2&gt;</ept>は以前の型で、<bpt i="3" x="3">&lt;c3&gt;</bpt>T<ept i="3">&lt;/c3&gt;</ept>はコピーされた値の型です：<bpt i="4" x="4">&lt;c4&gt;</bpt>let typedPtr = self.bindMemory(to: U.self, capacity: 1)<ept i="4">&lt;/c4&gt;</ept> <bpt i="5" x="5">&lt;c5&gt;</bpt>typedPtr.deinitialize(count: 1)<ept i="5">&lt;/c5&gt;</ept> <bpt i="6" x="6">&lt;c6&gt;</bpt>self.initializeMemory(as: T.self, to: newValue)<ept i="6">&lt;/c6&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This capability can be especially important when the order of elements in the literal is significant.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この能力は、そのリテラル中の要素の順序が意味を持つ場合に特に重要となりえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This case is the default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この場合が初期状態となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This chapter describes the global functions defined in the Swift standard library.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この章は、Swift標準ライブラリにおいて定義されるグローバル関数を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This chapter describes the global type aliases defined in the Swift standard library.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この章は、スウィフト標準ライブラリで定義されるグローバルな型エイリアスを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This chapter describes the operator declarations and corresponding global operator functions defined in the Swift standard library.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この章は、Swift標準ライブラリで定義される演算子宣言と関連グローバル演算子関数を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This contrasts with <bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept>, which can store its elements in either a contiguous region of memory or an <bpt i="2" x="2">&lt;c2&gt;</bpt>NSArray<ept i="2">&lt;/c2&gt;</ept> instance if its <bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept> type is a class or <bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは<bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept>とは対照的です、それはそれの要素をメモリの隣接領域かもしくは、それの<bpt i="3" x="3">&lt;c3&gt;</bpt>Element<ept i="3">&lt;/c3&gt;</ept>型がクラスまたは<bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept>プロトコルならば<bpt i="2" x="2">&lt;c2&gt;</bpt>NSArray<ept i="2">&lt;/c2&gt;</ept>インスタンスのどちらかに格納することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This documentation contains preliminary information about an API or technology in development.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この文書は、開発でのテクノロジーまたはAPIのための事前の情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This ensures that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept> instances and for other purposes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは文字列比較および他の演算が常にある単一の、安定した結果を持つことを保証して、文字列が<bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept>インスタンスにおけるキーとしておよび他の目的のために使われることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example appends the elements of a <bpt i="0" x="0">&lt;c0&gt;</bpt>Range&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept> instance to an array of integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Range&lt;Int&gt;<ept i="0">&lt;/c0&gt;</ept>インスタンスの要素を整数からなる配列に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example appends the elements of a <bpt i="1" x="1">&lt;c1&gt;</bpt>Range&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept> instance to an array of integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはある<bpt i="1" x="1">&lt;c1&gt;</bpt>Range&lt;Int&gt;<ept i="1">&lt;/c1&gt;</ept>インスタンスに属する複数要素を整数の配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example appends the elements of a <bpt i="2" x="2">&lt;c2&gt;</bpt>Range&lt;Int&gt;<ept i="2">&lt;/c2&gt;</ept> instance to an array of integers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>例えば、あなたはある<bpt i="2" x="2">&lt;c2&gt;</bpt>Range&lt;Int&gt;<ept i="2">&lt;/c2&gt;</ept>インスタンスに属する複数要素を整数からなるある配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example below uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>withMutableCharacters(_:)<ept i="0">&lt;/c0&gt;</ept> method to truncate the string <bpt i="1" x="1">&lt;c1&gt;</bpt>str<ept i="1">&lt;/c1&gt;</ept> at the first space and to return the remainder of the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この下の例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>withMutableCharacters(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って最初の空白で文字列<bpt i="1" x="1">&lt;c1&gt;</bpt>str<ept i="1">&lt;/c1&gt;</ept>を切り取って、残りの文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example checks to see whether a favorite actor is in an array storing a movie’s cast.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、お気に入りの俳優が映画出演者を格納する配列の中にいるかどうか見るために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example checks to see whether a particular insect is in an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある特定の昆虫が配列の中にあるかどうか見るために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example creates a <bpt i="2" x="2">&lt;c2&gt;</bpt>ClosedRange&lt;Character&gt;<ept i="2">&lt;/c2&gt;</ept> from “a” up to, and including, “z”.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、「a」から「z」までの、そしてそれを含む<bpt i="2" x="2">&lt;c2&gt;</bpt>ClosedRange&lt;Character&gt;<ept i="2">&lt;/c2&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example creates a <bpt i="2" x="2">&lt;c2&gt;</bpt>Range&lt;Double&gt;<ept i="2">&lt;/c2&gt;</ept> from zero up to, but not including, 5.0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ゼロから5.0までの、しかしそれを含めない<bpt i="2" x="2">&lt;c2&gt;</bpt>Range&lt;Double&gt;<ept i="2">&lt;/c2&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example creates a <bpt i="3" x="3">&lt;c3&gt;</bpt>CountableClosedRange&lt;Int&gt;<ept i="3">&lt;/c3&gt;</ept> from zero up to, and including, nine.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ゼロから９までの、そしてそれを含む<bpt i="3" x="3">&lt;c3&gt;</bpt>CountableClosedRange&lt;Int&gt;<ept i="3">&lt;/c3&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example creates a <bpt i="3" x="3">&lt;c3&gt;</bpt>CountableRange&lt;Int&gt;<ept i="3">&lt;/c3&gt;</ept> from zero up to, but not including, 5.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ゼロから5.0までの、しかしそれを含めない<bpt i="3" x="3">&lt;c3&gt;</bpt>CountableRange&lt;Int&gt;<ept i="3">&lt;/c3&gt;</ept>を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example creates an instance of <bpt i="1" x="1">&lt;c1&gt;</bpt>ShippingOptions<ept i="1">&lt;/c1&gt;</ept> with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="1" x="1">&lt;c1&gt;</bpt>ShippingOptions<ept i="1">&lt;/c1&gt;</ept>のインスタンスを最も高い要素を越える生の値で、全ての宣言済み静的メンバを実質的に含むあるビットマスクで、作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example declares a constant with three currently allowed moves.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は３つの現在許される動きを持つある定数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example defines an <bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept> type with an <bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept> method named <bpt i="2" x="2">&lt;c2&gt;</bpt>getIntegerValue()<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="2" x="2">&lt;c2&gt;</bpt>getIntegerValue()<ept i="2">&lt;/c2&gt;</ept>と名前を付けられる<bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept>メソッドを持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>IntegerRef<ept i="0">&lt;/c0&gt;</ept>型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は文字列からなる配列のあるスライスの取得を実演します、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example demonstrates that the <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある文字列の<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>ビューが、そのビューのインデックスであろうとビューそれ自体が反復されていようと同じ文字を同じ順序で返すのを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は文字列「Swift」の文字を列挙します、そして各文字をその文字列でのそれの場所とともに出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example finds the smallest value in an array of height measurements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、身長計測の配列の中で最も小さい値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example first finds the position of a space (UTF-16 code point <bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>) in a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept> view and then uses this method find the same position in the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある空白（UTF-16コード点<bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>ビューの中で見つけて、それからこのメソッドを使って文字列における同じ位置を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example first finds the position of a space (UTF-16 code point <bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>) in a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept> view and then uses this method to find the same position in the string’s <bpt i="2" x="2">&lt;c2&gt;</bpt>unicodeScalars<ept i="2">&lt;/c2&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある空白（UTF-16コード点<bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>ビューの中で見つけて、それからこのメソッドを使って文字列のもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>unicodeScalars<ept i="2">&lt;/c2&gt;</ept>ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example first finds the position of a space (UTF-16 code point <bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>) in a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept> view and then uses this method to find the same position in the string’s <bpt i="2" x="2">&lt;c2&gt;</bpt>utf8<ept i="2">&lt;/c2&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある空白（UTF-16コード点<bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf16<ept i="1">&lt;/c1&gt;</ept>ビューの中で見つけて、それからこのメソッドを使って文字列のもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>utf8<ept i="2">&lt;/c2&gt;</ept>ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example first finds the position of a space (UTF-8 code point <bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>) in a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept> view and then uses this method find the same position in the string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある空白（UTF-8コード点<bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>ビューの中で見つけて、それからこのメソッドを使って文字列における同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example first finds the position of a space (UTF-8 code point <bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>) in a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept> view and then uses this method to find the same position in the string’s <bpt i="2" x="2">&lt;c2&gt;</bpt>unicodeScalars<ept i="2">&lt;/c2&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある空白（UTF-8コード点<bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>ビューの中で見つけて、それからこのメソッドを使って文字列のもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>unicodeScalars<ept i="2">&lt;/c2&gt;</ept>ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example first finds the position of a space (UTF-8 code point <bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>) in a string’s <bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept> view and then uses this method to find the same position in the string’s <bpt i="2" x="2">&lt;c2&gt;</bpt>utf16<ept i="2">&lt;/c2&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある空白（UTF-8コード点<bpt i="0" x="0">&lt;c0&gt;</bpt>32<ept i="0">&lt;/c0&gt;</ept>）の位置を文字列のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>utf8<ept i="1">&lt;/c1&gt;</ept>ビューの中で見つけて、それからこのメソッドを使って文字列のもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>utf16<ept i="2">&lt;/c2&gt;</ept>ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example iterates over the indices and elements of a set, building a list of indices of names with five or fewer letters.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある集合のインデックスと要素のすべてにわたって反復します、５つまたはより少ない文字を持つ名前のインデックスのリストを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example performs an arithmetic operation on an optional integer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、算術演算をあるオプショナル整数上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example performs an arithmetic operation with an optional result on an optional integer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、オプショナル結果をもつ算術演算をあるオプショナル整数上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example prints the characters of a string in reverse order:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある文字列に属する文字を逆順で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example prints the elements of an array in reverse order:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある配列に属する要素を逆順で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example removes the element <bpt i="0" x="0">&lt;c0&gt;</bpt>"sugar"<ept i="0">&lt;/c0&gt;</ept> from a set of ingredients.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、要素<bpt i="0" x="0">&lt;c0&gt;</bpt>"sugar"<ept i="0">&lt;/c0&gt;</ept>を一揃いの材料から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example removes the hyphen from the middle of a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある文字列の真ん中からハイフンを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example removes the middle element from an array of measurements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、測定結果からなる配列から真ん中の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example removes two elements from the middle of an array of measurements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、測定結果からなる配列の真ん中から２つの要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how a <bpt i="4" x="4">&lt;c4&gt;</bpt>CollectionOfTwo<ept i="4">&lt;/c4&gt;</ept> instance can be created holding the values of a point, and then iterated over using a <bpt i="5" x="5">&lt;c5&gt;</bpt>for<ept i="5">&lt;/c5&gt;</ept>-<bpt i="6" x="6">&lt;c6&gt;</bpt>in<ept i="6">&lt;/c6&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、どのように<bpt i="4" x="4">&lt;c4&gt;</bpt>CollectionOfTwo<ept i="4">&lt;/c4&gt;</ept>インスタンスがある地点の値を保持して作成されるか、そしてそれから<bpt i="5" x="5">&lt;c5&gt;</bpt>for<ept i="5">&lt;/c5&gt;</ept>-<bpt i="6" x="6">&lt;c6&gt;</bpt>in<ept i="6">&lt;/c6&gt;</ept>ループを使って全体にわたって繰り返されることができるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how an array of <bpt i="0" x="0">&lt;c0&gt;</bpt>[Int]<ept i="0">&lt;/c0&gt;</ept> instances can be joined, using another <bpt i="1" x="1">&lt;c1&gt;</bpt>[Int]<ept i="1">&lt;/c1&gt;</ept> instance as the separator:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、どのようにいくつかのの<bpt i="0" x="0">&lt;c0&gt;</bpt>[Int]<ept i="0">&lt;/c0&gt;</ept>インスタンスからなる配列が別の<bpt i="1" x="1">&lt;c1&gt;</bpt>[Int]<ept i="1">&lt;/c1&gt;</ept>インスタンスをセパレータとしてつなぎ合わされるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how an iterator can be used explicitly to emulate a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、イテレータが明示的に使われて<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how to find the sum of an array of numbers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、どのように数からなる配列の合計を見出すかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how to use the <bpt i="0" x="0">&lt;c0&gt;</bpt>max(by:)<ept i="0">&lt;/c0&gt;</ept> method on a dictionary to find the key-value pair with the highest value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>max(by:)<ept i="0">&lt;/c0&gt;</ept>メソッドを辞書上で使って、最も高い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how to use the <bpt i="0" x="0">&lt;c0&gt;</bpt>min(by:)<ept i="0">&lt;/c0&gt;</ept> method on a dictionary to find the key-value pair with the lowest value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>min(by:)<ept i="0">&lt;/c0&gt;</ept>メソッドを辞書上で使って、最も低い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how you can check an array for an expense greater than $100.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、どのようにあなたが$100より大きい出費についてある配列を調べることができるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows how you can modify one of the names in an array of students.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例が示すのは、どうやってあなたが学生らの配列の中の名前の１つを修正できるかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example shows two overlapping ranges:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は２つの重なった範囲を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example tests whether one countable range begins with the elements of another countable range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある可付番範囲が別の可付番範囲の要素で始まるかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example tests whether one countable range shares the same elements as another countable range and an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、ある可付番範囲が同じ要素を別の可付番範囲とそしてある配列と共有するかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept> method to check whether next-day shipping is in the <bpt i="1" x="1">&lt;c1&gt;</bpt>availableOptions<ept i="1">&lt;/c1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って翌日出荷が<bpt i="1" x="1">&lt;c1&gt;</bpt>availableOptions<ept i="1">&lt;/c1&gt;</ept>インスタンスの中のあるかどうか確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept> method to test whether an integer is a member of a set of prime numbers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使ってある整数がある一揃いの素数のメンバであるかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>intersection(_:)<ept i="0">&lt;/c0&gt;</ept> method to limit the available shipping options to what can be used with a PO Box destination.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>intersection(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、利用可能な出荷オプションを私書箱宛先で使われることができるものに制限します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>lexicographicallyPrecedes<ept i="0">&lt;/c0&gt;</ept> method to test which array of integers comes first in a lexicographical ordering.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は<bpt i="0" x="0">&lt;c0&gt;</bpt>lexicographicallyPrecedes<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、どの整数配列がある語彙筆記的順序において最初に来るかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>negate()<ept i="0">&lt;/c0&gt;</ept> method to negate the value of the variable <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は<bpt i="0" x="0">&lt;c0&gt;</bpt>negate()<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、変数<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>の値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the <bpt i="0" x="0">&lt;c0&gt;</bpt>union(_:)<ept i="0">&lt;/c0&gt;</ept> method to add two more shipping options to the default set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、<bpt i="0" x="0">&lt;c0&gt;</bpt>union(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って２つのさらなる出荷オプションを省略時のセットに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This example uses the conditional downcast operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>as?<ept i="0">&lt;/c0&gt;</ept>) to conditionally cast the <bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept> constant declared above to an instance of Swift’s <bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この例は、条件ダウンキャスト演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>as?<ept i="0">&lt;/c0&gt;</ept>）を使って、上で定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>s<ept i="1">&lt;/c1&gt;</ept>定数をSwiftの<bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>型へ条件付きでキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この指数成長戦略は、ある要素を加えることは、多くの追加操作の遂行を平均すると、定数時間に起こることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function can be used to replace many cases that were previously handled using C-style <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept> loops.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数は、C形式の<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>ループを使用して前もって取り扱われたケースの多くを置き換えるのに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function can be used to replace many instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyIterator<ept i="0">&lt;/c0&gt;</ept> that wrap a closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数は、クロージャにラップされた<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyIterator<ept i="0">&lt;/c0&gt;</ept>に属するインスタンスのうちの多くを置き換えるのに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function does <bpt i="0" x="0">&lt;e0&gt;</bpt>not<ept i="0">&lt;/e0&gt;</ept> modify <bpt i="1" x="1">&lt;c1&gt;</bpt>object<ept i="1">&lt;/c1&gt;</ept>; the use of <bpt i="2" x="2">&lt;c2&gt;</bpt>inout<ept i="2">&lt;/c2&gt;</ept> is an implementation artifact.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数は<bpt i="1" x="1">&lt;c1&gt;</bpt>object<ept i="1">&lt;/c1&gt;</ept>を修正<bpt i="0" x="0">&lt;e0&gt;</bpt>しません<ept i="0">&lt;/e0&gt;</ept>；<bpt i="2" x="2">&lt;c2&gt;</bpt>inout<ept i="2">&lt;/c2&gt;</ept>の使用は、技巧上の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function is best avoided in favor of <bpt i="0" x="0">&lt;c0&gt;</bpt>withVaList<ept i="0">&lt;/c0&gt;</ept>, but occasionally (i.e. in a <bpt i="1" x="1">&lt;c1&gt;</bpt>class<ept i="1">&lt;/c1&gt;</ept> initializer) you may find that the language rules don’t allow you to use <bpt i="2" x="2">&lt;c2&gt;</bpt>withVaList<ept i="2">&lt;/c2&gt;</ept> as intended.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数は、<bpt i="0" x="0">&lt;c0&gt;</bpt>withVaList<ept i="0">&lt;/c0&gt;</ept>の恩恵によって回避されるのが最良です、しかし時たま（例えば、<bpt i="1" x="1">&lt;c1&gt;</bpt>class<ept i="1">&lt;/c1&gt;</ept>イニシャライザにおいて）あなたは言語規則があなたに<bpt i="2" x="2">&lt;c2&gt;</bpt>withVaList<ept i="2">&lt;/c2&gt;</ept>を使うのを希望通りに許可しないことを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function is safe to use for mutating functions in multithreaded code because a false positive implies that there is already a user-level data race on the value being mutated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数はマルチスレッドコードにおける可変の関数の使用に対して安全です、なぜなら偽陽性は可変にされている値上で既にユーザレベルのデータ競合の存在を暗黙的に伴うからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function is the only requirement of the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルのただ１つの要件です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function uses the least specific nonmatching property of the date to determine the result of the comparison.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数は、比較の結果を判定するのに、最小量となる特定の不一致日付プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function’s effects vary depending on the build flag used:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数の効果は使用されるビルドフラグに依存して多様に異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This guarantees the safety of operations that depend on a sequence being finite, such as checking to see whether a collection contains an element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、有限であるシーケンスに基づいた演算の安全性を保証します、例えばコレクションがある要素を含むかどうか見るために検査するなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This header may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このヘッダを計算するのは、些細なことではありません；通常良い考えであるのは、この情報をインスタンスが作成されるときに「ヘッダ」領域に格納することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This implements Strideable to provide a view of byte-addressable memory.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これはStrideableを実装することでバイトアドレス指定のメモリのあるビュー（見方）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This index must be a valid index of <bpt i="0" x="0">&lt;c0&gt;</bpt>String(unicodeScalars).utf16<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスは<bpt i="0" x="0">&lt;c0&gt;</bpt>String(unicodeScalars).utf16<ept i="0">&lt;/c0&gt;</ept>の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This index must be a valid index of <bpt i="0" x="0">&lt;c0&gt;</bpt>String(unicodeScalars).utf8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスは<bpt i="0" x="0">&lt;c0&gt;</bpt>String(unicodeScalars).utf8<ept i="0">&lt;/c0&gt;</ept>の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This index must be a valid index of <bpt i="0" x="0">&lt;c0&gt;</bpt>characters.utf16<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスは<bpt i="0" x="0">&lt;c0&gt;</bpt>characters.utf16<ept i="0">&lt;/c0&gt;</ept>の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This index must be a valid index of <bpt i="0" x="0">&lt;c0&gt;</bpt>characters.utf8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインデックスは<bpt i="0" x="0">&lt;c0&gt;</bpt>characters.utf8<ept i="0">&lt;/c0&gt;</ept>の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この情報は変更される場合があり、この文書に沿って実装されるソフトウェアは最終的なオペレーティングシステム・ソフトウェアでテストされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer always succeeds, even if the value passed as <bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept> exceeds the static properties declared as part of the option set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは常に成功します、<bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept>として渡される値がオプションセットの部分として宣言される静的プロパティを上回るとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer creates an option set with a raw value of zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは、０個の生の値を持つオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer does not try to repair ill-formed UTF-8 code unit sequences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは、誤形式UTF-8コード単位シーケンスの修復を試みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer implements the <bpt i="0" x="0">&lt;c0&gt;</bpt>scaleB<ept i="0">&lt;/c0&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは、IEEE 754仕様で定義される<bpt i="0" x="0">&lt;c0&gt;</bpt>scaleB<ept i="0">&lt;/c0&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer implements the IEEE 754 <bpt i="0" x="0">&lt;c0&gt;</bpt>copysign<ept i="0">&lt;/c0&gt;</ept> operation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは、IEEE 754 <bpt i="0" x="0">&lt;c0&gt;</bpt>copysign<ept i="0">&lt;/c0&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer is called five times when processing the string literal in the example above; once each for the following: the integer <bpt i="0" x="0">&lt;c0&gt;</bpt>5<ept i="0">&lt;/c0&gt;</ept>, the string <bpt i="1" x="1">&lt;c1&gt;</bpt>" x "<ept i="1">&lt;/c1&gt;</ept>, the integer <bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>, the string <bpt i="3" x="3">&lt;c3&gt;</bpt>" = "<ept i="3">&lt;/c3&gt;</ept>, and the result of the expression <bpt i="4" x="4">&lt;c4&gt;</bpt>5 * 2<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは上の例での文字列リテラル処理の時に５回呼び出されます；以下のそれぞれに対して１回：整数<bpt i="0" x="0">&lt;c0&gt;</bpt>5<ept i="0">&lt;/c0&gt;</ept>、文字列<bpt i="1" x="1">&lt;c1&gt;</bpt>" x "<ept i="1">&lt;/c1&gt;</ept>、整数<bpt i="2" x="2">&lt;c2&gt;</bpt>2<ept i="2">&lt;/c2&gt;</ept>、文字列<bpt i="3" x="3">&lt;c3&gt;</bpt>" = "<ept i="3">&lt;/c3&gt;</ept>、そして式の結果<bpt i="4" x="4">&lt;c4&gt;</bpt>5 * 2<ept i="4">&lt;/c4&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは空の配列リテラルで初期化するのと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer is equivalent to the following calculation, where <bpt i="0" x="0">&lt;c0&gt;</bpt>**<ept i="0">&lt;/c0&gt;</ept> is exponentation, computed as if by a single, correctly rounded, floating-point operation:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは次の計算に相当します、そこで<bpt i="0" x="0">&lt;c0&gt;</bpt>**<ept i="0">&lt;/c0&gt;</ept>は乗算で、まるで単精度の、正しく丸められた、浮動小数点演算のように計算されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer is especially useful for the mirrors of collections, e.g.:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは、特にコレクションのミラーに対して有用です、例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This initializer is failable because although every case of the <bpt i="3" x="3">&lt;c3&gt;</bpt>Counter<ept i="3">&lt;/c3&gt;</ept> type has a corresponding <bpt i="4" x="4">&lt;c4&gt;</bpt>Int<ept i="4">&lt;/c4&gt;</ept> value, there are many <bpt i="5" x="5">&lt;c5&gt;</bpt>Int<ept i="5">&lt;/c5&gt;</ept> values that <bpt i="6" x="6">&lt;e6&gt;</bpt>don’t<ept i="6">&lt;/e6&gt;</ept> correspond to a case of <bpt i="7" x="7">&lt;c7&gt;</bpt>Counter<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザは失敗可能です、なぜならすべての<bpt i="3" x="3">&lt;c3&gt;</bpt>Counter<ept i="3">&lt;/c3&gt;</ept>型のケース節は対応する<bpt i="4" x="4">&lt;c4&gt;</bpt>Int<ept i="4">&lt;/c4&gt;</ept>値を持つけれども、<bpt i="7" x="7">&lt;c7&gt;</bpt>Counter<ept i="7">&lt;/c7&gt;</ept>のケース節に対応<bpt i="6" x="6">&lt;e6&gt;</bpt>しない<ept i="6">&lt;/e6&gt;</ept>多くの<bpt i="5" x="5">&lt;c5&gt;</bpt>Int<ept i="5">&lt;/c5&gt;</ept>値が存在するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a demonstration only—if you need the Unicode scalar representation of a string, use its <bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalars<ept i="1">&lt;/c1&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは単に１つの実演です—あなたがある文字列のユニコードスカラー表現を必要とするならば、それの<bpt i="1" x="1">&lt;c1&gt;</bpt>unicodeScalars<ept i="1">&lt;/c1&gt;</ept>ビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is an unexpected result for those accustomed to zero-based collection indices, who might expect the result to be <bpt i="4" x="4">&lt;c4&gt;</bpt>-99<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これはゼロベースのコレクションに慣れている人たちにとって思いもよらない結果です、彼らは<bpt i="4" x="4">&lt;c4&gt;</bpt>-99<ept i="4">&lt;/c4&gt;</ept>になる結果を予想するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is an unsigned comparison unlike Strideable’s implementation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、Strideableの実装とは違って、符号なしの比較です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは空の配列リテラルで初期化するのに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is equivalent to the intersection of two sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは２つの集合の交叉に等しいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is equivalent to the inverse of a set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これはある集合の逆と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is equivalent to the symmetric difference of two sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは２つの集合の対称差に等しいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is equivalent to the union of two sets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは２つの集合の合併に等しいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is identical to init(cString: UnsafePointer&lt;CChar&gt; but operates on an unsigned sequence of bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、init(cString: UnsafePointer&lt;CChar&gt;と同一です、しかし符号なしバイトシーケンス上で作動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is inherently unsafe; UnsafeMutablePointer assumes the referenced memory has +1 strong ownership semantics, whereas AutoreleasingUnsafeMutablePointer implies +0 semantics.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、本質的に安全ではありません；UnsafeMutablePointerは参照されるメモリが+1の強力な所有権意味論を持つことを仮定します、そういうわけでAutoreleasingUnsafeMutablePointerは必然的に+0意味論です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the <bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept> used by <bpt i="1" x="1">&lt;c1&gt;</bpt>FlattenSequence<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>FlattenCollection<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>BidirectionalFlattenCollection<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、<bpt i="1" x="1">&lt;c1&gt;</bpt>FlattenSequence<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>FlattenCollection<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>BidirectionalFlattenCollection<ept i="3">&lt;/c3&gt;</ept>によって使われる<bpt i="0" x="0">&lt;c0&gt;</bpt>IteratorProtocol<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the associated <bpt i="0" x="0">&lt;c0&gt;</bpt>Iterator<ept i="0">&lt;/c0&gt;</ept> of <bpt i="1" x="1">&lt;c1&gt;</bpt>LazyFilterSequence<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>LazyFilterCollection<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは<bpt i="1" x="1">&lt;c1&gt;</bpt>LazyFilterSequence<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>LazyFilterCollection<ept i="2">&lt;/c2&gt;</ept>に関連する<bpt i="0" x="0">&lt;c0&gt;</bpt>Iterator<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default implementation of the greater-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>) for any type that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>に準拠するあらゆる型に対して、より大きい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default implementation of the greater-than-or-equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;=<ept i="0">&lt;/c0&gt;</ept>) for any type that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>に準拠するあらゆる型に対して、より大きいか等しい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;=<ept i="0">&lt;/c0&gt;</ept>）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default implementation of the less-than-or-equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;=<ept i="0">&lt;/c0&gt;</ept>) for any type that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>に準拠するあらゆる型に対して、より少ないか等しい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;=<ept i="0">&lt;/c0&gt;</ept>）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default implementation of the not-equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>!=<ept i="0">&lt;/c0&gt;</ept>) for any type that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>に準拠するあらゆる型に対して、不等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>!=<ept i="0">&lt;/c0&gt;</ept>）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the most appropriate method for doing user-level string searches, similar to how searches are done generally in the system.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、システムにおいて一般に行われる検索方法と似た、ユーザレベル文字列検索に最もふさわしいメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the same as the number of bytes moved when an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer&lt;T&gt;<ept i="0">&lt;/c0&gt;</ept> is incremented.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、<bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafePointer&lt;T&gt;<ept i="0">&lt;/c0&gt;</ept>が増大させられる時に動かされるバイト数と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the unit of the least significant digit in the significand of <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>の仮数の中の最下位数の単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re not responsible for releasing the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持たなくてよいことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re responsible for releasing the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持つことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when passing a reference to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +0.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、スウィフトがそれについての所有権規則を知らないAPIにある参照を渡す、しかしそのAPIはあなたがオブジェクトを+0で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when passing an object to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +1.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、スウィフトがそれについての所有権規則を知らないAPIにあるオブジェクトを渡す、しかしそのAPIはあなたがオブジェクトを+1で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This iterator forwards its <bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept> method to an arbitrary underlying iterator having the same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type, hiding the specifics of the underlying <bpt i="2" x="2">&lt;c2&gt;</bpt>IteratorProtocol<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイテレータは、それの<bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>メソッドを同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持っている随意の基盤をなすイテレータに転送して、特定の基盤をなす<bpt i="2" x="2">&lt;c2&gt;</bpt>IteratorProtocol<ept i="2">&lt;/c2&gt;</ept>を隠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This magnitude calculation takes the following form for a floating-point value <bpt i="5" x="5">&lt;c5&gt;</bpt>x<ept i="5">&lt;/c5&gt;</ept> of type <bpt i="6" x="6">&lt;c6&gt;</bpt>F<ept i="6">&lt;/c6&gt;</ept>, where <bpt i="7" x="7">&lt;c7&gt;</bpt>**<ept i="7">&lt;/c7&gt;</ept> is exponentiation:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この規模計算は、型<bpt i="6" x="6">&lt;c6&gt;</bpt>F<ept i="6">&lt;/c6&gt;</ept>の浮動小数点値<bpt i="5" x="5">&lt;c5&gt;</bpt>x<ept i="5">&lt;/c5&gt;</ept>に対して以下の形式をとります、そこで<bpt i="7" x="7">&lt;c7&gt;</bpt>**<ept i="7">&lt;/c7&gt;</ept>は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This may be more efficient than Strideable’s implementation calling UnsafeMutableRawPointer.distance().</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、UnsafeMutableRawPointer.distance()を呼び出しているStrideableの実装よりもっと効率のよいものでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This may be more efficient than Strideable’s implementation calling UnsafeRawPointer.distance().</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、UnsafeRawPointer.distance()を呼び出しているStrideableの実装よりもっと効率のよいものでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これが意味するのは、ある文字列の異なる表現が等しいと比較されることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これが意味するのは、ある配列がストレージを他のコピーと共有するならば、その配列上での最初の変更操作は、配列をコピーするコストを招くということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method does not validate the encoding of a UTF-16 sequence beyond the specified code unit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、指定されたコード単位を越えてUTF-16シーケンスのエンコードを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method ensures that the array has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、配列が、少なくとも要請された数の要素に割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method has the effect of removing the specified range of elements from the array and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、指定された範囲の要素を配列から取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、指定された範囲の要素をコレクションから取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、辞書的順序の数学的概念を実装します、それはユニコードに関係はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method implements the remainder operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、IEEE 754仕様によって定義される剰余演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is equivalent to the C <bpt i="0" x="0">&lt;c0&gt;</bpt>fma<ept i="0">&lt;/c0&gt;</ept> function and implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>fusedMultiplyAdd<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、C <bpt i="0" x="0">&lt;c0&gt;</bpt>fma<ept i="0">&lt;/c0&gt;</ept>関数の等価物です、そしてIEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>fusedMultiplyAdd<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is implemented as a <bpt i="0" x="0">&lt;c0&gt;</bpt>&amp;<ept i="0">&lt;/c0&gt;</ept> (bitwise AND) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの集合の持つ生の値に関する<bpt i="0" x="0">&lt;c0&gt;</bpt>&amp;<ept i="0">&lt;/c0&gt;</ept>（ビット単位AND）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is implemented as a <bpt i="0" x="0">&lt;c0&gt;</bpt>^<ept i="0">&lt;/c0&gt;</ept> (bitwise XOR) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの集合の持つ生の値に関する<bpt i="0" x="0">&lt;c0&gt;</bpt>^<ept i="0">&lt;/c0&gt;</ept>（ビット単位XOR）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is implemented as a <bpt i="0" x="0">&lt;c0&gt;</bpt>|<ept i="0">&lt;/c0&gt;</ept> (bitwise OR) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの集合の持つ生の値に関する<bpt i="0" x="0">&lt;c0&gt;</bpt>|<ept i="0">&lt;/c0&gt;</ept>（ビット単位OR）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is typically one step of a sorting algorithm.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、概してあるソートアルゴリズムの一段階です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method returns the maximum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの値のうち最大を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method returns the minimum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの値のうち最小を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method returns the value with greater magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの与えられた値のうちより大きい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method returns the value with lesser magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、２つの与えられた値のうちより小さい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the addition operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>+<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、加算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>+<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the division operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>/<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、除算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>/<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>) for floating-point values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、浮動小数点値のための同等演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the in-place addition operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>+=<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、その場での追加演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>+=<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the in-place division operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>/=<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、その場での除算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>/=<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the in-place multiplication operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>*=<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、その場での乗算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>*=<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the in-place subtraction operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>-=<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、その場での減算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>-=<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the less-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>) for floating-point values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、浮動小数点値のためのより少ない演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the less-than-or-equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;=<ept i="0">&lt;/c0&gt;</ept>) for floating-point values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、浮動小数点値のためのより少ないか等しい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;=<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the multiplication operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>*<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、乗算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>*<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the negation operator (prefixed <bpt i="0" x="0">&lt;c0&gt;</bpt>-<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、否定演算子（前置<bpt i="0" x="0">&lt;c0&gt;</bpt>-<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method serves as the basis for the subtraction operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>-<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、減算演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>-<ept i="0">&lt;/c0&gt;</ept>）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method works regardless of whether the static string stores a pointer or a single Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドは、静的文字列がポインタまたは単一ユニコードスカラー値のどちらを格納するかに関係なく働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This operation does not change reference counts.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この操作は参照カウントを変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This operator tests whether two instances have different identities, not different values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子は、２つのインスタンスが異なる正体を持つ（異なる同一性を持つ）かどうかをテストします、異なる値をではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This operator tests whether two instances have the same identity, not the same value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子は、２つのインスタンスが同じ正体を持つ（同一性を持つ）かどうかをテストします、同じ値をではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This operator uses short-circuit evaluation: <bpt i="0" x="0">&lt;c0&gt;</bpt>optional<ept i="0">&lt;/c0&gt;</ept> is checked first, and <bpt i="1" x="1">&lt;c1&gt;</bpt>defaultValue<ept i="1">&lt;/c1&gt;</ept> is evaluated only if <bpt i="2" x="2">&lt;c2&gt;</bpt>optional<ept i="2">&lt;/c2&gt;</ept> is <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子は、短絡評価を使います：<bpt i="0" x="0">&lt;c0&gt;</bpt>optional<ept i="0">&lt;/c0&gt;</ept>が最初に調べられます、そして<bpt i="1" x="1">&lt;c1&gt;</bpt>defaultValue<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>optional<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>である場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This operator uses short-circuit evaluation: The left-hand side (<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>) is evaluated first, and the right-hand side (<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>) is evaluated only if <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept> evaluates to <bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子は、短絡評価を使います：左手側（<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>）が最初に評価されます、そして右手側（<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>）は<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>false<ept i="3">&lt;/c3&gt;</ept>に評価する場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This operator uses short-circuit evaluation: The left-hand side (<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>) is evaluated first, and the right-hand side (<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>) is evaluated only if <bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept> evaluates to <bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子は、短絡評価を使います：左手側（<bpt i="0" x="0">&lt;c0&gt;</bpt>lhs<ept i="0">&lt;/c0&gt;</ept>）が最初に評価されます、そして右手側（<bpt i="1" x="1">&lt;c1&gt;</bpt>rhs<ept i="1">&lt;/c1&gt;</ept>）は<bpt i="2" x="2">&lt;c2&gt;</bpt>lhs<ept i="2">&lt;/c2&gt;</ept>が<bpt i="3" x="3">&lt;c3&gt;</bpt>true<ept i="3">&lt;/c3&gt;</ept>に評価する場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This option generates default mirrors even for ancestor classes that may implement <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomReflectable<ept i="0">&lt;/c0&gt;</ept>’s <bpt i="1" x="1">&lt;c1&gt;</bpt>customMirror<ept i="1">&lt;/c1&gt;</ept> requirement.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このオプションは、<bpt i="0" x="0">&lt;c0&gt;</bpt>CustomReflectable<ept i="0">&lt;/c0&gt;</ept>の持つ<bpt i="1" x="1">&lt;c1&gt;</bpt>customMirror<ept i="1">&lt;/c1&gt;</ept>要件を実装できる先祖クラスにさえも省略時のミラーを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This pointer is only valid for the duration of the call to <bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このポインタは、ただ<bpt i="0" x="0">&lt;c0&gt;</bpt>body<ept i="0">&lt;/c0&gt;</ept>への呼び出しの間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This property implements the <bpt i="0" x="0">&lt;c0&gt;</bpt>logB<ept i="0">&lt;/c0&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロパティは、IEEE 754仕様で定義される<bpt i="0" x="0">&lt;c0&gt;</bpt>logB<ept i="0">&lt;/c0&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This property is <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> for both quiet and signaling NaNs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロパティは、クワイエットおよびシグナルNaNの両方に対して<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This property trades safety for performance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロパティは性能と安全を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This protocol is an implementation detail of <bpt i="0" x="0">&lt;c0&gt;</bpt>Integer<ept i="0">&lt;/c0&gt;</ept>; do not use it directly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロトコルは<bpt i="0" x="0">&lt;c0&gt;</bpt>Integer<ept i="0">&lt;/c0&gt;</ept>の実装詳細です；それを直接に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This protocol is useful in presenting C “varargs” APIs natively in Swift.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロトコルは、スウィフトにおいてC「varargs」APIをネイティブに表すのに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This provides no automatic memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、自動メモリ管理、型安全、そして並列化保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This quantity, or a related quantity, is sometimes called <bpt i="0" x="0">&lt;e0&gt;</bpt>epsilon<ept i="0">&lt;/e0&gt;</ept> or <bpt i="1" x="1">&lt;e1&gt;</bpt>machine epsilon<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この量、または関連する量は、時々<bpt i="0" x="0">&lt;e0&gt;</bpt>イプシロン<ept i="0">&lt;/e0&gt;</ept>または<bpt i="1" x="1">&lt;e1&gt;</bpt>機械イプシロン<ept i="1">&lt;/e1&gt;</ept>と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This relation is a refinement of the less-than-or-equal-to operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;=<ept i="0">&lt;/c0&gt;</ept>) that provides a total order on all values of the type, including noncanonical encodings, signed zeros, and NaNs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関係は、より少ないか等しい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;=<ept i="0">&lt;/c0&gt;</ept>）の改良版です、それは、非正準化エンコーディング、符号付きゼロ、そしてNaNを含む、その型のすべての値に関する全順序を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This representation matches the one used when <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> instances are passed to C APIs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この表現は、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>インスタンスがC APIに渡される時に使われるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rounding rule is also known as “bankers rounding,” and is the default IEEE 754 rounding mode for arithmetic.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この丸め規則はまた「銀行家の丸め」としても知られます、そして算術に対する省略時のIEEE 754丸め方式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rounding rule is also known as “schoolbook rounding.” The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この丸め規則はまた「教科書丸め」としても知られます。以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rule implements the <bpt i="0" x="0">&lt;c0&gt;</bpt>roundToIntegralTiesToEven<ept i="0">&lt;/c0&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この規則は、IEEE 754仕様で定義される<bpt i="0" x="0">&lt;c0&gt;</bpt>roundToIntegralTiesToEven<ept i="0">&lt;/c0&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rule is equivalent to the C <bpt i="0" x="0">&lt;c0&gt;</bpt>ceil<ept i="0">&lt;/c0&gt;</ept> function and implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTowardPositive<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この規則は、C <bpt i="0" x="0">&lt;c0&gt;</bpt>ceil<ept i="0">&lt;/c0&gt;</ept>関数の等価物です、そしてIEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTowardPositive<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rule is equivalent to the C <bpt i="0" x="0">&lt;c0&gt;</bpt>floor<ept i="0">&lt;/c0&gt;</ept> function and implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTowardNegative<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この規則は、C <bpt i="0" x="0">&lt;c0&gt;</bpt>floor<ept i="0">&lt;/c0&gt;</ept>関数の等価物です、そしてIEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTowardNegative<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rule is equivalent to the C <bpt i="0" x="0">&lt;c0&gt;</bpt>round<ept i="0">&lt;/c0&gt;</ept> function and implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTiesToAway<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この規則は、C <bpt i="0" x="0">&lt;c0&gt;</bpt>round<ept i="0">&lt;/c0&gt;</ept>関数の等価物です、そしてIEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTiesToAway<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This rule is equivalent to the C <bpt i="0" x="0">&lt;c0&gt;</bpt>trunc<ept i="0">&lt;/c0&gt;</ept> function and implements the <bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTowardZero<ept i="1">&lt;/c1&gt;</ept> operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この規則は、C <bpt i="0" x="0">&lt;c0&gt;</bpt>trunc<ept i="0">&lt;/c0&gt;</ept>関数の等価物です、そしてIEEE 754仕様によって定義される<bpt i="1" x="1">&lt;c1&gt;</bpt>roundToIntegralTowardZero<ept i="1">&lt;/c1&gt;</ept>演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This setting has no effect on mirrors reflecting value type instances.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この設定は、値型インスタンスをリフレクションするミラー上では効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This subscript takes an index into the dictionary, instead of a key, and returns the corresponding key-value pair as a tuple.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この添え字は辞書に対してのインデックスをとります、キーではなく、そして該当するキー値ペアをタプルとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type does not carry an owner pointer unlike the other C*Pointer types because it only needs to reference the results of inout conversions, which already have writeback-scoped lifetime.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型は、他のC*Pointer型と違って所有ポインタを持ち運びません、なぜならそれはただインアウト変換の結果を参照する必要があるだけだからです、そしてそれは既にライトバックスコープの寿命を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type has implicit conversions to allow passing any of the following to a C or ObjC API:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型は暗黙的な変換を持ち、それによって以下のことをCまたはObjC APIへ渡すことを可能にされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type is the result of <bpt i="0" x="0">&lt;c0&gt;</bpt>x.reversed()<ept i="0">&lt;/c0&gt;</ept> where <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is a collection having bidirectional indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型は、<bpt i="0" x="0">&lt;c0&gt;</bpt>x.reversed()<ept i="0">&lt;/c0&gt;</ept>の結果です、ここで<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>は双方向性のインデックスを持つコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type is the result of <bpt i="0" x="0">&lt;c0&gt;</bpt>x.reversed()<ept i="0">&lt;/c0&gt;</ept> where <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is a collection having random access indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型は、<bpt i="0" x="0">&lt;c0&gt;</bpt>x.reversed()<ept i="0">&lt;/c0&gt;</ept>の結果です、そこで<bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>はランダムアクセスのインデックスを持つコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type may differ from the subject’s dynamic type when <bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept> is the <bpt i="1" x="1">&lt;c1&gt;</bpt>superclassMirror<ept i="1">&lt;/c1&gt;</ept> of another mirror.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型は、<bpt i="0" x="0">&lt;c0&gt;</bpt>self<ept i="0">&lt;/c0&gt;</ept>が別のミラーの<bpt i="1" x="1">&lt;c1&gt;</bpt>superclassMirror<ept i="1">&lt;/c1&gt;</ept>である時は、主題の動的な型と異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type provides no automated memory management, and therefore must be handled with great care to ensure safety.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この型が提供するのは自動化されないメモリ管理です、そしてそれゆえに大いに注意して確実に安全であるように取り扱われなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value compares greater than or equal to all finite numbers, but less than <bpt i="0" x="0">&lt;c0&gt;</bpt>infinity<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値は、すべての有限数、しかし<bpt i="0" x="0">&lt;c0&gt;</bpt>無限大<ept i="0">&lt;/c0&gt;</ept>より少ないものに対してより大きいか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value compares less than or equal to all positive normal numbers.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値は、すべての正のノーマル数に対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value compares less than or equal to all positive numbers, but greater than zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値は、すべての正の数、しかしゼロより大きいものに対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value corresponds to type-specific C macros such as <bpt i="0" x="0">&lt;c0&gt;</bpt>FLT_MAX<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>DBL_MAX<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値は、型固有のCマクロ、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>FLT_MAX<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>DBL_MAX<ept i="1">&lt;/c1&gt;</ept>に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value corresponds to type-specific C macros such as <bpt i="0" x="0">&lt;c0&gt;</bpt>FLT_MIN<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>DBL_MIN<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値は、型固有のCマクロ、例えば<bpt i="0" x="0">&lt;c0&gt;</bpt>FLT_MIN<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>DBL_MIN<ept i="1">&lt;/c1&gt;</ept>に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value is unadjusted by the type’s exponent bias.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、この型の持つ指数バイアスによって未調整のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値を計算するのは、些細なことではありません；通常良い考えであるのは、この情報をインスタンスが作成されるときに「ヘッダ」領域に格納することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This value should be rounded toward zero to keep user computations with angles from inadvertently ending up in the wrong quadrant.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この値は、角度を伴うユーザ計算が不注意に間違った象限に終わらないようにゼロへと丸められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will be the same as either <bpt i="0" x="0">&lt;c0&gt;</bpt>CSignedChar<ept i="0">&lt;/c0&gt;</ept> (in the common case) or <bpt i="1" x="1">&lt;c1&gt;</bpt>CUnsignedChar<ept i="1">&lt;/c1&gt;</ept>, depending on the platform.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、プラットホーム次第で、<bpt i="0" x="0">&lt;c0&gt;</bpt>CSignedChar<ept i="0">&lt;/c0&gt;</ept>（一般的な場合）または<bpt i="1" x="1">&lt;c1&gt;</bpt>CUnsignedChar<ept i="1">&lt;/c1&gt;</ept>のどちらかに同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Those “pairs” of code units are called <bpt i="1" x="1">&lt;e1&gt;</bpt>surrogate pairs<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それら「ペア」のコード単位は、<bpt i="1" x="1">&lt;e1&gt;</bpt>サロゲートペア<ept i="1">&lt;/e1&gt;</ept>と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, creating a slice has O(1) complexity.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>したがって、ある切り取り（スライス）の作成はO(1)の計算量を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, side-effects such as the accumulation of <bpt i="1" x="1">&lt;c1&gt;</bpt>result<ept i="1">&lt;/c1&gt;</ept> below are never unexpectedly dropped or deferred:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>したがって、副作用、例えば下の<bpt i="1" x="1">&lt;c1&gt;</bpt>result<ept i="1">&lt;/c1&gt;</ept>の集積などは、決して突然に投下されたり延期されたりしません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To access the underlying memory, invoke <bpt i="0" x="0">&lt;c0&gt;</bpt>withUnsafeBufferPointer<ept i="0">&lt;/c0&gt;</ept> on the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>基礎をなすメモリにアクセスするには、<bpt i="0" x="0">&lt;c0&gt;</bpt>withUnsafeBufferPointer<ept i="0">&lt;/c0&gt;</ept>を配列上で発動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalProtocol<ept i="0">&lt;/c0&gt;</ept> conformance to your custom types, implement the <bpt i="1" x="1">&lt;c1&gt;</bpt>index(before:)<ept i="1">&lt;/c1&gt;</ept> method in addition to the requirements of the <bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalProtocol<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには、<bpt i="1" x="1">&lt;c1&gt;</bpt>index(before:)<ept i="1">&lt;/c1&gt;</ept>メソッドを、<bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept>プロトコルの要件に加えて実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> conformance to <bpt i="1" x="1">&lt;c1&gt;</bpt>Date<ept i="1">&lt;/c1&gt;</ept>, first declare conformance to <bpt i="2" x="2">&lt;c2&gt;</bpt>Comparable<ept i="2">&lt;/c2&gt;</ept> and implement the <bpt i="3" x="3">&lt;c3&gt;</bpt>&lt;<ept i="3">&lt;/c3&gt;</ept> operator function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>準拠を<bpt i="1" x="1">&lt;c1&gt;</bpt>Date<ept i="1">&lt;/c1&gt;</ept>に加えるには、最初に<bpt i="2" x="2">&lt;c2&gt;</bpt>Comparable<ept i="2">&lt;/c2&gt;</ept>への準拠を宣言して、<bpt i="3" x="3">&lt;c3&gt;</bpt>&lt;<ept i="3">&lt;/c3&gt;</ept>演算子関数を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> conformance to your custom types, define the <bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>==<ept i="2">&lt;/c2&gt;</ept> operators as static methods of your types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには、<bpt i="1" x="1">&lt;c1&gt;</bpt>&lt;<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>==<ept i="2">&lt;/c2&gt;</ept>演算子をあなたの型の静的メソッドとして定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByBooleanLiteral<ept i="0">&lt;/c0&gt;</ept> conformance to your custom type, implement the <bpt i="1" x="1">&lt;c1&gt;</bpt>init(booleanLiteral:)<ept i="1">&lt;/c1&gt;</ept> initializer that creates an instance of your type with the given Boolean value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByBooleanLiteral<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには<bpt i="1" x="1">&lt;c1&gt;</bpt>init(booleanLiteral:)<ept i="1">&lt;/c1&gt;</ept>イニシャライザを加えてください、それはあなたの型のインスタンスを、与えられたブール値とともに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByExtendedGraphemeClusterLiteral<ept i="0">&lt;/c0&gt;</ept> conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByExtendedGraphemeClusterLiteral<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByFloatLiteral<ept i="0">&lt;/c0&gt;</ept> conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByFloatLiteral<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByStringLiteral<ept i="0">&lt;/c0&gt;</ept> conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByStringLiteral<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByUnicodeScalarLiteral<ept i="0">&lt;/c0&gt;</ept> conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByUnicodeScalarLiteral<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept> conformance to your custom collection, add an empty initializer and the <bpt i="1" x="1">&lt;c1&gt;</bpt>replaceSubrange(_:with:)<ept i="1">&lt;/c1&gt;</ept> method to your custom type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RangeReplaceableCollection<ept i="0">&lt;/c0&gt;</ept>準拠をあなたのあつらえのコレクションに加えるには、ひとつの空のイニシャライザおよび<bpt i="1" x="1">&lt;c1&gt;</bpt>replaceSubrange(_:with:)<ept i="1">&lt;/c1&gt;</ept>メソッドをあなたのあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="0" x="0">&lt;c0&gt;</bpt>TextOutputStreamable<ept i="0">&lt;/c0&gt;</ept> conformance to a custom type, implement the required <bpt i="1" x="1">&lt;c1&gt;</bpt>write(to:)<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>TextOutputStreamable<ept i="0">&lt;/c0&gt;</ept>準拠をあつらえの型に加えるには、必須<bpt i="1" x="1">&lt;c1&gt;</bpt>write(to:)<ept i="1">&lt;/c1&gt;</ept>メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept> conformance to your type, you must declare at least the four following requirements:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Collection<ept i="1">&lt;/c1&gt;</ept>準拠をあなたの型に加えるには、あなたは少なくとも４つの以下の要件を宣言しなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept> conformance, provide an <bpt i="3" x="3">&lt;c3&gt;</bpt>==<ept i="3">&lt;/c3&gt;</ept> operator function and a <bpt i="4" x="4">&lt;c4&gt;</bpt>hashValue<ept i="4">&lt;/c4&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept>準拠を加えるには、<bpt i="3" x="3">&lt;c3&gt;</bpt>==<ept i="3">&lt;/c3&gt;</ept>演算子関数と<bpt i="4" x="4">&lt;c4&gt;</bpt>hashValue<ept i="4">&lt;/c4&gt;</ept>プロパティを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add <bpt i="4" x="4">&lt;c4&gt;</bpt>Sequence<ept i="4">&lt;/c4&gt;</ept> conformance to your own custom type, add a <bpt i="5" x="5">&lt;c5&gt;</bpt>makeIterator()<ept i="5">&lt;/c5&gt;</ept> method that returns an iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>Sequence<ept i="4">&lt;/c4&gt;</ept>準拠をあなた独自のあつらえの型に加えるには、あるイテレータを返す<bpt i="5" x="5">&lt;c5&gt;</bpt>makeIterator()<ept i="5">&lt;/c5&gt;</ept>メソッドを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add a new key-value pair, assign a value to a key that isn’t yet a part of the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しいキー値ペアを加えるには、ある値を、まだ辞書の一部ではないキーに対して割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add conformance to the <bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept> protocol to your own custom collection, upgrade your type’s subscript to support both read and write access.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MutableCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルへの準拠をあなた独自のあつらえのコレクションに加えるには、あなたの型の持つ添え字を更新して読み書きアクセス両方をサポートするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add new lazy collection operations, extend this protocol with methods that return lazy wrappers that are themselves <bpt i="0" x="0">&lt;c0&gt;</bpt>LazyCollectionProtocol<ept i="0">&lt;/c0&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい遅延コレクション操作を加えるために、このプロトコルを、それら自身が<bpt i="0" x="0">&lt;c0&gt;</bpt>LazyCollectionProtocol<ept i="0">&lt;/c0&gt;</ept>である遅延ラッパーを返すメソッドで拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add new lazy sequence operations, extend this protocol with methods that return lazy wrappers that are themselves <bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい遅延シーケンス操作を加えるために、このプロトコルを、それら自身が<bpt i="0" x="0">&lt;c0&gt;</bpt>LazySequenceProtocol<ept i="0">&lt;/c0&gt;</ept>である遅延ラッパーを返すメソッドらで拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add single elements to the end of an array, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>append(_:)<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単一の要素を配列に加えるには、<bpt i="0" x="0">&lt;c0&gt;</bpt>append(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add the capability to be initialized with a dictionary literal to your own custom types, declare an <bpt i="0" x="0">&lt;c0&gt;</bpt>init(dictionaryLiteral:)<ept i="0">&lt;/c0&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルで初期化される能力をあなた独自のあつらえの型に加えるには、<bpt i="0" x="0">&lt;c0&gt;</bpt>init(dictionaryLiteral:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To adopt the <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> protocol, implement the equal-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>) as a static method of your type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>プロトコルを採用するには、同等演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>）をあなたの型の静的メソッドとして実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To avoid dropping an ancestor class customization, an override of <bpt i="2" x="2">&lt;c2&gt;</bpt>customMirror<ept i="2">&lt;/c2&gt;</ept> should pass <bpt i="3" x="3">&lt;c3&gt;</bpt>ancestorRepresentation: .Customized(super.customMirror)<ept i="3">&lt;/c3&gt;</ept> when initializing its <bpt i="4" x="4">&lt;c4&gt;</bpt>Mirror<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>先祖クラスのカスタマイズを失くすのを防ぐために、<bpt i="2" x="2">&lt;c2&gt;</bpt>customMirror<ept i="2">&lt;/c2&gt;</ept>のオーバーライドはそれの<bpt i="3" x="3">&lt;c3&gt;</bpt>Mirror<ept i="3">&lt;/c3&gt;</ept>を初期化する時<bpt i="4" x="4">&lt;c4&gt;</bpt>ancestorRepresentation: .Customized(super.customMirror)<ept i="4">&lt;/c4&gt;</ept>を渡すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To avoid the unexpected copy, use the <bpt i="1" x="1">&lt;c1&gt;</bpt>index(after:)<ept i="1">&lt;/c1&gt;</ept> method starting with <bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept> to produce indices instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>予期されないコピーを避けるために、代わりに<bpt i="1" x="1">&lt;c1&gt;</bpt>index(after:)<ept i="1">&lt;/c1&gt;</ept>メソッドを使って<bpt i="2" x="2">&lt;c2&gt;</bpt>startIndex<ept i="2">&lt;/c2&gt;</ept>で始めることで、インデックスを生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To check for invalid usage in Release builds, see <bpt i="0" x="0">&lt;c0&gt;</bpt>precondition(_:_:file:line:)<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「リリース」ビルドにおける無効な使用法を調べるには、<bpt i="0" x="0">&lt;c0&gt;</bpt>precondition(_:_:file:line:)<ept i="0">&lt;/c0&gt;</ept>を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To check whether <bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept> is represented by a surrogate pair, use <bpt i="2" x="2">&lt;c2&gt;</bpt>UTF16.width(x) == 2<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>x<ept i="1">&lt;/c1&gt;</ept>があるサロゲートペアで表現されるかどうか調べるには、<bpt i="2" x="2">&lt;c2&gt;</bpt>UTF16.width(x) == 2<ept i="2">&lt;/c2&gt;</ept>を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To conditionally bind the wrapped value of an <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> instance to a new variable, use one of the optional binding control structures, including <bpt i="1" x="1">&lt;c1&gt;</bpt>if let<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>guard let<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>switch<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>インスタンスのラップされた値を新しい変数へ条件付きの束縛を行うには、<bpt i="1" x="1">&lt;c1&gt;</bpt>if let<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>guard let<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>switch<ept i="3">&lt;/c3&gt;</ept>を含む、オプショナル束縛制御構造の１つを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To convert a <bpt i="0" x="0">&lt;c0&gt;</bpt>String.UTF16View<ept i="0">&lt;/c0&gt;</ept> instance back into a string, use the <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> type’s <bpt i="2" x="2">&lt;c2&gt;</bpt>init(_:)<ept i="2">&lt;/c2&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String.UTF16View<ept i="0">&lt;/c0&gt;</ept>インスタンスを逆に文字列へと変換するには、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>型のもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>init(_:)<ept i="2">&lt;/c2&gt;</ept>イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To convert an <bpt i="1" x="1">&lt;c1&gt;</bpt>NSRange<ept i="1">&lt;/c1&gt;</ept> instance to a range of <bpt i="2" x="2">&lt;c2&gt;</bpt>String.UTF16View.Index<ept i="2">&lt;/c2&gt;</ept>, follow these steps:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>NSRange<ept i="1">&lt;/c1&gt;</ept>インスタンスを<bpt i="2" x="2">&lt;c2&gt;</bpt>String.UTF16View.Index<ept i="2">&lt;/c2&gt;</ept>の範囲へ変換するには、これらの手順に従ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a <bpt i="3" x="3">&lt;c3&gt;</bpt>Zip2Sequence<ept i="3">&lt;/c3&gt;</ept> instance, use the <bpt i="4" x="4">&lt;c4&gt;</bpt>zip(_:_:)<ept i="4">&lt;/c4&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>Zip2Sequence<ept i="3">&lt;/c3&gt;</ept>インスタンスを作成するには、<bpt i="4" x="4">&lt;c4&gt;</bpt>zip(_:_:)<ept i="4">&lt;/c4&gt;</ept>関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a dictionary with no key-value pairs, use an empty dictionary literal (<bpt i="0" x="0">&lt;c0&gt;</bpt>[:]<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キー値ペアを持たない辞書を作成するには、空の辞書リテラル（<bpt i="0" x="0">&lt;c0&gt;</bpt>[:]<ept i="0">&lt;/c0&gt;</ept>）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create an empty instance, assign an empty array literal to your variable.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空のインスタンスを作成するには、空の配列リテラルをあなたの変数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedIterator<ept i="0">&lt;/c0&gt;</ept>, call <bpt i="1" x="1">&lt;c1&gt;</bpt>enumerated().makeIterator()<ept i="1">&lt;/c1&gt;</ept> on a sequence or collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedIterator<ept i="0">&lt;/c0&gt;</ept>のインスタンスを作成するには、<bpt i="1" x="1">&lt;c1&gt;</bpt>enumerated().makeIterator()<ept i="1">&lt;/c1&gt;</ept>をシーケンスまたはコレクション上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedSequence<ept i="0">&lt;/c0&gt;</ept>, call <bpt i="1" x="1">&lt;c1&gt;</bpt>enumerated()<ept i="1">&lt;/c1&gt;</ept> on a sequence or collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EnumeratedSequence<ept i="0">&lt;/c0&gt;</ept>のインスタンスを作成するには、<bpt i="1" x="1">&lt;c1&gt;</bpt>enumerated()<ept i="1">&lt;/c1&gt;</ept>をシーケンスまたはコレクション上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To customize that representation, make your type conform to the <bpt i="2" x="2">&lt;c2&gt;</bpt>CustomDebugStringConvertible<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この表現をカスタマイズするには、あなたの型を<bpt i="2" x="2">&lt;c2&gt;</bpt>CustomDebugStringConvertible<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠させてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To declare a dictionary, assign a dictionary literal to a variable or constant:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書を宣言するには、辞書リテラルを変数または定数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To decode a code unit sequence completely, call this method repeatedly until it returns <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeDecodingResult.emptyInput<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコード単位のシーケンスを完全にデコードするには、このメソッドを繰り返し、それが<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeDecodingResult.emptyInput<ept i="0">&lt;/c0&gt;</ept>を返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To demonstrate the different views available for every string, the following examples use this <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> instance:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あらゆる文字列で利用可能な異なるビューを実際に示すために、以降の例はこの<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>インスタンスを使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To do so, start by creating two slices of the <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それをするには、<bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列の２つのスライスを作成することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To do this, enclose a comma-separated list of values in square brackets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これをするには、コンマ区切りの値のリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To establish that a type you’ve created supports nondestructive iteration, add conformance to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが作成した型が非破壊反復をサポートすることを確立するには、<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>プロトコルに対する準拠を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To find individual elements of a string, use the appropriate view for your task.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の個々の要素を手に入れるには、あなたの作業に適切なビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To find the index of the day in question, follow these setps:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>当該の日付のインデックスを見つけるには、これらの手順を踏んでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To find the indices of the two days in question, follow these steps:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>当該の２つの日付のインデックスを見つけるには、これらの手順を踏んでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To inherit all the default implementations from the <bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept> protocol, the <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type must be <bpt i="2" x="2">&lt;c2&gt;</bpt>Self<ept i="2">&lt;/c2&gt;</ept>, the default.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept>プロトコル由来のすべての省略時実装を継承するには、<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型は初期状態で<bpt i="2" x="2">&lt;c2&gt;</bpt>Self<ept i="2">&lt;/c2&gt;</ept>でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To iterate over the elements of a collection with its indices, use the <bpt i="2" x="2">&lt;c2&gt;</bpt>zip(_:_:)<ept i="2">&lt;/c2&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションの要素すべてにわたってそれのインデックスで反復するには、<bpt i="2" x="2">&lt;c2&gt;</bpt>zip(_:_:)<ept i="2">&lt;/c2&gt;</ept>関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To maintain substitutability, the <bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept> operator should take into account all visible aspects of an <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>代替可能性を維持するために、<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>演算子はある<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>型の全ての目に見える面を考慮しなければならないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To make your custom type conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>BitwiseOperations<ept i="0">&lt;/c0&gt;</ept>, add a static <bpt i="1" x="1">&lt;c1&gt;</bpt>allZeros<ept i="1">&lt;/c1&gt;</ept> property and declare the four required operator functions.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのあつらえの型を<bpt i="0" x="0">&lt;c0&gt;</bpt>BitwiseOperations<ept i="0">&lt;/c0&gt;</ept>に準拠させるには、静的な<bpt i="1" x="1">&lt;c1&gt;</bpt>allZeros<ept i="1">&lt;/c1&gt;</ept>プロパティと４つの必須演算子関数の宣言を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To make your custom type conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>TextOutputStream<ept i="0">&lt;/c0&gt;</ept> protocol, implement the required <bpt i="1" x="1">&lt;c1&gt;</bpt>write(_:)<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのあつらえのクラスを<bpt i="0" x="0">&lt;c0&gt;</bpt>TextOutputStream<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠させるには、必須<bpt i="1" x="1">&lt;c1&gt;</bpt>write(_:)<ept i="1">&lt;/c1&gt;</ept>メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To prevent bypassing customized ancestors, <bpt i="5" x="5">&lt;c5&gt;</bpt>customMirror<ept i="5">&lt;/c5&gt;</ept> overrides should initialize the <bpt i="6" x="6">&lt;c6&gt;</bpt>Mirror<ept i="6">&lt;/c6&gt;</ept> with:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>カスタマイズされた先祖の迂回を防ぐには、<bpt i="5" x="5">&lt;c5&gt;</bpt>customMirror<ept i="5">&lt;/c5&gt;</ept>オーバーライドは、以下を使って<bpt i="6" x="6">&lt;c6&gt;</bpt>Mirror<ept i="6">&lt;/c6&gt;</ept>を初期化するべきです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To prevent this confusion, in a context where <bpt i="5" x="5">&lt;c5&gt;</bpt>Bound<ept i="5">&lt;/c5&gt;</ept> is known to be an integer type, subscripting directly is a compile-time error:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この混乱を防ぐために、<bpt i="5" x="5">&lt;c5&gt;</bpt>Bound<ept i="5">&lt;/c5&gt;</ept>が整数型であると知られている文脈では、添え字を使うことは直ちにコンパイルエラーになります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To print the items separated by something other than a space, pass a string as <bpt i="0" x="0">&lt;c0&gt;</bpt>separator<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空白以外の何かによって区切られる項目を出力するには、ある文字列を<bpt i="0" x="0">&lt;c0&gt;</bpt>separator<ept i="0">&lt;/c0&gt;</ept>として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To print the items without a trailing newline, pass an empty string as <bpt i="1" x="1">&lt;c1&gt;</bpt>terminator<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>後に続く改行なしで項目を出力するには、空の文字列を<bpt i="1" x="1">&lt;c1&gt;</bpt>terminator<ept i="1">&lt;/c1&gt;</ept>として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To protect code from invalid usage in Release builds, see <bpt i="2" x="2">&lt;c2&gt;</bpt>preconditionFailure(_:file:line:)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「リリース」ビルドにおける無効な使用法を調べるには、<bpt i="2" x="2">&lt;c2&gt;</bpt>preconditionFailure(_:file:line:)<ept i="2">&lt;/c2&gt;</ept>を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To remove elements from an array, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>remove(at:)<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>removeSubrange(_:)<ept i="1">&lt;/c1&gt;</ept>, and <bpt i="2" x="2">&lt;c2&gt;</bpt>removeLast()<ept i="2">&lt;/c2&gt;</ept> methods.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列から要素を取り除くには、<bpt i="0" x="0">&lt;c0&gt;</bpt>remove(at:)<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>removeSubrange(_:)<ept i="1">&lt;/c1&gt;</ept>、そして<bpt i="2" x="2">&lt;c2&gt;</bpt>removeLast()<ept i="2">&lt;/c2&gt;</ept>メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To represent those scalar values using 8-bit integers, more than one UTF-8 code unit is often required.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これらのスカラー値を8ビット整数で表すには、１つ以上のUTF-8コード単位がしばしば必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To restore efficient set operations, create a new set from the result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>能率的な集合演算を取り戻すには、新しい集合を結果から作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter <bpt i="1" x="1">&lt;c1&gt;</bpt>round()<ept i="1">&lt;/c1&gt;</ept> method instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短い<bpt i="1" x="1">&lt;c1&gt;</bpt>round()<ept i="1">&lt;/c1&gt;</ept>メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter <bpt i="1" x="1">&lt;c1&gt;</bpt>rounded()<ept i="1">&lt;/c1&gt;</ept> method instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短い<bpt i="1" x="1">&lt;c1&gt;</bpt>rounded()<ept i="1">&lt;/c1&gt;</ept>メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To safely access the properties and methods of a wrapped instance, use the postfix optional chaining operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>?<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ラップされたインスタンスの持つプロパティおよびメソッドに安全にアクセスするには、接尾辞オプショナル連鎖演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>?<ept i="0">&lt;/c0&gt;</ept>）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To safely reference the starting and ending indices of a slice, always use the <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> properties instead of specific values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるスライスの最初と最後のインデックスを安全に参照するために、常に<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>プロパティを特定の値の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To sort the elements of your collection in descending order, pass the greater-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>) to the <bpt i="1" x="1">&lt;c1&gt;</bpt>sort(by:)<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのコレクションの要素を降順にソートするには、より大きい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>）を<bpt i="1" x="1">&lt;c1&gt;</bpt>sort(by:)<ept i="1">&lt;/c1&gt;</ept>メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To sort the elements of your collection in descending order, pass the greater-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>) to the <bpt i="1" x="1">&lt;c1&gt;</bpt>sorted(by:)<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのコレクションの要素を降順にソートするには、より大きい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>）を<bpt i="1" x="1">&lt;c1&gt;</bpt>sorted(by:)<ept i="1">&lt;/c1&gt;</ept>メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To sort the elements of your sequence in descending order, pass the greater-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>) to the <bpt i="1" x="1">&lt;c1&gt;</bpt>sorted(by:)<ept i="1">&lt;/c1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのシーケンスの要素を降順にソートするには、より大きい演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&gt;<ept i="0">&lt;/c0&gt;</ept>）を<bpt i="1" x="1">&lt;c1&gt;</bpt>sorted(by:)<ept i="1">&lt;/c1&gt;</ept>メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To sort your collection in descending order, pass the greater-than operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>&gt;<ept i="1">&lt;/c1&gt;</ept>) as the <bpt i="2" x="2">&lt;c2&gt;</bpt>areInIncreasingOrder<ept i="2">&lt;/c2&gt;</ept> parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのコレクションを降順にソートするには、より大きい演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>&gt;<ept i="1">&lt;/c1&gt;</ept>）を<bpt i="2" x="2">&lt;c2&gt;</bpt>areInIncreasingOrder<ept i="2">&lt;/c2&gt;</ept>パラメータとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To sort your sequence in descending order, pass the greater-than operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>&gt;<ept i="1">&lt;/c1&gt;</ept>) as the <bpt i="2" x="2">&lt;c2&gt;</bpt>areInIncreasingOrder<ept i="2">&lt;/c2&gt;</ept> parameter.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのシーケンスを降順にソートするには、より大きい演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>&gt;<ept i="1">&lt;/c1&gt;</ept>）を<bpt i="2" x="2">&lt;c2&gt;</bpt>areInIncreasingOrder<ept i="2">&lt;/c2&gt;</ept>パラメータとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To specify an alternative rule for rounding, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>round(_:)<ept i="0">&lt;/c0&gt;</ept> method instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>丸めのための代替の規則を指定するには、<bpt i="0" x="0">&lt;c0&gt;</bpt>round(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To specify an alternative rule for rounding, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>rounded(_:)<ept i="0">&lt;/c0&gt;</ept> method instead.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>丸めのための代替の規則を指定するには、<bpt i="0" x="0">&lt;c0&gt;</bpt>rounded(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use a dictionary literal as the initial value of a dictionary, enclose a comma-separated list of key-value pairs in square brackets.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書リテラルをある辞書の初期値として使うには、キー値ペアのコンマ区切りリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use string interpolation to initialize instances of your custom type, implement the required initializers for <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByStringInterpolation<ept i="0">&lt;/c0&gt;</ept> conformance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列補間を使ってあなたのあつらえの型のインスタンスを初期化するには、<bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByStringInterpolation<ept i="0">&lt;/c0&gt;</ept>準拠に対する必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use the <bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept> method without including a closure in each call, extend the <bpt i="1" x="1">&lt;c1&gt;</bpt>StreetAddress<ept i="1">&lt;/c1&gt;</ept> type to conform to <bpt i="2" x="2">&lt;c2&gt;</bpt>Equatable<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを各呼び出しにクロージャを含めることなく使うには、<bpt i="1" x="1">&lt;c1&gt;</bpt>StreetAddress<ept i="1">&lt;/c1&gt;</ept>型を<bpt i="2" x="2">&lt;c2&gt;</bpt>Equatable<ept i="2">&lt;/c2&gt;</ept>に準拠するように拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use your own custom type in a set or as the key type of a dictionary, add <bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept> conformance to your type by providing a <bpt i="1" x="1">&lt;c1&gt;</bpt>hashValue<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなた独自のあつらえの型を集合においてまたは辞書のキー型として使うには、あなたの型に<bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept>準拠を<bpt i="1" x="1">&lt;c1&gt;</bpt>hashValue<ept i="1">&lt;/c1&gt;</ept>プロパティを加えることによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Trades safety for performance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>安全性と性能の交換をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translates the given input from one Unicode encoding to another by calling the given closure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>指定された入力をあるユニコード符号化から別のものへと指定されたクロージャを呼び出すことによって翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Traversing a Collection</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションを辿っていく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Two <bpt i="0" x="0">&lt;c0&gt;</bpt>Date<ept i="0">&lt;/c0&gt;</ept> instances are equal if each of their corresponding properties is equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの<bpt i="0" x="0">&lt;c0&gt;</bpt>Date<ept i="0">&lt;/c0&gt;</ept>インスタンスは、それらの対応するプロパティの各々が等しいならば等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Two elements are <bpt i="0" x="0">&lt;e0&gt;</bpt>incomparable<ept i="0">&lt;/e0&gt;</ept> if neither is ordered before the other according to the predicate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの要素は、述部によるとどちらもが他の前に並べられるならば<bpt i="0" x="0">&lt;e0&gt;</bpt>比較できない<ept i="0">&lt;/e0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Two instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyHashable<ept i="0">&lt;/c0&gt;</ept> compare as equal if and only if the underlying types have the same conformance to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept> protocol and the underlying values compare as equal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>AnyHashable<ept i="0">&lt;/c0&gt;</ept>の２つのインスタンスは、基礎をなす型が同じ準拠を<bpt i="1" x="1">&lt;c1&gt;</bpt>Equatable<ept i="1">&lt;/c1&gt;</ept>プロトコルに対して持ちそしてそれら基礎をなす型が等しいと比較される場合にのみ等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Two sets that are equal will always have equal hash values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの等しい集合は、常に等しいハッシュ値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Two values that are equal always have equal hash values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの等しい値は、常に等しいハッシュ値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type Aliases</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type Inference of Array Literals</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列リテラルの型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type Method</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type Methods</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type Properties</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型プロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type Property</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type cast</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Type check</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>型チェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types provided by the standard library meet all performance expectations of the protocols they adopt, except where explicitly noted.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>標準ライブラリによって提供される型は、それらが採用するプロトコルの全ての性能予想を満足させます、しかし明示的に注記されるところは除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that are not able to guarantee that expected performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>期待される性能を保証することが可能でない型は、その逸脱を文書化されなければなりません、なぜなら多くのコレクション演算はそれら自身の性能保証としてO(1)添え字操作性能に依存するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that conform to <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> are expected to provide the <bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept> properties and subscript access to elements as O(1) operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>に準拠する型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>startIndex<ept i="1">&lt;/c1&gt;</ept>および<bpt i="2" x="2">&lt;c2&gt;</bpt>endIndex<ept i="2">&lt;/c2&gt;</ept>プロパティと要素への添え字アクセスをO(1)演算として提供することを期待されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>BitwiseOperations<ept i="0">&lt;/c0&gt;</ept> protocol implement operators for bitwise arithmetic.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>BitwiseOperations<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型は、ビット単位計算のための演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>CustomStringConvertible<ept i="0">&lt;/c0&gt;</ept> protocol can provide their own representation to be used when converting an instance to a string.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>CustomStringConvertible<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型は、それら独自の表現を提供して、インスタンスが文字列に変換されるときに使われるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> protocol can be compared for equality using the equal-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>) or inequality using the not-equal-to operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>!=<ept i="2">&lt;/c2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型は、同等性を同等演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>）を使って、または不等性を不等演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>!=<ept i="2">&lt;/c2&gt;</ept>）を使って比較されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept> protocol provide most basic (clause 5) operations of the IEEE 754 specification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FloatingPoint<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型は、IEEE 754仕様の最も基本的な演算（５項）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types that implement alternative behaviors for a signaling NaN must document the departure.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シグナルNaNに対する代替の挙動を実装する型は、その逸脱を文書化しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types with Comparable conformance implement the less-than operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>) and the equal-to operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Comparable準拠を持つ型は、より少ない演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>&lt;<ept i="0">&lt;/c0&gt;</ept>）と同等演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>==<ept i="1">&lt;/c1&gt;</ept>）を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typical usage stores a count and capacity in <bpt i="3" x="3">&lt;c3&gt;</bpt>Header<ept i="3">&lt;/c3&gt;</ept> and destroys any live elements in the <bpt i="4" x="4">&lt;c4&gt;</bpt>deinit<ept i="4">&lt;/c4&gt;</ept> of a subclass.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>典型的なやり方は、総数と容量を<bpt i="3" x="3">&lt;c3&gt;</bpt>Header<ept i="3">&lt;/c3&gt;</ept>に格納して、サブクラスの<bpt i="4" x="4">&lt;c4&gt;</bpt>deinit<ept i="4">&lt;/c4&gt;</ept>の中のあらゆる生きている要素を破壊します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typically used to do conversion to any contextually-deduced integer type:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>大抵は文脈上推論される整数型に変換するために使われます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typically written using the nil literal, <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>概してnilリテラル、<bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>を使って書かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF-16 View</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-16ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF-8 View</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF-8ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF16View Elements Match NSString Characters</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF16View要素はNSString文字に一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF8View Elements Match Encoded C Strings</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UTF8View要素は符号化C文字列と一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unary minus</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単項マイナス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unary plus</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>単項プラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unconditional Unwrapping</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無条件にアンラップする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unconditionally prints a given message and stops execution.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無条件に与えられたメッセージを出力して実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unconditionally unwrapping a <bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept> instance with <bpt i="1" x="1">&lt;c1&gt;</bpt>!<ept i="1">&lt;/c1&gt;</ept> triggers a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>nil<ept i="0">&lt;/c0&gt;</ept>インスタンスを<bpt i="1" x="1">&lt;c1&gt;</bpt>!<ept i="1">&lt;/c1&gt;</ept>で無条件にアンラップすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Scalar View</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラービュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode scalar values are the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラー値は21ビットコードです、それはユニコードの基本的な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode scalar values that make up a string’s contents can be up to 21 bits long.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列のもつ内容を構成するユニコードスカラー値は、21ビット長に至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unless the collection conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalCollection<ept i="0">&lt;/c0&gt;</ept> protocol, <bpt i="1" x="1">&lt;c1&gt;</bpt>start<ept i="1">&lt;/c1&gt;</ept> must be less than or equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>end<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>コレクションが<bpt i="0" x="0">&lt;c0&gt;</bpt>BidirectionalCollection<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠しない場合は、<bpt i="1" x="1">&lt;c1&gt;</bpt>start<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>end<ept i="2">&lt;/c2&gt;</ept>より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike <bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>, the starting index for an <bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept> instance isn’t always zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Array<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>ContiguousArray<ept i="1">&lt;/c1&gt;</ept>とは違い、<bpt i="2" x="2">&lt;c2&gt;</bpt>ArraySlice<ept i="2">&lt;/c2&gt;</ept>インスタンスのインデックスの始まりは必ずしもゼロではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike <bpt i="0" x="0">&lt;c0&gt;</bpt>NSString<ept i="0">&lt;/c0&gt;</ept>, however, <bpt i="1" x="1">&lt;c1&gt;</bpt>String.UTF16View<ept i="1">&lt;/c1&gt;</ept> does not use integer indices.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>しかしながら、<bpt i="0" x="0">&lt;c0&gt;</bpt>NSString<ept i="0">&lt;/c0&gt;</ept>とは違い、<bpt i="1" x="1">&lt;c1&gt;</bpt>String.UTF16View<ept i="1">&lt;/c1&gt;</ept>は整数インデックスを使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>, instances of <bpt i="1" x="1">&lt;c1&gt;</bpt>ClosedRange<ept i="1">&lt;/c1&gt;</ept> cannot represent an empty interval.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>とは違って、<bpt i="1" x="1">&lt;c1&gt;</bpt>ClosedRange<ept i="1">&lt;/c1&gt;</ept>のインスタンスは空の間隔を表すことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;Pointee&gt;<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;<ept i="1">&lt;/c1&gt;</ept> must reference storage that does not own a reference count to the referenced value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;Pointee&gt;<ept i="0">&lt;/c0&gt;</ept>とは違い、<bpt i="1" x="1">&lt;c1&gt;</bpt>AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;<ept i="1">&lt;/c1&gt;</ept>は、参照される値への参照カウントを保有しないストレージを参照しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike enumerations, option sets provide a nonfailable <bpt i="0" x="0">&lt;c0&gt;</bpt>init(rawValue:)<ept i="0">&lt;/c0&gt;</ept> initializer to convert from a raw value, because option sets don’t have an enumerated list of all possible cases.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>列挙と異なり、オプションセットは生の値から変換するために失敗できない<bpt i="0" x="0">&lt;c0&gt;</bpt>init(rawValue:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを提供します、なぜならオプションセットは可能な場合全てを列挙したリストを持たないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike key-value pairs in a true dictionary, neither the key nor the value of a <bpt i="2" x="2">&lt;c2&gt;</bpt>DictionaryLiteral<ept i="2">&lt;/c2&gt;</ept> instance must conform to the <bpt i="3" x="3">&lt;c3&gt;</bpt>Hashable<ept i="3">&lt;/c3&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>本当の辞書におけるキー値ペアとは違い、<bpt i="2" x="2">&lt;c2&gt;</bpt>DictionaryLiteral<ept i="2">&lt;/c2&gt;</ept>インスタンスのキーも値も<bpt i="3" x="3">&lt;c3&gt;</bpt>Hashable<ept i="3">&lt;/c3&gt;</ept>プロトコルに準拠する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike ordinary set types, the <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type of an <bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept> is identical to the <bpt i="2" x="2">&lt;c2&gt;</bpt>OptionSet<ept i="2">&lt;/c2&gt;</ept> type itself.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>普通の集合型とは違い、ある<bpt i="1" x="1">&lt;c1&gt;</bpt>OptionSet<ept i="1">&lt;/c1&gt;</ept>の<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型は、<bpt i="2" x="2">&lt;c2&gt;</bpt>OptionSet<ept i="2">&lt;/c2&gt;</ept>型自体と全く同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike other floating-point types, the <bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept> type explicitly stores the leading integral significand bit.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>他の浮動小数点型と違い、<bpt i="2" x="2">&lt;c2&gt;</bpt>Float80<ept i="2">&lt;/c2&gt;</ept>型は明示的に先頭整数仮数ビットを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike other programming languages, in Swift integers and strings cannot be used where a Boolean value is expected.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>他のプログラミング言語とは違い、Swiftでは整数と文字列はブール値が期待されるところで使用されることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike the key-based subscript, the index-based subscript returns the corresponding key-value pair as a non-optional tuple.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>キー基盤の添え字と違い、インデックス基盤の添え字は該当するキー値ペアを非オプショナルのタプルとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UnsafeMutablePointer’s operations, by contrast, assume that the referenced storage owns values loaded from or stored to it.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>UnsafeMutablePointerの行う操作は、対照的に、参照されるストレージがそれからロードされたりそれへと格納される値を所有すると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unsafely converts an unmanaged class reference to a pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>管理されないクラス参照をポインタへと安全でない変換をする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unsafely turns an opaque C pointer into an unmanaged class reference.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>不透明Cポインタの管理されないクラス参照への安全でない転換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Update an existing value by assigning a new value to a key that already exists in the dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すでに辞書に存在するキーに新しい値を割り当てることで、既存の値を更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Updates the value stored in the dictionary for the given key, or adds a new key-value pair if the key does not exist.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書に格納される値を指定されたキーに対して更新します、またはそのキーが存在しないならば新しいキー値ペアを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;c0&gt;</bpt>Never<ept i="0">&lt;/c0&gt;</ept> as the return type when declaring a closure, function, or method that unconditionally throws an error, traps, or otherwise does not terminate.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>無条件にエラーをスローする、トラップする、またはそうする以外終了しない、クロージャ、関数、またはメソッドを定義するときに、<bpt i="0" x="0">&lt;c0&gt;</bpt>Never<ept i="0">&lt;/c0&gt;</ept>を戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;c0&gt;</bpt>Void<ept i="0">&lt;/c0&gt;</ept> or an empty tuple as the return type when declaring a closure, function, or method that doesn’t return a value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>値を返さないクロージャ、関数、またはメソッドを定義する場合は、<bpt i="0" x="0">&lt;c0&gt;</bpt>Void<ept i="0">&lt;/c0&gt;</ept>または空のタプルを戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;c0&gt;</bpt>unsafeDowncast<ept i="0">&lt;/c0&gt;</ept> only when <bpt i="1" x="1">&lt;c1&gt;</bpt>x as T<ept i="1">&lt;/c1&gt;</ept> has proven to be a performance problem and you are confident that, always, <bpt i="2" x="2">&lt;c2&gt;</bpt>x is T<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>unsafeDowncast<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>x as T<ept i="1">&lt;/c1&gt;</ept>には性能問題があると立証される、そしてあなたが、常に、<bpt i="2" x="2">&lt;c2&gt;</bpt>x is T<ept i="2">&lt;/c2&gt;</ept>であると確信している時のみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;c0&gt;</bpt>unsafelyUnwrapped<ept i="0">&lt;/c0&gt;</ept> only when you are confident that this instance will never be equal to <bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept> and only after you’ve tried using the postfix <bpt i="2" x="2">&lt;c2&gt;</bpt>!<ept i="2">&lt;/c2&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>unsafelyUnwrapped<ept i="0">&lt;/c0&gt;</ept>は、あなたがこのインスタンスは決して<bpt i="1" x="1">&lt;c1&gt;</bpt>nil<ept i="1">&lt;/c1&gt;</ept>と等しくないことを確信している場合にのみ、そしてあなたが前置<bpt i="2" x="2">&lt;c2&gt;</bpt>!<ept i="2">&lt;/c2&gt;</ept>演算子を使うことを試みた後にのみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use a <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> instance when you need an ordered collection of key-value pairs and don’t require the fast key lookup that the <bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept> type provides.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>インスタンスをあなたがキー値ペアの順序付けられたコレクション必要とするそして<bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept>が提供する高速な検索を要求しない場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use set-related operations to check for membership and to add or remove members from an instance of your custom option set type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>セット関連演算を使って、帰属を確認したり、あなたのあつらえのオプションセット型のインスタンス由来のメンバの追加や削除を行ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use slices only for transient computation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>スライスを一時的な計算のためだけに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use string interpolation to include one or more expressions in a string literal, wrapped in a set of parentheses and prefixed by a backslash.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列補間を使って文字列リテラルの中に１つ以上の式を、一組の丸括弧に包んでひとつのパックスラッシュを前に置いて、含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>NSRange<ept i="0">&lt;/c0&gt;</ept> type’s <bpt i="1" x="1">&lt;c1&gt;</bpt>toRange<ept i="1">&lt;/c1&gt;</ept> method to convert the instance to an optional range of <bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept> values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>NSRange<ept i="0">&lt;/c0&gt;</ept>型のもつ<bpt i="1" x="1">&lt;c1&gt;</bpt>toRange<ept i="1">&lt;/c1&gt;</ept>メソッドを使って、そのインスタンスをオプショナルの<bpt i="2" x="2">&lt;c2&gt;</bpt>Int<ept i="2">&lt;/c2&gt;</ept>値範囲へ変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept> method to test whether a set contains a specific element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>contains(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合が特定の要素を含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>last<ept i="1">&lt;/c1&gt;</ept> properties for safe access to the value of the array’s first and last elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の最初と最後の要素の値に対する安全なアクセスのために<bpt i="0" x="0">&lt;c0&gt;</bpt>first<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>last<ept i="1">&lt;/c1&gt;</ept>プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>flatMap<ept i="0">&lt;/c0&gt;</ept> method with a closure that returns an optional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>flatMap<ept i="0">&lt;/c0&gt;</ept>メソッドをオプショナル値を返すクロージャとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>intersection(_:)<ept i="0">&lt;/c0&gt;</ept> method to create a new set with only the elements common to a set and another set or sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>intersection(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合と別の集合またはシーケンスに共通の要素だけで新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>isDisjoint(with:)<ept i="0">&lt;/c0&gt;</ept> method to test whether a set has any elements in common with another set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isDisjoint(with:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合が別の集合と共通の何らかの要素を持つかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>isEmpty<ept i="0">&lt;/c0&gt;</ept> property to check quickly whether an array has any elements, or use the <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> property to find the number of elements in the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isEmpty<ept i="0">&lt;/c0&gt;</ept>プロパティを使って、ある配列が要素を持つかどうか素早く確認してください、または<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>を使うことで配列中の要素の数を調べてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>isStrictSubset(of:)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>isStrictSuperset(of:)<ept i="1">&lt;/c1&gt;</ept> methods to test whether a set is a subset or superset of, but not equal to, another set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isStrictSubset(of:)<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>isStrictSuperset(of:)<ept i="1">&lt;/c1&gt;</ept>メソッドを使って、ある集合が別の集合の下位集合または上位集合である、しかし等しくはないものであるかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>isSubset(of:)<ept i="0">&lt;/c0&gt;</ept> method to test whether a set contains all the elements of another set or sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isSubset(of:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合が別の集合またはシーケンスに属する要素すべてを含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>isSuperset(of:)<ept i="0">&lt;/c0&gt;</ept> method to test whether all elements of a set are contained in another set or sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>isSuperset(of:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合のすべての要素が別の集合またはシーケンスの中に含まれるかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>lazy<ept i="0">&lt;/c0&gt;</ept> property when chaining operations to prevent intermediate operations from allocating storage, or when you only need a part of the final collection to avoid unnecessary computation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>演算を連鎖することで中間演算がストレージを割り当てるのを防ぐときに、またはあなたが最終的コレクションの一部を必要とするだけであって不必要な計算を避けたい場合に、<bpt i="0" x="0">&lt;c0&gt;</bpt>lazy<ept i="0">&lt;/c0&gt;</ept>プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> method with a closure that returns a nonoptional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>メソッドを非オプショナル値を返すクロージャとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>max(by:)<ept i="0">&lt;/c0&gt;</ept> method to determine the index of the day with the most absences.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>max(by:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って最も欠席者の多い日付のインデックスを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>subtracting(_:)<ept i="0">&lt;/c0&gt;</ept> method to create a new set with the elements of a set that are not also in another set or sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>subtracting(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、別の集合またはシーケンスにはないある集合の要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>symmetricDifference(_:)<ept i="0">&lt;/c0&gt;</ept> method to create a new set with the elements that are in either a set or another set or sequence, but not in both.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>symmetricDifference(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合または別の集合かシーケンスのどちらかにある、しかし両方にではない要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;c0&gt;</bpt>union(_:)<ept i="0">&lt;/c0&gt;</ept> method to create a new set with the elements of a set and another set or sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>union(_:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、ある集合と別の集合またはシーケンスに属する要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="1" x="1">&lt;c1&gt;</bpt>capacity<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept> properties to determine how many more elements the array can store without allocating larger storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>capacity<ept i="1">&lt;/c1&gt;</ept>や<bpt i="2" x="2">&lt;c2&gt;</bpt>count<ept i="2">&lt;/c2&gt;</ept>プロパティを使って、より大きなストレージに割り当てることなく更にどのくらいの要素をその配列が格納できるか判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="4" x="4">&lt;c4&gt;</bpt>UnicodeScalar<ept i="4">&lt;/c4&gt;</ept> type to work with decoded Unicode scalar values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>UnicodeScalar<ept i="4">&lt;/c4&gt;</ept>型を使ってデコードされたユニコードスカラー値を扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the array’s <bpt i="0" x="0">&lt;c0&gt;</bpt>capacity<ept i="0">&lt;/c0&gt;</ept> property to determine the size of the new storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列の<bpt i="0" x="0">&lt;c0&gt;</bpt>capacity<ept i="0">&lt;/c0&gt;</ept>プロパティを使って新しいストレージの大きさを特定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the closed range operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>...<ept i="0">&lt;/c0&gt;</ept>) to create a closed range of any type that conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>...<ept i="0">&lt;/c0&gt;</ept>）を使って<bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the closed range operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>...<ept i="0">&lt;/c0&gt;</ept>) to create a closed range of any type that conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Strideable<ept i="1">&lt;/c1&gt;</ept> protocol with an associated signed integer <bpt i="2" x="2">&lt;c2&gt;</bpt>Stride<ept i="2">&lt;/c2&gt;</ept> type, such as any of the standard library’s integer types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>...<ept i="0">&lt;/c0&gt;</ept>）を使って、<bpt i="1" x="1">&lt;c1&gt;</bpt>Strideable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠して、何らかの標準ライブラリのもつ整数型といった、整数<bpt i="2" x="2">&lt;c2&gt;</bpt>Stride<ept i="2">&lt;/c2&gt;</ept>関連値型を持つ、何らかの型の配列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the half-open range operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>) to create a range of any type that conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>半開範囲演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>）を使って<bpt i="1" x="1">&lt;c1&gt;</bpt>Comparable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the half-open range operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>) to create a range of any type that conforms to the <bpt i="1" x="1">&lt;c1&gt;</bpt>Strideable<ept i="1">&lt;/c1&gt;</ept> protocol with an associated integer <bpt i="2" x="2">&lt;c2&gt;</bpt>Stride<ept i="2">&lt;/c2&gt;</ept> type, such as any of the standard library’s integer types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>半開範囲演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>）を使って、<bpt i="1" x="1">&lt;c1&gt;</bpt>Strideable<ept i="1">&lt;/c1&gt;</ept>プロトコルに準拠して、何らかの標準ライブラリのもつ整数型といった、整数<bpt i="2" x="2">&lt;c2&gt;</bpt>Stride<ept i="2">&lt;/c2&gt;</ept>関連値型を持つ、何らかの型の配列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the nearest ancestor’s implementation of <bpt i="0" x="0">&lt;c0&gt;</bpt>customMirror<ept i="0">&lt;/c0&gt;</ept> to create a mirror for that ancestor.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最も近い先祖の<bpt i="0" x="0">&lt;c0&gt;</bpt>customMirror<ept i="0">&lt;/c0&gt;</ept>の実装を使って、その先祖に対するミラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the nil-coalescing operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>??<ept i="0">&lt;/c0&gt;</ept>) to supply a default value in case the <bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept> instance is <bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>??<ept i="0">&lt;/c0&gt;</ept>）を使って、省略時の値を<bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept>インスタンスが<bpt i="2" x="2">&lt;c2&gt;</bpt>nil<ept i="2">&lt;/c2&gt;</ept>の場合に提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the “equal to” operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>) to test whether two sets contain the same elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「同等」演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>==<ept i="0">&lt;/c0&gt;</ept>）を使って、２つの集合が同じ要素らを含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this function for internal sanity checks that are active during testing but do not impact performance of shipping code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数を本質的な正常性確認のために使ってください、それはテストの間は活動的ですが出荷コードの性能に影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this function to detect conditions that must prevent the program from proceeding, even in shipping code.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数を使って、続行することからプログラムを妨げなければならない条件を突き止めてください、出荷コードにおいてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this function to stop the program when control flow can only reach the call if your API was improperly used.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのAPIが誤って使われた場合にその呼び出しに制御の流れが届くことができる時にだけこの関数を使ってプログラムを停止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this function to stop the program, without impacting the performance of shipping code, when control flow is not expected to reach the call—for example, in the <bpt i="0" x="0">&lt;c0&gt;</bpt>default<ept i="0">&lt;/c0&gt;</ept> case of a <bpt i="1" x="1">&lt;c1&gt;</bpt>switch<ept i="1">&lt;/c1&gt;</ept> where you have knowledge that one of the other cases must be satisfied.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この関数を使って、制御の流れが呼び出しに届くと予想されない場合に、出荷コードの性能に影響を与えることなく、プログラムを停止してください—例えば、<bpt i="1" x="1">&lt;c1&gt;</bpt>switch<ept i="1">&lt;/c1&gt;</ept>の<bpt i="0" x="0">&lt;c0&gt;</bpt>default<ept i="0">&lt;/c0&gt;</ept>ケース節において、そこにおいてあなたはそれ以前のケース節の１つが満たされなければならないことがわかっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer around a range instead of typing all those numbers in an array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それらの数をすべて配列リテラルの中にタイプするの代わりに、ある範囲を取り囲むようにこのイニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer to avoid intermediate reallocations when you know how many key-value pairs you are adding to a dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>どのくらい多くのキー値ペアをあなたが辞書に加えることになるかあなたが知っている場合は、このイニシャライザを使って幾度もの中間的な再割り当てを回避してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer to avoid repeated reallocations of a set’s storage if you know you’ll be adding elements to the set after creation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>作成後にあなたが集合にどのくらい多くの要素を加えることになるか知っているならば、このイニシャライザを使って集合のストレージの繰り返される再割り当てを回避してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer to convert an instance of any type to its custom debugging representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのあつらえのデバッグ表現に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer to convert an instance of any type to its preferred representation as a <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのより好まれる表現である<bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer to create a new set from an existing sequence, like an array or a range:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザを使って、新しい集合を既存のシーケンス、配列またはある範囲などから作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this initializer to recover a string after performing a collection slicing operation on a character view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このイニシャライザを使って、文字ビュー上でコレクションスライス操作を実行後に文字列を回復してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method instead of key-based subscripting when you need to know whether the new value supplants the value of an existing key.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>新しい値が既存のキーの値に取って代わるかどうかをあなたが知る必要がある場合は、キーに基づく添え字を使うのではなくこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method to append a single element to the end of a mutable array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを使ってある単一の要素を可変の配列の終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method to append the elements of a collection to the end of this array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを使ってあるコレクションの要素をこの配列の終わりに追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method to append the elements of a sequence to the end of an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このメソッドを使ってあるシーケンスの要素を配列の終わりに追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準コレクションを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method to receive an array of nonoptional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたの変換がオプショナル値を生成する場合に、このメソッドを使って非オプショナル値からなる配列を受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this method to receive only nonoptional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたの変換がオプショナル値を生成する場合に、このメソッドを使って非オプショナル値のみを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this operator to append the elements of a collection to the end of a <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept> instance with same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子を使って、あるコレクションに属する要素を、同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>インスタンスの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this operator to append the elements of a collection to the end of an <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> instance with same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子を使って、あるコレクションに属する要素を、同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>インスタンスの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this operator to append the elements of a collection to the end of an array with same <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子を使って、あるコレクションに属する要素を、同じ<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型を持つ配列の終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this operator to append the elements of a sequence to the end of a <bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept> instance with same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子を使って、あるシーケンスに属する要素を、同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>ContiguousArray<ept i="0">&lt;/c0&gt;</ept>インスタンスの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this operator to append the elements of a sequence to the end of an <bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept> instance with same <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子を使って、あるシーケンスに属する要素を、同じ<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>型を持つ<bpt i="0" x="0">&lt;c0&gt;</bpt>ArraySlice<ept i="0">&lt;/c0&gt;</ept>インスタンスの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this operator to append the elements of a sequence to the end of an array with same <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この演算子を使って、あるシーケンスに属するいくらかの要素を同じ<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型を持つ配列の終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this property in conjunction with <bpt i="0" x="0">&lt;c0&gt;</bpt>hasPointerRepresentation<ept i="0">&lt;/c0&gt;</ept> to determine whether a static string with pointer representation stores an ASCII or UTF-8 code unit sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このプロパティを<bpt i="0" x="0">&lt;c0&gt;</bpt>hasPointerRepresentation<ept i="0">&lt;/c0&gt;</ept>と連携して使って、ポインタ表現をもつある静的文字列がASCIIまたはUTF-8コード単位シーケンスを格納するかを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use your string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view’s index manipulation methods to convert the integer bounds to <bpt i="1" x="1">&lt;c1&gt;</bpt>String.UTF16View.Index<ept i="1">&lt;/c1&gt;</ept> values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたの文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューのもつインデックス操作メソッドを使って、整数境界を<bpt i="1" x="1">&lt;c1&gt;</bpt>String.UTF16View.Index<ept i="1">&lt;/c1&gt;</ept>値へ変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Used to access the key-value pairs in an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary&lt;Key, Value&gt;<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary&lt;Key, Value&gt;<ept i="0">&lt;/c0&gt;</ept>のインスタンス中のキー値ペアにアクセスするために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Used to access the members in an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>Set&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Set&lt;Element&gt;<ept i="0">&lt;/c0&gt;</ept>のインスタンスのメンバーにアクセスするために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Useful for calling Objective-C APIs that take “in/out” parameters (and default-constructible “out” parameters) by pointer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ポインターによって「in/out」パラメーター（そして何もしなくとも構築可能な「out」パラメーター）を取るObjective-C APIを呼び出すのに便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Useful mostly to recover the ability to use <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>…<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>, given just an iterator <bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>主として有用なのは<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>…<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>を使う能力を、ただイテレータ<bpt i="2" x="2">&lt;c2&gt;</bpt>i<ept i="2">&lt;/c2&gt;</ept>を与えるだけで獲得することです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using Enumerations as Errors</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>列挙をエラーとして使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using Iterators Directly</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>イテレータを直に使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using Multiple Iterators</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>複数のイテレータを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using a negative number or an index equal to or greater than <bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept> triggers a runtime error.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>負数をまたは<bpt i="0" x="0">&lt;c0&gt;</bpt>count<ept i="0">&lt;/c0&gt;</ept>と等しいかより大きいインデックスを使うことは、実行時エラーを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using a sequence’s iterator directly gives you access to the same elements in the same order as iterating over that sequence using a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるシーケンスのもつイテレータを直に使うことは、あなたに<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループを使ってそのシーケンスに反復するのと同じ要素に同じ順序でアクセスすることを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using an Option Set Type</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オプションセット型を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the <bpt i="0" x="0">&lt;c0&gt;</bpt>forEach<ept i="0">&lt;/c0&gt;</ept> method is distinct from a <bpt i="1" x="1">&lt;c1&gt;</bpt>for<ept i="1">&lt;/c1&gt;</ept>-<bpt i="2" x="2">&lt;c2&gt;</bpt>in<ept i="2">&lt;/c2&gt;</ept> loop in two important ways:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>forEach<ept i="0">&lt;/c0&gt;</ept>メソッドを使うことは、<bpt i="1" x="1">&lt;c1&gt;</bpt>for<ept i="1">&lt;/c1&gt;</ept>-<bpt i="2" x="2">&lt;c2&gt;</bpt>in<ept i="2">&lt;/c2&gt;</ept>ループとは２つの重要なやり方においてまるで異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the <bpt i="0" x="0">&lt;c0&gt;</bpt>return<ept i="0">&lt;/c0&gt;</ept> statement in the <bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept> closure will exit only from the current call to <bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>, not from any outer scope, and won’t skip subsequent calls.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>return<ept i="0">&lt;/c0&gt;</ept>文を<bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept>クロージャにおいて使うことは、ただ現在の<bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>への呼び出しから抜け出すだけです、全く外側のスコープからではなくて、そして続いて起こる呼び出しを飛ばしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the <bpt i="0" x="0">&lt;c0&gt;</bpt>return<ept i="0">&lt;/c0&gt;</ept> statement in the <bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept> closure will only exit from the current call to <bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>, not any outer scope, and won’t skip subsequent calls.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>return<ept i="0">&lt;/c0&gt;</ept>文を<bpt i="1" x="1">&lt;c1&gt;</bpt>body<ept i="1">&lt;/c1&gt;</ept>クロージャの中で使うことが、ただ現在の呼び出しから<bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>へとだけ抜け出します、何らかの外側のスコープではなく、そしてあとに続く呼び出しはスキップされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the <bpt i="2" x="2">&lt;c2&gt;</bpt>lazy<ept i="2">&lt;/c2&gt;</ept> property gives the standard library explicit permission to store the closure and the sequence in the result, and defer computation until it is needed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>lazy<ept i="2">&lt;/c2&gt;</ept>プロパティを使うことは、標準ライブラリにクロージャと結果のシーケンスを保管する明示的な許可を与えます、そして計算をそれが必要とされるまで遅らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the Nil-Coalescing Operator</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>nil合体演算子を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the closed range operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>...<ept i="2">&lt;/c2&gt;</ept>) to form <bpt i="3" x="3">&lt;c3&gt;</bpt>ClosedRange<ept i="3">&lt;/c3&gt;</ept> instances is preferred.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>ClosedRange<ept i="3">&lt;/c3&gt;</ept>インスタンスを形成するには完結範囲演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>...<ept i="2">&lt;/c2&gt;</ept>）を使うことが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the closed range operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>...<ept i="2">&lt;/c2&gt;</ept>) to form <bpt i="3" x="3">&lt;c3&gt;</bpt>CountableClosedRange<ept i="3">&lt;/c3&gt;</ept> instances is preferred.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>完結範囲演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>...<ept i="2">&lt;/c2&gt;</ept>）を使って<bpt i="3" x="3">&lt;c3&gt;</bpt>CountableClosedRange<ept i="3">&lt;/c3&gt;</ept>インスタンスを形作ることが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the half-open range operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>..&lt;<ept i="2">&lt;/c2&gt;</ept>) to form <bpt i="3" x="3">&lt;c3&gt;</bpt>CountableRange<ept i="3">&lt;/c3&gt;</ept> instances is preferred.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>半開範囲演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>...<ept i="2">&lt;/c2&gt;</ept>）を使って<bpt i="3" x="3">&lt;c3&gt;</bpt>CountableRange<ept i="3">&lt;/c3&gt;</ept>インスタンスを形作ることが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the half-open range operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>..&lt;<ept i="2">&lt;/c2&gt;</ept>) to form <bpt i="3" x="3">&lt;c3&gt;</bpt>Range<ept i="3">&lt;/c3&gt;</ept> instances is preferred.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>半開範囲演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>..&lt;<ept i="2">&lt;/c2&gt;</ept>）を使って<bpt i="3" x="3">&lt;c3&gt;</bpt>Range<ept i="3">&lt;/c3&gt;</ept>インスタンスを形成することが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using the raw value of a conforming type streamlines interoperation with Objective-C and legacy APIs and simplifies conformance to other protocols, such as <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>, <bpt i="4" x="4">&lt;c4&gt;</bpt>Comparable<ept i="4">&lt;/c4&gt;</ept>, and <bpt i="5" x="5">&lt;c5&gt;</bpt>Hashable<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>準拠する型の生の値を使うことは、Objective-CおよびレガシーAPIとの相互運用を能率的にします、そして他のプロトコル、例えば<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>、<bpt i="4" x="4">&lt;c4&gt;</bpt>Comparable<ept i="4">&lt;/c4&gt;</ept>、および<bpt i="5" x="5">&lt;c5&gt;</bpt>Hashable<ept i="5">&lt;/c5&gt;</ept>などへの準拠を簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid indices consist of the position of every element and a "past the end" position that's not valid for use as a subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>有効なインデックスは、各要素の位置、および添え字として使うのに有効でない「終わりを過ぎた」位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>有効なインデックスは、各要素の位置、および添え字引数として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>有効なインデックスは、各要素の位置、および添え字として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid types for <bpt i="0" x="0">&lt;c0&gt;</bpt>ExtendedGraphemeClusterLiteralType<ept i="0">&lt;/c0&gt;</ept> are <bpt i="1" x="1">&lt;c1&gt;</bpt>Character<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>StaticString<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>ExtendedGraphemeClusterLiteralType<ept i="0">&lt;/c0&gt;</ept>に対して有効な型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>Character<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>StaticString<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid types for <bpt i="0" x="0">&lt;c0&gt;</bpt>FloatLiteralType<ept i="0">&lt;/c0&gt;</ept> are <bpt i="1" x="1">&lt;c1&gt;</bpt>Float<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>Double<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>Float80<ept i="3">&lt;/c3&gt;</ept> where available.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>FloatLiteralType<ept i="0">&lt;/c0&gt;</ept>に対して有効な型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>Float<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>Double<ept i="2">&lt;/c2&gt;</ept>、そして利用可能なところでは<bpt i="3" x="3">&lt;c3&gt;</bpt>Float80<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid types for <bpt i="0" x="0">&lt;c0&gt;</bpt>StringLiteralType<ept i="0">&lt;/c0&gt;</ept> are <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>StaticString<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>StringLiteralType<ept i="0">&lt;/c0&gt;</ept>に対する有効な型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>と<bpt i="2" x="2">&lt;c2&gt;</bpt>StaticString<ept i="2">&lt;/c2&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Valid types for <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarLiteralType<ept i="0">&lt;/c0&gt;</ept> are <bpt i="1" x="1">&lt;c1&gt;</bpt>UnicodeScalar<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>StaticString<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalarLiteralType<ept i="0">&lt;/c0&gt;</ept>に対して有効な型は、<bpt i="1" x="1">&lt;c1&gt;</bpt>UnicodeScalar<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>String<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>StaticString<ept i="3">&lt;/c3&gt;</ept>です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WARNING: this initializer is not memory-safe!</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>警告：このイニシャライザはメモリ安全ではありません！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Warning</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>警告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Weak references do not affect the result of this function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>弱い参照は、この関数の結果に影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What’s more, when implemented using specific criteria, adoption of this protocol requires no extra work on your part.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>おまけに、特定の基準を使って実装される時、このプロトコルの採用はあなたの方での余分な作業を必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>error<ept i="0">&lt;/c0&gt;</ept> is an empty string, <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept> evaluates to <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept> is not evaluated, skipping the call to <bpt i="4" x="4">&lt;c4&gt;</bpt>majorErrors.contains(_:)<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>error<ept i="0">&lt;/c0&gt;</ept>が空の文字列である時、<bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>に評価して、<bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept>は評価されず、<bpt i="4" x="4">&lt;c4&gt;</bpt>majorErrors.contains(_:)<ept i="4">&lt;/c4&gt;</ept>への呼び出しを省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>error<ept i="0">&lt;/c0&gt;</ept> is not an empty string, <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept> evaluates to <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept> is evaluated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>error<ept i="0">&lt;/c0&gt;</ept>が空の文字列ではない時、<bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>に評価して、<bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept>は評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>measurements.count<ept i="0">&lt;/c0&gt;</ept> is equal to zero, <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept> evaluates to <bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept> is not evaluated, preventing a divide-by-zero error in the expression <bpt i="4" x="4">&lt;c4&gt;</bpt>sum / Double(measurements.count)<ept i="4">&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>measurements.count<ept i="0">&lt;/c0&gt;</ept>がゼロに等しい時、<bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>false<ept i="2">&lt;/c2&gt;</ept>に評価して、<bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept>は評価されず、式<bpt i="4" x="4">&lt;c4&gt;</bpt>sum / Double(measurements.count)<ept i="4">&lt;/c4&gt;</ept>でのゼロによる除算を防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>measurements.count<ept i="0">&lt;/c0&gt;</ept> is greater than zero, <bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept> evaluates to <bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept> is evaluated.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>measurements.count<ept i="0">&lt;/c0&gt;</ept>がゼロより大きい時、<bpt i="1" x="1">&lt;c1&gt;</bpt>lhs<ept i="1">&lt;/c1&gt;</ept>が<bpt i="2" x="2">&lt;c2&gt;</bpt>true<ept i="2">&lt;/c2&gt;</ept>に評価して、<bpt i="3" x="3">&lt;c3&gt;</bpt>rhs<ept i="3">&lt;/c3&gt;</ept>は評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.reduce(_:_:)<ept i="0">&lt;/c0&gt;</ept> is called, the following steps occur:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>numbers.reduce(_:_:)<ept i="0">&lt;/c0&gt;</ept>が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>Int.min...Int.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>Int.min...Int.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>Int16.min...Int16.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>Int16.min...Int16.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>Int32.min...Int32.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>Int32.min...Int32.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>Int64.min...Int64.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>Int64.min...Int64.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>Int8.min...Int8.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>Int8.min...Int8.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt.min...UInt.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt.min...UInt.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt16.min...UInt16.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt16.min...UInt16.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt32.min...UInt32.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt32.min...UInt32.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt64.min...UInt64.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt64.min...UInt64.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> is rounded toward zero, the result must be within the range <bpt i="1" x="1">&lt;c1&gt;</bpt>UInt8.min...UInt8.max<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>がゼロへの丸めをされる時、その結果は範囲<bpt i="1" x="1">&lt;c1&gt;</bpt>UInt8.min...UInt8.max<ept i="1">&lt;/c1&gt;</ept>内に入らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="4" x="4">&lt;c4&gt;</bpt>notSoGoodNumber<ept i="4">&lt;/c4&gt;</ept> is initialized, <bpt i="5" x="5">&lt;c5&gt;</bpt>Int("invalid-input")<ept i="5">&lt;/c5&gt;</ept> fails and returns <bpt i="6" x="6">&lt;c6&gt;</bpt>nil<ept i="6">&lt;/c6&gt;</ept>, and so <bpt i="7" x="7">&lt;c7&gt;</bpt>Int("42")<ept i="7">&lt;/c7&gt;</ept> is called to supply a default value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>notSoGoodNumber<ept i="4">&lt;/c4&gt;</ept>が初期化されるとき、<bpt i="5" x="5">&lt;c5&gt;</bpt>Int("invalid-input")<ept i="5">&lt;/c5&gt;</ept>は失敗して<bpt i="6" x="6">&lt;c6&gt;</bpt>nil<ept i="6">&lt;/c6&gt;</ept>を返します、そうすると<bpt i="7" x="7">&lt;c7&gt;</bpt>Int("42")<ept i="7">&lt;/c7&gt;</ept>が呼び出されて省略時の値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When <bpt i="4" x="4">&lt;c4&gt;</bpt>notSoGoodNumber<ept i="4">&lt;/c4&gt;</ept> is initialized, <bpt i="5" x="5">&lt;c5&gt;</bpt>Int("invalid-input")<ept i="5">&lt;/c5&gt;</ept> fails and returns <bpt i="6" x="6">&lt;c6&gt;</bpt>nil<ept i="6">&lt;/c6&gt;</ept>, and so the <bpt i="7" x="7">&lt;c7&gt;</bpt>getDefault()<ept i="7">&lt;/c7&gt;</ept> method is called to supply a default value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="4" x="4">&lt;c4&gt;</bpt>notSoGoodNumber<ept i="4">&lt;/c4&gt;</ept>が初期化されるとき、<bpt i="5" x="5">&lt;c5&gt;</bpt>Int("invalid-input")<ept i="5">&lt;/c5&gt;</ept>は失敗して<bpt i="6" x="6">&lt;c6&gt;</bpt>nil<ept i="6">&lt;/c6&gt;</ept>を返します、そうすると<bpt i="7" x="7">&lt;c7&gt;</bpt>getDefault()<ept i="7">&lt;/c7&gt;</ept>メソッドが呼び出されて省略時の値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a dictionary outgrows its storage, existing indices may be invalidated without any notification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書がそれのストレージより大きくなる時、既存のインデックスは何の通知もなしに無効にされるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある文字列の隣接ストレージがいっぱいになるとき、新しいストレージが割り当てられる必要があり、データは新しいストレージに移動される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an array has additional capacity and is not sharing its storage with another instance, appending an element is O(1).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列がさらなる容量を持っていてそれのストレージを別のインスタンスと共有していない場合、ある要素を追加することはO(1)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an array needs to reallocate storage before appending or its storage is shared with another copy, appending is O(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>), where <bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept> is the length of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>配列が追加の前にストレージの際割り当てを必要とするかそれのストレージを別のコピーと共有する場合、追加作業はO(<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>)です、そこで<bpt i="2" x="2">&lt;e2&gt;</bpt>n<ept i="2">&lt;/e2&gt;</ept>は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an existing element is inserted, the <bpt i="2" x="2">&lt;c2&gt;</bpt>classDays<ept i="2">&lt;/c2&gt;</ept> set does not change.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>既存の要素が挿入される時、<bpt i="2" x="2">&lt;c2&gt;</bpt>classDays<ept i="2">&lt;/c2&gt;</ept>集合は変化しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When calling a function with a <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> parameter, you can pass a Swift dictionary literal without causing a <bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept> to be created.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関数を<bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>パラメータを使って呼び出す場合、あなたはSwift辞書リテラルを渡すことが<bpt i="1" x="1">&lt;c1&gt;</bpt>Dictionary<ept i="1">&lt;/c1&gt;</ept>の作成なしに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When calling the new <bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept> initializer within a <bpt i="1" x="1">&lt;c1&gt;</bpt>do<ept i="1">&lt;/c1&gt;</ept> statement, you can use pattern matching to match specific cases of your custom error type and access their associated values, as in the example below.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>Int<ept i="0">&lt;/c0&gt;</ept>イニシャライザを<bpt i="1" x="1">&lt;c1&gt;</bpt>do<ept i="1">&lt;/c1&gt;</ept>文内部で呼び出すとき、あなたはパターンマッチを使ってあなたのあつらえのエラー型のそれぞれ詳述なケース節と照合して、それらの関連値にアクセスします、下の例でのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When comparing two values with this method, <bpt i="1" x="1">&lt;c1&gt;</bpt>-0<ept i="1">&lt;/c1&gt;</ept> is equal to <bpt i="2" x="2">&lt;c2&gt;</bpt>+0<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>２つの値をこのメソッドで比較する場合、<bpt i="1" x="1">&lt;c1&gt;</bpt>-0<ept i="1">&lt;/c1&gt;</ept>は<bpt i="2" x="2">&lt;c2&gt;</bpt>+0<ept i="2">&lt;/c2&gt;</ept>と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When creating a custom collection type, add the minimal requirements of the <bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept> protocol: starting and ending indices and a subscript for accessing elements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あつらえのコレクション型を作成する場合、<bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept>プロトコルの最小限の要件：始まりと終わりのインデックスおよび要素にアクセスするための添え字、を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When creating an option set, include a <bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept> property in your type declaration.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるオプションセットを作成する場合は、<bpt i="0" x="0">&lt;c0&gt;</bpt>rawValue<ept i="0">&lt;/c0&gt;</ept>プロパティをあなたの型宣言に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When declaring a function or method, you don’t need to specify a return type if no value will be returned.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>関数またはメソッドを宣言するとき、値が返されることがないならばあなたは戻り型を指定する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When defining your own custom enumeration, you give it a raw type by specifying the raw type as the first item in the enumeration’s type inheritance list.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなた独自のあつらえの列挙を定義している場合、あなたはそれに生の型を与えることを、その生の型を列挙の型継承リストの最初の項目として指定することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When enumerating a collection, the integer part of each pair is a counter for the enumeration, not necessarily the index of the paired value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるコレクションを列挙するとき、各ペアの整数部分は列挙に対するあるカウンタです、必ずしもペアにされた値のインデックスではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When implementing a custom type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>SetAlgebra<ept i="0">&lt;/c0&gt;</ept> protocol, you must implement the required initializers and methods.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>SetAlgebra<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠するあつらえの型を実装する場合、あなたは必須イニシャライザとメソッドを実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When implementing lazy operations, wrapping <bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept> instead of <bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept> can prevent result types from growing an extra <bpt i="2" x="2">&lt;c2&gt;</bpt>LazySequence<ept i="2">&lt;/c2&gt;</ept> layer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>遅延に演算を実装するとき、<bpt i="0" x="0">&lt;c0&gt;</bpt>elements<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>self<ept i="1">&lt;/c1&gt;</ept>の代わりにラップすることは、結果の型を余分の<bpt i="2" x="2">&lt;c2&gt;</bpt>LazySequence<ept i="2">&lt;/c2&gt;</ept>レイヤが増大することを防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When iterated over, keys appear in this collection in the same order as they occur in the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべてにわたって反復した場合、それらが辞書のキー値ペアにおいて現れるのと同じ順序で、キーはこのコレクションにおいて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When iterated over, values appear in this collection in the same order as they occur in the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>すべてにわたって反復した場合、それらが辞書のキー値ペアにおいて現れるのと同じ順序で、値はこのコレクションにおいて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When performing collection-based operations that return an index into a dictionary, use this subscript with the resulting value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ある辞書に対してのコレクション基盤インデックスを返す演算を実行する時、この添え字を結果の値とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When placed next to each other in a Swift string literal, these two code points are combined into a single grapheme cluster, represented by a <bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept> instance in Swift.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるSwift文字列リテラルにおいて互いに隣り合わせに置かれる時、これら２つのコード点は、Swiftでは１つの<bpt i="2" x="2">&lt;c2&gt;</bpt>Character<ept i="2">&lt;/c2&gt;</ept>インスタンスによって表される、単一の書記素クラスタへと一体化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それが起こる場合、修正されている配列はそれのストレージを独自な自分だけの自身のコピーと置き換え、それはそれからそこで修正されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the <bpt i="0" x="0">&lt;c0&gt;</bpt>forceASCII<ept i="0">&lt;/c0&gt;</ept> parameter is <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>, a <bpt i="2" x="2">&lt;c2&gt;</bpt>UnicodeScalar<ept i="2">&lt;/c2&gt;</ept> instance with a value greater than 127 is represented using an escaped numeric value; otherwise, non-ASCII characters are represented using their typical string value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>forceASCII<ept i="0">&lt;/c0&gt;</ept>パラメータが<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>である場合、127より大きい値をもつ<bpt i="2" x="2">&lt;c2&gt;</bpt>UnicodeScalar<ept i="2">&lt;/c2&gt;</ept>インスタンスはエスケープされた数的な値を使って表されます、そうでなければ、非ASCIIはそれらの典型的な文字列値を使って表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the context provides enough type information, you can use a special form of the dictionary literal, square brackets surrounding a single colon, to initialize an empty dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文脈が十分な型情報を提供する場合、あなたは特別な形式の辞書リテラル、ただ１つのコロンを囲んでいる角括弧、を使って空の辞書を初期化することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the dictionary’s <bpt i="2" x="2">&lt;c2&gt;</bpt>Key<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>Value<ept i="3">&lt;/c3&gt;</ept> types are neither classes nor <bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept> protocols, any required bridging of elements occurs at the first access of each element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書の<bpt i="2" x="2">&lt;c2&gt;</bpt>Key<ept i="2">&lt;/c2&gt;</ept>と<bpt i="3" x="3">&lt;c3&gt;</bpt>Value<ept i="3">&lt;/c3&gt;</ept>型がクラスでも<bpt i="4" x="4">&lt;c4&gt;</bpt>@objc<ept i="4">&lt;/c4&gt;</ept>プロトコルでもない場合、それら要素のブリッジに必要とされるあらゆることが各要素の最初のアクセスで起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the original <bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept> array is modified, it makes a unique copy of its storage before making the modification.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>オリジナルの<bpt i="1" x="1">&lt;c1&gt;</bpt>numbers<ept i="1">&lt;/c1&gt;</ept>配列が修正されるとき、それはそれのストレージの特有なコピーをその修正がなされる前に行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the return value is <bpt i="5" x="5">&lt;c5&gt;</bpt>false<ept i="5">&lt;/c5&gt;</ept>, the value of <bpt i="6" x="6">&lt;c6&gt;</bpt>i<ept i="6">&lt;/c6&gt;</ept> is equal to <bpt i="7" x="7">&lt;c7&gt;</bpt>limit<ept i="7">&lt;/c7&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>戻り値が<bpt i="5" x="5">&lt;c5&gt;</bpt>false<ept i="5">&lt;/c5&gt;</ept>の場合、<bpt i="6" x="6">&lt;c6&gt;</bpt>i<ept i="6">&lt;/c6&gt;</ept>の値は<bpt i="7" x="7">&lt;c7&gt;</bpt>limit<ept i="7">&lt;/c7&gt;</ept>に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the sequence has been exhausted, the <bpt i="2" x="2">&lt;c2&gt;</bpt>next()<ept i="2">&lt;/c2&gt;</ept> method returns <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そのシーケンスが使い尽くされたならば、<bpt i="2" x="2">&lt;c2&gt;</bpt>next()<ept i="2">&lt;/c2&gt;</ept>メソッドは<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the sequence is exhausted, the last value returned from the closure is returned to the caller.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>シーケンスが使い尽くされる時、クロージャから返される最後の値が呼び出し側へ帰されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the set’s <bpt i="2" x="2">&lt;c2&gt;</bpt>Element<ept i="2">&lt;/c2&gt;</ept> type is neither a class nor an <bpt i="3" x="3">&lt;c3&gt;</bpt>@objc<ept i="3">&lt;/c3&gt;</ept> protocol, any required bridging of elements occurs at the first access of each element, so the first operation that uses the contents of the set (for example, a membership test) can take O(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>集合の持つ<bpt i="2" x="2">&lt;c2&gt;</bpt>Element<ept i="2">&lt;/c2&gt;</ept>型がクラスでも<bpt i="3" x="3">&lt;c3&gt;</bpt>@objc<ept i="3">&lt;/c3&gt;</ept>プロトコルでもない場合、要素のブリッジに必要なあらゆることが要素それぞれの最初のアクセスで起こります、それで集合の内容を使う最初の演算（例えば、帰属テスト）は、O(<bpt i="4" x="4">&lt;e4&gt;</bpt>n<ept i="4">&lt;/e4&gt;</ept>)をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When these invalid strings are parsed by the <bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept> failable initializer, the example uses the nil-coalescing operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>??<ept i="2">&lt;/c2&gt;</ept>) to provide NaN as a fallback value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それら無効な文字列が<bpt i="1" x="1">&lt;c1&gt;</bpt>Double<ept i="1">&lt;/c1&gt;</ept>の失敗できるイニシャライザによって解析される場合のため、この例はnil合体演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>??<ept i="2">&lt;/c2&gt;</ept>）を使ってNaNをフォールバック（頼みの綱の、予備の）値として提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When using an empty array literal, specify the type of the variable or constant.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>空の配列リテラルを使う時は、変数または定数の型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがいくらかの要素を配列に加えてその配列がそれの確保した容量を超え始める時、配列はより大きなメモリ領域を割り当てて、それの要素をその新しいストレージ（貯蔵場所）にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you are operating on many values, this behavior is valuable because operations on NaN simply forward the value and don’t cause runtime errors.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが沢山の値に演算を行っている時、この挙動は有益です、なぜならNaNに関する演算は単にその値を次に伝えて実行時エラーを起こさないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you assign a value for a key and that key already exists, the dictionary overwrites the existing value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがある値をあるキーに割り当てるそしてそのキーが既に存在する場合、辞書は既存の値を上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you call a C function using a <bpt i="3" x="3">&lt;c3&gt;</bpt>String<ept i="3">&lt;/c3&gt;</ept>, Swift automatically creates a buffer of UTF-8 code units and passes a pointer to that buffer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがC関数を<bpt i="3" x="3">&lt;c3&gt;</bpt>String<ept i="3">&lt;/c3&gt;</ept>を使って呼び出すとき、Swiftは自動的にUTF-8コード単位のバッファを作成してポインタをそのバッファへ渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you call a function that does not fully specify its parameters’ types, use the type-cast operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>as<ept i="0">&lt;/c0&gt;</ept>) to specify the type of an array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが完全にそれのパラメータの型を指定しない関数を呼び出す場合は、型キャスト演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>as<ept i="0">&lt;/c0&gt;</ept>）を使って配列リテラルの型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you create a constant or variable using one of the Boolean literals <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>, the resulting type is determined by the <bpt i="2" x="2">&lt;c2&gt;</bpt>BooleanLiteralType<ept i="2">&lt;/c2&gt;</ept> alias.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが定数や変数をブールリテラル<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>false<ept i="1">&lt;/c1&gt;</ept>を使って作成するとき、結果の型は<bpt i="2" x="2">&lt;c2&gt;</bpt>BooleanLiteralType<ept i="2">&lt;/c2&gt;</ept>エイリアスによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you define an enumeration without associated values, it gains <bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept> conformance automatically, and you can add <bpt i="3" x="3">&lt;c3&gt;</bpt>Hashable<ept i="3">&lt;/c3&gt;</ept> conformance to your other custom types by adding a single <bpt i="4" x="4">&lt;c4&gt;</bpt>hashValue<ept i="4">&lt;/c4&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが列挙を関連値なしで定義するとき、それは<bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept>準拠を自動的に手に入れます、そしてあなたは<bpt i="3" x="3">&lt;c3&gt;</bpt>Hashable<ept i="3">&lt;/c3&gt;</ept>準拠をあなたのあつらえの型に加えることがただ１つだけ<bpt i="4" x="4">&lt;c4&gt;</bpt>hashValue<ept i="4">&lt;/c4&gt;</ept>プロパティを加えることによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you do, all known <bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept> class methods and properties are available as implicitly unwrapped optional methods and properties, respectively.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがそうする場合、全ての既知の<bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept>クラスのメソッドおよびプロパティは、暗黙的にアンラップされるオプショナルのメソッドおよびプロパティとしてそれぞれが利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you do, use a structure to represent errors.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがそうする場合は、構造体を使ってエラーを表してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you know how many new values you’re adding to a dictionary, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>init(minimumCapacity:)<ept i="0">&lt;/c0&gt;</ept> initializer to allocate the correct amount of storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>どのくらい多くの新しい値をあなたが辞書に加えることになるかあなたが知っている場合は、<bpt i="0" x="0">&lt;c0&gt;</bpt>init(minimumCapacity:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを使って正確な量のストレージを割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need a range that includes the last element of a collection, use the half-open range operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>) with <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがコレクションの最後の要素を含むある範囲を必要とする時は、半開範囲演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>）を<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need a range that includes the last element of an array, use the half-open range operator (<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>) with <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが配列の最後の要素を含む範囲を必要とするならば、半開範囲演算子（<bpt i="0" x="0">&lt;c0&gt;</bpt>..&lt;<ept i="0">&lt;/c0&gt;</ept>）を<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need to access APIs that expect data in an <bpt i="0" x="0">&lt;c0&gt;</bpt>NSArray<ept i="0">&lt;/c0&gt;</ept> instance instead of <bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept>, use the type-cast operator (<bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept>) to bridge your instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>Array<ept i="1">&lt;/c1&gt;</ept>ではなく<bpt i="0" x="0">&lt;c0&gt;</bpt>NSArray<ept i="0">&lt;/c0&gt;</ept>インスタンスでのデータを期待するAPIにあなたがアクセスする必要がある場合、型キャスト演算子（<bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept>）を使ってあなたのアンスタンスをブリッジしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need to check whether your collection is empty, use the <bpt i="0" x="0">&lt;c0&gt;</bpt>isEmpty<ept i="0">&lt;/c0&gt;</ept> property instead of checking that the <bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept> property is equal to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのコレクションが空かどうか確認する必要がある場合、<bpt i="0" x="0">&lt;c0&gt;</bpt>isEmpty<ept i="0">&lt;/c0&gt;</ept>プロパティを、<bpt i="1" x="1">&lt;c1&gt;</bpt>count<ept i="1">&lt;/c1&gt;</ept>プロパティがゼロかどうか調べる代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need to create an instance of an option set, assign one of the type’s static members to your variable or constant.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがあるオプションセットのインスタンスを作成する必要がある場合は、その型のもつ静的メンバの１つをあなたの変数または定数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need to know the length of a string, you must first consider what you’ll use the length for.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがある文字列の長さを知る必要がある場合、あなたが最初に考えなければならないのは、あなたが使う長さは何に対するものかということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you need to perform an operation on all of an array’s elements, use a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop to iterate through the array’s contents.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがある配列の要素のすべてである演算を実行することを必要とするならば、<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>を使って配列の内容の始めから終わりまで反復適用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you pass <bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept> as <bpt i="1" x="1">&lt;c1&gt;</bpt>isRepairing<ept i="1">&lt;/c1&gt;</ept>, this method replaces ill-formed sequences with the Unicode replacement character (<bpt i="2" x="2">&lt;c2&gt;</bpt>"\u{FFFD}"<ept i="2">&lt;/c2&gt;</ept>); otherwise, an ill-formed sequence causes this method to stop decoding and return <bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>true<ept i="0">&lt;/c0&gt;</ept>を<bpt i="1" x="1">&lt;c1&gt;</bpt>isRepairing<ept i="1">&lt;/c1&gt;</ept>として渡すとき、このメソッドは誤形式シーケンスをユニコード代替文字（<bpt i="2" x="2">&lt;c2&gt;</bpt>"\u{FFFD}"<ept i="2">&lt;/c2&gt;</ept>）で置き換えます；そうでなければ、ある誤形式シーケンスはこのメソッドがエンコードを停止して<bpt i="3" x="3">&lt;c3&gt;</bpt>nil<ept i="3">&lt;/c3&gt;</ept>を返すことを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you use <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept> as a concrete type, you have at your disposal every <bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept> method and property—that is, methods and properties imported from Objective-C or marked with the <bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept> attribute.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept>を具体的な型として使うとき、すべての<bpt i="1" x="1">&lt;c1&gt;</bpt>@objc<ept i="1">&lt;/c1&gt;</ept>メソッドやプロパティ — すなわち、Objective-Cからインポートされるか、<bpt i="2" x="2">&lt;c2&gt;</bpt>@objc<ept i="2">&lt;/c2&gt;</ept>属性で印されるメソッドとプロパティ — があなたの自由になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you use arrays, dictionaries, views of a string’s contents and other types, you benefit from the operations that the <bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept> protocol declares and implements.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが配列、辞書、文字列の内容のビュー、および他の型を使うとき、あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Collection<ept i="0">&lt;/c0&gt;</ept>プロトコルが宣言および実装する演算からの恩恵を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you use bitwise operators with an integer, you perform operations on the raw data bits that store the integer’s value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがビット単位演算子を整数で使うとき、あなたはその整数の値を格納する生のデータビット上で演算を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you use string interpolation, the following steps occur:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが文字列補間を使うとき、以下の段階が発生します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you use this type, you become partially responsible for keeping the object alive.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがこの型を使う場合、あなたはオブジェクト存続を保っていることに対して部分的に責任を負うようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you want to sort a collection of elements that doesn’t conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol, pass a closure to this method that returns <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> when the first element passed should be ordered before the second.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠しない要素からなるコレクションをソートしたい場合、あるクロージャをこのメソッドに渡してください、それは渡された最初の要素が２番目の前に並べられるべき場合は<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you want to sort a collection of elements that don’t conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol, pass a predicate to this method that returns <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> when the first element passed should be ordered before the second.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠しない要素からなるコレクションをソートしたい場合、渡された最初の要素が２番目の前に並べられるべき場合は<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返す述部をこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you want to sort a sequence of elements that don’t conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol, pass a predicate to this method that returns <bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept> when the first element passed should be ordered before the second.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠しない要素からなるシーケンスをソートしたい場合、渡された最初の要素が２番目の前に並べられるべき場合は<bpt i="1" x="1">&lt;c1&gt;</bpt>true<ept i="1">&lt;/c1&gt;</ept>を返す述部をこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you’re certain that an instance of <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> contains a value, you can unconditionally unwrap the value by using the forced unwrap operator (postfix <bpt i="1" x="1">&lt;c1&gt;</bpt>!<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたがある<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>のインスタンスが値を含むことを確信している場合、あなたはその値を無条件にアンラップすることが強制アンラップ演算子（接尾辞<bpt i="1" x="1">&lt;c1&gt;</bpt>!<ept i="1">&lt;/c1&gt;</ept>）を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you’re ready to create a new <bpt i="0" x="0">&lt;c0&gt;</bpt>IntPairs<ept i="0">&lt;/c0&gt;</ept> instance, use a dictionary literal as the parameter to the <bpt i="1" x="1">&lt;c1&gt;</bpt>IntPairs<ept i="1">&lt;/c1&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが新しい<bpt i="0" x="0">&lt;c0&gt;</bpt>IntPairs<ept i="0">&lt;/c0&gt;</ept>インスタンスを作成する準備ができたら、辞書リテラルをパラメータとして<bpt i="1" x="1">&lt;c1&gt;</bpt>IntPairs<ept i="1">&lt;/c1&gt;</ept>イニシャライザに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whenever possible, Swift’s compiler infers the full intended type of your array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>可能な時はいつでも、Swiftのコンパイラはあなたの配列リテラルの完全な意図される型を推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whenever you use a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop with an array, set, or any other collection or sequence, you’re using that type’s iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループを配列、集合、または何らかの他のコレクションやシーケンスとともに使うときはいつでも、あなたはこの型のイテレータを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whenever you use multiple iterators (or <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loops) over a single sequence, be sure you know that the specific sequence supports repeated iteration, either because you know its concrete type or because the sequence is also constrained to the <bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが複数のイテレータ（または<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループ）をある単一のシーケンスに対して使うときはいつでも、その特定のシーケンスが繰り返される反復をサポートすると確実にあなたが知っているようにしてください、あなたがそれの具体的な型を知っているからかもしくはそのシーケンスもまた<bpt i="2" x="2">&lt;c2&gt;</bpt>Collection<ept i="2">&lt;/c2&gt;</ept>プロトコルに制約されるからかのどちらかで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Where in some languages you might pass a starting index into an <bpt i="1" x="1">&lt;c1&gt;</bpt>indexOf<ept i="1">&lt;/c1&gt;</ept> method to find the second day, in Swift you perform the same operation on a slice of the original array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>なんらかの言語であなたがある開始インデックスを<bpt i="1" x="1">&lt;c1&gt;</bpt>indexOf<ept i="1">&lt;/c1&gt;</ept>メソッドに渡して２つ目の日付を見つけるであろうところで、Swiftではあなたは同じ演算をオリジナル配列のスライス上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whether the dictionary should keep its underlying storage.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>辞書がそれの基礎をなすストレージを保つべきかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whether using an option set or creating your own, you use the raw value of an option set instance to store the instance’s bitfield.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あるオプションセットを使用するかあなた自身で作成する場合、あなたはオプションセットインスタンスの生の値を使って、そのインスタンスの持つビットフィールドを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whichever of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept> has greater magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>のどちらがより大きい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whichever of <bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept> has lesser magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>x<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>y<ept i="1">&lt;/c1&gt;</ept>のどちらがより小さい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>外見上は単純である一方、この能力はあなたにたくさんの演算へのアクセスを与え、それはあなたがあらゆるシーケンス上で実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With a <bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept> type, you can switch back and forth between a custom type and an associated <bpt i="1" x="1">&lt;c1&gt;</bpt>RawValue<ept i="1">&lt;/c1&gt;</ept> type without losing the value of the original <bpt i="2" x="2">&lt;c2&gt;</bpt>RawRepresentable<ept i="2">&lt;/c2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>RawRepresentable<ept i="0">&lt;/c0&gt;</ept>型で、あなたはあつらえの型と関連<bpt i="1" x="1">&lt;c1&gt;</bpt>RawValue<ept i="1">&lt;/c1&gt;</ept>型との間を行ったり戻ったり切り替えることが元の<bpt i="2" x="2">&lt;c2&gt;</bpt>RawRepresentable<ept i="2">&lt;/c2&gt;</ept>型の値の損失なしに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With those elements defined, the inherited <bpt i="3" x="3">&lt;c3&gt;</bpt>makeIterator()<ept i="3">&lt;/c3&gt;</ept> method satisfies the requirements of the <bpt i="4" x="4">&lt;c4&gt;</bpt>Sequence<ept i="4">&lt;/c4&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>定義されるそれらの要素とともに、継承される<bpt i="3" x="3">&lt;c3&gt;</bpt>makeIterator()<ept i="3">&lt;/c3&gt;</ept>メソッドが<bpt i="4" x="4">&lt;c4&gt;</bpt>Sequence<ept i="4">&lt;/c4&gt;</ept>プロトコルの要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>何らかの他の情報なしでは、Swiftは指定された値を含んでいる配列を、自動的にその配列の<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型を推論して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>文字列補間の中の式それぞれを丸括弧で包んで、バックスラッシュを前においてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes a textual representation of this instance into the given output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>このインスタンスのテキスト表現を与えられた出力ストリームへ書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the character into the given output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>その文字を与えられた出力ストリームへと書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the contents of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> to a file at a given path using a given encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の内容を指定されたパスによって指定されたファイルに指定された符号化を使って書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the contents of the <bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept> to the URL specified by url using the specified encoding.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>String<ept i="0">&lt;/c0&gt;</ept>の内容をurlによって指定されたURLへ指定された符号化を使って書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the given <bpt i="0" x="0">&lt;c0&gt;</bpt>range<ept i="0">&lt;/c0&gt;</ept> of characters into <bpt i="1" x="1">&lt;c1&gt;</bpt>buffer<ept i="1">&lt;/c1&gt;</ept> in a given <bpt i="2" x="2">&lt;c2&gt;</bpt>encoding<ept i="2">&lt;/c2&gt;</ept>, without any allocations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた<bpt i="0" x="0">&lt;c0&gt;</bpt>range<ept i="0">&lt;/c0&gt;</ept>の文字を<bpt i="1" x="1">&lt;c1&gt;</bpt>buffer<ept i="1">&lt;/c1&gt;</ept>へと与えられた<bpt i="2" x="2">&lt;c2&gt;</bpt>encoding<ept i="2">&lt;/c2&gt;</ept>で書き込みます、なんらアロケーションなしに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the string into the given output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた出力ストリームへ文字列を書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the textual representation of the Unicode scalar into the given output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ユニコードスカラーのテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the textual representations of the given items into the given output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた要素のテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the textual representations of the given items into the standard output.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた項目のテキスト表現を標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the given output stream.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the standard output.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing is O(1) unless the array’s storage is shared with another array, in which case writing is O(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>), where <bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept> is the length of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>書き込みはO(1)です、配列のストレージが他の配列と共有されない限りは、その場合には書き込みはO(<bpt i="0" x="0">&lt;e0&gt;</bpt>n<ept i="0">&lt;/e0&gt;</ept>)です、そこで<bpt i="1" x="1">&lt;e1&gt;</bpt>n<ept i="1">&lt;/e1&gt;</ept>は配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You also use this method to sort elements that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol in descending order.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまた、このメソッドを使って<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する要素を降順でソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You are expected to construct and—if necessary—destroy objects there yourself, using the APIs on <bpt i="2" x="2">&lt;c2&gt;</bpt>UnsafeMutablePointer&lt;Element&gt;<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、オブジェクトの組み立てと—必要ならば—破壊をそこであなた自身で、<bpt i="2" x="2">&lt;c2&gt;</bpt>UnsafeMutablePointer&lt;Element&gt;<ept i="2">&lt;/c2&gt;</ept>上でAPIを使って行うことを当然期待されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can access a string’s view of UTF-16 code units by using its <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは文字列の持つビューのUTF-16コード単位にアクセスすることが、それの<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>プロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can access a string’s view of UTF-8 code units by using its <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、文字列のもつUTF-8コード単位ビューにそれの<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>プロパティを使うことによってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can access a string’s view of Unicode scalar values by using its <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは文字列の持つビューのユニコードスカラー値にアクセスすることが、それの<bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>プロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can access an element of a collection through its subscript with any valid index except the collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept> property, a “past the end” index that does not correspond with any element of the collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはコレクションの要素にアクセスすることがそれの添え字を通して行えます、それにはあらゆる有効なインデックスを含みますが、コレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>endIndex<ept i="0">&lt;/c0&gt;</ept>プロパティは除きます、それはコレクションのどの要素にも対応しない「終わりを過ぎた」インデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can access individual array elements through a subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは個々の配列要素に添え字を通してアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can add new elements in the middle of an array by using the <bpt i="0" x="0">&lt;c0&gt;</bpt>insert(_:at:)<ept i="0">&lt;/c0&gt;</ept> method for single elements and by using <bpt i="1" x="1">&lt;c1&gt;</bpt>insert(contentsOf:at:)<ept i="1">&lt;/c1&gt;</ept> to insert multiple elements from another collection or array literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、新しい要素を配列の中ほどに追加することが、単一の項目には<bpt i="0" x="0">&lt;c0&gt;</bpt>insert(_:at:)<ept i="0">&lt;/c0&gt;</ept>メソッドを使って、そして別のコレクションや配列リテラルから複数の項目を挿入するには<bpt i="1" x="1">&lt;c1&gt;</bpt>insert(contentsOf:at:)<ept i="1">&lt;/c1&gt;</ept>を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also combine, exclude, or subtract the elements of two sets:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまた、結合、排他、または差引を行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also create Unicode scalar values directly from their numeric representation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまた、ユニコードスカラー値を直接にそれらの数値表現から作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also perform unconditional optional chaining by using the postfix <bpt i="0" x="0">&lt;c0&gt;</bpt>!<ept i="0">&lt;/c0&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまた、無条件のオプショナル連鎖を実行することが、接尾辞<bpt i="0" x="0">&lt;c0&gt;</bpt>!<ept i="0">&lt;/c0&gt;</ept>演算子を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also update, modify, or remove keys and values from a dictionary using the key-based subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまた、辞書のキーと値の更新、修正、または削除をキー基盤の添え字を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also use literals to specify values for one or more cases.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまた、リテラルを使うことで値を１つ以上のケース節に指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also use this initializer to convert a complex sequence or collection type back to an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはまたこのイニシャライザを使って、逆に複雑なシーケンスまたはコレクション型を配列へと変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can assign a dictionary literal to a variable or constant or pass it to a function that expects a dictionary.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、辞書リテラルを変数や定数に代入したり、それを辞書を予期する関数に渡したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can bridge between <bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>NSDictionary<ept i="1">&lt;/c1&gt;</ept> using the <bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>Dictionary<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>NSDictionary<ept i="1">&lt;/c1&gt;</ept>の間をブリッジすることが<bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept>演算子を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can bridge between <bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>NSSet<ept i="1">&lt;/c1&gt;</ept> using the <bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Set<ept i="0">&lt;/c0&gt;</ept>と<bpt i="1" x="1">&lt;c1&gt;</bpt>NSSet<ept i="1">&lt;/c1&gt;</ept>の間を<bpt i="2" x="2">&lt;c2&gt;</bpt>as<ept i="2">&lt;/c2&gt;</ept>演算子を使ってブリッジできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can call any method on the slices that you might have called on the <bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept> array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはどんなメソッドでもそれらスライス上で呼び出すことができます、それはあなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>absences<ept i="0">&lt;/c0&gt;</ept>配列上で呼び出すであろうものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can convert a <bpt i="0" x="0">&lt;c0&gt;</bpt>String.CharacterView<ept i="0">&lt;/c0&gt;</ept> instance back into a string using the <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> type’s <bpt i="2" x="2">&lt;c2&gt;</bpt>init(_:)<ept i="2">&lt;/c2&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>String.CharacterView<ept i="0">&lt;/c0&gt;</ept>インスタンスを逆にひとつの文字列へと変換することが、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>型の<bpt i="2" x="2">&lt;c2&gt;</bpt>init(_:)<ept i="2">&lt;/c2&gt;</ept>イニシャライザを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can convert a <bpt i="0" x="0">&lt;c0&gt;</bpt>String.UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept> instance back into a string using the <bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept> type’s <bpt i="2" x="2">&lt;c2&gt;</bpt>init(_:)<ept i="2">&lt;/c2&gt;</ept> initializer.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>String.UnicodeScalarView<ept i="0">&lt;/c0&gt;</ept>インスタンスを逆にひとつの文字列へと変換することが、<bpt i="1" x="1">&lt;c1&gt;</bpt>String<ept i="1">&lt;/c1&gt;</ept>型の<bpt i="2" x="2">&lt;c2&gt;</bpt>init(_:)<ept i="2">&lt;/c2&gt;</ept>イニシャライザを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can convert an index into one of a string’s views to an index into another view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ある文字列の持つビューの１つへのインデックスを別のビューへのインデックスに変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can convert between indices of the different string views by using conversion initializers and the <bpt i="0" x="0">&lt;c0&gt;</bpt>samePosition(in:)<ept i="0">&lt;/c0&gt;</ept> method overloads.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは異なる文字列ビューのインデックス間で変換することが、変換イニシャライザおよび<bpt i="0" x="0">&lt;c0&gt;</bpt>samePosition(in:)<ept i="0">&lt;/c0&gt;</ept> メソッドオーバーロードを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create a <bpt i="0" x="0">&lt;c0&gt;</bpt>Counter<ept i="0">&lt;/c0&gt;</ept> instance from an integer value between 1 and 5 by using the <bpt i="1" x="1">&lt;c1&gt;</bpt>init?(rawValue:)<ept i="1">&lt;/c1&gt;</ept> initializer declared in the <bpt i="2" x="2">&lt;c2&gt;</bpt>RawRepresentable<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Counter<ept i="0">&lt;/c0&gt;</ept>インスタンスを１と５の間の整数値から作成することが、<bpt i="2" x="2">&lt;c2&gt;</bpt>RawRepresentable<ept i="2">&lt;/c2&gt;</ept>プロトコルにおいて宣言される<bpt i="1" x="1">&lt;c1&gt;</bpt>init?(rawValue:)<ept i="1">&lt;/c1&gt;</ept>イニシャライザを使うことによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create a <bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept> instance by using a string literal that contains a single character representing exactly one Unicode scalar value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>UnicodeScalar<ept i="0">&lt;/c0&gt;</ept>インスタンスを、厳密に１つのユニコードスカラー値を表している単一の文字を含んでいる文字列リテラルを使うことによって作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create a countable range over any type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Strideable<ept i="0">&lt;/c0&gt;</ept> protocol and uses an integer as its associated <bpt i="1" x="1">&lt;c1&gt;</bpt>Stride<ept i="1">&lt;/c1&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、可付番範囲を<bpt i="0" x="0">&lt;c0&gt;</bpt>Strideable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する何らかの型に対して作成して、整数をそれの関連<bpt i="1" x="1">&lt;c1&gt;</bpt>Stride<ept i="1">&lt;/c1&gt;</ept>型として使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create a mirror for any type using the <bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror(reflect:)<ept i="0">&lt;/c0&gt;</ept> initializer, but if you are not satisfied with the mirror supplied for your type by default, you can make it conform to <bpt i="1" x="1">&lt;c1&gt;</bpt>CustomReflectable<ept i="1">&lt;/c1&gt;</ept> and return a custom <bpt i="2" x="2">&lt;c2&gt;</bpt>Mirror<ept i="2">&lt;/c2&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはミラーを<bpt i="0" x="0">&lt;c0&gt;</bpt>Mirror(reflect:)<ept i="0">&lt;/c0&gt;</ept>イニシャライザを使ってあらゆる型に対して作成できます、しかしあなたが初期状態であなたの型に提供されるミラーに満足していないならば、あなたはそれを<bpt i="1" x="1">&lt;c1&gt;</bpt>CustomReflectable<ept i="1">&lt;/c1&gt;</ept>に準拠するようにしてあつらえの<bpt i="2" x="2">&lt;c2&gt;</bpt>Mirror<ept i="2">&lt;/c2&gt;</ept>インスタンスを返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create a set with any element type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠するあらゆる要素型を使って集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create an empty array by specifying the <bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept> type of your array in the declaration.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは空の配列を、あなたの配列の<bpt i="0" x="0">&lt;c0&gt;</bpt>Element<ept i="0">&lt;/c0&gt;</ept>型をその宣言において指定することで作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can create new strings using string literals or string interpolations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは新しい文字列を、文字列リテラルまたは文字列補間を使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can decompose the tuple in a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop, which calls <bpt i="2" x="2">&lt;c2&gt;</bpt>makeIterator()<ept i="2">&lt;/c2&gt;</ept> behind the scenes, or when calling the iterator’s <bpt i="3" x="3">&lt;c3&gt;</bpt>next()<ept i="3">&lt;/c3&gt;</ept> method directly.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはこのタプルを、<bpt i="2" x="2">&lt;c2&gt;</bpt>makeIterator()<ept i="2">&lt;/c2&gt;</ept>を各場面の裏側で呼ぶ<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループにおいて、またはイテレータの持つ<bpt i="3" x="3">&lt;c3&gt;</bpt>next()<ept i="3">&lt;/c3&gt;</ept>メソッドを直に呼び出すときに、分解することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can find a complete set of a collection’s valid indices by starting with the collection’s <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> property and finding every successor up to, and including, the <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> property.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはコレクションの有効なインデックスの完全な一揃いを見つけることが、そのコレクションの<bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>プロパティで開始して、すべての後に続くものを<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>プロパティまで、それを含めて、見つけ出すことによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can initialize a variable of any of these types using a string literal that holds a single Unicode scalar.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、これらの型のいずれかの変数を初期化することが、単一のユニコードスカラーを保持する文字列リテラルを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can initialize a variable or constant of any of these types by assigning a floating-point literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、これらの型どれかの変数または定数を、浮動小数点リテラルを割り当てることによって初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can initialize a variable or constant of any of these types using a string literal that holds a single character.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、これらの型のどれかの変数または定数を、単一の文字を保持する文字列リテラルを使って初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can initialize a variable or constant of either of these types using a string literal of any length.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、それらの型のいずれかの変数や定数を初期化することが随意の長さの文字列リテラルを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can initialize the <bpt i="1" x="1">&lt;c1&gt;</bpt>Countdown<ept i="1">&lt;/c1&gt;</ept> sequence with a starting integer and then iterate over the count down to zero.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="1" x="1">&lt;c1&gt;</bpt>Countdown<ept i="1">&lt;/c1&gt;</ept>シーケンスをある開始点整数で初期化してそれからカウントダウンをゼロまでずっと反復することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can iterate over a dictionary using a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop, decomposing each key-value pair into the elements of a tuple.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは辞書全体にわたって反復適用していくことが、<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループを使うことで、各キー値ペアをタプルの要素へと分解しながら可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can iterate through a set’s unordered elements with a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、集合の持つ順序付けられない要素を始めから終わりまで反復することが<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>で可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can modify a set in place by using these methods’ mutating counterparts: <bpt i="0" x="0">&lt;c0&gt;</bpt>formUnion(_:)<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>formIntersection(_:)<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>formSymmetricDifference(_:)<ept i="2">&lt;/c2&gt;</ept>, and <bpt i="3" x="3">&lt;c3&gt;</bpt>subtract(_:)<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはある集合をその場で修正することがこれらのメソッドの可変の相当物：<bpt i="0" x="0">&lt;c0&gt;</bpt>formUnion(_:)<ept i="0">&lt;/c0&gt;</ept>、<bpt i="1" x="1">&lt;c1&gt;</bpt>formIntersection(_:)<ept i="1">&lt;/c1&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>formSymmetricDifference(_:)<ept i="2">&lt;/c2&gt;</ept>、そして<bpt i="3" x="3">&lt;c3&gt;</bpt>subtract(_:)<ept i="3">&lt;/c3&gt;</ept>を使うことで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can override any of the protocol’s required methods to provide your own custom implementation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、何らかのこのプロトコルの持つ必須メソッドをオーバーライドして、あなた独自のあつらえの実装を提供することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can pass only valid indices to collection operations.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは有効なインデックスだけをコレクション演算子に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can pass zero or more items to the <bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ゼロ個以上の項目を<bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept>関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can pass zero or more items to the <bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ゼロ個以上の項目を<bpt i="0" x="0">&lt;c0&gt;</bpt>debugPrint(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept>関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can pass zero or more items to the <bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ゼロ個以上の項目を<bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:)<ept i="0">&lt;/c0&gt;</ept>関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can pass zero or more items to the <bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ゼロ個以上の項目を<bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:separator:terminator:to:)<ept i="0">&lt;/c0&gt;</ept>関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can replace an existing element with a new value by assigning the new value to the subscript.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、既存の要素を新しい値で置き換えることが、新しい値をその添え字に代入することで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can reverse a collection without allocating new space for its elements by calling this <bpt i="0" x="0">&lt;c0&gt;</bpt>reversed()<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、あるコレクションを逆順にすることがそれの要素に対して新しい空間を割り当てることなく<bpt i="0" x="0">&lt;c0&gt;</bpt>reversed()<ept i="0">&lt;/c0&gt;</ept>メソッドによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can search a dictionary’s contents for a particular value using the <bpt i="0" x="0">&lt;c0&gt;</bpt>contains(where:)<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>index(where:)<ept i="1">&lt;/c1&gt;</ept> methods supplied by default implementation.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ある特定の値を求めて辞書の持つ内容を捜すことが、省略時の実装で提供される<bpt i="0" x="0">&lt;c0&gt;</bpt>contains(where:)<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>index(where:)<ept i="1">&lt;/c1&gt;</ept>メソッドを使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can send the output of the standard library’s <bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:to:)<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>dump(_:to:)<ept i="1">&lt;/c1&gt;</ept> functions to an instance of a type that conforms to the <bpt i="2" x="2">&lt;c2&gt;</bpt>TextOutputStream<ept i="2">&lt;/c2&gt;</ept> protocol instead of to standard output.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、標準ライブラリの<bpt i="0" x="0">&lt;c0&gt;</bpt>print(_:to:)<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>dump(_:to:)<ept i="1">&lt;/c1&gt;</ept>関数の出力を<bpt i="2" x="2">&lt;c2&gt;</bpt>TextOutputStream<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠する型のインスタンスに送ることが、標準出力に送る代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can sort any collection of elements that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol by calling this method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する要素からなるあらゆる配列をこのメソッドを呼び出すことによってソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can sort any mutable collection of elements that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol by calling this method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する要素からなるあらゆる可変の配列をこのメソッドを呼び出すことによってソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can sort any sequence of elements that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> protocol by calling this method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはいくらかの要素からなる何らかのシーケンスで<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠するものをこのメソッドを呼び出すことによってソートする（並び替える）ことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはこのようなインデックスを変数に格納して、それらを幾つかあるコレクションアルゴリズムに渡すことや、相当する要素にアクセスするためにそれらを後で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can store mixed-type keys in dictionaries and other collections that require <bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept> conformance by wrapping mixed-type keys in <bpt i="1" x="1">&lt;c1&gt;</bpt>AnyHashable<ept i="1">&lt;/c1&gt;</ept> instances:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、混成型のキーを辞書および他のコレクション、それらは混成型キーの<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyHashable<ept i="0">&lt;/c0&gt;</ept>インスタンスの中へのラップによる<bpt i="1" x="1">&lt;c1&gt;</bpt>Hashable<ept i="1">&lt;/c1&gt;</ept>準拠を必要とします、に格納できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can subscript a collection with any valid index other than the collection’s end index.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、そのコレクションの末尾インデックスの以外のあらゆる有効なインデックスで、コレクションに対して添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can subscript an array with any integer from zero up to, but not including, the count of the array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ゼロから配列の総数まで、しかしそれを含めず、任意の整数で添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyIterator<ept i="0">&lt;/c0&gt;</ept> to hide the type signature of a more complex iterator.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyIterator<ept i="0">&lt;/c0&gt;</ept>を使って、あるより複雑なイテレータの型シグネチャを隠すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="2" x="2">&lt;c2&gt;</bpt>==<ept i="2">&lt;/c2&gt;</ept> to check for equality between any two instances or call the <bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>-constrained <bpt i="4" x="4">&lt;c4&gt;</bpt>contains(_:)<ept i="4">&lt;/c4&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="2" x="2">&lt;c2&gt;</bpt>==<ept i="2">&lt;/c2&gt;</ept>を使って何でも２つのインスタンス間の同等性を調べたり、<bpt i="3" x="3">&lt;c3&gt;</bpt>Equatable<ept i="3">&lt;/c3&gt;</ept>制約の<bpt i="4" x="4">&lt;c4&gt;</bpt>contains(_:)<ept i="4">&lt;/c4&gt;</ept>メソッドを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use a <bpt i="0" x="0">&lt;c0&gt;</bpt>ClosedRange<ept i="0">&lt;/c0&gt;</ept> instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>ClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use a <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>インスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop or any sequence or collection method with a countable range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループまたは何らかのシーケンスもしくはコレクションメソッドを可付番範囲とともに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use a slice’s <bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept> property to access its base collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはスライスのもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>base<ept i="0">&lt;/c0&gt;</ept>プロパティを使って、それの基盤コレクションにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use an array literal anywhere a set is expected by the type context.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、型コンテキストによって集合が予期される何処ででも配列リテラルを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use an array literal anywhere an instance of an <bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByArrayLiteral<ept i="0">&lt;/c0&gt;</ept> type is expected: as a value assigned to a variable or constant, as a parameter to a method or initializer, or even as the subject of a nonmutating operation like <bpt i="1" x="1">&lt;c1&gt;</bpt>map(_:)<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>filter(_:)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは配列リテラルを<bpt i="0" x="0">&lt;c0&gt;</bpt>ExpressibleByArrayLiteral<ept i="0">&lt;/c0&gt;</ept>型が予期されるところはどこででも使うことができます：変数や定数に割り当てられる値として、メソッドやイニシャライザへのパラメータとして、または<bpt i="1" x="1">&lt;c1&gt;</bpt>map(_:)<ept i="1">&lt;/c1&gt;</ept>や<bpt i="2" x="2">&lt;c2&gt;</bpt>filter(_:)<ept i="2">&lt;/c2&gt;</ept>のような可変でないの操作のサブジェクトとしてさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use any type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept> protocol in a set or as a dictionary key.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Hashable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠するあらゆる型を集合においてまたは辞書キーとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use optional chaining to call the <bpt i="3" x="3">&lt;c3&gt;</bpt>@objc<ept i="3">&lt;/c3&gt;</ept> method <bpt i="4" x="4">&lt;c4&gt;</bpt>getIntegerValue()<ept i="4">&lt;/c4&gt;</ept> on <bpt i="5" x="5">&lt;c5&gt;</bpt>obj<ept i="5">&lt;/c5&gt;</ept> safely.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、オプショナル連鎖を使って、<bpt i="3" x="3">&lt;c3&gt;</bpt>@objc<ept i="3">&lt;/c3&gt;</ept>メソッド<bpt i="4" x="4">&lt;c4&gt;</bpt>getIntegerValue()<ept i="4">&lt;/c4&gt;</ept>を<bpt i="5" x="5">&lt;c5&gt;</bpt>obj<ept i="5">&lt;/c5&gt;</ept>上で安全に呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use sequence or collection methods on the <bpt i="0" x="0">&lt;c0&gt;</bpt>singleDigits<ept i="0">&lt;/c0&gt;</ept> range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、シーケンスまたはコレクションのメソッドを<bpt i="0" x="0">&lt;c0&gt;</bpt>singleDigits<ept i="0">&lt;/c0&gt;</ept>可付番範囲で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use sequence or collection methods on the <bpt i="0" x="0">&lt;c0&gt;</bpt>upToFive<ept i="0">&lt;/c0&gt;</ept> countable range.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、シーケンスまたはコレクションのメソッドを<bpt i="0" x="0">&lt;c0&gt;</bpt>upToFive<ept i="0">&lt;/c0&gt;</ept>可付番範囲で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use special versions of some sequence and collection operations when working with a <bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、特別版のなんらかのシーケンスやコレクション演算をある<bpt i="0" x="0">&lt;c0&gt;</bpt>Comparable<ept i="0">&lt;/c0&gt;</ept>型を扱うときに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use the <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyClass<ept i="0">&lt;/c0&gt;</ept> protocol as the concrete type for an instance of any class.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyClass<ept i="0">&lt;/c0&gt;</ept>プロトコルをあらゆるクラスのインスタンスに対して具体的な型として使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> protocol, such as the <bpt i="1" x="1">&lt;c1&gt;</bpt>HTTPResponse<ept i="1">&lt;/c1&gt;</ept> enumeration in this example.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは述部を使って、<bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠しない型、例えばこの例での<bpt i="1" x="1">&lt;c1&gt;</bpt>HTTPResponse<ept i="1">&lt;/c1&gt;</ept>列挙などの要素に対して調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use the predicate to find an element of a type that doesn’t conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept> protocol or to find an element that matches particular criteria.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは述部を使って、<bpt i="0" x="0">&lt;c0&gt;</bpt>Equatable<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠しない型の要素を見つける、または特定の基準に合致する要素を見つけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use this initializer to create a new string from a slice of another string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、このイニシャライザを使って新しい文字列を別の文字列のもつ<bpt i="0" x="0">&lt;c0&gt;</bpt>unicodeScalars<ept i="0">&lt;/c0&gt;</ept>ビューのスライスから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use this initializer to create a new string from a slice of another string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、このイニシャライザを使って新しい文字列を別の文字列の<bpt i="0" x="0">&lt;c0&gt;</bpt>utf16<ept i="0">&lt;/c0&gt;</ept>ビューのスライスから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use this initializer to create a new string from a slice of another string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、このイニシャライザを使って新しい文字列を別の文字列の<bpt i="0" x="0">&lt;c0&gt;</bpt>utf8<ept i="0">&lt;/c0&gt;</ept>ビューのスライスから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use this initializer to create a new string from the result of one or more operations on a string’s <bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept> view.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、このイニシャライザを使って新しい文字列を<bpt i="0" x="0">&lt;c0&gt;</bpt>characters<ept i="0">&lt;/c0&gt;</ept>ビュー上での１つ以上の演算の結果から作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use this initializer to create an array from any other type that conforms to the <bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはこのイニシャライザを使って、<bpt i="0" x="0">&lt;c0&gt;</bpt>Sequence<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する何か他の型から配列を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use your own custom types as dictionary keys by making them conform to the <bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept> protocol.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、あなた独自のあつらえの型を辞書のキーとして使うことがそれらを<bpt i="2" x="2">&lt;c2&gt;</bpt>Hashable<ept i="2">&lt;/c2&gt;</ept>プロトコルに準拠させることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You cannot use a <bpt i="0" x="0">&lt;c0&gt;</bpt>break<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>continue<ept i="1">&lt;/c1&gt;</ept> statement to exit the current call of the <bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept> closure or skip subsequent calls.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>break<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>continue<ept i="1">&lt;/c1&gt;</ept>文を使って、<bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>クロージャの現在の呼び出しを抜け出したり、または続いて起こる呼び出しを飛ばしたりできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You cannot use the <bpt i="0" x="0">&lt;c0&gt;</bpt>break<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>continue<ept i="1">&lt;/c1&gt;</ept> statement to exit the current call of the <bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept> closure or skip subsequent calls.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>break<ept i="0">&lt;/c0&gt;</ept>または<bpt i="1" x="1">&lt;c1&gt;</bpt>continue<ept i="1">&lt;/c1&gt;</ept>文を使って<bpt i="2" x="2">&lt;c2&gt;</bpt>body<ept i="2">&lt;/c2&gt;</ept>クロージャの現在の呼び出しを脱出すること、またはそのあとに続く呼び出しをスキップすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can’t initialize a type that conforms to <bpt i="1" x="1">&lt;c1&gt;</bpt>ExpressibleByArrayLiteral<ept i="1">&lt;/c1&gt;</ept> simply by assigning an existing array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、既存の配列を割り当てることで<bpt i="1" x="1">&lt;c1&gt;</bpt>ExpressibleByArrayLiteral<ept i="1">&lt;/c1&gt;</ept>に準拠する型を初期化することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can’t initialize a type that conforms to <bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByDictionaryLiteral<ept i="3">&lt;/c3&gt;</ept> simply by assigning an instance of one of these types.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="3" x="3">&lt;c3&gt;</bpt>ExpressibleByDictionaryLiteral<ept i="3">&lt;/c3&gt;</ept>に準拠する型を、単純にこれらの型のうちの１つのインスタンスを割り当てることによって初期化できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You create <bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept> instances by using the half-open range operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>..&lt;<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>Range<ept i="0">&lt;/c0&gt;</ept>インスタンスを半開範囲演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>..&lt;<ept i="1">&lt;/c1&gt;</ept>）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You create a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept> instance by using the closed range operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>...<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>CountableClosedRange<ept i="0">&lt;/c0&gt;</ept>インスタンスを完結範囲演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>...<ept i="1">&lt;/c1&gt;</ept>）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You create a <bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept> instance by using the half-open range operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>..&lt;<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>CountableRange<ept i="0">&lt;/c0&gt;</ept>インスタンスを半開範囲演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>..&lt;<ept i="1">&lt;/c1&gt;</ept>）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You create an instance of the <bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated<ept i="0">&lt;/c0&gt;</ept> collection by calling the <bpt i="1" x="1">&lt;c1&gt;</bpt>repeatElement(_:count:)<ept i="1">&lt;/c1&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>Repeated<ept i="0">&lt;/c0&gt;</ept>コレクションのインスタンスを<bpt i="1" x="1">&lt;c1&gt;</bpt>repeatElement(_:count:)<ept i="1">&lt;/c1&gt;</ept>関数を呼び出すことによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You create instances of <bpt i="0" x="0">&lt;c0&gt;</bpt>ClosedRange<ept i="0">&lt;/c0&gt;</ept> by using the closed range operator (<bpt i="1" x="1">&lt;c1&gt;</bpt>...<ept i="1">&lt;/c1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>ClosedRange<ept i="0">&lt;/c0&gt;</ept>のインスタンスを完結範囲演算子（<bpt i="1" x="1">&lt;c1&gt;</bpt>...<ept i="1">&lt;/c1&gt;</ept>）を使うことによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You initialize a <bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept> instance using a Swift dictionary literal.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>DictionaryLiteral<ept i="0">&lt;/c0&gt;</ept>インスタンスをSwift辞書リテラルを使って初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You must not call this method if any other copy of this iterator has been advanced with a call to its <bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、このイテレータの何か他のコピーがそれの<bpt i="0" x="0">&lt;c0&gt;</bpt>next()<ept i="0">&lt;/c0&gt;</ept>メソッドを呼び出すことで前に進められるならば、このメソッドを呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You must unwrap the value of an <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> instance before you can use it in many contexts.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、あなたがそれを多くの文脈において使う前に、<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>インスタンスの値をアンラップしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You rarely need to use iterators directly, because a <bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept> loop is the more idiomatic approach to traversing a sequence in Swift.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは滅多にイテレータを直に使う必要はありません、なぜなら<bpt i="0" x="0">&lt;c0&gt;</bpt>for<ept i="0">&lt;/c0&gt;</ept>-<bpt i="1" x="1">&lt;c1&gt;</bpt>in<ept i="1">&lt;/c1&gt;</ept>ループはSwiftにおいてシーケンスを辿っていくずっと慣用語法にかなった取り組みだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use <bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept> when you need the flexibility of an untyped object or when you use bridged Objective-C methods and properties that return an untyped result.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが型付けされないオブジェクトの柔軟性を必要とするとき、または型付けされない結果を返すブリッジされたObjective-Cメソッドやプロパティを使用するとき、あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>AnyObject<ept i="0">&lt;/c0&gt;</ept>を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use a set instead of an array when you need to test efficiently for membership and you aren’t concerned with the order of the elements in the collection, or when you need to ensure that each element appears only once in a collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが集合を配列の代わりに使うのは、あなたが帰属について能率的にテストする必要がありそしてあなたがコレクションの要素の順番に関心がない場合、または各要素がただ一度だけコレクション中に現れることをあなたが確実にする必要がある場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use arrays to organize your app’s data.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは配列を使ってあなたのアプリのデータを整理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use that key to retrieve the corresponding value, which can be any object.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはこのキーを使ってその対応している値を取り出すことができ、その値はあらゆるオブジェクトであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use the <bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept> protocol to represent bit mask types, where individual bits represent members of the set.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、<bpt i="0" x="0">&lt;c0&gt;</bpt>OptionSet<ept i="0">&lt;/c0&gt;</ept>プロトコルを使ってビットマスク型を表すことができます、そこにおいて個々のビットはセットのメンバを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use the <bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept> type whenever you use optional values, even if you never type the word <bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは<bpt i="0" x="0">&lt;c0&gt;</bpt>Optional<ept i="0">&lt;/c0&gt;</ept>型を、あなたがオプショナル値を使う時はいつでも使います、たとえあなたが単語<bpt i="1" x="1">&lt;c1&gt;</bpt>Optional<ept i="1">&lt;/c1&gt;</ept>を決してタイプしないとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You use types that conform to the <bpt i="0" x="0">&lt;c0&gt;</bpt>SetAlgebra<ept i="0">&lt;/c0&gt;</ept> protocol when you need efficient membership tests or mathematical set operations such as intersection, union, and subtraction.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>SetAlgebra<ept i="0">&lt;/c0&gt;</ept>プロトコルに準拠する型を使うのは、あなたが帰属について能率的にテストするか、数学的集合演算たとえば交叉、合併、そして差分を必要とする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You want to compare the absences in the first half of the session with those in the second half.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、前学期の欠席者を後半のそれと比較したいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You write each key-value pair with a colon (<bpt i="0" x="0">&lt;c0&gt;</bpt>:<ept i="0">&lt;/c0&gt;</ept>) separating the key and the value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、各キー値ペアをコロン（<bpt i="0" x="0">&lt;c0&gt;</bpt>:<ept i="0">&lt;/c0&gt;</ept>）で区切るキーと値で書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Your own custom types can be hashable as well.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなた独自のあつらえの型も同様にハッシュ化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You’d like to create a set of the grid points where a user has already tapped.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは、ユーザがすでにタップしたところの格子点ひとそろいを作成したいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You’re tasked with finding the day with the most absences in the second half of the session.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたはこの学期の後半において最も多く欠席者がいる日付を見つける任務を負います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Zero is neither a normal nor a subnormal number.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ゼロは、ノーマルでもサブノーマル数でもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Zero or more additional values.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>ゼロ以上の追加の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Zero or more items to print.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>出力するゼロ個以上の項目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>[We don’t recommend that you use <bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept> this way, because it creates and discards an array.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>［私たちは、あなたが<bpt i="0" x="0">&lt;c0&gt;</bpt>map<ept i="0">&lt;/c0&gt;</ept>をこのやり方で使うのを推奨しません、なぜならそれは１つの配列を作成し破棄するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>a subscript that provides at least read-only access to your type’s elements, and</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>少なくとも読み込み専用のアクセスをあなたの型の要素に提供する添え字、そして</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>an <bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;Pointee&gt;<ept i="0">&lt;/c0&gt;</ept>, which is passed as-is.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>UnsafeMutablePointer&lt;Pointee&gt;<ept i="0">&lt;/c0&gt;</ept>、それは現品で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>an inout argument of the referenced type, which gets passed as a pointer to a writeback temporary with autoreleasing ownership semantics,</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>参照される型のインアウト引数、それはオートリリース所有権意味論を持つライトバックテンポラリへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and finally, we can give all lazy sequences a lazy <bpt i="0" x="0">&lt;c0&gt;</bpt>scan<ept i="0">&lt;/c0&gt;</ept> method:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>そして最終的に、私たちは全ての遅延シーケンスを遅延<bpt i="0" x="0">&lt;c0&gt;</bpt>scan<ept i="0">&lt;/c0&gt;</ept>メソッドに渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>for ordinary sets where <bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept> is not the same type as <bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>s.remove(e)<ept i="2">&lt;/c2&gt;</ept> removes and returns an element equal to <bpt i="3" x="3">&lt;c3&gt;</bpt>e<ept i="3">&lt;/c3&gt;</ept> (which may be distinguishable from <bpt i="4" x="4">&lt;c4&gt;</bpt>e<ept i="4">&lt;/c4&gt;</ept>, e.g. via <bpt i="5" x="5">&lt;c5&gt;</bpt>===<ept i="5">&lt;/c5&gt;</ept>), or returns <bpt i="6" x="6">&lt;c6&gt;</bpt>nil<ept i="6">&lt;/c6&gt;</ept> if no such element existed.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>Self<ept i="0">&lt;/c0&gt;</ept>が<bpt i="1" x="1">&lt;c1&gt;</bpt>Element<ept i="1">&lt;/c1&gt;</ept>と同じ型ではないところの普通の集合に対して、<bpt i="2" x="2">&lt;c2&gt;</bpt>s.remove(e)<ept i="2">&lt;/c2&gt;</ept>は<bpt i="3" x="3">&lt;c3&gt;</bpt>e<ept i="3">&lt;/c3&gt;</ept>と等しい要素を削除して返します（それは<bpt i="5" x="5">&lt;c5&gt;</bpt>===<ept i="5">&lt;/c5&gt;</ept>によって<bpt i="4" x="4">&lt;c4&gt;</bpt>e<ept i="4">&lt;/c4&gt;</ept>と区別されるでしょう）、またはそのような要素が存在しないならば<bpt i="6" x="6">&lt;c6&gt;</bpt>nil<ept i="6">&lt;/c6&gt;</ept>を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if this set and <bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept> contain elements that are equal but distinguishable (e.g. via <bpt i="1" x="1">&lt;c1&gt;</bpt>===<ept i="1">&lt;/c1&gt;</ept>), which of these elements is present in the result is unspecified.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>この集合と<bpt i="0" x="0">&lt;c0&gt;</bpt>other<ept i="0">&lt;/c0&gt;</ept>が等しいけれども区別可能な要素を含むならば（たとえば<bpt i="1" x="1">&lt;c1&gt;</bpt>===<ept i="1">&lt;/c1&gt;</ept>によって）、それらの要素のどれが結果の存在するのかは不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>is a sequence containing { <bpt i="0" x="0">&lt;c0&gt;</bpt>2<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>4<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>6<ept i="2">&lt;/c2&gt;</ept> }.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは、{ <bpt i="0" x="0">&lt;c0&gt;</bpt>2<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;c1&gt;</bpt>4<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>6<ept i="2">&lt;/c2&gt;</ept> }を含んでいるシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>is equivalent to:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>これは次と同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>is similar to:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>以下に類似：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the <bpt i="0" x="0">&lt;c0&gt;</bpt>index(after:)<ept i="0">&lt;/c0&gt;</ept> method for advancing an index into your collection.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたのコレクションにおいてあるインデックスを前に進めるための<bpt i="0" x="0">&lt;c0&gt;</bpt>index(after:)<ept i="0">&lt;/c0&gt;</ept>メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the <bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept> properties,</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>startIndex<ept i="0">&lt;/c0&gt;</ept>および<bpt i="1" x="1">&lt;c1&gt;</bpt>endIndex<ept i="1">&lt;/c1&gt;</ept>プロパティ、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the behavior of accesses to pointee as a type different from that to which it was initialized is undefined.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>それへとそれが初期化されたものと異なる型としてpointeeへアクセスすることの挙動は、不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the initial accumulating value.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最初に蓄積されている値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we can build a sequence that lazily computes the elements in the result of <bpt i="0" x="0">&lt;c0&gt;</bpt>scan<ept i="0">&lt;/c0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>私たちは、<bpt i="0" x="0">&lt;c0&gt;</bpt>scan<ept i="0">&lt;/c0&gt;</ept>の結果の中の要素を遅延に計算するシーケンスを組み立てることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>will get a maximum of <bpt i="0" x="0">&lt;c0&gt;</bpt>min(buffer.count, maxLength)<ept i="0">&lt;/c0&gt;</ept> bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最大で<bpt i="0" x="0">&lt;c0&gt;</bpt>min(buffer.count, maxLength)<ept i="0">&lt;/c0&gt;</ept>バイトを取得するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>will store a maximum of <bpt i="0" x="0">&lt;c0&gt;</bpt>min(buffer.count, maxLength)<ept i="0">&lt;/c0&gt;</ept> bytes.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>最大で<bpt i="0" x="0">&lt;c0&gt;</bpt>min(buffer.count, maxLength)<ept i="0">&lt;/c0&gt;</ept>バイトを格納するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>x.intersection([]) == []</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>x.intersection([]) == [] （xと空の配列リテラルの交差は空の配列リテラルと等しい）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>x.intersection(x) == x</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>x.intersection(x) == x （xとxの交差はxと等しい）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>x.union([]) == x</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>x.union([]) == x （xと空の集合との合併はxと等しい）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>x.union(x) == x</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>x.union(x) == x （xとxの合併はxと等しい）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>you can write:</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>あなたは次を書くことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>“Significand” is the preferred terminology in IEEE 754.</seg>
      </tuv>
      <tuv xml:lang="JA">
        <seg>「Significand」は、IEEE 754において選ばれる用語です。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
