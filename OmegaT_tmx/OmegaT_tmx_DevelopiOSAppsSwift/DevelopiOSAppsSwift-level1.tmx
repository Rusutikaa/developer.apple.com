<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.6.0_1_r8695:8697" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>(Alternatively, choose Editor &gt; Embed In &gt; Stack View.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または代わりに、Editor &gt; Embed In &gt; Stack Viewを選んでください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Alternatively, choose View &gt; Navigators &gt; Show Project Navigator.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または代わりに、View &gt; Navigators &gt; Show Project Navigatorを選んでください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Alternatively, choose View &gt; Utilities &gt; Show Object Library.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または代わりに、View &gt; Utilities &gt; Show Object Libraryを選びます）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Choose View &gt; Utilities &gt; Show Object Library.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（View &gt; Utilities &gt; Show Object Libraryを選びます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If it doesn’t, choose Automatic &gt; ViewController.swift in the editor selector bar.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（そうでないならば、Automatic &gt; ViewController.swiftをエディタセレクタバーで選んでください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If you try to Control-drag from the image view to your code, you’ll notice that you can’t select Action in the Connection field.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あなたがイメージビューからあなたのコードにコントロールドラッグすることを試みるならば、あなたはConnection欄のActionを選択できないことに気づくでしょう。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Just make sure the names of the images you use match the image names in the code later.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ただあなたが使う画像の名前が後のコードの中の画像名と一致するようにしてください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Make sure the names of the images you use match the image names in the code later.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あなたの使う画像の名前が後のコードでの画像名と一致することを確実にしてください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(The code to set the label to the text in the text field is a bit more involved, so you’ll write that in the Process User Input section.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ラベルをテキスト欄の中のテキストに設定するコードは、もう少し込み入っています、それであなたはユーザ入力処理の節でそれを書くことになります。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(This field is at the bottom of the Size inspector, so you’ll need to scroll down to it.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（この欄は、Sizeインスペクタの下の方にあります、それであなたはそれまで下にスクロールする必要があるでしょう）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(To uncomment the method, remove the /* and */ characters surrounding it.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（メソッドのコメントを外すには、それを囲んでいる/*と*/文字を削除します。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// #warning Incomplete implementation, return the number of rows</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（#警告、実装は不完全です、行の数を返してください）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// #warning Incomplete implementation, return the number of sections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（#警告、実装は不完全です、セクションの数を返してください）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Add a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （新しい食事を加える。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Because photo is an optional property of Meal, just use conditional cast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（写真はMealのオプショナルプロパティなので、条件キャストを使うだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Configure the cell...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（セルを構成する…）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Configure the destination view controller only when the save button is pressed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（保存ボタンが押される時のみ行先ビューコントローラを構成設定する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Confirm that the Meal initialier returns nil when passed a negative rating or an empty name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（負の格付けまたは空の名前を渡された時にMealがnilを返すことを確かめる。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （適切なクラスの新規インスタンスを作成して、それを配列に挿入し、そして新しい行をテーブルビューに加える）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Delete the row from the data source</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （行をデータソースから削除する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Depending on style of presentation (modal or push presentation), this view controller needs to be dismissed in two different ways.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（表現の流儀（モーダルまたはプッシュ表現）に依存して、このビューコントローラは２つの異なる方法で却下される必要があります。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Disable the Save button if the text field is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テキスト欄が空ならばSaveボタンを利用不可能にする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Disable the Save button while editing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（編集の間Saveボタンを利用不可能にする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Dismiss the picker if the user canceled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （ユーザがキャンセルした場合ピッカーを片付ける。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do any additional setup after loading the view, typically from a nib.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（何らかの追加の準備をビューを、大抵はnibからロードした後で行います）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Enable the Save button only if the text field has a valid Meal name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（Saveボタンをテキスト欄が有効なMeal名を持つ場合にのみ使用可能にする）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Fetches the appropriate meal for the data source layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（データソースレイアウトにきちんと合った食事を取ってくる）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Get the new view controller using segue.destinationViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（新規ビューコントローラをsegue.destinationViewControllerを使って得てください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Handle the text field’s user input through delegate callbacks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テキスト欄のユーザ入力を委任先コールバックを経由して取り扱います。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// If the index of a button is less than the rating, that button should be selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あるボタンのインデックスが格付けより少ないならば、そのボタンは選択されるべき。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// In a storyboard-based application, you will often want to do a little preparation before navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ストーリーボードに基づくアプリケーションにおいて、あなたはしばしばナビゲーションの前に少し準備したいでしょう）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Initialization should fail if there is no name or if the rating is negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（初期化は、名前が無いならばまたは格付けが負数ならば、失敗するべきです。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Initialize stored properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（保存プロパティを初期化する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Load any saved meals, otherwise load sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （食事があればロードする、そうでなければ見本データをロードする）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Load the sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （見本データをロードする）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Make sure ViewController is notified when the user picks an image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（ユーザが画像を選んだときにViewControllerが通知をうけることを確実にします）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Only allow photos to be picked, not taken.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（写真だけが選ばれるようにします、取得はされない）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Override to support conditional editing of the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テーブルビューの条件付きの編集をサポートするためにオーバーライドする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Override to support editing the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テーブルビューの編集をサポートするためにオーバーライドする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Pass the selected object to the new view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（選択されたオブジェクトを新規ビューコントローラに渡してください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Put setup code here. This method is called before the invocation of each test method in the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （準備コードをここに置きます。このメソッドはこのクラスの中の各テストメソッドの発動の前に呼ばれます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Put teardown code here. This method is called after the invocation of each test method in the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （解体コードをここに置きます。このメソッドはこのクラスの中の各テストメソッドの発動の後に呼ばれます）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Put the code you want to measure the time of here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（あなたが時間を測定したいコードをここに置きます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Rating exceeds maximum</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（格付けが最大限度を超える）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Return false if you do not want the specified item to be editable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（指定した項目が編集されるのをあなたが望まないならばfalseを返してください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Save the meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （食事を保存する。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set photoImageView to display the selected image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（photoImageViewを選択された画像を表示するよう設定する。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set the meal to be passed to MealTableViewController after the unwind segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（mealを巻き戻しセグエの後にMealTableViewControllerに渡されるようにする。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Set up views if editing an existing Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（既存のMealを編集するならばビューを準備する）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Table view cells are reused and should be dequeued using a cell identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（テーブルビューセルは再利用されます、そしてセル識別子を使ってデキューされるべきです。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// The info dictionary may contain multiple representations of the image. You want to use the original.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（インフォディクショナリは、この画像の複数の表現を格納するかもしれません。オリジナルを使ってはどうでしょう。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This is an example of a functional test case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（これは機能テスト項目の例です。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This is an example of a performance test case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（これは性能テスト項目の例です。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This method lets you configure a view controller before it's presented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（このメソッドは、あなたにビューコントローラをそれが提供される前に構成させます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// UIImagePickerController is a view controller that lets a user pick media from their photo library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（UIImagePickerControllerはビューコントローラで、ユーザに彼らの写真ライブラリからメディアを選ばせます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Uncomment the following line to display an Edit button in the navigation bar for this view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（以下の行のコメントを外すと、このビューコントローラのナビゲーションバーで「編集」ボタンを表示します）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Uncomment the following line to preserve selection between presentations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（以下の行のコメントを外すと、表示間で選択を保護します）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Update an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （既存の食事を更新する。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Use the edit button item provided by the table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// （テーブルビューコントローラによって提供される編集ボタン項目を使う）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>App Distribution Guide walks you through the process of provisioning devices for testing and submitting apps to the App Store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「アプリケーションの配布に関するガイド」は、App Storeに向けてアプリを検査して出荷するためにデバイスをプロビジョニングすることについての過程をあなたに説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>App Distribution Quick Start walks you through the process of registering as an Apple developer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>App Distribution Quick Startが、あなたにApple開発者として登録する手順を通して案内します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>App Programming Guide for iOS explains the essential things you must know and do when developing an iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOSアプリケーション プログラミングガイド」は、iOSアプリを開発する時あなたが知っていて行わなければならない本質的な事柄を明らかにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debugging with Xcode teaches you how to thoroughly debug and test your app in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Debugging with Xcodeは、あなたのアプリをXcodeで徹底的にデバッグ及びテストする方法をあなたに教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift Programming Language (Swift 3.0.1) describes everything you need to know about Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Swiftプログラミング言語（Swift 3.0.1）」は、あなたがSwiftについて知っている必要があるすべてのことを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS Human Interface Guidelines teaches you how to make your app consistent with the user interface conventions for iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOS ヒューマンインターフェイス ガイドライン」は、あなたのアプリをiOSのためのユーザインターフェイス取り決めと調和するようにする方法を教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS Technology Overview describes the frameworks and other technologies that are available to your app in iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOS テクノロジーの概要」は、あなたのアプリがiOSで利用可能なフレームワークと他のテクノロシーを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2x is the display resolution for iPhone 7 Simulator that you’re using in these lessons, so the image will look best at this resolution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>2xは、iPhone 7シミュレータ用の画面解像度で、あなたがこのレッスンで使っているものです、それでこの解像度でその画像は最もよく見えるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2x is the display resolution for the iPhone 7 Simulator that you’re using in these lessons, so the image will look best at this resolution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>2xは、iPhone 7シミュレータ用の画面解像度で、あなたがこのレッスンで使っているものです、それでこの解像度でその画像は最もよく見えるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array has a property called count that returns the number of items in the array, so the number of rows is meals.count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Arrayは、countと呼ばれるあるプロパティを持ちます、それは、その配列の中の項目の数を返します、そういうわけで行の数はmeals.countです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ViewController.swift displays in the editor on the right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftは、エディタの右に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>viewDidAppear()—Called just after the view controller’s content view has been added to the app’s view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidAppear() — ビューコントローラの持つコンテンツビューがアプリの持つビュー階層へ加えられる直後に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>viewDidLoad()—Called when the view controller’s content view (the top of its view hierarchy) is created and loaded from a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoad()—ビューコントローラのコンテンツビューが作成されてロードされるときにストーリーボードから呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>viewWillAppear()—Called just before the view controller’s content view is added to the app’s view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewWillAppear() — ビューコントローラの持つコンテンツビューがアプリの持つビュー階層へ加えられる直前に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject is considered a base class that defines a basic interface to the runtime system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectは、基盤クラスとみなされます、それは基本的なインターフェイスを実行時システムに対して定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSCoding is a protocol that enables a lightweight solution for archiving objects and other structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingは、あるプロトコルです、それは、オブジェクトおよび他の構造物のアーカイブ（保存）に対する軽量な解決策となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XCTAssertNil verifies this by checking that the returned Meal object is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XCTAssertNotNilはこれを検証します、返されるMealオブジェクトがnilであることを調べることによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XCTAssertNotNil verifies this, by checking that the returned Meal object is not nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XCTAssertNotNilはこれを検証します、返されるMealオブジェクトがnilでないことを調べることによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RatingControl is a custom view subclass of UIView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControlは、UIViewのカスタムのビュー・サブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UITableViewController is a subclass of UIViewController, which is designed to handle table view-related logic.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITableViewControllerは、テーブルビュ関連ロジックを取り扱うために設計されるUIViewControllerのサブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build your app using Command-B.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをコマンド-Bを使ってビルドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build your project by choosing Product &gt; Build (or pressing Command-B).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのプロパティをProduct &gt; Buildを選ぶこと（またはコマンド-Bを押すこと）によってビルドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build your project by choosing Product &gt; Build.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのプロジェクトをProduct &gt; Buildを選んでビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app in iOS Simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをiOSシミュレータで実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Test your changes by running the simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたの変更をシミュレータを実行することでテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Build or run your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをビルドまたは実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Open Main.storyboard and select the RatingControl object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：Main.storyboardを開いて、RatingControlオブジェクトを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：再びあなたのアプリを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Run your unit tests by selecting the Product &gt; Test menu item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのユニットテストをProduct &gt; Testメニュー項目を選択することによって実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checkpoint: Your app runs with the unit test you just wrote.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>確認点：あなたのアプリをあなたが書いたばかりのユニットテストで実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start Developing iOS Apps (Swift) is the perfect starting point for learning to create apps that run on iPhone and iPad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「iOSアプリ開発を始めよう（Swift）」は、iPhoneおよびIPadで動作するアプリの作成を学習するための非の打ち所のない出発点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout Guide teaches you how to create adaptive, versatile user interfaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Cocoa Auto Layout ガイド」は、あなたに適応性のある、融通の利くユーザインターフェイスを作成する方法を教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout is a powerful layout engine that helps you design adaptive layouts that dynamically respond to any changes to the scene’s size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトは強力なレイアウト機構です、それは、画面の大きさに対する何らかの変更に動的に応答する適応性のあるレイアウトをあなたが設計する手助けをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gesture recognizers are objects that you attach to a view that allow the view to respond to the user the way a control does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザはオブジェクトです、それはあなたがビューに取り付けて、そのビューがコントロールが行うやり方でユーザに応答できるようにするものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outlets provide a way to reference interface objects—the objects you added to your storyboard—from source code files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレットは、インターフェイスオブジェクト—あなたがストーリーボードに加えたオブジェクト—に、ソースコードファイルから言及する方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unit tests are used for testing small, self-contained pieces of code to make sure they behave correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストは、小さな、自己充足のコード断片をテストして、それが正しく振舞うことを確かめるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views display content to the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>おのおののビューは、中身（コンテンツ）を利用者（ユーザ）に表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessibility hint. A brief, localized phrase that describes the results of an action on an element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティヒント。 簡潔な、ローカライズされた語句で、ある要素に関するあるアクションの結果を解説します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessibility label. A short, localized word or phrase that succinctly describes the control or view, but does not identify the element’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティラベル。 短い、ローカライズされた単語または語句で、簡潔にコントロールやビューを解説します、しかし要素の持つ型を識別しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessibility value. The current value of an element, when the value is not represented by the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティ値。 ある要素の現在の値、値がラベルによって表されない時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debug and test your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリのデバッグとテスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn about the technologies available to you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたに利用可能なテクノロジーについて学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn the Swift programming language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftプログラミング言語を学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn to design beautiful app interfaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>美しいアプリインターフェイスの設計を学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn to develop great apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巨大なアプリの開発について学ぶ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Register as a developer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>開発者として登録する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ship your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリを出荷する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fix-its are provided by the compiler as potential solutions to errors in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらFix-itは、コンパイラによってあなたのコード中のエラーに対する可能性のある解決策として提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View controllers implement your app’s behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラは、あなたのアプリの挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A  that’s passed as a parameter to a method that calls the closure when it finishes executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パラメータとしてメソッドに渡され、それが実行を完了する時クロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A guard statement declares a condition that must be true in order for the code after the guard statement to be executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>guard文はある条件を宣言します、それはguard文の後のコードが実行されるためにはtrueでなければならないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A switch statement considers a value and compares it against several possible matching patterns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>switch文はある値について検討して、それをいくつかの可能なマッチングパターンに対して比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A for-in loop iterates over a sequence, such as ranges of numbers, to execute a set of code multiple times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループは、あるシーケンス（列、一続きのもの）のすべてに渡って繰り返して行きます、例えばある範囲の数などに対して、そうして一組にされたコードを複数回実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Cocoa Touch framework for working with the user interface (UI) layer of an iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリのユーザインターフェイス（UI）階層（レイヤ）を扱うためのあるココアタッチフレームワーク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that’s a child of another class (known as its superclass).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、それは、別のクラス（スーパークラスとして知られるもの）の子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that’s a parent of another class (known as its subclass).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、それは、別のクラス（サブクラスとして知られるもの）の親です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant or variable defined only within a particular, limited scope, like a loop, conditional statement, or function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数または変数で、ある特定の、制限されたスコープ（作用範囲）、例えばループ、条件文、または関数などの内部でのみ定義されるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant, variable, or function defined at the top-level scope of a program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプログラムのトップレベルのスコープで定義される定数、変数、または関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A delegate is an object that acts on behalf of, or in coordination with, another object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先は、別のオブジェクトの代わりを務める、またはそれと連携して役割を果たすオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method that handles the process of preparing an instance of a class, structure, or enumeration for use, which involves setting an initial value for its properties and performing any other required setup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッド、それが取り扱うのは、使用するクラス、構造体、または列挙のインスタンスの準備過程です、それはそれのプロパティの初期値の設定となんらかの他の必須の設定の実行を伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A navigation controller manages transitions backward and forward through a series of view controllers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラは、一続きのビューコントローラの中での前後の場面転換を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A property observer observes and responds to changes in a property’s value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバ（プロパティ監視者）は、監視と応答をあるプロパティの持つ値における変化に対して行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A segue in which one view controller presents another view controller as its child.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるセグエ、そこにおいて１つのビューコントローラは別のビューコントローラをそれの子として提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A segue that varies the way new content is displayed based on the target view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるセグエ、それはターゲットビューコントローラに基づいて新しいコンテンツが表示される方法が様々です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A show segue pushes the selected scene onto the top of the navigation stack, and the navigation controller presents that scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表示セグエは、選択されたシーンをナビゲーションスタックの一番上へとプッシュします（積んでいきます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A storyboard is a visual representation of the app’s user interface, showing screens of content and the transitions between them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードは、アプリのユーザインターフェイスの視覚による表現です、それはいくつかの画面表示コンテンツとそれらの間の転換を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A storyboard representation of a screen of content in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボード表現でのあなたのアプリのある画面内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user interface (UI) that automatically adjusts so that it looks good in the context of the available screen space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユーザインターフェイス（UI）、それは、自動的に調節することで利用可能な画面空間の状況にふさわしく見えるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view  object that’s located at the top of a view hierarchy, serving as a container for the subviews in its hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューオブジェクト、それは、ビュー階層の最上部に位置して、その階層の中のサブビューの容れ物としての役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view that encloses another view (known as its subview).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビュー、それは、別のビュー（サブビューとして知られるもの）を納めているものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view that is enclosed by another view (known as its superview).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビュー、それは、別のビュー（スーパービューとして知られるもの）に納められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Universal app is one that runs on both iPhone and iPad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Universalアプリは、iPhoneとiPadの両方で動作するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bar that contains information related to a scene in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xストーリーボードの中のあるシーンに関連した情報を含むバー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッド、プロパティ、そして他の要件の設計図、それは、ある特定の作業または一片の機能性を満足させるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button called Item appears where you dragged the bar button item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Itemという名のボタンが、あなたがバーボタン項目（Bar Button Item）をドラッグしたところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button can be in more than one state at the same time, such as when a button is both disabled and highlighted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンは、同時にひとつ以上の状態になることができます、例えばあるボタンが使用不能と強調の両方であるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button is highlighted whenever the user touches it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンは、ユーザがそれをタッチするときはいつでも強調されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button is interactive, so users can tap it to trigger an action that you define.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンはインタラクティブ（ユーザと相互作用するもの）です、なのでユーザはそれをタップしてある動作を引き起こすことができます、その動作はあなたが定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A capability to add functionality to an existing type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機能性を既存の型に追加する能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A category of programming in which the flow of the app is determined by events: system events and user actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プログラミングの１分類、そこにおいてアプリの動作の流れを決定するのは、イベント：システムイベントおよびユーザアクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that’s at the root of its class hierarchy, meaning that it has no superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのクラス階層のルートであるクラス、それがスーパークラスを持たないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment that begins with the characters //MARK: is a special type of comment that’s used to organize your code and to help you (and anybody else who reads your code) navigate through it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字//MARK:で始まるコメントは、コメントの特別な種類で、それが使われるのはあなたのコードを系統立てるためやあなたが（そしてあなたのコードを読む他の誰でも）それを見ていく助けとするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A complementary set of teardown methods exists, as shown in the state transition diagram above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>補完的なひと揃いの解体メソッドが、上の状態推移図で見せたように存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A control (UIControl) is a subclass of UIView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロール（UIControl）は、UIViewのサブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A control flow statement that checks whether a condition is true before executing a piece of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある制御流れ文、それは、ある条件が真かどうか、一片のコードを実行する前に調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A control flow statement that executes the same piece of code multiple times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある制御流れ文、それは同じコード断片を複数回実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A cursor appears in a text field, letting you enter text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カーソルがテキスト欄に現れて、あなたにテキストを入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A cursor appears, letting you enter text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カーソルが現れて、あなたにテキストを入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data model represents the structure of the information stored in an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータモデルは、あるアプリの中に格納される情報の構造を表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data type that defines a group of related values and enables you to work with those values in a type-safe way within your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータ型、それは、関連した値からなるあるグループを定義して、あなたにそれらの値をあなたのコード内で型安全な方法で扱うことを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data type that stores multiple values of the same type in an ordered list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータ型、それは、同じ型の複数の値をある順番付けられたリストにおいて保管します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A data type that’s similar to a class, but doesn’t support inheritance and is passed by value instead of by reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるデータ型、それは、クラスに似ています、しかし継承をサポートしません、そして参照ではなく値として渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A design pattern in which one object sends a message to another object when a specific event occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとつのデザインパターン、そこにおいてオブジェクトは、特定のイベントが起こるときメッセージを別のオブジェクトに送ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A feature of Xcode that infers what you’re trying to type from context and provides suggestions that you can select.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるXcodeの機能、それは、あなたがタイプしようとしているのは何か文脈から推測して、あなたが選ぶことができる提案を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A file that contains a visual representation of the app’s UI (user interface), showing screens of content and the transitions between them, that you work on in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるファイル、それは、アプリのもつ視覚表現でのUI（ユーザインターフェイス）を含んでいて、画面内容やそれらの移り変わり（トランジション）を見せるものです、それについてはあなたがインターフェイスビルダーで作業します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A functioning table view requires three table view data source methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機能するテーブルビューは、３つのテーブルビューデータソースメソッドを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A grouping of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの値をグループにしたもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hierarchical representation of views relative to other views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューと他のビューとの関係の階層的表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hierarchical representation of a class’s relationships to its superclass and subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのもつそれのスーパークラスとサブクラスに対する間柄の階層的表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key is simply a string value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーは、単なる文字列値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A label isn’t interactive; it just displays static text in the user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルは相互作用するもの（インタラクティブ）ではありません；それはただ静的なテキストをユーザインターフェイスにおいて表示するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A layout engine that helps lay out your user interface (UI) based on the constraints you specify.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるレイアウト機構、それは、あなたのユーザインターフェイス（UI）のレイアウト（配置）をあなたが指定する制約に基づいて手伝います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A list appears showing each object’s name, description, and visual representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各オブジェクトの名前、説明、そして視覚的表現を示しているリストが現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A menu appears in the location where the drag ended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メニューが、ドラッグが終わったところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A modal view controller doesn’t get added to the navigation stack, so it doesn’t get a navigation bar in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダルビューコントローラは、ナビゲーションスタックに加えられていません、それでそれはInterface Builderにおいてナビゲーションバーを取得していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pane in a storyboard that lets you see a hierarchical representation of the objects in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボード内の枠（ペーン）の一つ、それはあなたのストーリーボード内のオブジェクトの階層的な表現をあなたに見させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pattern of app design in which view controllers serve as the communication pipeline between views and the data model.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリ設計のパターンの１つ、そこにおいてビューコントローラはビューとデータモデルの間の通信パイプランとしての用をなします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code that describes the behavior and properties common to any particular type of object, essentially providing a blueprint for the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるまとまったコード片、それは、なんらかの特定の種類（型）のオブジェクトに共通の挙動やプロパティ（特性）を記述して、そのオブジェクトの設計図を基本的に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code that’s called every time the value of a property is set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一片のコード、それは、あるプロパティの値が設定されるたびごとに呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code that’s linked to an event that can occur in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一片のコード、それは、あなたのアプリで起こるイベントと連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of code written specifically to test a small, self-contained piece of behavior in your app to make sure it behaves correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリにおける小さな、自己充足の断片の挙動をテストして、それが正しく振舞うことを確かめるために特に書かれたコード断片。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of data encapsulated within a class, structure, or enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス、構造体、または列挙の内部にカプセル化される一片のデータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A piece of text in a source code file that doesn’t get compiled as part of the program but provides context or other useful information about individual pieces of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースコードファイル中のあるテキスト断片、それはプログラムの一部としてコンパイルされませんが、前後関係や別の有益な情報をコードの個々の部分について提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A property list is a structured text file that contains essential configuration information about your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティリストは、構造化されたテキストファイルで、あなたのアプリについての本質的設定情報を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reference to an object in a storyboard from a source code file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のオブジェクトへのソースコードファイルからの参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A representation of a wildcard in Swift (_).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおけるひとつのワイルドカードの表現（_）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reusable, named piece of code that can be referred to from many places in a program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再利用可能な、名前をつけられたコード片、それはプログラムの多くの場所から参照されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reusable, named piece of code that’s associated with a particular class, structure, or enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再利用できる、名前をつけられたコード断片、それは、特定のクラス、構造体、または列挙と結び付けられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A secondary initializer, which adds additional behavior or customization, but must eventually call through to a designated initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>二次的なイニシャライザ、それは追加の挙動または注文を加えます、しかし最後には指定イニシャライザを呼び出すことに至らなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A selector is an opaque value that identifies the method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタは、メソッドを識別する不透明な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A self-contained block of functionality that can be passed around and used in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機能性の自己充足のブロック、それはあなたのコードの中であちこちに渡され使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of functions, classes, protocols, and other components that define how pieces of software should interact with each other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとそろいの関数、クラス、プロトコル、および他のコンポーネント、それは、どのようにソフトウェアの断片が互いに相互作用するべきかを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of data types and capabilities designed for Swift and baked into the language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftのために設計され、言語の中へ練り込まれる一揃いのデータ型と能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A shortcut menu titled Action Segue appears in the location where the drag ended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Action Segueとタイトルがついたショートカットメニューが、このドラッグが終わったところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A shortcut menu titled Selection Segue appears in the location where the drag ended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Selection Segue（セグエを選択）とタイトルを付けられるショートカットメニューが、ドラッグが終わったところに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A software application that provides a set of tools for software development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるソフトウェアアプリケーション、それは、ソフトウェア開発のためのひとそろいのツールを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized view controller subclass that manages transitions backward and forward through a series of view controllers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特殊化されたビューコントローラサブクラス、それは一続きのビューコントローラの中での前後の場面転換を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized type of view (specifically, an instance of the UIControl class or one of its subclasses) that responds to user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューのある特殊化した型（具体的には、UIControlクラスのインスタンスまたはそれのサブクラスの１つ）、それはユーザ入力に応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specific occurrence of a class (that is, an object), structure, or enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス（すなわち、あるオブジェクト）、構造体、または列挙に属するある特定の存在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stack view provides a streamlined interface for laying out a collection of views in either a column or a row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、いくらかのビューからなる１集団を縦列か横列のどちらかでレイアウトするための簡素化したインターフェースを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A suggested fix for a compiler error in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにおいてコンパイラエラーに対して提案される修正。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A superview maintains a strong reference to all of its subviews.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパービューは、すべてのそれのサブビューに対する強い参照を維持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view data source, as implied by its name, supplies the table view with the data it needs to display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるテーブルビューデータソースは、それの名前によってほのめかされるように、そのテーブルビューをそれが表示する必要があるデータとともに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view delegate helps the table view manage cell selection, row heights, and other aspects related to displaying the data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるテーブルビュー委任先は、テーブルビューがセル選択、行の高さ、そして他のデータ表示に関する面を管理するのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A table view is managed by a table view controller (UITableViewController).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは、テーブルビューコントローラ（UITableViewController）によって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A test method fails if one or more of its tests fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるテストメソッドは、それのテストのひとつ以上が失敗するならば失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A text field lets a user type in a single line of text, which you’ll use as the name of a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄は、ユーザにただ１行だけのテキスト、あなたが食事の名前として使うもの、を入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A text field’s delegate communicates with the text field while the user is editing the text, and knows when important events occur—such as when a user starts or stops editing text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の持つ委任先は、ユーザがテキストを編集している間テキスト欄と通信します、それで重要なイベントが起こる時がわかります — 例えばユーザがテキスト編集を始めるまたは止める時など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tool for debugging and for logging information for debugging purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグするための、そしてデバッグ目的の情報のログを取るためのツール（道具）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tool to manage assets like images that are used by your app as part of its user interface (UI).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリによってユーザインターフェイス（UI）の一部として使われる画像のような資産（アセット）を管理するためのツール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A transition from one scene to another in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのシーンから別のものへのストーリボードにおける転換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type of segue used to implement backward navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後方ナビゲーションを実装するために使われるセグエの１つの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type of file in which you can change and play around with Swift code directly in Xcode and see the immediate results.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある種のファイル、そこにおいてあなたはSwiftコードを変更したり遊んだりが直接にXcodeにおいてできます、そして直に結果を見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user can add, remove, or edit a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザ（利用者）は、あるときの食事の追加、削除、および編集が行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user might decide not to keep edits to a meal, and want to return to the meal list without saving any changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、ある食事に対する変更を残すことを止めようと決心するかもしれません、そして何ら変更を保存せずに食事リストに戻りたいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user might decide to cancel the addition of a new meal, and return to the meal list without saving anything.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、新しい食事の追加をキャンセルして、何も保存しないで食事リストに戻ることに決めるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that can be both viewed (read) and changed (written).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、眺められること（読み出し）と変更されること（書き込み）の両方が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that can change after it’s been initialized, indicated in Swift by the var keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、それが初期化された後で変更が可能です、Swiftではvarキーワードで示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that can only be viewed (read) but never changed (written).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、眺められること（読み出し）ができますが、決して変更されること（書き込み）ができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that cannot be changed (or mutated) after it’s initialized, like a constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、それが初期化された後、定数のように、変更される（または変化する）ことができないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that contains either an underlying value or nil to indicate that the value is missing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは、ある裏に潜んだ値またはその値が見つからないことを示すnilを含みます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that is able to be changed (or mutated) after it’s initialized, like a variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは変更される（または変化させられる）ことが、それが初期化される後で可能です、変数のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that’s initialized once and cannot change, indicated in Swift by the let keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値、それは一度だけ初期化されます、そして変更されることが出来ず、Swiftにおいてletキーワードによって示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value you pass in to a function, method, or initializer to satisfy one of its parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが関数、メソッド、またはイニシャライザに渡して、それのパラメータの１つを満たすもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view can have multiple subviews and only one superview.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューは、複数のサブビューと１つだけのスーパービューを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view controller manages a single content view with its hierarchy of subviews.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューコントローラは、１つだけのコンテンツビューをそれのサブビュー階層とともに管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view displays content, whereas a control is used to modify the content in some way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューはコンテンツを表示します、それに対してコントロールはコンテンツをある方法で修正するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view is a rectangular region that can draw its own content and respond to user events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、ある長方形の領域です、それはそれ独自のコンテンツを描画してユーザイベントに応答することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view’s intrinsic content size is the preferred size for the view based on its content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューの持つ固有コンテンツサイズは、ビューのためのそれのコンテンツに基づいた好ましい大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A way to check the type of an object, and to treat that object as if it’s a different superclass or subclass from somewhere else in its own class hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトの型を確認するための、そしてそのオブジェクトがまるでそれ自身のクラス階層の中のどこか他の別のスーパークラスまたはサブクラスであるかのように扱うための方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>About the Lessons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンについて</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above your table view you should now see extra space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテーブルビューの上部で、あなたは今では余分な空間を見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above “Spacing to nearest neighbor,” click the right horizontal constraint to select it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の「Spacing to nearest neighbor」で、右横制約をクリックしてそれを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Above “Spacing to nearest neighbor,” click the two horizontal constraints and the top vertical constraint to select them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の方の「Spacing to nearest neighbor（すぐ隣との間隔）」で、２つの水平制約と上部の垂直制約をクリックして、それらを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add @IBDesignable to  the beginning of the line as shown:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>@IBDesignableを行の始まりに次に示すように加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Accessibility Information</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティ情報を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Buttons to the View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンをビューに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Images to Your Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプロジェクトに画像を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Star Images to the Buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>星の画像をボタンに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Support for Interface Builder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Interface Builderに対するサポートを加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a Meal Photo</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の写真を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a Segue to Navigate Forward</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエを加えて前へナビゲートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a call to updateSaveButtonState() in the implementation to make sure the Save button is disabled until a user enters a valid name:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>updateSaveButtonState()への呼び出しを実装において加えて、ユーザが有効な名前を入力するまでSaveボタンが使用不能にされるのを確実にしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a constraint to fix that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある制約を加えてそれを修正してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a placeholder image to let users know that they can interact with the image view to select a photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレースホルダ画像を加えることで、ユーザに彼らがイメージビューと相互作用してある写真を選択できることをわかるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a property observer to the rating property, and have it call the updateButtonSelectionStates() method whenever the rating changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロパティオブザーバをratingプロパティに加えてください、そしてそれがupdateButtonSelectionStates()メソッドを格付けが変化するときはいつでも呼ぶようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add a second else statement immediately below the first:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のelse文を最初の直下に加えるには：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add accessibility information to a custom control</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティ情報をカスタムコントロールに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add code at the beginning of the method, before the rest of the template implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの冒頭、残りのひな形実装の前にコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add tests to the test case that use both no rating and the highest positive rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幾つかのテストをこのテスト項目に加えます、それは格付けなしと最も高い可能な格付けの両方を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the @IBInspectable attribute to the desired properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>@IBInspectable属性を望むプロパティに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the AddItem case to the switch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AddItemケース節をswichに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the ShowDetail case to the switch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ShowDetailケース節をswitchに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the default case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の場合を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文に続けて以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following code at the end of the implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードをこの実装の終わりに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following code between the negative rating and the empty string tests:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードを負の格付けと空の文字列のテストの間に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following code inside the initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードをイニシャライザ内部に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following code just above the code that initializes the stored properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードを、保存プロパティを初期化するコードのすぐ上に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following just above the for-in loop’s closing curly brace (}).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下をfor-inループの閉じ波確固（}）のすぐ上に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following line of code to dismiss the image picker:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコード行を加えて、イメージピッカーを片付けてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the following method under the testMealInitializationSucceeds() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のメソッドをtestMealInitializationSucceeds()メソッドの下に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add these lines of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this code to create an image picker controller:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを加えることでイメージピッカーコントローラを作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this code to set the image picker controller’s delegate to ViewController:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを加えることでイメージピッカーコントローラの委任先をViewControllerに設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this line of code to set the selected image in the image view outlet that you created earlier:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行を加えて、選択された画像をあなたが以前に作成したイメージビューアウトレットの中に設定してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this line to call the superclass’s initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行を加えてスーパークラスのイニシャライザを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add this line to call the superclass’s initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行を加えてスーパークラスの持つイニシャライザを呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add, move, and resize UI elements in a storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中でUI要素の追加、削除、そしてリサイズ（大きさ変更）をする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding an item, on the other hand, is a modal operation—the user performs an action that’s complete and self-contained, and then returns from that scene to the main navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある項目を加えることは、別の面から言えば、モーダルな操作です—ユーザは完全で自己充足なひとつの動作を実行します、そしてそれからそのシーンから主要ナビゲーションに戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, now that Interface Builder has a live copy of your control, its layout engine can properly position and size the control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて、Interface Builderがあなたのコントロールの本物のコピーを持つ今では、それのレイアウトエンジンは適切にコントロールの位置と大きさを決めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, when you click the Add button (+) and click Cancel instead of Save, the navigation should take you back to the meal list without adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらに加えて、あなたがAddボタン（+）をクリックしてCancelをSaveの代わりにクリックする場合、ナビゲーションは新しい食事を加えることなく、あなたを食事リストに戻らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adopt Auto Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトを採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After Meal, add a colon (:) and NSObject to subclass from the NSObject class:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealの後で、コロン（:）とNSObjectを加えて、NSObjectクラスのサブクラスにしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After NSObject, add a comma (,) and NSCoding to adopt the NSCoding protocol:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectの後で、コンマ（,）とNSCodingを加えて、NSCodingプロトコルを採用してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After UIImagePickerControllerDelegate, add a comma (,) and UINavigationControllerDelegate to adopt the protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIImagePickerControllerDelegateの後に、１つのコンマ（,）とUINavigationControllerDelegateを加えてください、それでこのプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After UITextFieldDelegate, add a comma (,) and UIImagePickerControllerDelegate to adopt the protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateの後に、１つのコンマ（,）とUIImagePickerControllerDelegateを加えてください、それでこのプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After UIViewController, add a comma (,) and UITextFieldDelegate to adopt the protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewControllerの後に、コンマ（,）とUITextFieldDelegateを加えてそのプロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After Xcode finishes building your project, the simulator starts automatically.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeがあなたのプロジェクトをビルドし終えた後、シミュレータは自動的に始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After an image picker controller is presented, you interact with it through the delegate methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージピッカーコントローラが提供されてから後は、あなたはそれとデリゲートメソッドを通して相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After creating the Meal objects, add them to the meals array using this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらのMealオブジェクトの作成の後で、それらをmeals配列にこのコードを使って加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After determining the URL for the documents directory, you use this URL to create the URL for your apps data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書類ディレクトリに対するURLを特定後、あなたはこのURLを使ってあなたのアプリのデータに対するURLを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After loading the images, create three meal objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像をロード後、３つの食事オブジェクトを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After logging the debug message, the method returns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグメッセージを記録した後、メソッドは返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After setting up the edit button (navigationItem.leftBarButtonItem = editButtonItem), add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>編集ボタンを準備した後（navigationItem.leftBarButtonItem = editButtonItem）、if文の下に以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the guard statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>guard文の後に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the if statement, add an else clause and wrap it around the last four lines in the method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文の後に、else節を加えて、それがこのメソッドの最後の４行の周りを包むようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the meals.removeAtIndex(indexPath.row) line, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>meals.removeAtIndex(indexPath.row)行の後で、以下のコードを加える：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the call to super.prepare(for:sender:), add this switch statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.prepare(for:sender:)への呼び出しの後に、このswitch文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the if statement, add an else clause and move the call to loadSampleMeals() inside of it:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文の後で、else節を加えてloadSampleMeals()への呼び出しをそれの内側に移動してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the line you just added, add the following if statement, and move the line that calls dismissViewControllerAnimated inside of it:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが加えだばかりの行の後で、以下のif文を加えてください、そしてdismissViewControllerAnimatedを呼び出している行をそれの内側に移動してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After you do that, the template implementation looks like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれをした後、ひな形実装はこのように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After you go through a lesson, you can download the project and check your work against it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが１つのレッスンを潜り抜けた後、あなたはそのプロジェクトをダウンロードして、あなたの仕事をそれと照合することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, Xcode adds the necessary code to ViewController.swift to store a reference to the label and configures the storyboard to set up that connection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再び、Xcodeは必要なコードをViewController.swiftに加えることでラベルへの参照を保管します、そしてストーリーボードを修正することでこの接続を確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, if your storyboard is set up correctly, the default case never executes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再び、あなたのストーリーボードが正しく準備されるならば、defaultケース節は決して実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, the system automatically runs this test case when the unit tests are run.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再び、システムはユニットテストが実行される時に自動的にこのテスト項目を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, the text field, label, and button keep the same size and position relative to the screen’s upper left corner.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再び、テキスト欄、ラベル、そしてボタンは、同じ大きさと位置を画面の上左隅に関して保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All other views that you place in this scene will be subviews of this content view (although they themselves can have nested subviews).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのシーンの中に置いた他の全てのビューは、このコンテンツビューのサブビューになります（けれどもそれら自身が入れ子にされたサブビューを持つことができます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All test cases should pass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのテスト項目がパスするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the commands in this menu have two forms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメニューのコマンド全ては、２つの形式を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All view controller objects in iOS are of type UIViewController or one of its subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSにおける全てのビューコントローラオブジェクトは、型UIViewControllerまたはそれのサブクラスの１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All view objects in iOS are of type UIView or one of its subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSでの全てのビューオブジェクトは、型UIViewまたはそれのサブクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice that the status bar disappears in landscape orientation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>また横方向ではステータスバーが見えなくなることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, Xcode lets you build, run, and debug your app—providing simulators for iOS devices and a powerful integrated debugger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>また、Xcodeはあなたにあなたのアプリのビルド、実行、そしてデバッグを行わせます — iOSデバイスのためのシミュレータおよび強力なインタラクティブデバッガを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, for the purpose of this lesson, you assigned simple strings to the accessibility properties; however, a production app should use localized strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>また、このレッスンの目標として、あなたは単純な文字列をアクセシビリティプロパティに割り当てました；しかしながら、製品アプリはローカライズされた文字列を使うべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, uncomment the implementation of tableView(_:canEditRowAt:) to support editing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>また、tableView(_:canEditRowAt:)の実装のコメントを外して編集をサポートするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, choose Product &gt; Run (or press Command-R).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>または代わりに、Product &gt; Runを選んでください（またはCommandキー + R）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, double-click the AppDelegate.swift file to open it in a separate window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいは、AppDelegate.swiftファイルをダブルクリックしてそれを独立したウインドウで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, swipe left on a cell to expose the Delete button quickly; this behavior is built into table views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、あるセル上でスワイプして、Deleteボタンを素早く露出してください；この挙動は、テーブルビューに組み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can add your own code to the stub methods, defining custom behaviors that are executed when the methods are called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいは、あなたはあなた独自のコードをスタブメソッドに加えて、そのメソッドが呼び出される時に実行されるあつらえの挙動を定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can work through A Swift Tour from The Swift Programming Language (Swift 3.0.1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいはまた、あなたはA Swift Tourを通して勉強することがThe Swift Programming Language (Swift 3.0.1)から行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it’s not written explicitly, this method is executed on an implicit self object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>と言ってもそれは明示的には書かれません、このメソッドは暗黙的なselfオブジェクトで実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although taking an app from a simple concept to the App Store isn’t a small task, the process and practices you’ve learned in this document will guide you in the right direction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリを単純な概念からApp Storeまでもっていくのは小さな作業ではありませんが、あなたがこの文書で学んだ手順と慣行はあなたを正しい方向へ導くでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the default description of built-in controls provides a good starting point, you may need to optimize the presentation of your user interface; especially for custom views and controls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組み込みのコントロールの初期状態の解説は良い出発点を提供するとはいえ、あなたはあなたのユーザインターフェイスの表現を最適化する必要があるでしょう；とりわけカスタムビューおよびコントロールについて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the project’s scene doesn’t do much yet, the basic user interface is there and functional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロジェクトのシーンはまだ多くのことをしていないとは言え、基本的なユーザインターフェースはここにあって機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the scene is connected to ViewController.swift, that’s not the only connection that needs to be made.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーンはViewController.swiftに接続されると言っても、それはこの接続だけではなく作成されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the template comes with the didReceiveMemoryWarning() method, you won’t need to implement it in these lessons, so go ahead and delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このひな形がdidReceiveMemoryWarning()メソッドを備えると言っても、あなたはこれらのレッスンにおいてそれを実装する必要はありません、それで前へ進みそれは削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although this isn’t significant for the action you’re creating right now, it’s important to remember for later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは今あなたが作成しているアクションにとって重大な意味を持ちませんが、それは重要なので後のために覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although you have the text field in your scene, there’s no instruction to the user about what to enter in the field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはテキスト欄をあなたのシーンに持つにもかかわらず、ユーザに対してその欄に何を入力するかの指示がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although your data model code builds, you haven’t fully incorporated it into your app yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータモデルコードがビルドされたとは言え、あなたはまだそれをあなたのアプリに完全に組み入れてはいません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An action (or an action method) is a piece of code that’s linked to an event that can occur in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアクション（またはアクションメソッド）は、あるコード断片です、それはあなたのアプリで発生可能なイベントと連結されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An initializer that could return nil after initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化の後にnilを返すことが可能なイニシャライザ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのひとつのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object in your app (specifically, an instance of the AppDelegate class) that creates the window where your app’s content is drawn and that provides a place to respond to state transitions within the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリの中のオブジェクトのひとつ（具体的には、AppDelegateクラスのインスタンス）、それはあなたのアプリのコンテンツ（内容）が描画されるところのウインドウを作成します、およびそれはそのアプリ内の状態の移り変わりに反応する部位を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object in your app that’s responsible for managing the life cycle of the app, communicating with its delegate, the app delegate, during state transitions within the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリのオブジェクトのひとつ、それは、アプリのライフサイクル管理に対して、それのデリゲート、アプリデリゲートとの通信に対して、アプリ内の状態の移り変わりの間を通して責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that acts on behalf of, or in coordination with, another object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、別のオブジェクトに代わって、またはそれと連携して役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that is first to receive many kinds of app events, including key events, motion events, and action messages, among others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、特にキーイベント、モーションイベント、そしてアクションイベントを含めた、多くの種類のアプリイベントを最初に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that manages a set of views and coordinates the flow of information between the app’s data model and the views that display that data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、ひとそろいのビューを管理して、アプリのデータモデルとそのデータを表示するビューとの間の情報の流れを調整します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that manages the app’s data model, providing a view object with the information it needs to display that data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それはアプリのデータモデルを管理して、ビューオブジェクトをそれがそのデータを表示するのに必要とする情報とともに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that you attach to a view that allows the view to respond to actions the way a control does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、あなたがビューに取り付けて、そのビューがコントロールが行うやり方でアクションに応答できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object that’s used to construct your user interface (UI) and display content to the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト、それは、あなたのユーザインターフェイス（UI）を組み立てるのに使われて中身（コンテンツ）をユーザに示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional that can also be used like a nonoptional value, without the need to unwrap the optional value each time it is accessed, because it’s assumed to always have a value after that value is initially set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプショナル、それはまた、非オプショナル値のように、そのオプショナル値をそれがアクセスされるたびにアンラップする必要なしに使われることが可能なものです、なぜならそれがある値をその値が最初に設定された後に常に持つとみなされるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unwind segue moves backward through one or more segues to return the user to a scene managed by an existing view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエは、後ろへと１つ以上のセグエを通り抜けて移動して、ユーザを既存のビューコントローラによって管理されるあるシーンに戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An additional piece of information that must be passed into a function, method, or initializer when it’s called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加的な一片の情報、それは、関数、メソッド、またはイニシャライザが呼び出される時にそれに渡されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An app in Xcode that simulates the behavior and appearance of running an app on a device.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeのアプリのひとつ、それは、ある機器上でのあるアプリの実行の挙動や外観をシミュレートします（擬似的に作り出します）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An area in Xcode that displays inspectors, such as the Attributes inspector, Identity inspector, and Size inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの１区画、それは、インスペクタを表示します、例えば属性インスペクタ、同一性インスペクタ、そしてサイズインスペクタなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An area in Xcode that displays one of the ready-to-use libraries of resources for your project, like the Object library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの１区画、それはあなたのプロジェクト用の即時利用可能なリソースのライブラリの１つを表示します、例えばオブジェクトライブラリのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An area in Xcode that displays the inspector pane and library pane.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeの１区画、それは、インスペクタ枠とライブラリ枠を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An empty image view doesn’t have an intrinsic content size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のイメージビューは固有コンテンツサイズを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An event processing loop that you use to schedule work and coordinate the receipt of incoming events in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イベント処理ループ、あなたはそれを使って、あなたのアプリの作業予定を立て、やってくるイベントの受け取りの調整をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An image picker controller manages the user interface for taking pictures and for choosing saved images to use in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージピッカーコントローラは、あなたのアプリで使えるように、画像の取得や保存された画像の選択のためのユーザインターフェイスを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An image set represents a single image asset, but can contain different versions of the image to display at different screen resolutions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットはただ１つだけ画像資産を表示します、しかし異なるバージョンの画像を含むことで異なる画面解像度で表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An image view isn’t a control, so it’s not designed to respond to input in the same way that button or a slider might.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューは、コントロールではありません、それでそれはボタンやスライダがするのと同じ方法で入力に応答するように設計されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inspector that you use to customize visual attributes of a user interface (UI) element in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスペクタのひとつ、あなたはそれを使って、ストーリーボードの中のユーザインターフェイス（UI）の視覚的属性を好みに合わせて変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inspector that you use to edit properties of an object in a storyboard related to that object’s identity, such as what class the object belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるインスペクタ、あなたはそれを使ってストーリーボードの中のオブジェクトのプロパティを、そのオブジェクトの同一性（アイデンティティ）に関して編集します、例えばどのクラスにそのオブジェクトが帰属するかなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An inspector that you use to edit the size and position of a user interface (UI) element in a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのインスペクタ、それは、あなたがストーリーボードの中のユーザインターフェイス（UI）要素の大きさと位置を編集するために使うものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object of the UIViewController class (and its subclasses) comes with a set of methods that manage its view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewControllerクラス（およびそれのサブクラス）のあるオブジェクトは、ひと揃いのメソッドを備えていて、それらはそれのビュー階層を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (!) placed after an optional value to access its underlying value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値の後に置かれて、それの内在する値にアクセスするようにする演算子（!）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (...) that lets you create a range of numbers that includes both the lower and upper values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（...）、それは、あなたにある数の範囲を、下部と上部の値の両方を含めて作成させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (..&lt;) that lets you create a range of numbers that includes the lower but not the upper value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（..&lt;）、それは、あなたにある範囲の数を作成させます、それは低い方を含みますが高い方の値は含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (===) that tests whether two object references both refer to the same object instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（===）、それは２つのオブジェクトオブジェクト参照が両方とも同じインスタンスに言及するかを試験します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (??) placed between two values, a ?? b, that unwraps an optional a if it contains a value, or returns a default value b if a is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（??）で２つの値の間、a ?? bに置かれます、それはオプショナルaをそれが値を含むならばアンラップします、またはaがnilならば値bを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (as!) that attempts a downcast and force-unwraps the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（as!）、それはダウンキャストとその値の強制アンラップを試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An operator (as?) that attempts a downcast and returns the result as an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある演算子（as?）、それはダウンキャストを試みてその結果をオプショナル値として返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And just as you need a text field delegate when you work with a text field, you need an image picker controller delegate to work with an image picker controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてまさにテキスト欄を扱うときにあなたがテキスト欄委任先を必要としたように、イメージピッカーコントローラを扱うのにあなたはイメージピッカーコントローラ委任先を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your loadSampleMeals() method should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのloadSampleMeals()メソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your tableView(_:commit:forRowAt:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてあなたのtableView(_:commit:forRowAt:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And your textFieldDidEndEditing(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてあなたのtextFieldDidEndEditing(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Anticipate object behavior based on the UIView/UIControl class hierarchy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト挙動をUIView/UIControlクラス階層に基づいて先取りする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any object can serve as a delegate for another object as long as it conforms to the appropriate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どんなオブジェクトでも、それが適切なプロトコルに準拠しさえすれば、他のオブジェクトの委任先としての務めを果たすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Archived objects can be stored on disk and retrieved at a later time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブされたオブジェクトは、ディスクに保管され後で取り出されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a convenience initializer, this initializer is required to call one of its class’s designated initializers before completing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>便宜イニシャライザであるので、このイニシャライザは、作業を完了する前にそれのクラスの指定イニシャライザの一つを呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result of the text field becoming the first responder, iOS displays the keyboard and begins an editing session for that text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がファーストレスポンダになることの結果として、iOSはキーボードを表示してそのテキスト欄のために編集セッションを始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, it’s hard to tell whether you’ve implemented everything correctly, and if you might encounter edge cases that you haven’t considered at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その結果、あなたが何もかもを正しく実装したかどうか、そしてあなたが考慮しなかったエッジケース（特殊な事例）に実行時に出くわしすことがあるかは、知り難いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, the warnings and errors are now gone.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、警告とエラーは今では去りました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, when the table view reappears, the row that the user selected now shows the edited meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、テーブルビューが再度現れる時、ユーザが選択した列は今では編集済みの食事を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, you need to distinguish between when you are presenting the view controller modally (adding a meal) and pushing the view controller onto the navigation stack (editing a meal).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、あなたはあなたがビューコントローラをモーダルに提示している（食事を加えている）そしてビューコントローラをナビゲーションスタック上へとプッシュしている（食事を編集している）場合の間を区別する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As before, Xcode adds a navigation controller and shows the navigation bar at the top of the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前と同じように、Xcodeはナビゲーションコントローラを加えてナビゲーションバーを食事詳細シーンの上部に表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As implied by their name, it’s important to keep unit tests modular.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その名前でほのめかされるように、ユニットテストのモジュール化を保つことは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As is the case with most selectable elements in a storyboard, you can use the Attributes inspector to edit a segue’s attributes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のほとんどの選択可能な要素と同じく、あなたはAttributesインスペクタを使ってセグエの属性を編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As long as the superview remains alive and in memory, all of the subviews remain alive as well.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパービューが生存してメモリにとどまる限り、すべてのサブビューは同様に生存したままでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As soon as Xcode launches, the welcome window appears.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeが起動するとすぐ、ウェルカムウインドウが現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As soon as you add an image to a view, its intrinsic content size is set to the image’s size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが画像をビューに加えるやいなや、それの固有コンテンツサイズはその画像の大きさへ設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As soon as you have the index path, you can look up the meal object for that path and pass it to the destination view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがインデックスパスを得るや否や、あなたはそのパスに対する食事オブジェクトを捜して、それを行先ビューコントローラに渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the constant name isPresentingInAddMealMode indicates, this means that the meal detail scene is presented by the user tapping the Add button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数名isPresentingInAddMealModeが示すように、これはユーザがAddボタンをタップすることによってその食事詳細シーンが表されたことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the initializer’s arguments, you pass in the values of the constants you created while archiving the saved data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザの引数として、あなたは、保存された値をアーカイブしている間にあなたが作成した定数の値を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you build more complex apps, you’ll create more scenes, and will need to manage loading and unloading views as they’re moved on and off the screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがより複雑なアプリを作るとき、あなたはもっとシーンを作成するでしょう、そしてビューのロードとアンロードをそれらが画面に現れたり隠れたりするときに管理する必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see in the ViewController.swift file, the template’s implementation overrides both the viewDidLoad() and didReceiveMemoryWarning() methods; however, the template’s stub implementation doesn’t do anything yet, except call the UIViewController version of these methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftファイルの中であなたが見ることができるように、この雛形の持つ実装はviewDidLoad()とdidReceiveMemoryWarning()メソッドの両方をオーバーライドします；しかしながら、雛形の持つスダブ実装はまだ何もしません、これらのメソッドのUIViewController版を呼び出す以外は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you create each button, you add it to the ratingButtons array to keep track of it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが各ボタンを作成するとき、あなたはそれをratingButtons配列に加えてそれの最新の状態を把握するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you develop your interface, you can change the canvas’s view, letting you see how your interface adapts to different size screens.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのインターフェイスを開発するにつれて、あなたはキャンバスのビューを変更することができ、あなたのインターフェイスが異なるサイズの画面にどう適応するかをあなたが見れるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you keep the MVC pattern in mind for rest of the app’s design, it’s time to take your basic user interface to the next level, and add an image to the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのアプリの設計の残りに向けてMVCパターンを覚えたところで、あなたの基本ユーザインターフェイスを次のレベルに持っていき、食事シーンに画像を加えるときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you make your way through the lessons and build the app, you’ll learn about concepts in iOS app development, gain a deeper understanding of the Swift programming language, and familiarize yourself with the many valuable features of Xcode, Apple’s integrated development environment (IDE).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがレッスンを通して歩を進めこのアプリを作成するにつれ、あなたはiOSアプリ開発における概念について学び、Swiftプログラミング言語のより深い理解を獲得し、そしてAppleの統合開発環境（IDE）である、Xcodeの多くの価値ある特徴に精通するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you might guess, this code sets the label’s text property to Default Text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが考えたように、このコードはラベルのtextプロパティを「Default Text」に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you prepare to implement navigation in the FoodTracker app, you need to delete and replace a few pieces of code and parts of the user interface that you won’t need anymore.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがFoodTrackerアプリにおいてナビゲーションを実装する準備をする際に、あなたが必要とするのはいくつかのコード部分とユーザインターフェイスの一部を削除し置き換えることです、それはあなたがもう必要としないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you saw earlier, the selected state affects the button’s appearance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが前に見たように、選択済状態はボタンの外観に影響します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you see in the assistant editor, the preview looks almost identical to the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアシスタントエディタで見ると、プレビューはキャンバスとほとんど同一に見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you see, unit testing helps catch errors in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが見たように、ユニットテストはあなたのコードのエラーをとらえる助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you will see in later lessons, failable initializers are harder to use because you need to unwrap the returned optional before using it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが後のレッスンで見るように、失敗できるイニシャライザは使うのが難しいです、なぜならあなたは返されるオプショナルをそれが使われる前にアンラップする必要があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At runtime, your app loads the view from the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行時に、あなたのアプリはビューをストーリボードからロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At runtime, your storyboard creates an instance of ViewController, your custom view controller subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行時に、あなたのストーリーボードはViewControllerのインスタンス、あなたのあつらえのビューコントローラサブクラス、を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the beginning of the first if statement, add this if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のif文の始まりで、このif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the end of the lesson, you’ll be able to:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの終わりに、あなたが出来るようになるのは：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the end of the lesson, you’ll have a complete navigation scheme and interaction flow for the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの終わりには、あなたはアプリのための完全なナビゲーションの枠組みと相互作用の流れを獲得するしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of each view hierarchy is a content view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各ビュー階層の最上部にはコンテンツビューがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of the dialog that appears, select iOS, and then select Cocoa Touch Class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログの一番上で、iOSを選択して、それからCocoa Touch Classを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of the dialog that appears, select iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログの一番上で、iOSを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of the file, immediately following the import of UIKit, import the unified logging system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルの一番上で、UIKitのインポートにすぐ続けて、統合ログシステムをインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of the file, import the unified logging system, just below where you import UIKit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルの最上部で、統合ログシステムをインポートしてください、あなたがUIKitをインポートするところのすぐ下です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the top of the file, under import UIKit, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルの一番上で、import UIKitの下に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, the app displays an initial list of sample meals, and lets you add new meals to the list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、アプリは見本の食事の初期リストを表示して、あなたに新しい食事をそのリストに追加させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, the storyboard in your app contains one scene, which represents a screen of content in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのアプリのストーリーボードは１つのシーン（場面）を含んでいます、それはあなたのアプリのコンテンツの画面のひとつを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, users can reset the meal name label to a default value, but you really want to let users enter their own meal names using the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、ユーザは食事名を省略時の値にリセットできます、しかしあなたが本当に望むのはユーザに彼ら自身の食事名をテキスト欄を使って入力されることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you can go back to the action method you defined, selectImageFromPhotoLibrary(_:), and finish its implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはあなたの定義したアクションメソッド、selectImageFromPhotoLibrary(_:)に戻って、それの実装を完了することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you have a data model for a meal: the Meal class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはある食事に対するデータモデル：Mealクラスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your ViewController.swift code should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのViewController.swiftコードはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your init?(name: String, photo: UIImage?, rating: Int) initializer should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのinit?(name: String, photo: UIImage?, rating: Int)イニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your custom table view controller subclass, MealTableViewController, has a mutable array that’s prepopulated with some sample meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのカスタムテーブルビューコントローラサブクラス、MealTableViewControllerは、可変の配列を１つ持ちます、それはいくつかの見本の食事が入れられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, your scene should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたのシーンはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you’re ready to start developing your first full-featured app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたはあなたの最初の完全な機能を持ったアプリの開発を始める用意ができています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At this point, you’ve got the basics of a custom UIStackView subclass, called RatingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この時点で、あなたは基本的なカスタムUIStackViewサブクラス、RatingControlと呼ばれるものを手に入れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attach a tap gesture recognizer (UITapGestureRecognizer) to the image view, which will recognize when a user has tapped the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タップジェスチャリコグナイザ（UITapGestureRecognizer）をイメージビューに取り付けます、それは、ユーザがイメージビューをタップしたときを認識します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attributes inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributes（属性）インスペクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Auto Layout dynamically calculates the size and position of each element based on these constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトは、各要素の大きさと位置をそれらの制約に基づいて動的に計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be sure to reset these settings to their default values when you are done testing them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの設定をそれらの省略時の値に設定し直すことをあなたがそれらのテストを終えた時に確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because MealTableViewController is a subclass of UITableViewController, the template implementation comes with a skeleton for prepare(for:sender:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewControllerがUITableViewControllerのサブクラスであることから、雛形実装はprepare(for:sender:)のための骨格を備えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because ViewController will be in charge of presenting the image picker controller, it also needs to adopt the UINavigationControllerDelegate protocol, which simply lets ViewController take on some basic navigation responsibilities.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>なぜならViewControllerは、イメージピッカーコントローラに起こっていることを管理することになるからです、それはまたUINavigationControllerDelegateプロトコルに準拠することもまた必要とします、それは単純にViewControllerがいくつかの基本的なナビゲーション責務を持つようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a meal always has a name and rating but might not have a photo, make the UIImage an optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事は、常に名前と格付けを持つが写真を持つとは限らないことから、UIImageをオプショナルにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because editing a meal and creating a new meal are very similar, the app uses the meal detail scene for both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の編集および新しい食事の作成は大変似ていることから、アプリは両方のために食事詳細シーンを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the Meal class’s init!(name:, photo:, rating:) initializer is failable, you need to check the result returned by the initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealクラスのinit!(name:, photo:, rating:)イニシャライザが失敗できることから、あなたはイニシャライザによって返される結果を検査する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the meal property on MealViewController is an optional and you set your initializer up to fail if there’s no name, the Meal object doesn’t get created and added to the meal list—which is what you expect to happen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController上のmealプロパティがオプショナルであり、あなたが名前なしでは失敗するようにあなたのイニシャライザを設定したので、Mealオブジェクトは作成されず食事リストに加えられません—これはあなたが起こることを期待するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the NSObject class’s only initializer is init(), the Swift compiler adds the call for you automatically, so you don’t need to change your code; however, feel free to add a call to super.init(), if you wish.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectクラスのただ１つのイニシャライザはinit()であることから、Swiftコンパイラはあなたの代わりに自動的に呼び出しを加えます、それであなたはあなたのコードを変更する必要はありません；しかしながら、遠慮なくsuper.init()への呼び出しを加えてください、あなたが望むなら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the return value of decodeIntegerForKey is Int, there’s no need to downcast the decoded value and there is no optional to unwrap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeIntegerForKeyの戻り値がIntであることから、復号化された値をダウンキャストする必要はありません、そしてオプショナルをアンラップすることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the text field will no longer be the active object in the app, events need to get routed to a more appropriate object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がもはやアプリにおいて能動的なオブジェクトでないことから、イペントはより適したオブジェクトへ向けられる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the user, rather than the developer, is in control of when certain pieces of the app code get executed, you want to identify exactly which actions a user can perform and what happens in response to those actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>開発者ではなくユーザがいつアプリのコードの特定の部分が実行されるようにするかを制御するので、あなたは、厳密にどのアクションがユーザに実行可能かそして何がそれらのアクションへの応答において起こるかを明確にする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the “Constrain to margins” checkbox is selected, the stack view in this case will be constrained to the superview’s left and right margins.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Constrain to margins」チェックボックスが選択されているため、この場合のスタックビューは、それのスーパービューの左および右余白に対して制約されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you based your project on an Xcode template, the basic app environment is automatically set up for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Xcodeひな形をもとにあなたのプロジェクトを構築したので、基本的なアプリ環境は自動的にあなたの代わりに準備されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you created a custom cell class that you want to use, downcast the type of the cell to your custom cell subclass, MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは使いたいと望むカスタムセルクラスを作成したので、セルの型をあなたのカスタムセルサブクラス、MealTableViewCellにダウンキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you don’t need to do anything else, you indicate that you don’t need to execute a completion handler by passing in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは何もする必要はないので、あなたが完了ハンドラを実行する必要がないことをnilを渡すことによって示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you haven’t written any performance-heavy code, you’ll only want to write functional tests for now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが何ら性能上重いコードを書いていないので、あなたはただ機能テストだけを今のところ書きたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you now have two view controllers in your project, it makes sense to give ViewController.swift a more meaningful name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは現在２つのビューコントローラをあなたのプロジェクトの中に持つため、ViewController.swiftにより理解しやすい名前を与えるほうが賢明です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you resign first responder status in textFieldShouldReturn, the system calls this method just after calling textFieldShouldReturn.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはファーストレスポンダ状態をtextFieldShouldReturnにおいて放棄するので、システムはこのメソッドをtextFieldShouldReturnの呼び出しの直後に呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you want to unwind back to the meal list scene, you need to add an action method with this format to MealTableViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは食事リストシーンへと巻き戻し帰りたいので、あなたに必要なのはこの形式を使ったアクションメソッドをMealTableViewController.swiftに加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you’re using a navigation controller with a show segue, the backward navigation is handled for you, and a back button automatically appears in the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがナビゲーションコントローラを表示セグエとともに使っいてるので、後方へのナビゲーションはあなたに代わって取り扱われます、そして戻るボタンが自動的に食事詳細シーンに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before creating a segue, you need to configure your scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエの作成の前に、あなたは、あなたのシーンを構成することを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before the //MARK: Private Methods section, add the following line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>//MARK: Private Methods節の前に、以下の行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before the last closing curly brace (}), add the following line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の閉じ波括弧（}）の前に、以下の行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の波括弧（}）の前に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before you always called the dismiss(animated:completion:) method when the user tapped the Cancel button; however, dismiss(animated:completion:) only works when the user is adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今まであたなは常にdismiss(animated:completion:)メソッドをユーザがCancelボタンをタップした時に呼び出しました；しかしながら、dismiss(animated:completion:)はユーザが新しい食事を加える時に働くだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before you can display dynamic data in your table view cells, you need to create outlet connections between the prototype in your storyboard and the code that represents the table view cell in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的データをあなたのテーブルビューセルの中に表示する前に、あなたが必要とするのは、アウトレット接続をあなたのストーリーボードの中の原型とテーブルビューセルをMealTableViewCell.swiftにおいて表しているコードとの間に作成することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before you can run the app on an iOS device, you need to set a valid team so that the app can be signed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアプリをiOSデバイスで実行可能になる前に、あなたは有効なチームを設定する必要があります、それでそのアプリは署名されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the //MARK: Private Methods comment, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>//MARK: Private Methodsコメントの下で、以下の行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the class line in MealTableViewController.swift, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftの中のclass行の下に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the class line, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>class行の下に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the else statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このelse文の下で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the encodeWithCoder(_:) method, add the following initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder(_:)メソッドの下で、以下のイニシャライザを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the imagePickerControllerDidCancel(_:) method, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerControllerDidCancel(_:)メソッドの下に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the init(frame:) method, start typing init again, and select init(coder: NSCoder) from the code completion options.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init(frame:)メソッドの下で、再びinitをタイプし始めて、そしてinit(coder: NSCoder)をコード補完の選択肢から選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the nameTextField.delegate line, add the following code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nameTextField.delegate行の下で、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the ratingControl outlet in MealViewController.swift, add the following property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいてratingControlアウトレットの下に、以下のプロパティを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the super.viewDidLoad() line, add a blank line and the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.viewDidLoad()行の下で、空白行を１つと以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the super.viewDidLoad() line, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.viewDidLoad()行の下で、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the call to super.prepare(for:sender:), add the following guard statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.prepare(for:sender:)に対する呼び出しの下に、guard文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment that says // Delete the row from the data source, add:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// Delete the row from the data sourceというコメントの下で、次を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment you just added, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがたった今加えたコメントの下に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add a new test case:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下で、新しいテスト項目を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのコメントの下に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add this method skeleton:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下に、このメソッド骨組みを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, add this method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメントの下で、このメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the comment, start typing init.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下で、initの入力を始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the import statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインポート文の下で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the last line, add the button’s constraints:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の行の下、ボタンの持つ制約を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous code, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以前のコードの下で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the previous line, add this line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前の行の下に、このコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below the properties, add this code to declare an initializer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティの下で、このコードを加えてイニシャライザを宣言してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below this line, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行の下に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both give you a solid foundation in the Swift programming language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方ともあなたにSwiftプログラミング言語におけるしっかりした基礎を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both the canvas and the preview are showing the same size screen (iPhone 7) and the same orientation (portrait).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスとプレビューの両方とも、同じ大きさの画面（iPhone 7）と同じ方向（縦向き）を表示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build a Basic UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的なUIを作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build the Basic UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本となるUIを造る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Building the UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIを作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bundle Identifier: This value is automatically generated based on your product name and organization identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バンドル識別子：この値は、自動的にあなたの製品名と組織識別子に基づいて生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But even though you added all the necessary user interface elements to your table view cells, they’re showing up empty, just like before.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたがすべての必要なユーザインターフェイス要素をあなたのテーブルビューセルに加えたとしても、それらは空で現れています、ちょうど前のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But first, you need to connect the table view cell in your scene to the custom cell subclass you just created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしまず、あなたはあなたのシーン中のテーブルビューセルをあなたがちょうど作成したカスタムセルサブクラスと接続する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But how do you quickly test whether the data saved successfully?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしどうやってあなたは、データがうまく保存されたか素早くテストするのでしょうか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But if it’s nil, the operator the returns the empty string ("") instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしそれがnilならば、この演算子は空の文字列（""）をその代わりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But table views with a large number of rows display only a small fraction of their total items at a given time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかし多数の行を持つテーブルビューは、それらの項目全体のほんの一部しか一度に表示しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But what happens if you try to create a Meal with incorrect values, like an empty name or a negative rating?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたがMealを不正な値、空の名前や負数の格付けなどで作成しようとするならば、何が起こるでしょうか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But why are the user interface elements you added nested under View?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしなぜあなたが加えたユーザインターフェイス要素が「View」の下に入れ子にされるのでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But you can take this a step further and keep users from accidentally trying to add meals without a name by disabling the Save button while they’re typing a meal name, and checking that they’ve specified a valid name before letting them dismiss the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしあなたはこれを１段先に進めて、ユーザが間違えて食事を名前なしで加える試みをしないようにできます、それは彼らが食事名をタイプしている間Saveボタンを使用不能にすること、そして彼らが有効な名前を指定したことを彼らにキーボードを片付けさせる前にチェックすることによってです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Buttons always start in the normal state (not highlighted, selected, focused, or disabled).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンは、常に通常状態で始まります（強調、選択、フォーカス、または使用不能ではなく）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Buttons have five different states: normal, highlighted, focused, selected, and disabled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンは、５つの異なる状態を持ちます：通常、強調、フォーカス、選択、そして使用不能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By adopting the UITextFieldDelegate protocol, you tell the compiler that the ViewController class can act as a valid text field delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateプロトコルを採用することによって、あなたはコンパイラにViewControllerクラスが有効なテキスト欄委任先としての役割を果たすことができると教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, UITableViewController and its subclasses adopt the necessary protocols to make the table view controller both a data source (UITableViewDataSource protocol) and a delegate (UITableViewDelegate protocol) for its associated table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期時様態で、UITableViewControllerとそれのサブクラスは必要なプロトコルに準拠することで、テーブルビューコントローラをそれの関連データビューに対するデータソース（UITableViewDataSourceプロトコル）と委任先（UITableViewDelegateプロトコル）の両方にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the button modifies its appearance based on its state, for example a disabled button appears grayed out.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時では、ボタンはそれの外観をそれの状態に基づいて修正します、例えば使用不能ボタンはグレイアウトされて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the table view controller uses dynamic data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、テーブルビューコントローラは動的データを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By leaving it as internal access (the default), you can access it from any other class inside the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それを内部アクセス（初期状態）のままにしておくことによって、あなたはそれにアプリの内部の何らかの他のクラスからアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By making meals a variable (var) instead of a constant, you make the array mutable, which means you can add items to it after you initialize it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mealsを定数ではなく変数（var）にすることで、あなたはこの配列を可変にします、それはあなたがそれを初期化した後にそれに項目を加えることができることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By responding to user actions and populating views with content from the data model, controllers serve as a gateway for communication between the model and views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザアクションへ応答することとビューをデータモデルからのコンテンツで満たすことによって、コントローラはモデルとビューの間の通信の関門の役目をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By the time the view controller’s viewDidLoad() method is called, the system has assigned valid values to all of the controller’s outlets, and you can safely access their contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラの持つviewDidLoad()メソッドが呼び出されるまでに、システムは有効な値をコントローラの持つアウトレットの全てに割り当て終えます、そしてあなたは安全にそれらのコンテンツにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cancel a New Meal Addition</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事の追加のキャンセル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cancel an Edit to an Existing Meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の食事への編集のキャンセル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the tableView(_:numberOfRowsInSection:) data source method to return the appropriate number of rows, and remove the warning comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>tableView(_:numberOfRowsInSection:)データソースメソッドを適切な行の数を返すように変更して、警告コメントを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the class name to MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス名をMealViewControllerに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the import statement to import UIKit instead of Foundation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポート文を変更してUIKitをFoundationの代わりにインポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Change the return value from 0 to 1, and remove the warning comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り値を0から1に変えてください、そして警告コメントを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose unwindToMealListWithSender: from the shortcut menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unwindToMealListWithSender:をショートカットメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Clear Constraints to remove all constraints on the user interface elements, and then try following the previous instructions to set up the constraints again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Clear Constraintsを選択することで、ユーザインターフェイス要素上の全ての制約を取り除いてください、そしてそれから前の指示に従って制約を再び設定してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Editor &gt; Canvas, and make sure Show Bounds Rectangles is selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editor &gt; Canvasを選んでください、そしてShow Bounds Rectanglesが選択されることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Editor &gt; Embed In &gt; Navigation Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editor &gt; Embed In &gt; Navigation Controllerを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose File &gt; New &gt; File (or press Command-N).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>File &gt; New &gt; Fileを選んでください（またはコマンド-Nを押します）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Reset to Suggested Constraints to have Xcode update your interface with a valid set of constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Reset to Suggested Constraintsを選択することで、Xcodeにあなたのインターフェイスを有効な制約ひとそろいで更新させてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Show from the Action Segue menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ShowをAction Segueメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Show from the Selection Segue menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ShowをSelection Segueメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clean Up the Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトの掃除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Connect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Connectをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Createをクリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Get and then click Install App.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「入手」をクリックしてそれから「アプリをインストール」をクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click a meal from the meal list to navigate to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事を食事リストからクリックして食事詳細シーンへと進んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click inside the text field and enter text using the onscreen keyboard (if you’d like, you can use your computer’s keyboard by choosing Hardware &gt; Keyboard &gt; Connect Hardware Keyboard).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の内側をクリックしてテキストを画面上のキーボードを使って入力してください（あなたがそうしたいなら、あなたはあなたのコンビュータのキーボードをHardware &gt; Keyboard &gt; Connect Hardware Keyboardを選ぶことによって使うことができます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click on the error icon to bring up more information about the error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーアイコンをクリックして、そのエラーについてさらなる情報を引き出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Add button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Addボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar near the top right corner of Xcode to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeツールバーのAssistantボタンをXcodeの一番上右隅でクリックして、アシスタントエディタを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar near the top right corner of Xcode to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeツールバーのAssistantボタンをXcodeの１番上右隅近くでクリックして、アシスタントエディタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AssistantボタンをXcodeツールバーにおいてクリックしてアシスタントエディタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Assistant button in the Xcode toolbar to open the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AssistantボタンをXcodeツールバーにおいてクリックしてアシスタントエディタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the Run button, located in the top-left corner of the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Run（実行）ボタンをクリックしてください、Xcodeツールバーの一番上左の角にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the error icon to bring up the fix-it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>修正案の提示のためエラーアイコンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the same star a second time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じ星をもう一度クリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the test method to navigate to its code in the editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テストメソッドをクリックして、それのコードをエディタで見ていってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click the third star to change the rating to 3, for example.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、３番目の星をクリックして格付けを３に変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clicking any of the buttons at this point should still call ratingButtonTapped(_:) and change the button images appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのどれかをクリックするとこの時点では依然としてratingButtonTapped(_:)が呼び出されます、そしてボタン画像は適切に変化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftでのクロージャはCとObjective-Cでのブロックに、そして他のプログラミング言語でのラムダに似ています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cocoa Touch</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ココアタッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code comments like this provide helpful hints and contextual information in source code files, but you don’t need them for this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このようなコードコメントは、ソースコードファイルにおいて役に立つヒントと前後関係的な情報を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Configure the Navigation Bar for the Scenes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーをシーンのために構成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Congratulations!</seg>
      </tuv>
      <tuv lang="JA">
        <seg>おめでとう！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Gesture Recognizer to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Image View to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Rating Control to the View Controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールをビューコントローラに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the Table Cell UI to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルセルUIをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the UI to Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIをコードに接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Connect the UI to Source Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIをソースコードと接続する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the Cancel button on your canvas to the code display in the editor on the right, stopping the drag at the line just below the //MARK: Navigation comment in MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のCancelボタンから右のエディタの中のコード表示へコントロール-ドラッグして、MealViewController.swiftの中の//MARK: Navigationコメントのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the Save button on your canvas to the code display in the editor on the right, stopping the drag at the line just below your ratingControl property in MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のSaveボタンから右のエディタのコード表示までコントロール-ドラッグして、あなたのMealViewController.swiftの中のratingControlプロパティのすぐ下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the Set Default Label Text button on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のSet Default Label Textボタンから右のエディタのコード表示までコントロール-ドラッグして、あなたがまさにViewController.swiftに加えたコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the button to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのボタンから食事詳細シーンまでコントール-ドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the gesture recognizer in the scene dock to the code display in the editor on the right, stopping the drag at the line below the //MARK: Actions comment in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーンドックのジェスチャリコグナイザから右のエディタのコード表示へコントロール-ドラッグして、ViewController.swiftの中の//MARK: Actionsコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the image view on your canvas to the code display in the editor on the right, stopping the drag at the line just below the nameLabel property in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のイメージビューから右のエディタの中のコード表示へコントロール-ドラッグして、MealTableViewCell.swiftの中のnameLabelプロパティのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the image view on your canvas to the code display in the editor on the right, stopping the drag at the line just below the existing outlets in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のイメージビューから右のエディタの中のコード表示へコントロール-ドラッグして、ViewController.swiftの中の既存のアウトレットのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the label on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のラベルから右のエディタのコード表示までコントロール-ドラッグして、あなたが今ViewController.swiftに加えたコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the label on your canvas to the code display in the editor on the right, stopping the drag at the line just below your nameTextField property in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のラベルから右のエディタのコード表示までコントロール-ドラッグして、あなたのViewController.swiftの中のnameTextFieldプロパティのすぐ下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the rating control on your canvas to the code display in the editor on the right, stopping the drag at the line below the photoImageView property in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上の格付けコントロールから右のエディタの中のコード表示へコントロール-ドラッグして、ViewController.swiftの中のphotoImageViewプロパティの下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the rating control on your canvas to the code display in the editor on the right, stopping the drag at the line just below the photoImageView property in MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上の格付けコントロールから右のエディタの中のコード表示へコントロール-ドラッグして、MealTableViewCell.swiftの中のphotoImageViewプロパティのすぐ下の行でドラッグをやめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the table view cell to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのテーブルビューセルから食事詳細シーンへとコントロール-ドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control-drag from the text field on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキャンバス上のテキスト欄から右のエディタのコード表示までコントロール-ドラッグして、あなたがまさにViewController.swiftに加えたコメントの下の行でドラッグをやめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create Outlets for UI Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UI要素のアウトレットを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Custom View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムビューの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Data Model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデルの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Gesture Recognizer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a New Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいプロジェクトの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Table View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a data model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデルの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a project in Xcode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトをXcodeで作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a structure to store string constants</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体を作成して文字列定数を格納する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create an Image Picker to Respond to User Taps</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージピッカーを作成してユーザタップに応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create an Unwind Segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create and associate custom source code files with elements in a storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムソースコードを作成してストーリーボードの要素と結びつける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create and design a custom table view cell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタム（あつらえの）ビューセルの作成と設計</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a second storyboard scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つ目のストーリーボードを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create segues between view controllers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラ間のセグエ（遷移）を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create the Meal List</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create outlet and action connections between UI elements in a storyboard and source code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のUI要素とソースコードの間のアウトレットおよびアクション接続</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating new meals and editing existing meals are very similar operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事の作成と既存の食事の編集は、大変よく似た操作です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, the init(frame:) method has an error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在、init(frame:)に１つのエラーがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Currently, the FoodTracker app gives users the ability to add a new meal to a list of meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>目下、FoodTrackerアプリは、ユーザに新しい食事を食事リストに加える能力を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debug messages contain information that may be useful during debugging or when troubleshooting specific problems.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグメッセージは、デバッグ中にまたは特定の問題を解決する時に有用であると思われる情報を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debugging Auto layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトをデバッグする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decide whether you’d like to enable developer mode and follow the prompts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが開発者モードを有効にしたいかどうかを決めてプロンプトに従ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define Your Data Model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータモデルの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define a custom class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムクラスを定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define an Action to Perform</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行されるアクション（動作）の定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the line that sets the text property of the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルのテキストプロパティを設定する行を削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the template’s methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テンプレートの持つメソッドを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delete the two lines of comments, and replace them with a call to the superclass’s implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのコメント行を削除してください、そしてそれらをスーパークラスの持つ実装への呼び出しと置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Demonstrate a conceptual understanding of the difference between failable and nonfailable initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるそして失敗できないイニシャライザの間の違いの概念的理解を実地にうつす</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Design Custom Table Cells</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムテーブルセル設計</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Despite the name, just because the system calls this method, it does not guarantee that the content view is visible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その名前にもかかわらず、システムがこのメソッドを呼び出すからといって、それはコンテンツビューが可視化されることを保証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Despite the name, just because the system calls this method, it does not guarantee that the content view will become visible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その名前にもかかわらず、システムがこのメソッドを呼び出すからといって、それはコンテンツビューが可視化されるようになることを保証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Developer mode allows Xcode access to certain debugging features without requiring you to enter your password each time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>開発者モードは、特定のデバッグ機能をXcodeが毎回あなたのパスワード入力をあなたに要求せずに利用できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Devices: Universal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバイス（機器）：共通</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Different presentation styles have different uses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なる提示形式は、異なる用途を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Differentiate between push and modal navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プッシュナビゲーションとモーダルナビゲーションの間の違いがわかる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Disable Saving When the User Doesn't Enter an Item Name</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが項目名を入力しないとき保存できないようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dismiss a view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラをかたづける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dismiss view controllers based on their presentation style</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラをそれらの表現形式に基づいて片付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display a Default Photo</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期写真を表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display dynamic data in a table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的なデータをテーブルビューで表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display the Custom View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムビューの表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Display the Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Document Revision History</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文書改定履歴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t be overwhelmed by all of the pieces; each area is described in more detail when you need to use it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの部分部分の全てに圧倒されないで；各区画はあなたがそれを使う必要があるときにより詳細に説明されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the Fix-it to insert the override keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Fix-itをダブルクリックすることで、overrideキーワードを挿入してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the button and type Set Default Label Text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このボタンをダブルクリックしてSet Default Label Textとタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the fix it to update your initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その修正をダブルクリックしてあなたのイニシャライザを更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the folder name and rename it Rating Images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フォルダ名をダブルクリックして、それの名前をRating Imagesに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the folder name and rename it Sample Images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フォルダ名をダブルクリックしてそれをSample Imagesに改名してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it emptyStar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットの名前をダブルクリックして、その名前をemptyStarに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it filledStar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットの名前をダブルクリックして、その名前をfilledStarに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it highlightedStar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セットの名前をダブルクリックして、その名前をhighlightedStarに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it to defaultPhoto.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像セット名をダブルクリックして、それをdefaultPhotoに名前変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the image set name and rename it to a name you’ll remember when you’re writing it in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その画像セット名をダブルクリックしてそれをある名前、あなたがコードに書く時思い出せるもの、に改名してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the label and type Meal Name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルをダブルクリックしてMeal Nameと入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the navigation bar in the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事詳細シーンにおいてダブルクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double-click the navigation bar in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事リストシーンにおいてダブルクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the latest version of Xcode on your Mac free from the App Store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最新版のXcodeをご自由にAppストアからあなたのMacにダウンロードしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Bar Button Item object from the Object library to the far left of the navigation bar in the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Bar Button Itemオブジェクトをオブジェクトライブラリからナビゲーションバーの左端へと食事詳細シーンにおいてドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Bar Button Item object from the list to the far right of the navigation bar in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Bar Button Itemオブジェクトをこのリストから食事リストシーンのナビゲーションバーのずっと右へドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Button object from the Object library to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Buttonオブジェクトをオブジェクトライブラリからあなたのシーンへドラッグします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Label object from the Object library to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルオブジェクトをオブジェクトライブラリからあなたのシーンにドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Table View Controller object from the list, and drop it on the canvas to the left of the existing scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Table View Controllerオブジェクトをドラッグして、それをキャンバス上で既存のシーンの左にドロップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Tap Gesture Recognizer object from the Object library to your scene, and place it on top of the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tap Gesture Recognizerオブジェクトをオブジェクトライブラリからあなたのシーンにドラッグします、そしてそれをイメージビューの上に配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag a Text Field object from the Object library to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Text Fieldオブジェクトをオブジェクトライブラリからあなたのシーンへとドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag an Image View object from the Object library to your scene so that it’s in the stack view below the button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Image Viewオブジェクトをオブジェクトライブラリからあなたのシーンへドラッグして、それがスタックビューの中のボタンの下になるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag and drop the image into the 2x slot in the image set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その画像を画像セットの2xの挿入位置にドラック＆ドロップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag and drop the images into the simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像をシミュレータへとドラッグ＆ドロップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag and resize the image view so that it’s square, flush against the left, top, and bottom of the cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをドラッグおよびサイズ調節して、それが正方形で、セルの左、上、そして下に対してくっつくようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag another Bar Button Item object from the Object library to the far right of the navigation bar in the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう１つのBar Button Itemオブジェクトをオブジェクトライブラリからナビゲーションバーの右端へと食事詳細シーンにおいてドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag down the navigation controller between the meal list scene and the meal detail scene so you can see the new segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラを食事シーンリストと食事詳細シーンとの間でドラッグして引き下げてください、それであなたは新しいセグエを見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the storyboard entry point from the meal detail scene to the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードエントリポイントを食事詳細シーンから食事リストシーンへとドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the button so that it’s right below the text field and aligned with the left margin in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのボタンをドラッグして、それがテキスト欄のすぐ下、シーンの左端にそろうようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the label so that its lined up with the guidelines to the right side of the image view and to the top margin of the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルをドラッグして、それがイメージビューの右側とテーブルビューセルの上余白のガイドラインと整列するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the label so that it’s right above the text field and aligned with the left margin in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのラベルをドラッグして、それがテキスト欄のすぐ上、シーンの左端にそろうようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the stack view so that it’s below the label and aligned with the label’s left margin.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスタックビューをドラッグして、それがラベルの下で、ラベルのもつ左余白と整列するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Drag the text field so that it’s positioned in the top half of the scene and aligned with the left margin in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄をドラッグして、それがシーンの上半分のところに位置するように、そしてシーンの左端にそろうようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During an app state transition—for example, app launch, transitioning to the background, and app termination—the application object calls the corresponding delegate method, giving your app an opportunity to respond.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリの状態推移—例えば、アプリの起動、バックグラウンドへの移行、そしてアプリの終了など—の間に、アプリケーションオブジェクトは、該当するデリゲートメソッドを呼び出して、応答するのにふさわしい機会をあなたのアプリに与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each constant corresponds to one of the three properties of Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各定数は、Mealの３つのプロパティのうちの１つに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each lesson contains a tutorial and the conceptual information you need to complete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各レッスンは、指導科目とあなたがそれを成し遂げるのに必要とする概念的情報を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each line performs the following steps:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各行は以下の行程を実行します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each method encodes data of the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各メソッドは、与えられた型のデータをエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of the delegate methods has a default behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デリゲートメソッドの各々は、省略時の挙動を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each row in a table view has one cell, and that cell determines the content that appears in that row and how that content is laid out.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューの各行は１つのセルを持ちます、そしてそのセルは、その行に現れる内容とその内容がどのように配置（レイアウト）されるかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each test should check for a specific, basic type of behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各テストは、ある特定の、基本的な種類の挙動についてチェックするべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each view controller has a navigationItem property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各ビューコントローラは、navigationItemプロパティを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Edit the attributes of UI elements in a storyboard using the Attributes inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中でUI要素の属性をAttributesインスペクタ（「属性」管理機能）を使って編集する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Edit the attributes of a segue in a storyboard using the Attributes inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエの属性をストーリーボードにおいてAttributesインスペクタを使って編集する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elements in a storyboard are linked to source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中の要素は、ソースコードと繋がれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Embed an existing view controller within a navigation controller in a storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のビューコントローラをストーリーボードにおいてナビゲーションコントローラ内部に埋め込む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable Editing of Existing Meals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の食事の編集を可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enable a table view controller’s editing mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラの持つ編集モードを有効にする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enabling this setting helps you understand exactly what’s going on in your view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この設定を有効にすることは、あなたのビュー階層がどうなっているかあなたが正確に理解する助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enter your Apple ID and password when prompted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入力を促される場合はあなたのApple IDとパスワードを入力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Errors and warnings appear as yellow triangle icons (warnings) and red circles (errors) next to the code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーと警告は、黄色い三角形アイコン（警告）と赤い丸（エラー）としてコードの隣に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though the canvas shows a specific device and orientation, it is important to create an adaptive interface—an interface that automatically adjusts so that it looks good on any device and in any orientation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスが特定のデバイスと方向を示すとしても、重要なのは適応インターフェイス — 自動的に適応することでそれがあらゆるデバイスであらゆる方向においてふさわしく見えるインターフェイス — を作成することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though you haven’t written any code, you can build and run the Single View Application template without any additional configuration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが１つもコードを書かなかったとしても、あなたはSingle View Applicationひな形をビルドして実行することが、追加の何らかの構成なしにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Eventually, you will use this button to change the meal’s rating; however, for now you’ll just check that the action is working.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後には、あなたはこのボタンを使って食事の持つ格付けを変更します；しかしながら、今のところはあなたは単にアクションが働いているかを確認するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every controller on the navigation stack gets a navigation bar, which can contain controls for backward and forward navigation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションスタック上のすべてのコントローラは、ナビゲーションバーを手に入れます、それは前後へのナビゲーションのためのコントロールを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every time the app launches, it starts over with the initial sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリが起動するたびごとに、それは初期見本データで最初からやり直します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every time you launch the app, you start over with the initial sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアプリを起動するたびごとに、あなたは初期見本データで最初からやり直します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything should work as before.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのものが前と同じに機能するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything should work exactly as before, but the Set Default Label Text button is gone, and the elements are centered horizontally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのものが正確に以前と同じように働きます、しかしSet Default Label Textボタンはなくなりました、そして要素は水平方向の中心に置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples are “Adds a title” or “Opens the shopping list.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例は、「タイトルを追加」や「買い物リストを開く」です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples are “Add” or “Play.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例は、「追加」や「再生」です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expand the Navigator area and open the Project navigator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Navigator区画を展開して、Projectナビゲータを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expand the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータとユーティリティ区画をNavigatorとUtilitiesボタンをXcodeツールバーでクリックすることで広げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explain the relationship between a scene in a storyboard and the underlying view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの中のシーンとその下にあるビューコントローラの間の関係を明らかにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explore Further</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらに先を探索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Failable initializers always start with either init? or init!.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるイニシャライザは、常にinit?またはinit!どちらかで始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fill out the basic implementation by setting the properties equal to the parameter values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的な実装をプロパティをパラメータ値と等しく設定することで埋めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, add the button to the stack:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、ボタンをスタックに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, assign these values to the accessibilityHint and accessibilityValue properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、これらの値をaccessibilityHintとaccessibilityValueプロパティに割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, it reads the accessibility hint (if any).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、それはアクセシビリティヒントを読み上げます（もしあれば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, once all the buttons have been removed, it clears the ratingButtons array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、一旦すべてのボタンが削除されてしまうならば、それはratingButtons配列を片付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the system launches your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最終的に、システムはあなたのアプリを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you added a couple of unit tests to help you find and fix bugs in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、あなたは少数のユニットテストを加えて、あなたがあなたのコードでバグを見つけて修正する助けとしました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you added accessibility information, ensuring that the control works well with Voice Over.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、あなたはアクセシビリティ情報を加えて、コントロールがVoice Overでうまく機能することを確かなものにしました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you set the highlighted image for both the highlighted and the selected and highlighted states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、あなたは強調画像を強調状態および選択・強調状態の両方に対して設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the setupButtons() method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoad()メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Find the line that sets the background color (button.backgroundColor = UIColor.redColor()) and replace it with the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>背景色を設定する行（button.backgroundColor = UIColor.redColor()）を見つけて、それを以下と置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, ViewController needs to adopt the UIImagePickerControllerDelegate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まず、ViewControllerに必要なのはUIImagePickerControllerDelegateプロトコルに準拠することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, ViewController needs to adopt the UITextFieldDelegate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まず、ViewControllerに必要なのはUITextFieldDelegateプロトコルに準拠することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, create a custom table view controller subclass to manage the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、食事リストシーンを管理するためのカスタムビューコントローラのサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, it removes the button from the list of views managed by the stack view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まず、それはボタンをスタックビューによって管理されるビューのリストから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, take a look at the AppDelegate.swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、AppDelegate.swiftファイルを見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, you need to connect the image view to the code in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、あなたはが必要とするのはイメージビューをViewController.swiftの中のコードに接続することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, you’ll put your table view controller inside of a navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、あなたは、あなたのテーブルビューコントローラを、あるナビゲーションコントローラの内部に置きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow the prompts through these screens until Xcode is completely set up and ready to launch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeが完全に設定されて起動準備ができるまでこれらの画面を進んでプロンプトに従ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow the target-action pattern when designing app architecture</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリ構造を設計する時に「ターゲット-アクション」パターンに従う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Name, type cancel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nameに対して、cancelをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Name, type selectImageFromPhotoLibrary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nameに対して、selectImageFromPhotoLibraryをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Name, type setDefaultLabelText.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Nameに対して、setDefaultLabelTextをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Type, select UIBarButtonItem.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Typeに対して、UIBarButtonItemを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Type, select UIButton.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Typeに対して、UIButtonを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Type, select UITapGestureRecognizer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Typeに対して、UITapGestureRecognizerを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a class, structure, or enumeration to satisfy the requirements of a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス、構造体、または列挙にとってプロトコルの要件を満たすこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a simple table view like the one in the FoodTracker app, you just need the table view to display a single section, so the implementation of the numberOfSections(In:) data source method is straightforward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerアプリでのもののような単純なテーブルビューに対して、あなたは単に１つだけセクションを表示するテーブルビューを必要とします、それでnumberOfSections(In:)データソースメソッドの実装は単刀直入なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any given row in the table view, you configure the cell by fetching the corresponding Meal in the meals array, and then setting the cell’s properties to corresponding values from the Meal class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビュー中の任意の指定された行のために、あなたはセルを構成します、それはmeals配列の中の対応するMealを取ってきて、それからセルのプロパティをMealクラスからの対応する値に設定することで行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a test that checks the Meal class’s initialization code could be named testMealInitialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Mealクラスの持つ初期化コードを調べるテストは、testMealInitializationと命名されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you have a 4-star rating, the value says “4 stars set.” Finally, you assign a hint to the currently selected star that says, “Tap to reset the rating to zero.” All the other stars have a nil-valued hint, because their effects are already adequately described by their labels.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたが星４格付けをするならば、その値は「星４を設定」と話します。最後に、あなたはあるヒントを現在選択される星に割り当てます、それは「タップして格付けをゼロにリセット」と話します。他の星すべては、nil値のヒントを持ちます、なぜならそれらの効果はすでにそれらのラベルによって妥当に解説されるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the first button’s label says “Set 1 star rating.” The accessibility value contains the control’s current rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、最初のボタンの持つラベルは、「星１格付けを設定」と言います。アクセシビリティ値は、そのコントロールの持つ現在の格付けを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the label for a slider might be “Speed,” but its current value might be “50%.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるスライダのためのラベルは「速度」であるかもしれません、しかしそれの現在の値は「50%」であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when the interface is rotated into a landscape orientation, the text field should grow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、インターフェイスが横方向へと回転される場合、テキスト欄は伸びるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can’t simply create an action method that’s triggered when a user taps on an image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たとえば、あなたはユーザがイメージビューをタップするとき切り替えられるアクションメソッドを簡単には作成できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might use the key name to store the value of the name property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはキーnameを使うことで、nameプロパティの値を格納するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For information on adding inline sanity checks and preconditions to your code, see assert(_:_:file:line:) and precondition(_:_:file:line:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インライン正常性検査と事前条件をあなたのコードに加えること関する詳細として、assert(_:_:file:line:)とprecondition(_:_:file:line:)を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on accessibility, see Accessibility on iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティに関する詳細として、Accessibility on iOSを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on image resolutions, see Graphics &gt; Image Size and Resolution in iOS Human Interface Guidelines.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像解像度に関する詳細として、Graphics &gt; Image SizeそしてResolutionをiOS Human Interface Guidelinesで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on initializers, see Initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザに関する詳細として、初期化を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on interacting with the file system in iOS, see File System Programming Guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSにおいてファイルシステムと相互作用することに関する詳細として、File System Programming Guideを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on internationalization and localization, see Build Apps for the World.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>国際化と現地語化に関する詳細として、Build Apps for the Worldを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on possible info.plist keys, see Information Property List Key Reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可能なinfo.plistキーに関する詳細として、Information Property List Key Referenceを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on the Swift initialization rules, see Class Inheritance and Initialization and Initialization in The Swift Programming Language (Swift 3.0.1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftの初期化規則に関する詳細としてクラス継承と初期化と「初期化」をThe Swift Programming Language (Swift 3.0.1)で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on the unified logging system, see Logging Reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>統合ログシステムに関する詳細として、Logging Referenceを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information on working with custom views, see Lay out user interfaces &gt; Add objects and media &gt; Render custom views in Xcode help.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムビューを使っての作業の詳細として、Lay out user interfaces &gt; Add objects and media &gt; Render custom viewsをXcodeヘルプで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Build Apps for the World.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなる情報として、Build Apps for the Worldを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Delegation in The Swift Programming Language (Swift 3.0.1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細として、委任をThe Swift Programming Language (Swift 3.0.1)で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Auto Layout Guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細として、Auto Layout Guideを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Interaction &gt; Modality and Interaction &gt; Navigation in iOS Human Interface Guidelines.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細として、Interaction &gt; Modality and Interaction &gt; NavigationをiOS Human Interface Guidelinesで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, select Help &gt; Xcode Help and search for “Signing workflow.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなる情報として、Help &gt; Xcode Helpを選択して“Signing workflow”を検索してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For navigation controllers, the show segue pushes new content on top of the current view controller stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラに対して、表示セグエは現在のビューコントローラスタックの一番上に新しいコンテンツをプッシュします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now, scroll past all the template methods, and add the following code before the final closing brace (}):</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さしあたり、すべてのテンプレートメソッドを過ぎるまでスクロールして、以下のコードを最後の閉じ波括弧（}）の前に加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now, you can preview your cell using the assistant editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さしあたり、あなたはあなたのセルをアシスタントエディタを使ってプレビューします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now, you’ll need to implement two of these methods:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さしあたり、あなたはそれらメソッドのうち２つを実装する必要があるでしょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For table views with a small number of rows, all rows may be onscreen at once, so this method gets called for each row in your table.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少ない数の行を持つテーブルビューに対しては、すべての行が一度に画面上にあることができます、それでこのメソッドはあなたのテーブルの中の各行に対して呼ばれることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the images to load properly in Interface Builder, you must explicitly specify the catalog’s bundle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像をInterface Builderにおいて適切にロードするために、あなたは明示的にカタログの持つバンドルを指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the rating control, you need to provide three additional pieces of information for each button,</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールのために、あなたは３つの追加的な部分の情報を各ボタンのために提供する必要があります、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the rest of this lesson, just ignore it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの残りでは、単にそれを無視します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this lesson, you’ll start with the most basic template: Single View Application.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは最も基本的なひな形：Single View Application（ビューが１つだけのアプリケーション）で始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll implement the behavior of the Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これのために、あなたはCancelボタンの挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll update the behavior of the Cancel button to dismiss the scene appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このために、あなたはCancelボタンの挙動を更新して、そのシーンを適切に忘れ去られるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you’ll use an image view (UIImageView), a user interface element that displays a picture.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このために、あなたはイメージビュー（UIImageView）、画像を表示するユーザインターフェイス要素を使うことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, iOS comes with a built-in class, UITableView, designed specifically to display a scrolling list of items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幸いにも、iOSは組み込みのクラス、スクロールできる項目のリストを表示するために特別に設計される、UITableViewを備えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, it’s quite easy to give a view the same capabilities as a control by adding a gesture recognizer to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幸いなことに、ビューにコントロールと同じ能力を与えるのは、ジェスチャリコグナイザをそれに加えることによって比較的簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortunately, the UIImagePickerController class has this behavior built into it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幸いにも、UIImagePickerControllerクラスは、この挙動をそれに組み込んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions menu</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数メニュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Furthermore, because you are validating data before letting code execute, use guard statements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その上、あなたはコード実行を許可する前にデータを検証していることから、guard文を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Furthermore, the subclass must mark their initializers as required, indicating that their subclasses must also implement the initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらにその上、サブクラスはそれらのイニシャライザをrequiredと印して、それらのサブクラスもまたそれらイニシャライザを実装する必要があることを指し示さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gesture recognizers interpret touches to determine whether they correspond to a specific gesture, such as a swipe, pinch, or rotation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザは、タッチを解釈して、それが特定のジェスチャ、例えばスワイプ、ビンチ、または回転などに相当するか判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get Familiar with Xcode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeに慣れる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Get the Tools</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ツールの入手</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Started</seg>
      </tuv>
      <tuv lang="JA">
        <seg>はじめに</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Glossary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>用語集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Glossary terms are linked throughout the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>用語集の用語は、レッスンのあちらこちらからリンクされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Go back and fix that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻ってそれを修正してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Go back to the  the //MARK: UITextFieldDelegate section and find the textFieldDidEndEditing(_:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>//MARK: UITextFieldDelegate節に戻ってtextFieldDidEndEditing(_:)メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are a few pointers on where to go from here:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここには、ここからどこへ行くかに関していくつかの助言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are terms you will encounter throughout this guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにあるのはこのガイドの至る所であなたが遭遇する用語です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the guard statements simply act as a sanity check.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、guard文は単純に正常性検査として振舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the operator unwraps the optional String returned by nameTextField.text (which is optional because there may or may not be text in the text field), and returns that value if it’s a valid string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、この演算子は、nameTextField.text（これはオプショナルです、なぜならテキスト欄にテキストがあるかもしれないし無いかもしれないからです）によって返されるオプショナルのStringをアンラップします、そしてそれが有効な文字列ならばその値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you are using one of the UIButton class’s convenience initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、あなたはUIButtonクラスの持つ便宜イニシャライザの１つを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you create the file URL by appending meals to the end of the documents URL.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、あなたはファイルURLをmealsを書類URLの終わりに加えることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you define property observers for the starSize and starCount properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、あなたはプロパティオブザーバをstarSizeとstarCountプロパティに対して定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you start by checking whether the button is the currently selected button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、あなたはボタンが現在選択済ボタンかどうか調べることで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s a breakdown:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにはある断絶があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, as long as the enumerations are correct, the returned array should always contain exactly one match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、列挙が正しい間は、返される配列は常にきっちりマッチする１つを含むはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, because the control is @IBDesignable, the setup code also needs to run in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、コントロールは@IBDesignableであることから、準備コードもまたInterface Builderにおいて動作する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, because the only buttons that trigger this action are the ones you created and added to the array, if the indexOf(_:) method cannot find a matching button, you have a serious bug in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、このアクションを引き起こすボタンのみが、あなたが作成してこの配列に加えたものなので、indexOf(_:)メソッドが一致するボタンを見つけることができないならば、あなたはゆゆしいバグをあなたのコードの中に持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, before you do that, you need to learn how to display a list of meals using a table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたがそれをする前に、あなたは食事のリストをテーブルビューを使って表示する方法を学ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, changing these values does not yet change the control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、それらの値を変えることはまだコントロールを変えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if you later add another segue from your Your Meals scene and forget to update the prepare(for:sender:) method, the new segue’s identifier won’t match either the AddItem or the ShowDetail case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたが後で別のセグエをあなたのYour Mealsシーンから追加して、prepare(for:sender:)メソッドを更新するのを忘れるならば、新しいセグエの持つ識別子はAddItemまたはShowDetailケース節のどちらとも一致しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, importing UIKit also gives you access to Foundation, so you can remove the redundant import to Foundation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、UIKitをインポートすることはまたあなたにFoundationにアクセスさせます、それであなたはFoundationに対する冗長なインポートを取り除けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the didSet observers should only be called by Interface Builder at design time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、didSetオブザーバは、Interface Builderによって設計時に一度だけ呼び出されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the data is not saved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、データは保存されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the scene on the canvas may not have the same dimensions as the simulator’s screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、キャンバス上のシーンはシミュレータの画面と同じ寸法を持たないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the unified logging system gives you more control over when messages appear and how they are saved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、統合ログシステムは、メッセージが現れる時とそれらが保存される方法のすべてに対してあなたにさらなる制御を行わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, this does not really tell you anything new.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いずれにしても、これは実際あなたに何か変わったことを教えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, when using Auto Layout, it’s a good habit to explicitly disable the autogenerated constraints whenever you programmatically create a view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、「自動レイアウト」を使っている場合、あなたがプログラム的にビューを作成するたびごとに明示的に自動生成制約を作動しないようにするのは良い習慣です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you want to keep the navigation bar to provide the user with visual continuity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたはナビゲーションバーを保持してユーザに視覚的整合性を提供することを望みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you will need to join the Apple Developer Program before you can submit your app to the App store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたがあなたのアプリをApp storeへ提出可能になる前に、あなたはApple Developer Programの一員になる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identify the purpose of key files that are created with an Xcode project template</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeプロジェクトテンプレートを使って作成されるキーファイル（主要ファイル）の用途を確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identity inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If loadMeals() successfully returns an array of Meal objects, this condition is true and the if statement gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadMeals()が成功裏にMealオブジェクトの配列を返したならば、この条件はtrueになり、if文が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If loadMeals() returns nil, there were no meals to load and the if statement doesn’t get executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadMeals()がnilを返すならば、ロードする食事はなかったので、if文は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a project window appears instead of the welcome window, don’t worry—you probably created or opened a project in Xcode previously.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もしWelcomeウインドウではなくプロジェクトウインドウが現れても、心配いりません—あなたはおそらくXcoceで以前にプロジェクトを作成または開いたのでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all of the commands are grayed out, select the scene’s view controller or one of the views and open the menu again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コマンドの全てがグレイアウトされるならば、シーンの持つビューコントローラまたはビューのうちの１つを選択して、メニューを再び開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If either of these operations fail, the entire initializer fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの演算のどちらかかが失敗するならば、イニシャライザ全体が失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If either the downcast fails or the meal property on sourceViewController is nil, the condition evaluates to false and the if statement doesn’t get executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが失敗する、またはsourceViewController上のmealプロパティがnilである、このどちらでも、この条件はfalseに評価されてif文は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it does, it indicates a bug in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが動作するならば、それはあなたのアプリの中のバグを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is, that means a user tapped one of the table views cells to edit a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがそうならば、ユーザがテーブルビューセルの１つをタップして、ある食事を編集することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is, you assign a hint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうであるならば、あなたはヒントを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it was presented modally (the user tapped the Add button), it’ll be dismissed using dismissViewControllerAnimated(_:completion:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがモーダルに提示された（ユーザがAddボタンをタップした）ならば、それはdismissViewControllerAnimated(_:completion:)を使って退去させられるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it was presented with push navigation (the user tapped a table view cell), it will be dismissed by the navigation controller that presented it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがプッシュナビゲーションで表された（ユーザがテーブルピューセルをタップした）ならば、それはそれを表したナビゲーションコントローラによって退去させられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, click the text field to reveal the resize handles.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、テキスト欄をクリックしてリサイズハンドル（寸法調節つまみ）が見えるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, in the Project navigator, drag the MealTableViewController.swift file so that it’s positioned with the other Swift files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、Projectナビゲータにおいて、MealTableViewController.swiftファイルをドラッグして、それでそれが他のSwiftファイルの下に置かれるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, in the Project navigator, drag the RatingControl.swift file so that it’s positioned under the other Swift files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、Projectナビゲータにおいて、RatingControl.swiftファイルをドラッグして、それでそれが他のSwiftファイルの下に置かれるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, open the FoodTracker folder in the project navigator by clicking the disclosure triangle next to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、FoodTrackerフォルダをプロジェクトナビゲータにおいてその隣の開示三角形をクリックすることで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, open the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要なら、アウトラインビューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, run your app in the simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要なら、あなたのアプリをシミュレータにおいて実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, zoom in by choosing Editor &gt; Canvas &gt; Zoom.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、Editor &gt; Canvas &gt; Zoomを選んで拡大します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no cells are available, dequeueReusableCell(withIdentifier:for:) instantiates a new one; however, as cells scroll off the scene, they are reused.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルが利用可能でないならば、dequeueReusableCell(withIdentifier:for:)は新しいものをインスタンス化します；しかしながら、セルがシーンの最後までスクロールされるとき、それらは再利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not, it is positioned at the top of the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでないならば、それはシーンの一番上に置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not, you set the button’s hintString property to nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>違うならば、あなたはボタンのhintStringプロパティをnilに設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the meal property is non-nil, this code sets each of the views in MealViewController to display data from the meal property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mealプロパティが非nilならば、このコードはMealViewControllerの中のビューそれぞれをmealプロパティに設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the name parameter is an empty string, or if the rating parameter is less than 0 or greater than 5, this code assigns nil to the meal variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nameパラメータが空文字列ならば、またはratingパラメータが0より小さいか5より大きいならば、このコードはnilをmeal変数に割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the meal property is non-nil, the code assigns the value of that property to the local constant meal and executes the if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mealプロパティが非nilならば、コードはそのプロパティの値をローカル定数mealに割り当ててif文を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the assistant editor is open, return to the standard editor by clicking the Standard button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタが開いているならば、標準エディタにStandardボタンをクリックすることで戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the assistant editor is open, return to the standard editor by clicking the Standard button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタが開かれているならば、Standardボタンをチェックすることで標準エディタに戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the button’s index is less than the rating, the isSelected property is set to true, and the button displays the filled-in star image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのインデックスが格付けより小さいならば、isSelectedプロパティはtrueへ設定されます、そしてボタンは塗りつぶされた星画像を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition is false, the guard statement’s else branch must exit the current code block (for example, by calling return, break, continue, throw, or a method that doesn’t return like fatalError(_:file:line:)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その条件がfalseならば、guard文の持つelse分岐が現在のコードブロックを抜け出さなければなりません（例えば、return、break、continue、throw、またはfatalError(_:file:line:)のように返らないメソッドを呼ぶことによって）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the downcast does fail, the fatalError() function prints an error message to the console and terminates the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが失敗するならば、fatalError()関数はエラーメッセージをコンソールに出力してアプリを終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the downcast fails, it assigns nil to the photo property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが失敗するならば、それはnilをphotoプロパティに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the downcast succeeds, the code assigns the MealViewController instance to the local constant sourceViewController, and checks to see if the meal property on sourceViewController is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャストが成功したならば、コードはMealViewControllerインスタンスをローカル定数のsourceViewControllerに割り当てます、そしてsourceViewControllerでのmealプロパティがnilかどうかを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the identifier is nil, the nil-coalescing operator (??) replaces it with an empty string ("").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>識別子がnilならば、nil合体演算子（??）はそれを空の文字列（""）と置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the initializer does fail, you have a bug in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザが失敗するならば、あなたのコードにはバグがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the initializer is working as expected, these calls to init(name:, photo:, rating:) should fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザが予想するように機能しているならば、それらは init(name:, photo:, rating:)に対する呼び出しに失敗するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the initializer is working as expected, these calls to init(name:, photo:, rating:) should succeed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザが予想するように機能しているならば、それらは init(name:, photo:, rating:)に対する呼び出しを成功するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the last item in the property list is an array, make sure the array is collapsed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティリストの中の最後の項目が配列ならば、その配列が折りたたまれることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the layout does not behave as you expect, click the Resolve Auto Layout Issues button to bring up a menu of debug commands.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レイアウトがあなたが期待するように振舞わないならば、Resolve Auto Layout Issuesボタンをクリックすることでデバックコマンドのメニューを画面に出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the outline view is collapsed, click the toggle to expand the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューが折りたたまれているならば、切替ボタンをクリックしてアウトラインビューを展開してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the project navigator isn’t open, click the leftmost button in the navigator selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータが開いていないならば、ナビゲータ選択バーの中の一番左のボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the rating is greater than 1, you calculate the hint using string interpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けが1より大きいならば、あなたはヒントを文字列補間を使って算出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the user is adding an item to the meal list, you don’t need to change the meal detail scene’s appearance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが項目を食事リストに加えているならば、あなたは食事詳細シーンの外観を変える必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the user tapped the star that corresponds with the current rating, you reset the control’s rating property to 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在の格付けに相当する星をユーザがタップしたならば、あなたはコントロールの持つratingプロパティをゼロへとリセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the user taps the rightmost filled in star (the star associated with the current rating), the rating is cleared and all stars are displayed as empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが星で塗りつぶされた最も右（現在の格付けと関連する星）をタップするならば、格付けは消去されてすべての星は空として表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the view controller has been pushed onto a navigation stack, this property contains a reference to the stack’s navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラがナビゲーションスタック上へとプッシュされ終わったならば、このプロパティはスタックの持つナビゲーションコントローラへの参照を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If they are not, the else statement is executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もしそれらが違うならば、else文が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If they do, it represents either a bug in your app that needs to be fixed at design time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらがそうするならば、それはどちらもあなたのアプリでのバグ（不具合）に相当し、それは設計時に修正される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If they tap the Save button, you’ll update both the meal’s data in the model and its appearance in the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>彼らがSaveボタンをタップするならば、あなたは食事の持つデータをモデルにおいて、そしてそれの外観を食事リストにおいて更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this is the first time you’ve launched Xcode, it may ask you to agree to the user agreement and to download additional components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これがあなたがXcodeを起動する最初の時ならば、それは利用者契約に同意するかあなたに尋ねてから追加コンポーネントをダウンロードするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you add a few new meals and quit the app, the meals you added will be there next time you open the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがいくつかの新しい食事を加えてアプリを終了したならば、あなたが加えた食事は次回あなたがアプリを開いた時にそこにあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you add an item to a collapsed array, it adds a sibling to the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある項目を折りたたまれた配列に加えるならば、それはその配列の兄弟として加わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you add an item to an expanded array, it adds a child item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある項目を展開された配列に加えるならば、それは子項目として加わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are an individual or part of an organization that is a member of the Apple Developer Program, you can select that team here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがAppleデベロッパプログラムのいちメンバーである個別の組織または組織の一部ならば、あなたはチームをここで選択できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are editing an existing meal, you need to display the meal’s data in the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが既存の食事を編集しているならば、あなたは食事の持つデータを食事詳細シーンにおいて表示する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are getting warnings about misplaced views, select the view controller and press the Update Frames button in the bottom right corner of the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが誤って設置されたビューについての警告を得ているならば、ビューコントローラを選択してUpdate Framesボタンをキャンバスの下右隅で押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are getting warnings about misplaced views, use the Update Frames button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが間違って設置されたビューについての警告を受けているならば、Update Framesボタンを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are not yet comfortable with Swift, complete the Learn to Code exercises in the Swift Playgrounds app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがまだSwiftに慣れていないならば、Swift Playgroundsアプリにおいて「Learn Code」練習問題を完了してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are using a different version, your screen may look different than what is shown in the screenshots.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが異なるバージョンを使っているならば、あなたの画面は、スクリーンショットで示されるものとは違って見えるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you choose not to enable developer mode, you may be asked for your password later on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが開発者モードを有効にしないのを選んだならば、あなたはあなたのパスワードを後で聞かれるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click Save, the app does not update the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSaveをクリックしても、アプリは食事を更新しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click Save, the changes you made should be displayed in the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSaveをクリックするならば、あなたがした変更が食事リストで表示されるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click the Edit button, the table view goes into editing mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがEditボタンをクリックするならば、テーブルビューは編集モードになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click the Edit button, the table view goes into editing mode—but you won’t be able to delete cells yet, because you haven’t implemented that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのEditボタンをクリックするならば、テーブルビューは編集モードにはいります—しかしあなたはまだセルを削除することができません、なぜならあなたがそれを実装していないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you click these icons, Xcode shows additional information about the errors and warnings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれらのアンコンをクリックするならば、Xcodeはエラーと警告について追加情報を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you didn’t add a default photo to your project in a previous lesson, add it now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが省略時の写真をあなたのプロジェクトに以前のレッスンで加えなかったならば、今それを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t get the behavior you expect, use the Auto Layout debugging features to help you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが期待する挙動を得ないならば、あなたの助けとなる自動レイアウトデバッグ機能を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t provide any initializers, Swift classes automatically inherit all of their super class’s designated initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが何らイニシャライザを提供しないならば、Swiftのクラスは自動的にそれらのスーパークラスの持つ指定イニシャライザの全てを継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t see RatingControl as an option in the pop-up menu, make sure you have the stack view selected on the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがRatingControlをオプションとしてポップアップメニューに見ないならば、あなたがキャンパス上でスタックビューを選択していることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t see the unwindToMealListWithSender: method in the shortcut menu, make sure that the method has the right signature.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがunwindToMealListWithSender:メソッドをショートカットメニューで見ないならば、そのメソッドが正しいシグネチャを持つことを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t see the Object library, click its button, which is the third button from the left in the library selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリが見えないならば、それのボタンをクリックしてください、それはライブラリ選択バーの左から３番目のボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t, use com.example.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの組織識別子、あなたがそれを持つならば。あなたが持たないならば、com.exampleを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have, fix them by reading through the warnings or errors that the compiler provides, and then look back over the instructions in this lesson to make sure everything looks the way it’s described here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがしていたら、それらをコンパイラが提供する警告やエラーをあちこち読んで修正してください、そしてそれからこのレッスンの指示をずっと振り返って、すべてのことがそれがここで説明されるようになっているか確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you haven’t explicitly marked an item as file private or private, you can access it from your tests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある項目にファイルプライベートまたはプライベートであると明示的に印しないならば、あなたはそれにあなたのテストからアクセス出来ません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you implement any initializers, you not longer inherit any of the superclasses initializers; however, the superclass can mark one or more of its initializers as required.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが何らかのイニシャライザを実装するならば、あなたはもはやスーパークラスイニシャライザのどれも継承しません；しかしながら、スーパークラスはひとつ以上のそれのイニシャライザをrequiredと印することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you leave the template implementation empty or delete it from your AppDelegate class, you get the default behavior whenever that method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがひな形実装を空のままにしておいたり、それをあなたのAppDelegateクラスから削除したならば、あなたはそのメソッドが呼ばれるたびに省略時の挙動を受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you look at the meal list scene in your storyboard, you’ll notice that it shows a single table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが食事リストシーンをあなたのストーリーボードで観察するならば、あなたはそれがただ１つのテーブルビューセルを表示するのに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you look at the rating control in Interface Builder, you’ll notice that it’s displayed as a large, empty rectangle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが格付けコントロールをInterface Builderで見つけるならば、あなたはそれが大きな、空の長方形として表示されるのに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you look through the photos available in the simulator, you’ll notice that it doesn’t include any photos of food.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが利用可能な写真をあちこちシミュレータにおいて見るならば、あなたは食事の写真を何ら含まないことに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to refer to the concepts you’ve learned throughout the lessons, use the glossary to refresh your memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがレッスンを通して学んだ概念を調べる必要があるならば、用語集をあなたの記憶を新たにするのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you programmatically set the button as selected, it will change from the empty star to the filled star.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがプログラム的にボタンを選択されると設定するならば、それは空の星から塗りつぶされた星へと変わるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you see the wrong scene in the preview, make sure to select the table view scene by clicking its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが間違ったシーンをプレビューで見るならば、そのテーブルビューシーンを選択することをそれのシーンドックをクリックすることで確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you switch to the Main.storyboard and select the RatingControl, you’ll see the Star Size and Star Count settings in the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがMain.storyboardに切り替えてRatingControlを選択するならば、あなたは、Star SizeとStar Count設定をAttributesインスペクタで見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you try to drag the table view to the canvas and nothing happens, you’re probably dragging a table view object rather than a table view controller object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがテープルビューをキャンバスにドラッグすることを試みて何も起きないならば、あなたはおそらくテーブルビューコントローラオブジェクトではなくて、テーブルビューオブジェクトをドラッグしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want more space to work, collapse the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがもっと場所を必要とするならば、プロジェクトナビゲータとユーティリティ区画をNavigatorとUtilitiesボタンをXcodeツールバーにおいてクリックすることで折り畳んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want more space to work, collapse the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがもっと作業空間を必要とするならば、プロジェクトナビゲータとユーティリティ区画をXcodeツールパーのNavigatorとUtilitiesボタンをクリックすることで折り畳んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to check and see if your interface is adaptive, you need to preview different size screens and different orientations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのインターフェイスが適応性を持つかどうかを見て確かめたいならば、あなたは異なる大きさの画面と異なる方向でプレビューする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want, you can zoom out using the zoom command at the bottom of the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが望むならば、あなたはズームコマンドをキャンバスの一番下で使って表示を拡大縮小できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you write unit tests that are long or complicated, it’ll be harder to track down exactly what’s going wrong.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがユニットテストを長く難解に書いたならば、何が間違っているか正確に見つけ出すのが困難になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your app’s navigation flow is set up properly, this else case should never execute.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリの持つナビゲーションフローが正しく準備されるならば、このelseは決して実行されないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your storyboard is set up correctly, and the cellIdentifier matches the identifier from your storyboard, then the downcast should never fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリボードが正しく準備される、そしてcellIdentifierがあなたのストーリーボードからの識別子と一致するならば、その時ダウンキャストは決して失敗しないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your storyboard is set up correctly, none of these guard statements will fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードが正しく準備されるならば、これらのguardのうちどれも失敗しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your text field looks like the one below, you’re ready to resize it; if it doesn’t, select it on the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテキスト欄が下のもののように見えるならば、あなたはそれをリサイズする準備ができています；それがそう見えないならば、それをキャンバス上で選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’d like, use one of the other predefined UIColor values instead, like blue or green.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが好むならば、他の既定のUIColor値の内の１つを代わりに使ってください、blueやgreenのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re running an app for the first time, Xcode asks whether you’d like to enable developer mode on your Mac.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアプリを実行したのが初めてならば、Xcodeはあなたが開発者モードをあなたのMacで有効にしたいかどうかを尋ねます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re running into build issues, make sure the names of the images in your project exactly match the names you used in the code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがビルド問題に出くわしているならば、あなたのプロジェクトの中の画像の名前が正確にあなたがコードの中で使った名前と一致することを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re running into build issues, try pressing Command-Shift-K to clean your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがビルド問題にぶつかっているならば、コマンド-シフト-Kを押してあなたのプロジェクトを掃除してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement Edit and Delete Behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>編集および削除挙動の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement Navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement a Custom Control</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムコントロールの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement an initializer on a custom class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムクラス上でイニシャライザを実装する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement the Button Action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンアクションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicitly unwrapped optionals are optionals, but the system implicitly unwraps them for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的にアンラップされるオプショナルはオプショナルです、しかしシステムは暗黙的にそれらをあなたの代わりにアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In FoodTrackerTests.swift, you don’t need to use any of the template’s stub methods for this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerTests.swiftにおいて、あなたはテンプレートの持つスタブメソッドの何もこのレッスンのために必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, before the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、最後の波括弧（}）の前で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, below the //MARK: Properties section, add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、//MARK: Properties節の下で、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, below the //MARK: Properties section, add this structure:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、//MARK: Properties節の下で、この構造体を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, find the class line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、class行を見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Meal.swift, find the init?(name:, photo:, rating:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftにおいて、init?(name:, photo:, rating:)メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewCell.swift, find the class line, which should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewCell.swiftにおいて、class行を見つけてください、それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, before the last curly brace (}), add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、最後の波括弧（}）の前で、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the prepareForSegue(_:sender:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、prepareForSegue(_:sender:)メソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the tableView(_:canEditRowAt:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:canEditRowAt:)メソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the tableView(_:cellForRowAt:) data source method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:cellForRowAt:)データソースメソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find and uncomment the tableView(_:commit:forRowAt:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:commit:forRowAt:)メソッドを見つけてコメントを外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the numberOfSections(In:) data source method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、numberOfSections(In:)データソースメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the tableView(_:commit:forRowAt:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:commit:forRowAt:)メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the tableView(_:numberOfRowsInSection:) data source method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、tableView(_:numberOfRowsInSection:)データソースメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the unwindToMealList(sender:) action method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、unwindToMealList(sender:)アクションメソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the unwindToMealList(sender:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、unwindToMealList(sender:)メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealTableViewController.swift, find the viewDidLoad() method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, above the //MARK: Actions section, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、//MARK: Actions節の上に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the //MARK: UITextFieldDelegate section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、//MARK: UITextFieldDelegate節を見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the cancel(_:) action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、cancel(_:)アクションメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In MealViewController.swift, find the class declaration line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftにおいて、次のクラス宣言行を探してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, add the following properties to the bottom of the //MARK: Properties section:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、以下のプロパティを//MARK: Propertiesセクションのボタンに加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, after the //MARK Initialization section, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、//MARK Initializationセクションの後、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, before the last curly brace (}), add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、最後の波括弧（}）の前に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, delete the comments that come with the template implementation so you can start working with a blank slate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、ひな形実装に付いてくるコメントを削除してください、それであなたは白紙の状態で作業を始めることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the ratingButtonTapped(button:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、ratingButtonTapped(button:)メソッドを見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the setupButtons() method, and add a for-in loop around the method’s contents, like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、setupButtons()メソッドを見つけてください、for-inループをこのメソッドの内容の周りに加えてください、このように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the class declaration line:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、クラス定義行を見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, find the class declaration:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、クラス宣言を見つけてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, modify the inspectable properties as shown below:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、調査可能なプロパティを以下に示すように修正してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, navigate to the setupButtons() method, and add this code just above the for-in loop that creates the buttons:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、setupButtons()メソッドに進み、このコードをボタンを作成するfor-inループのすぐ上に加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, navigate to the setupButtons() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、setupButtons()メソッドに進んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, under the class line, add this comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、class行の下で、このコメントを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RatingControl.swift, under the initializer methods, add this comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RatingControl.swiftにおいて、そのイニシャライザメソッドの下で、このコメントを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, after the textFieldShouldReturn(_:) method, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、textFieldShouldReturn(_:)メソッドの後に、以下のメソッドを加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, delete the setDefaultLabelText(_:) action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、setDefaultLabelText(_:)アクションメソッドを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the class line, which should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、class行を見つけたください、それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the mealNameLabel outlet and delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、mealNameLabelアウトレットを見つけてそれを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the selectImageFromPhotoLibrary(_:) action method you added earlier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、あなたが定義したselectImageFromPhotoLibrary(_:)アクションメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the setDefaultLabelText action method you just added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、あなたが加えたばかりのsetDefaultLabelTextアクションメソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the textFieldDidEndEditing(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、textFieldDidEndEditing(_:)メソッドを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, find the viewDidLoad() method, which should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、viewDidLoad()メソッドを見つけてください、それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, just above the last curly brace (}), add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、最後の波括弧（}）のすぐ上に、以下を加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In ViewController.swift, right above the //MARK: Actions section, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftにおいて、//MARK: Actions部分のちょうど上に、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Start Developing iOS Apps (Swift), you learned the basics of iOS app development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このiOSアプリ開発を始めよう（Swift）において、あなたはiOSアプリ開発の基本を学びました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Auto Layout, a rule that explains where one element should be located relative to another, what size it should be, or which of two elements should shrink first when something reduces the space available for each of them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動レイアウトにおいて、ある要素が別のものと相対して位置するべきところ、どんな大きさでそれがあるべきか、または２つの要素のどちらが最初に、何かがそれらの各々のために役立てられる空間を減らすときに縮小されるべきかを明らかにするある規則。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Interface Builder, you can configure a view controller’s navigation item by editing the navigation bar in the view controller’s scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Interface Builderにおいて、あなたはビューコントローラの持つナビゲーション項目を、ナビゲーションバーをビューコントローラの持つシーンにおいて編集することで構成設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, AnyObject is a type used to describe an object that can belong to any class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、AnyObjectはどんなクラスにも属することができるオブジェクトを記述するために使われる型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you can represent the name using a String, the photo using a UIImage, and the rating using an Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたは名前をStringを使って、写真はUIImageを使って、そして格付けはIntを使って表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Xcode, a jump menu that lets you navigate directly to a specific declaration or section in a source code file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにおいて、あなたを直接にソースコードファイルの特定の宣言または部門に進ませるジャンプメニュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Xcode, a secondary editor window that appears side-by-side with your primary editor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcoceにおける、ある副次的エディタウインドウ、それはあなたの主要エディタの横に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a production app, any String that can be seen by the user (such as the text field’s placeholder text) should be localized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>製品アプリにおいて、何らかのStringで、ユーザによって見られることができるもの（例えばテキスト欄のプレースホルダテキスト）は、ローカライズされるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a storyboard, a scene represents one screen of content and typically one view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードにおいて、あるシーンは１つのコンテンツ画面と、大抵は１つのビューコントローラを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a storyboard, each scene contains views managed by that a view controller, and any items added to the controller or its views (for example, Auto Layout constraints).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードにおいて、各シーンはそのビューコントローラによって管理されるいくらかのビュー、そしてそのコントローラまたはそれのビューに加えられるあらゆる項目（例えば、様々なAuto Layout制約など）を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a storyboard, you can configure a table view to display static data (supplied in the storyboard) or dynamic data (programmatically supplied by the table view controller).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードにおいて、あなたはテーブルビューを構成設定することで静的データ（ストーリーボードの中で提供される）または動的データ（プログラケ的にテーブルビューコントローラによって提供される）を表示できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an app, the first responder is an object that is first on the line for receiving many kinds of app events, including key events, motion events, and action messages, among others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリにおいて、ファーストレスポンダは、特にキーイベント、モーションイベント、そしてアクションイベントを含めた、多くの種類のアプリイベントの受け取りの列の最初のオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an unmodified Single View Application template, the launch screen and the main interface are identical.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変更なしのSingle View Applicationテンプレートでは、起動画面とメインインターフェイスは同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In both cases, the root cause is the same.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方の場合において、根本的原因は同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, if you recall, you’ve already written some code in the viewDidLoad() method of ViewController:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際、あなたが思い出すならば、あなたはすでにいくつかのコードをViewControllerのviewDidLoad()メソッドにおいて書いています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, the table view is the controller’s content view, and fills the entire space available to the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際には、テーブルビューは、そのコントローラの持つコンテンツビューです、そしてそのシーンで利用可能な空間全体を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, there are two other indications that something might be wrong.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>事実、何か間違っているかもしれないことを指し示すものが他に２つあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, you’ve already worked with both views (labels, image views) and controls (text fields, buttons) in your interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際、あなたはすでにビュー（ラベル、イメージビュー）とコントロール（テキスト欄、ボタン）の両方をあなたのインターフェイスで扱っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, each scene has its own view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般に、各シーンはそれ自身のビュー階層を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In iOS 10 and later, you must provide a photo library usage description.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOS 10以降では、あなたはフォトライブラリ使用説明を提供しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In later lessons, you will use model objects in your app’s code to create and manage the list of meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後のレッスンにおいて、あなたはモデルオブジェクトをあなたのアプリのコードで使って、食事のリストを作成して管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In most cases, users benefit from these features without any additional work on your part.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの場合には、ユーザはこれらの機能から、あなたの受け持ちでの何らかの追加的作業なしで利益を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, many of the events generated by the user are initially routed to the first responder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、ユーザによって生み出されるイベントの多くは初めにファーストレスポンダに向かいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this if statement gets executed when you are editing an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、このif文は、あなたが既存の食事を編集しているならば実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this else statement executes when the user adds a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、このelse文はユーザが新しい食事を加える時に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In response, the system creates an application object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>応答して、システムはアプリケーションオブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the  //MARK: Private Methods section, just before the last curly brace (}), add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>//MARK: Private Methods節において、最後の波括弧（}）の直前に、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the PropertyKey structure, add these properties:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このPropertyKey構造体において、これらのプロパティを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the button.heightAnchor.constraint() method call, change 44.0 to starSize.height.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>button.heightAnchor.constraint()メソッド呼び出しにおいて、44.0をstarSize.heightに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the button.widthAnchor.constraint() method call, change 44.0 to starSize.width.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>button.widthAnchor.constraint()メソッド呼び出しにおいて、44.0をstarSize.widthに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the cancel(_:) action method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cancel(_:)アクションメソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the cancel(_:) action method, before the existing line of code, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cancel(_:)アクションメソッドにおいて、既存のコード行の前で、以下のコード加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the encode(with:) method, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encode(with:)メソッドにおいて、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the for-in declaration, change 5 to starCount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-in宣言において、5をstarCountに変えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the if statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文において、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the if statement, below the previous line of code, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文において、前のコード行の下で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the loadMeals() method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadMeals()メソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the loadSampleMeals() method, start by loading the three meal images:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loadSampleMeals()メソッドにおいて、３つの食事画像をロードすることで始めてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the prepare(for:sender:) method, add a call to the superclass’s implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>prepare(for:sender:)メソッドにおいて、スーパークラスの持つ実装への呼び出しを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the saveMeals() method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このsaveMeals()メソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the setupButtons() method, add a call to the updateButtonSelectionStates() method just above the method’s closing curly brace (}).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドにおいて、updateButtonSelectionStates()メソッドへの呼び出しをそのメソッドの閉じ波カッコ（}）のすぐ上に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the setupButtons() method, add the following lines of code to create a red button:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドにおいて、以下のコード行を加えることで赤いボタンを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the unwindToMealList(_:) action method, add the following if statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unwindToMealList(_:)アクションメソッドにおいて、以下のif文を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the updateButtonSelectionStates() method, add the following for-in loop:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>updateButtonSelectionStates()メソッドにおいて、以下のfor-inループを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the viewDidLoad() method, delete the comments and add this code after the call to super.viewDidLoad() to load the sample meal data:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoad()メソッドにおいて、コメントを削除してこのコードをsuper.viewDidLoad()への呼び出しの後に加えることで見本の食事データをロードしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, type ShowDetail in the Identifier field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、ShowDetailをIdentifier（識別子）欄にタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Assets.xcassets to view the asset catalog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Assets.xcassetsを選択してアセットカタログ（資産目録）を眺めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Add New Constraints menu, click the Add 1 Constraint button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Add New Constraintsメニューにおいて、Add 1 Constraintボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Add New Constraints menu, click the Add 3 Constraints button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Add New Constraintsメニューにおいて、Add 3 Constraintsボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Application section, select Single View Application and then click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Application」セクションにおいて、Single View Applicationをクリックして、それからNextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector , find the field labeled Return Key and select Done (scroll down if necessary).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、「Return Key」と表示のある欄を捜して「Done」を選択してください（必要なら下にスクロールしてください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, choose Add from the pop-up menu next to the System Item option.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、AddをSystem Itemオプションの隣のポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, choose Present Modally from the Kind field’s pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Present ModallyをKind欄のポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the Alignment field and select Center.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Alignment欄を見つけてCenterを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the Image field and select defaultPhoto.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Imageフィールドを見つけてdefaultPhotoを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the Interaction field and select the User Interaction Enabled checkbox.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Interaction（相互作用）欄を捜して、User Interaction Enabled（ユーザ相互作用を可能にする）チェックボックスを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Identifier and type MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesイスンペクタにおいて、Identifierとラベルをつけられる欄を見つけてMealTableViewCellとタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Image and select defaultPhoto.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Imageとラベルをつけられる欄を探してdefaultPhotoを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, find the field labeled Placeholder and type Enter meal name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Placeholderと表示される欄を見つけてEnter meal nameとタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, for System Item, select Cancel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、System Itemに対して、Cancelを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, for System Item, select Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、System Itemに対して、Saveを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, select the Auto-enable Return Key checkbox (again, scroll down if necessary).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、「Auto-enable Return Key」チェックボックスを選択してください（再び、必要なら下にスクロールしてください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, set the Spacing to 8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、Spacingを８に設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, type 8 in the Spacing field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、8をSpacing欄でタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Attributes inspector, type AddItem in the Identifier field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタにおいて、AddItemをIdentifier（識別子）欄にタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Class field, type Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Class欄において、Mealをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Class field, type RatingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Class欄において、RatingControlをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, change the Class field from ViewController to MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタにおいて、Class欄をViewControllerからMealViewControllerに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, find the Class field and select MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Identityインスペクタにおいて、Class欄を捜してMealTableViewCellを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, find the field labeled Class and select RatingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタにおいて、Classとラベルをつけられる欄を探してRatingControlを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Identity inspector, find the field labeled Class, and select MealTableViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタにおいて、Classとラベルをつけられる欄を探してMealTableViewControllerを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Intrinsic Size field, select Placeholder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intrinsic Size（固有サイズ）欄において、Placeholder（プレースホルダ）を選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, find a Bar Button Item object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、Bar Button Itemオブジェクトを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, find a Table View Controller object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、Table View Controllerオブジェクトを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type button in the filter field to find the Button object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、buttonとフィルタ欄にタイプしてButtonオブジェクトを素早く見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type image view in the filter field to find the Image View object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、image viewをフィルタ欄にタイプしてImage View（イメージビュー）オブジェクトを素早く見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type label in the filter field to find the Label object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、フィルタ欄にlabelとタイプしてラベルオブジェクトを素早く探してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type tap gesture in the filter field to find the Tap Gesture Recognizer object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、フィルタ欄にtap gestureをタイプしてTap Gesture Recognizerオブジェクトをすばやく見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Object library, type text field in the filter field to find the Text Field object quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリにおいて、フィルタ欄（選り分け用単語の入力欄）にtext fieldをタイプしてText Field（テキスト欄）オブジェクトを素早く見つけましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Pin menu, click the Add 1 Constraints button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pinメニューにおいて、Add 1 Constraints（１つの制約を追加）ボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Project navigator, drag the Meal.swift file and position it under the other Swift files, if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Projectナビゲータにおいて、Meal.swiftファイルをドラッグして、それが他のSwiftファイルの下に位置するようにしてください、もし必要ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Project navigator, reposition the MealTableViewCell.swift file under the other Swift files, if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Projectナビゲータにおいて、MealTableViewCell.swiftファイルを他のSwiftファイルの下に位置変更してください、もし必要ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Save As field, type Meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Save As欄において、Mealをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Scheme pop-up menu in the Xcode toolbar, choose iPhone 7.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeツールバーのSchemeポップアップメニューにおいて、iPhone 7を選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Size inspector, find the field labeled Row Height and type 90.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サイズインスペクタにおいて、Row Heightとラベルをつけられる欄を探して90をタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Size inspector, type 44 in the Height field and 252 in the Width field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sizeインスペクタにおいて、Height（高さ）欄に44をWidth（幅）欄に252をタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Targets section, make sure your app is selected and the tests for your app are unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Targets区画において、あなたのアプリが選択されて、あなたのアプリのためのテストは選択されないことを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Targets section, your app is selected and the tests for your app are unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Targets区画において、あなたのアプリが選択されて、あなたのアプリのためのテストは選択されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and choose New Folder from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左隅で、プラスボタン（+）をクリックしてNew Folderをポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and choose New Image Set from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左隅で、プラス（+）ボタンをクリックしてNew Image Setをポップアップメニューから選んでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and select New Folder from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左隅で、プラスボタン（+）をクリックしてNew Folderをポップアップメニューから選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the bottom left corner, click the plus (+) button and select New Image Set from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１番下左の隅で、プラス（+）ボタンをクリックしてNew Image Set（新規画像セット）をポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the code above, the indexOf(_:) method attempts to find the selected button in the array of buttons and to return the index at which it was found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上のコードにおいて、indexOf(_:)メソッドが試みるのは、選択されたボタンをボタン配列の中で見つけること、そしてそれが見つかったのはどのインデックスかを返すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the code above, you are telling the button to use the empty star image for the normal state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上のコードにおいて、あなたは空の星画像を通常状態のために使うようボタンに伝えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the code shown above, the first two lines pass a String argument, while the third line passes an Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上で示したコードにおいて、最初の２つの行はString引数を渡します、一方３番目の行はIntを渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the comment at the top of the file, also change the name from ViewController.swift to MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このファイルの最上部のコメントにおいてもまた、名前をViewController.swiftからMealViewController.swiftに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the current scene, the content view is named View, the top level view inside the View Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在のシーンにおいて、コンテンツビューは「View」、View Controller内のトップレベルビュー、と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Connection select Action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログで、Connectionに対してActionを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Connection, select Action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログで、Connectionに対して、Actionを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type mealNameLabel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れるダイアログにおいて、Nameに対して、mealNameLabelをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type nameLabel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、Nameに、nameLabelをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type nameTextField.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログで、Nameに対して、nameTextFieldをタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type photoImageView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、名前に、photoImageViewをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type ratingControl.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、名前に、ratingControlをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, for Name, type saveButton.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れたダイアログにおいて、名前に、saveButtonをタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, select a location to save your project and click Create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れるダイアログで、あなたのプロジェクトを保存する場所を選びCreateをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the dialog that appears, use the following values to name your app and choose additional options for your project:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現れるダイアログにおいて、以下の値を使ってあなたのアプリに名前をつけて、あなたのプロジェクトのための追加オプションを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the editor selector bar, which appears at the top of the assistant editor, change the assistant editor from Preview to Automatic &gt; ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタの一番上にある、エディタ選択バーにおいて、アシスタントエディタをPreviewからAutomatic &gt; ViewController.swiftに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the editor selector bar, which appears at the top of the assistant editor, switch the assistant editor from Automatic to Preview &gt; Main.storyboard (Preview).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタの最上部にある、エディタ選択バーにおいて、アシスタントエディタをAutomaticからPreview &gt; Main.storyboard（プレビュー）へ切り替えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the editor selector bar, which appears at the top of the assistant editor, switch the assistant editor from Preview to Automatic &gt; MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタの最上部にある、エディタ選択バーにおいて、アシスタントエディタをPreviewからAutomatic &gt; MealTableViewCell.swiftへ切り替えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the future, as you add more scenes, you’ll make this connection yourself in the Identity inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この先、あなたがさらにシーンを加えるたび、あなたはこの接続をあなた自身で同一性インスペクタにおいて作成することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the lesson, you’ll start making a simple user interface (UI) for the FoodTracker app and view it in the simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリのためのある単純なユーザインターフェイス（UI）の作成を始めます、そしてそれをシミュレータで観察します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the meal detail scene, select the Meal Name label, and press the Delete key to delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この食事詳細シーンにおいて、Meal Nameラベルを選択してください、そしてデリートキーを押してそれを削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the method implementation, between the curly braces ({}), add this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッド実装において、波括弧（{}）の間に、このコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the method implementation, between the curly braces ({}), add this line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのメソッド実装において、波括弧（{}）の間に、このコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the new row, make sure the Type is set to String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい列において、TypeがStringに設定されることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next lesson, you’ll add a custom control to the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のレッスンでは、あなたはあつらえのコントロールをシーンに加えることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next lesson, you’ll add code to save and load the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のレッスンでは、あなたはコードを加えて食事リストの保存とロードを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next lesson, you’ll add the ability to edit and delete meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のレッスンでは、あなたは食事を編集および削除する能力を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the outline view, select Table View Cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューにおいて、Table View Cellを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the outline view, select Table View.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューにおいて、Table Viewを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the pop-up menu next to Update Frames, choose Items of New Constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Update Framesに接するポップアップメニューで、項目New Constraintsを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the pop-up menu, scroll down and choose Privacy - Photo Library Usage Description.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポップアップメニューにおいて、下にスクロールしてPrivacy - Photo Library Usage Descriptionを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous lesson, you used the target-action pattern to link elements in your storyboard to action methods in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以前のレッスンにおいて、あなたはターゲットアクションパターンを使ってあなたのストーリーボードの中の要素をあなたのコードの中のメソッドとリンクしました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, click the ViewController.swift file once and press the Return key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、ViewController.swiftファイルを一度クリックして、リターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Assets.xcassets to view the asset catalog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Assets.xcassetsを選択してアセットカタログを眺めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Info.plist.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Info.plistを選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、Main.storyboardを選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the project navigator, select ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータにおいて、ViewController.swiftを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the rating control, each button’s accessibility label describes the value that the button sets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールでは、各ボタンの持つアクセシビリティラベルは、そのボタンが設定する値を解説します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the search field in the top-right corner, type Xcode and press the Return key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上部右隅の検索窓で、Xcodeをタイプしてリターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the welcome window, click “Create a new Xcode project” (or choose File &gt; New &gt; Project).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Welcomeウインドウにおいて、「Create a new Xcode project」をクリックしてください（または「File &gt; New &gt; Project」を選んでください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the workspace window, you may or may not see an error icon with a message that says “Signing for FoodTracker requires a development team.” This warning means you haven’t set up Xcode for iOS development yet, but don’t worry, you can complete these lessons without doing that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ワークスペースウインドウでは、あなたはエラーアイコンと「FoodTrackerのための署名は開発チームを必要とします。」というメッセージを見るかもしれないし見ないかもしれません。この警告は、あなたがXcodeをiOSのためにまだ設定し終わっていないことを意味します、しかし心配いりません、あなたはこれらのレッスンをそうすることなく完了できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the “Subclass of” field, select UIStackView.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Subclass of」欄で、UIStackViewを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the “Subclass of” field, select UITableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Subclass of」欄において、UITableViewCellを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the “Subclass of” field, select UITableViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Subclass」欄において、UITableViewControllerを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these lessons, it is assumed that you are familiar with the Swift programming language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのレッスンでは、あなたがSwiftプログラミング言語をよく知っていると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these lessons, you’ll be building a simple meal-tracking app called FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのレッスンでは、あなたは単純な食事トラッキング（追跡記録）アプリ、FoodTrackerと呼ばれるものを作っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this if statement, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このif文において、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, a test case fails if one or more of its test methods fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、あるテスト項目は、それのテストメソッドのひとつ以上が失敗するならば失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, it refers to the RatingControl object that is setting up the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、それはボタンを設定しているRatingControlオブジェクトを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, it’s set to iPhone 7 in a portrait orientation, so the canvas and the simulator are the same.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、それは縦向き方向のiPhone 7 に設定されます、それでキャンバスとシミュレータは同じになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, it’s the text field’s superview.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、それはテキスト欄の持つスーパービューです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the unarchiveObject(withFile:) method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、unarchiveObject(withFile:)メソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the Meal class’s initializer fails if you pass an empty string or a negative rating, but doesn’t fail if you pass a rating greater than 5.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、Mealクラスの持つイニシャライザは、あなたが空の文字列または負の格付けを渡すならば失敗します、しかしあなたが５より大きな格付けを渡すならば失敗しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the problem occurs when you attempt to present the image picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、問題はあなたがイメージピッカーを生じさせようと試みるとき起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the scene contains the view controller’s content view, and all of the subviews you added in Interface Builder (the stack view, label, text field, image view, and rating control).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合は、シーンはビューコントローラの持つコンテンツビュー、そしてあなたがInterface Builderの中に加えたサブビューの全て（スタックビュー、ラベル、テキスト欄、イメージビュー、そして格付けコントロール）を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the switch statement prints an error message to the console and terminates the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、switch文はエラーメッセージをコンソールに出力してアプリを終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the text field should already be selected because you just stopped dragging it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、テキスト欄はすでに選択されているはずです、なぜならあなたがそれのドラッグをちょうど止めたところだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you always want to respond to the user pressing the Return key, so just return true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、あなたはユーザがReturnキーを押すことに常に応答したいので、単にtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you are passing valid parameters, so the initializer should never fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、あなたは有効なパラメータを渡しています、それでイニシャライザは決して失敗しないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you need to set the text field’s delegate property and set the label’s text property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、あなたはテキスト欄のdelegateプロパティを設定する、そしてラベルのtextプロパティを設定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, your initializer returns an optional Meal? object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、あなたのイニシャライザはオプショナルのMeal?オブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you’ll make your ViewController instance the text field’s delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、あなたはあなたのViewControllerインスタンスをテキスト欄のデリゲートにするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this context, the term nearest neighbor means the boundary of the closest user interface element, which can be the superview, another user interface element, or a margin.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文脈では、最も近い隣りという語は、隣接したユーザインターフェイス要素、それはスーパービュー、別のユーザインターフェイス要素、または余白であるかもしれません、の境界線を意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this custom subclass, you can now define a property to store a list of Meal objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このカスタムサブクラスにおいて、あなたは現在ひとつのプロパティを定義してMealオブジェクトのリストを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, only the XCTAssertNil(largeRatingMeal) test actually failed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、XCTAssertNil(largeRatingMeal)テストだけが実際に失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the #selector(RatingControl.ratingButtonTapped(_:)) expression returns the selector for your ratingButtonTapped(_:) action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、#selector(RatingControl.ratingButtonTapped(_:))式はあなたのratingButtonTapped(_:)アクションメソッドに対するセレクタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson it is assumed that you have three different images named meal1, meal2, and meal3.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンではあなたがmeal1、meal2、そしてmeal3と名前を付けられる３つの異なる画像を持つと仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, use the iPhone 7 option.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、iPhone 7オプションを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you added support to edit and delete meals from the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは食事リストから食事の編集や削除をするためのサポートを加えました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you added the ability to save and load the app’s data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはアプリのデータを保存してロードする能力を加えました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you built a custom table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはカスタムのテーブルビューセルを構築しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you built a model class to hold your app’s data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはあるモデルクラスを構築してあなたのアプリの持つデータを保持しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you create a second, table view-based scene, that lists the user’s meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは２番目の、テーブルビューに基づくシーン、ユーザの食事を一覧にするものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you focus on adding behavior that allows the user to edit and delete meals in the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは挙動を追加することに集中します、それはユーザにFoodTrackerアプリにおいて食事の編集と削除を可能にするものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you learned how to build a custom control that can be displayed in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはカスタムコントロールをビルドする方法を学びました、それはInterface Builderで表示されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you learned how to push scenes onto the navigation stack, and how to present views modally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはシーンをナビゲーションの上へとプッシュする方法、そしてビューをモーダルに表す方法を学びました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you save a meal list across FoodTracker app sessions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリのセッションをまたいで食事リストを保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you use navigation controllers and segues to create the navigation flow of the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはナビゲーションコントローラとセグエを使って、FoodTrackerアプリのナビゲーションの流れを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you won’t be using any custom app delegate code, so you don’t have to make any changes to the AppDelegate.swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは何らあつらえのアプリデリゲートコードを使用しません、それであなたはいかなる変更もAppDelegate.swiftファイルにする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll connect the basic user interface (UI) of the FoodTracker app to code and define some actions a user can perform in that UI.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリの基本的なユーザインターフェイス (UI)をコードと結びつけて、ユーザ（利用者）がそのUIにおいて実行できるいくつかのアクションを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll continue to work on the user interface (UI) for the meal scene in the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはユーザインターフェイス (UI)に関する作業をFoodTrackerアプリの食事シーンのために続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll define and test a data model for the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはFoodTrackerアプリのためのデータモデルを定義してテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll enable the editing of existing meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンにおいて、あなたは既存の食事の編集を可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ll implement a rating control for the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたは格付けコントロールをFoodTrackerアプリに実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ve familiarized yourself with the contents of an Xcode project, and with many of the tools used to design and run an iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンにおいて、あなたはあなた自身をXcodeプロジェクトのコンテンツに、そしてiOSアプリを設計して実行するのに使われる多くのツールに親しませました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ve learned about the view controller life cycle methods, and used them to configure your view controller’s content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはいくつかのビューコントローラライフサイクルメソッドについて学びました、そしてそれらを使ってあなたのビューコントローラの持つ内容を構成しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this lesson, you’ve used the assistant editor to add outlets and actions to your source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンでは、あなたはアシスタントエディタを使ってアウトレットとアクションをあなたのソースコードに加えました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this method, add the following code to resign the text field’s first-responder status, and a comment to describe what the code does:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、以下のコードをテキスト欄のファーストレンポンダ状態を破棄するために、そしてひとつのコメントをこのコードが何をするか説明するために加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this method, add the following line of code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、以下のコード行を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this method, you’ll write the logic to add the new meal (that’s passed from MealViewController, the source view controller) to the meal list data and add a new row to the table view in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドにおいて、あなたはロジックを書いて、新しい食事（それはMealViewController、ソースビューコントローラから渡されます）を食事リストデータに加えて、食事リストシーンにおいて新しい行をテーブルビューに加えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this pattern, models keep track of your app’s data, views display your user interface and make up the content of an app, and controllers manage your views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパターン（類型）において、モデルはあなたのアプリのデータの最新状態を把握し、ビューはあなたのユーザインターフェイスを表示してアプリのコンテンツを作り上げ、そしてコントローラはあなたのビューを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this section, add another UITextFieldDelegate method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この節において、もう１つのUITextFieldDelegateメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this step you’ll implement the behavior in the Meal class to save and load the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この段階においてあなたはMealクラスにおいて食事を保存してロードする（読み込む）挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In those cases, consider using the delegate pattern.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの場合には、デリゲートパターンを使うことを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your case, you’ll take the selected image and display it in your image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの場合では、あなたは選択された画像を取得してそれをあなたのイメージビューに表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your case, you’ll take the text that’s in the text field and use it to change the value of your label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの場合には、あなたはテキスト欄の中にあるテキストをとってそれをあなたのラベルの値を変更するために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, find the outline view toggle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、アウトラインビュー切替ボタンを見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, open the outline view and expand the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、アウトラインビューを開いてユーティリティ区画を展開してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、Cancelボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the Save button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、Saveボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the Set Default Label Text button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードにおいて、Set Default Label Textボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the image view in the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、イメージビューをテーブルビューセルにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、イメージビューを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the label in the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、ラベルをテーブルビューセルにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、ラベルを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the rating control in the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、格付けコントロールをテーブルビューセルにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the text field in the meal scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、テキスト欄を食事シーンにおいて選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, select the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードにおいて、テキスト欄を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your storyboard, use the Object library to find a Horizontal Stack View object, and drag one into your storyboard scene so that it’s in the stack view below the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリボードにおいて、オブジェクトライブラリを使うことで、Horizontal Stack Viewオブジェクトを見つけて、それをあなたのストーリーボードシーンへとドラッグしてそれがスタックビューの中でイメージビューの下になるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Include UI Tests: Unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIテストを含む：非選択。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Include Unit Tests: Selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストを含む：選択。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initially, the simulator displays your app’s launch screen, and then it transitions to your app’s main interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初めに、シミュレータはあなたのアプリの起動画面を表示します、それからそれはあなたのアプリのメインインターフェイスへ移行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the for-in loop, add the following code just after the line that sets the button’s isSelected property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループの内側で、以下のコードを、ボタンのisSelectedプロパティを設定した行の直ぐ下に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the for-in loop, just after the constraints, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループの内側で、制約のすぐ下に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of creating new cells and deleting old cells as the user scrolls, the table tries to reuse the cells when possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがスクロールするにつれて新しいセルを作成して古いセルを削除する代わりに、テーブルは可能な場合にはセルを再利用しようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of creating one button, the loop will create five.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのボタンを作成するのではなく、このループは５つ作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of deleting the existing segue and creating a new one, simply change the segue’s style in the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のセグエを削除して新しいものを作成するのではなく、単にそのセグエの形式をAttributesインスペクタにおいて変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of the meal detail scene with its text field, image view, and rating control, you should now see an empty table view—a screen with a number of horizontal dividers to separate it into rows, but with no content in each row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事詳細シーンとそれが持つそれのテキスト欄、イメージビュー、そして格付けコントロールではなく、あなたは今では空のテーブルビューを見るはずです—それは、画面をいくつかの水平仕切りで行へとそれを分けています、しかし各行は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, it adds a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうしないで、それは新しい食事を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, it is lazily created the first time the system or any code accesses the controller’s view property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうではなくて、それは遅延に、システムまたは何らかのコードがコントローラの持つviewプロパティにアクセスする最初の時に、作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, replace it with a series of checks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、それを一連の確認と入れ替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, tapping anywhere in the cell should select the cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、セルのどこか他をタップしてそのセルを選択すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface Builder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インターフェイスビルダー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface Builder can do more than just display your custom view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Interface Builderは、あなたのカスタムビューを表示するだけでなくもっと多くを行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface Builder does not know anything about the contents of your rating control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Interface Builderは、あなたの格付けコントロールの内容について何も知りません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interface Builder supports the inspection of basic types (and their corresponding optionals), including: Booleans, numbers, strings, as well as CGRect, CGSize, CGPoint, and UIColor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Interface Builderは、基本的な型（およびそれらの関連するオプショナル）の調査をサポートします、含むのは：ブール、数、文字列、それだけでなくCGRect、CGSize、CGPoint、そしてUIColor。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It becomes red when it is selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが赤くなったらそれが選択されたということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It creates the entry point to your app and a run loop that delivers input events to your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたのアプリに対するエントリポイントと、あなたのアプリに入力イベントを送り届ける実行ループを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It defines your AppDelegate class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはあなたのAppDelegateクラスを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It includes both a table view and the controller that manages the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、テーブルビューと、テーブルビューを管理するコントローラの両方を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is very common to make a view controller the delegate for objects that it manages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一番ありふれているのは、ビューコントローラをそれが管理するオブジェクトのためのデリゲートにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is where all of your app content is drawn.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはあなたのアプリのコンテンツの全てが描画されるところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It lets you edit the properties of an object in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはあなたにあなたのストーリーボードのオブジェクトのプロパティを編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It lets you edit the size and position of an object in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたにあなたのストーリーボードの中のオブジェクトの大きさと位置を編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It makes sense to have the meal list be the first thing users see when they launch your app, so tell Xcode that’s your intent by setting the table view controller as the first scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストがあなたのアプリを起動した時にユーザが見る最初のものであるのは道理にかなっています、それでXcodeにそれがあなたの意向であることを、テーブルビューコントローラを最初のシーンとして設定することによって伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may also contain an edited version of that image, if one exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはまたその画像の編集されたバージョンを含むかもしれません、それが存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may take a few moments to start up the first time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは初めての始動では少し時間がかかるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It needs to save its data by assigning the value of each property to a particular key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、それのデータの保存を、各プロパティの値を特有のキーに割り当てることによって行う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It organizes all the files and resources that go into creating an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、アプリの作成に従事するすべてのファイルとリソースを組織化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It provides editors for both your code and your user interfaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたのコードとあなたのユーザインターフェイス両方のためのエディタを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It replaces the old meal object with the new, edited meal object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、古いmealオブジェクトを新しいもので置き換えて、mealオブジェクトを編集します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It safely unwraps the optional returned by the dictionary and casts it as a UIImage object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはディクショナリによって返されるオプショナルを安全にアンラップして、それをUIImageオブジェクトとしてキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It should build without errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはエラーなしてビルドするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It should build without issues.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは問題なくビルドするはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It shows all the available unwind action methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはすべての利用可能な巻き戻しアクションメソッドを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then adds this button to the left side of the navigation bar in the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそれからこのボタンを食事リストシーンにおいてナビゲーションバーの左側に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then executes an appropriate block of code, based on the first pattern that matches successfully.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそれから、成功裏にマッチする最初のパターンに基づいて、適切なコードのブロックを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It then loads the data by looking up the information associated with that key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそれから、データのロードを、そのキーに結びついた情報を検索することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It uses the constant Meal.ArchiveURL that you defined in the Meal class to identify where to save the information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、定数Meal.ArchiveURLを使います、それはあなたがMealクラスにおいて定義した情報を保存するところを識別するためのものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’ll be a good way to test that the text field is taking the user input and processing it appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がユーザの入力を受け取っていることと適切にそれを処理していることをテストするためにこれは良い方法となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s best to give your test cases descriptive names.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたのテストケースに説明的な名前を与えるのに最良です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s good to understand how the elements you’ve added are actually arranged in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが加えた要素がどのように実際にシーンに配置されたかを理解するのは良いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to understand a template’s uses before you extend it to make your own app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるひな形の用途を、独自アプリ作成のためにあなたがそれを拡張する前に理解することは大切です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to understand the relationship that a storyboard has to the code you write.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>大切なのは、この関係を理解することです、それはストーリーボードがあなたが書くコードに対して持つ関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s important to understand when the system calls these methods, so you can set up or tear down the views you’re displaying at the appropriate step in the process—something you’ll need to do later in the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要なことは、システムがそれらのメソッドをいつ呼び出すか理解することです、そうすればあなたはあなたが表示しているビューの準備や解体がこの一連の過程の適切な段階でできます—それはあなたが後にこのレッスンでする必要があることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s most efficient for table views to ask for only the cells for rows that are being displayed, and that’s what tableView(_:cellForRowAt:) allows the table view to do.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューにとって最も効率が良いのは、表示されている行のためのセルだけを要求することです、そしてそれはtableView(_:cellForRowAt:)がテーブルビューに可能にすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s time to build a basic interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本インターフェイスを作る時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Jump Right In</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すぐ始めよう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just above the // Add the button to the stack comment, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// Add the button to the stackコメントのすぐ上に、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just implement the ones you need to get the behaviors you desire.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ただあなたが必要とするものだけを実装して、あなたが望む挙動を得てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just log a simple debug message to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単に簡単なデバッグメッセージをコンソールに記録してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just use the menu item in the next step to create the project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単にそのメニュー項目を次のステップでプロジェクトを作成するのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Language: Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言語：Swift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Later, you’ll create an action to reset the label text to a default value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で、あなたは、ラベルテキストを省略時の値に設定し直す、あるアクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Later, you’ll link these buttons to actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で、あなたはこれらのボタンをアクションと結び付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Later, you’ll use this identifier to identify the segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で、あなたはこの識別子をセグエを識別するのに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Layout bugs occur when the system resizes a view so that it’s either larger or smaller than you anticipate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レイアウトの欠陥は、システムがあるビューの大きさを変更するときに現れます、それゆえそれはあなたが予想するより大きいか小さいかのどちらかになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Layout guides are visible only when you drag or resize objects next to them; they disappear when you let go of the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レイアウトガイドは、あなたがオブジェクトをドラッグやリサイズするときにのみ見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learning Objectives</seg>
      </tuv>
      <tuv lang="JA">
        <seg>学習する目標</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave that as is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはそのままにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave the rest of the options as they are, and click Connect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りのオプションはそれらのままにしておき、Connectをクリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave the rest of the options as they are.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りのオプションはそれらのままにしておきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave these defaults as they are, and click Create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの初期値はそれらのままにしておきます、そしてCreateをクリックします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s get started!</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さあ始めましょう！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like other view objects, it must be added as a subview to an existing scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のビューオブジェクトのように、それはサブビューとして既存のシーンに加えられなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like the print() function, the unified logging system lets you send messages to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print()関数のように、統合ログシステムはあなたにメッセージをコンソールへと送らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Load Initial Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期データのロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Locate the setupButtons() method, and make the following changes:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドの位置を突き止めて、以下の変更をしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Log messages to the console to indicate the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メッセージをコンソールに記録して結果を示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Look at the outline view to see which user interface elements have been added to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビュー（外観図）で見て、どんなユーザインターフェイス要素があなたのシーンに加えられたか確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MVC is central to a good design for any iOS app, and so far, the FoodTracker app has been built along MVC principles.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MVCは、iOSアプリのための良い設計として中心的なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make a class conform to a protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスをプロトコルに準拠させる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the Custom checkbox next to this field is selected:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この欄の隣のCustomチェックボックスが選択されることを確かめてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the Language option is set to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>LanguageオプションがSwiftに設定されていることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the button is added, regardless of which initializer is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンが加えられることを確認してください、どのイニシャライザが呼ばれるかに構わずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the lines in the for-in loop are indented properly by selecting all of them and pressing Control-I.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループの中の行が、それらの全てを選択してコントロール-Iを押すことによってふさわしく字下げされることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the lines in the else clause are indented properly by selecting all of them and pressing Control-I.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節の中の行が適切に字下げされることをそれらのすべてを選択してコントロール-Iを押すことによって確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the names of the images in your project match the names you write in this code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプロジェクトにおける画像の名前があなたがこのコードに書いた名前と合致することを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the project navigator is open in the navigator area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータ（案内機能）がナビゲータ区画で開いていることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the text field is still selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄がまだ選択されていることを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the “Also create XIB file” option is unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Also create XIB file」オプションが選択されないことを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure this line of code is inside of the outer if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行がその外側のif文の内側にあるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure you select the iPhone 7 Simulator, not an iOS device.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが、iOSデバイスではなく、iPhone 7シミュレータを選択するのを確かめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Making sure your layout is robust and extensible from the start ensures that you have a solid foundation to build upon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのレイアウトががっしりして拡張可能であるのをその始まりから確かにすることは、あなたがその上に構築するための強固な基盤を持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many UIView subclasses are highly specialized in appearance and behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くのUIViewサブクラスは、外観と挙動において高度に特殊化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many views and controls have transparent backgrounds, making it difficult to see their actual size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くのビューとコントロールは、透明な背景を持ち、それがそれらの実際の大きさを知るのを難しくしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Model-View-Controller (MVC)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モデル-ビュー-コントローラ（MVC）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most of these templates have preconfigured interface and source code files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのひな形のほとんどは、あらかじめ構成されたインターフェイスとソースコード・ファイルを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Navigate to the updateButtonSelectionStates() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>updateButtonSelectionStates()メソッドに進んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Navigation bars get their title from the view controller at the top of the navigation stack—they don’t have a title themselves.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらナビゲーションバーはそれらのタイトルを、ナビゲーションスタックの最上部でのビューコントローラから得ます — それらは自身ではタイトルを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>New document that provides a hands-on introduction to iOS app development using Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実践入門書をSwift使用のiOSアプリ開発に提供する新しい文書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next lesson, you’ll add the ability to navigate between the table and the meal view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のレッスンでは、あなたはテーブルと食事ビューの間を進んでいく能力を加えることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, add a label (UILabel) at the top of the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、ラベル（UILabel）をこのシーンの一番上に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, configure the navigation bar to add a title to this scene as well as two buttons, Cancel and Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、ナビゲーションバーを構成設定して、このシーンにタイトルを、それだけでなく２つのボタン、CancelとSaveを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, find the field labeled Interaction and deselect the User Interaction Enabled checkbox.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、Interactionと名前を付けられるフィールドを探して、User Interaction Enabledチェックボックスを選択解除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, the code above sets the filled image for the selected state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、上のコードは塗りつぶされた画像を選択済状態に対して設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, the code removes the button from the stack view entirely.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、コードはボタンをスタックビューから完全に削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, write the code to set the appropriate image for a button at the right time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、コードを書いて適切な画像をボタンに対して正しいときに設定するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you calculate the value based on the control’s rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは値をコントロールの持つ格付けに基づいて計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you need a persistent path on the file system where data will be saved and loaded, so you know where to look for it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたはファイルシステム上の永続パス、そこにおいてデータ化保存されロードされるところを必要とします、それであなたはどこでそれを捜すかがわかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you need to add a few sample images to your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたが必要とするのは、いくつかの見本画像をあなたのプロジェクトに加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you need to add buttons to your view to allow the user to select a rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたが必要とするのは、ボタンをあなたのビューに加えてユーザが格付けを選べるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you will design and connect the app’s data model.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたはアプリのデータモデルの設計および接続をすることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll add a button to this navigation bar to transition to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは、あるボタンをこのナビゲーションバーに加えて、食事詳細シーンに場面転換するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll add images of an empty, filled, and highlighted star to the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたは空の、塗りつぶされた、そして強調された星の画像をボタンに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, you’ll give users the ability to delete a meal from the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、あなたは食事リストからある食事を削除する能力をユーザに与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that because you’re not using Interface Builder, you don’t need to define your action method with the IBAction attribute; you just define the action like any other method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意することは、あなたがインターフェイスビルダーを使っていないことです、あなたがしなくていもいいのは、あなたのアクションメソッドをIBAction属性とともに定義することです；あなたは単にこのアクションをあらゆる 他のメソッドと同じように定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the assets catalog is located in the app’s main bundle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログはアプリの持つメインバンドルの中にロードされることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the code uses the @testable attribute when importing your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意してください、コードは@testable属性をあなたのアプリをインポートするときに使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the window property is an optional, which means it may have no value (be nil) at some point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>windowプロパティがオプショナルであることに注意してください、そのことは、それがある時点で値を持たない（nil）かもしれないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this causes the app to terminate if the variable’s value has not yet been set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その変数の値がまだ設定されていないならばこれはアプリの終了を引き起こすことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this still does not dismiss the scene when the user is editing a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意してください、これはまだ、ユーザが食事を編集している時にシーンを退去させません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this won’t save the model data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意してください、これはモデルデータを保存しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, clicking any of the buttons at this point should still call the ratingButtonTapped(button:) method and log the message to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意してください、何らかのボタンをこの時点でクリックすることはまだratingButtonTapped(button:)メソッドを呼び出さず、コンソールにメッセージを記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, the compiler should complain with an error stating, “Only failable initializers can return ‘nil’.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意してください、コンパイラはエラー、「Only failable initializers can return ‘nil’」を公表して抗議します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: At this point, you may see an Xcode warning related to the fact that there’s no way to reach the View Controller scene in the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：この時点で、あなたはView Controllerシーンに到達する方法がアプリには無いという事実に関連してXcodeが警告するのを見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: Unlike when you pushed a scene onto the navigation stack in the last lesson, the system does not automatically provide a back button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：あなたが最後のレッスンにおいてシーンをナビゲータースタック上へとプッシュした時と違い、システムは自動的に戻るボタンを提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice how the stack view lays out the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにスタックビューがボタンを配置するかにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice how the text field grows and shrinks to the appropriate size depending on the device’s orientation and screen size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにテキスト欄が伸びたり縮んだりしてデバイスの方向や画面サイズ次第で適切な大きさになるかに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that Xcode automatically opens the Test navigator on the left, and highlights the test that failed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeが自動的にTestナビゲータを左で開いて、失敗したテストを強調することに目を留めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the canvas now correctly sizes and places your RatingControl view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスが今では正確にあなたのRatingControlビューの大きさと場所を決めることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that you didn’t have to specify the type of Default Text, because Swift’s type inference can see that you’re assigning to something of type String and can infer the type correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意することは、あなたが「Default Text」の型を指定する必要がなかったことです、なぜならSwiftの型推論はあなたが型Stringの何かを割り当てているのを知ることができ、そして型を正確に推測できるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice the nil coalescing operator (??) in the name line.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子（??）をname行において注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice there’s an Edit button on the left of the table view’s navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editボタンがテーブルビューのナビケーションバーの左にあることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now add a test case where the Meal class’s initialization should fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあるテスト項目を加えてください、そこではMealクラスの初期化が失敗するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now add a test that will fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は失敗するテストを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now add tests to the test case that calls the initializer with invalid parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幾つかのテストをこのテスト項目に加えます、それはイニシャライザを無効なパラメータで呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now call this method from both initialization methods, as shown below:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にこのメソッドを両方の初期化メソッドから呼び出してください、下で示すように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it’s time to create another scene that shows the entire list of meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今やもう一つのシーンを作成する時です、それは食事のリスト全体を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it’s time to think about what pieces of information the RatingControl class needs to have in order to represent a rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今やRatingControlクラスが格付けを表すために持つ必要がある情報の部品は何かについて考える時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that Meal is a subclass of NSObject, the Meal class’s initializer must call one of the NSObject class’s designated initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealがNSObjectのサブクラスである今、MealクラスのイニシャライザはNSObjectクラスの指定イニシャライザのうちの１つを呼び出さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that meals are saved at the appropriate times, make sure that meals get loaded at the appropriate time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今や食事は適切な時に保存されるので、食事が適切な時にロードされるのを確実なものにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that the FoodTracker app is implementing more advanced behavior and a different user interface than in the previous lessons, you’ll want to remove the pieces you don’t need.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではFoodTrackerアプリは以前のレッスンに比べてより進んだ挙動と異なるユーザインターフェイスを実装しています、あなたは必要としない部分を取り除きたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you can save and load an individual meal, you need to save and load the meal list whenever a user adds, edits, or removes a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがここの食事を保存してロード（読み込み）できる今、あなたは、ユーザが食事を追加、編集、削除するたびに、食事リストを保存したりロードする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you have the logic implemented, open MealViewController.swift and make sure the user interface (UI) updates correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがロジックを実装した今では、あなたが必要とするのはMealViewController.swiftを開いて、ユーザインターフェイス (UI)が正しく更新されるよう手配することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now when you click the Add button (+) and click Cancel instead of Save, you should navigate back to the meal list without adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではあなたがAddボタン（+）をクリックしてCancelボタンをSaveボタンの代わりにクリックした時、あなたは新しい食事を追加することなく食事リストに導かれて戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now when you click the Add button (+), create a new meal, and click Save, you should see the new meal in your meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではあなたがAddボタン（+）をクリックして、新しい食事が作成され、そしてSaveをクリックする時、あなたは新しい食事をあなたの食事リストの中に見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now when you click the Add button (+), the Save button is disabled until you enter a valid (nonempty) meal name and dismiss the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今ではあなたがAddボタン（+）をクリックする時、Saveボタンはあなたが有効な（空でない）食事名を入力してキーボードを片付けるまで使用不能にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you need to create the actual unwind segue to trigger this action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあなたが必要とするのは、このアクションメソッドを引き起こす、実際の巻き戻しセグエを作成することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you need to display this data in the user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にあなたが必要とするのは、このデータをユーザインターフェイスに表示することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you need to use these values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度はあなたはこれらの値を使うことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now you’ll create a data model to store the information that the meal scene needs to display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今あなたはあるデータモデルを作成して、食事シーンが表示するために必要とする情報を格納しようとしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, add a button (UIButton) to the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、ボタン（UIButton）をシーンに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, connect that gesture recognizer to an action method in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、このジェスチャリコグナイザをあなたのコードのアクションメソッドに接続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, connect the label to your code in the same way you connected the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたがテキスト欄を接続したのと同じ方法でラベルをあなたのコードにつないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, implement a method to load meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、食事をロードするメソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, open your storyboard again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、再びあなたのストーリーボードを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, remove the action method that corresponds with the button you deleted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたが削除したボタンに対応するアクションメソッドを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, the buttons should be laid out as expected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今では、ボタンは期待されるように配置されるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, use the meal object to configure your cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、食事オブジェクトを使ってあなたのセルを構成設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, when users tap the Save button, they navigate back to the meal list scene, during which process the unwindToMealList(sender:) action method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今では、ユーザがSaveボタンをタップする時、彼らは食事シーンリストへ導かれて戻ります、その処理の間にunwindToMealList(sender:)アクションメソッドが呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, you need to implement the functionality to change the image in this image view at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在、あなたが必要とするのは、実行時にイメージビュー内の画像を変更する機能性を実装することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, you’ll add the meal list title and a button (to add additional meals) to the navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたは食事リストタイトルとボタンを（追加の食事を加えるために）ナビゲーションバーに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Object library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, you’ll need to make some modifications both to the scene’s appearance and its behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もちろん、あなたは幾つかの修正を、シーンの持つ外観とそれの挙動の両方にする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Older APIs used selectors to dynamically invoke methods at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>古いAPIは、実行時に動的にメソッドを発動するためにセレクタを使いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, select the table view cell in the meal list (Your Meals) scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、テーブルビューセルを食事リスト（Your Meals）シーンにおいて選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, the icon connecting the controllers is the root view controller relationship.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、コントローラ同士を接続しているアイコンは、ルートビューコントローラ関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, click the Embed In Stack button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの右下で、Embed In Stackボタンをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, open the Add New Constraints menu again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの１番下右で、Add New Constraintsメニューをふたたび開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, open the Add New Constraints menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの１番下右で、Add New Constraintsメニューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the bottom right of the canvas, open the Pin menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの１番下右で、Pin（固定）メニューを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, Control-drag from the Save button to the Exit item at the top of the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、Saveボタンから食事詳細シーン上部のExit項目までコントロール-ドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, select the Add button (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、追加ボタン（+）を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the canvas, select the newly added segue (the segue that runs directly from the meal list (Your Meals) scene to the meal detail (New Meal) scene).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上で、新しく追加されたセグエを選択してください（食事リスト（Your Meals）シーンから食事詳細（New Meal）シーンまで直接に駆けつけるセグエ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, the table view controller is a full scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の見方をすれば、テーブルビューコントローラは１つの完全なシーンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, the top of the stack is constrained relative to the scene’s top layout guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の見方をすれば、スタックの上部はシーンのもつ上部レイアウトガイドに関係して制約されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the empty star image you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが加えようと思う空の星の画像を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the filled-in star image you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが加えようと思う塗りつぶされた星の画像を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the image you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが加えたい画像を選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On your computer, select the images you want to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコンピュータ上で、あなたが追加したい画像を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the build completes, the storyboard shows a live view of your rating control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦ビルドが完了したならば、ストーリーボードはあなたの格付けコントロールのライブビューを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the rating is set, you need some way to update the button’s appearance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦格付けが設定されたならば、あなたはボタンの外観を更新するための何らかの方法を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you have the button’s index (in this case a value from 0 to 4), you add 1 to the index to calculate the selected rating (giving you a value from 1 to 5).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦あなたがボタンのインデックスを持つならば（この場合には０から４までの値）、あなたは１をインデックスに加えて選択された格付けを計算します（１から５までの値をあなたに与えます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One affects the currently selected view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つは、現在選択されたビューに効果を及ぼします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the easiest ways to define your layout is using a stack view (UIStackView).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのレイアウトを定義する最も簡単な方法の１つは、スタックビュー（UIStackView）を使うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the primary initializers for a class; a convenience initializer within a class must ultimately call through to a designated initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスの主要イニシャライザの１つ；あるクラス内部の便宜イニシャライザは、最後には指定イニシャライザを呼ぶことに至らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open FoodTrackerTests.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerTests.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Main.storyboardを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Meal.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Meal.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open MealTableViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealTableViewController.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealViewController.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Camera Roll, and click one of the images you added to the simulator to select it and set it as the image in the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Camera Rollを開いて、あなたがシミュレータへ加えた画像の１つをクリックすることでそれを選択して、それをイメージビューの中の画像として設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Xcode from the /Applications directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ApplicationsディレクトリからXcodeを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open Your Storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open and switch between files in a project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクト内のいくつかのファイルを開いてその間で切り替える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Attributes inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタ を開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリをユーティリティ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Attributes inspector , and set the Spacing attribute to 8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタ を開いて、Spacing属性を8に設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the App Store app on your Mac (by default it’s in the Dock).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>App StoreアプリをあなたのMacで開きます（初期状態でそれはDockにあります）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the FoodTrackerTests folder in the project navigator by clicking the disclosure triangle next to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerフォルダをプロジェクトナビゲータにおいてそれの隣の開示三角形をクリックすることで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Identity inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Identityインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library (Choose View &gt; Utilities &gt; Show Object Library).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objectライブラリを開いてください（View &gt; Utilities &gt; Show Object Libraryを選択してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Object library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the Size inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sizeインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータとユーティリティ区画をXcodeツールパーのNavigatorとUtilitiesボタンをクリックすることで開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard, Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボード、Main.storyboardを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard and look at the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開いて食事詳細シーンを見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard, Main.storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボード、Main.storyboardを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Open your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionals can either contain a valid value or nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルは、有効な値またはnilのどちらかを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Organization Identifier: Your organization identifier, if you have one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組織識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Organization Name: The name of your organization or your own name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組織名：あなたの組織の名前またはあなた自身の名前。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other templates have more complex behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のひな形は、もっと複雑なふるまいをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Others, such as view controllers and gesture recognizers, define the behavior of your app but don’t appear onscreen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のもの、例えばビューコントローラやジェスチャリコグナイザ（ジェスチャー認識、身ぶり認識）は、あなたのアプリの挙動を定義しますが画面上には現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, it assigns a new Meal object to the the meal variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ以外では、それは新しいMealオブジェクトをmeal変数へ割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the isSelected property is set to false, and the button shows the empty star image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ以外では、isSelectedプロパティはfalseに設定され、ボタンは空の星画像を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, you set the rating to the selected rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、あなたはratingを選択された格付けへ設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, your Apple ID is assigned to a personal team that you can use to launch apps on devices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、あなたのApple IDはある個人チームへ割り当てられて、それはあなたがデバイス上でアプリを起動するのに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outlets let you refer to your interface elements in code, but you still need a way to respond whenever the user interacts with the elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレットは、あなたにコードにおいてあなたのインターフェイス要素を参照させます、しかしまだあなたにはユーザがそれら要素と相互作用するたびに応答する方法が必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Outside of the Meal class, you’ll access the path using the syntax Meal.ArchiveURL.path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealクラスの外側で、あなたはパスに構文Meal.ArchiveURL.pathを使ってアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Part of the Xcode workspace window that displays all the files in your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeワークスペースウインドウの一部、あなたのプロジェクトの全てのファイルを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Part of the Xcode workspace window that shows a list of objects that can be added to a storyboard, including each object’s name, description, and visual representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeワークスペースウインドウの一部、それは、ストーリーボードに加えることができるオブジェクトのリストを、各オブジェクトの名前、説明、そして視覚的な表現を含めて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Part of the Xcode toolbar that displays messages about the build process and other information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeツールバーの一部、ビルド過程や他の情報についてのメッセージを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass data between view controllers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データをビューコントローラ間で渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass data between view controllers using the prepare(for:sender:) method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データをビューコントローラ間でprepare(for:sender:)メソッドを使って渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing true to the animated parameter animates the presentation of the image picker controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueをanimatedパラメータに渡すと、イメージピッカーコントローラの実演を動画にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pay careful attention to the exclamation point at the end of the type declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型宣言の終わりの感嘆符をおろそかにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform an unwind segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエを実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Persist Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データ永続</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prepare the Meal Detail Scene for Navigation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事詳細シーンをナビゲーションのために整える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prerequisites</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前もって必要なもの</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Present scenes modally when they represent a task that the user must either complete or cancel before continuing (for example, adding a new meal).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらが１つの作業を表して、続きをする前にユーザが完了またはキャンセルしなければならないものである場合には（例えば、新しい食事の追加など）、それらシーンをモーダルに提示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Present scenes using a navigation controller when the user is navigating through hierarchical data (for example, selecting a meal from a list of meals).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが階層的なデータのあちこちを閲覧している場合には（例えば、食事リストからある食事を選択するなど）、シーンをナビゲータコントローラを使って提示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new cell height in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押して新しいセルの高さをあなたのストーリーボードにおいて表示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new placeholder text in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押して新しいプレースホルダテキストをテキスト欄において表示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new text in the button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押してボタンの新しいテキストを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return to display the new text in the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンを押して新しいテキストをラベルにおいて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リターンキーを押します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Press the Return key when you are done editing the description string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Returnキーを、あなたが説明文字列の編集を終えたならば押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preview Your Interface</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのインターフェースのプレビュー（下見）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preview a storyboard UI using the Assistant editor’s Preview mode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードUIを「Assistant」エディタの「プレビュー」モードを使ってプレビュー（下見）する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preview your app periodically to check that everything is looking the way you expect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリを定期的にプレビューして、その全てがあなたが求める状態に見えることを確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private methods can only be called by code within the declaring class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プライベートメソッドは、宣言しているクラス内のコードによってのみ呼び出されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Process User Input</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザ入力処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Process user input from a text field and display the result in the UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄からのユーザ入力の処理とUIでのその結果の表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Product Name: FoodTracker</seg>
      </tuv>
      <tuv lang="JA">
        <seg>製品名：FoodTracker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Property observers are called every time a property’s value is set, and can be used to perform work immediately before or after the value changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバは、あるプロパティの値が設定される時すべてに呼ばれます、そしてその値が変化する直前または直後に作業を実行するために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Providing a placeholder size gives the image a temporary intrinsic content size that you can use while designing your user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプレースホルダサイズを提供することは、その画像に一時的な固有コンテンツサイズを与えます、それはあなたがあなたのユーザインターフェイスを設計している間に使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Push navigation is designed for a drill-down interface, where you’re providing more information about whatever the user selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プッシュナビゲーションが設計されるのは、ドリルダウンのインターフェイスに対してです—そこではあなたはユーザが選択したことが何であれもっと多くの情報を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Quit the simulator by choosing Simulator &gt; Quit Simulator (or pressing Command-Q).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータを、Simulator &gt; Quit Simulatorを選ぶ（またはCommadキー + Qを押す）ことで終了してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rebuild the project by typing Command-B (or choosing Product &gt; Build).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトをコマンド-Bをタイプすること（またはProduct &gt; Buildを選ぶこと）によって再ビルドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall from earlier that the prepare(for:sender:) method is called before any segue gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初めの方を思い出してください、prepare(for:sender:)メソッドは何らかのセグエが実行される前に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that a comment is a piece of text in a source code file that doesn’t get compiled as part of the program but provides context or useful information about individual pieces of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメントがソースコードファイル中の一片のテキストであることを思い出してください、それはプログラムの一部としてコンパイルされませんがコードの個々の部分について前後関係や役立つ情報を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that an initializer is a method that prepares an instance of a class for use, which involves setting an initial value for each property and performing any other setup or initialization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、イニシャライザはあるメソッドです、それはあるクラスのインスタンスを使用するために準備します、それは各プロパティの初期値を設定することと何らかの他の準備や初期化を実行することを伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that an initializer is a method that prepares an instance of a class for use, which involves setting an initial value for each property and performing any other setup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、イニシャライザ（初期化子）はひとつのメソッドです、それはクラスのインスタンスを使用する段取りを整えます、それには各プロパティに対する初期値の設定となんらかの他の設定の実行を伴います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the Attributes inspector appears when you select the fourth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、Attributesインスペクタが現れるのはあなたが左から４番目のボタンをインスペクタ選択バーで選択した時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the Identity inspector lets you edit properties of an object in your storyboard related to that object’s identity, such as what class the object belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、同一性インスペクタは、あなたにあなたのストーリーボードのあるオブジェクトのプロパティをそのオブジェクトの同一性に関して、例えばどのクラスにそのオブジェクトが所属するかなどを、編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the Size inspector appears when you select the fifth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、このサイズインスペクタが現れるのはあなたが左から5番目のボタンをインスペクタ選択バーで選んだ時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that the asset catalog is a place to store and organize your image assets for an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、アセットカタログはあなたのアプリのためのあなたの画像資産を格納し整理するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that this method is only called when a user taps the Save button, so you don’t need to account for the Cancel button in this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、このメソッドはユーザがSaveボタンをタップした時のみ呼ばれます、それであなたはCancelボタンをこのメソッドにおいて考慮する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Recall that you can use the abbreviated form anytime the enumeration value’s type is already known.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>思い出してください、あなたはその列挙値の型がすでに知られているときはいつでも省略形を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remember</seg>
      </tuv>
      <tuv lang="JA">
        <seg>覚えておいてください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remember, Swift defaults to internal access control for all the types, variables, properties, initializers, and functions in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>忘れないでください、Swiftは初期状態であなたのコード中の全ての型、変数、プロパティ、イニシャライザ、そして関数に対して内部アクセス制御になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all the product files, as well as any object files or other intermediate files created during the build process.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての生産ファイルを、それだけでなくビルドプロセスの間に作成されたあらゆるオブジェクトファイルまたは他の中間ファイルを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rename the file MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルをMealViewController.swiftに改名してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeat steps 5–8 for as many images as you like.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>５–８の処置をあなたが望む画像の数だけ繰り返してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace the // Configure the cell comment with the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>// Configure the cellコメントを以下のコードと置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace the print statement with this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print文をこのコードと置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace the placeholder loop variable (_) with index as shown:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレースホルダループ変数（_）をindexと置き換えてください、次に示すように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードを置き換えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reposition the button, if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、ボタンの位置を直します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resize the label so that its right edge stretches to the cell’s right margin.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルを大きさ変更して、それの右端をセルの右余白まで引き延ばしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resize the left and right edges of the text field until you see three vertical layout guides: the left margin alignment, the horizontal center alignment, and the right margin alignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の左および右端を、あなたが３つの垂直レイアウトガイド：左余白調節、横中心調節、右余白調節を見るまでリサイズ（大きさ調節）してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return to the standard editor by clicking the Standard button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準エディタにStandardボタンをクリックすることで戻ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Review the Source Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースコードを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Revision History</seg>
      </tuv>
      <tuv lang="JA">
        <seg>改定履歴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right after the else clause, add the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節のすぐ後で、以下のコードを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right after the if statement, add this else clause:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>if文のすぐ後で、else節を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the Single View Application template doesn’t do much—it just displays a white screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、Single View Applicationひな形（テンプレート）は、大したことはしません—それはただ白い画面を表示するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the method declaration is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今は、このメソッド宣言は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, the scene that you see on the canvas contains a single view that’s managed by a view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、あなたがキャンバス上で見るこのシーンはただ１つのビューを含みます、それはビューコントローラによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, this class simply inherits all the behavior defined by UIViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、このクラスはUIViewControllerで定義される挙動のすべてを単に継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, you have one button in the view, but you need five total.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、あなたはひとつのボタンをこのビューに持ちます、しかしあなたが必要なのは全部で５つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, your initializers are placeholders that simply call the superclass’s implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今のところ、あなたのイニシャライザはプレースホルダであり、単にスーパークラスの持つ実装を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ripping out and replacing all of the buttons is not necessarily the best idea from a performance standpoint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのボタンを剥ぎ取って置き換えることは、性能の見地から必ずしも最良のアイデアではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rotate the simulator by choosing Hardware &gt; Rotate Left and Hardware &gt; Rotate Right (or Command-Left Arrow and Command-Right Arrow).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータをHardware &gt; Rotate Left and Hardware &gt; Rotate Rightを選ぶこと（またはCommand-Left ArrowおよびCommand-Right Arrow）によって回転させてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run all of your unit tests at the same time by choosing Product &gt; Test (or pressing Command-U).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのユニットテストの全てを同時に、Product &gt; Testを選ぶこと（またはCommand-Uを押すこと）によって実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run an app in iOS Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリをiOSシミュレータ（模擬再現プログラム）で実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run iOS Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSシミュレータの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run the app, and you should see the changes in the simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリを実行します、するとあなたはシミュレータにおいて変更を見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running your app in the simulator with no modifications is a good way to start developing that understanding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリをシミュレータで変更なしで実行してみるのは、よく理解して開発を始めるのによい方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Save and Load the Meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の保存とロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Save and Load the Meal List</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストの保存とロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scroll to the bottom of the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このクラスの一番下までスクロールしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sections are visual groupings of cells within table views, which is especially useful in table views with a lot of data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セクションは、テーブルビュー内でのセルの視覚的なグループ分けです、それはテーブルビューにおいて多くのデータがあるとき特に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select AppDelegate.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegate.swiftを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select init(frame: CGRect) from the listed options, and press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init(frame: CGRect)をリストされたオプションから選択してください、そしてReturnを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select ViewController.swift in the project navigator to view it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftをプロジェクトナビゲータにおいて選択してそれを眺めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select Cocoa Touch Class, and click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoa Touch Classを選んで、Nextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select Swift File, and click Next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift Fileを選んで、Nextをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select iOS at the top of the dialog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダイアログの一番上でiOSを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the Set Default Label Text button, and press the Delete key to delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Set Default Label Textボタンを選択します、そしてデリートキーを押してそれを消去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the Stack View object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Stack Viewオブジェクトを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the bar button item and open the Attributes inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バーボタン項目を選択してAttributesインスペクタ を開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the checkbox next to Aspect Ratio.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Aspect Ratio（アスペクト比、縦横比率）の隣のチェックボックスを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the meal detail scene by clicking on its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事詳細シーンをそれのシーンドックをクリックして選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the meal list scene by clicking on its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストシーンをそれのシーンドックをクリックして選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the rating control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the scene’s view controller to update all the views in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーンのビューコントローラを選択することで、シーンの中の全てのビューを更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the segue from the meal list scene to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストシーンから食事詳細シーンへのセグエを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the table view controller by clicking on its scene dock until the entire scene has a blue outline around it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラを、それのシーンドック上でクリックすることで選択してください、シーン全体がその周りに青いアウトラインを持つまで続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Select the view controller by clicking on its scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラをそれのシーンドックをクリックすることで選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, the view controller has a strong reference to its content view—keeping the entire view hierarchy alive and in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じように、ビューコントローラは強い参照をそれのコンテンツビューに対して持ちます — ビュー階層全体を生存させメモリに保っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Size inspector</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サイズ（大きさ）インスペクタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Small white squares that appear on a user interface (UI) element’s borders when it’s selected so you can change its size on the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>小さな白い四角形、それはユーザインターフェイス（UI）要素のへりに、それが選択されることであなたがそれの大きさをキャンバス上で変更できるときに、現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, all of the tests should succeed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今までのところ、テストの全てはうまくいくはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, the FoodTracker app has a single scene, that is, a single screen of content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これまでは、FoodTrackerはただ１つだけのシーン、すなわち、単一画面のコンテンツ（内容）を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, the FoodTracker app has a single scene, whose user interface is managed by a single view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これまで、FoodTrackerアプリはただ１つのシーンしか持たず、それはユーザインターフェイスがただ１つのビューコントローラによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So it’s important to disable that interaction when it’s in this context.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それでそれがこの状況にある時はこの相互作用を作動しないようにすることが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some developers prefer to enforce an initializer’s contract using assert() or precondition() methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幾人かの開発者は、イニシャライザがする請負仕事をassert()またはprecondition()メソッドを使って遵守させるのを好みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some of these are elements that appear in the user interface, such as buttons and text fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらのいくつかは、ユーザインターフェイスの中に現れる要素です、例えばボタンやテキスト欄など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, however, you need more complex communication between your view controllers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>時には、しかしながら、あなたはより複雑な通信をあなたのビューコントローラ間で必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, the didSet property observer is called immediately after the property’s value is set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、didSetプロパティオブザーバは、プロパティの値が設定された直後に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, the comment you added indicates that this is the section of your code that lists properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、あなたが加えたコメントが示すのは、これがあなたのコードのプロパティをリストする部分だということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, when a user enters a meal name, rating, and photo in the meal detail scene and taps the Save button, you want MealViewController to configure a Meal object with the appropriate information and pass it back to MealTableViewController to display in the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、ユーザが食事名、格付け、そして写真を食事詳細シーンにおいて入力してSaveボタンをタップする時、あなたはMealViewControllerがひとつのMealオブジェクトを適切な情報とともに構成して、それをMealTableViewControllerに戻して渡して食事リストにおいて表示することを望みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, when an instance of MealViewController (the meal detail scene) gets created, its views should be populated with data from its meal property, if that data exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、MealViewControllerのインスタンス（食事詳細シーン）が作成されるとき、それのビューは、それのmealプロパティからのデータで満たされるべきです、そのデータが存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifying the type of this action method to be UIButton means that only button objects can connect to this action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアクションメソッドの型をUIButtonに指定することは、ボタンオブジェクトだけがこのアクションに接続できるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by adding a Meal property to MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealプロパティをMealViewControllerに加えることで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by adding a text field (UITextField), one such subclass of UIView, to your scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようなUIViewのサブクラスの１つ、テキスト欄（UITextField）をあなたのシーンに加えることで始めましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by creating a simple action that sets the label to Default Text whenever the user taps the Set Default Text button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>簡単なアクションを作成することで始めましょう、それはユーザがSet Default TextボタンをタップするたびごとにラベルをDefault Textに設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start by setting up the segues between meal list items and the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リスト項目と食事詳細シーンの間のセグエを準備することで始めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start with something simple, like getting a single red button to show up in your view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>始めに簡単なことをします、例えばひとつだけ赤いボタンをあなたのビューに表示させることのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting with a zero-sized button is fine, because you’re using Auto Layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>大きさゼロのボタンで始めることは非常に良いことです、なぜならあなたは「自動レイアウト」を使うからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Still, the user can modify the data while the app is running.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それでも、ユーザはアプリが実行している間にデータを修正できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stop dragging the button when you see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのドラッグをやめた時あなたが見るのはこのようなものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stop dragging the label when you see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルのドラッグをやめた時あなたが見るのはこのようなものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stop dragging the text field when you see something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄のドラッグをやめた時あなたが見るものはこのようなものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Store New Meals in the Meal List</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事を食事リストに格納する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Support Deleting Meals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の削除のサポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift handles initializers differently than other methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、イニシャライザを他のメソッドとは異なって扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift standard library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table view cells come with a variety of predefined behavior and default cell styles; however, because you have more content to display in each cell than the default styles allow, you’ll need to define a custom cell style.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルは、さまざまな前もって定義された挙動と省略時のセルスタイルを備えます；しかしながら、あなたは省略時のスタイルよりももっと多くのコンテンツを各セルに表示しなければならないことから、あなたはカスタムセルスタイルを定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a few moments to familiarize yourself with the main sections of the Xcode workspace.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少しだけ時間をとってXcodeワークスペースのさまざまな主要部門に慣れておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a minute to understand what’s happening in this line of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少し時間をとってコードのこの行で何が起こっているか理解しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a moment to understand the code in the file so far.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ちょっと時間をとって、このファイルのコードのある程度理解しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tap on a meal from the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストからある食事をタップしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tapping any of the buttons at this point should still call ratingButtonTapped(_:) and log the message to the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンのどれかをタップすると、この時点ではまだratingButtonTapped(_:)を呼び出してメッセージをコンソールに記録するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Target-action is a design pattern where one object sends a message to another object when a specific event occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「ターゲットアクション」は、ひとつデザインパターンで、そこにおいては一方のオブジェクトはあるメッセージを別のオブジェクトへと特定のイベントが起こる時に送り出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Team: If this is not automatically filled in, set the team to None.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>チーム：これが自動的に記入されないならば、チームはNoneに設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test Your Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータをテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test a data model by writing and running unit tests</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストを書いて実行することでデータモデルをテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test cases are simply methods that the system automatically runs as part of your unit tests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テスト事例は、単純なメソッドで、システムは自動的にあなたのユニットテストの一部として実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, the flow of the app is determined by events: system events and user actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、アプリの動作の流れを決定するのはイベント：システムイベントおよびユーザアクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means that the number of rows should be the number of Meal objects in your meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが意味するのは、列の数はあなたのmeals配列の中のMealオブジェクトの数であるはずだということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That way you won’t accidentally forget to disable them when it actually matters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようにしてあなたはそれが実際に重要である時それらを作動しないようにするのを誤って忘れないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That way you won’t forget it when you subclass a different class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようにしてあなたは、あなたが異なるクラスをサブクラスにする時、それを忘れないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s all you need to delete for now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが今のところあなたが削除に必要なすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s all you need to do to see the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これがあなたが結果を見るために必要なすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That’s where actions come in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこでアクションの出番です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The #selector expression returns the Selector value for the provided method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>#selector式は、与えられたメソッドに対するSelector値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The .automatic animation option uses the best animation based on the table’s current state, and the insertion point’s location.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>.automaticアニメーションオプションは、テーブルの持つ現在の状態、そして挿入点の位置に基づいて最良のアニメーションを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The .photoLibrary option uses the simulator’s camera roll.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>.PhotoLibraryオプションは、シミュレータのカメラロールを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate.swift source file has two primary functions:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegate.swiftソースファイルは、２つの主要な機能を持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class also contains stub implementations of the following delegate methods:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスはまた、以下のデリゲートメソッドのスタブ実装を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class contains a single property: window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスは、ただ１つのプロパティ（特性）：windowだけを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class is automatically created whenever you create a new project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスは、あなたが新しいプロジェクトを作成するたびごとに自動的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The DocumentsDirectory constant uses the file manager’s urls(for:in:) method to look up the URL for your app’s documents directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DocumentsDirectory定数は、ファイルマネージャの持つurls(for:in:)メソッドを使って、あなたのアプリの書類ディレクトリに対するURLを検索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IBOutlet attribute tells Xcode that you can connect to the nameTextField property from Interface Builder (which is why the attribute has the IB prefix).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IBOutlet属性がXcodeに教えるのは、あなたがnameTextFieldプロパティにインターフェイスビルダーから接続できるということです（それはその属性がIB接頭辞を持つことが理由です）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Meal class’s init?(name:, photo:, rating:) initializer is a failable initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealクラスの持つinit?(name:, photo:, rating:)イニシャライザは失敗できるイニシャライザです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NSCoding protocol declares two methods that any class that adopts to it must implement so that instances of that class can be encoded and decoded:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingプロトコルは、２つのメソッドを宣言します、それは、それを採用するあらゆるクラスが実装しなければならないもので、それによってそのクラスのインスタンスが符号化と複合化ができるものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UIControlEvents option set defines a number of events that controls can respond to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIControlEventsオプションセットは、コントロールが応答することができる多くのイベントを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UITextFieldDelegate protocol defines eight optional methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateプロトコルは、８つのオプショナルメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UIViewController class’s implementation doesn’t do anything, but it’s a good habit to always call super.prepare(for:sender:) whenever you override prepare(for:sender:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIViewControllerクラスの持つ実装は何もしません、しかしそれはあなたがprepare(for:sender:)をオーバーライドするときはいつでも常にsuper.prepare(for:sender:)を呼び出すための良い習慣です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ViewController class now has a reference to the rating control in the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerクラスは今ではストーリーボードの中の格付けコントロールに対する参照を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The addArrangedSubview() method adds the button you created to the list of views managed by the RatingControl stack view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>addArrangedSubview()メソッドは、あなたが作成したボタンをRatingControlスタックビューによって管理されるビューのリストに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The addTarget(_, action:, for:) method does the same thing in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>addTarget(_, action:, for:)メソッドは、同じことをコードの中で行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The as? MealTableViewCell expression attempts to downcast the returned object from the UITableViewCell class to your MealTableViewCell class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>as? MealTableViewCell式は、UITableViewCellクラスから返されたオブジェクトをあなたのMealTableViewCellクラスへとダウキャストを試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The convenience modifier means that this is a secondary initializer, and that it must call a designated initializer from the same class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>convenience修飾子は、これが補助のイニシャライザであること、そしてそれは指定イニシャライザを同じクラスから呼び出さなければならないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The decodeIntegerForKey(_:) method unarchives an integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeIntegerForKey(_:)メソッドは、整数をアンアーカイブします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The decodeObject(forKey:) method decodes encoded information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeObject(forKey:)メソッドは、エンコードされた情報をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dequeueReusableCell(withIdentifier:for:) method requests a cell from the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>dequeueReusableCell(withIdentifier:for:)メソッドは、テーブルビューから１つのセルを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dismiss(animated:completion:) method dismisses the modal scene and animates the transition back to the previous scene (in this case, the meal list).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>dismiss(animated:completion:)メソッドはモーダルシーンを退去させて、以前のシーン（この場合には、食事リスト）に戻る推移をアニメーションにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The else block is called if the user is editing an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elseブロックは、ユーザが既存の食事を編集しているならば呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The else clause executes when there’s no selected row in the table view, which means a user tapped the Add button to get to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節は、テーブルピューの中に選択された行がない場合に実行されます、そしてそれはユーザがAddボタンをタップして食事詳細シーンに行ったことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encode(with:) method prepares the class’s information to be archived, and the initializer unarchives the data when the class is created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encode(with:)メソッドはクラスの情報をアーカイブされるように準備します、そしてイニシャライザはクラスが作成される時にデータをアンアーカイブします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encode(with:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encode(with:)メソッドは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The guard let expression safely unwraps the optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>guard let式は、安全にそのオプショナルをアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The info dictionary always contains the original image that was selected in the picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>infoディクショナリは、常にピッカーにおいて選択されたオリジナル画像を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The required modifier means this initializer must be implemented on every subclass, if the subclass defines its own initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>required修飾子は、このイニシャライザがすべてのサブクラス上で実装されなければならないことを意味します、もしサブクラスがそれ独自のイニシャライザを定義している場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The self refers to the ViewController class, because it’s referenced inside the scope of the ViewController class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このselfはViewControllerクラスを参照します、なぜならそれがViewControllerクラス定義のスコープないが参照されるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sender parameter refers to the object that was responsible for triggering the action—in this case, a button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>senderパラメーターは、このアクションを引き起こす原因となったオブジェクトを参照します—この場合、ボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The setupButtons() method should now appear as shown below:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドは、今では下で示すように現れます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The setupButtons() method should now look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドは今ではこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textFieldDidBeginEditing method gets called when an editing session begins, or when the keyboard gets displayed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textFieldDidBeginEditingメソッドは、編集期間が始まる時、またはキーボードが表示される時に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textFieldDidEndEditing(_:) method gives you a chance to read the information entered into the text field and do something with it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textFieldDidEndEditing(_:)メソッドがあなたに与えるのは、テキスト欄に入力された情報を読んでそれで何かをする機会です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AppDelegate class adopts the UIApplicationDelegate protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegateクラスは、UIApplicationDelegateプロトコルを採用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IBAction attribute indicates that the method is an action that you can connect to from your storyboard in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IBAction属性が示すのは、このメソッドは、インターフェイスビルダーの中のあなたのストーリーボードからどこかへあなたが接続できるアクションだということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The else statement uses an if let statement to safely unwrap the view controller’s navigationController property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else文は、if let文を使って、安全にビューコントローラの持つnavigationControllerプロパティをアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static keyword indicates that these constants belong to the structure itself, not to instances of the structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>staticキーワードが示すのは、これらの定数が構造体それ自体に属しているということです、構造体のインスタンスにではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The testMealInitializationSucceeds() test case should succeed, while the testMealInitializationFails() test case fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>testMealInitializationSucceeds()テスト項目はうまくいくはずです、一方testMealInitializationFails()テスト項目は失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Meal class is a perfect candidate for unit testing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mealクラスは、ユニットテストの完璧な有資格者です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fatalError() method logs an error message to the console, including the contents of the info dictionary, and then causes the app to terminate—preventing it from continuing in an invalid state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>fatalError()メソッドは、infoディクショナリの内容を含めて、エラーメッセージをコンソールに記録して、それからアプリの終了を引き起こします — それが不正な状態で続けるのを妨げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The setupButtons() method should now look as shown below:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setupButtons()メソッドは、今では下に示すように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The weak keyword indicates that the reference does not prevent the system from deallocating the referenced object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>weakキーワードは、参照されたオブジェクトをシステムがディアロケートするのを、その参照は妨げないということを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meal property will only be non-nil when an existing meal is being edited.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mealプロパティは、既存の食事を編集している場合にのみ非nilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The completion parameter refers to a completion handler, a piece of code that executes after this method completes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>completionパラメータは、完了ハンドラを参照します、それはこのメソッドが完了した後に実行されるコード片です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Attributes inspector appears when you click the fourth button from the left in the inspector selector bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタは、あなたがインスペクタバーの左から４番目のボタンをクリックすると現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Object library appears at the bottom of the utility area on the right side of Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリは、Xcodeの右側ユーティリティ区画の１番下に見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The asset catalog is a place to store and organize your image assets for an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログは、アプリのためのあなたの画像資産を保管して整理するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The half-open range operator (..&lt;) doesn’t include the upper number, so this range goes from 0 to 4 for a total of five loop iterations, drawing five buttons instead of just one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子（..&lt;）は、高い方の数を含みません、それでこの範囲は0から4になり合計５回ループを繰り返して、５つのボタンを描画します、１つではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The outline view, which appears on the left side of the canvas, lets you see a hierarchical representation of the objects in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの左側に現れるアウトラインビューは、あなたのストーリーボードの中のオブジェクトの階層表現をあなたに見させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The project navigator displays all the files in your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータは、あなたのプロジェクト内のすべてのファイルを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view controller whose contents are displayed at the beginning of a segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューコントローラは、あるセグエの始まりでコンテンツが表示されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view controller whose contents are displayed at the end of a segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューコントローラは、セグエの終わりでコンテンツが表示されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view hierarchy defines the layout of views relative to other views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビュー階層は、ビューの配置を他のビューとの関係で定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Identity inspector lets you edit properties of an object in your storyboard related to that object’s identity, such as what class the object belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性インスペクタは、あなたにあなたのストーリーボードのあるオブジェクトのプロパティをそのオブジェクトの同一性に関して、例えばどのクラスにそのオブジェクトが所属するかなどを、編集させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app delegate creates the window where your app’s content is drawn and provides a place to respond to state transitions within the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリデリゲートは、あなたのアプリのコンテンツが描出されるウインドウを作成して、アプリ内部の状態推移に反応する場所を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nil coalescing operator is used to return the value of an optional if the optional has a value, or return a default value otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子は、オプショナルが値を持つならばオプショナルの値を、またはそうでなければ省略時の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The storyboard entry point is set to the navigation controller because the navigation controller is now a container for the table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードエントリポイントは、ナビゲーションコントローラに設定されます、なぜならナビゲーションコントローラは、現在テーブルビューコントローラのコンテナ（容れ物）だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift standard library includes a structure called Array that works well for tracking lists of items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリは、ある構造体を含みます、それはArrayと呼ばれるものでいくつかの項目からなるリストの追跡に対して申し分なく働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Action Segue menu allows you to choose the type of segue used to transition from the meal list scene to the meal detail scene when the user taps the Add button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Action Segueメニューがあなたに選ばせるのは、ユーザが追加ボタンをタップする時に食事リストシーンから食事詳細シーンに画面転換するのに使うセグエの型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Add New Constraints menu should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Add New Constraintsメニューは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The App Delegate Source File</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリデリゲート・ソースファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Attributes inspector should now show the following keyboard settings:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Attributesインスペクタは、今では次のようなキーボード設定を示すはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Functions menu lets you jump to a section in your code quickly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Functions menu」は、あなたにあなたのコードの中のあるセクションへとすばやくジャンプさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Group option defaults to your app name, FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Groupオプションは、初期状態であなたのアプリ名、FoodTrackerです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NSCoder class defines a number of encode(_:forKey:) methods, each one taking a different type for the first argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCoderクラスは、多くのencode(_:forKey:)メソッドを定義していて、それぞれのものが最初の引数として異なる型を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Pin menu should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pinメニューはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Scheme pop-up menu lets you choose which simulator or device you’d like to run your app on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Schemeポップアップメニューは、あなたがあなたのアプリを実行したいと思うのはどのデバイスまたはシミュレータかをあなたに選ばせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Second property contains the control’s rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のプロパティは、コントロールの持つ格付けを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Single View Application template comes with a few source code files that set up the app environment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Single View Applicationひな形は、いくつかのソースコードファイルを備えています、それはアプリ環境を準備します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Single View Application template has another source code file: ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Single View Applicationひな形は、もう一つソースコードファイル：ViewController.swiftを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift compiler knows that init(frame:) must be marked as required, and offers a fix-it to make this change in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftコンパイラは、init(frame:)がrequiredと印されなければならないことを知っています、そしてにあなたのコードでこの変更をするよう修正を提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Tap Gesture Recognizer object appears in the meal scene dock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tap Gesture Recognizerオブジェクトが食事シーンドックに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Test navigator also lists the individual test methods, grouped by test case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Testナビゲータはまた、個々のテストメソッドを、テスト項目によってグループ化してリストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The View Controller Source File</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラ・ソースファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The XCTest framework is Xcode’s testing framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XCTestフレームワークは、Xcodeの持つテスト実行フレームワークです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Xcode app shows up as the first search result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeアプリが検索結果の最初に現れてきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Xcode window, which you use to manage and navigate through the files and resources in your project.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeウインドウ、あなたはそれを使って、あなたのプロジェクトのファイルやリソースを管理したりそれらの間を進んで行きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ability of the Swift compiler to determine the type of a value from context, without an explicit type declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の型を文脈から、明示的な型宣言なしに判断するSwiftコンパイラの能力、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The absence of a value or no value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるべき値がないまたはどんな値もない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The action is setDefaultLabelText(_).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクション（動作）は、setDefaultLabelText(_)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The anchor’s constraint(equalToConstant:) method returns a constraint that defines a constant height or width for the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンカーの持つconstraint(equalToConstant:)メソッドは、ビューのための定数で高さまたは幅を定義する制約を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app can terminate safely without losing any data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリは、何らデータを消失することなく安全に終了できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app does not store any data when the meal detail scene is dismissed, and neither the prepare(for:sender:) method nor the unwind action method are called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリは食事シーンが退去させられる時に何らデータを保管しません、そしてprepare(for:sender:)メソッドも巻き戻しアクションメソッドも呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app logs a debug message using the system’s standard logging mechanisms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリは、デバッグメッセージをシステムの持つ標準ログ機構を使って記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app navigates to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリは、食事詳細シーンへと誘導します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app terminates with a SIGABRT signal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリは、SIGABRTシグナルで終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app then animates the transition from the meal list scene to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリはそれから、食事リストシーンから食事詳細シーンへの推移をアニメーション表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The application object is responsible for managing the life cycle of the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションオブジェクトは、アプリのライフサイクルを管理する責任を負います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The appropriate method of presentation for this type of scene is a modal segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この種のシーンを表現する適切な手法は、モーダルセグエです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The appropriate place to load the stored data is in the table view’s viewDidLoad method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格納されたデータをロードするのに適切な場所は、テーブルビューの持つviewDidLoadメソッドの中になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The app’s response to user action is then reflected back in the user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザアクションへのアプリの応答は、それからユーザインターフェイスに返され反映されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arrow that points to the left side of the scene on the canvas is the storyboard entry point, which means that this scene is loaded first when the app starts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス上でシーンの左側面を指し示す矢印はストーリーボードエントリポイントです、それは、アプリがスタートする時にこのシーンが最初にロードされることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The attempt to downcast nil to [Meal] also fails, itself returning nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilを[Meal]へダウンキャストする試みもまた、それ自身nilを返して失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The background of a storyboard where you add and arrange user interface (UI) elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの背景、そこにあなたはユーザインターフェイス（UI）要素を加え整えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The background of the storyboard is the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードの背景は、キャンバスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior you just implemented is an example of the target-action pattern in iOS app design.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがたった今実装した挙動は、iOSアプリ設計におけるターゲットアクションパターンの１例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The blue layout guides help you place the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>青のレイアウトガイド（割り付け・配置目じるし）は、あなたがテキスト欄を設置するのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button changes to an Add button (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンが追加ボタン（+）に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button doesn’t do anything yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このボタンはまだ何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button text changes to Cancel.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンテキストがCancelに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button text changes to Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンテキストがSaveに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buttons should be side-by-side.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンは横に並んでいるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The button’s heightAnchor and widthAnchor properties give access to layout anchors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンの持つheightAnchorとwidthAnchorプロパティはレイアウトアンカーにアセクスさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The cell is nested under Table View Controller Scene &gt; Table View Controller &gt; Table View.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルは、Table View Controller Scene &gt; Table View Controller &gt; Table Viewの下に入れ子にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class title changes to MealTableViewCell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスのタイトルをMealTableViewCellに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class title changes to MealTableViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスタイトルがMealTableViewControllerに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code above examines the segue’s identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上のコードは、セグエの持つ識別子を吟味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code comments explain the setUp() and tearDown() methods, as well as the two sample test cases: testExample() and testPerformanceExample().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードコメントは、setUp()とtearDown()メソッド、それだけでなく２つのサンプルテスト項目：testExample() and testPerformanceExample()を説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code completion overlay shows up.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード補完重ね表示が現れてきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code starts by importing both the XCTest framework and your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、XCTestフレームワークとあなたのアプリの両方をインポートすることによって始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code to reset the value of the label is quite simple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルの値をリセットするコードは、ごく簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code within the else clause executes a method called popViewController(animated:), which pops the current view controller (the meal detail scene) off the navigation stack and animates the transition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>else節内のコードは、popViewController(animated:)によって呼び出されるメソッドを実行します、それは現在のビューコントローラ（食事詳細シーン）をナビゲーションスタックからポップして遷移をアニメーション化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The console is a useful debugging mechanism that appears at the bottom of the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンソールは、有用なデバッグの仕組みです、それはエディタ区画の下に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The constraint’s isActive property activates or deactivates the constraint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>制約の持つisActiveプロパティは、制約を活性化または非活性化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The control also exposes properties that can be modified in the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロールはまた、Attributesインスペクタで修正可能なプロパティを外界に触れさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The control in the canvas should change to match the new settings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバスの中のコントロールは、新しい設定に合うように変わるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The control should reset to a zero-star rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロールは星ゼロの格付けにリセットされるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The controller displays and manages a table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントローラは、テーブルビューを表示および管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The controls fit in the normal allotted space, but the control doesn’t adapt when the space is reduced.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロールは通常に割り当てられた空間にぴったり合います、しかしコントロールは空間が減らされる時に適応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dashes indicate that the control is currently using the default values (in this case 44.0 points and 5 stars).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダッシュは、コントロールが現在は省略時の値を使っていることを示します（この場合44.0ポイントと5スター）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default image displays in the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期画像がイメージビューに表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delegate can use this information to save or clear data at the right time, dismiss the keyboard, and so on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先は、この情報を使ってデータを保存したり消去したりがちょうど良いとき、キーボードを片付けたときなどに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delegate may respond by for example, updating the appearance or state of itself or of other objects in the app, or returning a value that affects how an impending event is handled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先は、例えば、それ自身やアプリ中の他のオブジェクトの外観や状態を更新すること、またはすぐに起ころうとしているイベントが取り扱われる方法に影響を及ぼす値を返すことでで応答するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delegating object—in this case, the text field—keeps a reference to the other object—the delegate—and at the appropriate time, the delegating object sends a message to the delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任しているオブジェクト—この場合、テキスト欄—は、他のオブジェクト—委任先—への参照を保有します、そして適切なときに、委任しているオブジェクトはメッセージを委任先に送ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The detail scene should be prepopulated with data about the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細シーンは、その食事についてのデータであらかじめ満たされるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The editor window shows the results of the currently open file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エディタウインドウは、現在開くファイルの結果を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements in the stack view center horizontally:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューの中の要素は横方向の真ん中に置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements that appear in the user interface are known as views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザインターフェイスの中に現れる要素は、ビューとして知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The else case prints an error message to the console and terminates the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このelseの状況は、エラーメッセージをコンソールに出力してアプリを終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event is the user tapping the Set Default Text button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イベント（出来事）は、ユーザがSet Default Textボタンをタップすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expectation is that the unwrapping and casting operations will never fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>期待されることは、アンラップおよびキャスト操作が決して失敗しないことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final step to displaying data in the user interface is to connect the code defined in MealTableViewController.swift to the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザインターフェイスにおいてデータを表示するための最後の段階は、MealTableViewController.swiftにおいて定義されたコードを食事リストシーンに接続することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first scene that’s shown from a storyboard when an app starts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のシーン、それは、アプリがスタートする時にストーリーボードから見せられるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first is a  property that contains the list of buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のものは、ボタンのリストを含むプロパティです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first item added to a the  navigation stack of a navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラのナビゲーションスタックに加えられた最初の項目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first item added to the stack becomes the root view controller and is never popped off (removed from) the navigation stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのスタックに追加される最初の項目は、ルートビューコントローラになります、そして決してそのナビゲーションスタックからはじき出される（取り除かれる）ことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line calls updateSaveButtonState() to check if the text field has text in it, which enables the Save button if it does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の行は、updateSaveButtonState()を呼び出して、テキスト欄がそれの中にテキストを持つかどうか調べます、それがそうならばそれはSaveボタンを利用可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line of code disables the button’s automatically generated constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードの最初の行は、ボタンの持つ自動生成の制約を作動しないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line updates the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の行はmeals配列を更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first of these is numberOfSections(In:), which tells the table view how many sections to display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの最初のものは、numberOfSections(In:)です、それはテーブルビューにどれだけ多くのセクションを表示するか伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first of these, imagePickerControllerDidCancel(_:), gets called when a user taps the image picker’s Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの最初のもの、imagePickerControllerDidCancel(_:)が呼ばれるのは、ユーザがイメージピッカーの「キャンセル」ボタンをタップした時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The focused state is used by focus-based interfaces, like Apple TV.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フォーカス状態は、フォーカス基盤のインターフェイスによって使用されます、Apple TVのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The graphical environment for building a user interface (UI) in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザインターフェイス (UI)をXcodeで構築するためのグラフィカル環境。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The guard statement both unwraps the optional and downcasts the enclosed type to a String, before assigning it to the name constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>guard文は、オプショナルを、それをname定数に割り当てる前に、アンラップして封入された型をStringへダウンキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The guard statements check that all the downcasts work as expected, and all optionals contain non-nil values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>guard文は、すべてのダウンキャストが正確に働くこと、そしてすべてのオプショナルが非nil値を含むことを点検します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The icon to the right shows whether the test method succeeded or failed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右のアイコンは、テストメソッドが成功したか失敗したかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identifier tells dequeueReusableCell(withIdentifier:for:) which type of cell it should create or reuse.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>識別子は、dequeueReusableCell(withIdentifier:for:)に、それが作成または再利用するセルはどの型かを伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation should be empty at this point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実装はこの時点では空のはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実装はこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The individual rows in a table view are managed by table view cells (UITableViewCell), which are responsible for drawing their contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビュー内の個々の行は、テーブルビューセル（UITableViewCell）によって管理されます、それはその内容を描画する責任を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initializers should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらイニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initializer’s signature should now look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザのシグネチャは、今ではこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last data source method, tableView(_:cellForRowAt:), configures and provides a cell to display for a given row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後のデータソースメソッド、tableView(_:cellForRowAt:)は、指定された列に対して表示するためにセルを構成して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last thing you need to do to set up the rating control is to give the ViewController class a reference to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールの設定としてあなたが最後にしなければならないことは、ViewControllerクラスにそれへの参照を持たせることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The layer of visual elements that lets a user interact with a piece of software.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>視覚的要素の階層（レイヤ）、それはユーザにソフトウェアのある部分と相互作用させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lessons are each accompanied by an Xcode project file that shows an example of how your code and interface should look at the end of the lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらレッスンは、それぞれひとつのXcodeプロジェクトファイルを伴います、それはあなたのコードとインターフェイスがそのレッスンの終わりでどのように見えるはずかを例示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lessons build on each other, walking you through a step-by-step process of creating a simple, real-world iOS app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レッスンは互いを足場として、あなたをある単純な、現実のiOSアプリを作成する段階的な過程を歩ませます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lessons were written using Xcode 8.1, iOS SDK 10, and Swift 3.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンはXcode8.1、iOS SDK 10、そしてSwift 3を使って書かれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The line after it, which is part of the template implementation, deletes the corresponding row from the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの後の行、ひな形実装の一部であるものは、対応する行をテーブルビューから消去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lines starting with button.heightAnchor and button.widthAnchor create the constraints that define the button’s height and width.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>button.heightAnchorとbutton.widthAnchorで始まる行は制約を作成するもので、ボタンの持つ高さと幅を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The list of items you added in the viewDidLoad() method should show up as cells in your table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがviewDidLoad()メソッドに加えた項目のリストが、セルとしてあなたのテーブルビューの中に姿を見せるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main types of tests you can write are functional tests (to check that everything is producing the values you expect) and performance tests (to check that your code is performing as fast as you expect it to).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが書くことができるテストの主な種類は、機能的なテスト（あらゆるものがあなたが予期する値を生み出していることを検査するため）と性能テスト（あなたのコードがあなたがそれがそうなると予想するほど速く実行していることを検査するため）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The meal scene user interface should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンユーザインターフェイスは、このようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The message tells the delegate about an event that the delegating object is about to handle or has just handled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメッセージは、委任しているオブジェクトがまさに取り扱おうとしているまたはちょうど取り扱い終えたイベントについて委任先に教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method asks ViewController to present the view controller defined by imagePickerController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドがViewControllerに尋ねることはimagePickerControllerによって定義されるビューコントローラが存在するかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method should appear as shown below:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドは下に示すように現れるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum size needed to display all the content in a view without clipping or distorting that content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューの中の全ての内容を、その内容を切り詰めたり崩したりすることなく表示するために必要な最小サイズ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of that delegate protocol is UIImagePickerControllerDelegate, and the object that you’ll define as the image picker controller’s delegate is ViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先プロトコルの名前はUIImagePickerControllerDelegateです、そしてあなたがイメージピッカーコントローラの委任先として定義するオブジェクトはViewControllerです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The natural place to track this is in a custom view controller subclass that’s connected to the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この足跡を残しておく自然な場所は、カスタムビューコントローラのサブクラスの中です、それは食事リストシーンに接続されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The navigation bar extends its background to the top of the status bar, so the status bar doesn’t overlap with your content anymore.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーは、それの背景をステータスバーの上部まで拡げます、それでステータスバーはあなたのコンテンツと今ではもう重なりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The navigation bar should now have a title and display an Add button (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーは、現在タイトルを持ち、追加ボタン（+）を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new init?(coder:) initializer should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいinit?(coder:)イニシャライザはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next data source method, tableView(_:numberOfRowsInSection:), tells the table view how many rows to display in a given section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のデータソースメソッド、tableView(_:numberOfRowsInSection:)は、テーブルビューがどのくらい多くの行を指定されたセクションに表示するかを教えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step in creating the FoodTracker app’s functionality is implementing the ability for a user to add a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerアプリの機能性の作成における次の段階は、ユーザが新しい食事を追加する能力の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step in creating the unwind segue is to add an action method to the destination view controller (the view controller that the segue is going to).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエを作成する次の段階は、アクションメソッドをデスティネーション（行先）ビューコントローラ（セグエが向かっている先のビューコントローラ）に加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next step in finishing the meal scene is adding a way to display a photo of a particular meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事シーンを仕上げる次の段階は、ある食事の写真を表示する方法を加えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object that receives the action message in the target-action pattern.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットアクションパターンにおいてアクションメッセージを受け取るオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The operator returns an optional value, which will be nil if the downcast wasn’t possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子はオプショナルの値を返します、それはダウンキャストが可能でなかったならばnilになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other affects all views in the current view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう１つは、現在のビューコントローラの中の全てのビューに影響します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The period during which a program is executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプログラムが実行されている始めから終わりまでの期間。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The preview shows the image view and the label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレビューは、イメージビューとラベルを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The process of attempting to assign an optional value to a constant in a conditional statement to see if the optional contains an underlying value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプショナル値を、そのオプショナルがその裏に値を含んでいるか知るために、条件文の中の定数に割り当てようと試みる処理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The process of inserting string representations of constants, variables, literals, and expressions into longer strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数、変数、リテラル、そして式の文字列表現をより長い文字列に挿入する処理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The project is still just a relatively simple, single scene, but you will continue to add features and increase its complexity over the remaining lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロジェクトは、まだ比較的単純なものでしかありません、しかしあなたは機能の追加を続けていってそれの複雑さを残りのレッスンを乗り越えて増やしていくことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol that defines a text field’s delegate is called UITextFieldDelegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の委任先を定義するプロトコルは、UITextFieldDelegateと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The push-style navigation you get by using the show segue is working just as it’s supposed to—but it’s not quite what you want when adding items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが表示セグエを使って得たこのプッシュ形式ナビゲーションは、まさにそれがしなければならない通りに機能しています—しかしそれは完全には項目を加える時にあなたが望むことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The question mark (?) means that this is a failable initializer that might return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>疑問符（?）は、それが失敗できるイニシャライザであるのを意味し、それはnilを返すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rating control appears as a row of stars.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールは、星の列として現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rating control isn’t rendered in the preview, but otherwise the table view cell looks as expected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールはプレビューにおいて描出されません、しかし他の点ではテーブルビューセルは予想された通りに見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The red square is the button you added in the initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この赤い四角は、あなたがイニシャライザに加えたボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The representation or structure of data within an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリ内のデータの描写または構造。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the declaration declares a method by the name of setDefaultLabelText(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>宣言の残りは、setDefaultLabelText(_:)の名前でメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the declaration defines an implicitly unwrapped optional variable of type UITextField named nameTextField.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この宣言の残りは、暗黙的にアンラップされるオプショナルで型UITextFieldのnameTextFieldと名付けられる変数を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rest of the elements in the stack view reposition themselves appropriately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューの中の残りの要素は、それら自身で適切に再び位置決めをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value of decodeObjectForKey(_:) is an Any? optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>decodeObjectForKey(_:)の戻り値は、Any?オプショナルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root of the property list is a dictionary that holds a set of predefined keys and their values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティリストのルートは１つのディクショナリで、ひとそろいのあらかじめ設定されたキーとそれらの値を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root view controller is never popped off (removed from) the stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ルートビューコントローラは、決してスタックからポップ（削除）されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The save location defaults to your project directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>保存場所は、初期状態であなたのプロジェクトディレクトリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The scene from your storyboard appears on the device’s screen, and the user interface’s behavior is defined in ViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードからのシーンがデバイスの画面上に現れます、そしてユーザインターフェイスの挙動はViewController.swiftにおいて定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The scene is starting to look like a real app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーンは、本物のアプリのように始まっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second UIImagePickerControllerDelegate method that you need to implement, imagePickerController(_:didFinishPickingMediaWithInfo:), gets called when a user selects a photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが実装する必要のある２番目のUIImagePickerControllerDelegateメソッド、imagePickerController(_:didFinishPickingMediaWithInfo:)が呼ばれるのは、ユーザがある写真を選択した時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second line of code in the method should now look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドのコードの２行目は今ではこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second line reloads the appropriate row in the table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２行目は、テーブルビューの中の適切な行を再読み込みします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second line sets the title of the scene to that text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２行目は、このシーンのタイトルを、そのテキストに設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second method that you need to implement, textFieldDidEndEditing(_:), is called after the text field resigns its first-responder status.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが実装する必要がある２つ目のメソッド、textFieldDidEndEditing(_:)は、テキスト欄がそれのファーストレスポンダ状態を破棄した後に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The segue pushes the view controller for the meal detail scene onto the navigation stack that contains the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエは、食事詳細シーンのためのビューコントローラを、食事リストシーンを含むナビゲータースタック上へとプッシュします（上重ねします）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sender is the Set Default Label Text button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>センダー（送り手）は、Set Default Label Textボタンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sender is usually a control—such as a button, slider, or switch—that can trigger an event in response to user interaction such as a tap, drag, or value change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>センダーは大抵はあるコントロールです — 例えばボタン、スライダ、またはスイッチなど — それはあるイベントをユーザとのやりとり、例えばタップ、ドラッグ、または値の変更などに対する応答において引き起こすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of view controllers managed by a particular navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとまとめにされたビューコントローラで、ある特定のナビゲーションコントローラによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of Apple frameworks and technologies used to develop iOS apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリを開発するために使われるAppleフレームワークとテクノロジーのひとそろい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of view controllers managed by a particular navigation controller is called its navigation stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある特定のナビゲーションコントローラによって管理されるある一組のビューコントローラは、それのナビゲーションスタックと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simulator can model a number of different types of hardware—All the screen sizes and resolutions for both iPad and iPhone—so you can simulate your app on every device you’re developing for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、多くの異なる型のハードウェアをモデル化することができます — iPadとiPhone両方の画面サイズと解像度のすべて — それであなたはあなたのアプリをあなたが開発しているあらゆるデバイス上でシミュレートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simulator gives you an idea of how your app would look and behave if it were running on a device.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、あなたのアプリがどう見えるだろうかそしてそれがデバイス上で動作していたならばどう振る舞うかの見解をあなたに与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simulator opens in the iPhone mode you specified and then launches your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、まさしくあなたが指定したようにiPhoneモードで開きます、それからあなたのアプリを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simulator opens the Photos app and shows the images you added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シミュレータは、Photosを開いてあなたが加えた画像を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stack view rearranges your user interface elements to fill the gap that the button left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、あなたのユーザインターフェイス要素を配列し直して下と左の隙間を埋めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stack view uses Auto Layout under the hood to calculate the size and position of all the views that it manages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、「自動レイアウト」をその覆いの下で使用して、それが管理するすべてのビューの大きさと位置を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stack view will automatically define the button’s position, and you will add constraints to define the button’s size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューは、自動的にボタンの位置を定義します、そしてあなたは制約を加えることでボタンの大きさを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subclass must implement (or automatically inherit) all of the required initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスは、必須イニシャライザの全てを実装（または自動的に継承）しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The system also creates an instance of your AppDelegate class, and assigns it to the application object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムはまた、あなたのAppDelegateクラスのインスタンスを作成します、そしてそれをアプリケーションオブジェクトへ割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The system automatically runs this test case when the unit tests are run.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムは、ユニットテストが実行される時に自動的にこのテスト項目を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The system must ask the user for permission before accessing their photo library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムは、ユーザに彼らのフォトライブラリにアクセスする前に許可を求めなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The system sends the message by calling the action method on the target and passing in the sender object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムはメッセージを、アクションメソッドをターゲット上で呼び出してセンダーオブジェクトに渡すことによって送ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The system uses this image (possibly with an added effect) whenever a state or combination of states doesn’t have an image of their own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムは、ある状態または幾つかの状態の組み合わせがそれら独自の画像を持たないときはいつでもこの画像を（ことによると追加の効果と共に）使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table can then create instances of this cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルは、それからこのセルのインスタンスを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view cells now look taller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルは今ではより長く見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view controller is set as the initial view controller in your storyboard, making the meal list the first scene that loads on app launch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラは、あなたのストーリーボードの最初のビューコントローラとして設定されて、食事リストはアプリ起動でロードされる最初のシーンにされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view controller is the navigation controller’s root view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラは、ナビゲーションコントローラの持つルートビューコントローラです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view controller template includes a number of method stubs and commented out methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラ雛形は、多くのメソッドスタブとコメントアウトされたメソッドを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view is nested under Table View Controller Scene &gt; Table View Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューは、Table View Controller Scene &gt; Table View Controllerの下に入れ子にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The table view object is just a view representing the table itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューオブジェクトは、単にテーブルそれ自体を表しているビューです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The target is ViewController (where the action method is defined).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲット（目標）は、ViewControllerです（ここでアクションメソッドが定義されます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The target is self, which refers to the current instance of the enclosing class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットはselfです、それは周りを囲んでいるクラスの現在のインスタンスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The task now is to pass the Meal object to MealTableViewController when a user taps the Save button and discard it when a user taps the Cancel button, switching from displaying the meal detail scene to displaying the meal list in either case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の作業はMealオブジェクトを、ユーザがSaveボタンをタップする時にはMealTableViewControllerに渡し、ユーザがCancelボタンをタップする時には廃棄して、両方の場合で食事詳細シーンの表示から食事リストの表示へと切り替えることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template also provides comments for each of the stub methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このテンプレートはまた、スタブメソッドそれぞれに対するコメントを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template implementation looks like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひな形実装はこのように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template implementation of this method includes a comment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドのひな形実装はコメントを１つ含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The template implementation of this method includes comments that were inserted by Xcode when it created MealTableViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの見本実装は、コメントを含みます、それは、XcodeによってそれがMealTableViewController.swiftを作成した時に挿入されたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The text field, label, and button are subviews of the content view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄、ラベル、そしてボタンは、コンテンツビューのサブビューです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The text field, label, and button keep the same size and position relative to the screen’s upper left corner.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄、ラベル、そしてボタンは、同じ大きさと位置を画面の上左隅に関して保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The top layout guide is positioned at the bottom of the status bar, if the status bar is visible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上部レイアウトガイドは、ステータスバーの一番下に置かれます、ステータスバーが見えているならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of imagePickerController.sourceType is known to be UIImagePickerControllerSourceType, which is an enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerController.sourceTypeの型はimagePickerController.sourceTypeとして知られます、それは列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of dismissal depends on how the scene was presented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>退去の種類は、どのようにそのシーンが提示されたかに依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore (_) represents a wildcard, which you can use when you don’t need to know which iteration of the loop is currently executing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンダースコア（_）は、ワイルドカード（万能札）を表します、それはループのどの繰り返しが現在実行されているかをあなたが知る必要がない時に使うことができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unit tests themselves are defined in a class, FoodTrackerTests, which inherits from XCTestCase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストそれ自身は、あるクラス、FoodTrackerTestsにおいて定義されます、それはXCTestCaseから継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user can then makes changes to the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、それから変更をその食事に行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user must interact with the presented controller, and dismiss it before returning to the app’s main flow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、提示されたコントローラと相互作用して、アプリのメインフローに戻る前にそれを退去させなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user needs to be able to select a rating by tapping a star, so you’ll replace the debugging implementation with a real implementation of the ratingButtonTapped(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが必要とするのは、格付けの選択がある星のタップによってできることです、それであなたはデバック実装を実際の実装のratingButtonTapped(_:)メソッドで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user performs actions in the interface that trigger events in the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、インターフェイスにおいていろいろな行動を行い、それはアプリにおいていろいろなイベントを引き起こします（ユーザアクション・イベント）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view controller’s outlets are guaranteed to have valid values by the time this method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラの持つアウトレットは、有効な値を持つことをこのメソッドが呼び出される時までに保障されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view may be obscured by other views or hidden.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、他のビューまたは隠されることによって見えなくさせられるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then it reads the accessibility value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それからそれはアクセシビリティ値を読み上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, double-click on the Value section and enter Allows you to add photos to your meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それから、ValueセクションをダブルクリックしてAllows you to add photos to your mealsを入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, you can click the Cancel button to dismiss the picker, or open Camera Roll and click an image to select it and set it as the image in the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのとき、あなたはCancelボタンをクリックしてピッカーを片付けることができます、またはCamera Rollを開いてひとつの画像をクリックしてそれを選択し、それをイメージビューの中の画像として設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, you’ll define an action method to change the image when a tap occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうすれば、あなたはアクションメソッドを定義することで、タップが起こったとき画像を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are many ways to implement this, but this lesson focuses on a straightforward approach, building a custom control by combining existing views and controls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの方法がこれを実装するためにはあります、しかしこのレッスンは直接的な取り組みに焦点を当て、カスタムコントロールを既存のビューとコントロールを組み合わせることで構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no need for a guard statement here, because the photo property is itself an optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>guard文はここでは必要ありません、なぜならphotoプロパティはそれ自身オプショナルであるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There will only ever be one copy of these properties, no matter how many instances of the Meal class you create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にこれらプロパティの１つのコピーだけが存在します、あなたが作成するMealクラスのインスタンスがどれだけあるかは問題ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, it’s safe to force unwrap the optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、それは安全にオプショナルを強制的にアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, the code now checks to make sure the user was adding a new meal before calling dismiss(animated:completion:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、コードは今ではユーザが新しい食事を加えていたことをdismiss(animated:completion:)を呼び出す前に確かめるため点検します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, there’s no need to create a more-complex solution to update the existing buttons in place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それゆえに、既存のボタンをその場で更新するもっと複雑な解決策を作成する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, you need to add a little space between the stack view and the layout guide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、あなたは小さな空白をスタックビューとレイアウトガイドの間に加える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, you’ll use the same interface to perform both tasks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それゆえに、あなたは同じインターフェイスを両方の作業を実行するのに使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a corresponding initializer for each approach: init(frame:) for programatically initializing the view and init?(coder:) for loading the view from the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それぞれの取り組み方に合ったイニシャライザがあります：ビューをプログラム的に初期化するためのinit(frame:)とビューをストーリーボードからロードするためのinit?(coder:)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a lot going on in this code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードにおいて多くのことが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a lot going on in this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードにおいて多くのことが起こります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a lot happening in the condition for this if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このif文の条件では多くの事が起こっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a nuanced distinction between views and controls, which are specialized versions of views that respond to user actions in a specific way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある微妙な相違がビューと、ビューの特殊化版でユーザアクションに特定の方法で応答するコントロールの間にはあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s a yellow warning triangle in the right side of the Activity viewer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>黄色い警告三角形がActivityビューアの右端にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There’s also a red error icon beside the View Controller Scene in the Outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>また赤いエラーアイコンがView Controller Sceneの隣にOutlineビューにおいて存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are placeholder implementations that you can uncomment and expand to define the table’s appearance and behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかのプレースホルダ実装があって、あなたがコメントから外して拡張することでテーブルの外観と挙動を定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These comments describe how these methods can be used by your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのコメントは、どのようにそれらのメソッドがあなたのアプリによって使用されることができるかを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These constraints indicate spacing to the nearest leading, trailing, and top neighbors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの制約は、最も近い前方、後方、そして上方の隣りとの間隔を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These events result in the execution of the app’s logic and manipulation of its data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらのイベントは、アプリのロジックの実行とそれのデータの操作に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These features can be accessed using the Update Frames button and Resolve Auto Layout Issues menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの機能は、Update FramesボタンとResolve Auto Layout Issuesメニューを使ってアクセスされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These features include VoiceOver, Switch Control, playback of closed captioned or audio described video, Guided Access, Text to Speech, and more.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの機能は、VoiceOver、Switch Control、聴力障害者用字幕付きまたは音声解説付きビデオの巻き戻し再生、Guided Access、Text to Speech、その他いろいろを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These initializers return optional values or implicitly unwrapped optional values, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのイニシャライザは、それぞれオプショナル値または暗黙的にアンラップされるオプショナル値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These lessons assume developer mode is enabled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのレッスンは、開発者モードが有効にされると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These lines define the size of your buttons and the number of buttons in your control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの行は、あなたのボタンの大きさとあなたのコントロールの中のボタンの数を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These lines encode the value of each property on the Meal class and store them with their corresponding key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの行は、Mealクラスに関する各プロパティの値をエンコードして、それらを格納するのにそれらの対応するキーを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These lines load the star images from the assets catalog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの行は、星画像をアセットカタログからロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods cause the app to terminate if the condition they are testing fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドは、それらがテストする条件が失敗するならばアプリの終了を引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods let the application object communicate with the app delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドは、アプリケーションオブジェクトにアプリデリゲートと通信させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These names make it easier to identify individual tests later on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの名前は、後で個々のテストを識別するのを容易にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They also help to define your class’s expected behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらはまた、あなたのクラスの持つ期待される挙動を定義する助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are arranged horizontally, but there’s no space between them—making them look like a single, red block.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは横には整えられます、しかしそれらの間の空きがありません — それらは単一の、赤いブロックのように見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are intended for debugging environments, and do not appear in a shipping app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらはデバッグ環境として意図されます、そして出荷アプリでは現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are the building blocks for constructing your user interface and presenting your content in a clear, elegant, and useful way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは、あなたのユーザインターフェイスを組み立てるための、そしてあなたのコンテンツ（表示したいこと）をわかりやすく、優雅に、役に立つ形で提示するための建築ブロックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They become red when they are selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらが赤くなったらそれらが選択されたということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They predate storyboards and basically represent a single scene from a storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数ストーリーボードの前のもので、基本的にひとつのストーリボードからただ１つだけのシーンを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This else case executes only if the meal detail scene was not presented inside a modal navigation controller (for example, when adding a new meal), and if the meal detail scene was not pushed onto a navigation stack (for example, when editing a meal).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このelseの状況は、食事詳細シーンがモーダルナビゲーションコントローラ内部で提示されなかった場合（例えば、新しい食事を加えている時）に、そして食事詳細シーンがナビゲーションスタック上にプッシュされなかった場合（例えば、食事を編集している時）にのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This action adds the view as a subview of the RatingControl, and also instructs the RatingControl to create the constraints needed to manage the button’s position within the control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアクションは、ビューをRatingControlのサブビューとして加えます、そしてまたボタンの位置をコントロール内で管理するのに必要とされる制約をRatingControlに作成するよう指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This adds the new meal to the existing list of meals in the data model.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは新しい食事を、データモデルにおいて既存の食事のリストに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also completes the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはまたアプリの完成でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also means that the meal detail scene was pushed onto a navigation stack when the user selected a meal from the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはまた、食事詳細シーンがナビゲーションスタック上へとプッシュされたのは、ユーザが食事を食事リストから選択した時であるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This animates the addition of a new row to the table view for the cell that contains information about the new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、新しい食事についての情報を含んでいるセルのためのテーブルビューへ新しい行の追加をアニメーション（動画）にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This app shows a list of meals, including a meal name, rating, and photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアプリは、食事のリストを、食事名、レーティング（採点）、及び写真を含めて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This button updates the frames of the selected view and all of its subviews.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このボタンは、選択されたビューおよびそれの全てのサブビューのフレームを更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This causes Interface Builder to automatically update the frames of the affected views when you create the constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたが制約を作成する時に影響を受けるビューのフレームをInterface Builderに自動的に更新させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This causes the navigation controller to push the meal detail scene onto the navigation controller’s stack.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはナビゲーションコントローラに、食事詳細シーンをナビゲーションコントローラの持つスタック上へプッシュさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This cell is a prototype cell for the table.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセルは、テーブルのための原型セルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This change makes it impossible for the user to tap the Done key before typing text into the text field, ensuring that users can never enter an empty string as a meal name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この変更は、ユーザにDoneキーのタップをテキスト欄にテキストをタイプするまでは不可能にして、ユーザが絶対に空の文字列を食事名として入力することがないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This change will make the default Return key on the keyboard more pronounced to the user by changing it into a Done key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この変更は、もともとはReturnキーであるものをそのキーボード上でユーザにより目立つようにそれをDoneキーに変えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code accesses the original, unedited image from the info dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、オリジナル、未編集画像にinfoディクショナリからアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code adds any meals that were loaded to the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは何らかの食事を加えます、それはmeals配列にロードされたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code adds any meals that were successfully loaded to the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、うまくロードされた食事があればmeals配列に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code animates the dismissal of the image picker controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、イメージピッカーコントローラの退去をアニメーションにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code calculates a label string using the button’s index, then assigns it to the button’s accessibilityLabel property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、ラベル文字列をボタンの持つインデックスを使って算出します、それからそれをボタンのaccessibilityLabelプロパティに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code checks whether a row in the table view is selected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、テーブルビューの中のある行が選択されるかどうかを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code computes the location in the table view where the new table view cell representing the new meal will be inserted, and stores it in a local constant called newIndexPath.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードはテーブルビューの中の場所を算出します、そこは新しい食事を表している新しいテーブルビューセルが挿入されるところです、そしてそれをローカル定数newIndexPathに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code configures the meal property with the appropriate values before segue executes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、mealプロパティを適切な値を使ってセグエが終了する前に構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code creates a Boolean value that indicates whether the view controller that presented this scene is of type UINavigationController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、このシーンを提示したビューコントローラが型UINavigationControllerであるかどうかを指し示すブール値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code creates a special type of bar button item that has editing behavior built into it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、それに組み込まれた編集挙動を持つ特別な型のバーボタン項目を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code creates constants from the current text field text, selected image, and rating in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、そのシーンにおける現在のテキスト欄のテキスト、選択された画像、そして格付けから定数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code declares a property on MealTableViewController and initializes it with a default value (an empty array of Meal objects).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行は１つのプロパティをMealTableViewController上で宣言して、それを省略時の値で初期化します（Mealオブジェクトの空の配列）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code defines the basic properties for the data you need to store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、基本的なプロパティをあなたが格納しなければならないデータのために定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code disables the Save button while the user is editing the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、ユーザがテキスト欄を編集している間、Saveボタンを使用不能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code ensures that if the user taps the image view while typing in the text field, the keyboard is dismissed properly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードが請け負うのは、テキスト欄にタイプしている間にユーザがイメージビューをタップしたならば、キーボードがきちんと片付けられることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code fetches the appropriate meal from the meals array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、適切な食事をmeals配列から取ってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code iterates over all of the rating control’s buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、格付けコントロールの持つボタンのすべてにわたって反復します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code iterates through the buttons and sets each one’s selected state based on its position and the rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードはボタンのすべてに対して反復していって、それぞれのものの持つ選択済状態をそれの位置と格付けに基づいて設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code makes the table view show 1 section instead of 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、テーブルビューが０ではなく１つのセクションを表示するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code removes the Meal object to be deleted from meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、Mealオブジェクトを削除して、mealsから消去されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code saves the meals array whenever a meal is deleted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、食事が削除される時はいつでも、meals配列を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code saves the meals array whenever a new one is added or an existing one is updated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、meals配列を、新しいものが加えられるか既存のものが更新される時はいつでも保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code sets each of the views in the table view cell to display the corresponding data from meal object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、テーブルビューセルの中のビューそれぞれに、mealオブジェクトから対応するデータを表示させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code starts by getting the destination view controller, the selected meal cell, and the index path of the selected cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、デスティネーション（行先）ビューコントローラ、選択された食事セル、そして選択されたセルのインデックスパスを得ることによって始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code uses the as? operator so that it can return nil if the downcast fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、as?演算子を使います、そのためそれはダウンキャストが失敗するならばnilを返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code uses the optional type cast operator (as?) to try to downcast the segue’s source view controller to a  MealViewController instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードはオプショナル型キャスト演算子（as?）を使って、このセグエのソースビューコントローラをダウンキャストしてMealViewControllerインスタンスにしようと試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code validates the incoming parameters and returns nil if they contain invalid values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、やってくるパラメータの正当性を立証して、それらが不正な値を含むならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code verifies that the sender is a button, and then uses the identity operator (===) to check that the objects referenced by the sender and the saveButton outlet are the same.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードは、センダーがボタンであることを確かめて、それから同一性演算子（===）を使ってsenderオブジェクトとsaveButtonアウトレットが同じであることを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This comment indicates that this is the section of your code that lists actions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントが示すのは、これがあなたのコードのアクションをリストする部分だということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This comment is used to organize your code and to help you (and anybody else who reads your code) navigate through it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたのコードを系統立てるために、そしてあなたが（およびあなたのコードを読む他の誰でも）それを見ていく助けとするために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This creates a constant with the identifier you set in the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたがストーリーボードにおいて設定した識別子を使って定数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This creates two properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、２つのプロパティを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This declares a property on MealViewController that is an optional   Meal, which means that at any point, it may be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あるプロパティをMealViewController上で宣言します、それはオプショナルのMealです、それが意味するのはいずれかの時点でそれがnilであるかもしれないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This delegate method manages changes to the table rows when it’s in editing mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この委任先メソッドは、テーブルの列への変更を、それが編集モードの時に管理します。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This description explains why your app wants to access the photo library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この説明は、なぜあなたのアプリがフォトライブラリにアクセスしたいのかを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This dismisses the meal detail scene, and returns the user to the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは食事詳細シーンを退去させます、そしてユーザを食事リストに戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This ensures that the system can find and load the image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、システムが画像を見つけてロードできるのを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event has an advantage over .touchDown, because the user can cancel the event by dragging their finger outside the button before lifting it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイベントには.touchDownの長所があります、なぜならユーザがイベントをキャンセルすることが彼らの指をボタンの外側にそれを持ち上げる前にドラッグすることで可能だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exclamation point indicates that the type is an implicitly unwrapped optional, which is an optional type that will always have a value after it is first set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この感嘆符は、その型が暗黙的にアンラップされるオプショナルであることを指し示します、それはオプショナル型で、常にある値をそれが最初に設定された後に持つことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This failure typically happens because an array has not yet been saved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この失敗は、たいてい配列がまだ保存され終わっていないために起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file defines a custom subclass of UIViewController named ViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このファイルはViewControllerという名前のあつらえのUIViewControllerのサブクラス（下位クラス）を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function prints a message to the standard output, which in this case is the Xcode debug console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、あるメッセージを標準出力に印字します、それはこの場合ではXcodeデバッグコンソールになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This gives your tests access to the internal elements of your app’s code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたのテストがあなたのアプリのコードの内部要素へアクセスするようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This implementation is only using the dismiss(animated:completion:) method to dismiss the meal detail scene because you’ve only had to account for the Add button so far.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この実装は、dismiss(animated:completion:)を使って食事詳細シーンを退去させるだけです、なぜならあなたは今のところAddボタンだけを考慮すれば良いからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This imports the unified logging system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、統合ログシステムをインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer calls init(frame:) and passes in a zero-sized rectangle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、init(frame:)を呼び出して大きさゼロの長方形を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) know that the code in this section is related to data persistence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたが（そしてあなたのコードを読む他の誰でもが）この節のコードがデータ永続に関するものだと知る助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) know that this method is related to the navigation flow of your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたが（そしてあなたのコードを読む他の誰でもが）このメソッドがあなたのアプリのナビゲーションの流れに関するものだと知る助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) navigate through your code and identify that this section applies to the image picker implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはコメントであって、あなた（そしてあなたのコードを読む他の誰でも）があなたのコードをあちこち見ていく手助けをするもので、この部分がイメージピッカー実装に適用されるとわかるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a comment to help you (and anybody else who reads your code) navigate through your tests and identify what they correspond to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントは、あなたが（そしてあなたのコードを読む他の誰でもが）あなたのテストをあちこち見ていって、それらが何に対応するのかを確認する助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a directory where your app can save data for the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたのアプリがユーザからのデータを保存できるところのディレクトリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a helper method that you’ll use to update the selection state of the buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはヘルパーメソッド（お手伝いさんメソッド）です、あなたはそれを使ってボタンの選択状態を更新するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a helper method to disable the Save button if the text field is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはヘルパーメソッドで、テキスト欄が空ならばSaveボタンを使用不能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a helper method to load sample data into the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはヘルパーメソッドで、見本データをアプリにロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはナビゲーションバーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the cell’s layout was not designed using Auto Layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、セルのレイアウトが「自動レイアウト」を使って設計されなかったからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the meal detail scene is embedded in its own navigation controller when it’s presented in this manner, which means that the navigation controller is what presents it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、食事詳細シーンがそれ独自のナビゲーションコントローラに埋め込まれるのはこの手法で表現される時であり、それはナビゲーションコントローラがそれを提示するのを意味するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because you added your own bar button to the left side of the navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたがあなた独自のバーボタンをナビゲーターバーの左側へ追加したからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the button’s default image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ボタンの持つ省略時の画像です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the navigation bar provided by the navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ナビゲーションコントローラによって提供されたナビゲーションバーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is where your implementation of UITextFieldDelegate methods comes in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、UITextFieldDelegateのあなたの実装のメソッドが登場するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lesson gets you familiar with Xcode, the tool you use to write apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンは、あなたをXcodeに親しませます、それはあなたがアプリを書くために使うツールです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets Interface Builder instantiate and draw a copy of your control directly in the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、Interface Builderにあなたのコントロールのコピーを直接にキャンバスの中にインスタンス化させて描画させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the data persist across multiple runs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、そのデータを複数の実行をまたいで永続させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the system call your action method when the button is tapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、システムにあなたのアクションメソッドをボタンがタップされる時に呼び出させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the user know both the control’s current value and the result of tapping the currently selected button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ユーザにコントロールの持つ値と、現在選択されたボタンをタップする結果の両方を知らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets you easily access the full power of Auto Layout, while greatly reducing the complexity of your layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたを「自動レイアウト」の完全な能力に簡単にアクセスさせて、同時にあなたのレイアウトの複雑さを大いに減らします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets you encapsulate and protect methods, ensuring that they are not unexpectedly or accidentally called from the outside.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたにメソッドをカプセル化させて保護させて、それらが思いがけなくまたは誤って外側から呼び出されないのを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This line is not strictly necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行は、厳密には必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This line of code sets the image picker controller’s source, or the place where it gets its images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコード行は、イメージピッカーコントローラのソースを、またはそれがそれの画像を得るところの場所を、設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This logs a debug message to the console if the save succeeds, and an error message to the console if the save fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、保存が成功するならばデバッグメッセージをコンソールに、そして保存が失敗するならばエラーメッセージをコンソールに記録します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This meal list becomes the initial scene for your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この食事リストは、あなたのアプリの最初のシーンとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means an error occurred that was serious enough to cause the app to abort.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あるエラーが起こり、それはアプリ中断の原因となるのに十分に重大だったことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the app can load the images using the shorter UIImage(named:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、アプリは画像をより短いUIImage(named:)メソッドを使ってロードできるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the calling code must validate the inputs before calling the initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、コードの呼び出しはその入力を、イニシャライザを呼び出す前に検証されなければならないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the text field no longer fills the screen from margin to margin.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、テキスト欄はもはや余白から余白まで画面いっぱいではないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means the interface you created in the storyboard is simply a prototype for your cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、あなたがストーリーボードにおいて作成したインターフェイスが単純にあなたのセルに対する原型であるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means you can click the back button in the meal detail scene to get back to the meal list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これの意味は、あなたは戻るボタンを食事詳細シーンで押すことで、食事リストに戻れるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means you can implement the protocol’s methods to handle text input, and you can assign instances of the ViewController class as the delegate of the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはあなたがプロトコルの持つメソッドを実装することでテキスト入力を取り扱うことができるのを意味します、そしてあなたはViewControllerクラスのインスタンスをテキスト欄の委任先として任命できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means you can write its value as the abbreviated form .photoLibrary instead of UIImagePickerControllerSourceType.photoLibrary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、あなたがその値をUIImagePickerControllerSourceType.PhotoLibraryではなく省略形.PhotoLibraryを使って書けるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method adds new buttons using the updated size and count; however, the current implementation doesn’t get rid of the old buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、新しいボタンを更新された大きさと数を使って追加します；しかしながら、現在の実装は古いボタンの除去をしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method attempts to archive the meals array to a specific location, and returns true if it’s successful.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、meals配列を特定の場所にアーカイブして、それがうまくいくならばtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method attempts to unarchive the object stored at the path Meal.ArchiveURL.path and downcast that object to an array of Meal objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、パスMeal.ArchiveURL.pathに格納されるオブジェクトをアンアーカイブして、そしてそのオブジェクトをMealオブジェクトからなる配列へとダウンキャストすることを試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method gives you a chance to dismiss the UIImagePickerController (and optionally, do any necessary cleanup).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはあなたにUIImagePickerControllerを片付ける機会を与えます（そして随意に、何らかの不可欠な掃除を行います）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method gives you a chance to do something with the image or images that a user selected from the picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはあなたにある機会を与えるので、それで何かをユーザがピッカーから選択した画像または複数の画像を使って行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method has a return type of an optional array of Meal objects, meaning that it might return an array of Meal objects or might return nothing (nil).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、Mealオブジェクトのオプショナル配列の型を返します、これは、それがMealオブジェクトの配列を返すか、または無（nil）を返すかもしれないのを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is called prepare(for:sender:), and it gives you a chance to store data and do any necessary cleanup on the source view controller (the view controller that the segue is coming from).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、prepare(for:sender:)と呼ばれます、そしてそれはあなたにデータの格納や何らかの必要な片付けをソース（発生）ビューコントローラ（セグエがそこから始まるビューコントローラ）上で行う機会を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method must be marked with the IBAction attribute and take a segue (UIStoryboardSegue) as a parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、IBAction属性で記しされて１つのセグエ（UIStoryboardSegue）をパラメータとして取らなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns a Boolean value that indicates whether the system should process the press of the Return key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはブール値を返します、それはシステムがReturnキーの押下を処理すべきかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns an array of URLs, and the first parameter returns an optional containing the first URL in the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはURLからなる配列を返します、そして最初パラメータは配列中の最初のURLを含んでいるオプショナルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns an optional Int because the instance you’re searching for might not exist in the collection you’re searching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、オプショナルのIntを返します、なぜならあなたが探しているインスタンスがあなたがそこで見つけようとしているコレクションの中に存在しないかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method simply indicates that the content view has been added to the app’s view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、単にコンテンツビューが間もなくアプリの持つビュー階層へ加えられたところであるのを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method simply indicates that the content view is about to be added to the app’s view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、単にコンテンツビューが間もなくアプリの持つビュー階層へ加えられるところであるのを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This occurs when the user touches the button, and then lifts their finger while the finger is still within the button’s bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ユーザがボタンをタッチして、それから指がまだボタンの境界線内にある間に彼らの指を持ち上げる時に発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operation creates a property for the object in your view controller file, which lets you access and manipulate that object from code at runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この行動は、あなたのビューコントローラファイルの中にそのオブジェクトのためのプロパティを作成します、それはあなたにそのオブジェクトを実行時にコードからアクセスおよび操作させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operation creates a method in your view controller file that gets triggered when a user interacts with the object that the action method is attached to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この操作は、あなたのビューコントローラファイルの中にひとつのメソッドを作成し、それはそのアクションメソッドが取り付けられたオブジェクトとユーザが相互作用するときに作動することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This outlet is similar to the text field, except for its name and its type (which is UILabel, to match the type of object that’s in the storyboard).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このアウトレットはテキスト欄と似ています、その名前とその型（それはUILabelです、ストーリーボードの中にあるオブジェクトの型に合わせて）を除いては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This pattern is extremely common in iOS app programming, and you’ll be seeing much more of it throughout the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパターンは、iOSアプリプログラミングにおいて非常にありふれたものです、そしてあなたはこれらのレッスンを通してもっとたくさん見ることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property defines the navigation bar’s appearance for that view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、ナビゲーションバーの外観をそのビューコントローラに対して定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property stores a reference to the app’s window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、アプリのウインドウへの参照を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This protocol defines a number of methods you use to set up your app, to respond to the app’s state changes, and to handle other app-level events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロトコルは、あなたがあなたのアプリを設定するために、アプリの状態変化に応答するために、そして他のアプリ水準のイベントを取り扱うために使うための多くのメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This provides space between the stack view and the edge of the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、スタックビューとこのシーンの端の間の空白を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This replaces the current cell with a new cell that contains the updated meal data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、現在のセルを更新されたmealデータを含む新しいセルで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This returns an optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはオプショナルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sets the title for the table view controller’s navigation item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、テーブルビューコントローラの持つナビゲーション項目に対してタイトルを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This setting causes Interface Builder to draw a blue bounding box around all the views in the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この設定は、Interface Builderにキャンバスの中のすべてのビューの周りに青い境界ボックスを描画させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This simplifies the switch statement’s logic, since you won’t need to deal with optionals inside the cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、switch文の論理を簡単なものにします、あなたはケース節内のオプショナルを解決する必要があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This style of app design where view controllers serve as the communication pipeline between your views and your data model is known as MVC (Model-View-Controller).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラがあなたのビューとあなたのデータモデルの間で通信の輸送菅としての役目をするこの形式のアプリ設計は、MVC（モデル-ビュー-コントローラ）として知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This table describes the changes to Start Developing iOS Apps (Swift).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この表は、iOSアプリの開発を始める（Swift）への変更を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This tells the layout engine to create constraints that define the view’s size and position based on the view’s frame and autoresizingmask properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、レイアウトエンジンに制約を作成するように言い、それはビューの大きさと位置をビューのframeとautoresizingmaskプロパティに基づいて定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This tells the stack view that it should no longer calculate the button’s size and position—but the button is still a subview of the stack view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、スタックビューにそれはもはやボタンの大きさと位置を計算すべきでないことを伝えます — しかしボタンはまだスタックビューのサブビューの１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This time you should be able to click the image view to pull up an image picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、あなたはイメージビューをクリックしてイメージピッカーをプルアップできなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This time, however, the text field extends past the screen’s right edge.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今度は、しかしながら、テキスト欄は画面の右端を越えて伸びています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value is only used while designing your interface in Interface Builder; at runtime, the layout engine uses the view’s actual intrinsic content size instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、あなたのインターフェイスをInterface Builderにおいて設計している間に使われることができるだけです；実行時には、レイアウトエンジンはそのビューの持つ実際の固有コンテンツサイズを代わりに使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This view controller will manage the view that displays the list of meals, and have a reference to the data model behind what’s shown in the user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューコントローラは、食事リストを表示するビューを管理します、そしてユーザインターフェイスにおいて見せられるものの背後にあるデータモデルへの参照を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This way, when you need to use the key in multiple places throughout your code, you can use the constant instead of retyping the string (which increases the likelihood of mistakes).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>こうすることで、あなたのコードにおいて複数の箇所でキーを使う必要がある時、あなたはその文字列をなんどもタイプする（間違いの可能性を増やす）ことの代わりに定数を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will correct the position of every view in the scene, based on their current constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、シーン中の全てのビューの位置を、それらの現在の制約に基づいて訂正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will help you track the app’s flow if you have to debug your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたがあなたのコードをデバッグしなければならないならば、あなたがアプリのフローを追跡する助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This window represents the root of your app’s view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このウインドウは、あなたのアプリのビュー階層のルートを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This work is done by the UIApplicationMain attribute  (@UIApplicationMain), which appears toward the top of the file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この仕事は、UIApplicationMain属性（@UIApplicationMain）によって行われます、それはファイルの一番上の方に現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Those buttons aren’t linked to any actions yet, so you can click them, but they don’t do anything.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらのボタンは、まだどんなアクションとも結び付けられません、それであなたはそららをクリックできますが、それらは何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throwing a fatal error here terminates the app and prints a useful error message to the console, helping you find and fix any problems while you design and test your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでの致命的なエラーのスローは、アプリを終了して役に立つエラーメッセージをコンソールに出力して、あなたがあなたのアプリを設計してテストする間あなたが何らかの問題を見つけて修正する助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To accomplish this, you’ll use an unwind segue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを成し遂げるために、あなたは巻き戻しセグエを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Auto Layout constraints to the meal scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「自動レイアウト」制約を食事シーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a Meal property to MealViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MealプロパティをMealViewControllerに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a button to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンをあなたのシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a label to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンにラベルを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a navigation controller to the meal detail scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラ食事詳細シーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a navigation controller to your meal list scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラをあなたの食事リストシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a new item, hover over the last item in the property list, and click on the add button when it appears (or select Editor &gt; Add Item).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい項目を加えるには、プロパティリストの最後の項目上でマウスカーソルを動かして、追加ボタンをそれが現れたらクリックしてください（またはEditor &gt; Add Itemを選択してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a new meal or edit an existing one, users navigate to a different screen where they can specify a name, rating, and photo for a particular meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい食事を加えたり既存のものを編集するために、ユーザは異なる画面に進んでいきます、そこで彼らは名前、レーティング、そして写真を特定の食事に対して指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a photo library usage description</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フォトライブラリ使用説明を加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a scene with a table view to your storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを持つシーンをあなたのストーリーボードに追加するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a tap gesture recognizer to your image view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タップジェスチャリコグナイザをあなたのイメージビューに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a text field to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄をあなたのシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add accessibility labels, values, and hints</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティ・ラベル、値、およびヒントを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an Edit button to the table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Editボタンをテーブルビューに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an action method to MealTableViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクションメソッドをMealTableViewControllerに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an action to the button</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクションをボタンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an image to your project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>画像をあなたのプロジェクトに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add an image view to your scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをあなたのシーンに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add images to iOS Simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSシミュレータに画像を加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add images to your project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかの画像をあなたのプロジェクトに加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add inspectable properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>調査可能なプロパティを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add rating properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けプロパティを加えるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To address this uncertainty, you can write unit tests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この不確実性に取り組むために、あなたはユニットテストを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adjust the text field width within the stack</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄の幅をスタック内部で調整するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adopt Auto Layout, wrap your existing interface elements in a stack view, and then add the constraints needed to position the stack view in the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「自動レイアウト」を採用するには、あなたの既存のインターフェイス要素を１つのスタックビューの中に包んでから、シーンの中でそのスタックビューが位置するのに必要とされる制約を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adopt the UIImagePickerControllerDelegate and UINavigationControllerDelegate protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIImagePickerControllerDelegateとUINavigationControllerDelegateプロトコルに準拠するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To adopt the UITextFieldDelegate protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateプロトコルを採用するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To attempt to cast an object to one of its subclass types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトをそれのサブクラス型の１つと見なす試み。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to determine when this happens, add the Save button as an outlet in MealViewController.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが起こった時を判定可能にするには、SaveボタンをアウトレットとしてMealViewController.swiftに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to encode and decode itself and its properties, the Meal class needs to conform to the NSCoding protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ自身とそれのプロパティを符号化および復号化するのが可能であるには、MealクラスはNSCodingプロトコルに準拠する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be able to rate a meal, users need a control that lets them select the number of stars they want to assign to the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事に格付けできるようにするために、ユーザに必要なのはあるコントロールです、それは彼らがその食事に付けたい星の数を選ばせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To begin designing the user interface (UI), interaction, and behavior of this control, start by creating a custom stack view (UIStackView) subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>設計をユーザインターフェイス (UI)、相互作用、そしてこのコントロールの挙動に対して始めるには、あるカスタムスタックビュー（UIStackView）サブクラスを作成することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To build and run your app, use the iOS Simulator app that’s included in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリをビルドして実行するには、iOS Simulatorアプリを使ってください、それはXcodeに含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To change the implementation of the cancel action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンセルアクションの実装を変更するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To change the segue style</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエの形式を変更するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clean up the UI</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIを掃除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clean up the code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードを掃除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clean up unused pieces of the project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトの使用されない部分を掃除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To clear out the old buttons, add the following code to the beginning of the setupButtons() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>古いボタンを処分するには、以下のコードをsetupButtons()メソッドの始まりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To collapse the console, use the Debug area toggle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンソールを折り畳むためには、Debug区画切り替えボタンを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure a custom cell for your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムセルをあなたのテーブルビューに対して構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure and display cells in your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルを構成してあなたのテーブルビューで表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the Add button in the meal detail scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加ボタンを食事詳細シーンにおいて構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the navigation bar in the meal detail scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事詳細シーンにおいて構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the navigation bar in the meal list</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションバーを食事リストにおいて構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを設定し構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the table view cell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルを構成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the text field’s keyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このテキスト欄のキーボードを設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To configure the text field’s placeholder text</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄のプレースホルダテキストを設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To conform to NSCoding, the Meal needs to subclass NSObject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingに準拠するために、MealはNSObjectのサブクラスになる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect a rating control outlet to ViewController.swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けコントロールアウトレットをViewController.swiftに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the Save button to the MealViewController code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SaveボタンをMealViewControllerコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the gesture recognizer to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザをViewController.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the image view to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューをViewController.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the label to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルをViewController.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the text field to the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄をViewController.swiftコードと接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To connect the views to the MealTableViewCell.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューをMealTableViewCell.swiftコードに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a button in your view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボタンをあなたのビューの中に作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a file path to data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データへのファイルパスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new data model class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいデータモデルを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新規プロジェクトを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a setDefaultLabelText action in the ViewController.swift code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>setDefaultLabelTextアクションをViewController.swiftコードの中に作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a subclass of UIStackView</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIStackViewのサブクラスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a subclass of UITableViewCell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITableViewCellのサブクラスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a subclass of UITableViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITableViewControllerのサブクラスを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a test case, create a method whose name starts with the word test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるテスト項目を作成するには、名前が単語testで始まるメソッドを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a total of five buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合計５つのボタンを作成するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a total of five buttons, use a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合計５つのボタンを作成するために、for-inループを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an adaptive interface, you’ll need to specify how the interface should adjust to different screen sizes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>適応インターフェイスを作成するには、あなたはどのようにインターフェイスが異なる画面サイズに適応すべきかを指定する必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an outlet, Control-drag from a particular object in your storyboard to a view controller file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレットを作成するには、あなたのストーリーボードの特定のオブジェクトからビューコントローラファイルへとコントロール-ドラッグします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create and implement a cancel action method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンセルアクションメソッドを作成して実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To declare the control as @IBDesignable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロールを@IBDesignableとして宣言するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a data model for a meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデルを食事に対して定義するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define interaction in your app, your view controller source code needs to be able to communicate with the views in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリにおける相互作用を定義するために、あなたのビューコントローラ・ソースコードは、あなたのストーリーボードの中のビューと通信可能にされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define the behavior of something in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある物の挙動をコードにおいて定義する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To delete a meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある食事を削除するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To design the interface of the custom table cell</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムテーブルセルのインターフェイスを設計するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To develop iOS apps using the latest technologies described in these lessons, you need a Mac computer (macOS 10.11.5 or later) running the latest version of Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのレッスンにおいて解説される最新のテクノロジーを使ってiOSアプリを開発するために、あなたはXcodeの最新版が動作するMacコンピュータ（OS X 10.11.5以降）を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To disable the Save button when there’s no item name</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Saveボタンを項目名がない時は使用不可能にするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display a default image in the image view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期画像をイメージビューで表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display a section in your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セクションをあなたのテーブルビューにおいて表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display any real data in your table cells, you need to write code to load that data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの実際のデータをあなたのテーブルセルに表示するために、あなたが必要とするのはコードを書いてそのデータをロードすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display dynamic data, a table view needs two important helpers: a data source and a delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的データを表示するために、テーブルビューは２つの重要な手助け：データソースと委任先を必要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display the view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューを表示するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To display your custom control, you need to add a stack view to your storyboard and establish a connection between the stack view and the code you just wrote.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのカスタムコントロールを画面表示するには、あなたはあるスタックビューをあなたのストーリーボードに加えて、連結をスタックビューとあなたがちょうど書いたコードとの間に確立する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do so, you define a simple class with a name, a photo, and a rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうするために、あなたはある簡単なクラスを名前、写真、そして格付けを使って定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do that, add a property observer to each property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それをするために、プロパティオブザーバを各プロパティに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do this, add a private method, setupButtons(), and call that method from both initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを行うには、プライベートメソッド、setupButtons()を加えて、そのメソッドを両方のイニシャライザが呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To download the latest version of Xcode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最新版のXcodeをダウンロードするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To extract an underlying value from an optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>裏に潜んだ値をオプショナルから引き出すためのもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To fix the error</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このエラーを修正するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To fix this, open Main.storyboard and select the RatingControl stack view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを修正するために、Main.storyboardを開いてRatingControlスタックビューを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To fix this, you define the control as @IBDesignable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを修正するために、あなたはコントロールを@IBDesignableとして定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To fix this, you need to lay out the cell using nested stack views and Auto Layout constraints; however, that is left as an exercise for the reader.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを修正するには、あなたはセルを入れ子にされたスタックビューと「自動レイアウト」制約を使ってレイアウトする必要があります；しかしながら、それは読者に練習として残されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To give the meal detail scene a navigation bar when presented modally, embed it in its own navigation controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダル表示の時に食事詳細シーンにナビゲーションバーを与えるために、それをそれ自身のナビゲーションコントローラに埋め込んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To give users the ability to select a picture, you’ll need to implement two of the delegate methods defined in UIImagePickerControllerDelegate:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザに図像を選ぶ能力を与えるために、あなたが実装する必要があるのはUIImagePickerControllerDelegateにおいて定義した委任先メソッド２つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To help you identify and fix any bugs, if the initializer does fail, the fatalError() function prints the error message to the console and the app terminates.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがバグを同定して修正するのを助けるため、イニシャライザが失敗するならば、fatalError()関数がエラーメッセージをコンソールに出力してアプリを終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To help you understand how to define interaction between elements in the user interface, you’ll configure this label to display the text the user enters into the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どうやってユーザインターフェイスにおける要素間の相互作用を定義するかをあなたが理解する助けとして、あなたはこのラベルをユーザがテキストフィールドに入力するテキストを表示するように構成設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To identify which segue is occurring</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのセグエが生じているかを識別するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement a coding key structure</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号化キー構造体を実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the UITextFieldDelegate protocol method textFieldDidEndEditing(_:)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateのプロトコルメソッドのtextFieldDidEndEditing(_:)を実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the UITextFieldDelegate protocol method textFieldShouldReturn(_:)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UITextFieldDelegateのプロトコルメソッドのtextFieldShouldReturn(_:)を実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the encodeWithCoder NSCoding method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodeWithCoder NSCodingメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the imagePickerController(_:didFinishPickingMediaWithInfo:) method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerController(_:didFinishPickingMediaWithInfo:)メソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the imagePickerControllerDidCancel(_:) method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>imagePickerControllerDidCancel(_:)メソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the initializer to load the meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事をロードするイニシャライザを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the label reset action in the ViewController code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラベルリセットアクションをViewControllerコードの中に実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the method to load the meal list</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストをロードするメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the method to save the meal list</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストを保存するメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the prepare(for:sender:) method on MealViewController</seg>
      </tuv>
      <tuv lang="JA">
        <seg>prepare(for:sender:)メソッドをMealViewController上で実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the rating action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格付けアクションを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To implement the selectImageFromPhotoLibrary(_:) action method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selectImageFromPhotoLibrary(_:)アクションメソッドを実装するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To indicate that a class, structure, or enumeration  conforms to a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、構造体、または列挙がプロトコルに準拠することを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To keep things simple, you’ll update the mealNameLabel object’s text value whenever the user enters text into the text field and taps Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>物事を単純に保つため、あなたはmealNameLabelオブジェクトの持つtext値を、ユーザがテキストをテキスト欄に入力してReturnをタップするごとに更新するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To keep things simple, you’ll use the original, unedited image for the meal photo.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>物事を単純に保つために、あなたはオリジナル、食事写真の無編集画像を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To link the Save button to the unwindToMealList action method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SaveボタンをunwindToMealListアクションメソッドに接続するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To load the initial data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期データをロードするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To load the meal list at the appropriate time</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストを適切な時にロードするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To look at the AppDelegate.swift source file</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AppDelegate.swiftソースファイルを見るには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To look at the unit test file for FoodTracker</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoodTrackerのためのユニットテストファイルを見つけるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it clear which coding key corresponds to each piece of data, create a structure to store the key strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どの符号化キーがデータ片のそれぞれに対応するかわかりやすくするために、ある構造体を作成してキー文字列を格納してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this code work for your app, you’ll need to change the identifier to the prototype cell identifier you set in the storyboard (MealTableViewCell), and then add code to configure the cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードがあなたのアプリのために働くようにするには、あなたはこの識別子をあなたがストーリーボード（MealTableViewCell）で設定した原型セル識別子に変えて、それからセルを構成設定するコードを加える必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To open your storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードを開くには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override or extend that behavior, you override the methods defined on UIViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その挙動をオーバーライドしたり拡張したりするために、あなたはUIViewControllerで定義されるメソッドをオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override the initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらイニシャライザをオーバーライドするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To perform any sort of editing on a table view, you need to implement one of its delegate methods, tableView(_:commit:forRowAt:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの種類の編集をテーブルビュー上で行うために、あなたが必要とするのは、それの委任先メソッドの１つ、tableView(_:commit:forRowAt:)を実装することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To perform repeatedly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返して実行するようにする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To point the Table View Controller to MealTableViewController.swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューコントローラをMealTableViewController.swiftの方に向けるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To preview a different screen size, click the Add button at the bottom of the assistant editor, and select iPhone SE.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なる画面サイズをプレビューするには、Addボタンをアシスタントエディタの一番下でクリックして、iPhone SEを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To preview the landscape orientation, click the Rotate button at the bottom of the preview.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>水平方向でプレビューするには、Rotateボタンをプレビューの一番下でクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To preview your interface</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのインターフェイスをプレビューするには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To remove the autogenerated constraints, set the translatesAutoresizingMaskIntoConstraints property to false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動生成された制約を取り除くために、translatesAutoresizingMaskIntoConstraintsプロパティをfalseに設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rename the ViewController.swift file</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewController.swiftファイルを改名するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To replace an implementation of a method defined on a superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラス上で定義されるあるメソッドの実装を置き換える。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To return the number of rows in your table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテーブルビューの中の行の数を返すには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run your app in the simulator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリをシミュレータで実行するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To save the meal list when a user adds, removes, or edits a meal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが食事を追加、削除、または編集したとき食事リストを保存するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the completed sample project for this lesson, download the file and view it in Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレッスンの完成見本プロジェクトを見るには、このファイルをダウンロードしてXcodeでそれを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To set star images for the buttons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>星画像をボタンに設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To set the ViewController object as the delegate of its nameTextField property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerオブジェクトをそれのnameTextFieldプロパティの委任先として設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To set the meal list as the initial scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事リストを最初のシーンとして設定するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To subclass NSObject and conform to NSCoding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectのサブクラスにして、NSCodingに準拠するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To understand when these methods get called and what they need to do, it’s important to know how text fields respond to user events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何時これらのメソッドが呼ばれるか、何をそれらは実行に必要とするのかを理解するために、重要となるのは、どうやってテキスト欄がユーザイベントに応答するのかを知ることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update an existing meal, you’ll need to modify the unwindToMealList(sender:) action method to handle the two different cases: adding a new meal and editing an existing one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の食事を更新するには、あなたはunwindToMealList(sender:)アクションメソッドを修正して２つの異なる事例：新しい食事の追加および既存のものの編集、を取り扱う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the control, you need to reset the control’s buttons every time these attributes change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロールを更新するには、あなたはコントロールの持つボタンをそれら属性を変えるたびごとに再設定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the implementation of unwindToMealList(sender:) to both add and edit meals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unwindToMealList(sender:)の実装を更新して食事の追加も編集も更新するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To update the implementation of viewDidLoad</seg>
      </tuv>
      <tuv lang="JA">
        <seg>viewDidLoadの実装を更新するには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To view the outline view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビューで眺めるには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write a unit test for Meal object initialization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストをMealオブジェクト初期化に対して書くには</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Together, these lines define the button as a fixed-size object in your layout (44 point x 44 point).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合わせて、これらの行はボタンをあなたのレイアウトの中の規定サイズオブジェクト（44ポイント × 44ポイント）として定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transitions between scenes are called segues.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーン間の転換はセグエ（遷移。切れ目なく続くこと）と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try changing the Star Size and Star Count attributes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Star SizeとStar Count属性の変更を試みてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to use these versions while working on the tutorials.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのバージョンをチュートリアルに取り組む間は使うようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try typing the second line instead of just copying and pasting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の行をコピーアンドペーストするのではなくタイプすることを試みてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 0 in the left and right boxes, and type 20 spacing in the top box.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>0を左と右のボックスでタイプしてください、そして20の間隔を上部ボックスでタイプしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 0 in the right box.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左のボックスで0をタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type 320 in both the Width and Height fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>320をWidth（幅）とHeight（高さ）欄にタイプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type New Meal and press Return to save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>New Mealをタイプしてからリターンキーを押し保存してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Your Meals and press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Your MealsをタイプしてReturnを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically buttons respond to the .touchUpInside event.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的にボタンは.touchUpInsideイベントに応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, iOS calls viewDidLoad() only once, when its content view is first created; however, the content view is not necessarily created when the controller is first instantiated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>通常は、iOSはviewDidLoad()をただ一度だけ、、それが最初に作成される時に呼び出します；しかしながら、コンテンツビューは必ずしもコントローラが最初にインスタンス化される時に作成されるわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, when you are using Auto Layout, you want to replace these autogenerated constraints with your own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的に、あなたが自動レイアウトを使っている場合、あなたはこれら自動生成される制約をあなた独自のものと置き換えたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UIKit</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIKit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under the comment, add the following method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメントの下で、以下のメソッドを加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under the comment, add the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下で、以下を加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand how to create views programmatically</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにビューを作成するかプログラム的に理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the View Controller Lifecycle</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラのライフサイクルを理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the delegation pattern</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デリゲートパターンの理解</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the difference between static properties and instance properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的プロパティとインスタンスプロパティの間の違いを理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the key components of a table view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューの鍵となる部分を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the roles of table view delegates and data sources</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビュー委任先とデータソースの役割を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the view controller life cycle and its callbacks (for example, viewDidLoad, viewWillAppear and viewDidAppear)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラのライフサイクルとそれのコールバックを理解する（例えば、viewDidLoad、viewWillAppearおよびviewDidAppear）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understanding and implementing data persistence is a vital part of iOS app development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データ永続の理解と実装は、iOSアプリ開発の極めて重要な部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unfortunately, the Save button does not work yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あいにく、Saveボタンはまだ機能しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unfortunately, things no longer look quite right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あいにく、物事はもはや全く正しく見えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unit testing is an essential part of writing code because it helps you catch errors that you might otherwise overlook.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテストを行うことは、コードを記述することの極めて重要な部分です、なぜならそれは、あなたがうっかり見落とすエラーを捕らえる手助けをするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless you are doing something highly unusual, you should use this class provided by Xcode to initialize your app and respond to app-level events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが非常に変わった何事かをしない限り、あなたはXcodeによって提供されるこのクラスを使うことで、あなたのアプリを初期化してアプリ水準のイベントに応答すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unwind segues provide a simple method for passing information back to an earlier view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエは、単純なメソッドを以前のビューコントローラへさかのぼって渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Update the template’s identifier to the cellIdentifier variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>雛形の識別子をcellIdentifier変数へ更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use UIStackView as a container</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIStackViewをコンテナとして使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use switch statements instead of if statements when selecting between multiple options.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数の選択肢から選ぶ場合、switch文をif文の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Auto Layout to lay out a UI that automatically adapts to the user’s device size</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Auto Layout（自動レイアウト、自動配置）を使ってユーザーのデバイス（機器）の大きさに自動的に適応するUIを設置する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Core Data: Unselected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Core Dataの使用：非選択。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a switch statement to assign custom strings if the rating is 0 or 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>switch文を使ってカスタム文字列を割り当ててください、もしratingが0または1なら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a navigation controller and show segues to navigate through hierarchical data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラと表示セグエを使って、階層データをあちこち閲覧してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use modal segues to present tasks that the user must complete before continuing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダルセグエを使って、ユーザが続けていく前に完了しなければならない作業を提示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use property observers to observe and respond to changes in the property’s value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバを使って、プロパティの持つ値の変化を監視して応答してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use segue identifiers to determine which segue is occurring</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエ識別子を使って、どのセグエが現れているか確かめる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use stack views to create robust, flexible layouts</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューを使って、頑丈で、柔軟なレイアウトを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the print() function to check that the ratingButtonTapped(_:) action is linked to the button as expected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print()関数を使ってratingButtonTapped(_:)アクションが期待されるようにボタンとリンクされるか確認してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Fix-it to insert the required keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Fix-itを使ってrequiredキーワードを挿入してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Object library to find a Horizontal Stack View object and drag it onto the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objectライブラリを使ってHorizontal Stack Viewオブジェクトを見つけて、それをテーブルセル上にドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Object library to find a Label object and drag it onto the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを使ってLabelオブジェクトを探してそれをテーブルセル上にドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Object library to find an Image View object and drag it onto the table cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトライブラリを使ってImage Viewオブジェクトを探してそれをテーブルセル上へドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the asset catalog to add image assets to a project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログ（資産目録）を使用して画像資産をプロジェクトに加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the space below this comment to create private methods—methods with the private modifier before the func introducer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコメントの下の空間を使ってプライベートメソッド — private修飾子をfunc導入子の前に持つメソッド、を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the text field’s placeholder text to prompt the user to enter the name of a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このテキスト欄のプレースホルダテキスト（仮に入れておくテキスト）を使って、新しい食事の名前を入力するようユーザに促してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this image from the Images/ folder of the downloadable file at the end of this lesson, or use your own image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この画像を、このレッスンの終わりでダウンロード可能なファイルのImages/フォルダから使ってください、またはあなた独自の画像を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to perform any additional setup required by your view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、あなたのビューコントローラによって必要とされる追加的な準備を何であれ実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to trigger any operations that need to occur as soon as the view is presented onscreen, such as fetching data or showing an animation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、コンテンツビューが画面上に提示されるやいなや起こる必要がある何らかの演算を引き起こしてください、例えばデータを取ってきたりアニメーションを表示するなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to trigger any operations that need to occur before the content view is presented onscreen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、コンテンツビューが画面上に提示される前に起こる必要がある何らかの演算を引き起こしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use unwind segues to implement navigation back to an existing view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエを使って、既存のビューコントローラに戻るナビゲーションを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Users can choose a rating for a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザは、ある食事の格付けを選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use an array to store and work with data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列を使ったデータの保存と活用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use gesture recognizers to generate events</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザ（身振り認識）を使ってイベントを生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NSCoding protocol to read and write data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingプロトコルを使ってデータを読み書きする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a guard statement for requirements improves the readability of your code, compared to doing the same check with an if statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要件のためにguard文を使うことは、同じ検査をif文ですることと比較して、あなたのコードの読みやすさを改善します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the UIApplicationMain attribute is equivalent to calling the UIApplicationMain function and passing your AppDelegate class’s name as the name of the delegate class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIApplicationMain属性を使用することは、UIApplicationMain関数を呼び出してあなたのAppDelegateクラスの名前をデリゲートクラスの名前として渡すことに同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the NSCoding approach, the  Meal class is in charge of storing and loading each of its properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingの手法を使って、Mealクラスはそれのプロパティの格納とロードの世話をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View and rearrange UI elements using the outline view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UI要素をアウトラインビューを使って表示して位置を直す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View controllers coordinate the flow of information between the app’s data model, which encapsulates the app’s data, and the views that display that data, manage the life cycle of their content views, handle orientation changes when the device is rotated, define the navigation within your app, and implement the behavior to respond to user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらビューコントローラは、アプリのデータをカプセル化するアプリのデータモデルとそのデータを表示するビューとの間の情報の流れを調整して、それらのコンテンツビューのライフサイクルを管理して、機器が回転される時に方向変更を取り扱い、あなたのアプリ内部の見て行き方を定義して、そしてユーザ入力への応答の挙動を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>View this set of incremental lessons as a guided introduction to building your first app—including the tools, major concepts, and best practices that will ease your path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この一連の徐々に進むレッスン（授業）を、あなたの初めてのアプリ作成のための指導付き入門書だと考えてください—それはあなたの道行きを楽にするツール、主要な概念、そして最良の慣行を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views are arranged in a hierarchical structure called the view hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、ビュー階層と呼ばれる、ある階層構造の中に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views are instances of the UIView class or one of its subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューはUIViewクラスまたはそれのサブクラスの１つのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views have a variety of useful built-in behaviors, including displaying themselves onscreen and reacting to user input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、それら自身を画面上で表示したりユーザ入力に反応したりを含む、いろいろの有用な組み込みの挙動を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Views not only display themselves onscreen and react to user input, they can serve as containers for other views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューは、それ自身を画面上で表示してユーザの入力に反応するだけではありません、それは他のビューの容れ物としての役割をすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>VoiceOver is a revolutionary screen reader for blind and low vision users.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>VoiceOverは、視覚障害および低視力ユーザのための革命的な画面読み上げ機構です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>VoiceOver reads your user interface to the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>VoiceOverは、あなたのユーザインターフェイスをユーザのために読み上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>VoiceOver, however, often requires a little attention.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>VoiceOverは、しかしながら、しばしば少しの注意が必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Watch the Xcode toolbar as the build process completes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcoceツールバーがビルドプロセスが完了するのを見守ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Weak references help prevent reference cycles; however, to keep the object alive and in memory you need to make sure some other part of your app has a strong reference to the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>弱い（weak）参照は参照循環を防ぐ助けとなります；しかしながら、オブジェクトを生存させてメモリに保つためにはあなたはあなたのアプリの何か他の部分がそのオブジェクトに対して強い参照を持つことを確かなものにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What a user types using that keyboard gets inserted into the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがキーボードを使ってタイプすることは、テキスト欄へと挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens if a user tries to save a meal with no name?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが食事を名前なしで保存しようとするとき何が起こるでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens when you click on the image view?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがイメージビューの上でクリックするとき何が起こるでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What’s Next?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次はなに？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Xcode brings up the list of potential completions, scroll through the list until you find the one you want and then press Return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeが見込みのある補完のリストを提出する場合、そのリストをあなたが望むものを見つけるまでずっとスクロールして、それからリターンキーを押してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Xcode creates a new Swift file, it imports the Foundation framework by default, letting you work with Foundation data structures in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeが新しいSwiftファイルを作成する場合、それはFoundationフレームワークを初期状態でインポートし、あなたにFoundationデータ構造をあなたのコードで扱わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a ViewController instance is loaded, it sets itself as the delegate of its nameTextField property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ViewControllerインタンスがロードされる時、それはそれ自身をそれのnameTextFieldプロパティの委任先として設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a class is a subclass of another class, it gets all of its behavior (methods, properties, and other characteristics) from its superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスが別のクラスのサブクラスである時、それはそれのスーパークラスからその挙動の全て（メソッド、プロパティ、および他の特徴）を獲得します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a user taps a star, that star and the stars preceding it are filled in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがある星をタップするとき、その星とそれの前にある星が塗りつぶされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a user taps the image view, they should be able to choose a photo from a collection of photos, or take one of their own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがイメージビューをタップするとき、彼らが写真を写真コレクションから選ぶこと、または彼ら自身のものを取得できるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a user wants to finish editing the text field, the text field needs to resign its first-responder status.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがテキスト欄の編集を終えたい時は、テキスト欄はそれのファーストレスポンダ状態をやめる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a view controller is loaded from a storyboard, the system instantiates the view hierarchy and assigns the appropriate values to all the view controller’s outlets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューコントローラがストーリーボードからロードされる時、システムはビュー階層をインスタンス化して適切な値をビューコントローラの持つアウトレット全てに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When in editing mode, the rating control extends over the delete button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>編集モードの場合、格付けコントロールは削除ボタンを超えて伸長します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When it turns into a play arrow icon, click it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが再生矢印アイコンになった時、それをクリックしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When that event takes place, the system execute’s the action’s code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのイベントが起こるときに、システムはそのアクションの持つコードを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the app is running, the setupButtons() method is only called once, when the control is first loaded from the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリが動作している時、setupButtons()メソッドはただ一度だけ、コントロールが最初にストーリーボードからロードされる時に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the data is modified, the app saves it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データが修正される時は、アプリはそれを保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the interface is displayed on an iPhone SE, the text field should shrink.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インターフェイスがiPhone SE上で表示される場合、テキスト欄は縮まなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user runs your app with VoiceOver enabled, when they touch one of the buttons, VoiceOver reads the button’s label, followed by the word button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがあなたのアプリをVoiceOverを有効にして実行する場合、彼らがボタンの１つをタッチする時、VoiceOverはボタンのラベルを、単語buttonの後に続けて読み上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user tap on a meal in the list scene, you’ll display that meal in the detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがある食事をリストシーンにおいてタップする時、あなたはその食事を詳細シーンにおいて表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user taps a row in the meal list, this segue is triggered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザが食事リストの中のある列をタップする時、このセグエが引き起こされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user taps a text field, it automatically becomes the first responder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがあるテキスト欄をタップする時、それは自動的にファーストレスポンダになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user touches the button, whether or not it is selected, the system will show the highlighted button image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがボタンにタッチする場合、それが選択されるかどうかに関係なく、システムはボタン画像を強調して示すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the view loads, this code calls the helper method you just wrote to load the sample data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューがロードされる時、このコードはあなたがちょうど書いたヘルパーメソッドを呼び出して見本のデータをロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you access an implicitly unwrapped optional, the system assumes it has a valid value and automatically unwraps it for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが暗黙的にアンラップされるオプショナルにアクセスする時、システムはそれが有効な値を持つと決めてかかり、自動的にそれをあなたの代わりにアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you add a view to a stack view, the stack view automatically sets the view’s translatesAutoresizingMaskIntoConstraints property to false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるビューをスタックビューに加える場合、そのスタックビューは自動的にビューの持つtranslatesAutoresizingMaskIntoConstraintsプロパティをfalseに設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Delete button for a cell, the cell is removed from the list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるセルに対してDeleteボタンをクリックする時、そのセルはリストから取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Done button on the keyboard, the keyboard is dismissed and the label text changes to display the text in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがDoneボタンをキーボード上でクリックする時、キーボードは片付けられてラベルテキストは変更されてそのテキストがテキスト欄で表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Set Default Label Text button, the label changes from what’s currently displayed in the label to Default Text (the value set by the action you defined earlier).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSet Default Label Textボタンをクリックする時、ラベルは現在ラベルに表示されるものからDefault Text（あなたが以前に定義したアクションによって設定される値）へと変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the Set Default Label Text button, your setDefaultLabelText(_:) method is called, and the mealNameLabel object’s text value changes from Meal Name (the value set in your storyboard) to Default Text (the value set by the action).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSet Default Label Textボタンをクリックするとき、あなたのsetDefaultLabelText(_:)メソッドが呼び出されます、そしてmealNameLabelオブジェクトの持つtext値はMeal Name（あなたのストーリーボードにおいて設定された値）からDefault Text（アクションによって設定された値）に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you click the red square, you should see the “Button pressed” message in the console.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが赤い四角をクリックする時、あなたは「Button pressed」メッセージをコンソールにおいて見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create a view controller subclass (like the ViewController class you’ve been working with), it inherits the methods defined in UIViewController and lets you add your own custom behavior for each method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるビューコントローラのサブクラス（あなたが扱ったことのあるViewControllerクラスのようなもの）を作成する時には、それは、UIViewControllerで定義されるメソッドを継承し、そしてあなたにあなた独自のあつらえの挙動をそれぞれのメソッドに加えさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you programmatically instantiate a view, its translatesAutoresizingMaskIntoConstraints property defaults to true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがプログラム的にビューをインスタンス化する場合、それのtranslatesAutoresizingMaskIntoConstraintsプロパティは初期状態でtrueになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you ran your app in the iPhone 7 Simulator app, the view in this scene is what you saw on the device screen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのアプリをiPhone 7 シミュレータアプリで実行した場合、このシーンの中のビューはあなたがデバイス画面上で見たとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you select a meal, you can click Cancel to return to the meal list without saving any changes to the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが食事を選択する場合、あなたはCancelをクリックすることで、その食事に対して何ら変更を保存することなしに食事リストに戻ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you select the show segue, Interface Builder sets up the show segue and alters the meal detail scene’s appearance in the canvas—it is presented with a navigation bar in Interface Builder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが表示セグエを選択する場合、Interface Builderは表示セグエを準備してキャンバスにおいて食事詳細シーンの外観を改めます — それはInterface Builderにおいてナビゲータバーとともに表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you set this property to true, the system adds the constraint to the correct view, and activates it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのプロパティをtrueに設定する場合、システムは制約を正しいビューに加えます、そしてそれを活性化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you work with accepting user input from a text field, you need some help from a text field delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがテキスト欄からのユーザ入力の受け取りを扱うとき、あなたは、テキスト欄の委任先からの助けを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you’re finished, your app will look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが作業し終わった時、あなたのアプリはこのようなものに見えるでしょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever a segue gets triggered, it provides a place for you to add your own code that gets executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるセグエが引き起こされる時はいつでも、それはあなたのために場所を提供して、あなた自身のコードを加えさせ、それが実行されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever the app launches, it loads the existing data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリが起動するたびごとに、それは既存のデータをロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where control enters a program or piece of code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプログラムまたはコード断片に制御が進む入り口のところ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where to Go from Here</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これからどうする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While changing the meal’s name to “Default Text” isn’t particularly useful, it does illustrate an important point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>食事の名前を「Default Text」へ変更することは特に役に立つことではないけれども、それはある重要な点を例証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While designing the app, Interface Builder programatically instantiates the view when you add it to the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリ設計の間、Interface Builderはプログラム的にビューを、あなたがそれをキャンバスに加える時にインスタンス化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While newer APIs have largely replaced selectors with blocks, many methods—like performSelector(_:) and addTarget(_:action:forControlEvents:)—still take selectors as arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいAPIが大部分はセレクタをブロックで置き換える一方で、多くのメソッドは — performSelector(_:)およびaddTarget(_:action:forControlEvents:)などは — 依然としてセレクタを引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While pressing the Shift key on your keyboard, select the text field, label, and button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのキーボードのシフトキーを押したままで、テキスト欄、ラベル、およびボタンを選択してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While regular segues create a new instance of the destination view controller, unwind segues let you return to view controllers that already exist.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いつものセグエは行先ビューコントローラの新しいインスタンスを作成する一方、巻き戻しセグエはあなたをすでに存在するビューコントローラに帰らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While you’re editing the text field’s attributes, you can also edit the attributes of the system keyboard that’s displayed when a user selects the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがテキスト欄の属性を編集しているときに、あなたはまた、ユーザがそのテキスト欄を選択すると表示されるシステムキーボードの属性を編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Why’s that?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはなぜ？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With data displaying as expected, it’s time to provide a way to navigate from the initial meal list scene to the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データが期待するように表示されているので、最初の食事リストシーンから食事詳細シーンに進んでいく方法を提供する時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With iOS built-in accessibility features, you can deliver an outstanding mobile experience to every customer, including those with special needs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSの組み込みのアクセシビリティ機能で、あなたは傑出したモバイル体験をすべての顧客に送り届けることができます、それらは特別な必要性を持つものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the cell configured, you can design its custom user interface directly in the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セルが構成されたので、あなたはそれのカスタムユーザインターフェイスを直接にあなたのストーリーボード上で設計できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the default placeholder image added to your project, set the image view to display it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプロジェクトに加えた初期プレースホルダ画像をつかって、イメージビューがそれを表示するように設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the encoding method written, implement the initializer to decode the encoded data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号化メソッドが書かれたので、符号化されたデータを復号化するイニシャライザを実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the folder selected, in the bottom left corner, click the plus (+) button and choose New Image Set from the pop-up menu.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのフォルダが選択された状態で、１番下左隅で、プラス（+）ボタンをクリックしてNew Image Set（新規画像セット）をポップアップメニューから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のもので：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the horizontal stack view selected, open the Identity inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>水平スタックビューが選択された状態で、Identityインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Attributes inspector  in the Utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューが選択された状態で、Attributesインスペクタ をUtility区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Attributes inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのイメージビューが選択された状態で、Attributesインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Attributes inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューが選択された状態で、Attributes（属性）インスペクタを開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the image view selected, open the Size inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イメージビューが選択された状態で、Sizeインスペクタをユーティリティ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the stack view selected, open the Size inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スタックビューが選択された状態で、Sizeインスペクタ をユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the table view cell selected, open the Attributes inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューセルが選択された状態で、Attributesインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the table view selected, open the Size inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューが選択された状態で、Sizeインスペクタ をユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the text field selected, open the Attributes inspector  in the utility area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト欄が選択された状態で、Attributesインスペクタをユーティリティ区画で開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view controller selected, choose Editor &gt; Embed In &gt; Navigation Controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラが選択された状態で、Editor &gt; Embed In &gt; Navigation Controllerを選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view controller selected, open the Identity inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラが選択された状態で、同一性インスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Attributes inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューが選択された状態で、Attributesインスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the view selected, open the Identity inspector .</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューが選択された状態で、同一性インスペクタを開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With these methods implemented, you need to add code to save and load the list of meals whenever a user adds, removes, or edits a meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドが実装されたので、あなたは、ユーザが食事を追加、編集、削除するたびに、食事のリストを保存およびロードするコードを加える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within that hierarchy, views enclosed within a view are called subviews, and the parent view that encloses a view is called its superview.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この階層内で、あるビューの内部に納められるビューはサブビューと呼ばれます、そしてビューを納めている親ビューはスーパービューと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with @IBInspectable and @IBDesignable to display and control a custom view in Interface Builder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>@IBInspectableと@IBDesignableで作業して、カスタムビューをInterface Builderにおいて表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with View Controllers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Table Views</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テーブルビューを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Worse yet, if you select the rating control, its bounding box turns red, indicating that there’s a problem with the control’s layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まだ悪いことに、あなたが格付けコントロールを選択するならば、それの境界ボックスは赤になり、コントロールのレイアウトで問題があることを指し示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wrapping Up</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まとめ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write failable initializers for a custom class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるイニシャライザをカスタムクラスに対して書く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XIB files are an older way of designing the views managed by a view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらXIBファイルは、ひとつのビューコントローラによって管理される複数ビューを設計する古い方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds a new navigation controller to your storyboard, sets the storyboard entry point to it, and assigns the meal list scene as its root view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、新しいナビゲーションコントローラをあなたのストーリーボードに加えて、ストーリーボードエントリポイントをそれに設定します、そして食事リストシーンをそれのルートビューコントローラとして任命します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to MealViewController.swift to set up the action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、不可欠なコードをMealViewController.swiftに加えて、このアクションを準備します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to set up the action method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、必要なコードをViewController.swiftに加えることでアクションメソッドを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to set up the action.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、不可欠なコードをViewController.swiftに加えることでアクションを確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to store a reference to the image view and configures the storyboard to set up that connection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、不可欠なコードをViewController.swiftに加えることでイメージビューへの参照を保管します、そしてストーリーボードを修正することでこの接続を確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode adds the necessary code to ViewController.swift to store a reference to the text field and configures the storyboard to set up that connection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、必要なコードをViewController.swiftに加えることでテキスト欄への参照を保管します、そしてストーリーボードを修正することでこの接続を確立します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode already created one such class that you looked at earlier, ViewController.swift, and connected it to the scene you’re working on in your storyboard right now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、すでに１つそのようなクラスを作成しました、それはあなたが前に見たViewController.swiftです、そしてちょうどそれをあなたのストーリーボードで扱っているシーンに接続しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode also contains the iOS SDK, which extends Xcode to include the tools, compilers, and frameworks you need specifically for iOS development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeはiOS SDKも含みます、それはXcodeを拡張してあなたが特にiOS開発に必要とするツール、コンパイラ、そしてフレームワークを含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode analyzes your existing layout to figure out that the items should stack vertically, not horizontally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたの既存のレイアウトを解析して、それらの項目が、水平にではなしに、垂直に積み重ねられるべき状態を解決します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates MealTableViewController.swift, a source code file that defines your custom table view controller subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>XcodeはMealTableViewController.swift、あなたのカスタムテーブルビューコントローラサブクラスを定義するファイル、を作成します、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates a file called Meal.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、Meal.swiftと呼ばれるファイルを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates a file that defines the MealTableViewCell class: MealTableViewCell.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、MealTableViewCellクラスを定義するファイル：MealTableViewCell.swiftを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode creates a file that defines the RatingControl class: RatingControl.swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、RatingControlクラスを定義するファイル：RatingControl.swiftを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode displays messages about the build process in the activity viewer, which is in the middle of the toolbar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、メッセージをビルドプロセスについてアクティビティビューア（状況表示窓）の中で表示します、それはツールバーの中央にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode displays the property list editor in the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、プロパティリストエディタをエディタ区画で表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode has already created a unit test file as part of the Single View Application template.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、既にユニットテストファイルをSingle View Applicationひな形の一部として作成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode includes all the features you need to design, develop, and debug an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたがアプリの設計、開発、そしてデバッグに必要とするすべての機能を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode includes everything you need to create an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたがアプリを作成するのに必要なものすべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode includes several built-in app templates for developing common types of iOS apps, such as games, apps with tab-based navigation, and table view-based apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、いくつかの組み込みのアプリテンプレート（アプリひな形）を、一般的な種類のiOSアプリ、例えばゲーム、タブに基づくナビゲーションを持つアプリ、およびテーブルビューに基づくアプリなどの開発のために含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode inserts the initializer skeleton for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeはそのイニシャライザの骨組みをあなたの代わりに挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode inserts the whole line for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、行全体をあなたの代わりに挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode is downloaded into your /Applications directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeがあなたの/Applicationsディレクトリにダウンロードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode lets you type in a new name for the file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたにこのファイルのための新しい名前を入力させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode lists each of these comments as a section title in the source code file’s Functions menu, which appears if you click the name of the file at the top of the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、それらコメントそれぞれをソースコードファイルの持つFunctions menuにおける部門タイトルとしてリストします、それはあなたがそのファイル名をエディタ区画の最上部でクリックするならば現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode makes it clear from the naming that you’re creating a custom table view cell, so leave the new name as is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeにはその名前の付け方からあなたがカスタムテーブルセルを作成しているのが明らかです、それで新しい名前はそのままにされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens a new window and displays a dialog in which you choose a template.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは新しいウインドウを開きダイアログを表示します、そこであなたはあるひな形を選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens the source file in the main editor area of the window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、ソースファイルをウインドウ中央の大きなエディタ区画で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens the storyboard in Interface Builder—its visual interface editor—in the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、ストーリーボードをエディタ区画のインターフェイスビルダーで—それの視覚インターフェイスエディタで—開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode opens your new project in the workspace window.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたの新しいプロジェクトをワークスペースウインドウ（作業場）で開きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode provides a library of objects that you can add to a storyboard file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、あなたがストーリーボードファイルに加えることができるオブジェクトのライブラリ（オブジェクトの図書館）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode uses the product name you entered to name your project and the app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeはあなたが入力した製品名を使ってあなたのプロジェクトとアプリを命名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode wraps the user interface elements in a stack view, stacking them together.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、それらのユーザインターフェイス要素をひとつのスタックに包んで（ラップして）、それらを積み重ねて一緒にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You adopt a protocol by listing it as part of the class declaration line.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるプロトコルをクラス定義行の一部としてそれをリストすることによって採用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You access these constants using the structure’s name (for example, PropertyKey.name).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これら定数に構造体の名前（例えば、PropertyKey.name）を使ってアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You accomplish this by adding an Edit button to the table view’s navigation bar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これをEditボタンをテーブルビューのナビゲーションバーに追加することによって成し遂げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You added sample data to the model, and you implemented the table view controller code needed to dynamically fill the table with the model data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、見本データをモデルに追加しました、そしてあなたは動的にテーブルをモデルデータで満たすために必要とされるテーブルビューコントローラコードを実装しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also design custom table cells to display each meal, which look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、カスタムテーブルセルを設計して各食事を表示します、それはこのように見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also examined the difference between regular initializers and failable initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、通常のイニシャライザと失敗できるイニシャライザの間の違いを検討しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also need to keep a list of those meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたそれら食事のリストを保持する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also need to update the button’s selection state whenever buttons are added to the control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、ボタンがコントロールへ追加されるときはいつでもボタンの選択状態を更新する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are using red so it’s easy to see where the view is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはredを使っています、なのでビューがあるところを確認するのは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You attached your model object to your table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのモデルオブジェクトをあなたのテーブルビューコントローに取り付けました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add additional XCTestCase subclasses to your FoodTrackerTests target to add additional test cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、追加的なXCTestCaseサブクラスをFoodTrackerTestsターゲットに追加して、追加的なテスト項目を加えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add your own code to customize the view controller’s response to these events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた独自のコードを加えることで、これらのイベントへのビューコントローラの応答をカスタマイズできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add your own comments to help you understand what’s happening in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた自身のコメントを加えて、あなたのコードにおいて何が起こっているかあなたが理解する助けとしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add your own images directly into the simulator to test the FoodTracker app with appropriate sample content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはあなた独自の画像を直接にシミュレータへと加えて、FoodTrackerアプリを適切なサンプル内容でテストすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also Option-click the Update Frames button to update only the selected view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたUpdate Framesボタンをオプション-クリックすることで、選択されたビューのみを更新できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also collapse the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたアウトラインビューも折り畳むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also collapse the outline view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたアウトラインビューも折り畳むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also programmatically set a button to be selected or disabled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、プログラム的にボタンを選択または使用不能にされるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also run an individual test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、個々のテストを実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also specify properties that can then be set in the Attributes inspector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた幾つかのプロパティを指定でき、それらは後でAttributesインスペクタで設定されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can choose a cell to delete by clicking the indicator on the left, and confirm that you want to delete it by pressing the Delete button in that cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、削除するセルを左の表示をクリックして選べます、そしてそのセルにおいてDeleteボタンを押すことであなたがそれの削除を望むのを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can click on one of the section titles to jump to that section in the file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、部門名の１つをクリックすることでファイルのその部門へジャンプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can click the Add button and navigate to the meal detail scene from the meal list scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは「追加」ボタンをクリックすることで、食事リストシーンから食事詳細シーンへと導かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define an action method to accomplish anything from manipulating a piece of data to updating the user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、アクションメソッドを定義することで、あるデータ断片を操作することからユーザインターフェイスを更新することまでどんなことでも成し遂げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define the design and behavior of this cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このセルの設計と挙動を定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do this easily in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを簡単にあなたのストーリーボードに行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find a sample image within the Images/ folder of the downloadable file at the end of this lesson, or use your own image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、見本画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find sample images within the Images/ folder of the downloadable file at the end of this lesson, or use your own images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは見本画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find the images shown above within the Images/ folder of the downloadable file at the end of this lesson, or use your own images.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、上で見せた画像をこのレッスンの終わりでダウンロード可能なファイルのImages/フォルダ内で見つけることができます、またはあなた独自の画像を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can jump to it quickly using the functions menu, which appears if you click the name of the file at the top of the editor area.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、素早く関数メニューを使ってジャンプできます、それはあなたがファイルの名前をエディタ区画の上部でクリックするならば現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can leave this blank.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを空白のままにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can now access the image view from code to change its image, but how do you know when to change the image?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今やイメージビューにコードからアクセスしてそれの画像を変更できます、しかしあなたは画像を変更する時をどうやって知るのでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can now add, edit, and delete meals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今や、食事の追加、編集、そして削除が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can preview your app interface using the assistant editor, which displays a secondary editor side-by-side with your main one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのアプリのインターフェースを、副次的なエディタをあなたの主要なものに並べて表示するアシスタントエディタを使ってプレビューすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can represent the rating value with an Int, and the buttons as an array of UIButton objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、格付けの値をIntを使って、そしてボタンをUIButtonオブジェクトの配列として表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can rerun a test method by moving the mouse over the success or failure icon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、成功または失敗アイコンの上でマウスを動かすことによってテストメソッドを再実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can reuse the rating control class that you created in an earlier lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたが前のレッスンで作成した格付けコントロールクラスを再利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can select the screen size and orientation at the bottom of the canvas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、画面のサイズと方向をキャンバスの一番下で選択できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can select the text field and type text into it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テキスト欄を選択してテキストをそれの中へとタイプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can specify these kinds of interface rules easily using Auto Layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれらの種類のインターフェース規則を「自動レイアウト」（自動配置）を使って簡単に指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can then create a connection between those classes and scenes in your storyboard to get the behavior you defined in code and the user interface you defined in your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはそれで、それらのクラスとあなたのストーリーボードの中のシーンの間の結合を作成することができ、あなたがコードにおいて定義した挙動とあなたがあなたのストーリーボードにおいて定義したユーザインターフェイスを得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a method that takes no arguments, that takes a single sender argument, or that takes both a sender and an event argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、引数を取らない、単一のセンダー引数を取る、またはセンダーとイベント引数の両方を取る、あるメソッドを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the outline view toggle to collapse and expand the outline view as needed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはアウトラインビュー切替スイッチを使って、アウトラインビューを必要に応じて畳んだり広げたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the stub methods and comments as a blueprint for designing many common app-level behaviors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、スタブメソッドとコメントを多くのよくあるアプリ水準挙動の設計のための青写真として使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to identify which segue is occurring, and display the appropriate information in the meal detail scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使って、どのセグエが生じているのか識別して、適切な情報を食事詳細シーンにおいて表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can write an action method that is called when a gesture recognizer recognizes its assigned gesture, which is exactly what you need to do for the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるジェスチャリコグナイザがそれの割当てジェスチャを認識するときに呼び出されるアクションメソッドを書くことができます、それは、まさしくあなたがイメージビューにする必要があるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You care about configuring and passing the Meal only if the Save button was tapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがMealを構成して渡すことについて面倒を見るのは、Saveボタンがタップされた場合のみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You choose your own keys based on what makes the most sense in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた独自のキーをあなたのアプリにおいて最も意味の通るものに基づき選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You could modify the if clause, but complex Boolean expressions get hard to understand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、if節を修正することができます、しかし複合Boolean式は意味を取るのが困難になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create an action the same way you create an outlet: Control-drag from a particular object in your storyboard to a view controller file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、アクションをあなたがアウトレットを作成したのと同じ方法で作成します：あなたのストーリーボードの中の特定のオブジェクトからビューコントローラファイルまでコントロールドラッグしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You define the behavior of your view controllers in code by creating and implementing custom view controller subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、コードにおいてあつらえのビューコントローラサブクラスを作成し実装することによって、あなたのビューコントローラの挙動を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You describe your layout using constraints—rules that explain where one element should be located relative to another, or what size the element should be.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのレイアウトをいくらかの制約 — ある要素が別のものとの関係から位置すべきところを、または要素がどんな大きさであるべきかを、説明する規則を使って記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You designed your custom rating control class to be interactive, but you don’t want users to be able to change the rating from the cell view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのカスタム格付けコントロールクラスを相互作用するように設計しました、しかしあなたはユーザに、格付けをセルビューから変更できることを望みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do not need a development team to run the app in the simulator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、アプリをシミュレータで実行するのに開発チームを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do not need to be a Swift master to complete the lessons, but you will get more out of the lessons if you can comfortably read and understand Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このレッスンを完了するのにSwiftマスターである必要はありません、しかしあなたが楽にSwiftコードを読み理解できるならば、このレッスンからより多くのものを得るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do this by defining additional connections—called outlets and actions—between the views in the storyboard and the view controller source code files.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これを追加の接続—アウトレットおよびアクションと呼ばれるもの—をストーリーボードの中のビューとビューコントローラ・ソースコードファイルとの間に定義することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do this in the textFieldShouldReturn(_:) method, which gets called when the user taps Return (or in this case, Done) on the keyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれを行うのはtextFieldShouldReturn(_:)メソッドにおいてです、それが呼ばれるのはユーザがリターン（またはこの場合、Done）をキーボード上でタップした時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You do this type of setup work is in the viewDidLoad() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこの種の準備作業をするのは、viewDidLoad()メソッドにおいてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t need this comment in your method implementation, so go ahead and delete it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのコメントをあなたのメソッド実装において必要としません、それで先へ進んでそれは削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t need to do anything special to make sure these methods get called at the correct time—the application object handles that job for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドが正しい時に呼ばれるのを確実にするのに、あなたが何か特別なことをする必要はありません—アプリケーションオブジェクトはその仕事をあなたの代わりに取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t want to let anything outside the RatingControl class access these buttons; therefore, you declare them as private.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、RatingControlクラスの外側のどんなものもそれらのボタンにアクセスするのを望みません；それゆえにあなたはそれらをプライベートとして定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You downcast the value returned by decodeObject(forKey:) as a UIImage, and assign it to the photo constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、decodeObject(forKey:)によって返された値をUIImageとしてダウンキャウトします、そしてそれをphoto定数に割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You just added a comment to your source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ただ単にコメントをあなたのソースコードに加えただけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You learned how to navigate back to a previous scene using segue unwinding, how to pass data across segues, and how to dismiss modal views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、以前のシーンにセグエ巻き戻しを使って戻っていく方法、データをセグエを超えて渡す方法、そしてモーダルビューを退去させる方法を学びました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You mark these constants with the static keyword, which means they belong to the class instead of an instance of the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらの定数をstaticキーワードで印します、それはそれらがクラスに属していることを意味します、クラスのインスタンスにではなくて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may also need to make changes to your code to get it to compile.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、あなたのコードに変更を加えてそれを完成させる必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may have noticed that the value of the Type field defaults to AnyObject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Type欄の値が初期状態でAnyObjectになっているのに気づくかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may have to click the disclosure triangles next to those objects to see the nested table view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらのオブジェクトの隣で開示三角形をクリックして入れ子にされたテーブルビューを見る必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may have to disclose those objects to see the table view cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらのオブジェクトを開いていって、テーブルビューセルを見なければならないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may need to update the frames in the meal detail scene, if they don’t update automatically.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、食事詳細シーンの中のいくらかのフレームを、それらが自動的に更新しないならば、更新する必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might notice that your table view has a bar on top of it now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、今ではあなたのテーブルビューがそれの上部にバーを持つことに気づくかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You modified both the meal detail scene’s appearance and its behaviors based on how it was presented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、食事詳細シーンの外観とそれの挙動の両方をそれが提示された方法に基づいて修正しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must check to see if the optional has a value, and then safely unwrap the value before you can use it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは調査することで、そのオプショナルが値を持つかどうか見て、それから安全にその値をあなたがそれを使う前にアンラップしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need a way to identify when the user is adding a new meal and when they are editing an existing one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザが新しい食事を追加している時と彼らが既存のものを編集している時を識別する方法が必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need a way to let users put the table view into an editing mode from which they can delete cells.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの必要なのは、ユーザにテーブルビューを編集モードの状態へ置かせることです、それによって彼らはセルを削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to add an action for this button (and for the other buttons you’ll be adding later).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるアクションをこのボタンに（そしてあなたが後で加えることになる他のボタンに）加える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to add code to check for those cases and to return nil if they fail.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのはコードを加えてこれらの場合を検査して、それらが不合格ならnilを返すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to be able to both read and write this value from outside this class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、この値の読み書き両方をこのクラスの外部から可能にする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to change a few settings on this table view so you can use it in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、テーブルビュー上でいくつかの設定を変更して、それをあなたのアプリにおいて利用可能なものにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to downcast because sender.sourceViewController is of type UIViewController, but you need to work with a MealViewController.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはダウンキャストを必要とします、なぜならsender.sourceViewControllerは型UIViewControllerですが、あなたはMealViewControllerを扱うことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to give users a way to indicate that they want to change the image—for example, by tapping the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要なのは、ユーザにある方法を与えて、彼らが画像を変更したいことを示させることです—たとえば、イメージビューをタップすることによって。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to implement both the encode(with:) method and the initializer for the data to save and load properly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、適切にデータを保存してロードするためにencode(with:)メソッドとイニシャライザの両方を実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to specify that the text field should resign its first-responder status when the user taps a button to end editing in the text field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが指定する必要があるのは、ユーザがあるボタンをタップした時にテキスト欄での編集を終わるためにテキスト欄がそれのファーストレスポンダ状態をやめることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You now have a fully functional app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今完全に機能するアプリを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You now have a way to identify the Save button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今ではSaveボタンを識別する方法を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You now have two scenes, one for displaying the meal list and one for displaying the details of a single meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは今では２つのシーンを持ちます、食事リストを表示するためのものと１つの食事の詳細を表示するためのもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You only need an outlet to an interface object if you plan to either access a value from the interface object or modify the interface object in your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはあるインターフェイスオブジェクトに対するアウトレットを必要とするだけです、もしあなたがある値にインターフェイスオブジェクトからアクセスするかインターフェイスオブジェクトをあなたのコードにおいて修正するかどちらかを行うつもりならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You removed the comment that says #warning Incomplete implementation because you’ve completed the implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは#warning Incomplete implementationというコメントを削除しました、なぜならあなたが実装を完了したからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You resize a user interface element by dragging its resize handles, which are small white squares that appear on the element’s borders.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザインターフェイス要素をそれのリサイズハンドル、それは小さな四角形でその要素のへりに現れます、をドラッグすることによって大きさ調整します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You reveal an element’s resize handles by selecting it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ある要素のリサイズハンドルをそれを選択することによって見えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You see exactly what you're building while you’re building it, get immediate feedback about what’s working and what’s not, and make instantly visible changes to your user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたが作っているものをあなたがそれを作っている時に正確に見て、何が機能して何がしないかについて直に反応を得ます、そして即座に視覚的変更をあなたのユーザインターフェイスに行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You separated this into its own method to make your code more modular and readable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのコードをよりモジュール化し読みやすくするために、これを独自のメソッドに分割しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to click a table view cell to navigate to the meal detail scene, and see it prepopulated with data about the meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはテーブルピューセルをクリックして食事詳細シーンに導かれます、そしてそれがその食事についてのデータで満たされるのを見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to see a view with a small red square inside of it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ビューと一緒に小さな赤い四角をそれの内部に見ることができるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to see the text field, label, and button you just added listed in the hierarchy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたが加えたばかりのテキスト欄、ラベル、そしてボタンが階層中に記載されるのを見ることができるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should be able to tap the image view to pull up an image picker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、イメージビューをタップしてイメージピッカーをプルアップできなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should see five stars and be able to click one to change the rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、５つの星を見るはずです、そして１つクリックすることで格付けを変更できるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should see stars instead of red buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、赤いボタンの代わりに星を見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should see the change in your user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのユーザインターフェイスにおいてこの変化を見るはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You still need to create instances of this cell in code and fill them with your app’s data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは依然としてこのセルのインスタンスいくらかをコードにおいて作成してそれらをあなたのアプリの持つデータで満たす必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You still see the meal detail scene, but there’s no longer a button to navigate back to the meal list—instead, you see the two buttons you added, Cancel and Save.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはやはり食事詳細シーンを見ます、しかしもはや食事リストに戻るよう導くボタンはありません—代わりに、あなたが加えた２つのボタン、CancelとSaveを見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You typically create a view in one of two ways: by programatically initializing the view, or by allowing the view to be loaded by the storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは概して、ビューを２つのやり方のうちの１つで作成します：ビューをプログラム的に初期化（イニシャライズ）することで、またはビューをストーリーボードによってロードされるようにすることで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use actions to drive the flow of your app in response to user or system events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはアクションを使って、あなたのアプリの流れ（フロー）をユーザやシステムのイベントに応じて動かします（駆動します）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use layout anchors to create constraints—in this case, constraints that define the view’s height and width, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、レイアウトアンカーを使って制約を作成します — この場合には、それぞれビューの高さと幅を定義する制約。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use storyboards to lay out the flow—or story—that drives your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはストーリーボードを使って、あなたのアプリを操作する流れ（フロー）—または物語（ストーリー）—を整えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the canvas to add and arrange user interface elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このキャンバスを使ってユーザインターフェイス要素を加えたり整えたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the identifier when referring to the segue in code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、コードにおいてセグエを参照するときにこの識別子を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want the Add button (+) to bring up the meal detail scene, so you’ll do this by having the button trigger a segue (or transition) to that scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが追加ボタン（+）に望むことは、食事詳細シーンを画面に出すことです、それであなたは、このボタンがそのシーンへのセグエ（画面転換）を引き起こすようにしてこれを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want to return the number of meals you have.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが望むのはあなたが持つ食事の数を返すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will add additional configuration steps later in this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、追加的な構成設定行程をこのレッスンの後で加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will fix that in the next lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それを次のレッスンで修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will look at these methods after you have the model data set up.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらのメソッドをあなたがモデルデータを準備し終えた後で見ることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will need to implement both of these methods in your custom control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらメソッドの両方をあなたのカスタムコントロールにおいて実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will use the label to show the meal’s name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このラベルを使って食事の名前を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will use this identifier to create instances of this prototype cell.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、この識別子を使ってこの原型セルのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You won’t be modifying the button, so there’s no reason to create an outlet for it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはボタンを修正することはしません、それでそれに対してアウトレットを作成する理由はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You won’t need an XIB file for this view controller, because you have already defined its content in the app’s storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、XIBファイルをこのビューコントローラのために必要としないでしょう、なぜならあなたは既にそれの内容をアプリのストーリーボードにおいて定義し終えたからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your PropertyKey structure should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのPropertyKey構造体はこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your cancel(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのcancel(_:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your imagePickerController(_:didFinishPickingMediaWithInfo) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのimagePickerController(_:didFinishPickingMediaWithInfo)メソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your imagePickerControllerDidCancel(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのimagePickerControllerDidCancel(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your init?(name:, photo:, rating:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのinit?(name:, photo:, rating:)メソッドは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your loadMeals() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのloadMeals()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your prepare(for:sender:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのprepare(for:sender:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your prepare(for:sender:) method should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのprepare(for:sender:)メソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your saveMeals() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのsaveMeals()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your selectImageFromPhotoLibrary(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのselectImageFromPhotoLibrary(_:)アクションメソッドはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your setDefaultLabelText(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのsetDefaultLabelText(_:)アクションメソッドは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your setupButtons() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのsetupButtons()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your setupButtons() method should now look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのsetupButtons()は、今やこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your tableView(_:cellForRowAt:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtableView(_:cellForRowAt:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your tableView(_:commitEditingStyle:forRowAtIndexPath:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtableView(_:commitEditingStyle:forRowAtIndexPath:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your textFieldDidEndEditing(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtextFieldDidEndEditing(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your textFieldShouldReturn(_:) method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのtextFieldShouldReturn(_:)メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your unwindToMealList(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのunwindToMealList(_:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your unwindToMealList(sender:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのunwindToMealList(sender:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your viewDidLoad() method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのviewDidLoad()メソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your viewDidLoad() method should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのviewDidLoad()メソッドはこのようにものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your Xcode window should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのXcodeはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your asset catalog should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアセットカタログはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your custom interface will then contain the meal name, photo, rating, and look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのカスタムインターフェイスは、そのとき食事名、写真、格付けを含み、そしてこのようなものに見えるでしょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your dialog should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのダイアログはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your food tracker tests should appear as shown below:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの食事追跡テストは、下で示すように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your image view now has a 1:1 aspect ratio, so it will always be a square.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのイメージビューは、今では１:１の縦横比を持ちます、それでそれは常に正方形です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your implementation then calls the setupButtons() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの実装は、それからsetupButtons()メソッドを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your job is to implement the appropriate protocol methods in your table view controller subclass so that your table view has the correct behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの仕事は、適切なプロトコルメソッドをあなたのビューコントローラサブクラスに実装して、あなたのテーブルビュが正しく振舞うようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your meal detail scene user interface should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの食事詳細シーンのユーザインターフェイスはこのようにものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your outlets in MealTableViewCell.swift should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアウトレットはMealTableViewCell.swiftにおいてこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your scene should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your scene should look similar to this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンはこれと似たものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your scene should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーンはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your storyboard should look similar to this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのストーリーボードはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your table view has only a single section, and each Meal object should have its own row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのテーブルビューは、単に１つだけのセクションを持ちます、そして各Mealオブジェクトはそれ独自の列を持つべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your unit test class should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのユニットテストクラスは、このように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your user interface should look something like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのユーザインターフェイスはこのようなものに見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll add that code next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、そのコードを次に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll also be working with a class from the UIKit framework, so you need to import UIKit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、UIKitフレームワーク由来のクラスを扱っているでしょう、なのであなたはUIKitをインポートする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll also center the elements in your stack view to balance the user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、あなたのスタックビューの要素の中心をとってユーザインターフェイスのつり合いをとりたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll be using some of these methods in the FoodTracker app to load and display your data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらのメソッドの幾つかをFoodTrackerアプリで使ってあなたのデータをロードして表示することになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll become familiar with the structure of a project in Xcode and learn how to navigate between and use basic project components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Xcodeにおけるプロジェクトの構造に馴染んで、基本的なプロジェクトコンポーネントの間をなんとか進んでいき、それを使用する方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll come back to working on the table view itself in a little while, after you design an interface for what the table view displays: its table view cells.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テーブルビューそれ自体での作業に少ししたら戻ってきます、あなたがインターフェイス設計を、テーブルビューが表示するのは何か、についてした後にです：それはテーブルビューセル（表のます目）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll configure the buttons to save or cancel adding a new meal and to bring the user back to the meal list soon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれらのボタンを、新しい食事の追加を保存またはキャンセルして、ユーザが食事リストにすぐに戻るように構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll create a stack view subclass that manages a row of buttons representing the stars.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるスタックビューサブクラスを作成し、それは星を表すボタンの列を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll create the new scene using a table view controller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、新しいシーンを作成するのにテーブルビューコントローラを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll define your custom control entirely in code, and then add it to your storyboard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのカスタムコントロールをすっかりコード中に定義して、それからそれをあなたのストーリーボードへ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll differentiate the segues based on the identifiers you assign to them: AddItem when adding new meals and ShowDetail when editing an existing meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、セグエをあなたがそれらに割り当てる識別子：新しい食事を割り当てる時のAddItemと既存の食事を編集する時のShowDetailに基づいて区別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll even see the blue highlighted star while you are touching the button, but your buttons don’t change to the filled images yet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、青く強調された星をあなたがボタンをタッチしている間は見さえするでしょう、しかしあなたのボタンは塗りつぶされた画像へとまだ変化しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll find that code completion is one of the great time-saving features of Xcode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、コード補完がXcodeの偉大な時間節約機能の１つであることを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll finish a more advanced implementation of this method in a little while, but for now, the unwindToMealList(_:) action method should look like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドのより進んだ実装を少し後でやり遂げます、しかし今のところ、unwindToMealList(_:)アクションメソッドはこのように見えるはずです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll fix that next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを次に修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll implement a check that determines how the current scene was presented when the user taps the Cancel button.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはある検査を実装して、現在のシーンが表現された方法をユーザがCancelボタンをタップする時に特定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll implement this method in MealViewController to do exactly that.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドをMealViewControllerにおいて実装することで厳密にそれが実行されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll learn more about the roles of views and view controllers soon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはすぐに、もっとビューおよびビューコントローラについて学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll make a change to the label outlet (mealNameLabel) in a later lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あとのレッスンでラベルアウトレット（mealNameLabel）に変更を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need a label, an image view, and a rating control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはラベル、イメージビュー、そして格付けコントロールを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need this feature later to let users interact with the image view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザがイメージビューと相互作用できるようにするためにこの機能を後で必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to click OK on the alert that asks for permission to give the FoodTracker app access to Photos.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、FoodTrackerアプリをPhotosにアクセスさせるよう許可を求める警告上でOKをクリックする必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to create outlets for the text field and label in your user interface to be able to reference them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要なのは、あなたのユーザインターフェイスの中のテキスト欄とラベルに対するアウトレットを作成して、それらが参照されることができるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to keep track of a rating value, as well as the buttons that a user taps to set that rating.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのは、格付けの値の、それだけでなくユーザがその格付けを設定するためにタップするボタンの、最新の状態を把握することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll need to return nil to indicate that the item couldn’t be created, and has set to the default values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが必要とするのはnilを返すことでその項目が作成されることができなかったのを示すこと、そして省略時の値に設定されるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice that the text field still isn’t stretching to the far edge of the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはテキスト欄がまだ伸びておらず、シーンの端まで遠いのに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice the sections you denoted by //MARK: listed here.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ここでリストされた//MARK:によってあなたが示した部門に気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice the user interface elements space out vertically, and the stack view grows with them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザインターフェイス要素が垂直方向に間隔をあけ、そしてスタックビューがそれらとともに大きくなるのに気づくでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll notice there’s a little bit of overlap between the table view cells and the status bar—you’ll fix that in the next lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、テーブルビューセルとステータスパーが少しばかり重なっているのに気がつくでしょう—あなたは次のレッスンでそれを修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll rearrange the existing user interface elements and work with an image picker to add a photo to the scene.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、既存のユーザインターフェイス要素を並べ直して、イメージピッカーを取り扱うことで写真をシーンへ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll replace this debugging implementation with a real implementation in a little while.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このデバック実装を実際の実装としばらくして置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll replace this with a new implementation soon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこれを新しい実装でまもなく置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll see this in action later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これを後でアクションで見るでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll start by working on a user interface for the scene that lets you add a new meal to your meal tracking app, FoodTracker.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、新しい食事をあなたの食事追跡アプリ、FoodTrackerに加えるシーンのユーザインターフェイス上で作業することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll start writing code in this source code file later in this lesson.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、後ほどこのレッスンでこのソースコードファイルにコードを書き始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll use the areas identified in the window below throughout the lessons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはレッスンを通して下のウインドウにおいて確認される区画を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll use these images when you load initial meal data into your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこれらの画像を使うのは、あなたが最初の食事画像データをあなたのアプリにロードする時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re attaching the ratingButtonTapped(_:) action method to the button object, which will be triggered whenever the .TouchDown event occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ratingButtonTapped(_:)アクションをbuttonオブジェクトに取り付けています、それは.TouchDownイベントが起こるたびに作動させられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re close to finalizing the meal scene’s user interface, but first you need to do some cleanup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、食事シーンのユーザインターフェイスの完成段階に近づいています、しかしまずあなたはいくらかの掃除をする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re making these variables (var) instead of constants (let) because they’ll need to change throughout the course of a Meal object’s lifetime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらを変数（var）にします、定数（let）ではなく、なぜならそれらはMealオブジェクトのライフタイムの流れを通してずっと変更を必要とするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re not using your new class for anything yet, but building it gives the compiler a chance to verify that you haven’t made any typing mistakes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはあなたの新しいクラスをまだ何にも使いません、しかしそれをビルドすることはコンパイラに機会を与えてあなたが何ひとつタイプし間違えなかったことを検証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re ready to start working on a storyboard for your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのアプリのストーリーボードで作業を始める準備ができています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re using a different process to create this class than the RatingControl class you created earlier (iOS &gt; Source &gt; Cocoa Touch Class), because you’re defining a base class for your data model, which means it doesn’t need to inherit from any other classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、以前にあなたが作成したRatingControlクラス（iOS &gt; Source &gt; Cocoa Touch Class）とは異なる過程でこのクラスを作成しています、なぜならあなたが定義しているのはあなたのデータモデルのためのベースクラスだからです、それが意味するのは、それが何ら他のクラスから継承する必要がないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ve added several of these comments so far.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、いくつかこれらのコメントを今までに加えました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ve also added code to update the user interface as the user interacts with the controls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたコードを追加して、ユーザがコントロールと相互作用するようにユーザインターフェイスを更新しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ve also built a simple user interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、簡単なユーザインターフェイスを組み立てました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ve also learned how to add gesture recognizers to a view, and how to select photos from the photo library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、ジェスチャリコグナイザをビューに加える方法と、フォトライブラリから写真を選択する方法を学びました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>activity viewer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクティビティビューア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adaptive interface</seg>
      </tuv>
      <tuv lang="JA">
        <seg>適応インターフェイス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adopt</seg>
      </tuv>
      <tuv lang="JA">
        <seg>採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>app delegate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリデリゲート（アプリの委任先）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>application object</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションオブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>application programming interface (API)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションプログラミングインターフェイス（API）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>asset catalog</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アセットカタログ（資産目録）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>assistant editor</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アシスタントエディタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>base class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基盤クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>canvas</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャンバス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class hierarchy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス階層</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>clean</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クリーン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>closed range operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>closure</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>code completion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード補完</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>comment</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>completion handler</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完了ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>conditional statement</seg>
      </tuv>
      <tuv lang="JA">
        <seg>条件文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>conform to</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>console</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンソール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>constant</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>constraint</seg>
      </tuv>
      <tuv lang="JA">
        <seg>制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>content view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンテンツビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>control</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コントロール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>convenience initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>便宜イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>data model</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>data source</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delegate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デリゲート（委任先、移譲先）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>designated initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>destination view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デスティネーションビューコントローラ（行先ビューコントローラ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>downcast</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダウンキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>entry point</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エントリポイント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enumeration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event-driven programming</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イベント駆動プログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extension</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>failable initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗できるイニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>find the for-in declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-in宣言を見つけてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>first responder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファーストレスポンダ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fix-it</seg>
      </tuv>
      <tuv lang="JA">
        <seg>修正</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>force-unwrap operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制アンラップ演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>forced type cast operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強制型キャスト演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>gesture recognizer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ジェスチャリコグナイザ（身振り認識）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>global</seg>
      </tuv>
      <tuv lang="JA">
        <seg>グローバル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>half-open range operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS and Swift Terminology</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSとSwiftの専門用語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS apps are based on event-driven programming.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSアプリは、イベント駆動プログラミングに基づきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS automatically calls these methods at appropriate times when a view controller transitions between states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSは、自動的にそれらのメソッドを適切な時に呼びます、その時とはあるビューコントローラが２つの状態間を推移するときです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS calls the UIViewController methods as follows:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSはUIViewControllerメソッドを以下のように呼び出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS handles all of the redrawing code for you, so this is actually all the code you need to write for now.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSは、再描画コードのすべてをあなたの代わりに取り扱います、それでこれが実際さしあたってあなたが書く必要のあるコードのすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iOS has many persistent data storage solutions; in this lesson, you’ll use NSCoding as the data persistence mechanism in the FoodTracker app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iOSは、多くの永続データ貯蔵の解決策を持ちます；このレッスンでは、あなたはNSCodingをデータ永続の仕組みとしてFoodTrackerアプリで使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>identity operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>immutable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不変</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>implement</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実装する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>implicitly unwrapped optional</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的アンラップオプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inheritance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザ（初期化子）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>inspector pane</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスペクタ枠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>integrated development environment (IDE)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>統合開発環境（IDE）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>intrinsic content size</seg>
      </tuv>
      <tuv lang="JA">
        <seg>固有コンテンツサイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>iterate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イテレート（反復適用）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>library pane</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ライブラリ枠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ローカル（局所的）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>loop</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>modal segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>モーダルセグエ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>mutable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>navigation controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションコントローラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>navigation stack</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ナビゲーションスタック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil coalescing operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>object</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>optional</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>optional binding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル束縛</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>optional type cast operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル型キャスト演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>or constructed as part of adding a new meal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（または加えている新しい食事の一部として組み立てられます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>outlet</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトレット（出口、コンセント差し込み口）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>outline view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アウトラインビュー（外観図）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>override</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーライド（優先させる）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>playground</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンド（遊び場）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>project navigator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロジェクトナビゲータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property observer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティオブザーバ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>read-only</seg>
      </tuv>
      <tuv lang="JA">
        <seg>読み出し専用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>read-write</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込み専用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>resize handles</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リサイズハンドル（寸法調節つまみ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>root view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ルートビューコントローラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>run loop</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行ループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>runtime</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行時</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>scene</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーン（場面）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>scene dock</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーンドック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セグエ（遷移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>show segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表示セグエ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>source view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースビューコントローラ（発生ビューコントローラ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>storyboard</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボード（物語展開を絵で表したもの、アプリの展開）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>storyboard entry point</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストーリーボードエントリポイント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string interpolation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>structure</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>subclass</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラス（下位クラス）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>subview</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>superclass</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>superview</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパービュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>target</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>target-action</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットアクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tuple</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type casting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type inference</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>underscore</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンダースコア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unit test</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unwind segue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>巻き戻しセグエ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unwrap</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンラップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>user interface (UI)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザインターフェイス（UI）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>utility area</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーティリティ区画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>variable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>view</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>view controller</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビューコントローラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>view hierarchy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビュー階層</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>workspace window</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ワークスペースウインドウ</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
