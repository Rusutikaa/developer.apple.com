<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.0_0_e0e1b4cc8" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>(If that object can’t respond to the message either, it too will be given a chance to forward it.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（そのオブジェクトもまたメッセージに応答出来ないならば、それもまたそれを転送する機会を与えられます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Obviously if you return self from this method, the code would just fall into an infinite loop.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（当然ながらあなたがselfをこのメソッドから返したならば、コードはあるいは無限ループに陥るでしょう。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(See also the Discussion section.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（またDiscussion節を見てください。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject does not itself support the NSCopying protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectは、それ自身はNSCopyingプロトコルをサポートしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject's implementation of this method simply prints the name of the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドのNSObjectの持つ実装は、単純にクラスの名前を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject’s implementation of attributeKeys simply calls [[self classDescription] attributeKeys].</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectの持つattributeKeysの実装は、単に[[self classDescription] attributeKeys]を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject’s implementation of forwardInvocation: simply invokes the doesNotRecognizeSelector: method; it doesn’t forward any messages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forwardInvocation:に対するNSObjectの持つ実装は、単純にdoesNotRecognizeSelector:メソッドを発動します；それはどんなメッセージも転送しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>finalize methods must be thread-safe.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>finalizeメソッドはスレッド安全である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if instances of the class respond to the selector, otherwise false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこのクラスのインスタンスがセレクタに応答するならば、そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the block was released successfully; otherwise, false (for example, the function returns false if the block was not used to create anImp previously).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしブロックがうまく作成されたならば；そうでなければ、false（例えば、関数はfalseを返します、もしブロックが以前にanImpを作成するのに使われなかったならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>userInfo keys are described in NSUndefinedKeyException userInfo Keys</seg>
      </tuv>
      <tuv lang="JA">
        <seg>userInfoキーそれらは、NSUndefinedKeyException userInfo Keysにおいて記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject’s implementation returns self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectの実装はselfを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject’s implementation returns the receiver’s class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectの持つ実装はレシーバのクラスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject’s implementation simply returns self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectの持つ実装は単にselfを返すだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>anInvocation will hold the result, and the runtime system will extract and deliver this result to the original sender.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>anInvocationは、結果を保持します、そしてランタイムシステムは、この結果を抜き出して元々の送り手（センダー）に届けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>forwardInvocation: can, for example, be used to consolidate code that responds to a variety of different messages, thus avoiding the necessity of having to write a separate method for each selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forwardInvocation:は、例えば、様々なことなるメッセージに応答するコードを統合するために使われることができます、それによって各セレクタに対して別個のメソッドを書かなければならない必要性を回避します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A forwardInvocation: method might also involve several other objects in the response to a given message, rather than forward it to just one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forwardInvocation:メソッドはまた、指定されたメッセージへの反応として、それをただ１つのものへと転送する代わりに、幾つかの他のオブジェクトを巻き込むこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the main thread.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メインスレッドのレシーバで指定されたセレクタが実行される後まで現在のスレッドを封鎖するかどうかを指定するブール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the specified thread.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたスレッドのレシーバで指定されたセレクタが実行される後まで現在のスレッドを封鎖するかどうかを指定するブール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C array of all the protocols known to the runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>runtimeにとって既知の全てのプロトコルからなるあるC配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C string representing the name of the library containing the cls class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>clsクラスを含んでいるライブラリの名前を表しているC文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるC文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A category +load method is called after the class’s own +load method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるカテゴリ+loadメソッドは、そのクラス自身の+loadメソッドの後に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class also conforms to any protocols that are incorporated in the protocols it adopts or inherits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスはまた、それが採用または継承するプロトコルの中に取り入れられるどんなプロトコルにも準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class is said to “conform to” a protocol if it adopts the protocol or inherits from another class that adopts it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスがあるプロトコルに準拠すると言われるのは、それがそのプロトコルを採用するまたはそれを採用する別のクラスから継承する場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class’s +load method is called after all of its superclasses’ +load methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスの持つ+loadメソッドは、それのスーパークラスの+loadメソッド全ての後に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of default comparison methods useful for performing specifier tests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定子テストを実行するのに有用な省略時の比較メソッドのいちコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of methods providing additional object specifier functionality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加のオブジェクト指定子機能を提供するいちコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of methods that provide additional capabilities for working with key-value coding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値コーディングを扱うための追加能力を提供するメソッドのいちコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of methods useful for comparing script objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スクリプトオブジェクトを比較するために有用なメソッドのいちコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A description of the layout of the weak Ivars for cls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>clsに対する弱いIvarそれらのレイアウトの記述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function pointer of type IMP.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型IMPの関数ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key that identifies the relationship into which the new class object will be inserted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこにおいて新しいオブジェクトが挿入されることになるリレーションシップを識別するキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key that identifies the relationship into which to insert the copied object or objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされたオブジェクトまたは複数のオブジェクトがそこへと挿入されるところのリレーションシップを識別するキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key-value coding validation error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値コーディング検証エラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A keyed archiver creating an archive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブを作成するキー付きアーカイバー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A keyed archiver does not encode class version numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付きアーカイブは、クラスバージョン数をエンコードしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mechanism by which you can access the properties of an object indirectly by name or key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それによってあなたがあるオブジェクトのプロパティに名前またはキーによって間接的にアクセスできるある仕組み。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mechanism for converting one kind of scripting data to another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある種のスクリプティングデータを別のものに変換するための仕組み。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new instance of the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバ（受取り手）の新しいインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer of type SEL specifying the selector for the named method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その名前付きメソッドに対するセレクタを指定している型SELのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to a C string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるC文字列へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to an Class data structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるClassデータ構造体へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to an Ivar data structure containing information about the class variable specified by name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Ivarデータ構造体へのポインタ、nameによって指定されたクラス変数についての情報を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proxy for the receiving object</seg>
      </tuv>
      <tuv lang="JA">
        <seg>受け取り手側オブジェクトに対する代理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string containing the name of the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスの名前を格納している文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string that represents the contents of the receiving class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバであるクラスの内容を表した文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessibility</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセシビリティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding Classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスを加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a method to a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドをあるプロトコルに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a new instance variable to a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンス変数をクラスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a new method to a class with a given name and implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいメソッドをある与えられた名前と実装をもつクラスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a property to a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロパティをあるクラスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a property to a protocol that is under construction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコルをある建設中のプロトコルに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a protocol to a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコルをあるクラスに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a registered protocol to another protocol that is under construction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある登録済みプロトコルを、建設中の別のプロトコルに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All +load methods in your image.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのイメージの中の全ての+loadメソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All initializers in any framework you link to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれへとリンクする何らかのフレームワークの中の全てのイニシャライザ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All initializers in frameworks that link to you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたへとリンクするフレームワークの中の全てのイニシャライザ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All perform requests having the same target aTarget are canceled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じ目標（ターゲット）aTargetを持つ全ての実行要請がキャンセルされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All types of return values can be delivered to the sender: id types, structures, double-precision floating-point numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての型の戻り値が、送り手に届けらることができます：id型、構造体、倍精度浮動小数点数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates a new instance of the receiving class, sends it an init message, and returns the initialized object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>受け取っているクラスの新しいインスタンスをメモリ割り当てして、それにinitメッセージを送ります、そしてその初期化されたオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An IMP that was created using the imp_implementationWithBlock(_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるIMP、それはimp_implementationWithBlock(_:)関数を使って作成されたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>移動、コピー、名前変更、または消去を試みる直前に、または与えられたパスにリンクを試みる前にハンドラにこのメッセージを送ったNSFileManagerオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルまたはディレクトリをコピー、移動、削除、またはリンクする場合にそれが出くわす各エラーに対するそれのハンドラにこのメッセージを送ったNSFileManagerオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An NSString-keyed dictionary of the receiver's scriptable properties, including all of those that are declared as Attributes and ToOneRelationships in the .scriptSuite property list entries for the class and its scripting superclasses, with the exception of ones keyed by "scriptingProperties." Each key in the dictionary must be identical to the key for an Attribute or ToOneRelationship.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバの持つスクリプト対応プロパティの、NSStringでキー付けされたディクショナリです、含んでいるのは.scriptSuiteプロパティリスト登録項目においてクラスとそれのスクリプティングスーパークラスに対してAttributesおよびToOneRelationshipsとして宣言される全てのもので、「scriptingProperties」によってキー付けされるものは除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An NSString-keyed dictionary of the receiver's scriptable properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバの持つスクリプト対応プロパティのNSStringでキー付けされたディクショナリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An objc_method_description structure that describes the method specified by m.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるobjc_method_description構造体、それはmによって指定されたメソッドを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Objective-C method is simply a C function that take at least two arguments—self and _cmd.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cメソッドは、単純にC関数です、それは少なくとも２つの引数を取ります—selfと_cmd。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Objective-C object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるObjective-Cオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array containing the keys for the to-many relationship properties of the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバの対多関係プロパティに対するキーを格納している配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of NSString objects containing the names of immutable values that instances of the receiver's class contain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSStringオブジェクトの配列、不変の値の名前を格納していて、それはレシーバのクラスのインスタンスを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of C strings representing all of the class names within the specified library or framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたライブラリまたはフレームワーク内のクラス名の全てを表しているC文字列それらからなるある配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of pointers of type Method describing the instance methods implemented by the class—any instance methods implemented by superclasses are not included.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのクラスによって実装されるインスタンスメソッドを記述している型Methodのポインタそれらからなるある配列 — スーパークラスによって実装されるどんなインスタンスメソッドも含まれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of pointers of type objc_property_t describing the properties declared by the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのクラスによって宣言されるプロパティを記述している型objc_property_tのポインタそれらからなるある配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of strings that identifies the modes in which it is permissible to perform the specified selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列からなる配列、それは指定されたセレクタの実行が許可されるモードを識別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of strings that identify the modes to associate with the timer that performs the selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列からなる配列、それはモードを識別してセレクタを実行するタイマーと結びつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An error is generated if instances of the receiver can’t respond to aSelector messages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのインスタンスがaSelectorメッセージに応答出来ないならばエラーが生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An error object containing details of why the connection failed to load the request successfully.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>なぜ接続がリクエストをうまくロードするのに失敗したかの詳細を含んでいるエラーオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An implementation of the forwardInvocation: method has two tasks:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forwardInvocation:メソッドの実装には２つのやるべき仕事があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An informal protocol that objects adopt to be notified of changes to the specified properties of other objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある非形式プロトコル、それは、オブジェクトが採用して、他のオブジェクトの指定されたプロパティに対する変更の通知を受けるようになるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An initialized object, or nil if an object could not be created for some reason that would not result in an exception.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化されたオブジェクト、または例外に終わらない何らかの理由でオブジェクトが作成されることができなかったならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer indicating the version number of the class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス定義のバージョン番号を指し示しているある整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object containing information about the attributes and relationships of the receiver’s class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのクラスの属性とリレーションシップ（関係）についての情報を格納しているオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object isn’t ready to be used until it has been initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトは、それが初期化されてしまうまで使われる準備ができていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object might encode itself into an archive, but encode a proxy for itself if it’s being encoded for distribution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトは、それ自身をアーカイブへとエンコードします、しかしそれが供給のためにエンコードされるならば、それ自身の代理をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object or objects to be copied.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされるオブジェクトまたは複数のオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object specifier to be evaluated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>評価されるオブジェクト指定子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any properties declared by superclasses are not included.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラスによって宣言されるどんなプロパティも含まれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>observeValue(forKeyPath:of:change:context:)においてobserverに渡される随意のデータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Archiving</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As part of its normal run loop processing, the main thread dequeues the message (assuming it is running in one of the common run loop modes) and invokes the desired method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの標準的な実行ループ処理の一部として、メインスレッドはメッセージを（それが通常の実行ループモードの１つで実行されていると仮定して）デキューして、要望されたメソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As part of its normal run loop processing, the main thread dequeues the message (assuming it is running in one of the specified modes) and invokes the desired method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの標準的な実行ループ処理の一部として、メインスレッドはメッセージを（それが指定されたモードの１つで実行されていると仮定して）デキューして、要望されたメソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As part of its normal run loop processing, the target thread dequeues the message (assuming it is running in one of the default run loop modes) and invokes the desired method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの標準的な実行ループ処理の一部として、目標のスレッドはメッセージを（それが省略時の実行ループモードの１つで実行されていると仮定して）デキューして、要望されたメソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As part of its normal run loop processing, the target thread dequeues the message (assuming it is running in one of the specified modes) and invokes the desired method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの標準的な実行ループ処理の一部として、目標のスレッドはメッセージを（それが指定された実行ループモードの１つで実行されていると仮定して）デキューして、要望されたメソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associative References</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting Recovery From Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーからの復旧を試みる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because nil is a valid return value, failure is signaled by invoking the object specifier’s setEvaluationError: method before returning.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilは有効な戻り値なので、失敗は、返る前にオブジェクト指定子の持つsetEvaluationError:メソッドを発動することによって合図されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cancels perform requests previously registered with perform(_:with:afterDelay:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>perform(_:with:afterDelay:)で登録された実行要請を取消します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以前にperform(_:with:afterDelay:)インスタンスメソッドで登録された実行要請を取消します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Caution should be taken when obtaining the version from within an NSCoding protocol or other methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSCodingプロトコルまたは他のメソッド内部からバージョンを手に入れる時は注意が払われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changes the attributes of a given file or directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたファイルまたはディレクトリの属性を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class methods should be added to the metaclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスメソッドは、メタクラスに加えられるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes derived from the Foundation framework NSObject class can obtain the class-definition version number using the getVersion class method, which is implemented using the class_getVersion function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoundationフレームワークのNSObjectクラスから派生するクラスは、クラス定義バージョン番号をsetVersion:クラスメソッドを使って入手できます、それはclass_getVersion関数を使って実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes derived from the Foundation framework NSObject class can set the class-definition version number using the setVersion: class method, which is implemented using the class_setVersion function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FoundationフレームワークのNSObjectクラスから派生するクラスは、クラス定義バージョン番号をsetVersion:クラスメソッドを使って設定できます、それはclass_setVersion関数を使って実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cocoa scripting takes advantage of key-value coding to get and set information in scriptable objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoaスクリプティングは、「キー値」コーディングを利用して、スクリプト対応オブジェクの中の情報を取得及び設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの型が準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms To</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constants</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a directory (without contents) at a given path with given attributes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ディレクトリを（内容無しで）与えられたパスで、いくらかの与えられた属性とともに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new class and metaclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいクラスとメタクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new protocol instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいプロトコルインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a pointer to a function that calls the specified block when the method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある関数へのポインターを作成します、それはメソッドが呼び出される時に指定されたブロックを呼び出すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a symbolic link identified by a given path that refers to a given location.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたパスによって識別されるシンボリックリンクを作成します、それは与えられた場所に言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スクリプト対応クラスのインスタンスを作成して返します、それの内容とプロパティを設定します、キーによって識別されるリレーションシップへの挿入のためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたリレーションシップへと挿入されるひとつ以上のスクリプティングオブジェクトを作成して返します、それは渡された値をコピーしてコビーされたオブジェクトまたは複数オブジェクトにおいてプロパティを設定することによってです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating, Copying, and Deallocating Objects</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトの作成、複製、そして割り当て解除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまなデータ型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deallocates the memory occupied by the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバによって占有されたメモリを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declaration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deprecated</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非推奨</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deprecated Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非推奨メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deprecated Symbols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非推奨シンボル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Derived from the "with properties" parameter of a duplicate command.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>duplicateコマンドの「with properties」パラメータから引き出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describes the instance methods implemented by a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスによって実装されたインスタンスメソッドを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describes the instance variables declared by a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスによって宣言されたインスタンス変数を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describes the macOS Objective-C runtime library support functions and data structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数とデータ構造体をサポートするmacOS Objective-C ランタイムライブラリを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describes the properties declared by a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスによって宣言されたプロパティを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describes the protocols adopted by a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスによって採用されたプロトコルそれらを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing Objects</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトの解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Destroys a class and its associated metaclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスとそれの関連メタクラスを破壊します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Disassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブロックをimp_implementationWithBlock(_:)を使って作成されたあるIMPと無関係にします、そしてその作成されたブロックのコピーを解放します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Discussion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not override alloc to include initialization code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>allocをオーバーライドして初期化コードを含めないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t simply send version to the return value of class—a subclass version number may be returned instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単純にversionをクラスの戻り値に送らないでください—サブクラスバージョン数が代わりに返されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During keyed unarchiving, instances of the receiver will be decoded as members of the returned class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付きアンアーカイブの間に、レシーバのインスタンスはこの返された型のメンバーとしてデコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamically Resolving Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的に決定するメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamically provides an implementation for a given selector for a class method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある指定された、クラスメソッドに対するセレクタに、実装を動的に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamically provides an implementation for a given selector for an instance method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある指定された、インスタンスメソッドに対するセレクタに、実装を動的に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumeration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumeration Case</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumeration Cases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exchanges the implementations of two methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのメソッドの実装を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File System</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルシステム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a given key that defines the name of the relationship from the receiver’s class to another class, returns the name of the relationship from the other class to the receiver’s class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのクラスから別のクラスへのリレーションシップ（関係）の名前を定義する指定されたキーに対して、別のクラスからレシーバのクラスへのリレーションシップの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any values a and b, a != b implies that a == b is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかのaとbに対して、a != bはa == bがfalseであることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, here MyClass adopts the (fictitious) AffiliationRequests and Normalization protocols:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここにあるMyClassは、（架空の）AffiliationRequestsとNormalizationプロトコルを採用します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, here the AffiliationRequests protocol incorporates the Joining protocol:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここでAffiliationRequestsプロトコルはJoiningプロトコルを取り入れます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if after decoding an object you discover that an equivalent object already exists, you can return the existing object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるオブジェクトのデコードの後に同等なオブジェクトが既に存在することをあなたが発見するならば、あなたは既存のオブジェクトを返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if the property is a to-many relationship, value will always be an array of objects to be copied, and this method must therefore return an array of objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、そのプロパティが対多関係ならば、valueは常にオブジェクトの配列でコピーされることになります。そしてこのメソッドは従ってオブジェクトの配列を返さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For historical reasons, alloc invokes allocWithZone:.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>歴史的な理由のために、allocはallocWithZone:を発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Accessibility Programming Guide for OS X or NSAccessibilityProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなる情報として、Accessibility Programming Guide for OS XまたはNSAccessibilityProtocolを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For possible values, see objc_AssociationPolicy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可能な値として、objc_AssociationPolicyを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For sdef-declared scriptability, however, the types of the passed-in objects reliably match the relevant sdef declarations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sdefで宣言されるスクリプト対応機能情報にとっては、しかしながら、渡されたオブジェクトの型は期待通りに関係するsdef宣言部分と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Forwarding Messages</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メッセージの転送</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foundation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファウンデーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Framework</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>由来プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions and data structures that comprise the Objective-C runtime, which provides support for the dynamic properties of the Objective-C language</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数およびデータ構造体で、Objective-Cランタイムを構成するもの、それはObjective-C言語の動的プロパティに対するサボートを提供します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gain low-level access to the Objective-C runtime and the Objective-C root types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-CランタイムとObjective-Cルート型への低水準アクセスを獲得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given an object specifier, returns the specified object or objects in the receiving container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクト指定子を与えられて、受け取っているコンテナの中の指定されたオブジェクトまたは複数のオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given the following function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の関数を与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handles messages the receiver doesn’t recognize.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが認識できないメッセージを取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handling Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーを取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, they can be used in program code to prevent a method from being inherited.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、それらはあるメソッドが継承されるのを妨げるためにプログラムコードにおいて使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identifying Classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスの識別</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If cls declares no properties, or cls is Nil, returns NULL and *outCount is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>clsがまったくプロパティを宣言しない、またはclsがNilであるならば、NULLを返します、そして*outCountは 0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If cls implements no instance methods, or cls is Nil, returns NULL and *outCount is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>clsがまったくインスタンスメソッドを実装しない、またはclsがNilであるならば、NULLを返して*outCountは0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If outCount is NULL, the length is not returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>outCountがNULLならば、長さは返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class adopts a protocol that incorporates another protocol, it must also implement all the methods in the incorporated protocol or inherit those methods from a class that adopts it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスが別のプロトコルを取り入れるプロトコルを採用するならば、それは、取り入れられたプロトコル中の全てのメソッドを実装するか、それを採用するクラスからそれらのメソッドを継承しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a replacement is returned, your overriding method is responsible for releasing the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりの物を返すならば、あなたのオーバーライドしているメソッドは、そのレシーパをリリースする責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an object implements (or inherits) this method, and returns a non-nil (and non-self) result, that returned object is used as the new receiver object and the message dispatch resumes to that new object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトがこのメソッドを実装（または継承）するならば、そして非nil（および非self）の結果を返すならば、その返されるオブジェクトが新しいレシーバ（受け取り手）オブジェクトとして使われます、そしてメッセージ発送はその新しいオブジェクトに対して再び始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no version has been set, the default is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バージョンが設定されていないならば、初期状態では0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the method name has already been registered, this function simply returns the selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッド名が既に登録されているならば、この関数は単にそのセレクタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the new object can’t be initialized, the method should return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいオブジェクトが初期化されることができなかったならば、そのメソッドはnilを返すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the receiver is an instance, aSelector should refer to an instance method; if the receiver is a class, it should refer to a class method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバがインスタンスならば、aSelectorは勿論インスタンスメソッドを参照するはずです；レシーバがクラスならば、それはクラスメソッドを参照するはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this property is nil, the result of this property is ignored.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティがnilならば、このプロパティの結果は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you implement this method in a non-root class, if your class has nothing to return for the given selector then you should return the result of invoking super’s implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのメソッドを非ルートクラスにおいて実装する場合、あなたのクラスが指定されたセレクタに対して返すことが何もないならばその時はあなたはスーパーの実装の発動の結果を返すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you specify nil or an empty array for this parameter, this method returns without performing the specified selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがnilまたは空の配列をこのパラメータに指定するならば、このメソッドは指定されたセレクタを実行することなく返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you specify different modes for each selector, any selectors whose associated mode does not match the current run loop mode are skipped until the run loop subsequently executes in that mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが異なるモードをそれぞれのセレクタに指定するならば、それと結びつけられたモードが現在の実行ループモードと一致しないあらゆるセレクタは、実行ループが後でそのモードで実行されるまでスキップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが複数回実行されることから身を守りたいならば、あなたはこれらの行に沿ってあなたの実装を組織立てることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementations of the forwardInvocation: method can do more than just forward messages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forwardInvocation:メソッドの実装は、ただメッセージを転送するよりも多くのことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスによって実装されて、新しいオブジェクト（レシーバ）を、それのためのメモリが割り当てられた直後に初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implemented to attempt a recovery from an error noted in a document-modal sheet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ドキュメントモーダルシートにおいて注記されるエラーからの復旧を試みるために実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implemented to attempt a recovery from an error noted in an application-modal dialog.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションモーダルダイアログにおいて注記されるエラーからの復旧を試みるために実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an implementation of dealloc, do not invoke the superclass’s implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>deallocの実装において、スーパークラスの実装を発動しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, this method must not return normally; it must always result in an exception being thrown.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、このメソッドは普通に返してはいけません；それは常に例外をスローされる結果になる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the simple case, in which an object forwards messages to just one destination (such as the hypothetical friend instance variable in the example below), a forwardInvocation: method could be as simple as this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトがメッセージをただ１つの目的地に転送する（以下の例での仮定のfriendインスタンス変数ように）、単純な場合では、forwardInvocation:メソッドはこれと同じくらい単純でありえます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inequality is the inverse of equality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不等性は、同等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inherited By</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承される先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the class before it receives its first message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスを、それがそれの最初のメッセージを受け取る前に初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializing a Class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスの初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserted by the compiler when a mutation is detected during a foreach iteration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある変異がforeach反復の間に検知される時に、コンパイラによって挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスプロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance methods and instance variables should be added to the class itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスメソッドおよびインスタンス変数は、クラスそれ自身に加えられるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, an object’s dealloc method is invoked by the runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、オブジェクトのdeallocメソッドはランタイムによって初登されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスまたはカテゴリがObjective-Cランタイムに加えられる時はいつでも発動します；このメソッドを実装して、クラス特有の挙動をロードすることで実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on a new background thread.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのメソッドを新しいバックグラウンドスレッド上で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on the current thread using the default mode after a delay.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのあるメソッドを現在のスレッド上で省略時のモードを使ってある猶予の後で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on the current thread using the specified modes after a delay.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのあるメソッドを現在のスレッド上で指定したモードを使ってある猶予の後で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on the main thread using the default mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのメソッドをメインスレッド上で省略時のモードを使って発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on the main thread using the specified modes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのメソッドをメインスレッド上で指定モードを使って発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on the specified thread using the default mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのメソッドを指定スレッド上で省略時のモードを使って発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes a method of the receiver on the specified thread using the specified modes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのメソッドを指定スレッド上で指定モードを使って発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It delegates the message by creating an NSInvocation object representing the message and sending the receiver a forwardInvocation: message containing this NSInvocation object as the argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、メッセージを表すNSInvocationオブジェクトを作成し、このNSInvocationオブジェクトを引数として格納するforwardInvocation:メッセージをレシーバに送ることによって、メッセージを委任します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It doesn’t check to see whether the methods declared in the protocol are actually implemented—that’s the programmer’s responsibility.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、プロトコルで宣言されるメソッドが実際に実装されるかどうか確認しません—それはプログラマーの責任です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is an error to store self into a new or existing live object (colloquially known as “resurrection”), which implies that this method will be called only once.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfを新しいまたは既存の生きているオブジェクトに格納すること（通称で「再生」として知られる）はエラーとなります、それはこのメソッドがただ一度だけ呼び出されることになるのを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is not useful where the goal of the forwarding is to capture the NSInvocation, or manipulate the arguments or return value during the forwarding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、転送の目的が、NSInvocationをキャプチャすること、または転送の間に引数や戻り値に手を入れることであるところでは実用的ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It succeeds if the run loop is running and in one of the specified modes; otherwise, the timer waits until the run loop is in one of those modes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行ループが動作していて指定されたのモードの１つならばそれはうまくいきます；そうでなければタイマーは実行ループがこれらのモードの１つになるまで待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It succeeds if the run loop is running and in the default mode; otherwise, the timer waits until the run loop is in the default mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行ループが動作していてデフォルトのモードならばそれはうまくいきます；そうでなければタイマーは実行ループがデフォルトのモードになるまで待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key-Value Coding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値コーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key-Value Observing</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値監視する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Listing 1</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード出力 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Loads the object referenced by a weak pointer and returns it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>弱いポインタによって参照されたオブジェクトをロードします、そしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Locates and returns the address of the implementation of the instance method identified by a given selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたセレクタによって識別されるインスタンスメソッドの実装の所在（アドレス）を突き止めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Locates and returns the address of the receiver’s implementation of a method so it can be called as a function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドのこのレシーバの持つ実装の所在（アドレス）を突き止めて返します、それでそれは関数として呼び出し可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple calls to this method from the same thread cause the corresponding selectors to be queued and performed in the same same order in which the calls were made, assuming the associated run loop modes for each selector are the same.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの同じスレッドからの複数の呼び出しは、該当しているセレクタがデキューされて、それらの呼び出しがされたのと同じ順序で実行されるようにします、それぞれのセレクタに関して実行ループモードが同じであると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple calls to this method from the same thread cause the corresponding selectors to be queued and performed in the same same order in which the calls were made.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの同じスレッドからの複数の呼び出しは、該当しているセレクタがデキューされて、それらの呼び出しがされたのと同じ順序で実行されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject Script Support</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectスクリプトサポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this function searches superclasses for implementations, whereas class_copyMethodList(_:_:) does not.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数はスーパークラスを実装を求めて検索することに注意してください、一方でclass_copyMethodList(_:_:)はそうしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notifications</seg>
      </tuv>
      <tuv lang="JA">
        <seg>通知</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notify objects about changes to the properties of other objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のオブジェクトのプロパティに対する変更についてオブジェクトに通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Object Basics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト基礎</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Object Runtime</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトランタイム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C Runtime</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cランタイム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Obtaining Information About Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドについての情報の取得</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On This Page</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この項には</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On return, contains the length of the returned array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻りでは、返された配列の長さを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのメソッドを呼び出して自動的には通常の原則上で動かされない実行ループに登録することに終わるかもしれないよくある文脈は、ディスパッチキューによって発動されている時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to forward messages to other objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、メッセージを別のオブジェクトへ転送するためにサブクラスによってオーバーライドされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to substitute a class other than its own during coding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスによってオーバーライドされて、コーディングの間にそれ自身とは違うあるクラスに置き換えるようにされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to substitute a new class during keyed unarchiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスによってオーバーライドされて、キー付きアンアーカイブの間に新しいクラスの代理を務めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to substitute another object for itself during archiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスによってオーバーライドされて、アーカイブの間に別のオブジェクトをそれ自身の代わりにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to substitute another object for itself during encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスによってオーバーライドされて、エンコーディングの間に別のオブジェクトをそれ自身の代わりにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to substitute another object for itself during keyed archiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスによってオーバーライドされて、キー付きアーカイブの間に別のオブジェクトをそれ自身の代わりにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サプクラスによってオーバーライドされて、デコードされた後このメッセージを受け取ったオブジェクトに代わって別のオブジェクトが代理を務めるようにされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden to return the names of classes that can be used to decode objects if their class is unavailable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらオブジェクトをデコードするために使われることが出来るクラスの名前を、それらのクラスが利用可能でないならば返すようにオーバーライド（サブクラスによって上書き）されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="JA">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パラメータ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass nil if the method does not take an argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドが引数を取らないならばnilを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass nil to match a request for nil that was originally passed as the argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>元々引数として渡されたのがnilであるある要請と一致させるにはnilを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass nil to clear an existing association.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilを渡すことで、ある既存の関連を取り除いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass the class definition for which you wish to obtain the version.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してあなたがバージョンを入手したいクラス定義を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass the class definition for which you wish to set the version.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してあなたがバージョンを設定したいクラス定義を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass the name of the method you wish to register.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが登録したいメソッドの名前を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass the new version number of the class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのクラス定義の新しいバージョン番号を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing comparisons</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>様々なプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols are adopted by listing them within angle brackets after the interface declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、インターフェイス宣言の後に山形括弧の中にそれらを列記することによって採用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols incorporate other protocols in the same way classes adopt them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、クラスがそれらを採用するのと同じ方法で他のプロトコルを取り入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raised when a key value coding operation fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値コーディング演算が失敗する時に引き起こされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reads the value of an instance variable in an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトの中のあるインスタンス変数の値を読み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers a class that was allocated using objc_allocateClassPair(_:_:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objc_allocateClassPair(_:_:_:)を使ってアロケートされたクラスを登録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers a given timer with a given input mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたタイマーをある与えられた入力モードで登録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers a method name with the Objective-C runtime system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッド名をObjective-C runtimeシステムに登録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドをObjective-C runtimeシステムに登録して、そのメソッド名をあるセレクタにマップして、そしてそのセレクタ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Registers a newly created protocol with the Objective-C runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しく作成されたプロトコルをObjective-C runtimeに登録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related Documentation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連文書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Relationships</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関係</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all associations for a given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトに対して全ての関連を取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace a property of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのあるプロパティを置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the contents of the item at the specified URL in a manner that ensures no data loss occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データ損失が生じないことを保証する流儀で、指定されたURLで項目の内容を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the implementation of a method for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対するあるメソッドの実装を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必須。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns nil if an error occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーが起こるならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two values are not equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether a class conforms to a given protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、それはあるクラスがある与えられたプロトコルに準拠するかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether a class object is a metaclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、それはあるクラスオブジェクトがメタクラスであるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether instances of a class respond to a particular selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、それはあるクラスのインスタンスそれらがある特定のセレクタに応答するかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether instances of the receiver are capable of responding to a given selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのインスタンスが指定したセレクタに応答する能力があるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether one protocol conforms to another protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、それは一方のプロトコルが別のプロトコルに準拠するかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバの中の文字の大文字小文字等が無視される場合に、与えられた文字列に「似ている」とレシーバが見なされるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver and a given object are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバと与えられたオブジェクトが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver conforms to a given protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが指定したプロトコルに準拠するかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver contains a given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトをレシーバが含んでいるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is "like" another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトと「似ている」かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is equal to another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトと等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is greater than another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトより大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is greater than or equal to another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトより大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is less than another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトより小さいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is less than or equal to another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトより小さいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiver is not equal to another given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバが別の与えられたオブジェクトと等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the receiving class is a subclass of, or identical to, a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>受け取り手のクラスが、指定されたあるクラスのサブクラス、またはそれと同一であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether two protocols are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、それは２つのプロトコルが等しいかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether two selectors are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、それは２つのセレクタが等しいかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a description of the Ivar layout for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対するIvarレイアウトの記述を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a description of the layout of weak Ivars for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対する弱いIvarそれらのレイアウトの記述を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a dictionary that describes the POSIX attributes of the file specified at a given.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられるところで指定されたファイルのPOSIX属性を記述する辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a dictionary that describes the attributes of the mounted file system on which a given path resides.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこにおいて与えられたパスが存在するところのマウントされたファイルシステムの属性を記述する辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a method description structure for a specified method of a given protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたプロトコルのある指定されたメソッドに対するメソッド記述構造体を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a method description structure for a specified method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたメソッドに対するメソッド記述構造体を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new instance of the receiving class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのクラスの新しいインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a pointer to any extra bytes allocated with a instance given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるインスタンス、与えられたオブジェクト、でアロケートされた何らかの余分なバイトへのポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a pointer to the data structure describing a given class method for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対するある与えられたメソッドを記述しているデータ構造体へのポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a property with a given name of a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスのある与えられた名前をもつプロパティを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a specified instance method for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対するある指定されたインスタンスメソッドを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a specified protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたプロトコルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing a method's parameter and return types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドのもつパラメータおよび戻り型を記述している文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing a method's return type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドのもつ戻り型を記述している文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string describing a single parameter type of a method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドのある単一のパラメータ型を記述している文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string that represents the contents of the receiving class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバであるクラスの内容を表した文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a the name of a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコルの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of all the protocols known to the runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>runtimeにとって既知の全てのプロトコルからなるある配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of method descriptions of methods meeting a given specification for a given protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたプロトコルに対するある与えられた仕様に合っているメソッドそれらのメソッド記述からなるある配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of the properties declared by a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコルによって宣言されるプロパティそれらからなるある配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array of the protocols adopted by a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロトコルによって採用されたプロトコルそれらからなるある配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an object initialized from data in a given unarchiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたアンアーカイバの中のデータから初期化されるオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an object specifier for the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバに対するオブジェクト指定子を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns by reference a string describing a method's return type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドのもつ戻り型を記述している文字列を参照によって返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns by reference a string describing a single parameter type of a method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドのある単一のパラメータ型を記述している文字列を参照によって返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Ivar for a specified class variable of a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Ivarをある与えられたクラスのある指定されたクラス変数に対して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the Ivar for a specified instance variable of a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Ivarをある与えられたクラスのある指定されたインスタンス変数に対して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the block associated with an IMP that was created using imp_implementationWithBlock(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IMPと結び付けられたブロックを返します、それはimp_implementationWithBlock(_:)を使って作成されたものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class name of a given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトのクラス名を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class object for the receiver’s class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのもつクラスのクラスオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class object for the receiver’s superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのスーパークラスに対するクラスオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the class of an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトのクラスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the directories and files (including symbolic links) contained in a given directory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたディレクトリの中に含まれる（シンボリックリンクを含む）ディレクトリとファイルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the function pointer that would be called if a particular message were sent to an instance of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数ポインタを返します、それはある特定のメッセージがあるクラスのあるインスタンスに送られたならば呼び出されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the implementation of a method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドの実装を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the indices of the specified container objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの指定されたコンテナオブジェクトのいくつかのインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of a method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the dynamic library a class originated from.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスがそれに源を発する動的ライブラリの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the name of the method specified by a given selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたセレクタによって指定されたメソッドの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the names of all the classes within a specified library or framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたライブラリまたはフレームワーク内の全てのクラスの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the names of all the loaded Objective-C frameworks and dynamic libraries.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全てのロードされたObjective-Cフレームワークおよび動的ライブラリの名前を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of arguments accepted by a method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドによって受け入れられる引数の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the object returned by copy(with:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>copy(with:)によって返されるオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the object returned by copyWithZone:.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>copyWithZone:によって返されるオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the object returned by mutableCopy(with:) where the zone is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>mutableCopy(with:)によって返されるオブジェクトを返します、そこでゾーンはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the object to which unrecognized messages should first be directed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有効でないメッセージが最初に向けられるべきオブジェクトを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the path of the directory or file that a symbolic link at a given path refers to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたパスでのシンボリックリンクが参照するディレクトリまたはファイルのパスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the size of instances of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのインスタンスのサイズを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the specified property of a given protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたプロトコルのこの指定されたプロパティを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the superclass of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのスーパークラスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value associated with a given object for a given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対してある与えられたオブジェクトと結び付けられた値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the version number assigned to the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのクラスに割り当てられたバージョン数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the version number of a class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス定義のバージョン番号を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scripting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スクリプトを書く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scripting Support</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スクリプティングサポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See Also</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sending Messages</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メッセージ送信</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets an associated value for a given object using a given key and association policy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトに対する関連値をある与えられたキーと関連ポリシーを使って設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the Ivar layout for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対してIvarレイアウトを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the class of an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトのクラスを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the current mutation handler.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在の変異ハンドラを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the implementation of a method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメソッドの実装を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the layout for weak Ivars for a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスに対する弱いIvarそれらのレイアウトを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the receiver's version number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのバージョンナンバーを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the superclass of a given class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある与えられたクラスのスーパークラスを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the value of an instance variable in an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトの中のあるインスタンス変数の値を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the version number of a class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス定義のバージョン番号を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Setting Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes there may be another class which may work nearly as well as a substitute for the new class, and the archive keys and archived state for the new class can be carefully chosen (or compatibility written out) so that the object can be unarchived as the substitute class if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>時には別のクラスが存在するかもしれません、それはおおよそその新しいクラスの代用として機能するかもしれません、そのため新しいクラスに対するアーカイブキーとアーカイブ状態は、綿密に選択される（または互換性が細大漏らさず書かれる）ことができます、それによって必要ならばそのオブジェクトが代用クラスとしてアンアーカイブされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special Considerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特別な注意事項</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifies the contents of the object to be created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>作成されるオブジェクトの内容を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifying a delay of 0 does not necessarily cause the selector to be performed immediately.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>0の猶予を指定することは、必ずしもセレクタが直ちに実行されるようにはしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stops the timer from ever firing again and requests its removal from its run loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タイマーがこれから先再び発火するのを妨げます、そしてそれの実行ループからのそれの除去を要請します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores a new value in a __weak variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値を__weak変数の中に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses to substitute a new class for instances during keyed archiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付きアーカイブ作成の間にインスタンスに対する新しいクラスの代理を務めるためのサブクラスたち。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subsequent messages to the receiver may generate an error indicating that a message was sent to a deallocated object (provided the deallocated memory hasn’t been reused yet).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その後に起こるレシーバへのメッセージは、割り当て解除されたオブジェクトにメッセージが送られたことを指し示すエラーを生成します（割り当て解除されたメモリがまだ再利用されていないという条件で）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Superclasses receive this message before their subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラスは、このメッセージをそれらのサブクラスの前に受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing Class Functionality</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスの機能性のテスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing Protocol Conformance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル準拠のテスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NSFileManager object that sent this message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメッセージを送り出すNSFileManagerオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The _cmd variable is a hidden argument passed to every method that is the current selector; in this example, it identifies the selector for the copy method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>_cmd変数は、ある隠された引数で、現在のセレクタであるどのメソッドにも渡されます；この例において、それはcopyメソッドに対するセレクタを識別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The forwardInvocation: message thus allows an object to establish relationships with other objects that will, for certain messages, act on its behalf.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forwardInvocation:メッセージはこのようにあるオブジェクトに、それの代行を、特定のメッセージに対して、務める他のオブジェクトとの関係（リレーションシップ）を確立させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isa instance variable of the new instance is initialized to a data structure that describes the class; memory for all other instance variables is set to 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのisaインスタンス変数は、このクラスを記述するデータ構造に初期化されます；他の全てのインスタンス変数のメモリは0に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NSUnknownKeySpecifierError and NSInvalidIndexSpecifierError numbers are special, in that Cocoa may continue evaluating an outer specifier if they're encountered, for the convenience of scripters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSUnknownKeySpecifierErrorとNSInvalidIndexSpecifierErrorナンバーは特別です、スクリプト記述者の便宜のために、Cocoaは外部の指定子の評価をそれらに出くわしたならば継続するという点において。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The finalize method itself will never be invoked more than once for a given object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>finalizeメソッドそれ自身は、指定されたオブジェクトに対して一回以上発動されることは決してありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The properties are derived from the with properties parameter of the duplicate command.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>propertiesは、duplicateコマンドのwith propertiesパラメータから引き出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The URL response for the connection's request.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>接続の持つリクエストに対するURL応答。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The action to perform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行するアクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The address of the implementation of the aSelector instance method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>aSelectorインスタンスメソッドの実装のアドレス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The address of the receiver’s implementation of the aSelector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このレシーバでのaSelectorの実装のアドレス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The archiver creating an archive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブを作成するアーカイバ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to pass to the method when it is invoked.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドに、それが発動されるときに渡される引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array contains *outCount pointers followed by a NULL terminator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列は、*outCountポインタにNULL終端子が続くものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array contains *outCount pointers followed by a NULL terminator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列は、*outCountポインタにNULL終端子が続くものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array contains *outCount pointers followed by a NULL terminator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列は、*outCountポインタにNULL終端子が続くものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class definition whose class variable you wish to obtain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのクラス変数をあなたが入手したいクラス定義。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class object for the receiver’s superclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのスーパークラスに対するクラスオプジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class of the scriptable object to be created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>作成されることになるスクリプト対応オブジェクトのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class to inspect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>調査するクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class to substitute for the receiver during keyed unarchiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付きアンアーカイブの間にレシーバの代理を務めるクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class to substitute for the receiver's own class during archiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブしている間にレシーバ自身のクラスに対して代理を務めるクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class to use as the new class's superclass, or Nil to create a new root class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいクラスのもつスーパークラスとして使うことになるクラス、またはNilを新しいルートクラスを作成するために。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class you are inquiring about.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれについて尋ねているクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class you want to inspect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが調査したいクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The coder encoding the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバをエンコードするコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The context in which the current script command is executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこにおいて現在のスクリプトコマンドが執行されるところの前後関係。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The copied object or objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされたオブジェクトまたは複数のオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The current thread must then dequeue and process the message when it has an opportunity to do so.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければその実行はキューに加えられ実行ループによって次の機会に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The debugger’s print-object command invokes this method to produce a textual description of an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッガの持つ「オブジェクト出力」コマンドは、このメソッドを発動することで、あるオブジェクトのテキスト記述を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The decoder used to decode the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバをデコードするために使われるデコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default implementation of this method copies scripting objects by sending copyWithZone: to the object or objects specified by value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの省略時の実装は、valueによって指定されるオブジェクトまたは複数のオブジェクトにcopyWithZone:を送ることによってスクリプティングオブジェクトをコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default implementation of this method creates new scripting objects by sending alloc to a class and init to the resulting object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの省略時の実装は、allocをあるクラスに送ってinitをその結果のオブジェクトに送ることによって新しいスクリプティングオブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default implementation returns true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の実装は、trueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の値は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default version is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時のバージョンは0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The forwarding object is, in a sense, able to “inherit” some of the characteristics of the object it forwards the message to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>転送先のオブジェクトは、ある意味では、メッセージの転送元のオブジェクトのいくつかの特徴を「継承する」ことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The garbage collector invokes this method on the receiver before disposing of the memory it uses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ガベージコレクションは、このメソッドをレシバー上で、それが使うメモリの処分を行う前に発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The group of methods that are fundamental to all Objective-C objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全てのObjective-Cオブジェクトにとって基本的なメソッドのグループ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The invocation to forward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この呼び出しを転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key for the association.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関連に対するキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The keys for the to-one relationship properties of the receiver, if any.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバの対一関係プロパティに対するキーを格納している配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The library or framework you are inquiring about.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれについて尋ねているライブラリまたはフレームワーク。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main thread encompasses the application’s main run loop, and is where the NSApplication object receives events.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メインスレッドは、アプリケーションのメイン実行ループを包み込みます、そしてNSApplicationオブジェクトがイベントを受け取るところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mechanism for forwarding messages uses information obtained from methodSignatureForSelector: to create the NSInvocation object to be forwarded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメッセージ転送メカニズムは、転送されることになるNSInvocationオブジェクトを作成するために、methodSignatureForSelector:から入手される情報を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The message in this case is a method of the current object that you want to execute on the target thread.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合におけるメッセージは、現在のオブジェクトのメソッドです、それはあなたが目標のスレッド上で実行するのを望むものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The message in this case is a method of the current object that you want to execute on the thread.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合におけるメッセージは、現在のオブジェクトのメソッドです、それはあなたがこのスレッド上で実行するのを望むものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The message that’s forwarded must have a fixed number of arguments; variable numbers of arguments (in the style of printf()) are not supported.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>転送されるメッセージは、決まった数の引数を持つ必要があります；変動する個数の引数（printf()の形式）はサポートされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method represented by aSelector must set up the thread environment just as you would for any other new thread in your program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>aSelectorによって表されるメソッドは、ちょうどあなたがあなたのプログラムにおいて何らかの他の新しいスレッドに対してするように、スレッド環境を準備しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain an instance method with the specified selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>aClassによって指定されたクラスに対する、aSelectorによって指定されたセレクタの実装に応答するメソッド、またはNULL、もし指定されたクラスまたはそれのスーパークラスがこの指定されたセレクタをもつインスタンスメソッドを含まないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method to inspect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>調査するメソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method you want to inquire about.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれについて尋ねたいメソッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum time before which the message is sent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メッセージが送られる前の最小限の時間。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルの名前</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of a selector to resolve.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この名前のセレクタを解決します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of the class of which obj is an instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objがそれのインスタンスであるクラスの名前。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of the class variable definition to obtain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入手したいクラス変数定義の名前。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of the relationship from the receiver’s class to another class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのクラスから別のクラスへのリレーションシップ（関係）の名前。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new class is now ready for use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいクラスは今や使用する準備ができました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new class, or Nil if the class could not be created (for example, the desired name is already in use).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいクラス、またはNil、もしそのクラスが作成されることができなかったならば（例えば、希望する名前が既に使用中である）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The newly available data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい利用可能なデータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes to allocate for indexed ivars at the end of the class and metaclass objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メタクラスオブジェクトそれらそしてクラスの終わりでのインデックスを付けられたivarそれらに対して割り当てられるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of class names in the returned array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返される配列の中のクラス名の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object encode instead of the receiver (if different).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコードするオブジェクト、レシーバの代理（異なるならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object to register for KVO notifications.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KVO通知に登録するオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object to remove as an observer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブザーバとして取り除くことになるオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object to substitute for the receiver during archiving.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブの間にレシーバの代わりをするオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object to which unrecognized messages should first be directed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有効でないメッセージが最初に向けられるべきオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object will be encoded as if it were a member of the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトは、それがこのクラスのメンバーであるかのようにエンコードされるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The observer must implement the key-value observing method observeValue(forKeyPath:of:change:context:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブザーバは、キー値監視メソッドobserveValue(forKeyPath:of:change:context:)を実装しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The order of initialization is as follows:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化の順番は以下になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The policy for the association.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関連に対するポリシー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The private subclasses of a class cluster substitute the name of their public superclass when being archived.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスクラスタのプライベートなサブクラスたちは、アーカイブされている時にそれらのパブリックなスーパークラスの名前の代理を務めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The properties to be set in the copied object or objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされたオブジェクトまたは複数のオブジェクトに設定されることになるプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The properties to be set in the new object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいオブジェクトにおいて設定されるプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol required as this method’s argument can be specified using the @protocol() directive:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの引数として要求されるプロトコルは、@protocol()指示文を使って指定されることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol you want to add (addition) must be registered already.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが加えたいプロトコル（addition）は、既に登録されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol you want to add the registered protocol to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこの登録済みプロトコルをそれへと加えたいプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol you want to add to (proto) must be under construction—allocated but not yet registered with the Objective-C runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれへと加えたいプロトコル（proto）は、建設中でなければなりません — アロケートされるしかしまだObjective-C runtimeに登録されない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのアップルイベント型コード、そのオブジェクトのクラスに対してNSScriptClassDescriptionオブジェクトに格納される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The receiver, or another object to take the place of the object that was decoded and subsequently received this message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバ、またはデコードされた後このメッセージを受け取ったオブジェクトに取って代わる別のオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The receiver’s forwardInvocation: method can then choose to forward the message to another object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのforwardInvocation:メソッドは、その時メッセージを他オブジェクトへ転送するほうを選びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The registered protocol you want to add to proto.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがprotoへと加えたい登録済みプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value of the forwarded message is returned to the original sender.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>転送されたメッセージの戻り値は、元々の送り手（センダー）に返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned objects or objects are then inserted into the container using key-value coding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるオブジェクトまたは複数のオブジェクトは、それから「キー値」コーディングを使ってコンテナへと挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root class of most Objective-C class hierarchies, from which subclasses inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たいていのObjective-Cクラス階層のルートクラス、そこからサブクラスは基本的なインターフェイスとObjective-Cオブジェクトとして振舞う能力を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The runtime system invokes this method whenever an object receives an aSelector message it can’t respond to or forward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ランタイムシステムは、あるオブジェクトが、それが応答または転送することができないaSelectorメッセージを受け取る時はいつでもこのメソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The selector is still queued on the thread’s run loop and performed as soon as possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタは、やはりスレッドの実行ループ上でキューに加えられ、そして可能な限り早く実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The selector must be a valid and non-NULL.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタは、有効で非NULLでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The selector must be non-NULL and valid for the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタは、レシーバに対して有効で非NULLでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The selector of the method you want to retrieve.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが回収したいメソッドのセレクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The source object for the association.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関連に対するソースオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The specified object or objects in the receiving container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>受け取っているコンテナの中の指定されたオブジェクトまたは複数オブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The statement:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この平叙文：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string may be NULL.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列はNULLであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string to use as the new class's name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいクラスの名前として使う文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string will be copied.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列はコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string with which to compare the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバと比較する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The superclass of the class, or Nil if cls is a root class, or Nil if cls is Nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのクラスのスーパークラス、またはNil、もしclsがルートクラスであるならば、またはNil、もしclsがNilであるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thread on which to execute aSelector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの上でaSelectorが実行されるスレッド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The timer is configured to run in the default mode (NSDefaultRunLoopMode).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このタイマーは、デフォルト（初期状態、省略時、特に何もしない場合）のモード（NSDefaultRunLoopMode）で実行されるように設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The timer is configured to run in the modes specified by the modes parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このタイマーは、modesによって指定されたのモードで実行されるように設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type must match the type of the property identified by key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その型は、keyによって識別されるプロパティの型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value for the property identified by key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyによって識別されるプロパティに対する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to associate with the key key for object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objectに対するkeyと結び付けられることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values of the dictionary must be Objective-C objects that are convertible to NSAppleEventDescriptor objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ディクショナリ中の各キーは、AttributesまたはToOneRelationshipsに対するキーとして識別されなければなりません。ディクショナリの値は、NSAppleEventDescriptorオブジェクトと変換できるObjective-Cオブジェクトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values that can be returned in a change dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある変更辞書において返されることが可能な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The version number applies to NSArchiver/NSUnarchiver, but not to NSKeyedArchiver/NSKeyedUnarchiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バージョン数はNSArchiver/NSUnarchiverに適用されます、しかしNSKeyedArchiver/NSKeyedUnarchiverには適用されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The version number assigned to the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのクラスに割り当てられたバージョン数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The version number for the receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>レシーバのバージョンナンバー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The version number is helpful when instances of the class are to be archived and reused later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バージョン数は、そのクラスのインスタンスがアーカイブされて後で再利用されるときに役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wrapper object is otherwise a subclass of NSProxy and forwards messages to the original receiver object as an NSProxy does.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このラッパーオブジェクトは、他の点ではNSProxyのサブクラスであり、メッセージをオリジナルのレシーバオブジェクトにNSProxyがするように転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then set the class's attributes with functions like class_addMethod(_:_:_:_:) and class_addIvar(_:_:_:_:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それからそのクラスのもつ属性をclass_addMethod(_:_:_:_:)およびclass_addIvar(_:_:_:_:_:)のような関数で設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The contentsValue and properties are derived from the with contents and with properties parameters of the make command.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>contentsValueとpropertiesは、makeコマンドのwith contentsとwith propertiesパラメータから引き出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Objective-C Runtime module APIs define the base of the Objective-C language. These APIs include:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C RuntimeモジュールAPIは、Objective-C言語の基礎を定義します。それらAPIは以下のものを含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This array must contain at least one string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この配列は、少なくとも１つの文字列を含まなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This documentation comment was inherited from ExpressibleByExtendedGraphemeClusterLiteral.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文書化コメントは、ExpressibleByExtendedGraphemeClusterLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This documentation comment was inherited from ExpressibleByUnicodeScalarLiteral.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文書化コメントは、ExpressibleByUnicodeScalarLiteralから引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function acquires the runtime lock.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、runtimeロックを獲得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a convenience method for classes that adopt the NSCopying protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、NSCopyingプロトコルを採用するクラスのための簡易メソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a convenience method for classes that adopt the NSMutableCopying protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、NSMutableCopyingプロトコルを採用するクラスのための簡易メソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is especially useful for object serialization (that is, archiving of the object in a flattened form), where it is important to recognize changes to the layout of the instance variables in different class-definition versions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、とりわけオブジェクトシリアル化に役立ちます（すなわち、オブジェクトの平坦化形式でのアーカイブ化）、そこにおいて異なるクラス定義バージョンにおけるインスタンス変数のレイアウトへの変更を判別することは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is part of Cocoa’s scripting support for inserting newly-created objects into containers without explicitly specifying a location.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、新規作成オブジェクトを明示的な場所指定なしにコンテナそれらに挿入するための、Cocoaの持つスクリプティングサポートの一部です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは不等演算子（!=）の、Equatableに準拠するあらゆる型に対する初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when you simply want to redirect messages to another object and can be an order of magnitude faster than regular forwarding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、あなたがメッセージを別のオブジェクトに単純に転送したい場合に実用的で、正規に転送していくよりも膨大な規模の速さを持つことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはnilであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method allows you to dynamically provide an implementation for a given selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、あなたに指定されたセレクタに対する実装を動的に提供させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method can be used to hide an NSDiscardableContent object's content volatility by creating an object that responds to the same messages but holds the contents of the original receiver available as long as the created proxy lives.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、NSDiscardableContentオブジェクトの持つ内容の揮発性を同じメッセージに応答するオブジェクトの作成によって隠して、しかし作成されたプロキシが生きている間はオリジナルのレシーバの内容を利用可能に保持するという目的に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method creates a new thread in your application, putting your application into multithreaded mode if it was not already.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、新しいスレッドをあなたのアプリケーションにおいて作成します、あなたのアプリケーションを、それがまだそうでなかったならば、あなたのアプリケーションをマルチスレッドモードにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method determines conformance solely on the basis of the formal declarations in header files, as illustrated above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、ただ単にヘッダファイル中の形の上での宣言に基づいて準拠を、上で説明されるように、判定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method exists for historical reasons; memory zones are no longer used by Objective-C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは歴史的理由から存在します；メモリゾーンはもはやObjective-Cによって使われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method gives an object a chance to redirect an unknown message sent to it before the much more expensive forwardInvocation: machinery takes over.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、あるオブジェクトに対してそれに送られた未知のメッセージを転送する機会を、ずっと高くつくforwardInvocation:の仕掛けが引き継ぐ前に与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is called before the Objective-C forwarding mechanism is invoked.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、Objective-Cの転送メカニズムが発動される前に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is deprecated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは非推奨にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is invoked by NSArchiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、NSArchiverによって発動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is invoked by NSCoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、NSCoderによって発動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is invoked on the prospective container of the copied object or objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、コピーされたオブジェクトまたは複数のオブジェクトの予想されるコンテナ上で発動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is invoked on the prospective container of the new object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、新しいオブジェクトの予想されるコンテナ上で発動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is present for historical reasons and is not used with keyed archivers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは歴史的理由から存在します、そしてキー付きアーカイバでは使われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method might successfully return an object, an array of objects, or nil, depending on the kind of object specifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、オブジェクト指定子の種類に依存して、成功裏にあるオブジェクト、複数オブジェクトの配列、またはnilを返すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method overrides the results of the decoder’s class and instance name to class encoding tables.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはデコーダのクラスとクラスエンコーディングテーブルに対するインスタンス名をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method queues the message on the run loop of the main thread using the run loop modes specified in the array parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはメッセージを、メインスレッドの実行ループ上でarrayパラメータで指定された実行ループモードを使ってキューに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method queues the message on the run loop of the target thread using the run loop modes specified in the array parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはメッセージを、目標のスレッドの実行ループ上でarrayパラメータで指定した実行ループモードを使ってキューに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、それの現在の文脈の実行ループに登録します、そしてその実行ループが通常の原則上で動かされて正しく成し遂げられることをあてにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method removes perform requests only in the current run loop, not all run loops.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、全ての実行ループではなく、現在の実行ループにおいてのみ実行要請を取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method sets up a timer to perform the aSelector message on the current thread’s run loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、aSelectorメッセージを現在のスレッドの実行ループ上で実行するためのタイマーを準備します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method, in turn, raises an NSInvalidArgumentException, and generates an error message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、順に、NSInvalidArgumentExceptionを引き起こし、そしてエラーメッセージを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This object need not be the same for all messages.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオブジェクトは、全てのメッセージに対して同じものである必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This parameter is ignored.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパラメータは無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This parameter may be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパラメータはnilであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is overridden by the encoder class and instance name to class encoding tables.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、エンコーダクラスとクラスエンコーディングテーブルに対するインスタンス名によってオーバーライドされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is used by Cocoa’s scripting support classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Cocoaスクリプティングをサポートするクラスによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property returns a proxy for the receiving object if the receiver adopts the NSDiscardableContent protocol and still has content that has not been discarded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、レシーバであるオブジェクトに対するプロキシ（代理）を、そのレシーバがNSDiscardableContentプロトコルを採用してなおかつ廃棄されてはいない内容を持つならば、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This should usually be 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、通常は0であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This thread represents the target thread.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスレッドは、目標スレッドを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value must not be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、nilであってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new class, start by calling objc_allocateClassPair(_:_:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいクラスを作成するには、objc_allocateClassPair(_:_:_:)を呼び出すことによって開始してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the class methods of a class, use class_copyMethodList(object_getClass(cls), &amp;count).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのクラスメソッドを取得するには、class_copyMethodList(object_getClass(cls), &amp;count)を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the implementations of methods that may be implemented by superclasses, use class_getInstanceMethod(_:_:) or class_getClassMethod(_:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スーパークラスによって実装されないかもしれないメソッドの実装を取得するには、class_getInstanceMethod(_:_:)またはclass_getClassMethod(_:_:)を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To locate an object that can respond to the message encoded in anInvocation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>anInvocationにおいてエンコードされるメーセージに応答できるオブジェクトを突き止める。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make use of the default implementation, you must therefore implement and register a suitable class description—see NSClassDescription.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の実装を使えるようにするには、あなたは従ってふさわしいクラス記述を実装して登録する必要があります—NSClassDescriptionを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To respond to methods that your object does not itself recognize, you must override methodSignatureForSelector: in addition to forwardInvocation:.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのオブジェクトがそれ自身では認識しないメソッドに応答するには、あなたはforwardInvocation:に加えてmethodSignatureForSelector:をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To send the message to that object using anInvocation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのオブジェクトにanInvocationを使ってメッセージを送る。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Topics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Aliases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型プロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type to specify the behavior of an association.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある関連の挙動を指定する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types such as the NSObject class and the NSObjectProtocol protocol that provide the root functionality of most Objective-C classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectクラスとNSObjectProtocolプロトコルのようないくつかの型で、大部分のObjective-Cクラスの根幹的機能性を提供するもの</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically, however, you are encouraged to relinquish resources prior to finalization if at all possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>通常は、しかしながら、あなたはともかく可能ならばファイナライゼーションの前にリソースを放棄するのを奨励されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Upon return, contains the number of protocols in the returned array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻りでは、返される配列の中のプロトコルの数を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the class name explicitly when getting a class version number:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスバージョン数を取得する時はクラス名を明示的に使ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the new method-based API instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいメソッド基盤のAPIを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to ask the class object for the implementation of instance methods only.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスメソッドの実装についてクラスオブジェクトに尋ねるためにだけこのメソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Used by Foundation's Key-Value Observing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Foundationのキー値コーディング監視によって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Key-Value Observing in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおいてキー値監視を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Objective-C Language Features</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C言語機能を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Validation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>検証</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Version numbers are needed for decoding or unarchiving, so older versions of an object can be detected and decoded correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バージョン数は、デコードまたはアンアーカイブのために必要とされます、それで古いバージョンのオブジェクトは削除されて、正しくデコードされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Version-Notes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バージョンに注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an object is sent a message for which it has no corresponding method, the runtime system gives the receiver an opportunity to delegate the message to another receiver.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトが、それが対応するメソッドを持たないメッセージを送られる場合、ランタイムシステムは、メッセージを別のレシーバに委任する機会をそのレシーバに与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When garbage collection is enabled, this method is invoked instead of dealloc.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ガベージコレクションが可能にされる場合、このメソッドはdeallocの代わりに発動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When not using ARC, your implementation of dealloc must invoke the superclass’s implementation as its last instruction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ARCを使っていない場合、あなたのdeallocの実装は、スーパークラスの実装をそれの最後の命令として発動しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タイマーが点火した場合、スレッドはこのメッセージを実行ループからデキューして（待ち行列からはずして）セレクタを実行しようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you are done building the class, call objc_registerClassPair(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがクラスの構築を終えた時は、objc_registerClassPair(_:)を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Class Descriptions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス記述を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Instances</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Libraries</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ライブラリを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メソッドを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Selectors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with object specifiers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト指定子を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can get a pointer to the new metaclass by calling object_getClass(newClass).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、新しいメタクラスに対するポインタを、object_getClass(newClass)を呼び出すことによって取得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override the copyScriptingValue method to take more control when your application is sent a duplicate command.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、copyScriptingValueメソッドをオーバーライドして、より多くの制御をすることが、あなたのアプリケーションがduplicateコマンドを送られるときに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override the newScriptingObjectOfClass method to take more control when your application is sent a make command.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、newScriptingObjectOfClassメソッドをオーバーライドして、より多くの制御をすることが、あなたのアプリケーションがmakeコマンドを送られるときに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override this method to relinquish resources the receiver has obtained, as shown in the following example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドをオーバーライドして、レシーバが獲得しているリソースを放棄することができます、以下の例で示すように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the version number of the class definition to provide versioning of the interface that your class represents to other classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、クラス定義のバージョン番号を使って、あなたのクラスが他のクラスに提示するインターフェイスのバージョン管理を提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method if you introduce a new class into your application to provide some backwards compatibility in case the archive will be read on a system that does not have that class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが新しいクラスをあなたのアプリケーションに導入することで、そのクラスを持たないシステム上でアーカイブが読み出される場合に備えていくらかの後方互換性を提供する場合には、あなたはこのメソッドを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to deliver messages to other threads in your application.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドを使って様々なメッセージをあなたのアプリケーションの別のスレッドに届けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to deliver messages to the main thread of your application.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドを使って様々なメッセージをあなたのアプリケーションのメインスレッドに届けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to eliminate redundant objects created by the coder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドを使って、コーダによって作成される冗長なオブジェクトを省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot cancel messages queued using this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドを使ってキューされたメッセージをキャンセルできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must free the array with free().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、配列をfree()で自由にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must free the array with free().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、配列をfree()で自由にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must free the list with free().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、リストをfree()で自由にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must register a method name with the Objective-C runtime system to obtain the method’s selector before you can add the method to a class definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、メソッド名をObjective-C runtimeシステムに登録することで、そのメソッドのもつセレクタを、あなたがそのメソッドをクラス定義に追加する前に入手しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You never send a dealloc message directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは決してdeallocメッセージを直接に送ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You override this method to dispose of resources other than the object’s instance variables, for example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドをオーバーライドして、オブジェクトのインスタンス変数より他のリソースを片付けるようにします、例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should try to avoid managing the lifetime of limited resources such as file descriptors using dealloc.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、有限リソースの生涯の管理を避けるよう試みるべきです、例えばdeallocを使うファイル記述子など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should usually use NSObject's responds(to:) or instancesRespond(to:) methods instead of this function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、通常はNSObjectのもつresponds(to:)またはinstancesRespond(to:)メソッドをこの関数の代わりに使うべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should usually use NSObject‘s superclass() method instead of this function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、通常はNSObjectのもつsuperclass()メソッドをこの関数の代わりに使うべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You typically don't need to use this module directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは概してこのモジュールを直接に使う必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your override of this method doesn't need to also invoke any of the NSScriptCommand error signaling methods, though it can, to record very specific information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのこのメソッドのオーバーライドは、大変に具体的な情報を記録するためにいかなるNSScriptCommandエラー合図メソッドもまた、それが出来るにもかかわらず、発動する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your overriding method must provide an appropriate method signature for the given selector, either by pre formulating one or by asking another object for one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのオーバーライドメソッドは、指定されたセレクタに対して適切なメソッドシグネチャを提供しなければなりません、あらかじめ考案するものによって、または別のオブジェクトにそれを要求することによってのどちらかで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>flags</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フラグ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>options</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>returns the string employees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上記は文字列employeesを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you can use resolveInstanceMethod: to dynamically add it to a class as a method (called resolveThisMethodDynamically) like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはresolveInstanceMethod:を使うことで、このように、それをあるクラスへ（resolveThisMethodDynamicallyと呼ばれる）メソッドとして動的に加えることができます：</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
