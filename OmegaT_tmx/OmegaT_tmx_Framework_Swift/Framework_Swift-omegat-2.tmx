<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="5.3.0_0_2fd7a9ecc" segtype="sentence" srclang="en-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-US">
        <seg>(An &lt;c2&gt;enum&lt;/c2&gt; without associated values has &lt;c3&gt;Hashable&lt;/c3&gt; conformance even without the declaration.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（関連値なしでの&lt;c2&gt;enum&lt;/c2&gt;は、&lt;c3&gt;Hashable&lt;/c3&gt;準拠をたとえ宣言なしでも持ちます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(In Swift 5.1 and earlier, &lt;c2&gt;is&lt;w3&gt;Canonical&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;true&lt;/c4&gt; for these values, which is the incorrect value.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（Swift 5.1およびそれより前では、&lt;c2&gt;is&lt;w3&gt;Canonical&lt;/w3&gt;&lt;/c2&gt;はこれらの値に対して&lt;c4&gt;true&lt;/c4&gt;です、それは不正確な値です。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Irreflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Reflexivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（反射性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Symmetry)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（対称性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(These may become compile-time errors in the future.)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（それらはコンパイル時エラーに将来はなるかもしれません。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitive comparability)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移的比較性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitive incomparability)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移的比較不能性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Transitivity)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>（推移性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>*</seg>
      </tuv>
      <tuv lang="ja">
        <seg>*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Table 1&lt;/a0&gt; lists the prefix operators, &lt;a1&gt;Table 2&lt;/a1&gt; lists the postfix operators, and &lt;a2&gt;Table 3&lt;/a2&gt; lists the infix operators, including their associativity and precedence group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;a0&gt;表 1&lt;/a0&gt;は、前置演算子を一覧にします、&lt;a1&gt;表 2&lt;/a1&gt;は後置演算子を一覧にします、そして&lt;a2&gt;表 3&lt;/a2&gt;は中置演算子を一覧にします、それらの結合性と優先順位グループを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;(true, new&lt;w1&gt;Member)&lt;/w1&gt;&lt;/c0&gt; if &lt;c2&gt;new&lt;w3&gt;Member&lt;/w3&gt;&lt;/c2&gt; was not contained in &lt;c4&gt;self&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;(true, new&lt;w1&gt;Member)&lt;/w1&gt;&lt;/c0&gt;、もし&lt;c2&gt;new&lt;w3&gt;Member&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;self&lt;/c4&gt;に含まれなかったならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;(true, new&lt;w1&gt;Member)&lt;/w1&gt;&lt;/c0&gt; if &lt;c2&gt;new&lt;w3&gt;Member&lt;/w3&gt;&lt;/c2&gt; was not contained in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;(true, new&lt;w1&gt;Member)&lt;/w1&gt;&lt;/c0&gt;、もし&lt;c2&gt;new&lt;w3&gt;Member&lt;/w3&gt;&lt;/c2&gt;がこの集合の中に含まれなかったならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt; compares less than all values except for itself and NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt;は、それ自身とNaNを除くすべての値より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt; compares less than or equal to all values except NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt;は、NaNを除くすべての値より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt; can be used to map an arbitrary sequence of bytes to an integer hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt;は、随意のバイト列を整数ハッシュ値へとマップするのに使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt; is usually randomly seeded, which means it will return different values on every new execution of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt;は、ふつうは無作為にシードを決められます、それはあなたのプログラムの新規の実行ごとに異なる値が返されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt; leaves the duration and scope of the identity unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt;は、同一性の期間とスコープを特定されないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt; provides a default implementation for class types (using &lt;c1&gt;Object&lt;w2&gt;Identifier&lt;/w2&gt;&lt;/c1&gt;), which is only guaranteed to remain unique for the lifetime of an object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt;は、省略時の実装をクラス型に対して提供します（&lt;c1&gt;Object&lt;w2&gt;Identifier&lt;/w2&gt;&lt;/c1&gt;を使って）、それはあるオブジェクトの存続期間に対して特有のままであることだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_CLOSED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for simple enumerations that can never gain new cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_CLOSED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を決して新しいケース節が増えることが出来ない単純な列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt; for simple enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt;を単純な列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_OPTIONS&lt;/w1&gt;&lt;/c0&gt; for enumerations whose cases can be grouped into sets of options</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_OPTIONS&lt;/w1&gt;&lt;/c0&gt;を、それのケース節がひとそろいのオプションへとグループにできる列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for enumerations with a raw value type that you specify</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を、あなたが指定する生の値型を使う列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_EXTENSIBLE&lt;w3&gt;_ENUM&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for enumerations that you expect might gain more cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_EXTENSIBLE&lt;w3&gt;_ENUM&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を、もっとケース節が増えることをあなたが予想する列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Range&lt;/c0&gt; instances can represent an empty interval, unlike &lt;c1&gt;Closed&lt;w2&gt;Range&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Range&lt;/c0&gt;インスタンスは、空の間隔を表すことができます、&lt;c1&gt;Closed&lt;w2&gt;Range&lt;/w2&gt;&lt;/c1&gt;とは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Static&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt; provides only low-level access to its contents, unlike Swift’s more commonly used &lt;c2&gt;String&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Static&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;は、それの内容への低レベルアクセスのみを提供します、Swiftのもつより一般的に使われる&lt;c2&gt;String&lt;/c2&gt;型とは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;System&lt;w1&gt;Random&lt;w2&gt;Number&lt;w3&gt;Generator&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is automatically seeded, is safe to use in multiple threads, and uses a cryptographically secure algorithm whenever possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;System&lt;w1&gt;Random&lt;w2&gt;Number&lt;w3&gt;Generator&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、自動的にシードをえらびます、複数のスレッドにおける使用を安全にします、そして可能な時はいつでも暗号化保安アルゴリズムを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;T&lt;w1&gt;.min&lt;w2&gt;.is&lt;w3&gt;Multiple(of: -1)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c4&gt;true&lt;/c4&gt; for signed integer &lt;c5&gt;T&lt;/c5&gt;, even though the quotient &lt;c6&gt;T&lt;w7&gt;.min / -1&lt;/w7&gt;&lt;/c6&gt; isn’t representable in type &lt;c8&gt;T&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;w1&gt;.min&lt;w2&gt;.is&lt;w3&gt;Multiple(of: -1)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c4&gt;true&lt;/c4&gt;です、符号付き整数&lt;c5&gt;T&lt;/c5&gt;に対して、たとえ商&lt;c6&gt;T&lt;w7&gt;.min / -1&lt;/w7&gt;&lt;/c6&gt;が型&lt;c8&gt;T&lt;/c8&gt;で表現可能でなくてさえ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;\(foo: x)&lt;/c0&gt; translates to &lt;c1&gt;append&lt;w2&gt;Interpolation(foo: x)&lt;/w2&gt;&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;\(foo: x)&lt;/c0&gt;は&lt;c1&gt;append&lt;w2&gt;Interpolation(foo: x)&lt;/w2&gt;&lt;/c1&gt;に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;\(x)&lt;/c0&gt; translates to &lt;c1&gt;append&lt;w2&gt;Interpolation(x)&lt;/w2&gt;&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;\(x)&lt;/c0&gt;は&lt;c1&gt;append&lt;w2&gt;Interpolation(x)&lt;/w2&gt;&lt;/c1&gt;に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;\(x, foo: y)&lt;/c0&gt; translates to &lt;c1&gt;append&lt;w2&gt;Interpolation(x, foo: y)&lt;/w2&gt;&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;\(x, foo: y)&lt;/c0&gt;は&lt;c1&gt;append&lt;w2&gt;Interpolation(x, foo: y)&lt;/w2&gt;&lt;/c1&gt;に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;\(x, y)&lt;/c0&gt; translates to &lt;c1&gt;append&lt;w2&gt;Interpolation(x, y)&lt;/w2&gt;&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;\(x, y)&lt;/c0&gt;は&lt;c1&gt;append&lt;w2&gt;Interpolation(x, y)&lt;/w2&gt;&lt;/c1&gt;に翻訳されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;ancestor&lt;w1&gt;Representation&lt;/w1&gt;&lt;/c0&gt; is ignored if &lt;c2&gt;subject&lt;/c2&gt; is not a class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ancestor&lt;w1&gt;Representation&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;subject&lt;/c2&gt;がクラスインスタンスでないならば無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt; methods support virtually all features of methods: they can have any number of parameters, can specify labels for any or all of their parameters, can provide default values, can have variadic parameters, and can have parameters with generic types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;メソッドそれらは、メソッドの全ての機能を事実上サポートします：それらは、どんな数のパラメータでも持つことができます、それらのパラメータのいくらかまたは全てにラベルを指定できます、省略時の値を提供できます、可変長引数を持つことができます、そして総称体型をもつパラメータを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, a)&lt;/w1&gt;&lt;/c0&gt; is always &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, a)&lt;/w1&gt;&lt;/c0&gt;は常に&lt;c2&gt;true&lt;/c2&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt; implies &lt;c2&gt;are&lt;w3&gt;Equivalent(b, a)&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;are&lt;w3&gt;Equivalent(b, a)&lt;/w3&gt;&lt;/c2&gt;を意味する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, a)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is always &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, a)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は常に&lt;c4&gt;false&lt;/c4&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; must be a &lt;e4&gt;strict weak ordering&lt;/e4&gt; over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、それら要素に対して&lt;e4&gt;厳密弱順序&lt;/e4&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;as&lt;/c0&gt;, &lt;c1&gt;as?&lt;/c1&gt;, and &lt;c2&gt;as!&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;as&lt;/c0&gt;, &lt;c1&gt;as?&lt;/c1&gt;, および &lt;c2&gt;as!&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;byte&lt;w1&gt;Count&lt;/w1&gt;&lt;/c0&gt; must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;byte&lt;w1&gt;Count&lt;/w1&gt;&lt;/c0&gt;は、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;c&lt;w1&gt;.lazy&lt;w2&gt;.reversed().map(f)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; maps lazily and returns a &lt;c3&gt;Lazy&lt;w4&gt;Map&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;c&lt;w1&gt;.lazy&lt;w2&gt;.reversed().map(f)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は遅延にマップして&lt;c3&gt;Lazy&lt;w4&gt;Map&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;c&lt;w1&gt;.reversed().map(f)&lt;/w1&gt;&lt;/c0&gt; maps eagerly and returns a new array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;c&lt;w1&gt;.reversed().map(f)&lt;/w1&gt;&lt;/c0&gt;は、先行にマップして新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;c&lt;w1&gt;.reversed()&lt;/w1&gt;&lt;/c0&gt; does not create new storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;c&lt;w1&gt;.reversed()&lt;/w1&gt;&lt;/c0&gt;は、新しいストレージを作成しません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;count&lt;/c0&gt; must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;count&lt;/c0&gt;は負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;elements&lt;/c0&gt; must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;elements&lt;/c0&gt;は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;/c0&gt; must be a valid index of the collection that is not equal to the &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;はコレクションの有効なインデックスで、&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;プロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;/c0&gt; must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is always reachable from &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; by zero or more applications of &lt;c4&gt;index(after:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は、常に&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;から&lt;c4&gt;index(after:)&lt;/c4&gt;のゼロまたはそれ以上の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is not a valid argument to &lt;c2&gt;subscript&lt;/c2&gt;, and is always reachable from &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; by zero or more applications of &lt;c5&gt;index(after:)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;subscript&lt;/c2&gt;に対する有効な引数ではありません、そして常に&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;からゼロまたはそれ以上の&lt;c5&gt;index(after:)&lt;/c5&gt;の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;greatest&lt;w1&gt;Finite&lt;w2&gt;Magnitude&lt;w3&gt;.ulp&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is a finite number, even though the next greater representable value is &lt;c4&gt;infinity&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;greatest&lt;w1&gt;Finite&lt;w2&gt;Magnitude&lt;w3&gt;.ulp&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は有限数です、たとえ次のより大きい表現可能な値が&lt;c4&gt;infinity&lt;/c4&gt;であるとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;hash&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is deprecated as a &lt;c2&gt;Hashable&lt;/c2&gt; requirement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;hash&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;Hashable&lt;/c2&gt;要件として非推奨にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be a valid index of the string that is not equal to the string’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は、この文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be greater than &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;より大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be in the range &lt;c1&gt;0..&lt;count&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は、範囲&lt;c1&gt;0..&lt;count&lt;/c1&gt;の中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be less than &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;より少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;i&lt;/c0&gt; must be less than the string’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;は文字列の末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;はコレクションに対する有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;はコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;index&lt;/c0&gt; must be in the range &lt;c1&gt;0..&lt;scalar&lt;w2&gt;Count&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;index&lt;/c0&gt;は、範囲&lt;c1&gt;0..&lt;scalar&lt;w2&gt;Count&lt;/w2&gt;&lt;/c1&gt;の中になければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt; is passed to &lt;c2&gt;next&lt;w3&gt;Partial&lt;w4&gt;Result&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; the first time the closure is executed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;next&lt;w3&gt;Partial&lt;w4&gt;Result&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に、クロージャが実行される最初の時に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;input&lt;/c0&gt; must be the same iterator instance in repeated calls to this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;input&lt;/c0&gt;は、このメソッドに対して繰り返される呼び出しにおいて同じイテレータでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;k&lt;/c0&gt; must be greater than or equal to zero and must not exceed the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません、そしてコレクションの中の要素の数を越えてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;k&lt;/c0&gt; must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません、そしてコレクションの要素数より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;k&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;length&lt;/c0&gt; is the number of underlying code units consumed by this error, guaranteed to be greater than 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;length&lt;/c0&gt;は、このエラーによって消費される、基礎をなすコード単位の数です、０より大きいことを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;n&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n&lt;/c0&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;offset&lt;/c0&gt; must be nonnegative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;offset&lt;/c0&gt;は、非負でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;other&lt;/c0&gt; must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the collection that is not equal to the &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;はコレクションの有効なインデックスで、&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;プロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;は、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the range, and must not equal the range’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;は、この範囲の有効なインデックスでなければなりません、そしてこの範囲の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be a valid index of the set, and must not be equal to the set’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;は、この集合の有効なインデックスでなければなりません、そしてこの集合の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;position&lt;/c0&gt; must be less than the view’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;はこのビューの末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Strict&lt;w2&gt;Subset&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Strict&lt;w2&gt;Subset&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Strict&lt;w2&gt;Superset&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Strict&lt;w2&gt;Superset&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Subset&lt;/w1&gt;&lt;/c0&gt; must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Subset&lt;/w1&gt;&lt;/c0&gt;は、有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Superset&lt;/w1&gt;&lt;/c0&gt; must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;possible&lt;w1&gt;Superset&lt;/w1&gt;&lt;/c0&gt;は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;radix&lt;/c0&gt; must be at least 2 and at most 36.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;radix&lt;/c0&gt;基数は少なくとも２そして多くて36でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;range&lt;/c0&gt; must be finite and non-empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;range&lt;/c0&gt;は有限でそして空でない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;range&lt;/c0&gt; must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;range&lt;/c0&gt;は空であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined().map(f)&lt;/w1&gt;&lt;/c0&gt; maps eagerly and returns a new array</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined().map(f)&lt;/w1&gt;&lt;/c0&gt;は先行にマップを行い、新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined()&lt;/w1&gt;&lt;/c0&gt; does not create new storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.joined()&lt;/w1&gt;&lt;/c0&gt;は新しいストレージを作りません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.lazy&lt;w2&gt;.filter { ... }&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, for an arbitrary sequence &lt;c3&gt;s&lt;/c3&gt;, is a &lt;c4&gt;Lazy&lt;w5&gt;Filter&lt;w6&gt;Sequence&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.lazy&lt;w2&gt;.filter { ... }&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、随意のシーケンス&lt;c3&gt;s&lt;/c3&gt;のための、ひとつの&lt;c4&gt;Lazy&lt;w5&gt;Filter&lt;w6&gt;Sequence&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;s&lt;w1&gt;.lazy&lt;w2&gt;.joined().map(f)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; maps lazily and returns a &lt;c3&gt;Lazy&lt;w4&gt;Map&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;s&lt;w1&gt;.lazy&lt;w2&gt;.joined().map(f)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は遅延にマップして、&lt;c3&gt;Lazy&lt;w4&gt;Map&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;scalars&lt;/c0&gt; must have the same number of elements as the vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;scalars&lt;/c0&gt;は、ベクター型と同じ数の要素を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;source&lt;/c0&gt; must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;は、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;source&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt; must be less than or equal to this buffer’s &lt;c2&gt;count&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt;は、このバッファのもつ&lt;c2&gt;count&lt;/c2&gt;より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;start&lt;/c0&gt; must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;はコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;transform&lt;/c0&gt; accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;transform&lt;/c0&gt;はこのシーケンスのひとつの要素をそれのパラメータとして受け取り、同じもしくは異なる型の変換された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;byte&lt;/c1&gt; is a continuation byte; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;byte&lt;/c1&gt;が継続バイトならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;element&lt;/c1&gt; is contained in the range expression; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;element&lt;/c1&gt;がこの範囲式に含まれるならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;element&lt;/c1&gt; is contained in the range; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;element&lt;/c1&gt;がこの範囲に含まれるならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;i&lt;/c1&gt; has been offset by exactly &lt;c2&gt;distance&lt;/c2&gt; steps without going beyond &lt;c3&gt;limit&lt;/c3&gt;; otherwise, &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;i&lt;/c1&gt;が正確に&lt;c2&gt;distance&lt;/c2&gt;幅だけ&lt;c3&gt;limit&lt;/c3&gt;を越えていくことなく補われたならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;lhs&lt;/c1&gt; is greater than or equal to &lt;c2&gt;rhs&lt;/c2&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を、&lt;c1&gt;lhs&lt;/c1&gt;が&lt;c2&gt;rhs&lt;/c2&gt;より大きいか等しいならば返します；そうでなければ、&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;member&lt;/c1&gt; exists in the set; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;member&lt;/c1&gt;がこの集合に含まれるならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;other&lt;/c1&gt; has the same value as this instance; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;がこのインスタンスと同じ値を持つならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;other&lt;/c1&gt; is greater than this value; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし&lt;c1&gt;other&lt;/c1&gt;がこの値より大きいならば；そうでなければ&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;x&lt;/c1&gt; is a high-surrogate code unit; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;x&lt;/c1&gt;が高位サロゲートコード単位ならば&lt;c0&gt;true&lt;/c0&gt;；そうでなけれぱ&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;x&lt;/c1&gt; is a low-surrogate code unit; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;x&lt;/c1&gt;が低位サロゲートコード単位ならば&lt;c0&gt;true&lt;/c0&gt;；そうでなけれぱ&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the &lt;c1&gt;lhs&lt;/c1&gt; and &lt;c2&gt;rhs&lt;/c2&gt; have the same elements; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;lhs&lt;/c1&gt;と&lt;c2&gt;rhs&lt;/c2&gt;が同じ要素を持つならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the element was found in the sequence; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素がシーケンスにおいて見つけられなかったならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the initial elements of the sequence are equivalent to the elements of &lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスの冒頭の要素が&lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;の要素と等しいならば；そうでなければ&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the initial elements of the sequence are the same as the elements of &lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスの冒頭の要素が&lt;c1&gt;possible&lt;w2&gt;Prefix&lt;/w2&gt;&lt;/c1&gt;の要素と同じならば；そうでなければ&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the option set contains &lt;c1&gt;member&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセットが&lt;c1&gt;member&lt;/c1&gt;を含むならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the sequence contains an element that satisfies &lt;c1&gt;predicate&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスが&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素を含むならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the sequence contains only elements that satisfy &lt;c1&gt;predicate&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしシーケンスが&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素のみを含むならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set has no elements in common with &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が&lt;c1&gt;other&lt;/c1&gt;と共通の要素を持たないならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a strict subset of &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が&lt;c1&gt;other&lt;/c1&gt;の狭義の部分集合ならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a strict superset of &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が&lt;c1&gt;other&lt;/c1&gt;の狭義の上位集合であるならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a strict superset of &lt;c1&gt;possible&lt;w2&gt;Strict&lt;w3&gt;Subset&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしこの集合が&lt;c1&gt;possible&lt;w2&gt;Strict&lt;w3&gt;Subset&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の狭義の上位集合であるならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a subset of &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が&lt;c1&gt;other&lt;/c1&gt;の部分集合ならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a subset of &lt;c1&gt;possible&lt;w2&gt;Superset&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしこの集合が&lt;c1&gt;possible&lt;w2&gt;Superset&lt;/w2&gt;&lt;/c1&gt;の部分集合ならば；そうでなければ、&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a superset of &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が&lt;c1&gt;other&lt;/c1&gt;の上位集合であるならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the set is a superset of &lt;c1&gt;possible&lt;w2&gt;Subset&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c3&gt;false&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、この集合が&lt;c1&gt;possible&lt;w2&gt;Subset&lt;/w2&gt;&lt;/c1&gt;の上位集合であるならば；そうでなければ、&lt;c3&gt;false&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the string begins with &lt;c1&gt;prefix&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、文字列が&lt;c1&gt;prefix&lt;/c1&gt;で始まるならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if the string ends with &lt;c1&gt;suffix&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もし文字列が&lt;c1&gt;suffix&lt;/c1&gt;で終わるならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this range and &lt;c1&gt;other&lt;/c1&gt; have at least one element in common; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲と&lt;c1&gt;other&lt;/c1&gt;が少なくとも１つの共通の要素を持つならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence and &lt;c1&gt;other&lt;/c1&gt; contain equivalent items, using &lt;c2&gt;are&lt;w3&gt;Equivalent&lt;/w3&gt;&lt;/c2&gt; as the equivalence test; otherwise, &lt;c4&gt;false.&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、このシーケンスと&lt;c1&gt;other&lt;/c1&gt;が&lt;c2&gt;are&lt;w3&gt;Equivalent&lt;/w3&gt;&lt;/c2&gt;を同等性テストとして使って同じ要素らを含むならば；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence and &lt;c1&gt;other&lt;/c1&gt; contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスと&lt;c1&gt;other&lt;/c1&gt;が同じ要素を同じ順序で含んでいるならば、&lt;c0&gt;true&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence precedes &lt;c1&gt;other&lt;/c1&gt; in a dictionary ordering as ordered by &lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;; otherwise, &lt;c6&gt;false&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしこのシーケンスが&lt;c1&gt;other&lt;/c1&gt;に、&lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;によって並べられる通りの字典順序において先行するならば；そうでなければ、&lt;c6&gt;false&lt;/c6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this sequence precedes &lt;c1&gt;other&lt;/c1&gt; in a dictionary ordering; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスが&lt;c1&gt;other&lt;/c1&gt;に、ある字典順序において先行するならば、&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this value is less than &lt;c1&gt;other&lt;/c1&gt;; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、もしこの値が&lt;c1&gt;other&lt;/c1&gt;より少ないならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; if this value is ordered below or the same as &lt;c1&gt;other&lt;/c1&gt; in a total ordering of the floating-point type; otherwise, &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;、この値が浮動小数点型の全順序において&lt;c1&gt;other&lt;/c1&gt;と同じまたは下に順序付けられるならば；そうでなければ、&lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;true&lt;/c0&gt; is the set is strict subset of &lt;c1&gt;possible&lt;w2&gt;Strict&lt;w3&gt;Superset&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;; otherwise, &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;ならばこの集合は&lt;c1&gt;possible&lt;w2&gt;Strict&lt;w3&gt;Superset&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の狭義の部分集合です；そうでなければ、&lt;c4&gt;false&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; corresponds to the value represented by the C macros &lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;, &lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;, etc, and is sometimes called &lt;e7&gt;epsilon&lt;/e7&gt; or &lt;e8&gt;machine epsilon&lt;/e8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、Cマクロ&lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;、&lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;、などによって表される値に対応します、そして時々は&lt;e7&gt;イプシロン&lt;/e7&gt;または&lt;e8&gt;計算機イプシロン&lt;/e8&gt;と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;v&lt;/c0&gt; must be a valid Unicode scalar value, in the ranges &lt;c1&gt;0...0x&lt;w2&gt;D7FF&lt;/w2&gt;&lt;/c1&gt; or &lt;c3&gt;0x&lt;w4&gt;E000...0x10FFFF&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;v&lt;/c0&gt;は、有効なユニコードスカラー値、&lt;c1&gt;0...0x&lt;w2&gt;D7FF&lt;/w2&gt;&lt;/c1&gt;および&lt;c3&gt;0x&lt;w4&gt;E000...0x10FFFF&lt;/w4&gt;&lt;/c3&gt;の範囲でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;value&lt;/c0&gt; must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;は、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;/c0&gt; must be represented by a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;は、UTF-16でエンコードされる時あるサロゲートペアで表現されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.contains(e) &amp;&amp; y&lt;w2&gt;.contains(e)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; if and only if &lt;c3&gt;x&lt;w4&gt;.intersection(y).contains(e)&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.contains(e) &amp;&amp; y&lt;w2&gt;.contains(e)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; は次の場合に限ります &lt;c3&gt;x&lt;w4&gt;.intersection(y).contains(e)&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.contains(e)&lt;/w1&gt;&lt;/c0&gt; implies &lt;c2&gt;x&lt;w3&gt;.union(y).contains(e)&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.contains(e)&lt;/w1&gt;&lt;/c0&gt; は暗黙的に &lt;c2&gt;x&lt;w3&gt;.union(y).contains(e)&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Multiple(of: 0)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;true&lt;/c3&gt; if &lt;c4&gt;x&lt;/c4&gt; is zero and &lt;c5&gt;false&lt;/c5&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Multiple(of: 0)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;true&lt;/c3&gt;です、もし&lt;c4&gt;x&lt;/c4&gt;がゼロであるならば、そしてそうでなければ&lt;c5&gt;false&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Strict&lt;w3&gt;Subset(of: y)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; if and only if &lt;c4&gt;x&lt;w5&gt;.is&lt;w6&gt;Subset(of: y) &amp;&amp; x != y&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Strict&lt;w3&gt;Subset(of: y)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; は次の場合に限ります &lt;c4&gt;x&lt;w5&gt;.is&lt;w6&gt;Subset(of: y) &amp;&amp; x != y&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Strict&lt;w3&gt;Superset(of: y)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; if and only if &lt;c4&gt;x&lt;w5&gt;.is&lt;w6&gt;Superset(of: y) &amp;&amp; x != y&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Strict&lt;w3&gt;Superset(of: y)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; は次の場合に限ります &lt;c4&gt;x&lt;w5&gt;.is&lt;w6&gt;Superset(of: y) &amp;&amp; x != y&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Subset(of: y)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; if and only if &lt;c3&gt;y&lt;w4&gt;.is&lt;w5&gt;Superset(of: x)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Subset(of: y)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; は次の場合に限ります &lt;c3&gt;y&lt;w4&gt;.is&lt;w5&gt;Superset(of: x)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Subset(of: y)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; implies &lt;c3&gt;x&lt;w4&gt;.union(y) == y&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Subset(of: y)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; は暗黙的に &lt;c3&gt;x&lt;w4&gt;.union(y) == y&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Superset(of: y)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; implies &lt;c3&gt;x&lt;w4&gt;.union(y) == x&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.is&lt;w2&gt;Superset(of: y)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; は暗黙的に &lt;c3&gt;x&lt;w4&gt;.union(y) == x&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;x&lt;w1&gt;.union(y).contains(e)&lt;/w1&gt;&lt;/c0&gt; implies &lt;c2&gt;x&lt;w3&gt;.contains(e) || y&lt;w4&gt;.contains(e)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;w1&gt;.union(y).contains(e)&lt;/w1&gt;&lt;/c0&gt; は暗黙的に &lt;c2&gt;x&lt;w3&gt;.contains(e) || y&lt;w4&gt;.contains(e)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;Double&lt;/c1&gt; is a binary floating-point type that has a radix of &lt;c2&gt;2&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Double&lt;/c1&gt;はバイナリ浮動小数点型で&lt;c2&gt;2&lt;/c2&gt;の基数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;Optional&lt;w2&gt;.none&lt;/w2&gt;&lt;/c1&gt; is equivalent to the &lt;c3&gt;nil&lt;/c3&gt; literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Optional&lt;w2&gt;.none&lt;/w2&gt;&lt;/c1&gt;は、&lt;c3&gt;nil&lt;/c3&gt;リテラルに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;count&lt;/c1&gt; must be zero or greater.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;count&lt;/c1&gt;は、ゼロまたはより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;count&lt;/c1&gt; must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;count&lt;/c1&gt;は負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;distance&lt;/c1&gt; must not be negative unless the collection conforms to the &lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;distance&lt;/c1&gt;は、そのコレクションが&lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;n&lt;/c1&gt; must not be negative unless the collection conforms to the &lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;n&lt;/c1&gt;は、そのコレクションが&lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;radix&lt;/c1&gt; must be in the range &lt;c2&gt;2...36&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;radix&lt;/c1&gt;は、範囲&lt;c2&gt;2...36&lt;/c2&gt;の中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;rhs&lt;/c1&gt; must not be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;rhs&lt;/c1&gt;は、ゼロではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;source&lt;w2&gt;.count&lt;/w2&gt;&lt;/c1&gt; must be less than or equal to this buffer’s &lt;c3&gt;count&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;source&lt;w2&gt;.count&lt;/w2&gt;&lt;/c1&gt;は、このバッファのもつ&lt;c3&gt;count&lt;/c3&gt;より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;source&lt;w2&gt;Position&lt;/w2&gt;&lt;/c1&gt; must be a valid index of at least one of the views of &lt;c3&gt;target&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;source&lt;w2&gt;Position&lt;/w2&gt;&lt;/c1&gt;は、&lt;c3&gt;target&lt;/c3&gt;の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c1&gt;utf16Index&lt;/c1&gt; must be an element of &lt;c2&gt;String(unicode&lt;w3&gt;Scalars).utf16&lt;w4&gt;.indices&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;utf16Index&lt;/c1&gt;は、&lt;c2&gt;String(unicode&lt;w3&gt;Scalars).utf16&lt;w4&gt;.indices&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;の要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;Default&lt;w3&gt;Precedence&lt;/w3&gt;&lt;/c2&gt; has no associativity and a precedence immediately higher than &lt;c4&gt;Ternary&lt;w5&gt;Precedence&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Default&lt;w3&gt;Precedence&lt;/w3&gt;&lt;/c2&gt;は、&lt;c4&gt;Ternary&lt;w5&gt;Precedence&lt;/w5&gt;&lt;/c4&gt;のすぐ上の結合性と優先順位を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;Shipping&lt;w3&gt;Options&lt;/w3&gt;&lt;/c2&gt; includes a &lt;c4&gt;raw&lt;w5&gt;Value&lt;/w5&gt;&lt;/c4&gt; property of type &lt;c6&gt;Int&lt;/c6&gt; that stores the bit mask of available shipping options.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Shipping&lt;w3&gt;Options&lt;/w3&gt;&lt;/c2&gt;は、型&lt;c6&gt;Int&lt;/c6&gt;の&lt;c4&gt;raw&lt;w5&gt;Value&lt;/w5&gt;&lt;/c4&gt;プロパティを含みます、それは可能な出荷オプションのビットマスクを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;T&lt;/c2&gt; may have a lower minimal alignment that trades runtime performance for space efficiency.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;T&lt;/c2&gt;は、空間能率に対する実行時性能と引き換えに、より低い極小のアラインメントを持ってもかまいません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;count&lt;/c2&gt; must not be negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;count&lt;/c2&gt;は負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;element&lt;/c2&gt; is contained in the range if it is greater than or equal to the lower bound and less than the upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;element&lt;/c2&gt;が範囲の中のに含まれるのは、それが下方境界より大きいか等しく上方境界より少ない場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c2&gt;max&lt;w3&gt;Splits&lt;/w3&gt;&lt;/c2&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;max&lt;w3&gt;Splits&lt;/w3&gt;&lt;/c2&gt;は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/c3&gt; provides no automated memory management or alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/c3&gt;は、自動メモリ管理またはアラインメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c3&gt;for&lt;/c3&gt;-&lt;c4&gt;in&lt;/c4&gt; loops are safe in this regard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;for&lt;/c3&gt;-&lt;c4&gt;in&lt;/c4&gt;ループはこの点に関して安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c4&gt;Optional&lt;w5&gt;.some(Wrapped)&lt;/w5&gt;&lt;/c4&gt; stores a wrapped value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Optional&lt;w5&gt;.some(Wrapped)&lt;/w5&gt;&lt;/c4&gt;は、あるラップされた値を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; provides no automated memory management or alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は、自動メモリ管理またはアラインメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c6&gt;Range&lt;w7&gt;Replaceable&lt;w8&gt;Collection&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; provides default implementations of all its other methods using this initializer and method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;Range&lt;w7&gt;Replaceable&lt;w8&gt;Collection&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;は、それの他のメソッドすべての省略時の実装をこのイニシャライザとメソッドを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c9&gt;x&lt;w10&gt;.is&lt;w11&gt;Zero&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt; is equivalent to the following comparison: &lt;c12&gt;x == 0&lt;w13&gt;.0&lt;/w13&gt;&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;x&lt;w10&gt;.is&lt;w11&gt;Zero&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;は次の比較に相当するものです：&lt;c12&gt;x == 0&lt;w13&gt;.0&lt;/w13&gt;&lt;/c12&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;Initialized&lt;/e0&gt; memory has a value that can be read using a pointer’s &lt;c1&gt;pointee&lt;/c1&gt; property or through subscript notation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;初期化済&lt;/e0&gt;メモリは、&lt;c1&gt;pointee&lt;/c1&gt;プロパティまたは添え字表記法を使って読み出し可能な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;String interpolations&lt;/e0&gt; are string literals that evaluate any included expressions and convert the results to string form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;文字列補間&lt;/e0&gt;は文字列リテラルです、それは、何らかの含まれた式を評価して、その結果を文字列形式へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;Required.&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s0&gt;必須。&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 16-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 16-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit floating point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 32-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit floating point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit integer value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット整数値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A 64-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Collection&lt;/c0&gt; that provides its own implementation of this method must also guarantee that an equivalent buffer of its &lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt; can be generated by advancing the pointer by the distance to the slice’s &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドのそれ独自の実装を提供する&lt;c0&gt;Collection&lt;/c0&gt;はまた、それの&lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;の同等のバッファが、スライスのもつ&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;への隔たりだけポインタを前進することによって生成されることを保証しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Collection&lt;/c0&gt; whose elements consist of those in a &lt;c1&gt;Base&lt;/c1&gt; &lt;c2&gt;Collection&lt;/c2&gt; passed through a transform function returning &lt;c3&gt;Element&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Collection&lt;/c0&gt;、その要素は&lt;c1&gt;Base&lt;/c1&gt; &lt;c2&gt;Collection&lt;/c2&gt;の中のものから成り、&lt;c3&gt;Element&lt;/c3&gt;を返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Result&lt;/c0&gt; instance with the result of evaluating &lt;c1&gt;transform&lt;/c1&gt; as the new failure value if this instance represents a failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Result&lt;/c0&gt;インスタンス、&lt;c1&gt;transform&lt;/c1&gt;を評価する結果をもつ、もしこのインスタンスが失敗を表すならば新しい失敗値として。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Result&lt;/c0&gt; instance with the result of evaluating &lt;c1&gt;transform&lt;/c1&gt; as the new success value if this instance represents a success.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Result&lt;/c0&gt;インスタンス、&lt;c1&gt;transform&lt;/c1&gt;を評価する結果をもつ、もしこのインスタンスが成功を表すならば新しい成功値として。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Result&lt;/c0&gt; instance, either from the closure or the previous &lt;c1&gt;.success&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Result&lt;/c0&gt;インスタンス、クロージャまたは前の&lt;c1&gt;.success&lt;/c1&gt;のどちらかから。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Sequence&lt;/c0&gt; that can contain the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含む&lt;c0&gt;Sequence&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Sequence&lt;/c0&gt; whose elements consist of those in a &lt;c1&gt;Base&lt;/c1&gt; &lt;c2&gt;Sequence&lt;/c2&gt; passed through a transform function returning &lt;c3&gt;Element&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Sequence&lt;/c0&gt;、その要素は&lt;c1&gt;Base&lt;/c1&gt; &lt;c2&gt;Sequencellection&lt;/c2&gt;の中のものから成り、&lt;c3&gt;Element&lt;/c3&gt;を返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;String&lt;/c0&gt; value, if &lt;c1&gt;Type&lt;/c1&gt; is &lt;c2&gt;Int8&lt;/c2&gt; or &lt;c3&gt;UInt8&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;値、もし&lt;c1&gt;Type&lt;/c1&gt;が&lt;c2&gt;Int8&lt;/c2&gt;または&lt;c3&gt;UInt8&lt;/c3&gt;ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;T&lt;/c0&gt; was parsed successfully</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;がうまく構文解析された</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;Unicode&lt;w1&gt;Decoding&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance, representing the next Unicode scalar, an indication of an error, or an indication that the UTF sequence has been fully decoded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次のユニコードスカラー、エラーの症状、またはUTFシーケンスが完全にデコードされた徴を表している、ある&lt;c0&gt;Unicode&lt;w1&gt;Decoding&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;[Type]&lt;/c0&gt; value, which is passed as a pointer to the start of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;[Type]&lt;/c0&gt;値、それは配列の始まりへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c1&gt;Reversed&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; instance wraps an underlying collection and provides access to its elements in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Reversed&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;インスタンスは、基礎をなすコレクションをラップして、それの要素へのアクセスを逆順で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c4&gt;Range&lt;/c4&gt; instance does not contain its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Range&lt;/c4&gt;インスタンスはそれの上方の境界を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;binade&lt;/e0&gt; is a set of binary floating-point values that all have the same sign and exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;binade&lt;/e0&gt;は、バイナリ浮動小数点値の一揃いです、それは全てが同じ符号と指数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;decimal value&lt;/e0&gt; contains the significand, a sequence of decimal digits that may include a decimal point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;10進の値&lt;/e0&gt;は仮数、小数点を含んでも良い一連の10進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;hexadecimal value&lt;/e0&gt; contains the significand, either &lt;c1&gt;0X&lt;/c1&gt; or &lt;c2&gt;0x&lt;/c2&gt;, followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;16進数値&lt;/e0&gt;は、仮数、&lt;c1&gt;0X&lt;/c1&gt;または&lt;c2&gt;0x&lt;/c2&gt;のどちらかに続く16進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;normal&lt;/e0&gt; value is a finite number that uses the full precision available to values of a type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;ノーマル&lt;/e0&gt;値は、有限数で、ある型の値に利用可能な完全な精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;string literal&lt;/e0&gt; is a series of characters enclosed in quotes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;文字列リテラル&lt;/e0&gt;は、引用符に囲まれた一連の文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;subnormal&lt;/e0&gt; value is a nonzero number that has a lesser magnitude than the smallest normal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;サブノーマル&lt;/e0&gt;値は、非ゼロ数で、最も小さいノーマル数よりも少ない規模を持つものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;trivial type&lt;/e0&gt; can be copied bit for bit with no indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;自明な型&lt;/e0&gt;は、ビット対ビットでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether a string has no characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列が文字をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the Unicode scalar is an ASCII character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このユニコードスカラーがあるASCII文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the collection is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがNaN（非数）であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is a signaling NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがsignaling NaNであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがゼロと等しいかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is infinite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが無限大であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance is subnormal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがサブノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the instance’s representation is in its canonical form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスの表現がそれの正準形式であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the range contains no elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲が何の要素も含まないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar has a “soft dot” that disappears when a diacritic is placed over the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>区別的発音符がスカラーにかぶせて置かれる時に姿を消す “ソフトドット” を、このスカラーが持つかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar has an emoji presentation, whether or not it is the default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがemoji提示物を持つかどうか、それが初期設定であるかそうでないか、を指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a default-ignorable code point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがある省略時無視可能なコード点かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a diacritic.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが区別的発音符であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a format control character that has a specific function in controlling cursive joining and ligation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーが特定の機能を筆記体の結合と合字の制御において持つ書式制御文字かどうかを指し示しているあるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a format control character that has a specific function in the Unicode Bidrectional Algorithm.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがある特定の機能を「ユニコード双方向アルゴリズム」において持つ書式制御文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a grapheme base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このユニコードスカラーがある書記素基底であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a grapheme extender.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが書記素拡張かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a punctuation mark that generally marks the end of a sentence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが一般的に文の終わりを印する句読点符号であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a punctuation symbol explicitly called out as a dash in the Unicode Standard or a compatibility equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがユニコード標準またはある互換相当物においてダッシュとして明示的に召集される句読点シンボルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a punctuation symbol that typically marks the end of a textual unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが概してテキスト単位の終わりを印する句読点シンボルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a radical component of CJK characters, Tangut characters, or Yi syllables.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがCJK文字、西夏（タングート）文字、またはイ文字音節の根本的な構成要素かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a variation selector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが異体字セレクタであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is a whitespace character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが空白文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is alphabetic.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがアルファベットであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is an ASCII character commonly used for the representation of hexadecimal numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが16進数の表現に一般に使われるASCII文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is an ideographic description character that determines how the three ideographic characters or ideographic description sequences that follow it are to be combined to form a single character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが３つの表意文字またはそれに続く表意文字記述シーケンスが結び付けられて単一の文字を形成する方法を決定する表意文字記述文字かどうかを指し示すブール値。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is an ideographic description character that determines how the two ideographic characters or ideographic description sequences that follow it are to be combined to form a single character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが２つの表意文字またはそれに続く表意文字記述シーケンスが結び付けられて単一の文字を形成する方法を決定する表意文字記述文字かどうかを指し示すブール値。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is considered to be a CJKV (Chinese, Japanese, Korean, and Vietnamese) or other siniform (Chinese writing-related) ideograph.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーが、CJKV（中国語、日本語、朝鮮語、そしてベトナム語）または他のスィーニー体（中国語筆記関連）表意文字であると考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is considered to be either lowercase, uppercase, or titlecase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがローワーケース、アッパーケース、またはタイトルケースのどれかであると考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is deprecated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが非推奨であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is excluded from composition when performing Unicode normalization.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがユニコード正規化を実行する時に構成から除外されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is ignored for casing purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがケーシング意図に対して無視されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is mirrored in bidirectional text.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが双方向テキストにおいて正確に映し出されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one of the unified CJK ideographs in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがユニコード標準における統一CJK表意文字の１つであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that can modify a base emoji that precedes it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがそれに先行するある基底emojiを修正できるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that is commonly used for the representation of hexadecimal numbers or a compatibility equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが16進数の表現またはある互換相当物に一般に使われるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that is not identical to its NFKC case-fold mapping.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーが、それのNFKCケースフォルド・マッピングと同一ではないものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that is used in writing to surround quoted text.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが引用テキストを囲むために筆記において使われるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that naturally appears in mathematical contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが数学的文脈において自然に現れるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one that should be rendered with an emoji presentation, rather than a text presentation, by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが初期状態で、テキスト提示物ではなく、emoji提示物で描出されるべきものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a non-starting position in a programming language identifier, with adjustments made for NFKC normalized form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりでない位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値、NFKC正規化形式に対する調整がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a non-starting position in a programming language identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりでない位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a starting position in a programming language identifier, with adjustments made for NFKC normalized form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりの位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値、NFKC正規化形式に対する調整がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one which is recommended to be allowed to appear in a starting position in a programming language identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがプログラム言語識別子において始まりの位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is one whose appearance can be changed by an emoji modifier that follows it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがそれに続くあるemoji修飾子によってそれの外観が変更可能なものであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is permanently reserved for internal use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーが内部的な利用に対して永続的に予約されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is recommended to be treated as whitespace when parsing patterns represented in source code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがソースコードにおいて表されるパターンを構文解析する時に空白として扱われることを推奨されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar is recommended to have syntactic usage in patterns represented in source code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがソースコードにおいて表されるパターンで統語論的な利用法を持つことを推奨されるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar may change when it undergoes case mapping.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがケースマッピングを受ける時に変化するかもしれないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar requires special handling for operations involving ordering, such as sorting and searching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーがソートおよび検索のような順序付けを発動する演算に対して特別な取り扱いを要求するかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s letterform is considered lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ字形がローワーケースと考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s letterform is considered uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ字形がアップケースと考えられるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the &lt;c0&gt;lowercase&lt;w1&gt;Mapping&lt;/w1&gt;&lt;/c0&gt; of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーの&lt;c0&gt;lowercase&lt;w1&gt;Mapping&lt;/w1&gt;&lt;/c0&gt;と異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the &lt;c0&gt;titlecase&lt;w1&gt;Mapping&lt;/w1&gt;&lt;/c0&gt; of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーの&lt;c0&gt;titlecase&lt;w1&gt;Mapping&lt;/w1&gt;&lt;/c0&gt;と異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the &lt;c0&gt;uppercase&lt;w1&gt;Mapping&lt;/w1&gt;&lt;/c0&gt; of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーの&lt;c0&gt;uppercase&lt;w1&gt;Mapping&lt;/w1&gt;&lt;/c0&gt;と異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s normalized form differs from the case-fold mapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ正規化形式が各構成スカラーのケースフォルド・マッビングと異なるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether the scalar’s principal function is to extend the value or shape of a preceding alphabetic scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのもつ主要機能が先行するアルファベットのスカラーの値や形状を拡張することであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether there are no more elements left to be decoded in the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンテナの中にデコードされるための要素がこれ以上残ってないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this instance is finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが有限であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this instance is normal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value indicating whether this type is a signed integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が符号付き整数型であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the set has no elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合が要素をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the set is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合が空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the static string represents only ASCII code units (or an ASCII scalar value).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値、それはその静的文字列がASCIIコード単位（またはASCIIスカラー値）だけを表すかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Boolean value that indicates whether the static string stores a pointer to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値、それはその静的文字列があるnull終端された一連のUTF-8コード単位へのあるポインタを格納するかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A C0 or C1 control code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C0 または C1 制御コード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Combine publisher that publishes each member of the sequence as a separate element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるCombineパブリッシャー、それはシーケンスの各要素を別個の要素として発行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN compares not equal, not greater than, and not less than every value, including itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、それ自身を含めてあらゆる値に対して等しくない、大きくない、少なくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN passed as &lt;c1&gt;other&lt;/c1&gt; results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;として渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN passed as &lt;c1&gt;value&lt;/c1&gt; results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;value&lt;/c1&gt;として渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A NaN value may also include a payload in parentheses following the &lt;c0&gt;"nan"&lt;/c0&gt; keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるNaN値はまた、&lt;c0&gt;"nan"&lt;/c0&gt;キーワードに続けて丸括弧の中にペイロードを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A SIMD vector of a fixed number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定された数の要素のSIMDベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-16 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのUTF-16コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-16 encoding of &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;のUTF-16符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのUTF-8コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A UTF-8 encoding of &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;のUTF-8符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode encoding form that translates between Unicode scalar values and form-specific code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコード符号化形式、それはユニコードスカラー値と形式特有のコード単位の間で翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Unicode string value that is a collection of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコード文字列値、それは、いくらかの文字からなる１つのコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A binary floating-point type’s &lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; imposes a limit on the range of the exponent for normal, finite values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ浮動小数点型のもつ&lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、正規化数の、有限の値に対する指数の範囲に限界を課します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise AND operation results in a value that has each bit set to &lt;c0&gt;1&lt;/c0&gt; where &lt;e1&gt;both&lt;/e1&gt; of its arguments have that bit set to &lt;c2&gt;1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算は、ある値という結果になります、それが各ビットを&lt;c0&gt;1&lt;/c0&gt;に設定するのは、&lt;e1&gt;両方&lt;/e1&gt;のそれの引数が、そのビットを&lt;c2&gt;1&lt;/c2&gt;に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise OR operation results in a value that has each bit set to &lt;c0&gt;1&lt;/c0&gt; where &lt;e1&gt;one or both&lt;/e1&gt; of its arguments have that bit set to &lt;c2&gt;1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算は、ある値という結果になります、それが各ビットを&lt;c0&gt;1&lt;/c0&gt;に設定するのは、&lt;e1&gt;一方または両方&lt;/e1&gt;のそれの引数が、そのビットを&lt;c2&gt;1&lt;/c2&gt;に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to &lt;c0&gt;1&lt;/c0&gt; where &lt;e1&gt;one or the other but not both&lt;/e1&gt; of its arguments had that bit set to &lt;c2&gt;1&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算、または排他的OR演算として知られるものは、１つの値という結果になり、それは各ビットが&lt;c0&gt;1&lt;/c0&gt;に設定されます、そこにおいて&lt;e1&gt;一方または他方しかし両方でなく&lt;/e1&gt;それの引数がそのビットを&lt;c2&gt;1&lt;/c2&gt;に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A buffer of raw bytes from which to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のバイトのバッファで、それからコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A buffer pointer to a newly allocated region of memory aligned to &lt;c0&gt;alignment&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;alignment&lt;/c0&gt;にアラインされた新規割り当てのメモリ領域へのバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class of types whose instances hold the value of an entity with stable identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらのインスタンスはある登録項目の値を安定した同一性で保持するところの型それらのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class that conforms to the &lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt; protocol can control how its mirror represents ancestor classes by initializing the mirror with an &lt;c2&gt;Ancestor&lt;w3&gt;Representation&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠するクラスは、どのようにそれのミラーが先祖クラスを表すかを、ミラーを&lt;c2&gt;Ancestor&lt;w3&gt;Representation&lt;/w3&gt;&lt;/c2&gt;で初期化することで制御できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A class whose instances contain a property of type &lt;c0&gt;Header&lt;/c0&gt; and raw storage for an array of &lt;c1&gt;Element&lt;/c1&gt;, whose size is determined at instance creation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラス、そのインスタンスは型&lt;c0&gt;Header&lt;/c0&gt;のプロパティと、そのサイズがインスタンス作成時に決められる、&lt;c1&gt;Element&lt;/c1&gt;配列の生のストレージを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closed range to convert to a &lt;c0&gt;Range&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Range&lt;/c0&gt;インスタンスへ変換することになるある完結範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closing punctuation mark of a pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある対のある閉じ句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts a buffer covering uninitialized memory with room for &lt;c0&gt;capacity&lt;/c0&gt; UTF-8 code units, initializes that memory, and returns the number of initialized elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは&lt;c0&gt;capacity&lt;/c0&gt;のUTF-8単位に対する空き場所をもつ初期化されないメモリを扱うバッファを受け入れ、そのメモリを初期化し、そして初期化された要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、あるシーケンスまたはコレクションを返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、ひとつのオプショナルの値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure or returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは蓄積値をシーケンスのいち要素と結合して新しい蓄積値へとし、&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャの次の呼び出しにおいて使われるか、呼び出し側に返されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that processes one code unit argument at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１度に１つのコードユニット引数を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns &lt;c0&gt;true&lt;/c0&gt; if its argument should be used to split the sequence; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つのクロージャ、それはそれの引数が使われてシーケンスを分割するならば&lt;c0&gt;true&lt;/c0&gt;を；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that returns a Boolean value indicating whether two elements are equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの要素が等しいかどうかを指し示しているブール値を返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a buffer pointer to the static string’s UTF-8 code unit sequence as its sole argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは静的文字列のもつUTF-8コード単位シーケンスへのバッファポインタをそれの唯一の引数として取るものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a mutable typed buffer to the same memory as this buffer, only bound to type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型&lt;c0&gt;T&lt;/c0&gt;に束縛しただけの、このバッファと同じメモリに対する可変の型付バッファをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a mutable typed pointer to the same memory as this pointer, only bound to type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型&lt;c0&gt;T&lt;/c0&gt;に束縛しただけの、このポインタと同じメモリへの可変の型付ポインタをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a typed buffer to the same memory as this buffer, only bound to type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型&lt;c0&gt;T&lt;/c0&gt;に束縛しただけの、このバッファと同じメモリに対する型付バッファをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes a typed pointer to the same memory as this pointer, only bound to type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは、型&lt;c0&gt;T&lt;/c0&gt;に束縛しただけの、このポインタと同じメモリへの型付ポインタをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１つの要素を引数として取り、コレクションがその要素で分割されるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value indicating whether the element should be included in the returned set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはある要素をそれの引数として取り、その要素が返される集合に含まれるべきかどうかを示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as a parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１要素を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns &lt;c0&gt;true&lt;/c0&gt; if the element should be included or &lt;c1&gt;false&lt;/c1&gt; if it should be excluded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が含まれるべきならば&lt;c0&gt;true&lt;/c0&gt;をまたはそれが除外されるべきならば&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns &lt;c0&gt;true&lt;/c0&gt; if the element should be included or &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が含まれるべきならば&lt;c0&gt;true&lt;/c0&gt;を、またはそうでなければ&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns &lt;c0&gt;true&lt;/c0&gt; if the element should be skipped or &lt;c1&gt;false&lt;/c1&gt; if it should be included.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が省かれるべきならば&lt;c0&gt;true&lt;/c0&gt;をまたはそれが含まれるべきならば&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns &lt;c0&gt;true&lt;/c0&gt; if the element should be skipped or &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が省かれるべきならば&lt;c0&gt;true&lt;/c0&gt;を、またはそうでなければ&lt;c1&gt;false&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が合致するものかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が結果に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返される配列に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返されるコレクションに含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素がコレクションから除去されるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素がある条件を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes the failure value of the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスの失敗値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes the success value of the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのインスタンスの成功した値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes the success value of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスの成功した値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that takes the unwrapped value of the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのアンラップされた値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure that updates the accumulating value with an element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>蓄積される値をこのシーケンスのある要素を使って更新するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8コード単位のnull終端シーケンスを指し示すポインタパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A closure with a pointer parameter that points to a null-terminated sequence of code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コード単位からなるnull終端シーケンスを指し示すポインタパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing a single element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の要素を含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing the same elements as a &lt;c0&gt;Base&lt;/c0&gt; collection, but on which some operations such as &lt;c1&gt;map&lt;/c1&gt; and &lt;c2&gt;filter&lt;/c2&gt; are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;コレクションと同じ要素を含んでいるあるコレクション、しかしそれの上で何らかの演算、例えば&lt;c1&gt;map&lt;/c1&gt;や&lt;c2&gt;filter&lt;/c2&gt;が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection containing the words of this value’s binary representation, in order from the least significant to most significant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の持つバイナリ表現の単語いくらかを含んでいるコレクション、最下位から最上位への順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of &lt;c0&gt;Character&lt;/c0&gt; elements to insert into the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ挿入されることになる&lt;c0&gt;Character&lt;/c0&gt;要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of &lt;c0&gt;Child&lt;/c0&gt; elements describing the structure of the reflected subject.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Child&lt;/c0&gt;要素のコレクションで、リフレクションされる主題の構造体を記述しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of &lt;c0&gt;UInt8&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt8&lt;/c0&gt;要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値のコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of code units encoded in the encoding specified in &lt;c0&gt;source&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;において指定されたエンコーディングでエンコードされたコード単位からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of indices for an arbitrary collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不定なコレクションのためのインデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of insertions and removals that describe the difference between two ordered collection states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの順番付きコレクション状態の間の差異を記述するいくらかの挿入と除去からなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection of the elements that &lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt; allowed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt;を認められた要素それらからなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection on which normally-eager operations such as &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;filter&lt;/c1&gt; are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、それにおいては通常は先行な演算、例えば&lt;c0&gt;map&lt;/c0&gt;や&lt;c1&gt;filter&lt;/c1&gt;は、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection or finite sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションまたは有限のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that presents the elements of its base collection in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、それは、それの基盤コレクションの要素を逆順で提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもつ要素の隣接下位範囲を表すコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports backward as well as forward traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前方にだけでなく後方へ辿っていくこともサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports efficient random-access index traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>効率のよい無作為アクセスのインデックス探査をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports replacement of an arbitrary subrange of elements with the elements of another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>随意の下位範囲の要素を別のコレクションの要素で置き換えることをサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection that supports subscript assignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字を使った代入をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose element type is &lt;c0&gt;Element&lt;/c0&gt; but that is always empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの要素型は&lt;c0&gt;Element&lt;/c0&gt;である、しかし常に空であるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose elements are all identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション、その要素は全て同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection whose elements are key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの要素がキー値ペアであるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection’s &lt;c0&gt;indices&lt;/c0&gt; property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの&lt;c0&gt;indices&lt;/c0&gt;プロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが特有にでなくとも参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A collection’s &lt;c0&gt;indices&lt;/c0&gt; property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの&lt;c0&gt;indices&lt;/c0&gt;プロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが非特有に参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A common timing mistake is expecting the results of an asynchronous call to be available within the calling synchronous code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>よくあるタイミング間違いは、非同期呼び出しの結果が、呼び出している同期的コード内部で利用可能であると予想することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A concrete container that provides a view into a decoder’s storage, making the encoded properties of a decodable type accessible by keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある具体的なコンテナで、あるデコーダの持つストレージへのビューを提供します、デコーダ可能型のエンコードされたプロパティをキーによってアクセス可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A concrete container that provides a view into an encoder’s storage, making the encoded properties of an encodable type accessible by keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある具体的なコンテナで、あるエンコーダの持つストレージへのビューを提供します、エンコード可能型のエンコードされたプロパティをキーによってアクセス可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠しているシーケンスでコレクションではないものは、２番目の&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループにおいて幾つかの要素からなる随意のシーケンスを生み出すことを許可されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A conforming type may use any integer radix, but values other than 2 (for binary floating-point types) or 10 (for decimal floating-point types) are extraordinarily rare in practice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型は、あらゆる整数基数を使うことができます、しかし２（バイナリ浮動小数点型に対して）または10（10進浮動小数点型に対して）より他の値は、実際には非常に稀です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A connecting punctuation mark, like a tie.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>連結句読点符号、tieのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A container that can support the storage and direct decoding of a single nonkeyed value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一非キー値のストレージおよび直接デコーディングをサポートできるコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A container that can support the storage and direct encoding of a single non-keyed value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一非キー値のストレージおよび直接エンコーディングをサポートできるコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A contiguously stored null-terminated UTF-8 representation of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接格納されるヌル終端UTF-8表現のこの文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A currency sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>通貨符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom &lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type can have different characteristics than the default &lt;c3&gt;System&lt;w4&gt;Random&lt;w5&gt;Number&lt;w6&gt;Generator&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの&lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型は、省略時の&lt;c3&gt;System&lt;w4&gt;Random&lt;w5&gt;Number&lt;w6&gt;Generator&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;型とは異なる特徴を持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int16&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int32&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int32&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int64&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int64&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int8&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int8&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Int&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;String&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;UInt16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt16&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;UInt32&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt32&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;UInt64&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt64&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;UInt8&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt8&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;UInt&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for the &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom playground Quick Look for this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dash or hyphen punctuation mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ダッシュまたはハイフン句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decimal digit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある10進法数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decimal value may also include an exponent following the significand, indicating the power of 10 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>10進の値はまた、それによって仮数が乗算されるべき10の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decoded Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードされたユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decoded value of the requested type, or &lt;c0&gt;nil&lt;/c0&gt; if the &lt;c1&gt;Decoder&lt;/c1&gt; does not have an entry associated with the given key, or if the value is a null value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要求された型にデコード済みの値、または&lt;c0&gt;nil&lt;/c0&gt;、もし&lt;c1&gt;Decoder&lt;/c1&gt;が与えられたキーに関連する登録項目を持たない場合は、またはその値がnull値の場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A decoded value of the requested type, or &lt;c0&gt;nil&lt;/c0&gt; if the value is a null value, or if there are no more elements to decode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要求された型にデコード済みの値、または&lt;c0&gt;nil&lt;/c0&gt;、もしその値がnull値ならば、またはもしデコードする要素がそれ以上ないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A default implementation of this method will be provided automatically for any conforming type that does not implement one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドの省略時の実装は、それを実装していないあらゆる準拠している型に対して自動的に提供されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dictionary literal to use as the structure for the mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ミラーのための構造体として使うことになる辞書リテラル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digit that does not meet the requirements of the &lt;c0&gt;decimal&lt;/c0&gt; numeric type or a non-digit numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;decimal&lt;/c0&gt;数値型の要件を満たさない桁または非桁数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digit that does not meet the requirements of the &lt;c0&gt;decimal&lt;/c0&gt; numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;decimal&lt;/c0&gt;数値型の要件を満たさない桁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digit that is commonly understood to form base-10 numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に底10の数の形式に理解される桁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A digraph character whose first part is uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの最初の部分が大文字である連字文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A double-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dynamic plain-text Unicode string object, for use instead of a &lt;a0&gt;&lt;c1&gt;String&lt;/c1&gt;&lt;/a0&gt; variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的なプレーンテキストユニコード文字列オブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;String&lt;/c1&gt;&lt;/a0&gt;変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A failure, storing a &lt;c0&gt;Failure&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある失敗、&lt;c0&gt;Failure&lt;/c0&gt;値を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A final quotation mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の引用符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A flattened view of the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数のシーケンスからなるこのシーケンスの要素のある平坦なビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to be converted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to compare to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と比較される浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value to convert to an integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数へと変換する浮動小数点値．</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A format control character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書式制御文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A four-element vector created by appending a scalar to a three-element vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーを３要素ベクターに追加することによって作成される４要素ベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A function that produces the initial &lt;c0&gt;Header&lt;/c0&gt; instance stored in the buffer, given the &lt;c1&gt;buffer&lt;/c1&gt; object and a function that can be called on it to get the actual number of allocated elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファに格納される初期&lt;c0&gt;Header&lt;/c0&gt;インスタンスを生成する関数、&lt;c1&gt;buffer&lt;/c1&gt;オブジェクトおよびそれの上で呼び出されて割り当てられた要素の実際の数を得る関数を与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A grapheme base can be thought of as a space-occupying glyph above or below which other non-spacing modifying glyphs can be applied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書記素基底は、それの上または下に他の無間隔修飾字体が適用できる場所取り字体として考えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A grapheme extender can be thought of primarily as a non-spacing glyph that is applied above or below another glyph.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期素拡張は概ね別の字体の上または下に適用される無間隔字体として考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-length vector made up of the even elements of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの偶数番目の要素から作り上げられる半分長のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-length vector made up of the high elements of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの高い方の要素からから作り上げられる半分長のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-length vector made up of the low elements of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの低い方の要素からから作り上げられる半分長のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-length vector made up of the odd elements of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの奇数番目の要素から作り上げられる半分長のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-open interval from a lower bound up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から、上側の境界まで、しかしそれを含んでいない、半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A half-precision (16b), floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半精度（16b）、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A hexadecimal value may also include an exponent following the significand, indicating the power of 2 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16進数値はまた、それによって仮数が乗算されるべき２の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from a specific root type to a specific resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定の根本の型から特定の結果値の型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from the root of this key path and the value type of &lt;c0&gt;path&lt;/c0&gt;, if &lt;c1&gt;path&lt;/c1&gt; can be appended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのルートからのキーパスと&lt;c0&gt;path&lt;/c0&gt;の値型、もし&lt;c1&gt;path&lt;/c1&gt;が追加されるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from the root of this key path to the value type of &lt;c0&gt;path&lt;/c0&gt;, if &lt;c1&gt;path&lt;/c1&gt; can be appended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのルートから&lt;c0&gt;path&lt;/c0&gt;の値型へのキーパス、もし&lt;c1&gt;path&lt;/c1&gt;が追加できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path from the root of this key path to the value type of &lt;c0&gt;path&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーパスのルートから、&lt;c0&gt;path&lt;/c0&gt;の値型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path is a string of dot-separated keys that specifies a sequence of object properties to traverse.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパスは、辿っていく一連のオブジェクトプロパティを指定する、ドット区切りのキーの文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path referring to storage that can be accessed through a value of type &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;T&lt;/c0&gt;の値を通してアクセス可能なストレージを参照しているキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path that supports reading from and writing to the resulting value with reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果値からのよみ出し及びそれへの書き込みを参照意味論でサポートするキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A key path that supports reading from and writing to the resulting value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果値からのよみ出し及びそれへの書き込みをサポートするキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A keyed decoding container view into &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;へのキー付きデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lazy &lt;c0&gt;Collection&lt;/c0&gt; wrapper that includes the elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延な&lt;c0&gt;Collection&lt;/c0&gt;ラッパー、それは根底にあるコレクションの要素のうち、ある述部を満足させるものを含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lazy collection wrapper that includes the initial consecutive elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延collectionラッパー、それは根底にあるコレクションのうち、ある述部を満足させる、最初の連続した要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lazy wrapper that includes the elements of an underlying collection after any initial consecutive elements that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延なラッパー、それは根底にあるコレクションのうち、ある述部を満足させる何らかの最初の連続した要素の後ろの要素らを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A letter-like numeric character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字のような数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lightweight collection of key-value pairs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアの軽量コレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A line separator, which is specifically (and only) U+2028 LINE SEPARATOR.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行分離子、それは具体的には（そして唯一）U+2028 LINE SEPARATOR です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A list of elements of the new set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい集合の要素のリスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lowercase copy of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の小文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A lowercase letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>小文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mapping closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マップを行うクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A member of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の中のひとつのメンバ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるメモリ位置は１度に１つの型へとバインド（束縛）されるだけでしょう、なので同じメモリに関連のない型として最初にメモリ再バインドすることなしにアクセスすることは、未定義となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A memory location may only be bound to one type at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるメモリ位置は、一度に１つの型に束縛されるだけでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror describes the parts that make up a particular instance, such as the instance’s stored properties, collection or tuple elements, or its active enumeration case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ミラーは様々な部分を叙述します、それらはある特定のインスタンスを作り上げるものです、例えばそのインスタンスのもつ格納プロパティ、コレクションまたはタプルの要素、またはそれの動的列挙ケース節など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror of the subject’s superclass, if one exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>主題の持つスーパークラスのミラー、もしそれが存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int16&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int32&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int32&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int64&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int64&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int8&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int8&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Int&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;String&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;UInt16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt16&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;UInt32&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt32&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;UInt64&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt64&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;UInt8&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt8&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;UInt&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the Float80 instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Float80インスタンスを反映するあるミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのイテレータを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mirror that reflects the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その集合を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A modifier letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>修飾文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable nonowning collection interface to the bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのいち領域中のバイトに対する可変の非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable pointer addressing an Objective-C reference that doesn’t own its target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのターゲットを所有しないObjective-C参照をアドレス指定している可変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutable pointer to the elements of an array is implicitly created when you pass the array using inout syntax.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の要素への可変ポインタは、あなたが配列をinout構文を使って渡す時に暗黙的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A namespace for Unicode utilities.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードユーティリティのための名前空間。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A negative value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A negative, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new &lt;c0&gt;Decoder&lt;/c0&gt; to pass to &lt;c1&gt;super&lt;w2&gt;.init(from:)&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;super&lt;w2&gt;.init(from:)&lt;/w2&gt;&lt;/c1&gt;に渡すための新しい&lt;c0&gt;Decoder&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new encoder to pass to &lt;c0&gt;super&lt;w1&gt;.encode(to:)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;super&lt;w1&gt;.encode(to:)&lt;/w1&gt;&lt;/c0&gt;に渡すための新しいエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance initialized with &lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; will be equivalent to this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;で初期化された新しいインスタンスは、このインスタンスに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance of type &lt;c0&gt;T&lt;/c0&gt;, copied from the buffer pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;T&lt;/c0&gt;の新しいインスタンス、バッファポインタのもつメモリからコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new instance of type &lt;c0&gt;T&lt;/c0&gt;, read from the raw bytes at &lt;c1&gt;offset&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;T&lt;/c0&gt;の新しいインスタンス、&lt;c1&gt;offset&lt;/c1&gt;で生のバイトから読み込んだもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new keyed encoding container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいキー付けされるエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new option set made up of the elements contained in this set, in &lt;c0&gt;other&lt;/c0&gt;, or in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合の中に、&lt;c0&gt;other&lt;/c0&gt;の中に、または両方の中に含まれる要素から作り上げられるオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new option set with only the elements contained in both this set and &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合と&lt;c0&gt;other&lt;/c0&gt;の両方に含まれる要素のみをもつ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new option set with only the elements contained in either this set or &lt;c0&gt;other&lt;/c0&gt;, but not in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合または&lt;c0&gt;other&lt;/c0&gt;のどちらかに、しかし両方にではなく含まれる要素のみをもつ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new range clamped to the bounds of &lt;c0&gt;limits&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;limits&lt;/c0&gt;の境界内に制限された、新しい範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new set with the unique elements of this set and &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合と&lt;c0&gt;other&lt;/c0&gt;との特有な要素を持つ新しい集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A new unkeyed encoding container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいキー付けされないエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A non-letterlike modifier symbol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字でないような修飾記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A non-spacing combining mark with zero advance width (abbreviated Mn).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ送り幅をもつ非空白結合記号（省略してMn）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonowning collection interface to a buffer of elements stored contiguously in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中に隣接して格納された、いくらかの要素からなるあるバッファに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonowning collection interface to a buffer of mutable elements stored contiguously in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中に隣接して格納された、いくらかの可変の要素からなるあるバッファに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A nonowning collection interface to the bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのいち領域中のバイトに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric character of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の型の数字文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーの数値表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A paragraph separator, which is specifically (and only) U+2029 PARAGRAPH SEPARATOR.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>段落分離子、それは具体的には（そして唯一）U+2029 PARAGRAPH SEPARATOR です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A parameterized class written in Objective-C is imported into Swift as a generic class with the same number of type parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cにおいて書かれたパラメータ化されたクラスは、同じ数の型パラメータを持つ総称体クラスとしスウィフトにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partial half-open interval up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上側の境界までの、しかしそれを含まない部分的半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partial interval extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある下側の境界から上向きに拡張する部分的な間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partial interval up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある上側の境界までの、そしてそれを含んでいる部分的な間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A partially type-erased key path, from a concrete root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある部分的な型消去キーパス、具体的な根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer for accessing and manipulating data of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある特定の型のデータにアクセスおよび操作するためのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer for accessing data of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある特定の型の日付にアクセスするためのボインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a newly allocated region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しくアロケートされたメモリ領域へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a null-terminated UTF-8 code sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a null-terminated code sequence encoded in &lt;c0&gt;encoding&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;encoding&lt;/c0&gt;でエンコードされたヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるnull終端された一連のUTF-8コード単位へのあるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a sequence of contiguous code units in the encoding specified in &lt;c0&gt;source&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;, ending just before the first zero code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;で指定のエンコーディングでの、最初のゼロコード単位の直前で終わっている隣接コード単位シーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to a sequence of contiguous, UTF-8 encoded bytes ending just before the first zero byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のゼロバイト直前で終わっている、隣接の、UTF-8エンコードされた幾らかのバイトに対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to at least &lt;c0&gt;count&lt;/c0&gt; initialized instances of type &lt;c1&gt;Pointee&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>少なくとも&lt;c0&gt;count&lt;/c0&gt;個の初期化された型&lt;c1&gt;Pointee&lt;/c1&gt;のインスタンスに対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the first byte of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファへの最初のバイトへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the first element of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの最初の要素へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the memory to copy bytes from.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこからバイトをコピーすることになるメモリへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the start of the buffer, or &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの始まりへのポインタ、または&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pointer to the values to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コピーされる値に対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a &lt;c0&gt;Lazy&lt;w1&gt;Prefix&lt;w2&gt;While&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c4&gt;Lazy&lt;w5&gt;Prefix&lt;w6&gt;While&lt;w7&gt;Bidirectional&lt;w8&gt;Collection&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Lazy&lt;w1&gt;Prefix&lt;w2&gt;While&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c4&gt;Lazy&lt;w5&gt;Prefix&lt;w6&gt;While&lt;w7&gt;Bidirectional&lt;w8&gt;Collection&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;インスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a &lt;c0&gt;String&lt;/c0&gt; or one of its views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;String&lt;/c0&gt;またはそれのビューの１つの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a FlattenCollection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FlattenCollectionの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in a view of the &lt;c0&gt;target&lt;/c0&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;target&lt;/c0&gt;パラメータのあるビューの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in at least one of the views of the string shared by &lt;c0&gt;target&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;target&lt;/c0&gt;によって共有される文字列のいくつかのビューのうち少なくとも１つにおけるある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position in the &lt;c0&gt;utf16&lt;/c0&gt; view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の&lt;c0&gt;utf16&lt;/c0&gt;の中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A position of a character or code unit in a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の中のある文字またはコード単位の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A positive value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A positive, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A possible prefix to test against this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列に対してテストすることになる可能性のある接頭辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A possible suffix to test against this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列に対してテストすることになる可能性のある接尾辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that returns &lt;c0&gt;true&lt;/c0&gt; if its first argument should be ordered before its second argument; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある述部、それはそれの最初の引数がそれの２番目の引数の前に並べられるべきならば&lt;c0&gt;true&lt;/c0&gt;を返します；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate that returns &lt;c0&gt;true&lt;/c0&gt; if its two arguments are equivalent; otherwise, &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある述部、それはそれの２つの引数が等しいならば&lt;c0&gt;true&lt;/c0&gt;を返します；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A predicate used to partition the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに仕切りをするのに使われる述部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A private-use character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>私用面の文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A property has inline, directly addressable storage when it is a stored property for which no additional work is required to extract or set the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるプロパティは、インラインに、直接にアドレス指定可能なストレージを持ちます、それが値を抽出または設定するのに追加的な仕事が要求されない格納プロパティである場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A protocol for legitimate arguments to &lt;c0&gt;Mirror&lt;/c0&gt;’s &lt;c1&gt;descendant&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Mirror&lt;/c0&gt;の&lt;c1&gt;descendant&lt;/c1&gt;メソッドへの合法的な引数に対するプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A punctuation mark of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の型の句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A quiet NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クワイエットNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A radix-2 (binary) floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるradix-2（バイナリ）浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random element from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションからのある無作為の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value of &lt;c0&gt;T&lt;/c0&gt; in the range &lt;c1&gt;0..&lt;upper&lt;w2&gt;Bound&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な&lt;c0&gt;T&lt;/c0&gt;の値で範囲&lt;c1&gt;0..&lt;upper&lt;w2&gt;Bound&lt;/w2&gt;&lt;/c1&gt;の中のもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value of &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な&lt;c0&gt;T&lt;/c0&gt;の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A random value within the bounds of &lt;c0&gt;range&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;range&lt;/c0&gt;の境界内のある無作為な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range expression that represents the entire range of a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの全体の範囲を表す範囲式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of the buffer’s indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of the collection’s indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもつインデックスのある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range of the range’s indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲のインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range suitable for slicing &lt;c0&gt;collection&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスする&lt;c0&gt;collection&lt;/c0&gt;に対して適している範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range to check for elements in common.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共通の要素を調べる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw memory buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のメモリバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw pointer for accessing and manipulating untyped data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付けされないデータにアクセスおよび操作するための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw pointer for accessing untyped data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付けされないデータにアクセスするための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A raw pointer to the same address as this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタと同じアドレスに対する生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A reimagined Swift computed property that expresses the same functionality—getting the components of a color—can be written as a four-element tuple:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再度考えられたSwift計算プロパティで同じ機能性を表現するもの — ある色の構成要素の取得 — は、４要素のタプルとして記述されることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of the string that is suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その文字列のひとつの表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of the substructure and display style of an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位構造体の表現と何らかの型のインスタンスの表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A representation of this integer with the byte order swapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のバイト順交換した表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A reserved unassigned code point or a non-character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予約済み未割り当てコード点または非文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A rule for rounding a floating-point number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点数を丸める為のある規則。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence built around an iterator of type &lt;c0&gt;Base&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;Base&lt;/c0&gt;のイテレータに基づいて構築されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence consisting of all the elements contained in each segment contained in some &lt;c0&gt;Base&lt;/c0&gt; sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの&lt;c0&gt;Base&lt;/c0&gt;シーケンスに含まれる各断片の中に含まれるいくらかの要素から成るシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence containing the same elements as a &lt;c0&gt;Base&lt;/c0&gt; sequence, but on which some operations such as &lt;c1&gt;map&lt;/c1&gt; and &lt;c2&gt;filter&lt;/c2&gt; are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;シーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えば&lt;c1&gt;map&lt;/c1&gt;や&lt;c2&gt;filter&lt;/c2&gt;が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence containing the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含むシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence containing the same elements as this sequence, but on which some operations, such as &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;filter&lt;/c1&gt;, are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えば&lt;c0&gt;map&lt;/c0&gt;や&lt;c1&gt;filter&lt;/c1&gt;が遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence is a list of values that you can step through one at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは値のリストで、あなたが１度に１つずつ段階処理していくことができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence leaving off the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を取り除いたあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of elements with which to initialize the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>幾らかの要素からなるシーケンス、それに対してバッファを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of elements with which to initializer the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなるシーケンス、それを使ってバッファを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of pairs enumerating the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスを列挙している、ペアからなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of the initial, consecutive elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;を満たす冒頭の、隣接する要素からなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values formed by striding over a closed interval.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある完結間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence of values formed by striding over a half-open interval.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある半開間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence on which normally-eager sequence operations are implemented lazily.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それにおいては通常は先行な演算は、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence should provide its iterator in O(1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスはそれのイテレータをO(1)で提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting after the initial, consecutive elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;を満たす冒頭の、隣接する要素の後で始まるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素の後で始まるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence starting at the beginning of this sequence with at most &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの先端で始まる多くとも&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;要素のあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that lazily consumes and drops &lt;c0&gt;n&lt;/c0&gt; elements from an underlying &lt;c1&gt;Base&lt;/c1&gt; iterator before possibly returning the first available element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>おそらくは最初の利用可能な要素が返る前に&lt;c0&gt;n&lt;/c0&gt;個の要素をある基礎をなす&lt;c1&gt;Base&lt;/c1&gt;イテレータから遅延に消費して落とすあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that only consumes up to &lt;c0&gt;n&lt;/c0&gt; elements from an underlying &lt;c1&gt;Base&lt;/c1&gt; iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大で&lt;c0&gt;n&lt;/c0&gt;個の要素まで基礎をなす&lt;c1&gt;Base&lt;/c1&gt;イテレータからただ消費しきるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that presents the elements of a base sequence of sequences concatenated using a given separator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それはいくらかのシーケンスからなるある基盤となるシーケンスの要素らを、与えられた分離子を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素の隣接下位範囲を表すシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence to compare to this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、このシーケンスと比べることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence to insert between each of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素それぞれの間に挿入されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements are produced via repeated applications of a closure to some mutable state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャをある何らかの可変の状態へ繰り返し適用することでその要素が生み出されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は複数回探査されることが非破壊的に可能です、そしてある添え字で指し示すことによってアクセスされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements consist of the elements of some base sequence that also satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それは何らかの基盤シーケンスの要素でさらにまた与えられた述部を満足させるものから成る要素たちです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements consist of the elements that follow the initial consecutive elements of some base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は何らかの基盤シーケンスの、ある与えられた述部を満足させる最初の隣接要素の後に続く要素それらから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequence whose elements consist of the initial consecutive elements of some base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それの要素は何かの基盤シーケンスのもので、与えられた述部を満足させる最初の連続した要素から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set of Unicode character values for use in search operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>検索操作において使うための一揃いのユニコード文字値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set of the elements that &lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt; allows.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt;が許可する要素からなる集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set of the same type as the current set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在の集合と同じ型の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set of the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じ型の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A shuffled array of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素からなる、あるシャッフルされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signaling NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signaling NaN sets the floating-point exception status when used in many floating-point operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNは、多くの浮動小数点演算において使われる時に、浮動小数点例外状態を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A signed, fixed-width integer type can represent values from &lt;c3&gt;-(2 ** (bit&lt;w4&gt;Width - 1))&lt;/w4&gt;&lt;/c3&gt; through &lt;c5&gt;(2 ** (bit&lt;w6&gt;Width - 1)) - 1&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付きの、固定長整数型は、&lt;c3&gt;-(2 ** (bit&lt;w4&gt;Width - 1))&lt;/w4&gt;&lt;/c3&gt;から&lt;c5&gt;(2 ** (bit&lt;w6&gt;Width - 1)) - 1&lt;/w6&gt;&lt;/c5&gt;までの値を表せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A silent NaN (“not a number”) value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>silent NaN（非数）値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一のユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single extended grapheme cluster that approximates a user-perceived character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の拡張書記素クラスタで、１つのユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single string can have greatly differing lengths when measured by its different views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一の文字列は、それの異なるビューによって測られる時に大きく違っていることがありえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single, concatenated string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一の、連結された文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice inherits the value or reference semantics of its base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスは、それの基盤コレクションのもつ値意味論もしくは参照意味論を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice may hold a reference to the entire storage of a larger collection, not just to the portion it presents, even after the base collection’s lifetime ends.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きなコレクションのストレージ全体への参照を保持します、元のコレクションの寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A slice stores a base collection and the start and end indices of the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライス（切り取り）は、基盤コレクションおよびビューの始まりと終わりのインデックスを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sorted array of the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンス要素のソート済み配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A source of text-streaming operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキストストリーミング操作のソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A space character of non-zero width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非ゼロ幅の空白文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A spacing combining mark with positive advance width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の送り幅をもつ空白結合記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A stable sort preserves the relative order of elements for which &lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; does not establish an order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安定ソートは、それに対して&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が順序を確立しない要素らの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A stable sort preserves the relative order of elements that compare equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安定ソートは、等しいと比較される要素それらの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A static string can use either of the following as its storage:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的文字列は、以下のどちらかをそれのストレージとして使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A static, plain-text Unicode string object that bridges to &lt;a0&gt;&lt;c1&gt;String&lt;/c1&gt;&lt;/a0&gt;; use &lt;s2&gt;&lt;c3&gt;NSString&lt;/c3&gt;&lt;/s2&gt; when you need reference semantics or other Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的な、プレーンテキストのユニコード文字列オブジェクト、それは&lt;a0&gt;&lt;c1&gt;String&lt;/c1&gt;&lt;/a0&gt;にブリッジされます；あなたが参照意味論または他のFoundation特有の挙動を必要とする時は&lt;s2&gt;&lt;c3&gt;NSString&lt;/c3&gt;&lt;/s2&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string instance or another sequence of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列インスタンスまたは別のいくらかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string is a collection of &lt;e0&gt;extended grapheme clusters&lt;/e0&gt;, which approximate human-readable characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列は、&lt;e0&gt;拡張書記素クラスタ&lt;/e0&gt;のコレクションです、それらはだいたいは人間が読むことができる文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string is a series of characters, such as &lt;c0&gt;"Swift"&lt;/c0&gt;, that forms a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は一続きの文字です、例えば&lt;c0&gt;"Swift"&lt;/c0&gt;など、それはあるコレクションを形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string literal containing the characters that appear next in the string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次にこの文字列リテラルにおいて現れる文字を含んでいる文字列リテラル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string representation of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string that represents the contents of the dictionary, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の内容を表す文字列、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string that represents the contents of the dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の内容を表す文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string that represents the contents of the set, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の内容を表す文字列、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string that represents the contents of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の内容を表す文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to append.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string to insert between each of the elements in this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素のそれぞれの間に挿入されることになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string type designed to represent text that is known at compile time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイル時に知られるテキストを表現するために設計される文字列型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.string&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.string&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつ&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;プロパティは、ユニコードの基本単位である21ビットコード、ユニコードスカラー値いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s &lt;c0&gt;utf16&lt;/c0&gt; property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;プロパティは、その文字列のもつユニコードスカラー値の16ビット符号化形式、UTF-16コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s &lt;c0&gt;utf8&lt;/c0&gt; property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつ&lt;c0&gt;utf8&lt;/c0&gt;プロパティは、その文字列のもつユニコードスカラー値の８ビット符号化形式、UTF-８コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s UTF-16 view encodes the string’s Unicode scalar values as 16-bit integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつUTF-16ビューは、文字列のもつユニコードスカラー値を16ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s UTF-8 view encodes the string’s Unicode scalar values as 8-bit integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つUTF-8ビューは、文字列の持つユニコードスカラー値を8ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s Unicode scalar values can be up to 21 bits in length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つユニコードスカラー値は、長さが21ビットに至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つ以上の文字列インスタンスが同じバッファを使っている時、変化において、ある文字列の持つデータは遅延にのみコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A string’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素の後から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting at the &lt;c0&gt;start&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;位置から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence starting at the beginning of this collection with at most &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの先端で始まる多くとも&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence terminating at the end of the collection with at most &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの末端で終わっていて多くとも&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;の要素を持つ下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence that leaves off &lt;c0&gt;k&lt;/c0&gt; elements from the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;k&lt;/c0&gt;個の要素を終わりから取り除いた下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence that leaves off the specified number of elements at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素が末尾から無くなっているシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence up to, and including, the &lt;c0&gt;end&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;位置に至るまでの、そしてそれを含む、下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A subsequence up to, but not including, the &lt;c0&gt;end&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;位置に至るまでの、しかしそれを含まないシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A substring holds a reference to the entire storage of the string it comes from, not just to the portion it presents, even when there is no other reference to the original string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列はそれが由来する文字列のストレージ全体への参照を保持します、それが存在する部分に対してだけではなく、たとえ本来の文字列への他の参照が存在しないときでさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A substring to convert to a standalone &lt;c0&gt;String&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある下位文字列を独立した&lt;c0&gt;String&lt;/c0&gt;インスタンスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A success, storing a &lt;c0&gt;Success&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある成功、&lt;c0&gt;Success&lt;/c0&gt;値を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A suggested display style for the reflected subject.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リフレクションされる主題のための１つの提案の表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A suggestion of how a mirror’s subject is to be interpreted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにMirrorの持つsubjectが解釈されるようになるかの提案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A surrogate code point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるサロケートコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A symbol of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の型のシンボル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A symbol of mathematical use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学的利用の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual description of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターのテキスト記述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the buffer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのバッファのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the identifier, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その識別子のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the pointer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのポインタのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the range, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the static string, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的文字列のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the static string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その静的文字列のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the value, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その値のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this instance, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのインスタンスのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A textual representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A three-element vector created by appending a scalar to a two-element vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーを２要素ベクターに追加することによって作成される３要素ベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A throwing closure to evaluate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>評価することになるスローするクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A timing scenario you should avoid is calling the &lt;s8&gt;&lt;c9&gt;data&lt;w10&gt;Task(with:&lt;w11&gt;completion&lt;w12&gt;Handler:)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;&lt;/s8&gt; method within your app's &lt;a13&gt;&lt;c14&gt;view&lt;w15&gt;Did&lt;w16&gt;Load()&lt;/w16&gt;&lt;/w15&gt;&lt;/c14&gt;&lt;/a13&gt; method and attempting to use the results outside of the closure you pass as the completion handler.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが避けるべきタイミングシナリオは、&lt;s8&gt;&lt;c9&gt;data&lt;w10&gt;Task(with:&lt;w11&gt;completion&lt;w12&gt;Handler:)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;&lt;/s8&gt;メソッドをあなたのアプリの&lt;a13&gt;&lt;c14&gt;view&lt;w15&gt;Did&lt;w16&gt;Load()&lt;/w16&gt;&lt;/w15&gt;&lt;/c14&gt;&lt;/a13&gt;メソッド内部で呼び出す、そして結果をあなたが完了ハンドラとして渡したクロージャの外部で使うのを試みることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A trivial type can be copied bit for bit with no indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明な型は、ビット対ビットでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A trivial type can be copied with just a bit-for-bit copy without any indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明な型は、単にビット対ビットコピーでコピーされることが、何らかの間接的または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the high and low parts of a double-width integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２倍幅整数の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the high and low parts of the result of multiplying this value and &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と&lt;c0&gt;other&lt;/c0&gt;を乗算する結果の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the number of UTF-16 code units required to encode &lt;c0&gt;input&lt;/c0&gt; and a Boolean value that indicates whether the &lt;c1&gt;input&lt;/c1&gt; contained only ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;input&lt;/c0&gt;をエンコードするのに必要とされるUTF-16コード単位の数と&lt;c1&gt;input&lt;/c1&gt;がASCII文字だけを含んでいるかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder obtained by dividing &lt;c0&gt;dividend&lt;/c0&gt; by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dividend&lt;/c0&gt;をこの値で除算することによって入手される商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder of &lt;c0&gt;dividend&lt;/c0&gt; divided by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dividend&lt;/c0&gt;をこの値で除算した商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the quotient and remainder of this value divided by &lt;c0&gt;rhs&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;によって除算されたこの値の商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple of the lower and upper bounds of the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の下方および上方境界からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A tuple with the new string and a Boolean value that indicates whether any repairs were made.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列と、あらゆる修復がなされたかどうかを指し示すブール値を持つタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type for propagating an unmanaged object reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある管理されないオブジェクト参照を伝達するための型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type for which the conforming type provides a containment test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それに対して準拠しているが格納テストを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing an error value that can be thrown.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローされることが可能なあるエラー値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing continuous, one-dimensional values that can be offset and measured.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オフセットできて計測できる、連続的な、一次元の値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type representing the stable identity of the entity associated with an instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインスタンスと結び付けられた登録項目の安定した同一性を表しているある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be compared for value equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の同等性について比較されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be compared using the relational operators &lt;c0&gt;&lt;&lt;/c0&gt;, &lt;c1&gt;&lt;=&lt;/c1&gt;, &lt;c2&gt;&gt;=&lt;/c2&gt;, and &lt;c3&gt;&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係演算子&lt;c0&gt;&lt;&lt;/c0&gt;、&lt;c1&gt;&lt;=&lt;/c1&gt;、&lt;c2&gt;&gt;=&lt;/c2&gt;、そして&lt;c3&gt;&gt;&lt;/c3&gt;を使って比較されるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be converted to and from an associated raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある結び付けられた生の値へおよびそれから変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be hashed into a &lt;c0&gt;Hasher&lt;/c0&gt; to produce an integer hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Hasher&lt;/c0&gt;へとハッシュ化されることで整数ハッシュ値を生成することが可能な型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized by string interpolation with a string literal that includes expressions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの式を含むある文字列リテラルを使う文字列補間によって初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using a dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある辞書リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized using the nil literal, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nilリテラル、&lt;c0&gt;nil&lt;/c0&gt;を使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal containing a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値を含んでいるある文字列リテラルで初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal containing a single extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ただ１つの拡張書記素クラスタを含んでいるある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数リテラルで初期化できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be initialized with the Boolean literals &lt;c0&gt;true&lt;/c0&gt; and &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルの&lt;c0&gt;true&lt;/c0&gt;と&lt;c1&gt;false&lt;/c1&gt;を使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be represented as a string in a lossless, unambiguous way.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるロスレスの、曖昧さのない方法で、文字列として表現できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be the target of text-streaming operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキストストリーミング操作のターゲットであることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used as a key for encoding and decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディングのためのキーとして使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used as an element in a SIMD vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクターにおける要素として使用できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used to parse &lt;c0&gt;Code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt; into &lt;c2&gt;Encoded&lt;w3&gt;Scalar&lt;/w3&gt;&lt;/c2&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それは&lt;c0&gt;Code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt;を&lt;c2&gt;Encoded&lt;w3&gt;Scalar&lt;/w3&gt;&lt;/c2&gt;それらへと構文解析するのに使用可能なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used to parse a reversed sequence of &lt;c0&gt;Code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt; into &lt;c2&gt;Encoded&lt;w3&gt;Scalar&lt;/w3&gt;&lt;/c2&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それは&lt;c0&gt;Code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt;の逆の並びを&lt;c2&gt;Encoded&lt;w3&gt;Scalar&lt;/w3&gt;&lt;/c2&gt;それらへと構文解析するのに使用可能なものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can be used to slice a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをスライスするために使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can convert itself into and out of an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を外部表現へとそしてそれをもとに変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can decode itself from an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身が外部表現からデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can decode values from a native format into in-memory representations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をネイティブ形式からインメモリ表現へとデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can encode itself to an external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を外部表現へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can encode values into a native format for external representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を外部表現のためにネイティブ形式へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can function as storage for a SIMD vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型、それは、SIMDベクター型に対するストレージとして機能できるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent a string as a collection of characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を文字のコレクションとして表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent any written exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの書かれた指数を表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正と負の値の両方を表せる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent the absolute value of any possible value of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that can represent the absolute value of any possible value of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that conforms to &lt;c0&gt;Range&lt;w1&gt;Expression&lt;/w1&gt;&lt;/c0&gt; can convert itself to a &lt;c2&gt;Range&lt;Bound&gt;&lt;/c2&gt; of indices within a given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Range&lt;w1&gt;Expression&lt;/w1&gt;&lt;/c0&gt;に準拠する型は、それ自身を指定コレクション内のインデックスの&lt;c2&gt;Range&lt;Bound&gt;&lt;/c2&gt;に変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that conforms to &lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; can choose how to respond when this method is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠する型は、このメソッドが呼ばれた時どのような応答をするか選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that conforms to the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol provides the value for &lt;c2&gt;pi&lt;/c2&gt; at its best possible precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型は、&lt;c2&gt;pi&lt;/c2&gt;に対する値をそれの最もよい可能な精度で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that explicitly supplies its own mirror, but whose descendant classes are not represented in the mirror unless they also override &lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>明示的にそれ独自のMirrorを提供するある型、しかしそれの子孫クラスはそれらがまた&lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;をオーバーライドしない限りはMirrorで表現されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that explicitly supplies its own mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>明示的にそれ自身のMirrorを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that iterates over a collection using its indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクション全体に渡ってそれのインデックスを使って繰り返し処理する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that presents a mathematical set interface to a bit set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学的なセットインターフェイスをビットセットに与える型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a collection of all of its values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの値の全てからなるコレクションを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into a decoder’s storage and is used to hold the encoded properties of a decodable type in a keyed manner.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるデコーダの持つストレージへのビューを提供し、そしてデコーダ可能型のエンコードされたプロパティをキー流儀で保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into a decoder’s storage and is used to hold the encoded properties of a decodable type sequentially, without keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるデコーダの持つストレージへのビューを提供し、そしてデコーダ可能型のエンコードされたプロパティを順次的に、キーなしで保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into an encoder’s storage and is used to hold the encoded properties of an encodable type in a keyed manner.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるエンコーダの持つストレージへのビューを提供し、そしてエンコード可能型のエンコードされたプロパティをキー流儀で保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides a view into an encoder’s storage and is used to hold the encoded properties of an encodable type sequentially, without keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型で、あるエンコーダの持つストレージへのビューを提供し、そしてエンコード可能型のエンコードされたプロパティを順次的に、キーなしで保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides mathematical set operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学的な集合演算を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順次的な、繰り返されるアクセスをそれの要素に提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides the collection’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides the sequence’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that provides uniformly distributed random data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一様分布無作為データを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a Unicode scalar literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点リテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a position in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a position in the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents a valid position in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効な位置をそのコレクションにおいて表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents an extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張書記素クラスタリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents either a wrapped value or &lt;c0&gt;nil&lt;/c0&gt;, the absence of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラップされた値または、値の不在である&lt;c0&gt;nil&lt;/c0&gt;、どちらかを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the distance between two pointers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのポインタの間の隔たりを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the distance between two values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値の間の隔たりを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the encoded exponent of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコードされた指数を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the encoded significand of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコードされた仮数を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>昇順での、コレクションの添え字として有効なインデックスを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the number of steps between two &lt;c0&gt;String&lt;w1&gt;.Index&lt;/w1&gt;&lt;/c0&gt; values, where one value is reachable from the other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一方の値が他方から到達可能であるところの２つの&lt;c0&gt;String&lt;w1&gt;.Index&lt;/w1&gt;&lt;/c0&gt;値の間の段階数を表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that represents the words of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のワードを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that supplies a custom description for playground logging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドログのためにあつらえの記述を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type that supplies the values of a sequence one at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスに属する値を１度に１つ提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type whose instances can be encoded, and appropriately passed, as elements of a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのインスタンスが、符号化されること、そして適切に渡されることが、C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;の要素として可能である型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with a customized textual representation suitable for debugging purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグ目的に都合がよいようにカスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with a customized textual representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>カスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with values that support addition and subtraction.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算と減算をサポートする値を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type with values that support multiplication.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算をサポートする値をもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased hashable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ハッシュ可能値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased iterator of &lt;c0&gt;Element&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;の型消去イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased key path, from any root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去キーパス、何らかの根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support bidirectional traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２方向に辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support forward traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前へ辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type-erased wrapper over any collection with indices that support random access traversal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為アクセスで辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed buffer of the memory referenced by this raw buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生のバッファによって参照されるメモリの型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed buffer of the newly bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しく束縛されたメモリの型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed pointer to the memory referenced by this raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生のポインタによって参照されるメモリへの型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed pointer to the newly bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しく束縛されたメモリへの型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typed pointer to the same memory as this raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生のポインタと同じメモリに対する型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type’s size does not include any dynamically allocated or out of line storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型の大きさは、あらゆる動的にアロケートされるおよびアウトオブラインのストレージを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unicode scalar value to be used when repairing encoding/decoding errors, as represented in this encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化／復号エラーを修復している時に使われるあるユニコードスカラー値、この符号化において表現されるとおりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A unique identifier for a class instance or metatype.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスインスタンスまたはメタタイプのための固有な識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A user-defined key for providing context during encoding and decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングおよびデコーディングの間にコンテキストを提供するためのユーザ定義のキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid buffer class is non-&lt;c0&gt;@objc&lt;/c0&gt;, with no declared stored properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効なバッファクラスは、非&lt;c0&gt;@objc&lt;/c0&gt;で、宣言された保存プロパティを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この配列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the character view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字ビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the collection to use as a limit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>限度として使うためのそのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid index of the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A valid scalar value as represented in this encoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この符号化において表現されるある有効なスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to &lt;c0&gt;+infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;+infinity&lt;/c0&gt;に等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to &lt;c0&gt;-infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-infinity&lt;/c0&gt;に等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to zero with a negative sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value equal to zero with a positive sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value from which to use the magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこからの値が規模に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value from which to use the sign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからの値が符号に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの中の要素の数より少ないか等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value less than or equal to the number of elements in the sequence, calculated nondestructively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素数より少ないか等しい値、非破壊的に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of &lt;e0&gt;NaN&lt;/e0&gt; contains the string &lt;c1&gt;"nan"&lt;/c1&gt;, case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;NaN&lt;/e0&gt;の値は、文字列&lt;c1&gt;"nan"&lt;/c1&gt;を含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of &lt;e0&gt;infinity&lt;/e0&gt; contains one of the strings &lt;c1&gt;"inf"&lt;/c1&gt; or &lt;c2&gt;"infinity"&lt;/c2&gt;, case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e0&gt;無限大&lt;/e0&gt;の値は、文字列&lt;c1&gt;"inf"&lt;/c1&gt;または&lt;c2&gt;"infinity"&lt;/c2&gt;のうちの１つを含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of the requested type, if present for the given key and convertible to the requested type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要請された型の値、もし与えられたキーに対して存在して要請された型に変換可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value of the requested type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要請された型の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value representative of the type to describe.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>描写することになる型の典型であるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value stored into a subscript of a &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; instance must subsequently be accessible at that same position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;インスタンスのある添え字へと格納される値は、その後にその同じ位置でアクセス可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that is offset from this value by &lt;c0&gt;n&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から&lt;c0&gt;n&lt;/c0&gt;をオフセットされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that provides access to properties of a Unicode scalar that are defined by the Unicode standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード標準によって定義されるユニコードスカラーのプロパティに対するアクセスを提供する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value that represents either a success or a failure, including an associated value in each case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>成功または失敗のどちらかを表すある値、それぞれの場合での関連値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to add to the hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーに加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to convert to this type of integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の整数へと変換される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to convert to this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型へと変換される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to match against &lt;c0&gt;pattern&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;pattern&lt;/c0&gt;と照合することになるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the big-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のビッグエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the little-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のリトルエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value to use as the source of the new instance’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスの持つバイナリ表現のソースとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value type whose instances are either &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値型、そのインスタンスは&lt;c0&gt;true&lt;/c0&gt;か&lt;c1&gt;false&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A value’s &lt;c0&gt;floating&lt;w1&gt;Point&lt;w2&gt;Class&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property describes its “class” as described by the &lt;a3&gt;IEEE 754 specification&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の&lt;c0&gt;floating&lt;w1&gt;Point&lt;w2&gt;Class&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティは、それの“class”を&lt;a3&gt;IEEE 754仕様&lt;/a3&gt;で記述される通りに記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A variadic list of elements of the new set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい集合の要素からなる可変長引数リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of 16 scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16スカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of 32 scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32スカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of 64 scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64スカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of eight scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of four scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>４つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of three scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>３つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector of two scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのスカラー値のベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector with one in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのレーンに１つでのあるベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector with the specified value in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのレーンでこの指定された値を持つベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A vector with zero in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのレーンにおいてゼロをもつあるベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A version of the Unicode Standard represented by its major and minor components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのメジャーおよびマイナー部分によって表されるユニコード標準のあるバージョン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view into a subsequence of elements of another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある見方、別のコレクションのいくらかの要素からなる下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a string’s contents as a collection of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-16コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a string’s contents as a collection of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-8コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A view of a string’s contents as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の内容のひとつの見方、いくらかのユニコードスカラー値のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper around a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;ポインタの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper around an opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインターの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A wrapper over an underlying index that hides the specific underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>根底にあるインデックスを覆うラッパー、根底にある特定の型を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ASCII characters have a scalar value between 0 and 127, inclusive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ASCII文字は、０と127の間の、それらを含む、スカラー値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access Swift types and declarations from within your Objective-C codebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift型と宣言にあなたのObjective-Cコードベース内からアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access a pointer to a variable in memory for explicit passing to C functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中のある変数へのポインタに明示的にC関数を渡すためにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access classes and other declarations from your Objective-C code in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftにおいてあなたのObjective-Cコード由来のクラスおよび他の宣言にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Access your Swift code from within your Objective-C codebase, and your Objective-C code from Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのSwiftコードにあなたのObjective-Cコードベース内からアクセスします、そしてあなたのObjective-CコードにSwiftからアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses a contiguous subrange of the buffer’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの持つ要素の隣接下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのもついくらかの要素からなるある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the Unicode scalar value at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置でユニコードスカラーにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the byte at the given offset in the memory region as a &lt;c0&gt;UInt8&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオフセットでメモリ領域において&lt;c0&gt;UInt8&lt;/c0&gt;値としてバイトにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the bytes in the specified memory region.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたメモリ領域においてバイトにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the character at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた位置で文字にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the code unit at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the code unit at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the contiguous subrange of the collection’s elements specified by a range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式によって指定される、コレクションの要素からなる連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at &lt;c0&gt;position&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;position&lt;/c0&gt;での要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたインデックスでの要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the instance referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるインスタンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the member at the given position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた位置でのメンバにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the pointee at the specified offset from this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタから指定されたオフセットでPointeeにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the scalar at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置でスカラーにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accesses the subsequence bounded by the given range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた範囲によって仕切られた下位シーケンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing &lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;, the &lt;c5&gt;last&lt;/c5&gt; property, or calling methods that depend on moving indices might not have the documented complexity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;、&lt;c5&gt;last&lt;/c5&gt;プロパティにアクセスすること、または移動するインデックスに依存するメソッドを呼び出すことは、文書化される計算量を持たないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing &lt;c7&gt;end&lt;w8&gt;Index&lt;/w8&gt;&lt;/c7&gt;, the &lt;c9&gt;last&lt;/c9&gt; property, or calling methods that depend on moving indices might not have the documented complexity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c7&gt;end&lt;w8&gt;Index&lt;/w8&gt;&lt;/c7&gt;、&lt;c9&gt;last&lt;/c9&gt;プロパティにアクセスすること、または移動するインデックスに依存するメソッドを呼び出すことは、文書化される計算量を持たないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Buffer Contents</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファ内容にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Individual Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々の要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing Numeric Constants</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数に関する定数にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing String Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing String View Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列ビュー要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a Pointer’s Memory as a Different Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタのもつメモリに異なる型としてアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing a String’s Unicode Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のユニコード表現にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing memory as a type &lt;c0&gt;T&lt;/c0&gt; requires that the memory be bound to that type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにある型&lt;c0&gt;T&lt;/c0&gt;としてアクセスすることは、メモリがその型に束縛されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing memory as type &lt;c0&gt;T&lt;/c0&gt; requires that the memory be bound to that type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリに型&lt;c0&gt;T&lt;/c0&gt;としてアクセスすることは、メモリがその型に束縛されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing memory through the returned pointer is undefined if the memory has not been bound to &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるポインタによってメモリにアクセスすることは、メモリが&lt;c2&gt;T&lt;/c2&gt;に束縛されていないならば未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing the &lt;c3&gt;utf8&lt;/c3&gt; view with these indices yields the first and second code UTF-8 units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;utf8&lt;/c3&gt;ビューにそれらのインデックスでアクセスすることは、１番目と２番目のUTF-8コード単位を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing the Layout of a Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型のレイアウトにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing the Layout of a Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のレイアウトにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing the Raw Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this collection’s bytes does not bind the underlying memory to &lt;c6&gt;UInt8&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつバイトにアクセスすることは、基礎をなすメモリを&lt;c6&gt;UInt8&lt;/c6&gt;へとバインドしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this property in the case of a &lt;c4&gt;nil&lt;/c4&gt; value is a serious programming error and could lead to undefined behavior or a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;nil&lt;/c4&gt;値の場合にこのプロパティにアクセスすることは、重大なプログラミングエラーです、そして未定義挙動または実行時エラーに至らせるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this property when &lt;c0&gt;has&lt;w1&gt;Pointer&lt;w2&gt;Representation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;false&lt;/c3&gt; triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;has&lt;w1&gt;Pointer&lt;w2&gt;Representation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;false&lt;/c3&gt;である時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing this property when &lt;c0&gt;has&lt;w1&gt;Pointer&lt;w2&gt;Representation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;true&lt;/c3&gt; triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;has&lt;w1&gt;Pointer&lt;w2&gt;Representation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;true&lt;/c3&gt;である時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add macros to your Objective-C types to group their values in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マクロをあなたのObjective-C型に加えて、それらの値をSwiftにおいてグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add with overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の追加</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding IteratorProtocol Conformance to Your Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>IteratorProtocol準拠をあなたの型に加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding New Lazy Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい遅延演算を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding and Removing Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の追加と削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Additional Considerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加の考慮すべきこと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds an element to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素をコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the contents of the given buffer to this hasher, mixing it into the hasher state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたバッファの内容をこのハーシャーに加えます、それをハーシャー状態へと混ぜ入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the elements of a sequence or collection to the end of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスまたコレクションに属するいくつかの要素をこのコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the elements of the given set to the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた集合の要素をこの集合に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the given element to the option set if it is not already a member.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素を、それがすでにメンバでないならばオプションセットに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the given value to this hasher, mixing its essential parts into the hasher state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこのハーシャーに加えます、それの本質的部分それらをハーシャー状態に混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the product of the two given values to this value in place, computed without intermediate rounding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積をこの値にその場で加えます、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and produces their sum, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算してそれらの合計を生成します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and produces their sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算してそれらの合計を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して、結果を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を加算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adopt and interoperate with Cocoa design patterns in your Swift apps.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CocoaデザインパターンをあなたのSwiftアプリにおいて採用および相互運用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adopting this protocol in your custom types lets you perform set-related operations such as membership tests, unions, and intersections on those types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型をあなたのあつらえの型において採用することは、あなたにセット関連演算を行わせます、例えば、それらの型上での帰属テスト、合併、そして交叉など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advanced Collection Topics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先進のコレクション話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advanced Numerics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先進の数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advances to the next byte and returns it, or &lt;c0&gt;nil&lt;/c0&gt; if no next byte exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次のバイトへ進んでそれを返します、または次のバイトが存在しないならば&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Advances to the next element and returns it, or &lt;c0&gt;nil&lt;/c0&gt; if no next element exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素へ進んでそれを返します、または次の要素が存在しないならば&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After You Finish</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがやり終えたあと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After a call to &lt;c1&gt;initialize(repeating:)&lt;/c1&gt;, the entire region of memory referenced by this buffer is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;initialize(repeating:)&lt;/c1&gt;の呼び出しの後、このバッファによって参照されるメモリの全領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After a call to &lt;c1&gt;initialize(repeating:&lt;w2&gt;count:)&lt;/w2&gt;&lt;/c1&gt;, the memory referenced by this pointer is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;initialize(repeating:&lt;w2&gt;count:)&lt;/w2&gt;&lt;/c1&gt;の呼び出しの後、このポインタによって参照されるメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After a call to &lt;c1&gt;initialize(to:)&lt;/c1&gt;, the memory referenced by this pointer is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;initialize(to:)&lt;/c1&gt;の呼び出しの後、このポインタによって参照されるメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After adding &lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance by implementing the &lt;c4&gt;debug&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt; property, &lt;c6&gt;Point&lt;/c6&gt; provides its own custom debugging representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠を&lt;c4&gt;debug&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;プロパティを実装することによって追加後は、&lt;c6&gt;Point&lt;/c6&gt;はそれ独自のあつらえのデバッグ表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After adding &lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance by implementing the &lt;c3&gt;description&lt;/c3&gt; property, &lt;c4&gt;Point&lt;/c4&gt; provides its own custom representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠を&lt;c3&gt;description&lt;/c3&gt;プロパティの実装によって加えた後、&lt;c4&gt;Point&lt;/c4&gt;はそれ独自のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After applying the macro, the name you use in your Swift code will be what you've chosen by using the macro.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このマクロを適用後、あなたのSwiftコードにおいてあなたが使う名前は、あなたがマクロを使うことにで選択したものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;capacity:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, the first four bytes of the memory referenced by &lt;c3&gt;bytes&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/c3&gt; are bound to the &lt;c5&gt;Int8&lt;/c5&gt; type, though they remain uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;capacity:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を呼んだ後、&lt;c3&gt;bytes&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/c3&gt;によって参照されるメモリの最初の４バイトは&lt;c5&gt;Int8&lt;/c5&gt;型に束縛されます、もっともそれらは未初期化のままであるけれども。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c0&gt;copy&lt;w1&gt;Bytes(from:)&lt;/w1&gt;&lt;/c0&gt;, the &lt;c2&gt;source&lt;w3&gt;.count&lt;/w3&gt;&lt;/c2&gt; bytes of memory referenced by this buffer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;copy&lt;w1&gt;Bytes(from:)&lt;/w1&gt;&lt;/c0&gt;を呼び出した後、このバッファによって参照されるメモリの&lt;c2&gt;source&lt;w3&gt;.count&lt;/w3&gt;&lt;/c2&gt;バイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c0&gt;copy&lt;w1&gt;Memory(from:)&lt;/w1&gt;&lt;/c0&gt;, the first &lt;c2&gt;source&lt;w3&gt;.count&lt;/w3&gt;&lt;/c2&gt; bytes of memory referenced by this buffer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;copy&lt;w1&gt;Memory(from:)&lt;/w1&gt;&lt;/c0&gt;を呼び出した後、このバッファによって参照されるメモリの最初の&lt;c2&gt;source&lt;w3&gt;.count&lt;/w3&gt;&lt;/c2&gt;バイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c0&gt;copy&lt;w1&gt;Memory(from:&lt;w2&gt;byte&lt;w3&gt;Count:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, the &lt;c4&gt;byte&lt;w5&gt;Count&lt;/w5&gt;&lt;/c4&gt; bytes of memory referenced by this pointer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;copy&lt;w1&gt;Memory(from:&lt;w2&gt;byte&lt;w3&gt;Count:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を呼び出した後、このポインタによって参照されるメモリの&lt;c4&gt;byte&lt;w5&gt;Count&lt;/w5&gt;&lt;/c4&gt;バイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c0&gt;move()&lt;/c0&gt;, the memory is uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;move()&lt;/c0&gt;の呼び出しの後、メモリは初期化されない状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c0&gt;store&lt;w1&gt;Bytes(of:&lt;w2&gt;to&lt;w3&gt;Byte&lt;w4&gt;Offset:&lt;w5&gt;as:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, the memory is initialized to the raw bytes of &lt;c6&gt;value&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;store&lt;w1&gt;Bytes(of:&lt;w2&gt;to&lt;w3&gt;Byte&lt;w4&gt;Offset:&lt;w5&gt;as:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を呼び出した後、メモリは&lt;c6&gt;value&lt;/c6&gt;の生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c2&gt;deinitialize(count:)&lt;/c2&gt;, the memory is uninitialized, but still bound to the &lt;c3&gt;Pointee&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;deinitialize(count:)&lt;/c2&gt;の呼び出しの後、メモリは初期化されない状態です、しかし依然として&lt;c3&gt;Pointee&lt;/c3&gt;への境界です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c3&gt;assign(from:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/c3&gt;, the region is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;assign(from:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/c3&gt;の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c3&gt;assign(repeating:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/c3&gt;, the region is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;assign(repeating:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/c3&gt;の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c3&gt;initialize(from:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/c3&gt;, the region is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;initialize(from:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/c3&gt;の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c3&gt;initialize&lt;w4&gt;Memory(as:&lt;w5&gt;from:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;, the memory referenced by the returned &lt;c6&gt;Unsafe&lt;w7&gt;Mutable&lt;w8&gt;Buffer&lt;w9&gt;Pointer&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; instance is bound and initialized to type &lt;c10&gt;S&lt;w11&gt;.Element&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;initialize&lt;w4&gt;Memory(as:&lt;w5&gt;from:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;呼び出しの後、&lt;c6&gt;Unsafe&lt;w7&gt;Mutable&lt;w8&gt;Buffer&lt;w9&gt;Pointer&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;インスタンスによって参照されるメモリは、型&lt;c10&gt;S&lt;w11&gt;.Element&lt;/w11&gt;&lt;/c10&gt;に束縛され初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c3&gt;move&lt;w4&gt;Assign(from:&lt;w5&gt;count:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;, the region is initialized and the memory region &lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt; is uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;move&lt;w4&gt;Assign(from:&lt;w5&gt;count:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の呼び出し後、この領域は初期化されます、そしてメモリ領域&lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt;は未初期化状態にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling &lt;c3&gt;move&lt;w4&gt;Initialize(from:&lt;w5&gt;count:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;, the region is initialized and the memory region &lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt; is uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;move&lt;w4&gt;Initialize(from:&lt;w5&gt;count:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の呼び出し後、この領域は初期化されます、そしてメモリ領域&lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt;は未初期化状態にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method on a raw buffer with non-nil &lt;c0&gt;base&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt; &lt;c2&gt;b&lt;/c2&gt;, the region starting at &lt;c3&gt;b&lt;/c3&gt; and continuing up to &lt;c4&gt;b + self&lt;w5&gt;.count - self&lt;w6&gt;.count % Memory&lt;w7&gt;Layout&lt;T&gt;.stride&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is bound to type &lt;c8&gt;T&lt;/c8&gt; and initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを生のバッファ上で非nilの&lt;c0&gt;base&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt; &lt;c2&gt;b&lt;/c2&gt;を使って呼び出した後、&lt;c3&gt;b&lt;/c3&gt;で始まって&lt;c4&gt;b + self&lt;w5&gt;.count - self&lt;w6&gt;.count % Memory&lt;w7&gt;Layout&lt;T&gt;.stride&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;まで続く領域は、型&lt;c8&gt;T&lt;/c8&gt;に束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method on a raw pointer &lt;c0&gt;p&lt;/c0&gt;, the region starting at &lt;c1&gt;p&lt;/c1&gt; and continuing up to &lt;c2&gt;p + count * Memory&lt;w3&gt;Layout&lt;T&gt;.stride&lt;/w3&gt;&lt;/c2&gt; is bound to type &lt;c4&gt;T&lt;/c4&gt; and initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを生のポインタ&lt;c0&gt;p&lt;/c0&gt;上で呼び出した後、&lt;c1&gt;p&lt;/c1&gt;で始まって&lt;c2&gt;p + count * Memory&lt;w3&gt;Layout&lt;T&gt;.stride&lt;/w3&gt;&lt;/c2&gt;まで続く領域は、型&lt;c4&gt;T&lt;/c4&gt;に束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After calling this method on a raw pointer &lt;c0&gt;p&lt;/c0&gt;, the region starting at &lt;c1&gt;self&lt;/c1&gt; and continuing up to &lt;c2&gt;p + count * Memory&lt;w3&gt;Layout&lt;T&gt;.stride&lt;/w3&gt;&lt;/c2&gt; is bound to type &lt;c4&gt;T&lt;/c4&gt; and initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを生のポインタ&lt;c0&gt;p&lt;/c0&gt;上で呼び出した後、&lt;c1&gt;self&lt;/c1&gt;で始まって&lt;c2&gt;p + count * Memory&lt;w3&gt;Layout&lt;T&gt;.stride&lt;/w3&gt;&lt;/c2&gt;まで続く領域は、型&lt;c4&gt;T&lt;/c4&gt;に束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After executing &lt;c0&gt;body&lt;/c0&gt;, this method rebinds memory back to the original &lt;c1&gt;Element&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;の実行の後、このメソッドはメモリを元々の&lt;c1&gt;Element&lt;/c1&gt;型に再束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After executing &lt;c0&gt;body&lt;/c0&gt;, this method rebinds memory back to the original &lt;c1&gt;Pointee&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;実行の後、このメソッドは、オリジナルの&lt;c1&gt;Pointee&lt;/c1&gt;型へとメモリを再束縛し戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After partitioning a collection, there is a pivot index &lt;c0&gt;p&lt;/c0&gt; where no element before &lt;c1&gt;p&lt;/c1&gt; satisfies the &lt;c2&gt;belongs&lt;w3&gt;In&lt;w4&gt;Second&lt;w5&gt;Partition&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; predicate and every element at or after &lt;c6&gt;p&lt;/c6&gt; satisfies &lt;c7&gt;belongs&lt;w8&gt;In&lt;w9&gt;Second&lt;w10&gt;Partition&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを仕切った後、あるピボットインデックス&lt;c0&gt;p&lt;/c0&gt;があります、そこで&lt;c1&gt;p&lt;/c1&gt;の前の要素は１つも&lt;c2&gt;belongs&lt;w3&gt;In&lt;w4&gt;Second&lt;w5&gt;Partition&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;述部を満たさず、そして&lt;c6&gt;p&lt;/c6&gt;でのまたは後のあらゆる要素は&lt;c7&gt;belongs&lt;w8&gt;In&lt;w9&gt;Second&lt;w10&gt;Partition&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After rebasing &lt;c0&gt;slice&lt;/c0&gt; as the &lt;c1&gt;rebased&lt;/c1&gt; buffer, the following are true:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;slice&lt;/c0&gt;を&lt;c1&gt;rebased&lt;/c1&gt;バッファとして再構築した後、以下のことが当てはまります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After rebinding the memory referenced by &lt;c0&gt;uint8Pointer&lt;/c0&gt; to &lt;c1&gt;UInt64&lt;/c1&gt;, accessing that pointer’s referenced memory as a &lt;c2&gt;UInt8&lt;/c2&gt; instance is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;uint8Pointer&lt;/c0&gt;によって参照されるメモリを&lt;c1&gt;UInt64&lt;/c1&gt;に再束縛する後、そのポインタの参照したメモリに&lt;c2&gt;UInt8&lt;/c2&gt;インスタンスとしてアクセスすることは未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After some time of inactivity, the user’s session may expire, leaving the app in a &lt;e2&gt;session expired&lt;/e2&gt; state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しばらく活動がない後に、ユーザのセッションは期限切れになるかもしれません、アプリを&lt;e2&gt;期限切れセッション&lt;/e2&gt;の状態のままにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the &lt;c0&gt;Cake&lt;/c0&gt; structure has been imported, you can use the default initializer to create an instance and use it as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Cake&lt;/c0&gt;構造体がインポートされた後、あなたは省略時のイニシャライザを使うことでインスタンスを作成してそれを以下のように使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the call, the memory referenced by this buffer up to, but not including, the returned index is initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この呼び出しの後、返されるインデックスまでの、しかしそれを含んでいない、このバッファによって参照されるメモリは、初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the user has registered or logged into an account, the state is &lt;e1&gt;logged in&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユーザがアカウントに登録またはログインした後は、状態は&lt;e1&gt;ログイン済み&lt;/e1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After this code has executed, the following are true:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコードが実行された後、以下は真です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After using &lt;c0&gt;first&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt; to find the position of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt;を使って特定の要素の位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After using &lt;c0&gt;last&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt; to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;last&lt;w1&gt;Index(of:)&lt;/w1&gt;&lt;/c0&gt;を使って特定の要素の最後のインスタンスの位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After you import an Objective-C framework, a C library, or a header file, you can work with Objective-C classes and protocols, as well as common C constructs, functions, and patterns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがObjective-Cフレームワーク、Cライブラリ、またはあるヘッダファイルをインポートした後、あなたはObjective-Cのクラスとプロトコル、それだけでなく一般的なC構造体、関数、そしてパターンを扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Algebraic Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代数的集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Aliases for Imported C Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC型に対するエイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All 100 bytes of memory must eventually be deallocated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリの100バイトすべては、そのうち割り当てられなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All Objective-C generic type parameters imported by Swift have a type constraint that requires that type to be a class (&lt;c0&gt;T: Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトによってインポートされる全てのObjective-C総称体型パラメータは、ある型制約を持ちます、それはあるクラス（&lt;c0&gt;T: Any&lt;w1&gt;Object&lt;/w1&gt;&lt;/c0&gt;）であることをその型に要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All elements satisfying this predicate are ordered after all elements not satisfying it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この述部を満たす全ての要素は、それを満たさない全ての要素の後に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All indirectly returned Core Foundation objects are unmanaged as well.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての間接的に返されたコアファウンデーション・オブジェクトは、同様に管理されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All other object instances are annotated as &lt;c4&gt;nonnull&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての他のオブジェクトインスタンスは、&lt;c4&gt;nonnull&lt;/c4&gt;であると注釈を付けられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the elements following &lt;c0&gt;i&lt;/c0&gt; are moved to close the gap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the elements following the specified position are moved to close the gap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the keys the &lt;c0&gt;Decoder&lt;/c0&gt; has for this container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Decoder&lt;/c0&gt;がこのコンテナに対して持っている全てのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the keys the decoder has for this container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーダがこのコンテナに対して持っている全てのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All values other than NaN and infinity are considered finite, whether normal or subnormal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNと無限大の他の全ての値は、ノーマルまたはサブノーマルかにかかわらず、有限と見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocate and manage memory manually.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリを手動でアロケートして管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocates uninitialized memory for the specified number of instances of type &lt;c0&gt;Element&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の型&lt;c0&gt;Element&lt;/c0&gt;のインスタンスに対して未初期化メモリを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocates uninitialized memory for the specified number of instances of type &lt;c0&gt;Pointee&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;Pointee&lt;/c0&gt;の指定された数のインスタンスに対して初期化されないメモリをアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allocates uninitialized memory with the specified size and alignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリを指定された大きさとアライメントでアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allow values of your type to be expressed using different kinds of literals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型の値に異なる種類のリテラルを使って表されることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allow your custom types to be used with simple collection operations, such as &lt;c0&gt;contains(_:)&lt;/c0&gt;, and standard comparison operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型を、単純なコレクション演算、例えば&lt;c0&gt;contains(_:)&lt;/c0&gt;など、そして標準比較演算子とともに使われるようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows a nonescaping closure to temporarily be used as if it were allowed to escape.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非脱出クロージャに、一時的にそれが脱出することを許可されたかのように使われることを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alphabetic scalars are the primary units of alphabets and/or syllabaries.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アルファベットのスカラーは、アルファベットおよび／または音節文字の主要な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, a predicate can be satisfied by a range of &lt;c0&gt;Equatable&lt;/c0&gt; elements or a general condition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいは、述部は、&lt;c0&gt;Equatable&lt;/c0&gt;要素のある範囲またはある一般的条件によって満たされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, if your type can act as its own iterator, implementing the requirements of the &lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt; protocol and declaring conformance to both &lt;c2&gt;Sequence&lt;/c2&gt; and &lt;c3&gt;Iterator&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt; are sufficient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいはまた、あなたの型がそれ自身イテレータとして振る舞うならば、&lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;プロトコルの要件を実装することと&lt;c2&gt;Sequence&lt;/c2&gt;および&lt;c3&gt;Iterator&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/c3&gt;の両方に対する準拠を宣言することで十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, to create an option set instance with multiple members, assign an array literal with multiple static members of the option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいはまた、複数のメンバをもつ１つのオプションセットインスタンスを作成するには、オプションセットの複数の静的メンバをもつ配列リテラルを割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, use this method to sort a collection of elements that do conform to &lt;c0&gt;Comparable&lt;/c0&gt; when you want the sort to be descending instead of ascending.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうではなくて、あなたが昇順ではなく降順でソートしたい場合は、このメソッドを使って&lt;c0&gt;Comparable&lt;/c0&gt;に準拠する要素からなるコレクションをソートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can access the same memory as a different type without rebinding through untyped memory access, so long as the bound type and the destination type are trivial types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、あなたは同じメモリに異なる型として再束縛することなしにアクセスすることが型なしメモリアクセスを通して可能です、束縛される型と行き先の型が自明型である限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can convert the function that takes a &lt;c0&gt;String&lt;/c0&gt; to one that is generic over the &lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいは、あなたは&lt;c0&gt;String&lt;/c0&gt;をとる関数を&lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;プロトコルを越えて総称体であるものに変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can create a bridging header yourself by choosing File &gt; New &gt; File &gt; [&lt;e2&gt;operating system&lt;/e2&gt;] &gt; Source &gt; Header File.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいはまた、あなたはブリッジヘッダを、File &gt; New &gt; File &gt; [&lt;e2&gt;オペレーションシステム&lt;/e2&gt;] &gt; Source &gt; Header File を選択することであなた自身で作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can use Swift’s &lt;e0&gt;implicit bridging&lt;/e0&gt; to pass a pointer to an instance or to the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるいはまた、あなたはSwiftの&lt;e0&gt;暗黙的ブリッジ&lt;/e0&gt;を使ってポインタをインスタンスへまたは配列の要素へと渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although &lt;c2&gt;.express&lt;/c2&gt; is not a member of &lt;c3&gt;options&lt;/c3&gt;, &lt;c4&gt;.express&lt;/c4&gt; subsumes the remaining &lt;c5&gt;.second&lt;w6&gt;Day&lt;/w6&gt;&lt;/c5&gt; element of the option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とは言え&lt;c2&gt;.express&lt;/c2&gt;は&lt;c3&gt;options&lt;/c3&gt;のメンバではありません、しかし&lt;c4&gt;.express&lt;/c4&gt;はこのオプションセットの残りの要素&lt;c5&gt;.second&lt;w6&gt;Day&lt;/w6&gt;&lt;/c5&gt;を包含します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although Swift doesn’t support natively declared unions, a C union imported as a Swift structure still behaves like a C union.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは生得的に宣言された共用体をサポートしないにもかかわらず、Swift構造体としてインポートされたC共用体は依然としてC共用体のように振る舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although an &lt;e3&gt;actual&lt;/e3&gt; dictionary is arbitrarily-ordered, when you create a mirror with a dictionary literal, the ordering of the mirror’s &lt;c4&gt;children&lt;/c4&gt; will exactly match that of the literal you pass.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e3&gt;actual&lt;/e3&gt;辞書は気まぐれに順番付けられますが、あなたがミラーを辞書リテラルで作成する時、ミラーの持つ&lt;c4&gt;children&lt;/c4&gt;の順番付けは正確にあなたが渡すリテラルのそれと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftにおける文字列は値意味論を持ちますが、文字列はコピーオンライト戦略を使ってそれらのデータをバッファに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although the Swift overlay updates many Objective-C methods to return native Swift indices and index ranges, some still return instances of &lt;c0&gt;NSRange&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftオーバーレイが多くのObjective-Cメソッドを更新してSwift生来のインデックスおよびインデックス範囲を返すとはいえ、いくつかはまだ&lt;c0&gt;NSRange&lt;/c0&gt;インスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always remember to deallocate any memory that you allocate yourself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなた自身でアロケートするメモリは何であれデアロケートするのを必ず忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always use a multiple of a type’s &lt;c0&gt;stride&lt;/c0&gt; instead of its &lt;c1&gt;size&lt;/c1&gt; when allocating memory or accounting for the distance between instances in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリをアロケートするまたはメモリ中のインスタンス間の隔たりを計上する場合には、常にある型の持つ&lt;c0&gt;stride&lt;/c0&gt;の倍数を使ってください、それの&lt;c1&gt;size&lt;/c1&gt;ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always use the slice’s &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property instead of assuming that its indices start at a particular value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にスライスの&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always zero, which is the index of the first byte in a nonempty buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常にゼロ、それはある「空でない」バッファにおける最初のバイトのインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An 8-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An 8-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;Type&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;Type&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、メモリに対するあるビューであり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Type&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Type&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;UInt8&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance allocated with eight bytes of memory, &lt;c3&gt;uint8Pointer&lt;/c3&gt;, will be used for the examples below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8バイトのメモリデアロケートされる&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;UInt8&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンス、&lt;c3&gt;uint8Pointer&lt;/c3&gt;は、下の例で使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is a view of the raw bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、メモリのある領域の中の生のバイトのある見方（ビュー）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;Type&gt;&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;Type&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;, or &lt;c5&gt;Autoreleasing&lt;w6&gt;Unsafe&lt;w7&gt;Mutable&lt;w8&gt;Pointer&lt;Type&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; value, which is implicitly cast to &lt;c9&gt;Unsafe&lt;w10&gt;Pointer&lt;Type&gt;&lt;/w10&gt;&lt;/c9&gt; as necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;Type&gt;&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;Type&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;、または&lt;c5&gt;Autoreleasing&lt;w6&gt;Unsafe&lt;w7&gt;Mutable&lt;w8&gt;Pointer&lt;Type&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;値、それは暗黙的に&lt;c9&gt;Unsafe&lt;w10&gt;Pointer&lt;Type&gt;&lt;/w10&gt;&lt;/c9&gt;へと必要に応じてキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;UInt8&gt;&lt;/w1&gt;&lt;/c0&gt; instance allocated with eight bytes of memory, &lt;c2&gt;uint8Pointer&lt;/c2&gt;, will be used for the examples below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>8バイトのメモリデアロケートされる&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;UInt8&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンス、&lt;c2&gt;uint8Pointer&lt;/c2&gt;は、下の例で使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is a view of the raw bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、メモリのある領域の中の生のバイトのある見方（ビュー）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c7&gt;append&lt;w8&gt;Interpolation&lt;/w8&gt;&lt;/c7&gt; method can also throw; when a user writes a literal with one of these interpolations, they must mark the string literal with &lt;c9&gt;try&lt;/c9&gt; or one of its variants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c7&gt;append&lt;w8&gt;Interpolation&lt;/w8&gt;&lt;/c7&gt;メソッドはまたスローできます；ユーザがあるリテラルをそれら補間の１つで書く場合、それらはその文字列リテラルを&lt;c9&gt;try&lt;/c9&gt;またはそれの変種の１つで印しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An Objective-C protocol-qualified metaclass is imported by Swift as a protocol metatype, which is a type that represents the type of a protocol itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cプロトコル適格メタクラスは、Swiftによってプロトコルメタタイプとしてインポートされます、それはプロトコルそれ自体の型を表す型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An all-zeros exponent is reserved for subnormals and zeros, and an all-ones exponent is reserved for infinity and NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てゼロの指数は非正規化数とゼロのために予約されます、そして全て１の指数は無限大とNaNのために予約されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を逆順に含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array containing the transformed elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの変換済み要素を含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of subsequences, split from this collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of subsequences, split from this sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of the elements that &lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt; allowed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Included&lt;/w1&gt;&lt;/c0&gt;が許可する要素からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of the non-&lt;c0&gt;nil&lt;/c0&gt; results of calling &lt;c1&gt;transform&lt;/c1&gt; with each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの各要素で&lt;c1&gt;transform&lt;/c1&gt;を呼ぶことの非&lt;c0&gt;nil&lt;/c0&gt;の結果の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An array of this sequence’s elements in a shuffled order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの持つ要素からなる配列、シャッフルされた順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element equal to &lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt; if the set already contained such a member; otherwise, &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合がすでにそのようなメンバを含んでいるならば、&lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt;に等しい要素；そうでなければ、&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element of a slice is located under the same index in the slice and in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスの要素は、スライスにおいてそして基盤コレクションにおいて同じインデックス下に位置します、コレクションもスライスもスライスが作成されてから変化させられない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element of the reflected instance’s structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リフレクションされる（自己言及、自己参照の対象の）インスタンスの持つ構造体の中のある要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element to insert into the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合に挿入されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element to look for in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合において捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element to search for in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element to search for in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合において捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An empty &lt;c0&gt;Range&lt;/c0&gt; instance has equal lower and upper bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の&lt;c0&gt;Range&lt;/c0&gt;インスタンスは、等しい下方および上方境界を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An enclosing combining mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>囲み結合符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An encoding error was detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングエラーが検知された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An enumeration of the elements of a sequence or collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスまたはコレクションの要素の列挙。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An equivalent range must be representable as an instance of Range&lt;Bound&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等の範囲が、Range&lt;Bound&gt;のインスタンスとして表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error that occurs during the decoding of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のデコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An error that occurs during the encoding of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のエンコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An escaped textual representation of the Unicode scalar, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーのエスケープされたテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An extended-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An immutable pointer to the elements of an array is implicitly created when you pass the array as an argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列の要素への不変ポインタは、あなたが配列を引数として渡す時に暗黙的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An implementation detail of key path expressions; do not use this protocol directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式の実装詳細；このプロトコルを直接に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression of type &lt;c0&gt;Type&lt;/c0&gt; that contains a mutable variable, property, or subscript reference, which is passed as a pointer to the address of the mutable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの可変変数、プロパティ、または添え字参照を含んでいる、型&lt;c0&gt;Type&lt;/c0&gt;のin-out式、それはその可変値のアドレスに対するポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression of type &lt;c0&gt;[Type]&lt;/c0&gt; that contains a mutable variable, property, or subscript reference, which is passed as a pointer to the start of the array, and is lifetime-extended for the duration of the call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の変数、プロパティ、または添え字参照を含んでいる、型&lt;c0&gt;[Type]&lt;/c0&gt;のin-out式、それはその配列の始まりへのポインタとして渡されます、そして呼び出しの間は寿命延長されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression that contains a mutable variable, property, or subscript reference of type &lt;c0&gt;Type&lt;/c0&gt;, which is passed as a pointer to the address of the left-hand side identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;Type&lt;/c0&gt;の可変変数、プロパティ、または添え字参照を含むインアウト式、それは左手側識別子のアドレスへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An in-out expression that contains a mutable variable, property, or subscript reference of type &lt;c0&gt;Type&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;Type&lt;/c0&gt;の可変変数、プロパティ、または添え字参照を含むインアウト式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;distance&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;, unless that index would be beyond &lt;c2&gt;limit&lt;/c2&gt; in the direction of movement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;だけインデックス&lt;c1&gt;i&lt;/c1&gt;から補われたインデックス、そのインデックスが&lt;c2&gt;limit&lt;/c2&gt;を移動方向において越える場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;distance&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;だけインデックス&lt;c1&gt;i&lt;/c1&gt;から補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;n&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;, unless that index would be beyond &lt;c2&gt;limit&lt;/c2&gt; in the direction of movement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス&lt;c1&gt;i&lt;/c1&gt;から&lt;c0&gt;n&lt;/c0&gt;だけ補われたインデックス、そのインデックスが&lt;c2&gt;limit&lt;/c2&gt;を移動方向において越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index offset by &lt;c0&gt;n&lt;/c0&gt; from the index &lt;c1&gt;i&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス&lt;c1&gt;i&lt;/c1&gt;から&lt;c0&gt;n&lt;/c0&gt;だけ補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An index that traverses the same positions as an underlying index, with inverted traversal direction.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある基礎をなすインデックスが指すのと同じ幾つかの位置を、逆の走査順で辿っていくインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication of a decoding error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードエラーのしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An indication that no more Unicode scalars are available in the input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この入力の中にこれ以上利用可能なユニコードスカラーがないしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An initial quotation mark.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引用符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance of a class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクラスのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance representing the state of the receiver with the difference applied, or &lt;c0&gt;nil&lt;/c0&gt; if the difference is incompatible with the receiver’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適用された差異をもつレシーバの状態を表しているインスタンス、または&lt;c0&gt;nil&lt;/c0&gt;、もし差異がレシーバのもつ状態と相容れないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An instance that is expressed as a literal can also be used with this operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラルとして表されるインスタンスはまた、この演算子とともに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer to convert to this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型へと変換する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正および負の値の両方を表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that can represent only nonnegative values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非負値だけを表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type that uses a fixed size for every instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆるインスタンスに対して固定された大きさを使う整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer type with a binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ表現での整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer value converts to an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数値は、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;w3&gt;.Value&lt;w4&gt;Type&lt;w5&gt;.int&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An interval from a lower bound up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から、上側の境界までの、そしてそれを含む、間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for &lt;c0&gt;Zip2Sequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Zip2Sequence&lt;/c0&gt;のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for a &lt;c0&gt;Stride&lt;w1&gt;Through&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Stride&lt;w1&gt;Through&lt;/w1&gt;&lt;/c0&gt;インスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for a &lt;c0&gt;Stride&lt;w1&gt;To&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Stride&lt;w1&gt;To&lt;/w1&gt;&lt;/c0&gt;インスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator for the elements in the buffer referenced by an &lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c3&gt;Unsafe&lt;w4&gt;Mutable&lt;w5&gt;Buffer&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c3&gt;Unsafe&lt;w4&gt;Mutable&lt;w5&gt;Buffer&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;によって参照されるバッファの中の要素のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator of code units to be decoded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードされることになるいくらかのコード単位のイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator of code units to be translated, encoded as &lt;c0&gt;source&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>翻訳されることになるいくらかのコード単位からなるあるイテレータ、&lt;c0&gt;source&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;としてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the bytes viewed by a raw buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある生のバッファポインタによるビューでのバイトすべてに対するイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the elements of this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの要素すべてを対象としたイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the elements traversed by a base iterator that follow the initial consecutive elements that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある基盤イテレータによって辿られる要素で、与えられた述部を満足させる最初の連続した要素に続くものすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the elements traversed by some base iterator that also satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの基盤イテレータによって辿られるいくらかの要素でさらにまた与えられた述部を満足させるものを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the initial elements traversed by a base iterator that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある基盤イテレータによって辿られるもので、与えられた述部を満足させる最初の要素らを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator over the members of a &lt;c0&gt;Set&lt;Element&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;Element&gt;&lt;/c0&gt;のメンバーすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator that presents the elements of the sequences traversed by a base iterator, concatenated using a given separator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるイテレータ、それは基盤イテレータによって辿っていかれるいくらかのシーケンスに属する要素らを、与えられた分離子を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator to any elements of &lt;c0&gt;source&lt;/c0&gt; that didn’t fit in the buffer, and a typed buffer of the written elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファに収まらない&lt;c0&gt;source&lt;/c0&gt;の何らかの要素に対するイテレータ、そして書き出される要素の型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An iterator to any elements of &lt;c0&gt;source&lt;/c0&gt; that didn’t fit in the buffer, and an index to the point in the buffer one past the last element written.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;の何らかの要素で、バッファの中にぴったり合わないものに対するイテレータ、そして書かれた最後の要素を１つすぎたバッファの中の地点に対するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An object representing a dynamic, unordered, uniquing collection, for use instead of a &lt;a0&gt;&lt;c1&gt;Set&lt;/c1&gt;&lt;/a0&gt; variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的な、順序なしの、特有なコレクションを表しているオブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;Set&lt;/c1&gt;&lt;/a0&gt;変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An object representing a static, unordered, uniquing collection, for use instead of a &lt;a0&gt;&lt;c1&gt;Set&lt;/c1&gt;&lt;/a0&gt; constant in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的な、順序なしの、特有なコレクションを表しているオブジェクト、参照意味論を必要とする場合に&lt;a0&gt;&lt;c1&gt;Set&lt;/c1&gt;&lt;/a0&gt;定数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An offset in UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16コード単位におけるあるオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An offset in code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コード単位でのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An opaque pointer to the value of this unmanaged reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この管理されない参照の値への不透明ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An opening punctuation mark of a pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある対のある開き句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An optional value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較することになるオプショナル値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An ordered, random-access collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順序付けられた、無作為アクセスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An overshift results in &lt;c3&gt;-1&lt;/c3&gt; for a negative value of &lt;c4&gt;lhs&lt;/c4&gt; or &lt;c5&gt;0&lt;/c5&gt; for a nonnegative value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーシフトは、負の値の&lt;c3&gt;lhs&lt;/c3&gt;に対して&lt;c4&gt;-1&lt;/c4&gt;または非負値に対して&lt;c5&gt;0&lt;/c5&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unkeyed decoding container view into &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;へのキー無しデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unmanaged class reference to &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;への管理されないクラス参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unmanaged reference to the object passed as &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;として渡されるオブジェクトへの管理されない参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unordered collection of unique elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順番付けられない特有な要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsigned 64-bit random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし64ビット無作為値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsigned integer value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unsigned, fixed-width integer type can represent values from 0 through &lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なしの、固定長整数型は、０から&lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;までの値を表せます、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An unspecified result is supplied automatically by the Swift standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未指定の結果はSwift標準ライブラリによって自動的に提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An uppercase copy of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の大文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An uppercase letter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>大文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And here’s how Swift imports it:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そしてここにスウィフトがそれをインポートする方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Annotate Nullability of Individual Declarations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々の宣言のヌル可能性に注釈を付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Annotate Regions as Nonnullable</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域に非ヌル可能性として注釈を付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Annotate property declarations, parameter types, and return types that are simple objects or block pointers using the &lt;c0&gt;nullable&lt;/c0&gt;, &lt;c1&gt;nonnull&lt;/c1&gt;, and &lt;c2&gt;null&lt;w3&gt;_resettable&lt;/w3&gt;&lt;/c2&gt; property attributes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロパティ宣言、パラメータ型、そして戻り値で、&lt;c0&gt;nullable&lt;/c0&gt;、&lt;c1&gt;nonnull&lt;/c1&gt;、そして&lt;c2&gt;null&lt;w3&gt;_resettable&lt;/w3&gt;&lt;/c2&gt;プロパティ属性を使っている単純なオブジェクトまたはブロックパラメータであるものに注釈を付けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう１つの浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another integer to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較するもう一方の整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう１つの整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another optional value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較するオプショナル値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another range to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較する範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another valid index of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの別の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another value to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もう一方の比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any &lt;c0&gt;String&lt;/c0&gt; instance can be bridged to &lt;c1&gt;NSString&lt;/c1&gt; using the type-cast operator (&lt;c2&gt;as&lt;/c2&gt;), and any &lt;c3&gt;String&lt;/c3&gt; instance that originates in Objective-C may use an &lt;c4&gt;NSString&lt;/c4&gt; instance as its storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの&lt;c0&gt;String&lt;/c0&gt;インスタンスは、&lt;c1&gt;NSString&lt;/c1&gt;へブリッジされることが型キャスト演算子（&lt;c2&gt;as&lt;/c2&gt;）を使って行えます、そして何らかの&lt;c3&gt;String&lt;/c3&gt;インスタンスでObjective-C起源のものは&lt;c4&gt;NSString&lt;/c4&gt;インスタンスをそれのストレージとして使っても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of &lt;c0&gt;value&lt;/c0&gt; is removed, rounding the resulting value toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の小数部分は何であれ取り除かれます、結果となる値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of the value passed as &lt;c0&gt;source&lt;/c0&gt; is removed, rounding the value toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡される値の小数部分は何であれ取り除かれます、値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any fractional part of the value passed as &lt;c0&gt;source&lt;/c0&gt; is removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡される値の小数部分は何であれ取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any memory in the region &lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt; that does not overlap with the destination region is returned to an uninitialized state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt;の中の何らかのメモリで行き先の領域と重ならないものは、未初期化状態に戻されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any public Objective-C headers listed in the bridging header are visible to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジヘッダにおいて列記されるあらゆるパブリックObjective-Cヘッダは、Swiftにとって見ることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any remaining mirror path components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる残りのミラーパス構成要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any value whose magnitude is so great that it would round to a value outside the range of representable numbers is rounded to &lt;e0&gt;infinity&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの規模が大きすぎるので表現可能な数の範囲外の値に丸められるであろう何らかの値は、&lt;e0&gt;無限大&lt;/e0&gt;に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appending Strings and Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列と文字を追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appending the key path passed as &lt;c0&gt;path&lt;/c0&gt; is successful only if the root type for &lt;c1&gt;path&lt;/c1&gt; matches this key path’s value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;path&lt;/c0&gt;として渡されるキーパスの追加は、&lt;c1&gt;path&lt;/c1&gt;のルート型がこのキーパスの持つ値型と合致する場合にのみ成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends a literal segment to the interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるリテラル文節をその補間に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the Unicode scalar values in the given sequence to the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中のユニコードスカラー値をビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the characters in the given sequence to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中の文字を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the elements of a sequence to a range-replaceable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を範囲置換コレクションに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given Unicode scalar to the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーをビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given character to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字を文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given string to the stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列をストリームへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appends the given string to this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列をこの文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apple platforms use &lt;c0&gt;arc4random&lt;w1&gt;_buf(3)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Appleプラットホームは、&lt;c0&gt;arc4random&lt;w1&gt;_buf(3)&lt;/w1&gt;&lt;/c0&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applications that store identifiers in NFKC normalized form should instead use &lt;c0&gt;is&lt;w1&gt;XIDContinue&lt;/w1&gt;&lt;/c0&gt; to check whether a scalar is a valid identifier character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NFKC正規化形式で識別子を格納するアプリケーションは、代わりに&lt;c0&gt;is&lt;w1&gt;XIDContinue&lt;/w1&gt;&lt;/c0&gt;を使って、あるスカラーが有効な識別子文字であるかどうかを調べるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applications that store identifiers in NFKC normalized form should instead use &lt;c0&gt;is&lt;w1&gt;XIDStart&lt;/w1&gt;&lt;/c0&gt; to check whether a scalar is a valid identifier character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NFKC正規化形式で識別子を格納するアプリケーションは、代わりに&lt;c0&gt;is&lt;w1&gt;XIDStart&lt;/w1&gt;&lt;/c0&gt;を使って、あるスカラーが有効な識別子文字であるかどうかを調べるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applies the given difference to this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた差異をこのコレクションに適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apply CF_SWIFT_NAME to Related Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CF_SWIFT_NAMEを関連した関数に適用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apply macros to your Objective-C APIs to customize how they're imported into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マクロをあなたのObjective-C APIに適用して、それらがSwiftにインポートされる方法をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying the &lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro exposes the existing Objective-C API for reuse in your refined API.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを適用することは、既存のObjective-C APIを、あなたの改良されたAPIにおいて再利用するために公開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding?</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが画面上に表示される文字の数を数えているのか、またはあなたはある特定の符号化での文字列に必要とされるストレージの量を測っているのか？。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arithmetic with Assignment</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代入での算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Arrays and Dictionaries</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As You Work</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが作業するとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a consequence, don’t assume that multiple &lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt; loops on a sequence will either resume iteration or restart from the beginning:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、あるシーケンス上での複数の&lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt;ループが反復を途中から再開するかまたは初めから再度着手するか、どちらかを決めてかからないでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, changing the value of a property on an instance of the imported structure changes the value of all other properties defined by that structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、インポートされた構造体上でプロパティを変更することは、その構造体によって定義される全ての他のプロパティの値を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、ある文字列の異なる表現は等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, each view of the string &lt;c2&gt;"🇵🇷"&lt;/c2&gt; reports a different length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、文字列&lt;c2&gt;"🇵🇷"&lt;/c2&gt;の各ビューは異なる長さを報告します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, you can chain multiple &lt;c2&gt;??&lt;/c2&gt; operators together.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として、あなたは複数の&lt;c2&gt;??&lt;/c2&gt;を一緒に鎖状につなげることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, consider a &lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; type that describes a location in a grid of buttons.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの例として、&lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;型を考えてみてください、それはある格子状配列のボタンにおけるある場所を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, here’s an implementation of an output stream that converts any input to its plain ASCII representation before sending it to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一例として、ここに出力ストリームの実装があります、それは何らかの入力を標準出力に送る前にそれの標準ASCII表現に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの例として、あるシーケンスが特定の値を含むかどうか確認するために、あなたは各値を順次テストすることが、あなたが一致するものを見つけるかそのシーケンスの終わりに達するまで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; function with an &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたは&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;関数を&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; function with an &lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたは&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;関数を&lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the &lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function with an &lt;c3&gt;Unsafe&lt;w4&gt;Mutable&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたは&lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を&lt;c3&gt;Unsafe&lt;w4&gt;Mutable&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;インスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As is typical in Swift, you can call the &lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function with an &lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは普通であるように、あなたは&lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を&lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/c3&gt;インスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As of Unicode 6.3, any new scalars that represent numbers but do not meet the requirements of &lt;c0&gt;decimal&lt;/c0&gt; will have numeric type &lt;c1&gt;numeric&lt;/c1&gt;, and programs can treat &lt;c2&gt;digit&lt;/c2&gt; and &lt;c3&gt;numeric&lt;/c3&gt; equivalently.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Unicode 6.3現在、数を表すしかし&lt;c0&gt;decimal&lt;/c0&gt;の要件を満たさないいくらかの新しいスカラーが数値型&lt;c1&gt;numeric&lt;/c1&gt;を持ちます、そしてプログラムは&lt;c2&gt;digit&lt;/c2&gt;と&lt;c3&gt;numeric&lt;/c3&gt;を等価に扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As soon as the sequence has run out of elements, all subsequent calls return &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を使い果たすやいなや、全てのその後の呼び出しは&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As such, it should be possible to re-create an instance from its string representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それなので、それはそれの文字列表現からインスタンスの再度作成が可能であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with any basic operation, if this value is outside the representable range of the type, overflow or underflow occurs, and zero, a subnormal value, or infinity may result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる基本的演算でのように、この値がその型の表現可能な範囲の外側ならば、オーバーフローまたはアンダーフローが起こります、そしてゼロ、サブノーマル値、または無限大が結果となるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As you work with Objective-C APIs, you’ll need to know how Swift translates certain Objective-C language features.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがObjective-C APIを扱うとき、あなたはスウィフトがどのように特定のObjective-C言語機能を翻訳するか知っている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assigning into a ranged subscript of an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance copies bytes into the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスの範囲指定された添え字に対してアサインすることは、それらバイトをメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assigning to part of the buffer must be done using the &lt;c0&gt;assign(repeating:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt; method on the buffer’s &lt;c2&gt;base&lt;w3&gt;Address&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの一部に対するアサインは、&lt;c0&gt;assign(repeating:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt;メソッドをバッファのもつ&lt;c2&gt;base&lt;w3&gt;Address&lt;/w3&gt;&lt;/c2&gt;上で使って終わっていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assigns every element in this buffer’s memory to a copy of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリの中の全ての要素をこの与えられた値のあるコピーに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Associated Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな関連型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Associativity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結合性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assume that &lt;c2&gt;S&lt;/c2&gt; is a custom type that conforms to the &lt;c3&gt;Set&lt;w4&gt;Algebra&lt;/w4&gt;&lt;/c3&gt; protocol, &lt;c5&gt;x&lt;/c5&gt; and &lt;c6&gt;y&lt;/c6&gt; are instances of &lt;c7&gt;S&lt;/c7&gt;, and &lt;c8&gt;e&lt;/c8&gt; is of type &lt;c9&gt;S&lt;w10&gt;.Element&lt;/w10&gt;&lt;/c9&gt;—the type that the set holds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;S&lt;/c2&gt;は&lt;c3&gt;Set&lt;w4&gt;Algebra&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠するあつらえの型、&lt;c5&gt;x&lt;/c5&gt;と&lt;c6&gt;y&lt;/c6&gt;は&lt;c7&gt;S&lt;/c7&gt;のインスタンス、そして&lt;c8&gt;e&lt;/c8&gt;は型&lt;c9&gt;S&lt;w10&gt;.Element&lt;/w10&gt;&lt;/c9&gt; — 集合が保持する型、と仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At least one of the sequences must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>少なくともシーケンスのうちの一方は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素にスライスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある要素にスライスのもつインデックスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to call the &lt;c0&gt;collection&lt;w1&gt;With&lt;w2&gt;Values:&lt;w3&gt;for&lt;w4&gt;Keys:&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method in Swift results in a compiler error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;collection&lt;w1&gt;With&lt;w2&gt;Values:&lt;w3&gt;for&lt;w4&gt;Keys:&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドをスウィフトにおいて呼び出す試みは、コンパイラエラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to remove more elements than exist in the collection triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中に存在するより多くの要素の削除を試みることは実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attempting to remove the same shipping option a second time results in &lt;c2&gt;nil&lt;/c2&gt;, because &lt;c3&gt;options&lt;/c3&gt; no longer contains &lt;c4&gt;.priority&lt;/c4&gt; as a member.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じ出荷オプションの削除を２回目に試みることは&lt;c2&gt;nil&lt;/c2&gt;という結果になります、&lt;c3&gt;options&lt;/c3&gt;はもはや&lt;c4&gt;.priority&lt;/c4&gt;をメンバとして含まないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Array&lt;w1&gt;Literal&lt;w2&gt;Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;Element&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Array&lt;w1&gt;Literal&lt;w2&gt;Element&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;Element&lt;/c3&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Base&lt;w4&gt;.Element&lt;/w4&gt;&lt;/c3&gt; conforms to &lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Base&lt;w4&gt;.Element&lt;/w4&gt;&lt;/c3&gt;が&lt;c5&gt;Bidirectional&lt;w6&gt;Collection&lt;/w6&gt;&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Base&lt;w4&gt;.Index&lt;/w4&gt;&lt;/c3&gt; conforms to &lt;c5&gt;Hashable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Base&lt;w4&gt;.Index&lt;/w4&gt;&lt;/c3&gt;が&lt;c5&gt;Hashable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Range&lt;w4&gt;Replaceable&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;と&lt;c3&gt;Range&lt;w4&gt;Replaceable&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt; and &lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Collection&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠するそして&lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Collection&lt;/c4&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt; and &lt;c2&gt;Base&lt;w3&gt;.Index&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Hashable&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠するそして&lt;c2&gt;Base&lt;w3&gt;.Index&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Hashable&lt;/c4&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt;, &lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Collection&lt;/c4&gt;, &lt;c5&gt;Base&lt;w6&gt;.Index&lt;/w6&gt;&lt;/c5&gt; conforms to &lt;c7&gt;Hashable&lt;/c7&gt;, and &lt;c8&gt;Base&lt;w9&gt;.Element&lt;w10&gt;.Index&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; conforms to &lt;c11&gt;Hashable&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠する、&lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Collection&lt;/c4&gt;に準拠する、&lt;c5&gt;Base&lt;w6&gt;.Index&lt;/w6&gt;&lt;/c5&gt;が&lt;c7&gt;Hashable&lt;/c7&gt;に準拠する、そして&lt;c8&gt;Base&lt;w9&gt;.Element&lt;w10&gt;.Index&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;が&lt;c11&gt;Hashable&lt;/c11&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Contiguous&lt;w2&gt;Bytes&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Contiguous&lt;w2&gt;Bytes&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Data&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Data&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Lazy&lt;w2&gt;Sequence&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Lazy&lt;w2&gt;Sequence&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Range&lt;w2&gt;Replaceable&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Range&lt;w2&gt;Replaceable&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に利用可能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に利用可能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Strideable&lt;/c1&gt; and &lt;c2&gt;Bound&lt;w3&gt;.Stride&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Signed&lt;w5&gt;Integer&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Strideable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Bound&lt;w3&gt;.Stride&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Signed&lt;w5&gt;Integer&lt;/w5&gt;&lt;/c4&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; is &lt;c1&gt;Int&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Int&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Bound&lt;/c0&gt; is &lt;c1&gt;String&lt;/c1&gt;&lt;c2&gt;.&lt;/c2&gt;&lt;c3&gt;Index&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;String&lt;/c1&gt;&lt;c2&gt;.&lt;/c2&gt;&lt;c3&gt;Index&lt;/c3&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Sequence&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Sequence&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;String&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;(&lt;/c1&gt;&lt;c2&gt;CGRect&lt;/c2&gt;&lt;c3&gt;, &lt;/c3&gt;&lt;c4&gt;NSColor&lt;/c4&gt;&lt;c5&gt;)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;(&lt;/c1&gt;&lt;c2&gt;CGRect&lt;/c2&gt;&lt;c3&gt;, &lt;/c3&gt;&lt;c4&gt;NSColor&lt;/c4&gt;&lt;c5&gt;)&lt;/c5&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;(&lt;/c1&gt;&lt;c2&gt;CGRect&lt;/c2&gt;&lt;c3&gt;, gray: &lt;/c3&gt;&lt;c4&gt;CGFloat&lt;/c4&gt;&lt;c5&gt;)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;(&lt;/c1&gt;&lt;c2&gt;CGRect&lt;/c2&gt;&lt;c3&gt;, gray: &lt;/c3&gt;&lt;c4&gt;CGFloat&lt;/c4&gt;&lt;c5&gt;)&lt;/c5&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;NSRect&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;NSRect&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;String&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;String&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;UInt8&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;UInt8&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt; conforms to &lt;c1&gt;Lazy&lt;w2&gt;Collection&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;が&lt;c1&gt;Lazy&lt;w2&gt;Collection&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Elements&lt;/c0&gt; conforms to &lt;c1&gt;Lazy&lt;w2&gt;Sequence&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Elements&lt;/c0&gt;が&lt;c1&gt;Lazy&lt;w2&gt;Sequence&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Index&lt;/c0&gt; conforms to &lt;c1&gt;Strideable&lt;/c1&gt;, &lt;c2&gt;Indices&lt;/c2&gt; is &lt;c3&gt;Range&lt;Self&lt;w4&gt;.Index&gt;&lt;/w4&gt;&lt;/c3&gt;, and &lt;c5&gt;Index&lt;w6&gt;.Stride&lt;/w6&gt;&lt;/c5&gt; is &lt;c7&gt;Int&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Index&lt;/c0&gt;が&lt;c1&gt;Strideable&lt;/c1&gt;に準拠する、&lt;c2&gt;Indices&lt;/c2&gt;が&lt;c3&gt;Range&lt;Self&lt;w4&gt;.Index&gt;&lt;/w4&gt;&lt;/c3&gt;である、そして&lt;c5&gt;Index&lt;w6&gt;.Stride&lt;/w6&gt;&lt;/c5&gt;が&lt;c7&gt;Int&lt;/c7&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Indices&lt;/c0&gt; is &lt;c1&gt;Default&lt;w2&gt;Indices&lt;/w2&gt;&lt;/c1&gt;&lt;c3&gt;&lt;&lt;/c3&gt;&lt;c4&gt;Self&lt;/c4&gt;&lt;c5&gt;&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Indices&lt;/c0&gt;が&lt;c1&gt;Default&lt;w2&gt;Indices&lt;/w2&gt;&lt;/c1&gt;&lt;c3&gt;&lt;&lt;/c3&gt;&lt;c4&gt;Self&lt;/c4&gt;&lt;c5&gt;&gt;&lt;/c5&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Pointee&lt;/c0&gt; is &lt;c1&gt;MIDIEvent&lt;w2&gt;List&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt;が&lt;c1&gt;MIDIEvent&lt;w2&gt;List&lt;/w2&gt;&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Pointee&lt;/c0&gt; is &lt;c1&gt;MIDIEvent&lt;w2&gt;Packet&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt;が&lt;c1&gt;MIDIEvent&lt;w2&gt;Packet&lt;/w2&gt;&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Pointee&lt;/c0&gt; is &lt;c1&gt;MIDIPacket&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt;が&lt;c1&gt;MIDIPacket&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Pointee&lt;/c0&gt; is &lt;c1&gt;MIDIPacket&lt;w2&gt;List&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt;が&lt;c1&gt;MIDIPacket&lt;w2&gt;List&lt;/w2&gt;&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Fixed&lt;w3&gt;Width&lt;w4&gt;Integer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Fixed&lt;w3&gt;Width&lt;w4&gt;Integer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; conforms to &lt;c1&gt;Binary&lt;w2&gt;Floating&lt;w3&gt;Point&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;Scalar&lt;w5&gt;.Raw&lt;w6&gt;Significand&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; conforms to &lt;c7&gt;Fixed&lt;w8&gt;Width&lt;w9&gt;Integer&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Binary&lt;w2&gt;Floating&lt;w3&gt;Point&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c4&gt;Scalar&lt;w5&gt;.Raw&lt;w6&gt;Significand&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;が&lt;c7&gt;Fixed&lt;w8&gt;Width&lt;w9&gt;Integer&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; conforms to &lt;c1&gt;Binary&lt;w2&gt;Floating&lt;w3&gt;Point&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Binary&lt;w2&gt;Floating&lt;w3&gt;Point&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Comparable&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; conforms to &lt;c1&gt;Fixed&lt;w2&gt;Width&lt;w3&gt;Integer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Fixed&lt;w2&gt;Width&lt;w3&gt;Integer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; conforms to &lt;c1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; is &lt;c1&gt;Double&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Double&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Scalar&lt;/c0&gt; is &lt;c1&gt;Float&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Scalar&lt;/c0&gt;が&lt;c1&gt;Float&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Additive&lt;w2&gt;Arithmetic&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Scalar&lt;/c3&gt; conforms to &lt;c4&gt;Floating&lt;w5&gt;Point&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Additive&lt;w2&gt;Arithmetic&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Scalar&lt;/c3&gt;が&lt;c4&gt;Floating&lt;w5&gt;Point&lt;/w5&gt;&lt;/c4&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Any&lt;w2&gt;Object&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Any&lt;w2&gt;Object&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Self&lt;/c3&gt; is &lt;c4&gt;Sub&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Self&lt;/c3&gt;が&lt;c4&gt;Sub&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Bool&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Bool&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Double&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Double&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Float&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Float&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int16&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int16&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int32&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int32&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int64&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int64&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int8&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int8&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;String&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;String&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt16&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt16&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt32&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt32&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt64&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt64&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt8&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt8&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Bool&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Bool&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Double&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Double&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Float&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Float&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int16&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int16&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int32&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int32&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int64&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int64&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int8&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int8&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;Int&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Int&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;String&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;String&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt16&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt16&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt32&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt32&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt64&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt64&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt8&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt8&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;UInt&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠して&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;UInt&lt;/c4&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Fixed&lt;w2&gt;Width&lt;w3&gt;Integer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Fixed&lt;w2&gt;Width&lt;w3&gt;Integer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt; and &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Hashable&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Hashable&lt;/c4&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;Element&lt;/c4&gt; conforms to &lt;c5&gt;Comparable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c4&gt;Element&lt;/c4&gt;が&lt;c5&gt;Comparable&lt;/c5&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;_Pointer&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;_Pointer&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; is &lt;c1&gt;Element&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Element&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; is &lt;c1&gt;Elements&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Elements&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; is &lt;c1&gt;Iterator&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Iterator&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Self&lt;/c0&gt; is &lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Sub&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/c1&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Success&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Success&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; conforms to &lt;c3&gt;Hashable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Hashable&lt;/c3&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Gesture&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Gesture&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Available when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;View&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;View&lt;/c1&gt;に準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Base glyphs that occupy their own space and do not combine with others.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら独自の空間を占有するそして他のものと結合していない基底字体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Behaviors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本の挙動</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本コレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in &lt;c0&gt;Dictionary&lt;/c0&gt; instances and for other purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的な文字列演算はロケール設定に影響を受けず、文字列比較および他の演算が常にある単一の、安定した結果を持つことを保証して、文字列が&lt;c0&gt;Dictionary&lt;/c0&gt;インスタンスにおけるキーとしておよび他の目的のために使われることを可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Be aware, therefore, that general operations on &lt;c6&gt;Lazy&lt;w7&gt;Filter&lt;w8&gt;Collection&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; instances may not have the documented complexity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自覚すべきは、したがって、&lt;c6&gt;Lazy&lt;w7&gt;Filter&lt;w8&gt;Collection&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;インスタンス上での全体的な演算が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Be aware, therefore, that general operations on lazy collections may not have the documented complexity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自覚すべきは、したがって、遅延コレクション上での一般的な演算が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Be sure to deallocate any memory that you manually allocate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが手動でアロケートしてあらゆるメモリをデアロケートするのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; doesn’t define its own &lt;c3&gt;make&lt;w4&gt;Iterator()&lt;/w4&gt;&lt;/c3&gt; method or &lt;c5&gt;Iterator&lt;/c5&gt; associated type, it uses the default iterator type, &lt;c6&gt;Indexing&lt;w7&gt;Iterator&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は独自の&lt;c3&gt;make&lt;w4&gt;Iterator()&lt;/w4&gt;&lt;/c3&gt;メソッドまたは&lt;c5&gt;Iterator&lt;/c5&gt;関連型を定義しないことから、それは省略時のイテレータ型、&lt;c6&gt;Indexing&lt;w7&gt;Iterator&lt;/w7&gt;&lt;/c6&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;Range&lt;/c0&gt; represents a half-open range, a &lt;c1&gt;Range&lt;/c1&gt; instance does not contain its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Range&lt;/c0&gt;は半開範囲を表すことから、&lt;c1&gt;Range&lt;/c1&gt;インスタンスはそれの上方の境界を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; requires an immutable pointer, although this is syntactically valid, it isn’t necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;が不変ポインタを要求することから、これは構文的には有効ですが、必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; requires an immutable pointer, although this is syntactically valid, it isn’t necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が不変ポインタを要求することから、これは構文的には有効ですが、必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;c9&gt;NSString&lt;/c9&gt; is immutable, it is just as though the storage was shared by a copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;NSString&lt;/c9&gt;は不変であることから、まるでまさにストレージがコピーによって共有されたかのようです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NaN compares not less than nor greater than any value, this method returns &lt;c0&gt;false&lt;/c0&gt; when called on NaN or when NaN is passed as &lt;c1&gt;other&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNはあらゆる値より少なくもないし大きくもないと比較されるので、このメソッドは、NaN上で呼ばれた時またはNaNが&lt;c1&gt;other&lt;/c1&gt;として渡された時に&lt;c0&gt;false&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NaN is incomparable with any value, this method returns &lt;c0&gt;false&lt;/c0&gt; when called on NaN or when NaN is passed as &lt;c1&gt;other&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNはあらゆる値と比較可能でないので、このメソッドは、NaN上で呼ばれた時またはNaNが&lt;c1&gt;other&lt;/c1&gt;として渡された時に&lt;c0&gt;false&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because NaN is not equal to any value, including NaN, use this property instead of the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) or not-equal-to operator (&lt;c1&gt;!=&lt;/c1&gt;) to test whether a value is or is not NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、NaNを含めてあらゆる値と等しくないので、同等演算子（&lt;c0&gt;==&lt;/c0&gt;）または不等演算子（&lt;c1&gt;!=&lt;/c1&gt;）の代わりにこのプロパティを使うことで、ある値がNaNであるのかまたはないのかをテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because Swift provides several ways to safely unwrap optional values, you can choose the one that helps you write clear, concise code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは安全にオプショナル値をアンラップするために複数の方法を提供するので、あなたは明快な、簡潔なコードを記述する助けとしてその１つを選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; sequence counts upward indefinitely, do not use one with methods that read the entire sequence before returning, such as &lt;c3&gt;map(_:)&lt;/c3&gt;, &lt;c4&gt;filter(_:)&lt;/c4&gt;, or &lt;c5&gt;suffix(_:)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;シーケンスが上向きに無限に数えることから、返す前にシーケンス全体を読み出すメソッド、例えば&lt;c3&gt;map(_:)&lt;/c3&gt;、&lt;c4&gt;filter(_:)&lt;/c4&gt;、または&lt;c5&gt;suffix(_:)&lt;/c5&gt;などを持つものと一緒に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a NaN always compares not equal to itself, to test whether a floating-point value is NaN, use its &lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property instead of the equal-to operator (&lt;c3&gt;==&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは常にそれ自身に対して等しくないと比較されることから、浮動小数点値がNaNかどうかテストするには、それの&lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティを同等演算子（&lt;c3&gt;==&lt;/c3&gt;）の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a Unicode scalar value can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding to a Unicode scalar view after a call to &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値が単一ASCII文字相当のストレージより多く要求する可能性があることから、&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;への呼び出しの後に文字ビューにあるユニコードスカラー値を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値はそれの値を格納するのに21ビットに至るまで要求できるので、いくつかのユニコードスカラーはUTF-16ではペア（一対）の16ビットコード単位によって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-8 by a sequence of up to 4 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値はそれの値を格納するのに21ビットに至るまで要求できるので、いくつかのユニコードスカラーはUTF-8では４コード単位までのシーケンスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a half-open range does not include its upper bound, the ranges in the following example do not overlap:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半壊範囲はそれの上方の範囲を含まないことから、以下の例の範囲は重なりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a mutable typed pointer can be implicitly cast to an immutable pointer with the same &lt;c0&gt;Pointee&lt;/c0&gt; type when passed as a parameter, you can also call &lt;c1&gt;print&lt;w2&gt;Int(at&lt;w3&gt;Address:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; with an &lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の型付ポインタは同じ&lt;c0&gt;Pointee&lt;/c0&gt;型を持つ不変のポインタに暗黙的にキャストされることがパラメータとして渡される時に可能なことから、あなたはまた&lt;c1&gt;print&lt;w2&gt;Int(at&lt;w3&gt;Address:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を&lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;インスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because a set is not an ordered collection, the “first” element may not be the first element that was added to the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合は順序付けられたコレクションではないことから、「最初」の要素は集合に加えられた最初の要素ではないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because any arbitrary subclass of &lt;c5&gt;NSString&lt;/c5&gt; can become a &lt;c6&gt;String&lt;/c6&gt; instance, there are no guarantees about representation or efficiency when a &lt;c7&gt;String&lt;/c7&gt; instance is backed by &lt;c8&gt;NSString&lt;/c8&gt; storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;NSString&lt;/c5&gt;の随意のサブクラスは何であれ&lt;c6&gt;String&lt;/c6&gt;インスタンスになれるので、&lt;c7&gt;String&lt;/c7&gt;インスタンスが&lt;c8&gt;NSString&lt;/c8&gt;ストレージによって裏打ちされる場合、表現または効率についての保証はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because calculating the average of the observations involves combining every value of the &lt;c0&gt;temps&lt;w1&gt;Fahrenheit&lt;/w1&gt;&lt;/c0&gt; array, any NaN values cause the result to also be NaN, as seen in this example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>観測の平均の算出は&lt;c0&gt;temps&lt;w1&gt;Fahrenheit&lt;/w1&gt;&lt;/c0&gt;配列のすべての値を足し合わせることを必然的に含むことから、何らかのNaN値はまたNaNになるという結果を引き起こします、この例で見られるように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because calling a closure can change the local and global state of your app, the code you write on the lines after passing a closure needs to be written with a careful consideration of &lt;e0&gt;when&lt;/e0&gt; that closure is called.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャ呼び出しはあなたのアプリのローカルおよびグローバルな状態を変える可能性があることから、クロージャを渡す後の行であなたが書くコードは、&lt;e0&gt;いつ&lt;/e0&gt;そのクロージャが呼び出されるか注意深く考えて書かれる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because closures can contain code that interacts with multiple parts of an app, it's important to understand the different ways closures can be called by the APIs you pass them to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャはアプリの複数の部分と相互作用するコードを含むことが可能なため、クロージャが、あなたがそれを渡す相手であるAPIによって呼び出される様々に異なる方法を理解するのは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because each character in a string can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding characters to a string after a call to &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列中の各文字が単一ASCII文字相当のストレージより多く要求する可能性があることから、&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;への呼び出しの後に文字列に文字を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because enumerations define a finite number of states, and can bundle associated values with each individual state, you can use them to model the state of your app and its internal processes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙がある有限の数の状態を定義する、そして個々の状態それぞれに関連値を束ねることから、あなたはそれらを使ってあなたのアプリの状態とそれの内部処理をモデル化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because floating-point types such as &lt;c0&gt;Float&lt;/c0&gt; and &lt;c1&gt;Double&lt;/c1&gt; are their own &lt;c2&gt;Stride&lt;/c2&gt; types, they cannot be used as the bounds of a countable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型、例えば&lt;c0&gt;Float&lt;/c0&gt;および&lt;c1&gt;Double&lt;/c1&gt;は、それら独自の&lt;c2&gt;Stride&lt;/c2&gt;型であるので、それらは可付番範囲の境界として使われることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because of buffering, it is impossible to find the corresponding position in the iterator for a given returned &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; or an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファを行うことのため、ある指定の戻り値&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;やエラーに対して対応する位置をイテレータにおいて見つけることは不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because of this behavior, testing &lt;c0&gt;is&lt;w1&gt;Emoji&lt;/w1&gt;&lt;/c0&gt; alone on a single scalar is insufficient to determine if a unit of text is rendered as an emoji; a correct test requires inspecting multiple scalars in a &lt;c2&gt;Character&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この挙動のために、&lt;c0&gt;is&lt;w1&gt;Emoji&lt;/w1&gt;&lt;/c0&gt;単独で単一のスカラー上でテストすることは、あるテキスト単位がemojiとして描出されるかを判定するには不十分です；正確なテストはある&lt;c2&gt;Character&lt;/c2&gt;の中の複数のスカラーを検査することを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because of this, the index is always in-range and no trap can occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このために、インデックスは常に範囲内です、そしてトラップは起こりえません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because structures in C can't have methods, property accessors, or custom initializers, you often need to write such functionality using global functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cでの構造体はメソッド、プロパティアクセッサ、またはあつらえのイニシャライザを持つことができないことから、あなたはしばしばそのような機能性をグローバル関数を使って書く必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because testing whether one NaN is equal to another NaN results in &lt;c0&gt;false&lt;/c0&gt;, use the &lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; property to test whether a value is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるNaNが別のNaNと等しいかどうかテストすることは&lt;c0&gt;false&lt;/c0&gt;の結果になることから、&lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロパティを使うことである値がNaNかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; type is not hashable yet, it can’t be used in a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;型はまだハッシュ化可能でないことから、それは集合において使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c0&gt;Signed&lt;w1&gt;Numeric&lt;/w1&gt;&lt;/c0&gt; protocol provides default implementations of both of its required methods, you don’t need to do anything beyond declaring conformance to the protocol and ensuring that the values of your type support negation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Signed&lt;w1&gt;Numeric&lt;/w1&gt;&lt;/c0&gt;プロトコルはそれの必須メソッドの両方の省略時の実装を提供することから、あなたは、プロトコルへの準拠を宣言することおよびあなたの型の値が負をサポートするのを確実にすること以上に何もする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c1&gt;Cake&lt;/c1&gt; structure has fields with unnamed types, you use the &lt;c2&gt;.init&lt;/c2&gt; initializers (allowed due to Swift's type inference) to set the initial value for each of the structure’s unnamed fields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Cake&lt;/c1&gt;構造体は無名型でのフィールドを持つことから、あなたは&lt;c2&gt;.init&lt;/c2&gt;イニシャライザ（Swiftの持つ型推論によって与えられるもの）を使用して、初期値をその構造体の持つ無名フィールドの各々に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c2&gt;hypotenuse(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/c2&gt; function uses a generic parameter constrained to the &lt;c4&gt;Floating&lt;w5&gt;Point&lt;/w5&gt;&lt;/c4&gt; protocol, you can call it using any floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;hypotenuse(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/c2&gt;関数は&lt;c4&gt;Floating&lt;w5&gt;Point&lt;/w5&gt;&lt;/c4&gt;プロトコルに制約された総称体パラメータを使うので、あなたはそれを呼び出すことがあらゆる浮動小数点型を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c4&gt;Int8&lt;/c4&gt; type can represent &lt;c5&gt;127&lt;/c5&gt; at maximum, the attempt to create &lt;c6&gt;z&lt;/c6&gt; with a value of &lt;c7&gt;1000&lt;/c7&gt; results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Int8&lt;/c4&gt;型は、最大で&lt;c5&gt;127&lt;/c5&gt;を表せることから、&lt;c6&gt;z&lt;/c6&gt;を&lt;c7&gt;1000&lt;/c7&gt;の値で作成する試みは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the first field of the &lt;c0&gt;Cake&lt;/c0&gt; structure is unnamed, its initializer’s first parameter doesn't have a label.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Cake&lt;/c0&gt;構造体の最初のフィールドが無名であるため、それのイニシャライザの持つ最初のパラメータはラベルを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the generated header is part of the framework’s public interface, only declarations marked with the &lt;c0&gt;public&lt;/c0&gt; or &lt;c1&gt;open&lt;/c1&gt; modifier appear in the generated header for a framework target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成されたヘッダがフレームワークのパブリックインターフェイスの一部であることから、&lt;c0&gt;public&lt;/c0&gt;または&lt;c1&gt;open&lt;/c1&gt;修飾子で印された宣言だけがフレームワークターゲットに対する生成ヘッダに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the quotient is representable as an &lt;c2&gt;Int&lt;/c2&gt;, the division succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>商が&lt;c2&gt;Int&lt;/c2&gt;として表現可能であることから、除算は成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the strings are identical up to the 14th character, comparing only those characters results in a return value of &lt;c3&gt;0&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これら文字列が14番目の文字に至るまで全く同じなので、それらの文字だけ比較することは&lt;c3&gt;0&lt;/c3&gt;の値を返す結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because this buffer’s memory is no longer bound to its &lt;c0&gt;Element&lt;/c0&gt; type while the &lt;c1&gt;body&lt;/c1&gt; closure executes, do not access memory using the original buffer from within &lt;c2&gt;body&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリがそれの&lt;c0&gt;Element&lt;/c0&gt;型には&lt;c1&gt;body&lt;/c1&gt;クロージャの実行の間はもはや束縛されないことから、メモリにオリジナルのバッファを使って&lt;c2&gt;body&lt;/c2&gt;内からアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because this initializer does not perform any checks, it should be used as an optimization only when you are absolutely certain that &lt;c0&gt;lower&lt;/c0&gt; is less than or equal to &lt;c1&gt;upper&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは何ら確認を行わないので、それは、あなたが&lt;c0&gt;lower&lt;/c0&gt;が&lt;c1&gt;upper&lt;/c1&gt;より少ないか等しいことを絶対に確信している場合にのみ１つの最適化として使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because this pointer’s memory is no longer bound to its &lt;c0&gt;Pointee&lt;/c0&gt; type while the &lt;c1&gt;body&lt;/c1&gt; closure executes, do not access memory using the original pointer from within &lt;c2&gt;body&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのメモリがそれの&lt;c0&gt;Pointee&lt;/c0&gt;型には&lt;c1&gt;body&lt;/c1&gt;クロージャの実行の間はもはや束縛されないことから、メモリにオリジナルのポインタを使って&lt;c2&gt;body&lt;/c2&gt;内からアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because typed pointers can be implicitly cast to raw pointers when passed as a parameter, you can also call &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; with any mutable or immutable typed pointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタは暗黙的に生のポインタにキャストされることがパラメータとして渡される時に可能なことから、あなたはまた&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;を何らかの可変または不変の型付ポインタとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because typed pointers can be implicitly cast to raw pointers when passed as a parameter, you can also call &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; with any mutable typed pointer instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタは暗黙的に生のポインタにキャストされることがパラメータとして渡される時に可能なことから、あなたはまた&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;を何らかの可変の型付ポインタとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because unions in C use the same base memory address for all of their fields, all of the computed properties in a union imported by Swift use the same underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cでの共用体は同じ基盤メモリアドレスをすべてのそれのフィールドに対して使うことから、スウィフトによってインポートされる共用体の中の計算プロパティのすべては同じ基礎をなすメモリを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because you can’t subclass Swift classes in Objective-C, it’s best to choose a class in your app that doesn’t have any subclasses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがスウィフトクラスをObjective-Cにおいてサブクラス化できないので、あなたのアプリにおいて全くサブクラスを持たないクラスを選択するのは最も良いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before shifting, the masking left shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする前に、マスク左シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before shifting, the masking right shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする前に、マスク右シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Behind the scenes, Swift uses the &lt;c0&gt;animals&lt;/c0&gt; array’s iterator to loop over the contents of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>舞台裏で、Swiftは&lt;c0&gt;animals&lt;/c0&gt;配列のもつイテレータを使って、その配列の要素のすべてにわたって繰り返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Besides maintaining the order of the original dictionary literal, &lt;c3&gt;Key&lt;w4&gt;Value&lt;w5&gt;Pairs&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; also allows duplicates keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>元の辞書リテラルの順番を保守するのと並んで、&lt;c3&gt;Key&lt;w4&gt;Value&lt;w5&gt;Pairs&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;はまた重複キーを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary&lt;w0&gt;Floating&lt;w1&gt;Point Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ&lt;w0&gt;浮動&lt;w1&gt;小数点の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary&lt;w0&gt;Integer Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ&lt;w0&gt;整数の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binds the memory to the specified type and returns a typed pointer to the bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリを指定された型へ束縛して、束縛されたメモリに対する型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binds this buffer’s memory to the specified type and returns a typed buffer of the bound memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの持つメモリを指定された型へ束縛して、束縛されたメモリに対する型付バッファを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bit Fields</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットフィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bit Shift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットシフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bits are randomly distributed so that every value of &lt;c1&gt;T&lt;/c1&gt; is equally likely to be returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらビットは無作為に分布します、それで&lt;c1&gt;T&lt;/c1&gt;の全ての値は等しく返される可能性をもちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise AND</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise AND and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の論理積と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise NOT</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise OR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise OR and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の論理和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise XOR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の排他的論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise XOR and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の排他的論理和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise left shift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の左シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bitwise right shift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位の右シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both &lt;c2&gt;now(_:)&lt;/c2&gt; and &lt;c3&gt;later(_:)&lt;/c3&gt; accept a closure and call it, but &lt;c4&gt;later(_:)&lt;/c4&gt; waits a couple seconds before calling its closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;now(_:)&lt;/c2&gt;と&lt;c3&gt;later(_:)&lt;/c3&gt;の両方ともクロージャを受け取りそれを呼び出します、しかし&lt;c4&gt;later(_:)&lt;/c4&gt;はそれのクロージャを呼び出す前に２秒ほど待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both kinds of availability specifier are also available in Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方の種類の利用可能性指定子はまた、Objective-Cにおいても役立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both of these methods return the original, unwrapped type of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのメソッドの両方とも、元の、オブジェクトのアンラップされた型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the buffer, and not equal to &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、バッファの有効なインデックスであり、そして&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;と等しくてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the collection and not equal to &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、このコレクションの有効なインデックスであり、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;と等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both parameters must be valid indices of the collection that are not equal to &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>両方のパラメータは、このコレクションの有効なインデックスで、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;と等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both processes are described below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>双方の行程は下で記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bounds checks are always performed in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>境界検査は、デバッグモードにおいて常に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bounds checks for &lt;c0&gt;bounds&lt;/c0&gt; are performed only in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;boun&lt;/c0&gt;に対する境界検査は、デバッグモードでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bounds checks for &lt;c0&gt;i&lt;/c0&gt; are performed only in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;に対する境界検査は、デバッグモードでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging Between Set and NSSet</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SetとNSSetの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging Between String and NSString</seg>
      </tuv>
      <tuv lang="ja">
        <seg>StringとNSStringの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging from &lt;c0&gt;NSSet&lt;/c0&gt; to &lt;c1&gt;Set&lt;/c1&gt; first calls the &lt;c2&gt;copy(with:)&lt;/c2&gt; method (&lt;c3&gt;- copy&lt;w4&gt;With&lt;w5&gt;Zone:&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; in Objective-C) on the set to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSSet&lt;/c0&gt;から&lt;c1&gt;Set&lt;/c1&gt;へのブリッジは、最初に&lt;c2&gt;copy(with:)&lt;/c2&gt;メソッド（Objective-Cにおける&lt;c3&gt;- copy&lt;w4&gt;With&lt;w5&gt;Zone:&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;）を集合上で呼び出すことで可変のコピーを取得して、それからO(1)時間をとる追加的なSwift簿記作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bridging from &lt;c0&gt;Set&lt;/c0&gt; to &lt;c1&gt;NSSet&lt;/c1&gt; always takes O(1) time and space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;/c0&gt;から&lt;c1&gt;NSSet&lt;/c1&gt;へのブリッジは、常にO(1)の時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Buffer Implementation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Buffer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build your own buffer-backed collection types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のバッファ裏付けのコレクション型を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, a collection conforms to the &lt;c0&gt;Sequence&lt;/c0&gt; protocol by supplying &lt;c1&gt;Indexing&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt; as its associated &lt;c3&gt;Iterator&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態で、あるコレクションは&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルに、&lt;c1&gt;Indexing&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt;をそれの関連&lt;c3&gt;Iterator&lt;/c3&gt;型として提供することによって準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, any custom collection type you create will inherit a &lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt; method that returns an &lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt; instance, making it unnecessary to declare your own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態で、あなたが作成するあらゆるあつらえのコレクション型は、&lt;c0&gt;Indexing&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;インスタンスを返す&lt;c2&gt;make&lt;w3&gt;Iterator()&lt;/w3&gt;&lt;/c2&gt;メソッドを継承していて、それをあなた自身で宣言する必要がないようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, most types in the standard library are hashable, including strings, numeric and Boolean types, enumeration cases without associated values, and even sets themselves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態で、標準ライブラリの中のほとんどの型はハッシュ化されています、文字列、数のおよびブールの型、関連値なしの列挙ケース節、そして集合それら自身さえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the &lt;c5&gt;custom&lt;w6&gt;Mirror&lt;/w6&gt;&lt;/c5&gt; implementation of any ancestors is ignored.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態では、あらゆる先祖の&lt;c5&gt;custom&lt;w6&gt;Mirror&lt;/w6&gt;&lt;/c5&gt;実装は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the generated header contains interfaces for Swift declarations marked with the &lt;c0&gt;public&lt;/c0&gt; or &lt;c1&gt;open&lt;/c1&gt; modifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に何もしなければ、生成されたヘッダは&lt;c0&gt;public&lt;/c0&gt;または&lt;c1&gt;open&lt;/c1&gt;修飾子で印されたSwift宣言を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, this name is the same as your product name, with any nonalphanumeric characters replaced with an underscore (&lt;c2&gt;_&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時には、この名前は、あらゆる非アルファベット文字がアンダースコア（&lt;c2&gt;_&lt;/c2&gt;）で置き換えられたあなたの製品名と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By sending the output of the &lt;c3&gt;print(_:&lt;w4&gt;to:)&lt;/w4&gt;&lt;/c3&gt; function to an instance of &lt;c5&gt;ASCIILogger&lt;/c5&gt;, you invoke its &lt;c6&gt;write(_:)&lt;/c6&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;print(_:&lt;w4&gt;to:)&lt;/w4&gt;&lt;/c3&gt;関数の出力を&lt;c5&gt;ASCIILogger&lt;/c5&gt;のインスタンスに送ることによって、あなたはそれの&lt;c6&gt;write(_:)&lt;/c6&gt;メソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C &lt;c0&gt;struct&lt;/c0&gt; and &lt;c1&gt;union&lt;/c1&gt; types can define fields that have no name or that are of an unnamed type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの&lt;c0&gt;struct&lt;/c0&gt;と&lt;c1&gt;union&lt;/c1&gt;型は、名前を持たないまたは無名型であるフィールドを定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Syntax</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C Variadic Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C可変長引数関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C and Objective-C Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CおよびObjective-Cポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C function pointers are imported into Swift as closures with the C function pointer calling convention, denoted by the &lt;c0&gt;@convention(c)&lt;/c0&gt; attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数ポインターは、&lt;c0&gt;@convention(c)&lt;/c0&gt;属性によって示される、C関数呼出規約を持つクロージャとしてSwiftにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C functions that use the &lt;c2&gt;...&lt;/c2&gt; syntax for variadic arguments are not imported, and therefore can’t be called using &lt;c3&gt;CVar&lt;w4&gt;Arg&lt;/w4&gt;&lt;/c3&gt; arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;...&lt;/c2&gt;構文を可変長引数に使うC関数はインポートされません、そしてそれゆえ&lt;c3&gt;CVar&lt;w4&gt;Arg&lt;/w4&gt;&lt;/c3&gt;引数を使って呼び出されることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C macros that are more complex than simple constant definitions have no counterpart in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純な定数宣言よりもっと複雑なCマクロは、相当するものをSwiftにおいて持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculates the additive inverse of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の加法の逆元を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を計算します、シフト量をその型の持つビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body(p)&lt;/c0&gt;, where &lt;c1&gt;p&lt;/c1&gt; is a pointer to the collection’s contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body(p)&lt;/c0&gt;を呼び出します、ここで&lt;c1&gt;p&lt;/c1&gt;はコレクションのもつ隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body(p)&lt;/c0&gt;, where &lt;c1&gt;p&lt;/c1&gt; is a pointer to the collection’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body(p)&lt;/c0&gt;を呼び出します、ここで&lt;c1&gt;p&lt;/c1&gt;はコレクションのもつ可変の隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body&lt;/c0&gt; with &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;s to the stored &lt;c4&gt;Header&lt;/c4&gt; and raw &lt;c5&gt;Element&lt;/c5&gt; storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>格納&lt;c4&gt;Header&lt;/c4&gt;および&lt;c5&gt;Element&lt;/c5&gt;生ストレージそれぞれへの&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を使って&lt;c0&gt;body&lt;/c0&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body&lt;/c0&gt; with an &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; to the &lt;c4&gt;Element&lt;/c4&gt; storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;ストレージへの&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を使って&lt;c4&gt;body&lt;/c4&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;body&lt;/c0&gt; with an &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; to the stored &lt;c4&gt;Header&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この格納&lt;c0&gt;Header&lt;/c0&gt;への&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を使って&lt;c4&gt;body&lt;/c4&gt;を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;random&lt;w1&gt;Element()&lt;/w1&gt;&lt;/c0&gt; to select a random element from an array or another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random&lt;w1&gt;Element()&lt;/w1&gt;&lt;/c0&gt;を呼び出して、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt; to select a random element from an array or another collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt;を呼び出して、あなたがあつらえの無作為数生成子を使っている場合に、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call &lt;c2&gt;hasher&lt;w3&gt;.combine(_:)&lt;/w3&gt;&lt;/c2&gt; with each of these components.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;hasher&lt;w3&gt;.combine(_:)&lt;/w3&gt;&lt;/c2&gt;をそれら構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call Functions with Pointer Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数をポインタパラメータを使って呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call the given output stream’s &lt;c4&gt;write(_:)&lt;/c4&gt; method in your implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた出力ストリームのもつ&lt;c4&gt;write(_:)&lt;/c4&gt;メソッドをあなたの実装において呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Call the initializer that wraps a throwing expression when you need to serialize or memoize the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローする式をラップするイニシャライザを呼び出します、あなたが結果をシリアライズまたは記憶する必要がある時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Callers should apply the same preconditions to the return value as they would to a range provided directly by the user.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>呼び出し側は、同じ前提条件を戻り値に適用すべきです、それらがユーザによって直接に提供される範囲にするように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c0&gt;appending(path:)&lt;/c0&gt; results in the same key path as if the given key path had been specified using dot notation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;appending(path:)&lt;/c0&gt;を呼び出すことは、与えられたキーパスがドット表記法を使って指定された場合と同じキーパスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c0&gt;flat&lt;w1&gt;Map(_:)&lt;/w1&gt;&lt;/c0&gt; on a sequence &lt;c2&gt;s&lt;/c2&gt; is equivalent to calling &lt;c3&gt;s&lt;w4&gt;.map(transform).joined()&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;flat&lt;w1&gt;Map(_:)&lt;/w1&gt;&lt;/c0&gt;をあるシーケンス&lt;c2&gt;s&lt;/c2&gt;上で呼び出すことは、&lt;c3&gt;s&lt;w4&gt;.map(transform).joined()&lt;/w4&gt;&lt;/c3&gt;を呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c10&gt;store&lt;w11&gt;Bytes(of:&lt;w12&gt;to&lt;w13&gt;Byte&lt;w14&gt;Offset:&lt;w15&gt;as:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; does not change the bound type of the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c10&gt;store&lt;w11&gt;Bytes(of:&lt;w12&gt;to&lt;w13&gt;Byte&lt;w14&gt;Offset:&lt;w15&gt;as:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;を呼び出すことは、そのメモリの束縛される型を変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling &lt;c2&gt;swap&lt;w3&gt;At(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; with the same index as both &lt;c5&gt;i&lt;/c5&gt; and &lt;c6&gt;j&lt;/c6&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;swap&lt;w3&gt;At(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を&lt;c5&gt;i&lt;/c5&gt;と&lt;c6&gt;j&lt;/c6&gt;両方で同じインデックスで呼び出すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling Functions With Pointer Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数をポインタパラメータで呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;get&lt;w1&gt;Red(red:&lt;w2&gt;green:&lt;w3&gt;blue:&lt;w4&gt;alpha:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method in Swift requires passing four in-out parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;get&lt;w1&gt;Red(red:&lt;w2&gt;green:&lt;w3&gt;blue:&lt;w4&gt;alpha:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドをSwiftにおいて呼び出すことは、インアウトパラメータを渡すことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;move()&lt;/c0&gt; method on a pointer &lt;c1&gt;p&lt;/c1&gt; that references memory of type &lt;c2&gt;T&lt;/c2&gt; is equivalent to the following code, aside from any cost and incidental side effects of copying and destroying the value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;move()&lt;/c0&gt;メソッドを、型&lt;c1&gt;T&lt;/c1&gt;のメモリを参照するポインタ&lt;c2&gt;p&lt;/c2&gt;上で呼び出すことは、その値のコピーおよび破棄のあらゆるコストと付随する副作用を除いて、以下のコードと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt; method on a set with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store &lt;c2&gt;minimum&lt;w3&gt;Capacity&lt;/w3&gt;&lt;/c2&gt; elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reserve&lt;w1&gt;Capacity(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドをブリッジされたストレージを持つ集合で呼び出すことは、隣接ストレージへのコピーを引き起こします、たとえ既存のストレージに&lt;c2&gt;minimum&lt;w3&gt;Capacity&lt;/w3&gt;&lt;/c2&gt;要素を格納する余地があるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c2&gt;remove&lt;w3&gt;Subrange(_:)&lt;/w3&gt;&lt;/c2&gt; method instead is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;remove&lt;w3&gt;Subrange(_:)&lt;/w3&gt;&lt;/c2&gt;メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the &lt;c6&gt;insert(contents&lt;w7&gt;Of:&lt;w8&gt;at:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; method instead is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;insert(contents&lt;w7&gt;Of:&lt;w8&gt;at:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling the related &lt;c0&gt;sorted()&lt;/c0&gt; method is equivalent to calling this method and passing the less-than operator (&lt;c1&gt;&lt;&lt;/c1&gt;) as the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連した&lt;c0&gt;sorted()&lt;/c0&gt;メソッドを呼び出すことは、このメソッドを呼び出して、より小さい演算子（&lt;c1&gt;&lt;&lt;/c1&gt;）を述部として渡すことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this initializer copies the contents of the substring to a new string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを呼ぶことは、下位文字列の内容を新しい文字列にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method invalidates any existing indices for use with this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、この文字列で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method is roughly equivalent to calling &lt;c2&gt;initialize(repeating:&lt;w3&gt;count:)&lt;/w3&gt;&lt;/c2&gt; with a &lt;c4&gt;count&lt;/c4&gt; of 1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、おおよそ&lt;c2&gt;initialize(repeating:&lt;w3&gt;count:)&lt;/w3&gt;&lt;/c2&gt;を１の&lt;c4&gt;count&lt;/c4&gt;で呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method may invalidate all saved indices of this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、このコレクションの全ての保存されたインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this method may invalidate any existing indices for use with this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを呼び出すことは、このコレクションで使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calling this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを直接に呼び出すことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure on each element in the sequence in the same order as a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたクロージャをそのシーケンスの各要素上で&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループと同じ順番で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a mutable pointer to the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを与えられた引数に対する可変ポインタを使って呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null終端のUTF-8コード単位シーケンスとして表される、文字列の内容へのポインタとともに与えられたクロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null終端のコード単位シーケンスとして表される、文字列の内容へのポインタとともに与えられたクロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canonical combining classes are defined in the Unicode Standard as integers in the range &lt;c0&gt;0...254&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正準結合クラスは、「ユニコード標準」において整数として範囲&lt;c0&gt;0...254&lt;/c0&gt;の中で定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Canonical combining classes are used by the ordering algorithm to determine if two sequences of combining marks should be considered canonically equivalent (that is, identical in interpretation).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正準結合クラスは、順序アルゴリズムによって使われて、２つの結合記号シーケンスが正準的に等しい（すなわち、解釈において同一）と考えられるべきかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cast between a Swift value type and its corresponding reference type by using the &lt;c1&gt;as&lt;/c1&gt; keyword.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift値型とそれの対応する参照型の間で&lt;c1&gt;as&lt;/c1&gt;キーワードを使ってキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cast instances of the Objective-C &lt;c0&gt;id&lt;/c0&gt; type to a specific Swift type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C &lt;c0&gt;id&lt;/c0&gt;のインスタンスをSwift型にキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Casting Between Integer Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数型の間でキャストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Changing Case</seg>
      </tuv>
      <tuv lang="ja">
        <seg>大文字小文字の変更</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Check Availability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利用可能性を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking for Containment</seg>
      </tuv>
      <tuv lang="ja">
        <seg>制約を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checking that the iterator was exhausted is not sufficient, because the decoder can store buffered data from the input iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータが使い尽くされてしまったことの確認は十分とは言えません、デコーダが入力イテレータからのバッファ済みデータを格納できるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checks a necessary condition for making forward progress.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは進捗を前へ進めるために必要な条件を確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choose a New Name and Declaration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい名前と宣言を選択する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choosing the Smallest and Largest Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最小および最大値を選ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Clamping a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を固定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class clusters that include immutable and mutable subclasses, like &lt;c0&gt;NSArray&lt;/c0&gt; and &lt;c1&gt;NSMutable&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;, are bridged to a single value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NSArray&lt;/c0&gt;および&lt;c1&gt;NSMutable&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;のような、不変および可変のサブクラスを含むクラスクラスタは、単一の値型にブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class prefixes are optional in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラス接頭辞は、スウィフトでは随意です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Classes specific to Objective-C or inherently tied to the Objective-C runtime, like &lt;c0&gt;NSObject&lt;/c0&gt;, &lt;c1&gt;NSAutorelease&lt;w2&gt;Pool&lt;/w2&gt;&lt;/c1&gt;, &lt;c3&gt;NSException&lt;/c3&gt;, and &lt;c4&gt;NSProxy&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C特有の、またはObjective-Cランタイムに本質的に結びつけられ切り離せないクラス、&lt;c0&gt;NSObject&lt;/c0&gt;、&lt;c1&gt;NSAutorelease&lt;w2&gt;Pool&lt;/w2&gt;&lt;/c1&gt;、&lt;c3&gt;NSException&lt;/c3&gt;、そして&lt;c4&gt;NSProxy&lt;/c4&gt;のような</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Clean Up Your Code</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを掃除する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closed enumerations are useful for representing a finite set of states that you expect people to switch over using a switch statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結列挙は、人々がスイッチ文を使って切り替えることをあなたが期待する、ある有限な一揃いの状態を表すのに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closed range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closure Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closures you pass to APIs can be called synchronously (immediately) or asynchronously (sometime later).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがAPIに渡すクロージャは、同期的に（直ちに）または非同期的に（いつか後で）呼び出されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Coalescing Nil Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil値の合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cocoa Design Patterns</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaデザインパターン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cocoa Frameworks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cocoaフレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Mutability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの可変性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collection Traversal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション横断</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまなコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections of Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections that conform to &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; gain the ability to change the value of their elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;に準拠するコレクションは、それらの要素の値を変更する能力を獲得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combine strings using the concatenation operator (&lt;c0&gt;+&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>連結演算子（&lt;c0&gt;+&lt;/c0&gt;）を使って文字列を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combining Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合を結合する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combining Unicode scalars do not have their own position in a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結合ユニコードスカラーは、それら自身の位置を文字列において持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Combining marks that are attached to hiragana and katakana to indicate voicing changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ひらがなとカタカナに付けられて発声変化を指し示す結合記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command Line Input</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コマンドライン入力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command-click a Swift class name to see its generated header.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトクラス名をコマンド-クリックして、その生成ヘッダを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command-line arguments for the current process.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のプロセスに対するコマンドライン引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Common data structures such as &lt;a0&gt;&lt;c1&gt;Array&lt;/c1&gt;&lt;/a0&gt;, &lt;a2&gt;&lt;c3&gt;Dictionary&lt;/c3&gt;&lt;/a2&gt;, and &lt;a4&gt;&lt;c5&gt;Set&lt;/c5&gt;&lt;/a4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般的なデータ構造体、例えば&lt;a0&gt;&lt;c1&gt;Array&lt;/c1&gt;&lt;/a0&gt;、&lt;a2&gt;&lt;c3&gt;Dictionary&lt;/c3&gt;&lt;/a2&gt;、そして&lt;a4&gt;&lt;c5&gt;Set&lt;/c5&gt;&lt;/a4&gt;など</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Buffers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Identity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Optional Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル値の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Ranges as Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲をコレクションとして比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Results</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Scalars</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Sequences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Strings Using Operators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を演算子を使って比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing strings for equality using the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) or a relational operator (like &lt;c1&gt;&lt;&lt;/c1&gt; or &lt;c2&gt;&gt;=&lt;/c2&gt;) is always performed using Unicode canonical representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等演算子（&lt;c0&gt;==&lt;/c0&gt;）または関係演算子（&lt;c1&gt;&lt;&lt;/c1&gt;や&lt;c2&gt;&gt;=&lt;/c2&gt;のような）を使って同等性について文字列を比較することは、常にユニコード正準表現を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparing strings using the equal-to operator (==) or a relational operator (like &lt; and &gt;=) is always performed using the Unicode canonical representation, so that different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を同等演算子（==）または関係演算子（&lt;および&gt;=）を使って比較することは、常にユニコード正準表現を使って実行されます、そのためある文字列の異なる表現は同等であると比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comparison</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compile-Time Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイル時文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complex pointer types, such as &lt;c5&gt;id *&lt;/c5&gt;, must be explicitly annotated using these annotations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複雑なポインタ型、例えば&lt;c5&gt;id *&lt;/c5&gt;などは、これら注釈を使って、明示的に注釈を付けられなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Amortized O(1) if the set does not wrap a bridged &lt;c0&gt;NSSet&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：この集合がブリッジされた&lt;c0&gt;NSSet&lt;/c0&gt;をラップしないならば、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if &lt;c0&gt;Index&lt;/c0&gt; conforms to &lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Index&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;; O(&lt;e4&gt;n&lt;/e4&gt;) otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：&lt;c0&gt;Index&lt;/c0&gt;が&lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Index&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠するならばO(1)；そうでないならばO(&lt;e4&gt;n&lt;/e4&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if &lt;c0&gt;Self&lt;/c0&gt; conforms to &lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;; O(&lt;e4&gt;n&lt;/e4&gt;) otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：&lt;c0&gt;Self&lt;/c0&gt;が&lt;c1&gt;Random&lt;w2&gt;Access&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠するならばO(1)；そうでないならばO(&lt;e4&gt;n&lt;/e4&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is equal to &lt;c5&gt;max&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は&lt;c5&gt;max&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the absolute value of &lt;c5&gt;distance&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は&lt;c5&gt;distance&lt;/c5&gt;の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;はコレクションの冒頭から除外する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to drop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は除外される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は除去される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the number of elements to select from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：コレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば、O(1)；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;はコレクションの冒頭から選択する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the resulting distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は結果の隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;k&lt;/e3&gt;), where &lt;e4&gt;k&lt;/e4&gt; is the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;k&lt;/e3&gt;)、そこで&lt;e4&gt;k&lt;/e4&gt;は指定した要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;n&lt;/e3&gt;), where &lt;e4&gt;n&lt;/e4&gt; is the absolute value of &lt;c5&gt;n&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;n&lt;/e3&gt;)、そこで&lt;e4&gt;n&lt;/e4&gt;は&lt;c5&gt;n&lt;/c5&gt;の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) if the collection conforms to &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; otherwise, O(&lt;e3&gt;n&lt;/e3&gt;), where &lt;e4&gt;n&lt;/e4&gt; is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、もしコレクションが&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するならば；そうでなければ、O(&lt;e3&gt;n&lt;/e3&gt;)、そこで&lt;e4&gt;n&lt;/e4&gt;はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1) on average, over many calls to &lt;c0&gt;append(_:)&lt;/c0&gt; on the same collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：同じコレクション上での&lt;c0&gt;append(_:)&lt;/c0&gt;への多くの呼び出しに対して、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1), except if the sequence also conforms to &lt;c0&gt;Collection&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、例外としてシーケンスが同様に&lt;c0&gt;Collection&lt;/c0&gt;に準拠する場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1), with O(&lt;e0&gt;k&lt;/e0&gt;) deferred to each iteration of the result, where &lt;e1&gt;k&lt;/e1&gt; is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)、結果の各反復に対してO(&lt;e0&gt;k&lt;/e0&gt;)延期されて、ここで&lt;e1&gt;k&lt;/e1&gt;はシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(1).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;c0&gt;separator&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;c0&gt;separator&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;k&lt;/e0&gt;), where &lt;e1&gt;k&lt;/e1&gt; is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;k&lt;/e0&gt;)、ここで&lt;e1&gt;k&lt;/e1&gt;は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;k&lt;/e0&gt;), where &lt;e1&gt;k&lt;/e1&gt; is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;k&lt;/e0&gt;)、ここで&lt;e1&gt;k&lt;/e1&gt;はシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;k&lt;/e0&gt;), where &lt;e1&gt;k&lt;/e1&gt; is the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;k&lt;/e0&gt;)、ここで&lt;e1&gt;k&lt;/e1&gt;は指定された要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;m&lt;/e2&gt; is the length of this sequence and &lt;e3&gt;n&lt;/e3&gt; is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;m&lt;/e2&gt;はこのシーケンスの長さで、&lt;e3&gt;n&lt;/e3&gt;は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of this sequence and &lt;e3&gt;m&lt;/e3&gt; is the length of the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt; + &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;はこのシーケンスの長さで、&lt;e3&gt;m&lt;/e3&gt;は結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the combined length of the string and &lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;は文字列と&lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the combined length of the view and &lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;はビューと&lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the length of &lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;は&lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the length of the right-hand-side argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;は右手側の引数の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the lesser of the length of the sequence and the length of &lt;c2&gt;other&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;はシーケンスの長さと&lt;c2&gt;other&lt;/c2&gt;の長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;m&lt;/e0&gt;), where &lt;e1&gt;m&lt;/e1&gt; is the lesser of the length of the sequence and the length of &lt;c2&gt;possible&lt;w3&gt;Prefix&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;m&lt;/e0&gt;)、ここで&lt;e1&gt;m&lt;/e1&gt;はシーケスの長さと&lt;c2&gt;possible&lt;w3&gt;Prefix&lt;/w3&gt;&lt;/c2&gt;の長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;c&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is &lt;c3&gt;self&lt;w4&gt;.count&lt;/w4&gt;&lt;/c3&gt; and &lt;e5&gt;c&lt;/e5&gt; is the number of changes contained by the parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;c&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;は&lt;c3&gt;self&lt;w4&gt;.count&lt;/w4&gt;&lt;/c3&gt;です、そして&lt;e5&gt;c&lt;/e5&gt;はパラメータによって含まれる変更の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;m&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is length of this collection and &lt;e3&gt;m&lt;/e3&gt; is the length of &lt;c4&gt;new&lt;w5&gt;Elements&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; + &lt;e1&gt;m&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;は配列の長さです、そして&lt;e3&gt;m&lt;/e3&gt;は&lt;c4&gt;new&lt;w5&gt;Elements&lt;/w5&gt;&lt;/c4&gt;の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the length of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt; log &lt;e1&gt;n&lt;/e1&gt;)、ここで&lt;e2&gt;n&lt;/e2&gt;はシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the absolute value of &lt;c2&gt;n&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、そこで&lt;e1&gt;n&lt;/e1&gt;は&lt;c2&gt;n&lt;/c2&gt;の値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the capacity being reserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は確保されている容量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the combined length of the string and &lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は文字列と&lt;c2&gt;new&lt;w3&gt;Elements&lt;/w3&gt;&lt;/c2&gt;を合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of &lt;c2&gt;substring&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は&lt;c2&gt;substring&lt;/c2&gt;の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the resulting view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は結果となるビューの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the length of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は文字列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はコレクションの中の要素数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the ratio between unfiltered and filtered collection counts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;はコレクションのフィルタされないものとフィルタされたもの数の比率です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(&lt;e0&gt;n&lt;/e0&gt;), where &lt;e1&gt;n&lt;/e1&gt; is the resulting distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(&lt;e0&gt;n&lt;/e0&gt;)、ここで&lt;e1&gt;n&lt;/e1&gt;は結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(N), where N is the length of the resulting &lt;c0&gt;String&lt;/c0&gt;’s UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(N)、ここでNは結果となる&lt;c0&gt;String&lt;/c0&gt;の持つUTF-16の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: O(n) if non-contiguous, O(1) if already contiguous</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：O(n)、もし非隣接ならば、O(1)、もしすでに隣接ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complexity: Worst case performance is O(&lt;e0&gt;n&lt;/e0&gt; * &lt;e1&gt;m&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; is the count of this collection and &lt;e3&gt;m&lt;/e3&gt; is &lt;c4&gt;other&lt;w5&gt;.count&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算量：最悪の場合の性能は、O(&lt;e0&gt;n&lt;/e0&gt; * &lt;e1&gt;m&lt;/e1&gt;)です、ここで&lt;e2&gt;n&lt;/e2&gt;はこのコレクションの総数です、そして&lt;e3&gt;m&lt;/e3&gt;は&lt;c4&gt;other&lt;w5&gt;.count&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Computational operations are defined on the &lt;c1&gt;SIMD&lt;/c1&gt; protocol, which refines this protocol, and on the concrete types that conform to &lt;c2&gt;SIMD&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算関係演算は、&lt;c1&gt;SIMD&lt;/c1&gt;プロトコル上で、それはこのプロトコルを洗練させたものです、そして&lt;c2&gt;SIMD&lt;/c2&gt;に準拠する具象型上で、定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの型が準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the FixedWidthInteger Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FixedWidthIntegerプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Hashable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Hashableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Identifiable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Identifiableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the MutableCollection Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>MutableCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Numeric Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Numericプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the RandomAccessCollection Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RandomAccessCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the RandomNumberGenerator Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RandomNumberGeneratorプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the RangeReplaceableCollection Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RangeReplaceableCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Sequence Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Sequenceプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the SetAlgebra Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SetAlgebraプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the SignedNumeric Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SignedNumericプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the Strideable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Strideableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the TextOutputStream Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforming to the TextOutputStreamable Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>TextOutputStreamableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms To</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Accelerate&lt;w2&gt;Buffer&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Accelerate&lt;w2&gt;Buffer&lt;/w2&gt;&lt;/c1&gt;に準拠する場合に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Accelerate&lt;w2&gt;Mutable&lt;w3&gt;Buffer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;Mutable&lt;w5&gt;Collection&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Accelerate&lt;w2&gt;Mutable&lt;w3&gt;Buffer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;と&lt;c4&gt;Mutable&lt;w5&gt;Collection&lt;/w5&gt;&lt;/c4&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;Base&lt;w4&gt;.Index&lt;/w4&gt;&lt;/c3&gt; conforms to &lt;c5&gt;Hashable&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠するそして&lt;c3&gt;Base&lt;w4&gt;.Index&lt;/w4&gt;&lt;/c3&gt;が&lt;c5&gt;Hashable&lt;/c5&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt; and &lt;c2&gt;Base&lt;w3&gt;.Index&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Hashable&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠するそして&lt;c2&gt;Base&lt;w3&gt;.Index&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Hashable&lt;/c4&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Collection&lt;/c1&gt;, &lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Collection&lt;/c4&gt;, &lt;c5&gt;Base&lt;w6&gt;.Index&lt;/w6&gt;&lt;/c5&gt; conforms to &lt;c7&gt;Hashable&lt;/c7&gt;, and &lt;c8&gt;Base&lt;w9&gt;.Element&lt;w10&gt;.Index&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; conforms to &lt;c11&gt;Hashable&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Collection&lt;/c1&gt;に準拠する、&lt;c2&gt;Base&lt;w3&gt;.Element&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Collection&lt;/c4&gt;に準拠する、&lt;c5&gt;Base&lt;w6&gt;.Index&lt;/w6&gt;&lt;/c5&gt;が&lt;c7&gt;Hashable&lt;/c7&gt;に準拠する、そして&lt;c8&gt;Base&lt;w9&gt;.Element&lt;w10&gt;.Index&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;が&lt;c11&gt;Hashable&lt;/c11&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Contiguous&lt;w2&gt;Bytes&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Contiguous&lt;w2&gt;Bytes&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Data&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Data&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Lazy&lt;w2&gt;Sequence&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Lazy&lt;w2&gt;Sequence&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Mutable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Base&lt;/c0&gt; conforms to &lt;c1&gt;Range&lt;w2&gt;Replaceable&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Base&lt;/c0&gt;が&lt;c1&gt;Range&lt;w2&gt;Replaceable&lt;w3&gt;Collection&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;, &lt;c2&gt;Bound&lt;/c2&gt; conforms to &lt;c3&gt;Strideable&lt;/c3&gt;, and &lt;c4&gt;Bound&lt;w5&gt;.Stride&lt;/w5&gt;&lt;/c4&gt; conforms to &lt;c6&gt;Signed&lt;w7&gt;Integer&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する、&lt;c2&gt;Bound&lt;/c2&gt;が&lt;c3&gt;Strideable&lt;/c3&gt;に準拠する、そして&lt;c4&gt;Bound&lt;w5&gt;.Stride&lt;/w5&gt;&lt;/c4&gt;が&lt;c6&gt;Signed&lt;w7&gt;Integer&lt;/w7&gt;&lt;/c6&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Bound&lt;/c0&gt; conforms to &lt;c1&gt;Strideable&lt;/c1&gt; and &lt;c2&gt;Bound&lt;w3&gt;.Stride&lt;/w3&gt;&lt;/c2&gt; conforms to &lt;c4&gt;Signed&lt;w5&gt;Integer&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Bound&lt;/c0&gt;が&lt;c1&gt;Strideable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Bound&lt;w3&gt;.Stride&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;Signed&lt;w5&gt;Integer&lt;/w5&gt;&lt;/c4&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt; conforms to &lt;c2&gt;Hashable&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Change&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Element&lt;/c0&gt; is &lt;c1&gt;UInt8&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;が&lt;c1&gt;UInt8&lt;/c1&gt;である場合に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Failure&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Failure&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;First&lt;/c0&gt; conforms to &lt;c1&gt;Gesture&lt;/c1&gt;, &lt;c2&gt;Second&lt;/c2&gt; conforms to &lt;c3&gt;Gesture&lt;/c3&gt;, &lt;c4&gt;First&lt;w5&gt;.Value&lt;/w5&gt;&lt;/c4&gt; conforms to &lt;c6&gt;Hashable&lt;/c6&gt;, and &lt;c7&gt;Second&lt;w8&gt;.Value&lt;/w8&gt;&lt;/c7&gt; conforms to &lt;c9&gt;Hashable&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;First&lt;/c0&gt;が&lt;c1&gt;Gesture&lt;/c1&gt;に準拠する、&lt;c2&gt;Second&lt;/c2&gt;が&lt;c3&gt;Gesture&lt;/c3&gt;に準拠する、&lt;c4&gt;First&lt;w5&gt;.Value&lt;/w5&gt;&lt;/c4&gt;が&lt;c6&gt;Hashable&lt;/c6&gt;に準拠する、そして&lt;c7&gt;Second&lt;w8&gt;.Value&lt;/w8&gt;&lt;/c7&gt;が&lt;c9&gt;Hashable&lt;/c9&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;ID&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ID&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Success&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; conforms to &lt;c3&gt;Equatable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Equatable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Success&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt; and &lt;c2&gt;Failure&lt;/c2&gt; conforms to &lt;c3&gt;Hashable&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Success&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠するそして&lt;c2&gt;Failure&lt;/c2&gt;が&lt;c3&gt;Hashable&lt;/c3&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Value&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Value&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Decodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Decodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Encodable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Encodable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Equatable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Gesture&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Gesture&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;Hashable&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conforms when &lt;c0&gt;Wrapped&lt;/c0&gt; conforms to &lt;c1&gt;View&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Wrapped&lt;/c0&gt;が&lt;c1&gt;View&lt;/c1&gt;に準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider an app that requires a user to log into an account.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユーザがアカウントにログインするように要求するアプリを考えください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Construct with value &lt;c0&gt;v&lt;w1&gt;.value&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;v&lt;w1&gt;.value&lt;/w1&gt;&lt;/c0&gt;を使って組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Constructs an instance that can be used to begin parsing &lt;c0&gt;Code&lt;w1&gt;Unit&lt;/w1&gt;&lt;/c0&gt;s at any Unicode scalar boundary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインスタンスを組み立てます、それは&lt;c0&gt;Code&lt;w1&gt;Unit&lt;/w1&gt;&lt;/c0&gt;の構文解析を何らかのユニコードスカラー境界で開始するのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consult the IEEE 754 standard for additional details.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>IEEE 754標準をさらなる詳細として参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contains a buffer object, and provides access to an instance of &lt;c0&gt;Header&lt;/c0&gt; and contiguous storage for an arbitrary number of &lt;c1&gt;Element&lt;/c1&gt; instances stored in that buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファオブジェクトを収容します、そして&lt;c0&gt;Header&lt;/c0&gt;のインスタンスへのアクセスおよびそのバッファに格納される随意の数の&lt;c1&gt;Element&lt;/c1&gt;インスタンスの隣接保管を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contiguous strings also benefit from fast-paths and better optimizations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接文字列はまた、高速パスそしてより良い最適化から利益を得ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contiguous strings always operate in O(1) time for withUTF8 and always give a result for String.UTF8View.withContiguousStorageIfAvailable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隣接文字列は常に O(1) 時間で withUTF8 に対して作動します、そして常に String.UTF8View.withContiguousStorageIfAvailable に対して結果を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Continuation bytes take the form &lt;c0&gt;0b10xxxxxx&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継続バイトは、形式&lt;c0&gt;0b10xxxxxx&lt;/c0&gt;を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversely, the comparison returns &lt;c4&gt;false&lt;/c4&gt; if only one of the arguments is &lt;c5&gt;nil&lt;/c5&gt; or if the two arguments wrap values that are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>反対に、この比較が&lt;c4&gt;false&lt;/c4&gt;を返すのは、引数のうち１つだけが&lt;c5&gt;nil&lt;/c5&gt;であるか、２つの引数が等しくない値をラップする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert Unmanaged Objects to Memory-Managed Objects</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されないオブジェクトをメモリ管理オブジェクトに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert the Throwing Expression to a Result</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローする式を結果へと変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert your pointer to an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance and then use the raw pointer’s &lt;c4&gt;load(from&lt;w5&gt;Byte&lt;w6&gt;Offset:&lt;w7&gt;as:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; and &lt;c8&gt;store&lt;w9&gt;Bytes(of:&lt;w10&gt;to&lt;w11&gt;Byte&lt;w12&gt;Offset:&lt;w13&gt;as:)&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; methods to read and write values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのポインタを&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスに変換して、それから生のポインタのもつ&lt;c4&gt;load(from&lt;w5&gt;Byte&lt;w6&gt;Offset:&lt;w7&gt;as:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;と&lt;c8&gt;store&lt;w9&gt;Bytes(of:&lt;w10&gt;to&lt;w11&gt;Byte&lt;w12&gt;Offset:&lt;w13&gt;as:)&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;メソッドを使って値を読み書きしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convert your pointer to an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance and then use the raw pointer’s &lt;c3&gt;load(from&lt;w4&gt;Byte&lt;w5&gt;Offset:&lt;w6&gt;as:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; method to read values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのポインタを&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスに変換して、それから生のポインタのもつ&lt;c3&gt;load(from&lt;w4&gt;Byte&lt;w5&gt;Offset:&lt;w6&gt;as:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドを使って値を読みだしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Floating-Point Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Numeric Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Other Types to Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の型を文字列に変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting a C String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C文字列を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting a Result to a Throwing Expression</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果をスローする式へ変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting a Substring to a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SubstringをStringに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting a Throwing Expression to a Result</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローする式を結果へ変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converting with No Loss of Precision</seg>
      </tuv>
      <tuv lang="ja">
        <seg>精度の損失なしに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts a scalar from another encoding’s representation, returning &lt;c0&gt;nil&lt;/c0&gt; if the scalar can’t be represented in this encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーを別の符号化のもつ表現から変換します、&lt;c0&gt;nil&lt;/c0&gt;を返します、もしそのスカラーがこの符号化で表現されることができないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts a typed &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to an opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付けされた&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を不透明Cポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts a typed &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; to an opaque C pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付けされた&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;を不透明Cポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts from encoded to encoding-independent representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化から符号化独立の表現へと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Converts from encoding-independent to encoded representation, returning &lt;c0&gt;nil&lt;/c0&gt; if the scalar can’t be represented in this encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化独立から符号化表現へと変換します、&lt;c0&gt;nil&lt;/c0&gt;を返します、もしそのスカラーがこの符号化で表現されることができないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies from a collection of &lt;c0&gt;UInt8&lt;/c0&gt; into this buffer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt8&lt;/c0&gt;からなるコレクションからこのバッファのメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies the bytes from the given buffer to this buffer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたバッファからバイトをこのバッファの持つメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies the specified number of bytes from the given raw pointer’s memory into this pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた生のポインタの持つメモリからこのポインタの持つメモリに指定されたバイト数をコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a value of type &lt;c3&gt;Unsafe&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; does not copy the instances stored in the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c3&gt;Unsafe&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の値をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a value of type &lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Buffer&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; does not copy the instances stored in the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Buffer&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;の値をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a variable or constant of type &lt;c4&gt;Unsafe&lt;w5&gt;Raw&lt;w6&gt;Buffer&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; does not copy the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c4&gt;Unsafe&lt;w5&gt;Raw&lt;w6&gt;Buffer&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;の変数や定数をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying a variable or constant of type &lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Raw&lt;w8&gt;Buffer&lt;w9&gt;Pointer&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; does not copy the underlying memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Raw&lt;w8&gt;Buffer&lt;w9&gt;Pointer&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;の変数や定数をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying an iterator is safe, but advancing one copy of an iterator by calling its &lt;c2&gt;next()&lt;/c2&gt; method may invalidate other copies of that iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるイテレータをコピーすることは安全です、しかしあるインスタンスの１つのコピーをそれのメソッド&lt;c2&gt;next()&lt;/c2&gt;メソッドを呼び出すことによって前に進めることは、そのイテレータの他のコピーを無価値にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying bytes directly from nontrivial, in-memory values does not produce valid copies and can only be done by calling a C API, such as &lt;c1&gt;memmove()&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない、メモリ中の値から直接にバイトをコピーすることは、有効なコピーを生成しません、そして&lt;c1&gt;memmove()&lt;/c1&gt;のようなC APIを呼び出すことでのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying memory that contains values of nontrivial types can only be done safely with a typed pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない型の値を含むメモリをコピーすることは、型付ポインタでのみ安全になされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Core Foundation objects returned from annotated APIs are automatically memory-managed in Swift—you don't need to invoke the &lt;c0&gt;CFRetain&lt;/c0&gt;, &lt;c1&gt;CFRelease&lt;/c1&gt;, or &lt;c2&gt;CFAutorelease&lt;/c2&gt; functions yourself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注釈をつけられたAPIから返されるCore Foundationオブジェクトは、自動的にSwiftにおいてメモリ管理されます ― あなたは、&lt;c0&gt;CFRetain&lt;/c0&gt;、&lt;c1&gt;CFRelease&lt;/c1&gt;、または&lt;c2&gt;CFAutorelease&lt;/c2&gt;関数をあなた自身で呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a Swift class for your corresponding Objective-C .m and .h files by choosing File &gt; New &gt; File &gt; (iOS, watchOS, tvOS, or macOS) &gt; Source &gt; Swift File.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるSwiftクラスをあなたの対応するObjective-C .m と .h ファイルに対して、「File &gt; New &gt; File &gt; (iOS、watchOS、tvOS、またはmacOS) &gt; Source &gt; Swift File」を選択することによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a collection of all the values in a range by using the half-open (&lt;c0&gt;..&lt;&lt;/c0&gt;) and closed (&lt;c1&gt;...&lt;/c1&gt;) range operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の中のすべての値からなる１つのコレクションを半開（&lt;c0&gt;..&lt;&lt;/c0&gt;）および完結（&lt;c1&gt;...&lt;/c1&gt;）範囲演算子を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a new instance of the most-derived class, calling &lt;c0&gt;factory&lt;/c0&gt; on the partially-constructed object to generate an initial &lt;c1&gt;Header&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も派生したクラスの新しいインスンタスを作成します、部分的に組み立てられたオブジェクト上で&lt;c0&gt;factory&lt;/c0&gt;を呼び出して初期&lt;c1&gt;Value&lt;/c1&gt;を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a new range using the half-open range operator (&lt;c0&gt;..&lt;&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい範囲を半開範囲演算子（&lt;c0&gt;..&lt;&lt;/c0&gt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a slice of the &lt;c0&gt;absences&lt;/c0&gt; array that holds the second half of the days.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>学期後半の日付を保持する、&lt;c0&gt;absences&lt;/c0&gt;配列のスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create a stride that steps over values between two boundaries using the &lt;c0&gt;stride(from:&lt;w1&gt;to:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;stride(from:&lt;w4&gt;through:&lt;w5&gt;by:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの境界の間の値をまたぐストライドを&lt;c0&gt;stride(from:&lt;w1&gt;to:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;および&lt;c3&gt;stride(from:&lt;w4&gt;through:&lt;w5&gt;by:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;関数を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create new instances of floating-point types using integer or floating-point literals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型の新しいインスタンスを、整数または浮動小数点リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Create with new storage containing an initial &lt;c0&gt;Header&lt;/c0&gt; and space for at least &lt;c1&gt;minimum&lt;w2&gt;Capacity&lt;/w2&gt;&lt;/c1&gt; &lt;c3&gt;element&lt;/c3&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある初期&lt;c0&gt;Header&lt;/c0&gt;と少なくとも&lt;c1&gt;minimum&lt;w2&gt;Capacity&lt;/w2&gt;&lt;/c1&gt; &lt;c3&gt;element&lt;/c3&gt;に対する空間を格納している新しいストレージを使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a 64-bit integer from another integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある64ビット整数をデータ値の中にラップされる別の整数から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a NaN (“not a number”) value with the specified payload.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたペイロードをもつNaN（「非数」）値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a String having the given content.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた内容を持っているあるStringを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Substring having the given content.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた内容を持っているSubstringを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Unicode scalar with the specified numeric value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a Unicode scalar with the specified value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a buffer over the same memory as the given buffer slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたバッファスライスと同じメモリのすべてを覆うバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a buffer over the specified number of contiguous bytes starting at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の隣接バイトすべてを覆うバッファを、与えられたポインタで開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a collection containing the specified number of the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の与えられた要素を含んでいるコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a duplicate of the given Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーの複製を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mirror representing the given subject using a dictionary literal for the structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた主題を表すミラーを、その構造体のための辞書リテラルを使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mirror representing the given subject with a specified structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた主題を表すミラーを指定の構造体で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mirror representing the given subject with unlabeled children.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた主題を表すミラーを幾つかのラベルを付けられない子で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mirror that reflects on the given instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスを反映するミラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mutable typed buffer pointer referencing the same memory as the given immutable buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の型付バッファポインタを作成します、与えられた不変バッファポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a mutable typed pointer referencing the same memory as the given immutable pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変の型付ポインタを作成します、与えられた不変ポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance from the given dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを与えられた辞書リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new buffer over the same memory as the given buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたバッファと同じメモリのすべてを覆う新しいバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new buffer pointer over the specified number of contiguous instances beginning at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたポインタで始まっている指定された数の隣接インスタンスすべてを覆う新しいバッファポインタを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new canonical combining class with the given raw integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい正準結合クラスをこの与えられた生の整数値で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of a collection and a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションとあるシーケンスの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of a sequence and a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスとあるコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection by concatenating the elements of two collections.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new collection containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new floating-point value using the sign of one value and the magnitude of another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の符号ともう一方の規模とを使って新しい浮動小数点値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいハーシャーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new index at the specified UTF-16 code unit offset</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインデックスをこの指定されたUTFー16コード単位オフセットで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new index at the specified code unit offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインデックスをこの指定されたコード単位オフセットで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new index into a reversed collection for the position before the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>逆にされたコレクションへのある新しいインデックスを、指定されたインデックスの前の位置に対して、作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Bool&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Bool&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Double&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Double&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Float&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Float&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int16&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int16&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int32&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int32&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int64&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int64&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int8&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int8&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;String&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;String&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt16&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt16&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt32&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt32&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt64&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt64&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt8&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt8&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つ&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたデコーダからデコードすることで新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from an interpolated string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスを補間文字列リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もしこの型に適合するのに必要ならば切り詰めるか符号拡張によって、指定インスタンスのビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given integer, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数から新しいインスタンスを作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスをこの与えられた値から作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the given value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値から新しいインスタンスを作成します、最も近い可能な表現に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance from the specified sign and bit patterns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された符号とビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance initialized to the given value, if it can be represented without rounding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが丸めなしに表されるならば、与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance of a collection containing the elements of a sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素を含んでいるあるコレクションの新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance of the system’s default random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システムの持つ省略時の無作為数生成子の新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance that approximates the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値におおよそ相当する新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the given container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコンテナで新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the representable value that’s closest to the given integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数に最も近い表現可能な値を使って新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the same memory representation as the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値と同じメモリ表現で新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new instance with the specified raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された生の値を持つ新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new integer value from the given string and radix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列と基数から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new integer value from the given string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new mutable buffer over the same memory as the given buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたバッファと同じメモリを覆う新しい可変バッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new mutable raw pointer from the given immutable raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい可変の生のポインタを与えられた不変の生のポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new option set from the given raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた生の値から新しいオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new raw pointer from an &lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい生のポインタを&lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new raw pointer from the given mutable raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい生のポインタを与えられた可変の生のポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new raw pointer from the given typed pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい生のポインタを与えられた型付ポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new result by evaluating a throwing closure, capturing the returned value as a success, or any thrown error as a failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい結果を、あるスローするクロージャを評価することによって作成します、返される値をある成功としてキャプチャしています、または何からのスローされたエラーをある失敗として。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new set by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたデコーダからデコードすることで新しい集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new set from a finite sequence of items.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの要素からなる有限のシーケンスから集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string by copying and validating the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーして検証することによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string by copying the null-terminated data referenced by the given pointer using the specified encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のデータをコピーすることによって作成します、指定された符号化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string containing the characters in the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中のそれら文字を含んでいるある新しい文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string from the given substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列を与えられた下位文字列から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string representing the given string repeated the specified number of times.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された回数繰り返された与えられた文字列を表している新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new string with the specified capacity in UTF-8 code units, and then calls the given closure with a buffer covering the string’s uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字列をUTF-8コード単位でのこの指定された収納能力で作成します、それから与えられたクロージャを、文字列のもつ初期化されないメモリを扱うバッファで呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロに等しい新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value from the given sign, exponent, and significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた符号、指数、そして仮数から新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value with the bit pattern of the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタのビットパターンで新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value with the given bit pattern.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたビットパターンから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value, if the given integer can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数が正確に表現できるならば、新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値を作成します、最も近い可能な表現へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector by decoding scalars from the given decoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられたデコーダからスカラーをデコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from the given elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられた要素それらから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from the given vector of floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられた浮動小数点値のベクターから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from the given vector of integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターを整数からなるこの与えられたベクターから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from the given vector, clamping the values of the given vector’s elements if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられたベクターから作成します、与えられたベクターのもつ要素の値を必要に応じてクランプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from the given vector, rounding the given vector’s of elements using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられたベクターから作成します、与えられたベクターのもつ要素を指定された丸め規則を使って丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from the given vector, truncating the bit patterns of the given vector’s elements if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターをこの与えられたベクターから作成します、与えられたベクターのもつ要素のビットパターンを必要に応じて切り詰めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new vector from two half-length vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しいベクターは２つの半分長のベクターから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a new, empty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい、空のコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a publisher that delivers the specified output and finishes normally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された出力を配達して通常に終了するパブリッシャーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a publisher that delivers the specified result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された結果を配達するあるパブリッシャーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a publisher that immediately terminates upon subscription with the given failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この与えられた失敗で定期購読上で直ぐに終了するパブリッシャーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a raw buffer over the contiguous bytes in the given typed buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された型付バッファの中の隣接バイトすべてを覆う生のバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a raw buffer over the same memory as the given raw buffer slice, with the indices rebased to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた生のバッファスライスと同じメモリのすべてを覆う生のバッファを作成します、ゼロに再配置されたインデックスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a sequence that presents the elements of &lt;c0&gt;base&lt;/c0&gt; sequences concatenated using &lt;c1&gt;separator&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンス、それは&lt;c0&gt;base&lt;/c0&gt;シーケンスたちの要素を、与えられた&lt;c1&gt;separator&lt;/c1&gt;を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a set containing the elements of the given array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた配列リテラルの要素を含んでいる集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string containing the given character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字を含んでいる文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string corresponding to the given collection of Unicode scalars.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたユニコードスカラーのコレクションに対応する文字列を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string corresponding to the given sequence of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたUTF-16コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string corresponding to the given sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたUTF-8コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from another string wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列をデータ値の中にラップされる別の文字列から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from the given Unicode code units in the specified encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコード単位から指定されたエンコーディングで文字列を作成する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from the null-terminated sequence of bytes at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタでのnull終端のバイトシーケンスから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string from the null-terminated, UTF-8 encoded sequence of bytes at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたポインタでの、null終端の、UTF-8エンコードされたバイトシーケンスから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string representing the given character repeated the specified number of times.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された回数繰り返された与えられた文字を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string representing the given value in base 10, or some other specified base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値を底10、または何か他の指定の底で表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string representing the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a string with a detailed representation of the given value, suitable for debugging.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値の詳細な表現での文字列を作成します、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a value initialized to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロに初期化される値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector from the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターをこの与えられたシーケンスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector from the specified elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターをこの指定された要素それらから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a vector with zero in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるベクターを全レーンにおいてゼロで作成します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a view into the given collection that allows access to elements within the specified range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコレクションに関するあるビューを作成します、それは指定された範囲の内の要素にアクセスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an &lt;c0&gt;Opaque&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; from a given address in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中の与えられたアドレスから&lt;c0&gt;Opaque&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty instance ready to be filled with string literal content.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラル内容で満たされる準備ができている空のインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty set with preallocated space for at least the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の集合を、あらかじめアロケートされたスペースで少なくとも指定された要素数に対して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty static string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の静的文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の下位文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an empty view instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のビューインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an immutable typed buffer pointer referencing the same memory as the given mutable buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不変の型付バッファポインタを作成します、与えられた可変バッファポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an immutable typed pointer referencing the same memory as the given mutable pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不変の型付ポインタを作成します、与えられた可変ポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given UTF-16 view that corresponds exactly to the specified string position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-16ビューの中のあるインデックスを作成します、それは指定された文字列位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given UTF-8 view that corresponds exactly to the specified &lt;c0&gt;UTF16View&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-8ビューの中のあるインデックスを作成します、それは指定された&lt;c0&gt;UTF16View&lt;/c0&gt;位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given Unicode scalars view that corresponds exactly to the specified &lt;c0&gt;UTF16View&lt;/c0&gt; position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラービューの中のあるインデックスを作成します、それは指定された&lt;c0&gt;UTF16View&lt;/c0&gt;位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an index in the given string that corresponds exactly to the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列の中のあるインデックスを作成します、それは指定された位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance equivalent to the given &lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた&lt;c0&gt;Closed&lt;w1&gt;Range&lt;/w1&gt;&lt;/c0&gt;と等しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance from the description of a given &lt;c0&gt;Lossless&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた&lt;c0&gt;Lossless&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスの叙述からインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to a single Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある単一のユニコードスカラーへと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to a single character that is made up of one or more Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ひとつ以上のユニコードスカラー値でできているある単一の文字へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given string value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列値へ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the specified floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された浮動小数点値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the specified integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された整数値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized to the value of a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルの値へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance initialized with &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;nil&lt;/c0&gt;で初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the UTF-16 codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the UTF-32 codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-32コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the UTF-8 codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance of the codec.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance that stores the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値を格納するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance that uniquely identifies the given class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクラスインスタンスを固有に識別するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance that uniquely identifies the given metatype.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたメタタイプを固有に識別するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance whose iterator is a copy of &lt;c0&gt;base&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのイテレータが&lt;c0&gt;base&lt;/c0&gt;のコピーであるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an instance with the given bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた境界を使ってインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from another integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数をデータ値の中にラップされる別の整数から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from its big-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのビッグエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from its little-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのリトルエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from the given floating-point value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値から整数を作成します、もしそれが正確に表現可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer from the given floating-point value, rounding toward zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値から整数を作成します、ゼロへの丸めを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an integer that captures the full value of the given object identifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクト識別子の完全な値を捕獲する整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an iterator that presents the elements of the sequences traversed by &lt;c0&gt;base&lt;/c0&gt;, concatenated using &lt;c1&gt;separator&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるイテレータ、それは&lt;c0&gt;Base&lt;/c0&gt;によって辿っていかれるいくらかのシーケンスに属するいくらかの要素を、&lt;c1&gt;separator&lt;/c1&gt;を使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an unbounded range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限範囲式を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an unmanaged reference with an unbalanced retain.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されない参照を不均衡なリテイン（保持）で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates an unmanaged reference without performing an unbalanced retain.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されない参照を不均衡なリテイン（保持）を実行することなしに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating Ranges of Scalars</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの範囲を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Buffer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Generator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成子を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Hasher</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a New Collection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいコレクションの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Nil Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil値の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Random Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為な整数を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Random Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為な値を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Range Expression</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String Using Formats</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を様々な形式を使って作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String from Unicode Data</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列をユニコードデータから作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a String from a File or URL</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルまたはURLから文字列を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating an Iterator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating an Optional Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル値の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating an Unbounded Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限範囲の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating and Applying Differences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>差異の作成と適用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating and iterating over a &lt;c0&gt;Countdown&lt;/c0&gt; sequence uses a &lt;c1&gt;Countdown&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt; to handle the iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Countdown&lt;/c0&gt;シーケンス全体にわたっての作成や反復は、その反復を取り扱う&lt;c1&gt;Countdown&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Encoding and Decoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>カスタムエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C APIのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIをカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Your C Code for Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのCコードをSwift用にカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Your Type's Reflection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のリフレクションのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Data Flow and Control Flow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データの流れと制御の流れ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deallocates the memory block previously allocated at this buffer pointer’s base address.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのもつベースアドレスで以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deallocates the memory block previously allocated at this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deallocates the previously allocated memory block referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照された以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Debugging and Reflection</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグとリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decimal floating-point types admit a large number of non-canonical encodings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>10進浮動小数点型は、多数の非正準エンコーディングを認めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declarations marked with the &lt;c3&gt;private&lt;/c3&gt; or &lt;c4&gt;fileprivate&lt;/c4&gt; modifier don't appear in the generated header, and aren't exposed to the Objective-C runtime unless they are explicitly marked with a &lt;c5&gt;@IBAction&lt;/c5&gt;, &lt;c6&gt;@IBOutlet&lt;/c6&gt;, or &lt;c7&gt;@objc&lt;/c7&gt; attribute.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;private&lt;/c3&gt;または&lt;c4&gt;fileprivate&lt;/c4&gt;修飾子で印された宣言は生成されたヘッダに現れません、そしてObjective-Cランタイムに露出されません、それらが明示的に&lt;c5&gt;@IBAction&lt;/c5&gt;、&lt;c6&gt;@IBOutlet&lt;/c6&gt;、または&lt;c7&gt;@objc&lt;/c7&gt;属性で印されない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare Closed Enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare Option Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセットを宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare Simple Enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純な列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare Typed Enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付き列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare Typed Extensible Enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付き拡張可能列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare a &lt;c2&gt;next()&lt;/c2&gt; method that advances one step in the related sequence and returns the current element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;next()&lt;/c2&gt;メソッドを宣言してください、それは関連シーケンスにおいて一歩前へ進みます、そして現在の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare additional preconfigured option set values as static properties initialized with an array literal containing other option values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加のあらかじめ構成されるオプションセット値を、他のオプション値を含んでいる配列リテラルで初期化される静的プロパティとして宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare simple macros as global constants, and translate complex macros into functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純なマクロをグローバルな定数として宣言してください、そして複雑なマクロを関数へと翻訳してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decoders should provide types conforming to &lt;c0&gt;Unkeyed&lt;w1&gt;Decoding&lt;w2&gt;Container&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for their format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらデコーダーは、それらの形式に対して&lt;c0&gt;Unkeyed&lt;w1&gt;Decoding&lt;w2&gt;Container&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠する型を提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a nested container and returns a &lt;c0&gt;Decoder&lt;/c0&gt; instance for decoding &lt;c1&gt;super&lt;/c1&gt; from that container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ子にされたコンテナをデコードして、デコードする&lt;c0&gt;super&lt;/c0&gt;に対する&lt;c1&gt;Decoder&lt;/c1&gt;インスタンスをそのコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a nested container keyed by the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型によってキー付けされる入れ子にされたコンテナをデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a null value for the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対してnull値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a null value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a single value of the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の単一の値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a value of the given type for the given key, if present.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された型の値を与えられたキーに対してデコードします、もし存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a value of the given type for the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された型の値を与えられたキーに対してデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a value of the given type, if present.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の値をデコードします、もし存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes a value of the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decodes an unkeyed nested container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付けされない入れ子にされたコンテナをデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decoding Containers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーディングコンテナ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decoding a Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をデコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Literal Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時のリテラル型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Types for Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リラテルのための省略時の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default implementation provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default implementations provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default-ignorable code points are those that should be ignored by default in rendering (unless explicitly supported).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時無視可能なコード点は、初期状態では描画において無視されるべきです（明示的にサポートされる場合を除いて）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deinitializes the specified number of values starting at this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで開始して、指定された数の値をデイニシャライズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deinitializing typed memory does not unbind that memory’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付メモリのデイニシャライズは、そのメモリの型を束縛解除しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Denote instance (&lt;c0&gt;-&lt;/c0&gt;) and class (&lt;c1&gt;+&lt;/c1&gt;) methods with &lt;c2&gt;func&lt;/c2&gt; and &lt;c3&gt;class func&lt;/c3&gt;, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス（&lt;c0&gt;-&lt;/c0&gt;）およびクラス（&lt;c1&gt;+&lt;/c1&gt;）メソッドであることを、それぞれ&lt;c2&gt;func&lt;/c2&gt;および&lt;c3&gt;class func&lt;/c3&gt;で示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the size and span of &lt;c2&gt;range&lt;/c2&gt;, some concrete values may be represented more frequently than others.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;range&lt;/c2&gt;の大きさと幅に依存して、いくつかの具体的な値は他のものよりずっと頻繁に表現されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the size and span of &lt;c3&gt;range&lt;/c3&gt;, some concrete values may be represented more frequently than others.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;range&lt;/c3&gt;の大きさと幅に依存して、いくつかの具体的な値は他のものよりずっと頻繁に表現されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てるまたは全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested, or to take no action at all.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てること、または全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deprecated</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非推奨</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Float</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floatを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるSetの記述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describing an Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="ja">
        <seg>説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Designating Nullability in Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIにおいてヌル可能性を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diacritic nukta marks in Brahmi-derived scripts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブラーフミー派生書体における発音区別ヌクタ記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diacritic virama marks in Brahmi-derived scripts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブラーフミー派生書体における発音区別ヴィラーマ記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diacritics are scalars that linguistically modify the meaning of another scalar to which they apply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら区別的発音符は、それに対してそれらが適用される、別のスカラーの意味を言語学的に修正するスカラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Diagram showing the steps to import Objective-C declarations into Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>図はObjective-C宣言をSwiftコードにインポートする行程を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Different keyed containers from the same &lt;c0&gt;Decoder&lt;/c0&gt; may return different keys here; it is possible to encode with multiple key types which are not convertible to one another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じ&lt;c0&gt;Decoder&lt;/c0&gt;からの異なるキー付けコンテナは、異なるキーをここで返すかもしれません；互いに変換できないところの複数のキー型を使ってエンコードすることは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Different keyed containers from the same decoder may return different keys here, because it is possible to encode with multiple key types which are not convertible to one another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じデコーダからの異なるキー付けコンテナは、異なるキーをここで返すかもしれません、なぜなら互いに変換できないところの複数のキー型を使ってエンコードすることは可能だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Digest Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Digest実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Discussion</seg>
      </tuv>
      <tuv lang="ja">
        <seg>解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the bottom left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左下での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the bottom right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右下での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the top left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左上での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks at the top right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右上での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks directly above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直上の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks directly below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直下の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks extending above two bases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの基盤の上に延びる別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks subtending two bases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの基盤に対する別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distinct marks to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divide</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divide and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Divides the first value by the second and stores the remainder in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算して、余りを左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dividing by zero is not an error when using this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロによる除算は、このメソッドを使う場合はエラーではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not advance the iterator or any copies of the iterator outside this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータやなんらかのイテレータのなんらかのコピーをこのメソッドの外側で前進させないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not assign an instance of a nontrivial type through &lt;c0&gt;pointee&lt;/c0&gt; to uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない型のインスタンスを、未初期化メモリへの&lt;c0&gt;pointee&lt;/c0&gt;を通してアサインしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not assign an instance of a nontrivial type through the subscript to uninitialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>自明でない型のインスタンスを未初期化メモリへの添え字を通してアサインしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not call this initializer directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not declare new conformances to &lt;c0&gt;String&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい準拠事項を&lt;c0&gt;String&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;に宣言しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not declare new conformances to this protocol; they will not work as expected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい準拠事項をこのプロトコルに宣言しないでください；
それは期待するようには機能しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not persist the pointer and access it after the function has returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのポインタに固執すること、そして関数が帰った後でそれにアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not rely on a previously stored index value after altering a collection with any operation that can change its length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションをそれの長さを変える何らかの演算で手直し後に、以前に格納されたインデックス値を当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not save hash values to use during a future execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>将来の実行の間に使うためにハッシュ値を保存しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not save or otherwise reuse hash values across executions of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのプログラムの実行それらにまたがってハッシュ値を保存または別なふうに再利用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not store or return the pointer for later use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後で使うためにポインタを格納したり返したりしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Do not use this property to check whether a floating point value is negative.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを使って、ある浮動小数点値が負かどうか調べないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Doing so crashes your app:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうすることはあなたのアプリをクラッシュさせます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Doing so may become a compile-time error in the future.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうすることは、コンパイル時エラーに将来はなるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don't Put Critical Code in a Closure That Might Not Be Called</seg>
      </tuv>
      <tuv lang="ja">
        <seg>呼び出されないかもしれないクロージャの中に重大なコードを置かないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don't Spread State Across Multiple Variables</seg>
      </tuv>
      <tuv lang="ja">
        <seg>状態を複数の変数に渡って広げないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don't Write Code That Makes a One-Time Change in a Closure That's Called Multiple Times</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一回限りの変更をするコードを複数回呼び出されるクロージャの中に書かないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don't use the &lt;c0&gt;NS&lt;w1&gt;_CLOSED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro if:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_CLOSED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使わないでください、もし：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t actually use &lt;c0&gt;map&lt;/c0&gt; for this purpose, however, because it creates and discards the resulting array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、実際に&lt;c0&gt;map&lt;/c0&gt;をこの目的のために使わないでください、なぜならそれは結果の配列を作成してそして放棄するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t call this initializer directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを直に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t call this method directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを直に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t delete the &lt;c1&gt;.m&lt;/c1&gt; and &lt;c2&gt;.h&lt;/c2&gt; files immediately; use them to troubleshoot.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;.m&lt;/c1&gt;と&lt;c2&gt;.h&lt;/c2&gt;ファイルを直ぐに削除しないでください；それらを不具合対処のために使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t store substrings longer than you need them to perform a specific operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列を、あなたが特定の演算の実行にそれらを必要とするより長く、貯蔵しておかないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don’t use the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) to test whether a value is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等演算子（&lt;c0&gt;==&lt;/c0&gt;を使ってある値がNaNかどうかをテストしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Downcast Objects to Call Methods and Access Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトをダウンキャストしてメソッドの呼び出しおよびプロパティにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Download the playground below to get started.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドを下でダウンロードして始めましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dumps the given object’s contents using its mirror to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って標準出力にダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dumps the given object’s contents using its mirror to the specified output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って指定出力ストリームにダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>During instance creation, in particular during &lt;c0&gt;Managed&lt;w1&gt;Buffer&lt;w2&gt;.create&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;’s call to initialize, &lt;c3&gt;Managed&lt;w4&gt;Buffer&lt;/w4&gt;&lt;/c3&gt;’s &lt;c5&gt;header&lt;/c5&gt; property is as-yet uninitialized, and therefore reading the &lt;c6&gt;header&lt;/c6&gt; property during &lt;c7&gt;Managed&lt;w8&gt;Buffer&lt;w9&gt;.create&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス作成の間、特に&lt;c0&gt;Managed&lt;w1&gt;Buffer&lt;w2&gt;.create&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;でのイニシャライザ呼び出しの間、&lt;c3&gt;Managed&lt;w4&gt;Buffer&lt;/w4&gt;&lt;/c3&gt;の&lt;c5&gt;header&lt;/c5&gt;プロパティは今の所まだイニシャライズされていません、そしてそれゆえ&lt;c6&gt;header&lt;/c6&gt;プロパティを読み出すことは&lt;c7&gt;Managed&lt;w8&gt;Buffer&lt;w9&gt;.create&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;の間は未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dynamic Sequences</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的なシーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type has an associated &lt;c4&gt;String&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/c4&gt; type which conforms to &lt;c6&gt;String&lt;w7&gt;Interpolation&lt;w8&gt;Protocol&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それぞれの&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型は、ある結び付けられた&lt;c4&gt;String&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/c4&gt;型を持ちそれは&lt;c6&gt;String&lt;w7&gt;Interpolation&lt;w8&gt;Protocol&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each &lt;c0&gt;Unicode&lt;w1&gt;Decoding&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance can represent a Unicode scalar value, an indication that no more Unicode scalars are available, or an indication of a decoding error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各&lt;c0&gt;Unicode&lt;w1&gt;Decoding&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスは、ユニコードスカラー値、これ以上利用可能なユニコードスカラーがないしるし、またはデコードエラーのしるしとして表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each bit of &lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the &lt;c2&gt;Option&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;の各ビットは、潜在的にオプションセットの１つの要素を表します、けれども生の値は他とまったく異なった&lt;c2&gt;Option&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt;型の値として定義されないビットを含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each byte in memory is viewed as a &lt;c4&gt;UInt8&lt;/c4&gt; value independent of the type of values held in that memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中の各バイトは、そのメモリ中に保持される値の型に影響を受けない&lt;c4&gt;UInt8&lt;/c4&gt;値として眺められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each byte in memory is viewed as a &lt;c5&gt;UInt8&lt;/c5&gt; value independent of the type of values held in that memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ中の各バイトは、そのメモリ中に保持される値の型に影響を受けない&lt;c5&gt;UInt8&lt;/c5&gt;値として眺められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each call to &lt;c4&gt;next()&lt;/c4&gt; must produce a uniform and independent random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;next()&lt;/c4&gt;への各呼び出しは、一様で独立した無作為値を生成しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each code unit is stored as a &lt;c1&gt;UInt16&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各コード単位は&lt;c1&gt;UInt16&lt;/c1&gt;インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each code unit is stored as a &lt;c1&gt;UInt8&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各コード単位は&lt;c1&gt;UInt8&lt;/c1&gt;インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each element of a string is represented by a &lt;c2&gt;Character&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の各要素は、ある&lt;c2&gt;Character&lt;/c2&gt;インスタンスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each floating-point type has its own possible range and precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各浮動小数点型は、それ独自の可能な範囲と精度を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each ill-formed sequence is replaced with a Unicode replacement character (&lt;c3&gt;"\u{FFFD}"&lt;/c3&gt;) and is measured as such.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各誤形式シーケンスは、ユニコード代替文字（&lt;c3&gt;"\u{FFFD}"&lt;/c3&gt;）で置き換えられます、そしてそういったものとして測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each integer argument selects the child at that offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各整数引数は、子をそのオフセットで選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらスカラー値のそれぞれは、今度は、ある単一のUTF-16またはUTF-8コード単位にぴったり合うには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各プロパティは、文字列のあるビューへのアクセスを一続きのコード単位として提供し、それぞれが異なるユニコードエンコーディングにおいてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each scalar value is represented by a &lt;c2&gt;Unicode&lt;w3&gt;.Scalar&lt;/w3&gt;&lt;/c2&gt; instance and is equivalent to a UTF-32 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各スカラー値は、&lt;c2&gt;Unicode&lt;w3&gt;.Scalar&lt;/w3&gt;&lt;/c2&gt;インスタンスによって表されて、ひとつのUTF-32コード単位と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each string argument requires a linear search, and unless the underlying collection supports random-access traversal, each integer argument also requires a linear operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各文字列引数は線形探索を要求します、そして基底コレクションがランダムアクセス走査をサポートしない限り、各整数引数もまた線形演算を要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each string argument selects the first child with a matching label.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各文字列引数は、合致するラベルを持つ最初の子を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each time an element of the lazy sequence &lt;c0&gt;doubled&lt;/c0&gt; is accessed, the closure accesses and transforms an element of the underlying array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この遅延シーケンス&lt;c0&gt;doubled&lt;/c0&gt;の要素がアクセスされるたびごとに、クロージャはその基礎をなす配列の要素にアクセスおよび変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each time the &lt;c0&gt;next()&lt;/c0&gt; method is called on a &lt;c1&gt;Countdown&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt; instance, it calculates the new next value, checks to see whether it has reached zero, and then returns either the number, or &lt;c3&gt;nil&lt;/c3&gt; if the iterator is finished returning elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next()&lt;/c0&gt;メソッドが&lt;c1&gt;Countdown&lt;w2&gt;Iterator&lt;/w2&gt;&lt;/c1&gt;インスタンス上で呼ばれるたびに、それは新しい次の値を計算し、それがゼロに届いたか見るために調べ、そしてそれからその数、またはそのイテレータがシーケンスの要素を返すことを完了するならば&lt;c3&gt;nil&lt;/c3&gt;のどちらかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Edit the bridging header to expose your Objective-C code to your Swift code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジヘッダを編集して、あなたのObjective-CコードをあなたのSwiftコードに露出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Effectively managing state, the bits of data that keep track of how the app is being used at the moment, is an important part of a developing your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>効果的に状態、どのようにその時アプリが使われるかの情報を得る少量のデータ、を管理することは、あなたのアプリの開発の重要な部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements are sorted in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素は昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are in only one or the other are left out of the result of the intersection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どちらか一方にだけある要素は、交叉の結果から除外されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are used to split the collection are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements that are used to split the sequence are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoders and Decoders</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーダとデコーダ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoders should provide types conforming to &lt;c0&gt;Keyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for their format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらエンコーダは、それらの形式に対して&lt;c0&gt;Keyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠する型を提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoders should provide types conforming to &lt;c0&gt;Unkeyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for their format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーダは、それらの形式に対して&lt;c0&gt;Unkeyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠する型を提供するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a Unicode scalar as a UTF-32 code unit by calling the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-32コード単位としてのユニコードスカラーを与えられたクロージャを呼び出すことによってエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a Unicode scalar as a series of code units by calling the given closure on each code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを各コード単位上で呼び出すことによって、ユニコードスカラーを一連のコード単位としてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a nested container and returns an &lt;c0&gt;Encoder&lt;/c0&gt; instance for encoding &lt;c1&gt;super&lt;/c1&gt; into that container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ子にされたコンテナをエンコードして、エンコードする&lt;c0&gt;super&lt;/c0&gt;に対する&lt;c1&gt;Encoder&lt;/c1&gt;インスタンスをそのコンテナに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a nested container keyed by the given type and returns it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型によってキー付けされる入れ子にされたコンテナをエンコードしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a null value for the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対してnull値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a null value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a reference to the given object only if it is encoded unconditionally elsewhere in the payload (previously, or in the future).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたオブジェクトへの参照をエンコードします、それがそのペイロードの中のどこか他の所で無条件にエンコードをされる（以前に、またはこの先に）場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes a single value of the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の単一の値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes an unkeyed encoding container and returns it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付けされないエンコーディングコンテナをエンコードしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the elements of the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスに属する要素をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the elements of this set into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合の要素を指定されたエンコーダへとあるキー付けされないコンテナにおいてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the given value for the given key if it is not &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対して与えられた値をエンコードします、それが&lt;c0&gt;nil&lt;/c0&gt;でないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the given value for the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対して与えられた値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes the scalars of this vector into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのスカラーそれらをこの与えられたエンコーダへとキー付けされないコンテナの中に符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this optional value into the given encoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このオプショナル値を与えられたエンコーダにエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Bool&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Bool&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Double&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Double&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Float&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Float&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int16&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int16&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int32&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int32&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int64&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int64&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int8&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int8&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;Int&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Int&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;String&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;String&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt16&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt16&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt32&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt32&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt64&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt64&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt8&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt8&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder, when the type’s &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;UInt&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をその与えられたデコーダへとデコードします、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;UInt&lt;/c2&gt;である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encodes this value into the given encoder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を与えられたエンコーダにエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding Containers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングコンテナ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding a Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をエンコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding Custom Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの型のエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をエンコードおよびデコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Decoding a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲を符号化そして復号する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding and Storage</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードとストレージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encoding, Decoding, and Serialization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコード、デコード、そしてシリアライズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumeration Case</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumeration Cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumerations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumerations imported using the &lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt; macro won't fail when you initialize one with a raw value that does not correspond to an enumeration case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt;マクロを使ってインポートされる列挙は、あなたが列挙ケース節に一致しない生の値を持つものを初期化する場合に、失敗しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumerations with Raw Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の値を持つ列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality and Ordering</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性と順序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality is the inverse of inequality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同等性は、不等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to calling &lt;c0&gt;super&lt;w1&gt;Decoder(for&lt;w2&gt;Key:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; with &lt;c3&gt;Key(string&lt;w4&gt;Value: "super", int&lt;w5&gt;Value: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;super&lt;w1&gt;Decoder(for&lt;w2&gt;Key:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; with &lt;c3&gt;Key(string&lt;w4&gt;Value: "super", int&lt;w5&gt;Value: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を呼び出すことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equivalent to calling &lt;c0&gt;super&lt;w1&gt;Encoder(for&lt;w2&gt;Key:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; with &lt;c3&gt;Key(string&lt;w4&gt;Value: "super", int&lt;w5&gt;Value: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;super&lt;w1&gt;Encoder(for&lt;w2&gt;Key:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; with &lt;c3&gt;Key(string&lt;w4&gt;Value: "super", int&lt;w5&gt;Value: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を呼び出すことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Errors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Escaping the pointer to use after the execution of the function is undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数の実行の後に使うためにポインタを脱出させることは、未定義の挙動となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Essential components are those that contribute to the type’s implementation of &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>本質的な構成要素は、その型の持つ&lt;c1&gt;Equatable&lt;/c1&gt;の実装に寄与するそれらです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Evaluates a closure while ensuring that the given instance is not destroyed before the closure returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるクロージャを評価する一方で与えられたインスタンスがそのクロージャが返る前に破棄されないことを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Evaluates the given closure when this &lt;c0&gt;Optional&lt;/c0&gt; instance is not &lt;c1&gt;nil&lt;/c1&gt;, passing the unwrapped value as a parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャをこの&lt;c0&gt;Optional&lt;/c0&gt;インスタンスが&lt;c1&gt;nil&lt;/c1&gt;でない場合に評価します、アンラップされた値をパラメータとして渡しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even something as simple as printing a sequence of letters can be affected by the timing of a closure call:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一連の文字を印字するような単純なことでさえ、クロージャ呼び出しの時機によって影響される可能性があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even though the line that prints &lt;c4&gt;A&lt;/c4&gt; is first in the code, it's ordered later in the output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>たとえ&lt;c4&gt;A&lt;/c4&gt;を印字する行がコードにおいて最初であっても、それは出力においてもっと後の順番にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every distinct value of the conforming type has a corresponding unique value of the &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; type, but there may be values of the &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; type that don’t have a corresponding value of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型のすべての個々の値は、&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;型の対応する特有な値を持ちます、しかし準拠する型の値に対応しない&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;型の値があっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every element of &lt;c2&gt;numbers&lt;/c2&gt; up to, but not including, the first negative value is included in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の負の値までの、しかしそれを含まない、&lt;c2&gt;numbers&lt;/c2&gt;のすべての要素は、この結果の中に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every unsigned integer is its own magnitude, so for any value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x == x&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべての符号なし整数は、それ自身が規模（magnitude）です、それで何らかの値&lt;c0&gt;x&lt;/c0&gt;にとって、&lt;c1&gt;x == x&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every value except NaN compares less than or equal to &lt;c0&gt;+infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNを除くあらゆる値は、&lt;c0&gt;+infinity&lt;/c0&gt;より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every value except for NaN and &lt;c0&gt;+infinity&lt;/c0&gt; compares less than &lt;c1&gt;+infinity&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNと&lt;c0&gt;+infinity&lt;/c0&gt;を除くあらゆる値は、&lt;c1&gt;+infinity&lt;/c1&gt;より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every value in the range &lt;c3&gt;0..&lt;upper&lt;w4&gt;Bound&lt;/w4&gt;&lt;/c3&gt; is equally likely to be returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲&lt;c3&gt;0..&lt;upper&lt;w4&gt;Bound&lt;/w4&gt;&lt;/c3&gt;の中の全ての値は、等しく返される可能性をもちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Everything from your implementation and interface goes directly into this single Swift file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの実装とインタフェースからのすべては、直接この単一のスウィフトファイルに入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example Buffer Class</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファクラスの例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the byte values at the specified indices in this buffer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの持つメモリの中の指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values at the specified indices of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのバッファの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values at the specified indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exchanges the values of the two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Excluding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を排除する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executes the given closure while temporarily binding the memory referenced by this buffer to the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを実行します、その間はこのバッファによって参照されるメモリを与えられた型に一時的に束縛しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executes the given closure while temporarily binding the specified number of instances to the given type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを実行します、その間は指定された数のインスタンスを与えられた型に一時的に束縛しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Existential Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exiting a Program</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プログラムの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expected Performance</seg>
      </tuv>
      <tuv lang="ja">
        <seg>期待される性能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Experiment with Swift standard library types and learn high-level concepts using visualizations and practical examples.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いろいろなSwift標準ライブラリ型を試したり、視覚化や実践例を使うことで高水準概念を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Explore the Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ探索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exponent</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Expose the Existing Implementation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>既存の実装を公開する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extending the compared character count to 15 includes the differing characters, so a nonzero result is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較する文字を15を数えるまで広げることは異なる文字を含みます、それで非ゼロの結果が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extensible enumerations are imported in a similar fashion to nonextensible ones, except that they receive an additional initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張可能列挙は、それらが追加的なイニシャライザを受け取ることを除いては、同じようなやり方で拡張可能でないものにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD16への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD2への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD3.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD3への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD32への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD4.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD4への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD64.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD64への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracts the scalars at specified indices to form a SIMD8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>形式SIMD8への指定インデックスそれらでのスカラーを抽出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fill out an Objective-C bridging header if you need to access Objective-C code from the same app target in your Swift file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cブリッジヘッダを記入してください、もしあなたがObjective-CコードにあなたのSwiftファイルにおいて同じアプリターゲットからアクセスする必要があるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizes the hasher state and returns the hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャー状態をファイナライズしてハッシュ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizing a Hasher</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーをファイナライズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizing consumes the hasher: it is illegal to finalize a hasher you don’t own, or to perform operations on a finalized hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイナライズすることは、ハーシャーを消費します：あなたが所有者でないハーシャーをファイナライズすること、またはファイナライズされたハーシャー上で演算を実行することは不正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, memory that was allocated previously may have been deallocated, leaving existing pointers referencing unallocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結局、以前にアロケートされたメモリはデアロケートされるかもしれません、アロケートされないメモリを参照している既存のポインタはそのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, report the average temperature and observation counts:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後に、平均温度と観測数を報告します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, you can give all lazy sequences a lazy &lt;c0&gt;scan(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最終的に、あなたは全ての遅延シーケンスをある遅延&lt;c0&gt;scan(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;メソッドに与えることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding the Absolute Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>絶対値を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding the Sign and Magnitude</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号と規模を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First Steps</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初歩</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, a set of observations in Celsius is parsed from strings to &lt;c0&gt;Double&lt;/c0&gt; values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>まず、摂氏での観測の一揃いは、文字列から&lt;c0&gt;Double&lt;/c0&gt;値へ解析されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, retrieve a sequence’s iterator, and then call the iterator’s &lt;c2&gt;next()&lt;/c2&gt; method until it returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>まず、あるシーケンスのもつイテレータを見つけて取ってきてください、そしてそのイテレータの持つ&lt;c2&gt;next()&lt;/c2&gt;メソッドを、それが&lt;c3&gt;nil&lt;/c3&gt;を返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, the function finds the position of the last even number as a &lt;c0&gt;Reversed&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; in a reversed view of the array of numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初に、この関数は最後の偶数の位置を、数からなる配列の逆にされたビューにおける&lt;c0&gt;Reversed&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;として捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fixed&lt;w0&gt;Width&lt;w1&gt;Integer Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定&lt;w0&gt;長&lt;w1&gt;整数の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>FixedWidthInteger Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>FixedWidthInteger実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating Point</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Operators for Float</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Float用の浮動小数点演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Type Aliases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-Point Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-point types are used to represent fractional numbers, like 5.5, 100.0, or 3.14159274.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型は、5.5、100.0、または3.14159274のような、小数を表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-point types represent values that are neither finite numbers nor infinity as NaN, an abbreviation for “not a number.” Comparing a NaN with any value, including another NaN, results in &lt;c0&gt;false&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型は、有限数でも無限大でもない値を「not a number」の略語、NaNで表します。NaNを別のNaNを含む何らかの値と比較することは、&lt;c0&gt;false&lt;/c0&gt;の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating-point values are represented as a &lt;e0&gt;sign&lt;/e0&gt; and a &lt;e1&gt;magnitude&lt;/e1&gt;, where the magnitude is calculated using the type’s &lt;e2&gt;radix&lt;/e2&gt; and the instance’s &lt;e3&gt;significand&lt;/e3&gt; and &lt;e4&gt;exponent&lt;/e4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値は、&lt;e0&gt;符号&lt;/e0&gt;と&lt;e1&gt;規模&lt;/e1&gt;として表されます、そこにおいて規模はその型の&lt;e2&gt;基数&lt;/e2&gt;とインスタンスの&lt;e3&gt;仮数&lt;/e3&gt;と&lt;e4&gt;指数&lt;/e4&gt;を使って計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Floating&lt;w0&gt;Point Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floating&lt;w0&gt;Pointの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For &lt;c5&gt;nan&lt;/c5&gt; or &lt;c6&gt;-infinity&lt;/c6&gt;, &lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Down&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; is &lt;c10&gt;x&lt;/c10&gt; itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;nan&lt;/c5&gt;または&lt;c6&gt;-infinity&lt;/c6&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Down&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;は&lt;c10&gt;x&lt;/c10&gt;それ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For &lt;c5&gt;nan&lt;/c5&gt; or &lt;c6&gt;infinity&lt;/c6&gt;, &lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Up&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; is &lt;c10&gt;x&lt;/c10&gt; itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;nan&lt;/c5&gt;または&lt;c6&gt;infinity&lt;/c6&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.next&lt;w9&gt;Up&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;は&lt;c10&gt;x&lt;/c10&gt;それ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For Foundation types that &lt;e0&gt;aren't&lt;/e0&gt; bridged to value types, the Swift overlay renames classes and protocols, as well as related enumerations and constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値型にブリッジ&lt;e0&gt;されない&lt;/e0&gt;Foundation型に対して、Swiftオーバーレイはクラスとプロトコルを改名します、それだけでなく関連する列挙と定数も。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a &lt;c0&gt;struct&lt;/c0&gt;, all its stored properties must conform to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;struct&lt;/c0&gt;に対して、すべてのそれの格納プロパティは&lt;c1&gt;Hashable&lt;/c1&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a pointer &lt;c0&gt;p&lt;/c0&gt;, the memory at &lt;c1&gt;p + i&lt;/c1&gt; must be initialized when reading the value by using the subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタ&lt;c0&gt;p&lt;/c0&gt;に対して、&lt;c1&gt;p + i&lt;/c1&gt;でのメモリは、添え字を使うことで値を読み出すとき初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a pointer &lt;c0&gt;p&lt;/c0&gt;, the memory at &lt;c1&gt;p + i&lt;/c1&gt; must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタ&lt;c0&gt;p&lt;/c0&gt;に対して、&lt;c1&gt;p + i&lt;/c1&gt;でのメモリは、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a type &lt;c1&gt;F&lt;/c1&gt;, positive and negative infinity are represented as &lt;c2&gt;F&lt;w3&gt;.infinity&lt;/w3&gt;&lt;/c2&gt; and &lt;c4&gt;-F&lt;w5&gt;.infinity&lt;/w5&gt;&lt;/c4&gt;, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c1&gt;F&lt;/c1&gt;に対して、正と負の無限大はそれぞれ&lt;c2&gt;F&lt;w3&gt;.infinity&lt;/w3&gt;&lt;/c2&gt;と&lt;c4&gt;-F&lt;w5&gt;.infinity&lt;/w5&gt;&lt;/c4&gt;のように表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, a distance &lt;c1&gt;n&lt;/c1&gt;, and a value &lt;c2&gt;y = x&lt;w3&gt;.advanced(by: n)&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;x&lt;w5&gt;.distance(to: y) == n&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;、隔たり&lt;c1&gt;n&lt;/c1&gt;、および値&lt;c2&gt;y = x&lt;w3&gt;.advanced(by: n)&lt;/w3&gt;&lt;/c2&gt;に対して、&lt;c4&gt;x&lt;w5&gt;.distance(to: y) == n&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, the comparison &lt;c1&gt;x&lt;w2&gt;.sign == .minus&lt;/w2&gt;&lt;/c1&gt; is not necessarily the same as &lt;c3&gt;x &lt; 0&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;に対して、比較&lt;c1&gt;x&lt;w2&gt;.sign == .minus&lt;/w2&gt;&lt;/c1&gt;は必ずしも&lt;c3&gt;x &lt; 0&lt;/c3&gt;と同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, the result of &lt;c1&gt;x&lt;w2&gt;.divided&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by: 0)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c5&gt;(x, true)&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.divided&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by: 0)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の結果は&lt;c5&gt;(x, true)&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c0&gt;x&lt;/c0&gt;, the result of &lt;c1&gt;x&lt;w2&gt;.remainder&lt;w3&gt;Reporting&lt;w4&gt;Overflow(dividing&lt;w5&gt;By: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c6&gt;(x, true)&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.remainder&lt;w3&gt;Reporting&lt;w4&gt;Overflow(dividing&lt;w5&gt;By: 0)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の結果は&lt;c6&gt;(x, true)&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a value &lt;c1&gt;x&lt;/c1&gt; of a floating-point type &lt;c2&gt;F&lt;/c2&gt;, the magnitude can be calculated as the following, where &lt;c3&gt;**&lt;/c3&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点型&lt;c2&gt;F&lt;/c2&gt;の値&lt;c1&gt;x&lt;/c1&gt;に対して、規模は次のように計算されることができます、ここで&lt;c3&gt;**&lt;/c3&gt;は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For all other kinds of declaration—such as properties, enumeration cases, and type aliases—you use the macro as a suffix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての他の種類の宣言に対して — 例えばプロパティ、列挙ケース節、そして型エイリアスなど — あなたはこのマクロを接尾辞として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For all other scalars, this property is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての他のスカラーに対して、このプロパティは&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an &lt;c0&gt;enum&lt;/c0&gt;, all its associated values must conform to &lt;c1&gt;Hashable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;enum&lt;/c0&gt;に対して、すべてのそれの関連値は&lt;c1&gt;Hashable&lt;/c1&gt;に準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an example of how Swift imports unannotated declarations, consider the following code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにSwiftが注釈を付けられない宣言をインポートするかの例として、以下のコードを考慮してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an index &lt;c0&gt;i&lt;/c0&gt; into a collection &lt;c1&gt;c&lt;/c1&gt;, calling &lt;c2&gt;c&lt;w3&gt;.index(after: i)&lt;/w3&gt;&lt;/c2&gt; returns the same index every time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション&lt;c0&gt;c&lt;/c0&gt;へのインデックス&lt;c1&gt;i&lt;/c1&gt;に対して、&lt;c2&gt;c&lt;w3&gt;.index(after: i)&lt;/w3&gt;&lt;/c2&gt;を呼び出すことはいつでも同じインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an unspecialized Objective-C type, Swift infers the generic parameterization for the imported class type constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊化されないObjective-C型に対して、スウィフトは総称体パラメータ化をインポートされたクラス型制約に対して推測します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any enumeration with a string, integer, or floating-point raw type, the Swift compiler automatically adds &lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt; conformance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列、整数、または浮動小数点の生の型を持つ何らかの列挙に対して、Swiftコンパイラは自動的に&lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;準拠を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is less than &lt;c4&gt;x&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの有限の値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;x&lt;/c4&gt;より小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any finite value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is greater than &lt;c4&gt;x&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの有限値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;x&lt;/c4&gt;より大きいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any floating-point value &lt;c0&gt;x&lt;/c0&gt; of type &lt;c1&gt;F&lt;/c1&gt;, the result of the following is equal to &lt;c2&gt;x&lt;/c2&gt;, with the distinction that the result is canonicalized if &lt;c3&gt;x&lt;/c3&gt; is in a noncanonical encoding:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの浮動小数点値型&lt;c1&gt;F&lt;/c1&gt;の&lt;c0&gt;x&lt;/c0&gt;に対して、以下の結果は&lt;c2&gt;x&lt;/c2&gt;と等しいです、その違いは&lt;c3&gt;x&lt;/c3&gt;が非正準符号化になるならば結果は正準化されることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any numeric value &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt; is the absolute value of &lt;c3&gt;x&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの数値&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;x&lt;/c3&gt;の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any representable power of two, &lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; is zero, because &lt;c2&gt;significand&lt;/c2&gt; is &lt;c3&gt;1&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる表現可能な２の冪に対して、&lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;はゼロです、なぜなら&lt;c2&gt;significand&lt;/c2&gt;が&lt;c3&gt;1&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any two integers &lt;c0&gt;a&lt;/c0&gt; and &lt;c1&gt;b&lt;/c1&gt;, their quotient &lt;c2&gt;q&lt;/c2&gt;, and their remainder &lt;c3&gt;r&lt;/c3&gt;, &lt;c4&gt;a == b * q + r&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの２つの整数&lt;c0&gt;a&lt;/c0&gt;と&lt;c1&gt;b&lt;/c1&gt;、それらの商&lt;c2&gt;q&lt;/c2&gt;、そしてそれらの余り&lt;c3&gt;r&lt;/c3&gt;に対して、&lt;c4&gt;a == b * q + r&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any value, &lt;c0&gt;x + .zero == x&lt;/c0&gt; and &lt;c1&gt;.zero + x == x&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる値に対して、&lt;c0&gt;x + .zero == x&lt;/c0&gt;かつ&lt;c1&gt;.zero + x == x&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any values &lt;c0&gt;a&lt;/c0&gt; and &lt;c1&gt;b&lt;/c1&gt;, &lt;c2&gt;a != b&lt;/c2&gt; implies that &lt;c3&gt;a == b&lt;/c3&gt; is &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの&lt;c0&gt;a&lt;/c0&gt;と&lt;c1&gt;b&lt;/c1&gt;に対して、&lt;c2&gt;a != b&lt;/c2&gt;は&lt;c3&gt;a == b&lt;/c3&gt;が&lt;c4&gt;false&lt;/c4&gt;であることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For any values &lt;c0&gt;a&lt;/c0&gt; and &lt;c1&gt;b&lt;/c1&gt;, &lt;c2&gt;a == b&lt;/c2&gt; implies that &lt;c3&gt;a != b&lt;/c3&gt; is &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの値&lt;c0&gt;a&lt;/c0&gt;と&lt;c1&gt;b&lt;/c1&gt;に対して、&lt;c2&gt;a == b&lt;/c2&gt;は&lt;c3&gt;a != b&lt;/c3&gt;が&lt;c4&gt;false&lt;/c4&gt;であることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For bridging to be possible, the &lt;c3&gt;Element&lt;/c3&gt; type of a set must be a class, an &lt;c4&gt;@objc&lt;/c4&gt; protocol (a protocol imported from Objective-C or marked with the &lt;c5&gt;@objc&lt;/c5&gt; attribute), or a type that bridges to a Foundation type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジが可能にされるには、集合の&lt;c3&gt;Element&lt;/c3&gt;型は、クラス、&lt;c4&gt;@objc&lt;/c4&gt;プロトコル（Objective-Cからインポートされるまたは&lt;c5&gt;@objc&lt;/c5&gt;属性で印されるプロトコル）、またはあるFoundation型にブリッジする型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For class types, the following mappings apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラス型のために、以下のマッピングが適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For clearer, more concise code, the example above could use the array’s &lt;c1&gt;contains(_:)&lt;/c1&gt; method, which every sequence inherits from &lt;c2&gt;Sequence&lt;/c2&gt;, instead of iterating manually:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より明確な、もっと簡潔なコードのために、上のコードは、すべてのシーケンスが&lt;c2&gt;Sequence&lt;/c2&gt;から継承する、配列のもつ&lt;c1&gt;contains(_:)&lt;/c1&gt;メソッドを使うことが、労力を要する反復の代わりに可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For collections that don’t conform to &lt;c3&gt;Random&lt;w4&gt;Access&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;, accessing the &lt;c6&gt;count&lt;/c6&gt; property iterates through the elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Random&lt;w4&gt;Access&lt;w5&gt;Collection&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に準拠しないコレクションに対して、&lt;c6&gt;count&lt;/c6&gt;プロパティにアクセスすることはコレクションの要素を始めから終わりまで反復します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For convenience, the standard assigns symbolic names to a subset of these combining classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利便性のため、この標準は象徴名をそれら結合クラスのサブセットに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For detailed information about specifying platform availability, see &lt;a0&gt;Declaration Attributes&lt;/a0&gt; in &lt;a1&gt;The Swift Programming Language&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プラットホーム利用可能性の指定についての詳細な情報として、&lt;a0&gt;宣言属性&lt;/a0&gt;を&lt;a1&gt;The Swift Programming Language&lt;/a1&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For encoders which don’t support this feature, the default implementation encodes the given object unconditionally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この機能をサポートしないエンコーダに対して、省略時の実装は与えられたオブジェクトを無条件にエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For every change in state, you need to provides updates for both &lt;c0&gt;user&lt;/c0&gt; and &lt;c1&gt;session&lt;w2&gt;Expired&lt;/w2&gt;&lt;/c1&gt; in tandem.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>状態におけるすべての変化に対して、あなたは&lt;c0&gt;user&lt;/c0&gt;と&lt;c1&gt;session&lt;w2&gt;Expired&lt;/w2&gt;&lt;/c1&gt;の両方に対して相前後して更新を提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example,</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;c0&gt;doubled&lt;/c0&gt; in this code sample is a sequence containing the values &lt;c1&gt;2&lt;/c1&gt;, &lt;c2&gt;4&lt;/c2&gt;, and &lt;c3&gt;6&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このコード見本の中の&lt;c0&gt;doubled&lt;/c0&gt;は、値&lt;c1&gt;2&lt;/c1&gt;、&lt;c2&gt;4&lt;/c2&gt;、そして&lt;c3&gt;6&lt;/c3&gt;を含んでいるあるシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;e6&gt;6&lt;/e6&gt; is a multiple of &lt;e7&gt;3&lt;/e7&gt; because &lt;e8&gt;6 = 2*3&lt;/e8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;e6&gt;6&lt;/e6&gt;は&lt;e7&gt;3&lt;/e7&gt;の倍数です、なぜなら&lt;e8&gt;6 = 2*3&lt;/e8&gt;なので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a function pointer that has the type &lt;c1&gt;int (*)(void)&lt;/c1&gt; in C is imported into Swift as &lt;c2&gt;@convention(c) () -&gt; Int32&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、Cにおける&lt;c1&gt;int (*)(void)&lt;/c1&gt;型をもつ関数ポインターは、スウィフトに&lt;c2&gt;@convention(c) () -&gt; Int32&lt;/c2&gt;としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a lowercase “e” with an acute accent above it (&lt;c1&gt;"é"&lt;/c1&gt;) uses 2 bytes for its UTF-8 representation: &lt;c2&gt;0b11000011&lt;/c2&gt; (195) and &lt;c3&gt;0b10101001&lt;/c3&gt; (169).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、それの上に鋭アクセントを持つ小文字の“e”（&lt;c1&gt;"é"&lt;/c1&gt;）は、それのUTF-8表現のために２バイト使います：&lt;c2&gt;0b11000011&lt;/c2&gt;（195）と&lt;c3&gt;0b10101001&lt;/c3&gt;（169）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a random-access collection’s &lt;c0&gt;count&lt;/c0&gt; property is calculated in O(1) instead of requiring iteration of an entire collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、無作為アクセスコレクションのもつ&lt;c0&gt;count&lt;/c0&gt;プロパティは、コレクション全体の反復を要求したりせずにO(1)で計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a rendering engine might display “fl” in English as a connected glyph; inserting the zero width non-joiner would force them to be rendered as disconnected glyphs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるレンダリングエンジンは “fl” を英語において１つの結合される字体として表示するかもしれません；ゼロ幅非接合子を挿入することは、それらを分離した字体それらとして描出される様に強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a seedable generator can be used to generate a repeatable sequence of random values for testing purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、シード可能生成子は、繰り返し可能な一連の無作為値を、テスト目的で生成するために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, after filtering a set of prime numbers to remove any below 10, you can create a new set by using this initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ひとそろいの素数をフィルタして10の前のどんなものも削除した後で、あなたは新しい集合をこのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an ASCII character like the capital letter &lt;e0&gt;A&lt;/e0&gt; is represented by a single element in each of its four views.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、大文字の&lt;e0&gt;A&lt;/e0&gt;のようなあるひとつのASCII文字は、それの４つのビューのそれぞれにおいて単一の要素で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みは&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns &lt;c5&gt;nil&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みは&lt;c5&gt;nil&lt;/c5&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte results in &lt;c6&gt;nil&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-8継続バイトの位置を変換しようとする試みは、&lt;c6&gt;nil&lt;/c6&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-8の継続バイトの位置を変換する試みは&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of the combining acute accent (&lt;c4&gt;"\u{0301}"&lt;/c4&gt;) fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、結合文字のアキュートアクセント（&lt;c4&gt;"\u{0301}"&lt;/c4&gt;）の位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair results in &lt;c5&gt;nil&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みは&lt;c5&gt;nil&lt;/c5&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, an eager &lt;c3&gt;scan(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt; method is defined as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある即時&lt;c3&gt;scan(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt;メソッドは以下のように定義されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, because UTF-8 and UTF-16 represent high Unicode code points differently, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair fails.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、UTF-8とUTF-16は高位ユニコードコード点を異なって表すので、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider Core Foundation’s &lt;c0&gt;CFArray&lt;w1&gt;Create&lt;w2&gt;Mutable(_:&lt;w3&gt;_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、Core Foundationの&lt;c0&gt;CFArray&lt;w1&gt;Create&lt;w2&gt;Mutable(_:&lt;w3&gt;_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider a C structure named &lt;c0&gt;Cake&lt;/c0&gt; that contains the fields &lt;c1&gt;layers&lt;/c1&gt; and &lt;c2&gt;height&lt;/c2&gt; nested within an unnamed union type, and a field &lt;c3&gt;toppings&lt;/c3&gt; of an unnamed struct type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Cake&lt;/c0&gt;と名前を付けられるC構造体を考えてください、それはフィールド&lt;c1&gt;layers&lt;/c1&gt;および&lt;c2&gt;height&lt;/c2&gt;を無名のunion型内部に入れ子にされて、そしてフィールド&lt;c3&gt;toppings&lt;/c3&gt;を無名struct型で含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider a C union named &lt;c0&gt;Schroedingers&lt;w1&gt;Cat&lt;/w1&gt;&lt;/c0&gt; that has an &lt;c2&gt;is&lt;w3&gt;Alive&lt;/w3&gt;&lt;/c2&gt; and an &lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt; field:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Schroedingers&lt;w1&gt;Cat&lt;/w1&gt;&lt;/c0&gt;と名前を付けられるC共用体を考えてください、それは&lt;c2&gt;is&lt;w3&gt;Alive&lt;/w3&gt;&lt;/c2&gt;と&lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt;フィールドを持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider a custom &lt;c0&gt;Countdown&lt;/c0&gt; sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるあつらえの&lt;c0&gt;Countdown&lt;/c0&gt;シーケンスを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider a custom type called &lt;c0&gt;Shipping&lt;w1&gt;Options&lt;/w1&gt;&lt;/c0&gt; that is an option set of the possible ways to ship a customer’s purchase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Shipping&lt;w1&gt;Options&lt;/w1&gt;&lt;/c0&gt;と呼ばれるあつらえの型を考えてください、それは顧客の購入品を出荷する可能な方法のオプションセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the following C function declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のC関数宣言を考えてみてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the following Objective-C class and category declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、次のObjective-Cクラスおよびカテゴリ宣言を考えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, consider the sequence &lt;c0&gt;"\u{0041}\u{0301}\u{0316}"&lt;/c0&gt; (LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT, COMBINING GRAVE ACCENT BELOW).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このシーケンス&lt;c0&gt;"\u{0041}\u{0301}\u{0316}"&lt;/c0&gt; (LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT, COMBINING GRAVE ACCENT BELOW) を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, for a variable &lt;c1&gt;root&lt;/c1&gt; of type &lt;c2&gt;T&lt;/c2&gt;, a key path &lt;c3&gt;key&lt;/c3&gt; of type &lt;c4&gt;Writable&lt;w5&gt;Key&lt;w6&gt;Path&lt;T, U&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, and a &lt;c7&gt;value&lt;/c7&gt; of type &lt;c8&gt;U&lt;/c8&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、変数&lt;c1&gt;root&lt;/c1&gt;で型&lt;c2&gt;T&lt;/c2&gt;、キーパス&lt;c3&gt;key&lt;/c3&gt;で型&lt;c4&gt;Writable&lt;w5&gt;Key&lt;w6&gt;Path&lt;T, U&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;、そして&lt;c7&gt;value&lt;/c7&gt;で型&lt;c8&gt;U&lt;/c8&gt;に対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, given the following C structure:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のC構造体を与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, given the following Objective-C method that performs an operation on the specified class:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、指定されたクラス上である演算を実行する以下のObjective-Cメソッドを与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, given the following Objective-C property declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のObjective-Cプロパティを与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, here’s an unannotated C function:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここに注釈をつけられなかったC関数があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, here’s how to call the &lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function in Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここに&lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数をSwiftにおいて呼び出す方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if a variable has the type &lt;c3&gt;Int?&lt;/c3&gt;, that’s just another way of writing &lt;c4&gt;Optional&lt;Int&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある変数が型&lt;c3&gt;Int?&lt;/c3&gt;を持つとすれば、それは&lt;c4&gt;Optional&lt;Int&gt;&lt;/c4&gt;を記述することのありきたりのやり方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if there are parts of your codebase to which you haven't added nullability annotations, now's the time to add them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ヌル可能性注釈を加えてないなあなたのコード基盤の部分があるならば、今こそそれらを加える時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if you update the last element of the &lt;c0&gt;absences&lt;/c0&gt; array from &lt;c1&gt;0&lt;/c1&gt; to &lt;c2&gt;2&lt;/c2&gt;, the &lt;c3&gt;second&lt;w4&gt;Half&lt;/w4&gt;&lt;/c3&gt; slice is unchanged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたが&lt;c0&gt;absences&lt;/c0&gt;配列の最後の要素を&lt;c1&gt;0&lt;/c1&gt;から&lt;c2&gt;2&lt;/c2&gt;に更新する場合、&lt;c3&gt;second&lt;w4&gt;Half&lt;/w4&gt;&lt;/c3&gt;スライスは変化していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a fixed-width integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number &lt;e2&gt;31&lt;/e2&gt; has five bits equal to &lt;e3&gt;1&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ固定長整数型において、数&lt;e2&gt;31&lt;/e2&gt;は&lt;e3&gt;1&lt;/e3&gt;に等しいビットを５つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a fixed-width integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number &lt;e2&gt;31&lt;/e2&gt; has three leading zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ固定長整数型において、数&lt;e2&gt;31&lt;/e2&gt;は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in an integer type with a &lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; value of 8, the number &lt;e2&gt;31&lt;/e2&gt; has three leading zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、８の&lt;c0&gt;bit&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;値を持つ整数型において、数&lt;e2&gt;31&lt;/e2&gt;は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in the &lt;c0&gt;Product&lt;w1&gt;Category&lt;/w1&gt;&lt;/c0&gt; type defined here, only &lt;c2&gt;\.update&lt;w3&gt;Counter&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;\.identifier&lt;/c4&gt;, and &lt;c5&gt;\.identifier&lt;w6&gt;.name&lt;/w6&gt;&lt;/c5&gt; refer to properties with inline, directly addressable storage:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここで定義される&lt;c0&gt;Product&lt;w1&gt;Category&lt;/w1&gt;&lt;/c0&gt;型において、&lt;c2&gt;\.update&lt;w3&gt;Counter&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;\.identifier&lt;/c4&gt;、そして&lt;c5&gt;\.identifier&lt;w6&gt;.name&lt;/w6&gt;&lt;/c5&gt;だけがインラインに、直接にアドレス指定可能なストレージでのプロパティを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, it would be reasonable to implement alternative operations in which operating on a signaling NaN triggers a runtime error or results in a diagnostic for debugging purposes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、それらにおいてはシグナルNaNに関する演算が実行時エラーを引き起こすまたはデバッグ目的の診断という結果になるといった、代替の演算を実装するのが妥当であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, iterating over an instance of &lt;c1&gt;Partial&lt;w2&gt;Range&lt;w3&gt;From&lt;Int&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; traps when the sequence’s next value would be above &lt;c4&gt;Int&lt;w5&gt;.max&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c1&gt;Partial&lt;w2&gt;Range&lt;w3&gt;From&lt;Int&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;のインスタンスの全体にわたって反復することは、そのシーケンスの次の値が&lt;c4&gt;Int&lt;w5&gt;.max&lt;/w5&gt;&lt;/c4&gt;より上となる場合にトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, like every Unicode scalar, the musical fermata symbol (“𝄐”) can be represented in UTF-32 as a single code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、すべてのユニコードスカラーのように、音楽のフェルマータ符号（“𝄐”）はUTF-32において単一のコード単位として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, passing &lt;c0&gt;1, "two", 3&lt;/c0&gt; as arguments to &lt;c1&gt;my&lt;w2&gt;Mirror&lt;w3&gt;.descendant(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is equivalent to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;1, "two", 3&lt;/c0&gt;を引数として&lt;c1&gt;my&lt;w2&gt;Mirror&lt;w3&gt;.descendant(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;に渡すことは、次と同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, passing a closed range with an upper bound of &lt;c0&gt;Int&lt;w1&gt;.max&lt;/w1&gt;&lt;/c0&gt; triggers a runtime error, because the resulting half-open range would require an upper bound of &lt;c2&gt;Int&lt;w3&gt;.max + 1&lt;/w3&gt;&lt;/c2&gt;, which is not representable as</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、完結範囲を&lt;c0&gt;Int&lt;w1&gt;.max&lt;/w1&gt;&lt;/c0&gt;の上方境界で渡すことは実行時エラーの引き金となります、なぜなら結果の半開範囲は&lt;c2&gt;Int&lt;w3&gt;.max + 1&lt;/w3&gt;&lt;/c2&gt;の上方境界を要求するからです。それはのように表されることができません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, strings of up to 15 UTF-8 code units in length may be represented in a small-string representation, and thus will be spilled into temporary stack space which is invalid after &lt;c1&gt;with&lt;w2&gt;UTF8&lt;/w2&gt;&lt;/c1&gt; finishes execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、長さで15 UTF-8コード単位までの文字列は、ある小さな文字列表現で表されるかもしれません、そしてそれゆえ一時スタック空間へとこぼされるでしょう、それは&lt;c1&gt;with&lt;w2&gt;UTF8&lt;/w2&gt;&lt;/c1&gt;が遂行を終了する後に無効にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose the C function above doesn't retain the &lt;c0&gt;CFString&lt;/c0&gt; object before returning it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、上のC関数が&lt;c0&gt;CFString&lt;/c0&gt;オブジェクトを、それを返す前にリテインしないと思ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose you have an array holding the number of absences from each class during a session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがある学期（２学期制）の各クラスの欠席者数が入った配列を持つと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;Counter&lt;/c0&gt; enumeration defined here has an &lt;c1&gt;Int&lt;/c1&gt; raw value type and gives the first case a raw value of &lt;c2&gt;1&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ここで定義される&lt;c0&gt;Counter&lt;/c0&gt;列挙は、&lt;c1&gt;Int&lt;/c1&gt;の生の値型を持ち、そして最初のケース節に生の値の&lt;c2&gt;1&lt;/c2&gt;を与えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;Float&lt;/c0&gt; type has an &lt;c1&gt;exponent&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; of 8, which gives an exponent bias of &lt;c4&gt;127&lt;/c4&gt; by the calculation above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Float&lt;/c0&gt;型は、８の&lt;c1&gt;exponent&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を持ちます、それは&lt;c4&gt;127&lt;/c4&gt;の指数バイアスを上記の計算によって与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;NSJSONReading&lt;w1&gt;Options&lt;/w1&gt;&lt;/c0&gt; option set is imported as &lt;c2&gt;JSONSerialization&lt;w3&gt;.Reading&lt;w4&gt;Options&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;NSJSONReading&lt;w1&gt;Options&lt;/w1&gt;&lt;/c0&gt;オプションセットは&lt;c2&gt;JSONSerialization&lt;w3&gt;.Reading&lt;w4&gt;Options&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;contains()&lt;/c0&gt; method on &lt;c1&gt;allowed&lt;w2&gt;Moves&lt;/w2&gt;&lt;/c1&gt; performs a bitwise AND operation to check whether the option set contains an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;contains()&lt;/c0&gt;メソドは&lt;c1&gt;allowed&lt;w2&gt;Moves&lt;/w2&gt;&lt;/c1&gt;上で、ビット単位AND演算を実行して、オプションセットがある要素を含むかどうか調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;flag&lt;/c0&gt; string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、上で宣言される&lt;c0&gt;flag&lt;/c0&gt;文字列はある単一の文字で構成されます、しかしUTF-8としてエンコードされる時は８つのコード単位から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;later(_:)&lt;/c0&gt; method above is comparable to the &lt;a1&gt;&lt;c2&gt;URLSession&lt;/c2&gt;&lt;/a1&gt; class's &lt;a3&gt;&lt;c4&gt;data&lt;w5&gt;Task(with:&lt;w6&gt;completion&lt;w7&gt;Handler:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt; method, which is also asynchronous.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、上の&lt;c0&gt;later(_:)&lt;/c0&gt;メソッドは、&lt;a1&gt;&lt;c2&gt;URLSession&lt;/c2&gt;&lt;/a1&gt;クラスの&lt;a3&gt;&lt;c4&gt;data&lt;w5&gt;Task(with:&lt;w6&gt;completion&lt;w7&gt;Handler:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;メソッドと似ています、それもまた非同期です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; function in the following code sample takes an &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;関数は以下のコード例において、&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスをそれの最初のパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt; function in the following code sample takes an &lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;print(address:&lt;w1&gt;as:)&lt;/w1&gt;&lt;/c0&gt;関数は以下のコード例において、&lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスをそれの最初のパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function in the following code sample expects an &lt;c3&gt;Unsafe&lt;w4&gt;Mutable&lt;w5&gt;Pointer&lt;Int&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は以下のコード例において、&lt;c3&gt;Unsafe&lt;w4&gt;Mutable&lt;w5&gt;Pointer&lt;Int&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;インスタンスをそれの最初のパラメータとして期待します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function in the following code sample expects an &lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;Int&gt;&lt;/w4&gt;&lt;/c3&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数は以下のコード例において、&lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;Int&gt;&lt;/w4&gt;&lt;/c3&gt;インスタンスをそれの最初のパラメータとして期待します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c2&gt;name&lt;/c2&gt; of U+FE18 is “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET” (note that “BRACKET” is misspelled).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>たとえば、U+FE18 の&lt;c2&gt;name&lt;/c2&gt;は “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET” です（ “BRACKET” に綴り間違いがあるのに注意してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c7&gt;Int8&lt;/c7&gt; type has a &lt;c8&gt;bit&lt;w9&gt;Width&lt;/w9&gt;&lt;/c8&gt; value of 8 and can store any integer in the range &lt;c10&gt;-128...127&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c7&gt;Int8&lt;/c7&gt;型は、８の&lt;c8&gt;bit&lt;w9&gt;Width&lt;/w9&gt;&lt;/c8&gt;値を持ち、範囲&lt;c10&gt;-128...127&lt;/c10&gt;の中の何らかの整数を格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c9&gt;Direction&lt;/c9&gt; type defines an option set for the four directions you can move in a game.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c9&gt;Direction&lt;/c9&gt;型はオプションセットをあるゲームにおいてあなたが動かせる４つの方向のために定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the &lt;c9&gt;remove&lt;w10&gt;Subrange(_:)&lt;/w10&gt;&lt;/c9&gt; method is implemented by calling &lt;c11&gt;replace&lt;w12&gt;Subrange(_:&lt;w13&gt;with:)&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt; with an empty collection for the &lt;c14&gt;new&lt;w15&gt;Elements&lt;/w15&gt;&lt;/c14&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c9&gt;remove&lt;w10&gt;Subrange(_:)&lt;/w10&gt;&lt;/c9&gt;メソッドは、&lt;c11&gt;replace&lt;w12&gt;Subrange(_:&lt;w13&gt;with:)&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;を&lt;c14&gt;new&lt;w15&gt;Elements&lt;/w15&gt;&lt;/c14&gt;パラメータに対して空のコレクションで呼び出すことによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the German letter “ß” (U+00DF LATIN SMALL LETTER SHARP S) becomes “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) when converted to uppercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ドイツ語文字 “ß” (U+00DF LATIN SMALL LETTER SHARP S) は、アッパーケースに変換される場合は “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the Latin small capitals that are used by the International Phonetic Alphabet have a case, but do not change when they are mapped to any of the other cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、国際音声記号に使われるラテンスモールキャピタルはあるケースを持ちます、しかしそれらが何らかの他のケースにマップされる時に変更を行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the character “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) becomes two scalars (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) when converted to lowercase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、文字 “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) は、ローワーケースに変換される場合は２つのスカラー (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code declares &lt;c0&gt;count&lt;w1&gt;Letter&lt;w2&gt;Changes(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, a function that finds the number of changes required to change one word or phrase into another.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコードは&lt;c0&gt;count&lt;w1&gt;Letter&lt;w2&gt;Changes(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;、ある単語または語句を別のものへ変更するのに必要とされる変更の数を見つける関数、を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code provides a &lt;c3&gt;binary&lt;w4&gt;String&lt;/w4&gt;&lt;/c3&gt; property on every fixed-width integer that represents the number’s binary representation, split into 8-bit chunks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコードは&lt;c3&gt;binary&lt;w4&gt;String&lt;/w4&gt;&lt;/c3&gt;プロパティをあらゆる固定長整数に関して提供します、それは数のバイナリ表現を、８ビットの塊へと分割して表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample creates a &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance with a value of &lt;c2&gt;"7"&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコード見本は&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスを&lt;c2&gt;"7"&lt;/c2&gt;の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample creates a &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance with a value of &lt;c2&gt;"밥"&lt;/c2&gt;, the Korean word for rice:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコード見本は&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスをコリアン単語での米、&lt;c2&gt;"밥"&lt;/c2&gt;の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following code sample creates a &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance with a value of an emoji character:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下のコード見本は&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスをあるemoji文字の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following conversions result in &lt;c2&gt;nil&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、次の変換は&lt;c2&gt;nil&lt;/c2&gt;という結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following conversions result in &lt;c4&gt;nil&lt;/c4&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、以下の変換は&lt;c4&gt;nil&lt;/c4&gt;という結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the integer value 1050 can be represented in its entirety as the string “1050”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、整数値1050はそっくりそのまま文字列「1050」として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the ligature “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) becomes “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) when converted to titlecase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、合字 “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) は、タイトルケースに変換される場合は “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (&lt;c0&gt;\u{1D110}&lt;/c0&gt;) but requires four code units for its UTF-8 representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（&lt;c0&gt;\u{1D110}&lt;/c0&gt;）ですが４つのコード単位をそれのUTF-8表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (&lt;c0&gt;\u{1D110}&lt;/c0&gt;) but requires two code units for its UTF-16 representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（&lt;c0&gt;\u{1D110}&lt;/c0&gt;）ですが２つのコード単位をそれのUTF-16表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the number &lt;e0&gt;-8&lt;/e0&gt; has three trailing zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、数&lt;e0&gt;-8&lt;/e0&gt;は後に続くゼロを３つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the output formatting for a &lt;a2&gt;&lt;c3&gt;JSONEncoder&lt;/c3&gt;&lt;/a2&gt; instance can be sorted and can use ample white space at the same time, so it's valid to specify both options in an option set: &lt;c4&gt;[.sorted, .pretty&lt;w5&gt;Printed]&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;a2&gt;&lt;c3&gt;JSONEncoder&lt;/c3&gt;&lt;/a2&gt;インスタンスに対する出力書式設定は、ソート可能です、そして同時に豊富な空白を使用可能です、それでそれは両方のオプションをあるオプションセットにおいて指定することは有効です：&lt;c4&gt;[.sorted, .pretty&lt;w5&gt;Printed]&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the result of the failable &lt;c2&gt;Int&lt;/c2&gt; initializer is unconditionally unwrapped in the example below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この失敗できる&lt;c2&gt;Int&lt;/c2&gt;イニシャライザの結果は、下の例において無条件にアンラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the size of a &lt;c0&gt;Double&lt;/c0&gt; instance is &lt;c1&gt;Memory&lt;w2&gt;Layout&lt;Double&gt;.size&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Double&lt;/c0&gt;インスタンスのサイズは、&lt;c1&gt;Memory&lt;w2&gt;Layout&lt;Double&gt;.size&lt;/w2&gt;&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the two method calls in this example are equivalent:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この例での２つのメソッド呼び出しは同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the various “family” emoji are encoded as sequences of man, woman, or child emoji that are interleaved with zero width joiners.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、様々な「家族」絵文字は、一連の男の人、女の人、または子供の絵文字として符号化されます、それらはゼロ幅接合子で綴じられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this &lt;c3&gt;Weekday&lt;/c3&gt; enumeration provides static methods that return a random day of the week:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この&lt;c3&gt;Weekday&lt;/c3&gt;列挙は、無作為な曜日を返す静的メソッドを提供します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this code finds the first letter after the first space:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このコードは最初の空白の後で最初の文字を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this custom &lt;c0&gt;Point&lt;/c0&gt; struct uses the default representation supplied by the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このあつらえの&lt;c0&gt;Point&lt;/c0&gt; structは、標準ライブラリによって提供される省略時の表現を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, this hypothetical &lt;c4&gt;Date&lt;/c4&gt; type stores its value as the number of days before or after January 1, 2000:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、この仮説上の&lt;c4&gt;Date&lt;/c4&gt;型は、それの値を2000年１月１日の前または後の日数として格納します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to display the last twenty children of a mirror if they can be accessed efficiently, you write the following code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あるミラーの最後の20個の子を表示するにはそれらが効率的にアクセスされるならば、あなたは以下のコードを書きます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to get the reversed version of a string, reverse its characters and initialize a new &lt;c0&gt;String&lt;/c0&gt; instance from the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある文字列の逆版を得るには、それの文字を逆にして、新しい&lt;c0&gt;String&lt;/c0&gt;インスタンスをその結果から初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to replace a value stored in a raw pointer &lt;c6&gt;p&lt;/c6&gt;, where &lt;c7&gt;U&lt;/c7&gt; is the current type and &lt;c8&gt;T&lt;/c8&gt; is the new type, use a typed pointer to access and deinitialize the current value before initializing the memory with a new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、生のポインタ&lt;c6&gt;p&lt;/c6&gt;に格納される値を置き換えるには、そこで&lt;c7&gt;U&lt;/c7&gt;は現在の型で&lt;c8&gt;T&lt;/c8&gt;は新しい型です、型付ポインタを使ってアクセスして現在の値をデイニシャライズしてください、新しい値でメモリを初期化する前にです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたは空白を捜してから、その文字列の前の部分からその地点までの下位文字列を作成できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたはその文字列を空白について調査して、それからその文字列の前の部分からその地点までの新しい文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to specify a nonnullable pointer to a nullable object reference, use &lt;c6&gt;_Nullable id * _Nonnull&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、ヌル可能性オブジェクト参照への非ヌル可能性ポインタを指定するには、&lt;c6&gt;_Nullable id * _Nonnull&lt;/c6&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, use this initializer to create a string with ten &lt;c0&gt;"0"&lt;/c0&gt; characters in a row.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、このイニシャライザを使うことで、10個の&lt;c0&gt;"0"&lt;/c0&gt;文字を１行に持つ文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, using a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; range expression with an array accesses the subrange from the start of the range expression until the end of the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;範囲式をある配列で使うことは、その下位範囲に範囲式の始まりから配列の終わりまでにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, using the negation operator (prefix &lt;c0&gt;-&lt;/c0&gt;) with &lt;c1&gt;Int&lt;w2&gt;.min&lt;/w2&gt;&lt;/c1&gt; results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、否定演算子（&lt;c0&gt;-&lt;/c0&gt;）を&lt;c1&gt;Int&lt;w2&gt;.min&lt;/w2&gt;&lt;/c1&gt;と使うことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when converting a 16-bit value to an 8-bit type, only the lower 8 bits of &lt;c3&gt;source&lt;/c3&gt; are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、16bit値を8bit型へ変換する場合、&lt;c3&gt;source&lt;/c3&gt;の最も下位の8ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when the character &lt;c0&gt;é&lt;/c0&gt; is represented in its decomposed form, the grapheme base is “e” (U+0065 LATIN SMALL LETTER E) and it is followed by a single grapheme extender, U+0301 COMBINING ACUTE ACCENT.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、文字&lt;c0&gt;é&lt;/c0&gt;がそれの分解形式で表現されるならば、書記素基底は “e” (U+0065 LATIN SMALL LETTER E) です、そしてそれは後に単一の書記素拡張、U+0301 COMBINING ACUTE ACCENTが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when you pass an instance to the &lt;c1&gt;dump(_:&lt;w2&gt;_:&lt;w3&gt;_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function, a mirror is used to render that instance’s runtime contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたがあるインスタンスを&lt;c1&gt;dump(_:&lt;w2&gt;_:&lt;w3&gt;_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数に渡す場合、あるミラーがそのインスタンスのもつ実行時の内容を描画するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can add elements to an array of strings by calling any of the inserting or appending operations that the &lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol defines.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはいくつかの要素をある配列に加えることが、&lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルが定義する何らかの挿入または追加を行う演算を呼び出すことによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of a &lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt; instance and an integer array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある&lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt;インスタンスとある整数配列とに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of an integer array and a &lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある整数配列とある&lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt;インスタンスとに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can concatenate the elements of two integer arrays.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは２つの整数配列に属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can double the elements of an array of doubles or a range of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはdoubleのある配列または整数のある範囲の要素を倍にできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can efficiently test a set for membership of an element or check its intersection with another set:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある要素の帰属について能率的にテストすること、またはそれの別の集合との交差を調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can iterate over a range of &lt;c1&gt;Int&lt;/c1&gt; and use sequence and collection methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある範囲の&lt;c1&gt;Int&lt;/c1&gt;のすべてに反復してシーケンスおよびコレクションのメソッドを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can replace an element of an array by using its subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは配列の中のある要素をそれの添え字を使うことによって置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can shuffle the numbers between &lt;c0&gt;0&lt;/c0&gt; and &lt;c1&gt;9&lt;/c1&gt; by calling the &lt;c2&gt;shuffled()&lt;/c2&gt; method on that range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;0&lt;/c0&gt;と&lt;c1&gt;9&lt;/c1&gt;の間の数をシャッフルすることが、&lt;c2&gt;shuffled()&lt;/c2&gt;メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can shuffle the numbers between &lt;c0&gt;0&lt;/c0&gt; and &lt;c1&gt;9&lt;/c1&gt; by calling the &lt;c2&gt;shuffled(using:)&lt;/c2&gt; method on that range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;0&lt;/c0&gt;と&lt;c1&gt;9&lt;/c1&gt;の間の数をシャッフルすることが、&lt;c2&gt;shuffled(using:)&lt;/c2&gt;メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can sort &lt;e0&gt;part&lt;/e0&gt; of a mutable collection by calling the mutable &lt;c1&gt;sort()&lt;/c1&gt; method on a subscripted subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある可変コレクションの&lt;e0&gt;一部分&lt;/e0&gt;をソートすることが可変&lt;c1&gt;sort()&lt;/c1&gt;メソッドを添え字で指定した下位シーケンス上で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can test whether the first &lt;c3&gt;UInt8&lt;/c3&gt; value in a string’s UTF-8 encoding is equal to the first &lt;c4&gt;UInt32&lt;/c4&gt; value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初の&lt;c3&gt;UInt8&lt;/c3&gt;値が、それのユニコードスカラー値での最初の&lt;c4&gt;UInt32&lt;/c4&gt;と等しいかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can test whether the first &lt;c3&gt;UInt8&lt;/c3&gt; value in a string’s UTF-8 encoding is not equal to the first &lt;c4&gt;UInt32&lt;/c4&gt; value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初の&lt;c3&gt;UInt8&lt;/c3&gt;値が、それのユニコードスカラー値での最初の&lt;c4&gt;UInt32&lt;/c4&gt;と等しくないかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use &lt;c7&gt;stride(from:&lt;w8&gt;to:&lt;w9&gt;by:)&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; to iterate over an interval of floating-point values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c7&gt;stride(from:&lt;w8&gt;to:&lt;w9&gt;by:)&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を使って浮動小数点値のある間隔のすべてにわたって反復できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use the &lt;c0&gt;shuffle(using:)&lt;/c0&gt; method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;shuffle(using:)&lt;/c0&gt;メソッドを使って、配列の要素を無作為に再配列することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this initializer to create a string with ten &lt;c0&gt;"ab"&lt;/c0&gt; strings in a row.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのイニシャライザを使うことで、10個の&lt;c0&gt;"ab"&lt;/c0&gt;文字列をひとつの行に持つ文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを整数からなる配列で使うことで、隣接する同等の項目をフィルタしたり頻度を数えたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method on an array of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを数値からなる配列で使うことで、それらの合計を見つけるまたは生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use this method to call an API that expects a pointer to a different type that is layout compatible with your pointer’s &lt;c4&gt;Pointee&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはこのメソッドを使うことで、異なる型へのポインタを期待するもので、あなたのポインタのもつ&lt;c4&gt;Pointee&lt;/c4&gt;と互換のレイアウトである、あるAPIを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you could create an &lt;c0&gt;Int&lt;w1&gt;Pairs&lt;/w1&gt;&lt;/c0&gt; structure that holds a list of two-integer tuples and use an initializer that accepts a &lt;c2&gt;Key&lt;w3&gt;Value&lt;w4&gt;Pairs&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは&lt;c0&gt;Int&lt;w1&gt;Pairs&lt;/w1&gt;&lt;/c0&gt;構造体を作成することができます、それは２整数のタプルのリストを保持して、&lt;c2&gt;Key&lt;w3&gt;Value&lt;w4&gt;Pairs&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスを受け入れるイニシャライザを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you could define a &lt;c1&gt;User&lt;/c1&gt; type with an &lt;c2&gt;id&lt;/c2&gt; property that is stable across your app and your app’s database storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある&lt;c1&gt;User&lt;/c1&gt;型を、あなたのアプリとあなたのアプリのもつデータベースストレージにわたって安定しているある&lt;c2&gt;id&lt;/c2&gt;プロパティで定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you create an empty &lt;c0&gt;Set&lt;/c0&gt; instance with either this initializer or with an empty array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは空の&lt;c0&gt;Set&lt;/c0&gt;インスタンスを、このイニシャライザでまたは空の配列リテラルでのどちらかで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you may need to serialize the result or pass it as a value to another part of your app that handles the result data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは結果をシリアライズするまたはそれをある値としてあなたのアプリの別の部分に、結果データを処理するものに渡す必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you may run a series of randomness tests and compute the statistical average of both a range of numbers returned from a random number generator, as well as the failure rate of calling the API.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは一連の無作為性テストを走らせて、無作為数生成子から返されたある範囲の数、それだけでなくそのAPI呼び出しの失敗割合の両方の統計上の平均を計算するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you might replace an Objective-C constant with a Swift constant that's nested inside a containing Swift type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはObjective-C定数を、含んでいるSwift型の内部に入れ子にされるSwift定数と置き換えるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you might typically use a &lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt; loop to print each of the elements in an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたは概して&lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt;ループを使って、ある配列の中の各要素を出力するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, “i” is soft dotted because the dot disappears when adding an accent mark, as in “í”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>たとえば、 “i” は、ソフトドットを持ちます、なぜならそのドットはアクセント符号を、“í” でのように、加えられる時に見えなくなるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For extensible floating-point types, &lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; should be the maximum allowed significand width (without counting any leading integral bit of the significand).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>拡張可能な浮動小数点型に対して、&lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Count&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は許される最大仮数幅であるべきです（全く仮数の先頭整数ビットを数えることなく）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For fixed-width floating-point types, this is the actual number of fractional significand bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>固定長浮動小数点型に対して、これは小数部仮数ビットの実際の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For formats which don’t support this feature, the default implementation encodes the given object unconditionally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この機能性をサポートしない形式に対して、省略時の実装は与えられたオブジェクトを無条件にエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For information about key-path expressions, see &lt;a0&gt;Key-Path Expression&lt;/a0&gt; in &lt;a1&gt;The Swift Programming Language (Swift 4.1)&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式についての情報として、&lt;a0&gt;キーパス式&lt;/a0&gt;を&lt;a1&gt;Swiftプログラミング言語 (Swift 4.1)&lt;/a1&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For instances of &lt;c6&gt;NSSet&lt;/c6&gt; that are already immutable, &lt;c7&gt;copy(with:)&lt;/c7&gt; returns the same set in constant time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>元から不変である&lt;c6&gt;NSSet&lt;/c6&gt;のインスタンスに対しては、&lt;c7&gt;copy(with:)&lt;/c7&gt;は同じ集合を定数時間で返します；そうでなければ、コピーすることの性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For integer types, any remainder of the division is discarded.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数型に対して、除算の余りは何であれ破棄されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more about arithmetic with overflow operators, see &lt;a0&gt;Overflow Operators&lt;/a0&gt; in &lt;e1&gt;&lt;a2&gt;The Swift Programming Language&lt;/a2&gt;&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー演算子を使う算術についてさらには、&lt;a0&gt;オーバーフロー演算子&lt;/a0&gt;を&lt;e1&gt;&lt;a2&gt;Swiftプログラミング言語&lt;/a2&gt;&lt;/e1&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more detail, see the documentation for the APIs used by each platform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>詳細として、各プラットホームで使われるAPIの文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about operation declarations, see &lt;a3&gt;Operator Declaration&lt;/a3&gt; in &lt;a4&gt;The Swift Programming Language&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子宣言についての更なる情報として、&lt;a3&gt;演算子宣言&lt;/a3&gt;を&lt;a4&gt;Swiftプログラミング言語&lt;/a4&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the Unicode terms used in this discussion, see the &lt;a0&gt;Unicode.org glossary&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この解説において使われるユニコード用語についてのさらなる情報は、&lt;a0&gt;Unicode.org用語集&lt;/a0&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about the available rounding rules, see the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;w2&gt;Rounding&lt;w3&gt;Rule&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; enumeration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利用可能な丸め規則についてのさらなる情報として、&lt;c0&gt;Floating&lt;w1&gt;Point&lt;w2&gt;Rounding&lt;w3&gt;Rule&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;列挙を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see &lt;a0&gt;Objective-C and C Code Customization&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>詳細は、&lt;a0&gt;Objective-CとCコードのカスタム化&lt;/a0&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see &lt;a0&gt;Ownership Policy&lt;/a0&gt; in &lt;a1&gt;Memory Management Programming Guide for Core Foundation&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>更なる情報のために、&lt;a0&gt;Ownership Policy&lt;/a0&gt;を&lt;a1&gt;Memory Management Programming Guide for Core Foundation&lt;/a1&gt;で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information, see the top-level &lt;c2&gt;String&lt;w3&gt;Interpolation&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; documentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>更なる情報として、トップレベルの&lt;c2&gt;String&lt;w3&gt;Interpolation&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For most numbers &lt;c0&gt;x&lt;/c0&gt;, this is the difference between &lt;c1&gt;x&lt;/c1&gt; and the next greater (in magnitude) representable number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの数&lt;c0&gt;x&lt;/c0&gt;に対して、これは&lt;c1&gt;x&lt;/c1&gt;と次の（規模における）より大きい表現可能な数との間の差異です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For most purposes, the &lt;c0&gt;Managed&lt;w1&gt;Buffer&lt;/w1&gt;&lt;/c0&gt; class works fine for this purpose, and can simply be used on its own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの用途に対して、&lt;c0&gt;Managed&lt;w1&gt;Buffer&lt;/w1&gt;&lt;/c0&gt;クラスはこの目的のためにすぐれて機能します、そして簡単に単独で使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For operations that require adding or removing elements, see the &lt;c2&gt;Range&lt;w3&gt;Replaceable&lt;w4&gt;Collection&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; protocol instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の追加や削除を要求する演算に対しては、&lt;c2&gt;Range&lt;w3&gt;Replaceable&lt;w4&gt;Collection&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;プロトコルを代わりに見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For ordinary sets, an element equal to &lt;c0&gt;member&lt;/c0&gt; if &lt;c1&gt;member&lt;/c1&gt; is contained in the set; otherwise, &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>普通の集合に対して、&lt;c1&gt;member&lt;/c1&gt;が集合に含まれているならば、&lt;c0&gt;member&lt;/c0&gt;に等しい要素；そうでなければ、&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For ordinary sets, an element equal to &lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt; if the set already contained such a member; otherwise, &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>普通の集合に対して、集合がすでにそのようなメンバを含んでいるならば、&lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt;に等しい要素；そうでなければ、&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For other collections the counters may be out of range or of the wrong type to use as an index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のコレクションに対してこれらのカウンタは、インデックスとして使うのには範囲外または間違った型になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For other values of &lt;c3&gt;x&lt;/c3&gt;, &lt;c4&gt;x&lt;w5&gt;.significand&lt;/w5&gt;&lt;/c4&gt; is defined as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別の値&lt;c3&gt;x&lt;/c3&gt;に対して、&lt;c4&gt;x&lt;w5&gt;.significand&lt;/w5&gt;&lt;/c4&gt;は次のように定義されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For pointers to untyped, raw memory, the following mappings apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型無しの、生のメモリへのポインタに対して、以下のマッピングを適用します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For return types, variables, and arguments, the following mappings apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り型、変数、そして引数のために、以下のマッピングが適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For scalars that represent a number, &lt;c0&gt;numeric&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt; is the numeric type of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数を表すスカラーに対して、&lt;c0&gt;numeric&lt;w1&gt;Type&lt;/w1&gt;&lt;/c0&gt;はそのスカラーの数値型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For scalars that represent a numeric value, &lt;c0&gt;numeric&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; is the whole or fractional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数に関する値を表すスカラーに対して、&lt;c0&gt;numeric&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;は全体のまたは断片的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For sets where the set type and element type are the same, like &lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt; types, this method returns any intersection between the set and &lt;c2&gt;[member]&lt;/c2&gt;, or &lt;c3&gt;nil&lt;/c3&gt; if the intersection is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt;型など、集合型と要素型が同じであるところの集合に対して、このメソッドは集合と&lt;c2&gt;[member]&lt;/c2&gt;の間の何らかの交叉、または交叉が空ならば&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For sets where the set type and element type are the same, like &lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt; types, this method returns any intersection between the set and &lt;c2&gt;[new&lt;w3&gt;Member]&lt;/w3&gt;&lt;/c2&gt;, or &lt;c4&gt;nil&lt;/c4&gt; if the intersection is empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt;型など、集合型と要素型が同じであるところの集合に対して、このメソッドは集合と&lt;c2&gt;[new&lt;w3&gt;Member]&lt;/w3&gt;&lt;/c2&gt;の間の何らかの交叉、または交叉が空ならば&lt;c4&gt;nil&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c0&gt;(2 ** (bit&lt;w1&gt;Width - 1)) - 1&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c0&gt;(2 ** (bit&lt;w1&gt;Width - 1)) - 1&lt;/w1&gt;&lt;/c0&gt;です、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c0&gt;-(2 ** (bit&lt;w1&gt;Width - 1))&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c0&gt;-(2 ** (bit&lt;w1&gt;Width - 1))&lt;/w1&gt;&lt;/c0&gt;です、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c1&gt;-(2 ** (bit&lt;w2&gt;Width - 1))&lt;/w2&gt;&lt;/c1&gt;, where &lt;c3&gt;**&lt;/c3&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c1&gt;-(2 ** (bit&lt;w2&gt;Width - 1))&lt;/w2&gt;&lt;/c1&gt;です、そこで&lt;c3&gt;**&lt;/c3&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For signed integer types, this value is &lt;c3&gt;(2 ** (bit&lt;w4&gt;Width - 1)) - 1&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数型に対して、この値は&lt;c3&gt;(2 ** (bit&lt;w4&gt;Width - 1)) - 1&lt;/w4&gt;&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For structs whose stored properties are all &lt;c3&gt;Hashable&lt;/c3&gt;, and for enum types that have all-&lt;c4&gt;Hashable&lt;/c4&gt; associated values, the compiler is able to provide an implementation of &lt;c5&gt;hash(into:)&lt;/c5&gt; automatically.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの格納プロパティが全て&lt;c3&gt;Hashable&lt;/c3&gt;であるstructに対して、そして全て&lt;c4&gt;Hashable&lt;/c4&gt;関連値を持つenum型に対して、コンパイラは&lt;c5&gt;hash(into:)&lt;/c5&gt;の実装を自動的に提供可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For such scalars, this property is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなスカラーに対して、このプロパティは&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For the &lt;c6&gt;Shipping&lt;w7&gt;Options&lt;/w7&gt;&lt;/c6&gt; declaration, see the &lt;c8&gt;Option&lt;w9&gt;Set&lt;/w9&gt;&lt;/c8&gt; protocol discussion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;Shipping&lt;w7&gt;Options&lt;/w7&gt;&lt;/c6&gt;宣言については、&lt;c8&gt;Option&lt;w9&gt;Set&lt;/w9&gt;&lt;/c8&gt;プロトコル解説を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For the inherited methods to work properly, conforming types must meet the following axioms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承されたメソッドを適切に働かせるためには、準拠する型は以下の原則に応じる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For this reason, you should almost never need to use a bridged reference type directly in your own code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この理由のために、あなたはブリッジ参照型を直接にあなた自身のコードにおいて使う必要はほとんどないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two finite values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the remainder &lt;c2&gt;r&lt;/c2&gt; of dividing &lt;c3&gt;x&lt;/c3&gt; by &lt;c4&gt;y&lt;/c4&gt; satisfies &lt;c5&gt;x == y * q + r&lt;/c5&gt;, where &lt;c6&gt;q&lt;/c6&gt; is the integer nearest to &lt;c7&gt;x / y&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの有限値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c3&gt;x&lt;/c3&gt;を&lt;c4&gt;y&lt;/c4&gt;で割った余り&lt;c2&gt;r&lt;/c2&gt;は&lt;c5&gt;x == y * q + r&lt;/c5&gt;を満足させます、ここで&lt;c6&gt;q&lt;/c6&gt;は&lt;c7&gt;x / y&lt;/c7&gt;に最も近い整数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two integers &lt;e0&gt;a&lt;/e0&gt; and &lt;e1&gt;b&lt;/e1&gt;, &lt;e2&gt;a&lt;/e2&gt; is a multiple of &lt;e3&gt;b&lt;/e3&gt; if there exists a third integer &lt;e4&gt;q&lt;/e4&gt; such that &lt;e5&gt;a = q*b&lt;/e5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの整数&lt;e0&gt;a&lt;/e0&gt;と&lt;e1&gt;b&lt;/e1&gt;に対して、&lt;e2&gt;a&lt;/e2&gt;は&lt;e3&gt;b&lt;/e3&gt;の倍数です、もし第３の整数&lt;e4&gt;q&lt;/e4&gt;が存在して、&lt;e5&gt;a = q*b&lt;/e5&gt;であるようなところでは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, and a distance &lt;c2&gt;n = x&lt;w3&gt;.distance(to: y)&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;x&lt;w5&gt;.advanced(by: n) == y&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;、そして隔たり&lt;c2&gt;n = x&lt;w3&gt;.distance(to: y)&lt;/w3&gt;&lt;/c2&gt;に対して、&lt;c4&gt;x&lt;w5&gt;.advanced(by: n) == y&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;maximum(x, y)&lt;/c2&gt; is &lt;c3&gt;x&lt;/c3&gt; if &lt;c4&gt;x &gt; y&lt;/c4&gt;, &lt;c5&gt;y&lt;/c5&gt; if &lt;c6&gt;x &lt;= y&lt;/c6&gt;, or whichever of &lt;c7&gt;x&lt;/c7&gt; or &lt;c8&gt;y&lt;/c8&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;maximum(x, y)&lt;/c2&gt;の結果は&lt;c4&gt;x &gt; y&lt;/c4&gt;ならば&lt;c3&gt;x&lt;/c3&gt;、&lt;c6&gt;x &lt;= y&lt;/c6&gt;ならば&lt;c5&gt;y&lt;/c5&gt;、または他のものがクワイエットNaNならば&lt;c7&gt;x&lt;/c7&gt;か&lt;c8&gt;y&lt;/c8&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;maximum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;x&lt;/c4&gt; if &lt;c5&gt;x&lt;w6&gt;.magnitude &gt; y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;, &lt;c8&gt;y&lt;/c8&gt; if &lt;c9&gt;x&lt;w10&gt;.magnitude &lt;= y&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;, or whichever of &lt;c12&gt;x&lt;/c12&gt; or &lt;c13&gt;y&lt;/c13&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;maximum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt;の結果は、&lt;c5&gt;x&lt;w6&gt;.magnitude &gt; y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;ならば&lt;c4&gt;x&lt;/c4&gt;、&lt;c9&gt;x&lt;w10&gt;.magnitude &lt;= y&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;ならば&lt;c8&gt;y&lt;/c8&gt;、または他のものがクワイエットNaNならば&lt;c12&gt;x&lt;/c12&gt;か&lt;c13&gt;y&lt;/c13&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;minimum(x, y)&lt;/c2&gt; is &lt;c3&gt;x&lt;/c3&gt; if &lt;c4&gt;x &lt;= y&lt;/c4&gt;, &lt;c5&gt;y&lt;/c5&gt; if &lt;c6&gt;y &lt; x&lt;/c6&gt;, or whichever of &lt;c7&gt;x&lt;/c7&gt; or &lt;c8&gt;y&lt;/c8&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;minimum(x, y)&lt;/c2&gt;の結果は&lt;c4&gt;x &lt;= y&lt;/c4&gt;ならば&lt;c3&gt;x&lt;/c3&gt;、&lt;c6&gt;y &lt; x&lt;/c6&gt;ならば&lt;c5&gt;y&lt;/c5&gt;、または他のものがクワイエットNaNならば&lt;c7&gt;x&lt;/c7&gt;か&lt;c8&gt;y&lt;/c8&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For two values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, the result of &lt;c2&gt;minimum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt; is &lt;c4&gt;x&lt;/c4&gt; if &lt;c5&gt;x&lt;w6&gt;.magnitude &lt;= y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;, &lt;c8&gt;y&lt;/c8&gt; if &lt;c9&gt;y&lt;w10&gt;.magnitude &lt; x&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;, or whichever of &lt;c12&gt;x&lt;/c12&gt; or &lt;c13&gt;y&lt;/c13&gt; is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;に対して、&lt;c2&gt;minimum&lt;w3&gt;Magnitude(x, y)&lt;/w3&gt;&lt;/c2&gt;の結果は&lt;c5&gt;x&lt;w6&gt;.magnitude &lt;= y&lt;w7&gt;.magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;ならば&lt;c4&gt;x&lt;/c4&gt;、&lt;c9&gt;y&lt;w10&gt;.magnitude &lt; x&lt;w11&gt;.magnitude&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;ならば&lt;c8&gt;y&lt;/c8&gt;、または他のものがクワイエットNaNならば&lt;c12&gt;x&lt;/c12&gt;か&lt;c13&gt;y&lt;/c13&gt;どちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For unsigned integer types, this value is &lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数型に対して、この値は&lt;c0&gt;(2 ** bit&lt;w1&gt;Width) - 1&lt;/w1&gt;&lt;/c0&gt;です、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For unsigned integer types, this value is always &lt;c0&gt;0&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数型に対して、この値は常に&lt;c0&gt;0&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For values &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt; and their truncated integer quotient &lt;c2&gt;q&lt;/c2&gt;, the remainder &lt;c3&gt;r&lt;/c3&gt; satisfies &lt;c4&gt;x == y * q + r&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;および切り捨てられる整数指数&lt;c2&gt;q&lt;/c2&gt;に対して、余り&lt;c3&gt;r&lt;/c3&gt;は&lt;c4&gt;x == y * q + r&lt;/c4&gt;を満足させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For your type to automatically receive default implementations for set-related operations, the &lt;c2&gt;raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; property must be of a type that conforms to the &lt;c4&gt;Fixed&lt;w5&gt;Width&lt;w6&gt;Integer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; protocol, such as &lt;c7&gt;Int&lt;/c7&gt; or &lt;c8&gt;UInt8&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型が自動的に省略時の実装をセット関連の演算に対して受け取るようにするには、&lt;c2&gt;raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;プロパティは、&lt;c4&gt;Fixed&lt;w5&gt;Width&lt;w6&gt;Integer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;プロトコルに準拠する型の１つでなければなりません、例えば&lt;c7&gt;Int&lt;/c7&gt;または&lt;c8&gt;UInt8&lt;/c8&gt;など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fortify your code with runtime checks, and examine your values' runtime representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを実行時チェックで強化し、そしてあなたの値の実行時表現を検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Forward declarations of Swift classes and protocols can be used only as types for method and property declarations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftのクラスとプロトコルの前方宣言は、メソッドおよびプロパティ宣言に対する型としてのみ使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Foundation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファウンデーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Foundation classes often declare enumeration or constant types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundationクラスは、しばしば列挙や定数型を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Framework</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From Protocol</seg>
      </tuv>
      <tuv lang="ja">
        <seg>由来プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Functions that use a &lt;c4&gt;Text&lt;w5&gt;Output&lt;w6&gt;Stream&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; target may call &lt;c7&gt;write(_:)&lt;/c7&gt; multiple times per writing operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Text&lt;w5&gt;Output&lt;w6&gt;Stream&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;ターゲットを使う関数は、&lt;c7&gt;write(_:)&lt;/c7&gt;を書き込み操作のたびに複数回呼び出すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fundamental data types such as &lt;a0&gt;&lt;c1&gt;Int&lt;/c1&gt;&lt;/a0&gt;, &lt;a2&gt;&lt;c3&gt;Double&lt;/c3&gt;&lt;/a2&gt;, and &lt;a4&gt;&lt;c5&gt;String&lt;/c5&gt;&lt;/a4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基本的なデータ型、例えば&lt;a0&gt;&lt;c1&gt;Int&lt;/c1&gt;&lt;/a0&gt;、&lt;a2&gt;&lt;c3&gt;Double&lt;/c3&gt;&lt;/a2&gt;、そして&lt;a4&gt;&lt;c5&gt;String&lt;/c5&gt;&lt;/a4&gt;など</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enumerations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接参照を含まないものは自明です、インポートされたCの構造体と列挙のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enums.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接参照を含まないものは自明です、インポートされたCのstructとenumのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates a default mirror for all ancestor classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての先祖クラスに対して省略時のミラーを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generating Random Binary Data</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為なバイナリデータを生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generic Instance Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generic Type Alias</seg>
      </tuv>
      <tuv lang="ja">
        <seg>総称体型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gets the value of this unmanaged reference as a managed reference and consumes an unbalanced retain of it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この管理されない参照の値を管理された参照として取得します、そしてそれのある不均衡なリテイン（保持）を使い果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gets the value of this unmanaged reference as a managed reference without consuming an unbalanced retain of it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この管理されない参照の値を管理された参照として取得します、それのある不均衡なリテイン（保持）を使い果たすことなしにです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting C Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C文字列を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting Characters and Bytes</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字とバイトを取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列を取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting a dictionary’s value using a key returns an optional value, so &lt;c0&gt;image&lt;w1&gt;Paths["star"]&lt;/w1&gt;&lt;/c0&gt; has type &lt;c2&gt;Optional&lt;String&gt;&lt;/c2&gt; or, written in the preferred manner, &lt;c3&gt;String?&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書の持つ値をあるキーを使って取得することはあるオプショナル値を返します、それで&lt;c0&gt;image&lt;w1&gt;Paths["star"]&lt;/w1&gt;&lt;/c0&gt;は型&lt;c2&gt;Optional&lt;String&gt;&lt;/c2&gt;または、より好ましい流儀で書かれて、&lt;c3&gt;String?&lt;/c3&gt;を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting an Offset Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オフセット値の取得</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Global Numeric Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバルな数値関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Global functions such as &lt;a0&gt;&lt;c1&gt;print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; and &lt;a4&gt;&lt;c5&gt;abs(_:)&lt;/c5&gt;&lt;/a4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバル関数、&lt;a0&gt;&lt;c1&gt;print(_:&lt;w2&gt;separator:&lt;w3&gt;terminator:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;そして&lt;a4&gt;&lt;c5&gt;abs(_:)&lt;/c5&gt;&lt;/a4&gt;など</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Greater than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Greater than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Greek iota subscript only (U+0345 COMBINING GREEK YPOGEGRAMMENI).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ギリシャ語下付き文字イオタのみ (U+0345 COMBINING GREEK YPOGEGRAMMENI)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Grouping Related Objective-C Constants</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連するObjective-C定数をグループにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Guaranteed always unique (e.g. UUIDs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>常に特有であると保証される（たとえば、UUID）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Half-open range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半開範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling Dynamically Typed Methods and Objects in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>動的に型付メソッドとオブジェクトをSwiftにおいて取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling String Interpolations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間を取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hash values are not guaranteed to be equal across different executions of your program.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値は、あなたのプログラムの異なる実行をまたいで等しいことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashes the elements of the vector using the given hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの要素をこの与えられたハーシャーを使ってハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashes the essential components of this value by feeding them into the given hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の本質的な構成要素を、それらをその与えられたhasherへと与えることによって、ハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hashing a value means feeding its essential components into a hash function, represented by the &lt;c0&gt;Hasher&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をハッシュ化することは、それの本質的な構成要素を、&lt;c0&gt;Hasher&lt;/c0&gt;型によって表される、ハッシュ関数へと投入することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here a default path is supplied for an image that is missing from &lt;c3&gt;image&lt;w4&gt;Paths&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで省略時のパスは、&lt;c3&gt;image&lt;w4&gt;Paths&lt;/w4&gt;&lt;/c3&gt;から見つからない画像に対して提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here's how Swift imports the related functions above into a single type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、Swiftが上での関連した関数をある単一の型へとインポートする方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here's how the &lt;c0&gt;Traffic&lt;w1&gt;Light&lt;w2&gt;Color&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type is imported to Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、&lt;c0&gt;Traffic&lt;w1&gt;Light&lt;w2&gt;Color&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型がSwiftへとインポートされる方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here's how the &lt;c0&gt;UIView&lt;w1&gt;Autoresizing&lt;/w1&gt;&lt;/c0&gt; type is imported to Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、&lt;c0&gt;UIView&lt;w1&gt;Autoresizing&lt;/w1&gt;&lt;/c0&gt;型がSwiftへとインポートされる方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, a set of strings is created from an array literal holding only strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここでは、文字列の集合が文字列のみを保持する配列リテラルから作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, a set of strings is created from an array literal holding only strings:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここでは、文字列の集合が文字列のみを保持する配列リテラルから作成されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the assignment to &lt;c6&gt;dest&lt;w7&gt;Bytes&lt;/w7&gt;&lt;/c6&gt; creates a new, nonowning buffer pointer covering the first &lt;c8&gt;n&lt;/c8&gt; bytes of the memory that &lt;c9&gt;some&lt;w10&gt;Bytes&lt;/w10&gt;&lt;/c9&gt; references—nothing is copied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで、&lt;c6&gt;dest&lt;w7&gt;Bytes&lt;/w7&gt;&lt;/c6&gt;への割り当ては、&lt;c9&gt;some&lt;w10&gt;Bytes&lt;/w10&gt;&lt;/c9&gt;が参照するメモリの最初の&lt;c8&gt;n&lt;/c8&gt;バイトを変換して、新しい、非所有のバッファポインタを作成します — コピーされるものは何もありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the assignment to &lt;c7&gt;dest&lt;w8&gt;Bytes&lt;/w8&gt;&lt;/c7&gt; creates a new, nonowning buffer pointer covering the first &lt;c9&gt;n&lt;/c9&gt; bytes of the memory that &lt;c10&gt;some&lt;w11&gt;Bytes&lt;/w11&gt;&lt;/c10&gt; references—nothing is copied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで、&lt;c7&gt;dest&lt;w8&gt;Bytes&lt;/w8&gt;&lt;/c7&gt;への割り当ては、&lt;c10&gt;some&lt;w11&gt;Bytes&lt;/w11&gt;&lt;/c10&gt;が参照するメモリの最初の&lt;c9&gt;n&lt;/c9&gt;バイトを変換して、新しい、非所有のバッファポインタを作成します — コピーされるものは何もありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, three elements in the middle of an array of integers are replaced by the five elements of a &lt;c3&gt;Repeated&lt;Int&gt;&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここでは、整数からなるある配列の真ん中の３つの要素が&lt;c3&gt;Repeated&lt;Int&gt;&lt;/c3&gt;インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, we find the length of the first sentence and create an uppercase version.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここで、私たちは最初の文の長さを見つけます、そして大文字バージョンを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s a definition of a &lt;c0&gt;Countdown&lt;/c0&gt; sequence that serves as its own iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c0&gt;Countdown&lt;/c0&gt;シーケンスの定義があります、それはそれ自身イテレータとしての務めを果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of a type that declares the minimal requirements for a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにある型の例があります、それはあるコレクションのための最小限の要件を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of checking whether each code unit in a string’s &lt;c0&gt;utf16&lt;/c0&gt; view is a lead surrogate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、ある文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;ビューの中の各コード単位が先頭サロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of checking whether each code unit in a string’s &lt;c0&gt;utf16&lt;/c0&gt; view is a trailing surrogate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、ある文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;ビューの中の各コード単位が後続サロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of creating an array initialized with five strings containing the letter &lt;e0&gt;Z&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、字&lt;e0&gt;Z&lt;/e0&gt;を含んでいる５つの文字列で初期化される配列を作成する例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of inserting a range of integers into an array of the same type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに整数の範囲を同じ型の配列へ挿入する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of sorting a list of students’ names.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、生徒名のリストをソートする例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of the number -8.5 represented as an instance of the &lt;c0&gt;Double&lt;/c0&gt; type, which defines a radix of 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c0&gt;Double&lt;/c0&gt;型のあるインスタンスとして表される数-8.5の例があります、それは２の基数を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example of transforming a string to all lowercase letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、ある文字列を小文字の文字に変換する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example that finds a student name that begins with the letter “A”:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、文字「A」で始まる生徒名を見つける例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an example that sorts the first half of an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにある例があります、それは整数からなるある配列の前半分をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an implementation of the &lt;c0&gt;reduce1(_:)&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c0&gt;reduce1(_:)&lt;/c0&gt;メソッドの実装があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s an implementation of those steps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにこれらの手順の実装があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s how Swift imports them:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここにどのようにスウィフトがそれらをインポートするかがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s how to find the longest string in a sequence, using the &lt;c1&gt;animals&lt;/c1&gt; array introduced earlier as an example:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに最も長い文字列をあるシーケンスの中で見つける方法があります、前に導入された&lt;c1&gt;animals&lt;/c1&gt;配列を例として使っています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s the Swift version of those declarations when you import them:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに、あなたがそれらをインポートする場合のSwiftバージョンのそれら宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here’s the initial declaration of the &lt;c2&gt;Grid&lt;w3&gt;Point&lt;/w3&gt;&lt;/c2&gt; type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ここに&lt;c2&gt;Grid&lt;w3&gt;Point&lt;/w3&gt;&lt;/c2&gt;型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Historically “epsilon” has been used to refer to several different concepts in different languages, leading to confusion and bugs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>歴史的に “イプシロン” は、異なる言語でいくつかの異なる概念に言及するのに使われていて、混乱とバグに通じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, &lt;c3&gt;count&lt;/c3&gt; may be zero even for a non-&lt;c4&gt;nil&lt;/c4&gt; &lt;c5&gt;start&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、&lt;c3&gt;count&lt;/c3&gt;は非&lt;c4&gt;nil&lt;/c4&gt;の&lt;c5&gt;start&lt;/c5&gt;に対してもゼロであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, &lt;c4&gt;count&lt;/c4&gt; may be zero even for a non-&lt;c5&gt;nil&lt;/c5&gt; &lt;c6&gt;start&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、&lt;c4&gt;count&lt;/c4&gt;は非&lt;c5&gt;nil&lt;/c5&gt;の&lt;c6&gt;start&lt;/c6&gt;に対してもゼロであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, a buffer can have a &lt;c3&gt;count&lt;/c3&gt; of zero even with a non-&lt;c4&gt;nil&lt;/c4&gt; base address.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、バッファはゼロの&lt;c3&gt;count&lt;/c3&gt;を非&lt;c4&gt;nil&lt;/c4&gt;に基づくアドレスでも持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, because the &lt;c1&gt;Any&lt;/c1&gt; type can refer to any type, a downcast to a more specific type isn't guaranteed by the compiler to succeed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、&lt;c1&gt;Any&lt;/c1&gt;型がどんな型でも参照できることから、より具体的な型へのダウンキャストはコンパイラによって成功することが保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if a forced downcast fails, a runtime error is triggered:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、強制型キャストが失敗するならば、実行時エラーが引き起こされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you pass &lt;c0&gt;19&lt;/c0&gt; as &lt;c1&gt;rhs&lt;/c1&gt;, the method first bitmasks &lt;c2&gt;rhs&lt;/c2&gt; to &lt;c3&gt;3&lt;/c3&gt;, and then uses that masked value as the number of bits to shift &lt;c4&gt;lhs&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;19&lt;/c0&gt;を&lt;c1&gt;rhs&lt;/c1&gt;として渡すならば、このメソッドは最初に&lt;c2&gt;rhs&lt;/c2&gt;を&lt;c3&gt;3&lt;/c3&gt;にビットマスクして、それからそのマスクされた値をビット数として使うことで&lt;c4&gt;lhs&lt;/c4&gt;をシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you use &lt;c0&gt;19&lt;/c0&gt; as &lt;c1&gt;rhs&lt;/c1&gt;, the operation first bitmasks &lt;c2&gt;rhs&lt;/c2&gt; to &lt;c3&gt;3&lt;/c3&gt;, and then uses that masked value as the number of bits to shift &lt;c4&gt;lhs&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;19&lt;/c0&gt;を&lt;c1&gt;rhs&lt;/c1&gt;として使うならば、この演算は最初に&lt;c2&gt;rhs&lt;/c2&gt;を&lt;c3&gt;3&lt;/c3&gt;にビットマスクして、それからそのマスクされた値をビット数として使うことで&lt;c4&gt;lhs&lt;/c4&gt;をシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, if you use &lt;c0&gt;8&lt;/c0&gt; as the shift amount, the method first masks the shift amount to zero, and then performs the shift, resulting in no change to the original value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたが&lt;c0&gt;8&lt;/c0&gt;をシフト量として使うならば、メソッドは最初にそのシフト量をマスクしてゼロにして、それからシフトを実行して、元の値に対して変更しないという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, in cases where objects of various different classes must serve as storage, &lt;c2&gt;Managed&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is needed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、種々の異なるクラスのオブジェクトがストレージとして供されなければならない場合には、&lt;c2&gt;Managed&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;が必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, in optimized builds (&lt;c3&gt;-O&lt;/c3&gt;), no check is performed to ensure that the current instance actually has a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、最適化ビルド（&lt;c3&gt;-O&lt;/c3&gt;）において、現在のインスタンスが実際に値を持つか確かめる確認は全く実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, in order to meet the complexity guarantees of a random-access collection, either the index for your custom type must conform to the &lt;c8&gt;Strideable&lt;/c8&gt; protocol or you must implement the &lt;c9&gt;index(_:&lt;w10&gt;offset&lt;w11&gt;By:)&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt; and &lt;c12&gt;distance(from:&lt;w13&gt;to:)&lt;/w13&gt;&lt;/c12&gt; methods with O(1) efficiency.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、無作為アクセスコレクションの計算量（複雑さ）保証を達成する手段として、あなたのあつらえの型に対するインデックスが&lt;c8&gt;Strideable&lt;/c8&gt;プロトコルに準拠する、またはあなたが&lt;c9&gt;index(_:&lt;w10&gt;offset&lt;w11&gt;By:)&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;と&lt;c12&gt;distance(from:&lt;w13&gt;to:)&lt;/w13&gt;&lt;/c12&gt;メソッドをO(1)の効率で実装する、いずれかをしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an &lt;c10&gt;Unsafe&lt;w11&gt;Mutable&lt;w12&gt;Raw&lt;w13&gt;Buffer&lt;w14&gt;Pointer&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; instance copies bytes out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションを&lt;c10&gt;Unsafe&lt;w11&gt;Mutable&lt;w12&gt;Raw&lt;w13&gt;Buffer&lt;w14&gt;Pointer&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;インスタンスで初期化することは、バイトを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an &lt;c6&gt;Unsafe&lt;w7&gt;Buffer&lt;w8&gt;Pointer&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; instance copies the instances out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションを&lt;c6&gt;Unsafe&lt;w7&gt;Buffer&lt;w8&gt;Pointer&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;インスタンスで初期化することは、インスタンスを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an &lt;c8&gt;Unsafe&lt;w9&gt;Mutable&lt;w10&gt;Buffer&lt;w11&gt;Pointer&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; instance copies the instances out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションを&lt;c8&gt;Unsafe&lt;w9&gt;Mutable&lt;w10&gt;Buffer&lt;w11&gt;Pointer&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;インスタンスで初期化することは、インスタンスを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, initializing another collection with an &lt;c8&gt;Unsafe&lt;w9&gt;Raw&lt;w10&gt;Buffer&lt;w11&gt;Pointer&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; instance copies bytes out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、別のコレクションを&lt;c8&gt;Unsafe&lt;w9&gt;Raw&lt;w10&gt;Buffer&lt;w11&gt;Pointer&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;インスタンスで初期化することは、バイトを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, macros can make debugging and refactoring difficult.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかし、マクロはデバッグやリファクタリングを難しくすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the type of a function, method, or closure always includes a return type, which is &lt;c0&gt;Void&lt;/c0&gt; if otherwise unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、関数、メソッド、またはクロージャは、常に戻り型を含みます、それは指定されないならば&lt;c0&gt;Void&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the underlying hash algorithm is designed to exhibit avalanche effects: slight changes to the seed or the input byte sequence will typically produce drastic changes in the generated hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、基礎をなすハッシュアルゴリズムは、雪崩効果を示すように設計されます：そのシードまたは入力バイト列に対するわずかな変更は、概して生成されたハッシュ値に徹底的な変化を生じさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, they're inaccessible at compile time and don't appear in the generated header for a framework target.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、それらはコンパイル時にはアクセス不可能です、そしてフレームワークターゲットに対する生成ヘッダの中に現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, you can’t use the &lt;c1&gt;throws&lt;/c1&gt; keyword to model APIs that return asynchronously.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、あなたは&lt;c1&gt;throws&lt;/c1&gt;キーワードを使うことで、非同期に返るAPIをこしらえることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identical</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identical to &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;と同一。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identifiable Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Identifiableの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identify a Throwing Expression to Preserve</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローする式を識別することで保全する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identities could be any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一性は、以下のどれかでありえます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ideographic description characters are technically printable characters, but advanced rendering engines may use them to approximate ideographs that are otherwise unrepresentable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表意文字記述文字は技術的には印刷に適した文字です、しかし先進のレンダリングエンジンは、それを使うことでそうしなければ表現できない表意文字の近似を得るかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;are&lt;w3&gt;Equivalent(b, c)&lt;/w3&gt;&lt;/c2&gt; are both &lt;c4&gt;true&lt;/c4&gt;, then &lt;c5&gt;are&lt;w6&gt;Equivalent(a, c)&lt;/w6&gt;&lt;/c5&gt; is also &lt;c7&gt;true&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;Equivalent(a, b)&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;are&lt;w3&gt;Equivalent(b, c)&lt;/w3&gt;&lt;/c2&gt;が両方とも&lt;c4&gt;true&lt;/c4&gt;ならば、そのとき&lt;c5&gt;are&lt;w6&gt;Equivalent(a, c)&lt;/w6&gt;&lt;/c5&gt;もまた&lt;c7&gt;true&lt;/c7&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, b)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c4&gt;are&lt;w5&gt;In&lt;w6&gt;Increasing&lt;w7&gt;Order(b, c)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; are both &lt;c8&gt;true&lt;/c8&gt;, then &lt;c9&gt;are&lt;w10&gt;In&lt;w11&gt;Increasing&lt;w12&gt;Order(a, c)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt; is also &lt;c13&gt;true&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order(a, b)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c4&gt;are&lt;w5&gt;In&lt;w6&gt;Increasing&lt;w7&gt;Order(b, c)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;が両方とも&lt;c8&gt;true&lt;/c8&gt;ならば、そのとき&lt;c9&gt;are&lt;w10&gt;In&lt;w11&gt;Increasing&lt;w12&gt;Order(a, c)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;もまた&lt;c13&gt;true&lt;/c13&gt;である。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;body&lt;/c0&gt; has a return value, that value is also used as the return value for the &lt;c1&gt;with&lt;w2&gt;CString(_:)&lt;/w2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;が戻り値を持つならば、その値はまた&lt;c1&gt;with&lt;w2&gt;CString(_:)&lt;/w2&gt;&lt;/c1&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;body&lt;/c0&gt; has a return value, that value is also used as the return value for the &lt;c1&gt;with&lt;w2&gt;CString(encoded&lt;w3&gt;As:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;が戻り値を持つならば、その値はまた&lt;c1&gt;with&lt;w2&gt;CString(encoded&lt;w3&gt;As:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;c&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt; contains ill-formed UTF-8 code unit sequences, this initializer replaces them with the Unicode replacement character (&lt;c2&gt;"\u{FFFD}"&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;c&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;が文法的に正しくないUTF-8コードユニットシーケンスを含むならば、それらをある代替文字（&lt;c2&gt;"\u{FFFD}"&lt;/c2&gt;）で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt; is an ill-formed code unit sequence, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt;が文法的に正しくないコード単位シーケンスを含むならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;description&lt;/c0&gt; is in an invalid format, or if the value it denotes in base 10 is not representable, the result is &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;description&lt;/c0&gt;が無効な形式になっているならば、またはそれが底10で示す値が表現可能でないならば、結果は&lt;c1&gt;nil&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;distance &gt; 0&lt;/c0&gt;, &lt;c1&gt;limit&lt;/c1&gt; should be greater than &lt;c2&gt;i&lt;/c2&gt; to have any effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;limit&lt;/c1&gt;が何らかの効果を持つには&lt;c2&gt;i&lt;/c2&gt;より大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;distance &gt; 0&lt;/c0&gt;, a limit that is less than &lt;c1&gt;i&lt;/c1&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;i&lt;/c1&gt;より少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;end&lt;/c0&gt; is equal to &lt;c1&gt;start&lt;/c1&gt;, the result is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;/c0&gt;が&lt;c1&gt;start&lt;/c1&gt;に等しいならば、結果はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each consecutive pair of &lt;c1&gt;separator&lt;/c1&gt; elements in the collection and for each instance of &lt;c2&gt;separator&lt;/c2&gt; at the start or end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、このコレクション中の連続する&lt;c1&gt;separator&lt;/c1&gt;要素の対それぞれに、そしてコレクションの始めと終わりの&lt;c2&gt;separator&lt;/c2&gt;インスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each consecutive pair of &lt;c1&gt;separator&lt;/c1&gt; elements in the sequence and for each instance of &lt;c2&gt;separator&lt;/c2&gt; at the start or end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、このシーケンス中の連続する&lt;c1&gt;separator&lt;/c1&gt;要素の対それぞれに、そしてシーケンスの始めと終わりの&lt;c2&gt;separator&lt;/c2&gt;インスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the &lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt; predicate and for each element at the start or end of the collection satisfying the &lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt; predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、結果において&lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt;述部を満たす隣接する要素のペアそれぞれに対しておよび&lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt;述部を満たすコレクションの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;false&lt;/c0&gt;, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the &lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt; predicate and for each element at the start or end of the sequence satisfying the &lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt; predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;false&lt;/c0&gt;ならば、結果において&lt;c1&gt;is&lt;w2&gt;Separator&lt;/w2&gt;&lt;/c1&gt;述部を満たす隣接する要素のペアそれぞれに対しておよび&lt;c3&gt;is&lt;w4&gt;Separator&lt;/w4&gt;&lt;/c3&gt;述部を満たすシーケンスの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;has&lt;w1&gt;Pointer&lt;w2&gt;Representation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;false&lt;/c3&gt;, the static string stores a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;has&lt;w1&gt;Pointer&lt;w2&gt;Representation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;false&lt;/c3&gt;ならば、静的文字列は単一のユニコードスカラー値を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;i&lt;/c0&gt; is equal to the string’s end index, this methods appends &lt;c1&gt;new&lt;w2&gt;Element&lt;/w2&gt;&lt;/c1&gt; to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;が文字列の末尾インデックスと等しいならば、このメソッドは&lt;c1&gt;new&lt;w2&gt;Element&lt;/w2&gt;&lt;/c1&gt;を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;i&lt;/c0&gt; is equal to the string’s end index, this methods appends the contents of &lt;c1&gt;new&lt;w2&gt;Elements&lt;/w2&gt;&lt;/c1&gt; to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;が文字列の末尾インデックスと等しいならば、このメソッドは&lt;c1&gt;new&lt;w2&gt;Elements&lt;/w2&gt;&lt;/c1&gt;の内容を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;instance&lt;/c0&gt; conforms to the &lt;c1&gt;Custom&lt;w2&gt;Debug&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol, the result is &lt;c5&gt;instance&lt;w6&gt;.debug&lt;w7&gt;Description&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;instance&lt;/c0&gt;が準拠するのが&lt;c1&gt;Custom&lt;w2&gt;Debug&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルならば、結果は&lt;c5&gt;instance&lt;w6&gt;.debug&lt;w7&gt;Description&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;instance&lt;/c0&gt; conforms to the &lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol, the result is &lt;c4&gt;instance&lt;w5&gt;.description&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;instance&lt;/c0&gt;が準拠するのが&lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルならば、結果は&lt;c4&gt;instance&lt;w5&gt;.description&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;instance&lt;/c0&gt; conforms to the &lt;c1&gt;Text&lt;w2&gt;Output&lt;w3&gt;Streamable&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol, the result is obtained by calling &lt;c4&gt;instance&lt;w5&gt;.write(to: s)&lt;/w5&gt;&lt;/c4&gt; on an empty string &lt;c6&gt;s&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;instance&lt;/c0&gt;が準拠するのが&lt;c1&gt;Text&lt;w2&gt;Output&lt;w3&gt;Streamable&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルならば、結果は&lt;c4&gt;instance&lt;w5&gt;.write(to: s)&lt;/w5&gt;&lt;/c4&gt;を空の文字列&lt;c6&gt;s&lt;/c6&gt;上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;is&lt;w1&gt;Repairing&lt;/w1&gt;&lt;/c0&gt; is &lt;c2&gt;false&lt;/c2&gt; and an ill-formed sequence is detected, this method returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Repairing&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;false&lt;/c2&gt;で誤形式シーケンスが検出されるならば、このメソッドは&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt; subsequences are returned, the last one is a suffix of the original collection containing the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt;の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元コレクションの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt; subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt;の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元シーケンスの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;n &gt; 0&lt;/c0&gt;, a limit that is less than &lt;c1&gt;i&lt;/c1&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n &gt; 0&lt;/c0&gt;ならば、&lt;c1&gt;i&lt;/c1&gt;より少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt; is not contained in the set but subsumes current members of the set, the subsumed members are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt;がこの集合の中に含まれないしかしこの集合の現在の要素を包含するならば、包含されたメンバが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Float16&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Float16&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Float80&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Float80&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; can’t be represented as an instance of &lt;c1&gt;Float&lt;/c1&gt; without rounding, the result of this initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;Float&lt;/c1&gt;のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;other&lt;/c0&gt; is &lt;c1&gt;nil&lt;/c1&gt;, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;が&lt;c1&gt;nil&lt;/c1&gt;ならば、結果は、&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;predicate&lt;/c0&gt; matches every element in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;がシーケンスの中のすべての要素に合致するならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;predicate&lt;/c0&gt; matches every element in the sequence, the resulting sequence contains every element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;がシーケンスの中のすべての要素に合致するならば、結果のシーケンスはそのシーケンスのすべての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;source&lt;/c0&gt; contains no elements, the returned index is equal to the buffer’s &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;が全く要素を含まないならば、返されるインデックスはバッファの持つ&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;source&lt;/c0&gt; is outside the bounds of this type after rounding toward zero, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;がゼロへの丸め後にこの型の境界の外側ならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;starts&lt;/c0&gt; is &lt;c1&gt;nil&lt;/c1&gt;, &lt;c2&gt;count&lt;/c2&gt; must be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;starts&lt;/c0&gt;が&lt;c1&gt;nil&lt;/c1&gt;ならば、&lt;c2&gt;count&lt;/c2&gt;はゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;subject&lt;/c0&gt; conforms to the &lt;c1&gt;Custom&lt;w2&gt;Debug&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol, the result is &lt;c5&gt;subject&lt;w6&gt;.debug&lt;w7&gt;Description&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subject&lt;/c0&gt;が準拠するのが&lt;c1&gt;Custom&lt;w2&gt;Debug&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルならば、結果は&lt;c5&gt;subject&lt;w6&gt;.debug&lt;w7&gt;Description&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;subject&lt;/c0&gt; conforms to the &lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol, the result is &lt;c4&gt;subject&lt;w5&gt;.description&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subject&lt;/c0&gt;が準拠するのが&lt;c1&gt;Custom&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルならば、結果は&lt;c4&gt;subject&lt;w5&gt;.description&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;subject&lt;/c0&gt; conforms to the &lt;c1&gt;Text&lt;w2&gt;Output&lt;w3&gt;Streamable&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; protocol, the result is obtained by calling &lt;c4&gt;subject&lt;w5&gt;.write(to: s)&lt;/w5&gt;&lt;/c4&gt; on an empty string &lt;c6&gt;s&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subject&lt;/c0&gt;が準拠するのが&lt;c1&gt;Text&lt;w2&gt;Output&lt;w3&gt;Streamable&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロトコルならば、結果は&lt;c4&gt;subject&lt;w5&gt;.write(to: s)&lt;/w5&gt;&lt;/c4&gt;を空の文字列&lt;c6&gt;s&lt;/c6&gt;上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;subject&lt;/c0&gt; is a class instance, &lt;c1&gt;ancestor&lt;w2&gt;Representation&lt;/w2&gt;&lt;/c1&gt; determines whether ancestor classes will be represented and whether their &lt;c3&gt;custom&lt;w4&gt;Mirror&lt;/w4&gt;&lt;/c3&gt; implementations will be used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subject&lt;/c0&gt;がクラスインスタンスであるならば、&lt;c1&gt;ancestor&lt;w2&gt;Representation&lt;/w2&gt;&lt;/c1&gt;は、先祖クラスが表現されるかどうかをそして&lt;c3&gt;custom&lt;w4&gt;Mirror&lt;/w4&gt;&lt;/c3&gt;実装が使われるかどうかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;text&lt;/c0&gt; is in an invalid format or contains characters that are out of bounds for the given &lt;c1&gt;radix&lt;/c1&gt;, or if the value it denotes in the given &lt;c2&gt;radix&lt;/c2&gt; is not representable, the result is &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt; が無効な形式になっているか指定&lt;c1&gt;radix&lt;/c1&gt;の領域外の文字列を含むならば、または指定&lt;c2&gt;radix&lt;/c2&gt;においてそれが意味する値が表現可能でないならば、結果は&lt;c3&gt;nil&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;true&lt;/c0&gt;, the set’s buffer capacity is preserved; if &lt;c1&gt;false&lt;/c1&gt;, the underlying buffer is released.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;ならば、集合が持つバッファ容量を維持します；&lt;c1&gt;false&lt;/c1&gt;ならば基盤をなすバッファは解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is +/-infinity or NaN, then &lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;Int&lt;w4&gt;.max&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が+/-infinityまたはNaNならば、そのとき&lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;Int&lt;w4&gt;.max&lt;/w4&gt;&lt;/c3&gt;です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is 10, &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;1&lt;w4&gt;.01&lt;/w4&gt;&lt;/c3&gt; in binary, so &lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is 2.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が10ならば、&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は２進数で&lt;c3&gt;1&lt;w4&gt;.01&lt;/w4&gt;&lt;/c3&gt;です、それで&lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;は２です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;-greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;-infinity&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;-greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;-infinity&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;-infinity&lt;/c1&gt;, then &lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Up&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c5&gt;-greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;-infinity&lt;/c1&gt;ならば、そのとき&lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Up&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;は&lt;c5&gt;-greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;-least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;-0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;-least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;-0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;infinity&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;greatest&lt;w2&gt;Finite&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Up&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;infinity&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;infinity&lt;/c1&gt;, then &lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Down&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c5&gt;greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;infinity&lt;/c1&gt;ならば、そのとき&lt;c2&gt;x&lt;w3&gt;.next&lt;w4&gt;Down&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;は&lt;c5&gt;greatest&lt;w6&gt;Finite&lt;w7&gt;Magnitude&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is &lt;c1&gt;least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, then &lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が&lt;c1&gt;least&lt;w2&gt;Nonzero&lt;w3&gt;Magnitude&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ならば、そのとき&lt;c4&gt;x&lt;w5&gt;.next&lt;w6&gt;Down&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c7&gt;0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is Float.pi, &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;1&lt;w4&gt;.10010010000111111011011&lt;/w4&gt;&lt;/c3&gt; in binary, and &lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; is 23.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がFloat.piならば、&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は２進数で&lt;c3&gt;1&lt;w4&gt;.10010010000111111011011&lt;/w4&gt;&lt;/c3&gt;です、それで&lt;c5&gt;x&lt;w6&gt;.significand&lt;w7&gt;Width&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;は23です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is NaN, then &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がNaNならば、そのとき&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is infinite, then &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が無限ならば、そのとき&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は無限大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is not a finite number, then &lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt; is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が有限数でないならば、そのとき&lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt;はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is very small in magnitude, then &lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt; may be a subnormal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;が規模において非常に小さいならば、&lt;c1&gt;x&lt;w2&gt;.ulp&lt;/w2&gt;&lt;/c1&gt;はサブノーマル数かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt; is &lt;c3&gt;Int&lt;w4&gt;.min&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.exponent&lt;/w2&gt;&lt;/c1&gt;は&lt;c3&gt;Int&lt;w4&gt;.min&lt;/w4&gt;&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c4&gt;-least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Down&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;-least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c4&gt;least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.next&lt;w3&gt;Up&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;は&lt;c4&gt;least&lt;w5&gt;Nonzero&lt;w6&gt;Magnitude&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c0&gt;x&lt;/c0&gt; is zero, then &lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt; is 0.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;がゼロならば、そのとき&lt;c1&gt;x&lt;w2&gt;.significand&lt;/w2&gt;&lt;/c1&gt;は0.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c10&gt;base&lt;w11&gt;Address&lt;/w11&gt;&lt;/c10&gt; is &lt;c12&gt;nil&lt;/c12&gt;, this function does nothing and returns an empty buffer pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c10&gt;base&lt;w11&gt;Address&lt;/w11&gt;&lt;/c10&gt;が&lt;c12&gt;nil&lt;/c12&gt;ならば、この関数は何もしません、そして空のバッファポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;a&lt;/c1&gt; and &lt;c2&gt;b&lt;/c2&gt; are incomparable, and &lt;c3&gt;b&lt;/c3&gt; and &lt;c4&gt;c&lt;/c4&gt; are incomparable, then &lt;c5&gt;a&lt;/c5&gt; and &lt;c6&gt;c&lt;/c6&gt; are also incomparable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;a&lt;/c1&gt;と&lt;c2&gt;b&lt;/c2&gt;が比較できないならば、そして&lt;c3&gt;b&lt;/c3&gt;と&lt;c4&gt;c&lt;/c4&gt;が比較できないならば、そのとき&lt;c5&gt;a&lt;/c5&gt;と&lt;c6&gt;c&lt;/c6&gt;もまた比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;body&lt;/c1&gt; has a return value, that value is also used as the return value for the &lt;c2&gt;with&lt;w3&gt;Memory&lt;w4&gt;Rebound(to:&lt;w5&gt;capacity:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;body&lt;/c1&gt;が戻り値を持つならば、その値はまた&lt;c2&gt;with&lt;w3&gt;Memory&lt;w4&gt;Rebound(to:&lt;w5&gt;capacity:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;element&lt;/c1&gt; is not found in the collection, returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;element&lt;/c1&gt;がコレクションの中に見つけられないならば、&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;element&lt;/c1&gt; is not found in the collection, this method returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;element&lt;/c1&gt;がコレクションの中に見つけられないならば、このメソッドは&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;other&lt;/c1&gt; contains multiple instances of equivalent elements, only the first instance is kept.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;other&lt;/c1&gt;が同等の要素を複数含むならば、最初の要素だけが残されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;pointer&lt;/c1&gt; is &lt;c2&gt;nil&lt;/c2&gt;, the result is &lt;c3&gt;0&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;pointer&lt;/c1&gt;が&lt;c2&gt;nil&lt;/c2&gt;ならば、結果は&lt;c3&gt;0&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;rhs&lt;/c1&gt; is outside the range &lt;c2&gt;0..&lt;lhs&lt;w3&gt;.bit&lt;w4&gt;Width&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;, it is masked to produce a value within that range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;rhs&lt;/c1&gt;が範囲&lt;c2&gt;0..&lt;lhs&lt;w3&gt;.bit&lt;w4&gt;Width&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;の外側ならば、それはマスクされてその範囲内の値を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;start&lt;/c1&gt; is &lt;c2&gt;nil&lt;/c2&gt;, &lt;c3&gt;count&lt;/c3&gt; must be zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;start&lt;/c1&gt;が&lt;c2&gt;nil&lt;/c2&gt;ならば、&lt;c3&gt;count&lt;/c3&gt;はゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c1&gt;text&lt;/c1&gt; has invalid characters or is in an invalid format, the result is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;text&lt;/c1&gt;が無効な文字を持つまたは無効な形式であるならば、結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; throws an error during the sort, the elements may be in a different order, but none will be lost.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;がエラーをソートの間にスローするならば、要素は異なる順番になるかもしれません、しかし何１つとしてなくさないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;distance&lt;/c2&gt; is positive, this is the same value as the result of &lt;c3&gt;distance&lt;/c3&gt; calls to &lt;c4&gt;index(after:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;distance&lt;/c2&gt;が正ならば、これは&lt;c3&gt;distance&lt;/c3&gt;で&lt;c4&gt;index(after:)&lt;/c4&gt;を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;i == end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;, this method is equivalent to &lt;c4&gt;append(_:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;i == end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;ならば、このメソッドは&lt;c4&gt;append(_:)&lt;/c4&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;n&lt;/c2&gt; is positive, this is the same value as the result of &lt;c3&gt;n&lt;/c3&gt; calls to &lt;c4&gt;index(after:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;n&lt;/c2&gt;が正ならば、これは&lt;c3&gt;n&lt;/c3&gt;で&lt;c4&gt;index(after:)&lt;/c4&gt;を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;path&lt;/c2&gt; can’t be appended, returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;path&lt;/c2&gt;が追加できないならば、&lt;c3&gt;nil&lt;/c3&gt;が返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;repairing&lt;w3&gt;Ill&lt;w4&gt;Formed&lt;w5&gt;Sequences&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c6&gt;false&lt;/c6&gt; and an ill-formed sequence is detected, this method returns &lt;c7&gt;nil&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;repairing&lt;w3&gt;Ill&lt;w4&gt;Formed&lt;w5&gt;Sequences&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;が&lt;c6&gt;false&lt;/c6&gt;で誤形式シーケンスが検出されるならば、このメソッドは&lt;c7&gt;nil&lt;/c7&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;repairing&lt;w3&gt;Ill&lt;w4&gt;Formed&lt;w5&gt;Sequences&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; is &lt;c6&gt;true&lt;/c6&gt;, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;repairing&lt;w3&gt;Ill&lt;w4&gt;Formed&lt;w5&gt;Sequences&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;が&lt;c6&gt;true&lt;/c6&gt;ならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;rhs&lt;/c2&gt; is zero, the result of the division is infinity, with the sign of the result matching the sign of &lt;c3&gt;lhs&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;rhs&lt;/c2&gt;がゼロならば、除算の結果は無限大です、結果の符号は&lt;c3&gt;lhs&lt;/c3&gt;の符号と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;source&lt;/c2&gt; is less than the smallest representable value in this type, the result is the type’s &lt;c3&gt;min&lt;/c3&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;source&lt;/c2&gt;がこの型の最も小さい表現可能な値より小さいならば、結果はこの型の&lt;c3&gt;min&lt;/c3&gt;値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c2&gt;source&lt;w3&gt;Position&lt;/w3&gt;&lt;/c2&gt; does not have an exact corresponding position in &lt;c4&gt;target&lt;/c4&gt;, then the result is &lt;c5&gt;nil&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;source&lt;w3&gt;Position&lt;/w3&gt;&lt;/c2&gt;が&lt;c4&gt;target&lt;/c4&gt;の中に正確に対応する位置を持たないならば、そのとき結果は&lt;c5&gt;nil&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;base&lt;w4&gt;Address&lt;/w4&gt;&lt;/c3&gt; is &lt;c5&gt;nil&lt;/c5&gt;, this function does nothing.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;base&lt;w4&gt;Address&lt;/w4&gt;&lt;/c3&gt;が&lt;c5&gt;nil&lt;/c5&gt;ならば、この関数は何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;body&lt;/c3&gt; has a return value, that value is also used as the return value for the &lt;c4&gt;with&lt;w5&gt;Memory&lt;w6&gt;Rebound(to:&lt;w7&gt;_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;body&lt;/c3&gt;が戻り値を持つならば、その値はまた&lt;c4&gt;with&lt;w5&gt;Memory&lt;w6&gt;Rebound(to:&lt;w7&gt;_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;source&lt;/c3&gt; contains an equal or greater number of elements than the buffer can hold, the returned index is equal to the buffer’s &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;source&lt;/c3&gt;がバッファが保持できるのと同じまたはより多い数の要素を含むならば、返されるインデックスはバッファの持つ&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c3&gt;true&lt;/c3&gt;, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;true&lt;/c3&gt;ならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c4&gt;possible&lt;w5&gt;Prefix&lt;/w5&gt;&lt;/c4&gt; has no elements, the return value is &lt;c6&gt;true&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;possible&lt;w5&gt;Prefix&lt;/w5&gt;&lt;/c4&gt;が１つも要素を持たないならば、戻り値は&lt;c6&gt;true&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;T&lt;/c5&gt; is a nontrivial type, you must eventually deinitialize or move from the values in this region to avoid leaks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;T&lt;/c5&gt;が非自明型ならば、あなたはゆくゆくはデイニシャライズするかまたはこの領域の値から移動してリークを防がなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;distance&lt;/c5&gt; is negative, this is the same value as the result of &lt;c6&gt;abs(distance)&lt;/c6&gt; calls to &lt;c7&gt;index(before:)&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;distance&lt;/c5&gt;が負ならば、これは&lt;c6&gt;abs(distance)&lt;/c6&gt;で&lt;c7&gt;index(before:)&lt;/c7&gt;を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;n&lt;/c5&gt; is negative, this is the same value as the result of &lt;c6&gt;-n&lt;/c6&gt; calls to &lt;c7&gt;index(before:)&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;n&lt;/c5&gt;が負ならば、これは&lt;c6&gt;-n&lt;/c6&gt;が&lt;c7&gt;index(before:)&lt;/c7&gt;を呼び出すの結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;true&lt;/c5&gt;, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;true&lt;/c5&gt;ならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c5&gt;v&lt;/c5&gt; is an invalid unicode scalar value, the result is &lt;c6&gt;nil&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;v&lt;/c5&gt;が無効なユニコードスカラー値であるならば、結果は&lt;c6&gt;nil&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c6&gt;i == end&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;, this method is equivalent to &lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;i == end&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;ならば、このメソッドは&lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c6&gt;v&lt;/c6&gt; is an invalid Unicode scalar value, the result is &lt;c7&gt;nil&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;v&lt;/c6&gt;が無効なユニコードスカラー値であるならば、結果は&lt;c7&gt;nil&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c8&gt;x / y&lt;/c8&gt; is exactly halfway between two integers, &lt;c9&gt;q&lt;/c9&gt; is chosen to be even.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c8&gt;x / y&lt;/c8&gt;が正確に２つの整数の間の中ほどならば、&lt;c9&gt;q&lt;/c9&gt;は偶数である方を選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;c9&gt;T&lt;/c9&gt; is a nontrivial type, you must eventually deinitialize or move the values in this region to avoid leaks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;T&lt;/c9&gt;が非自明型ならば、あなたはゆくゆくはデイニシャライズするかまたはこの領域の値を移動してリークを防がなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a future change to the app requires an additional state, you need to update an additional variable at every existing change in state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリに対する将来の変更が追加の状態を要求するならば、あなたは、状態において起こっているすべての変化で、追加の変数を更新する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a property is converted from a stored property to a computed property, the result of &lt;c1&gt;offset(of:)&lt;/c1&gt; changes to &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロパティが格納プロパティから計算プロパティに変換されるならば、&lt;c1&gt;offset(of:)&lt;/c1&gt;の結果は&lt;c2&gt;nil&lt;/c2&gt;に変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a scalar has no alias, this property is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーがエイリアスを持たないならば、このプロパティは&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a type conforming to &lt;c4&gt;Strideable&lt;/c4&gt; is its own &lt;c5&gt;Stride&lt;/c5&gt; type, it must provide concrete implementations of the two operators to avoid infinite recursion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Strideable&lt;/c4&gt;に準拠する型は独自の&lt;c5&gt;Stride&lt;/c5&gt;型です、それは２つの演算子の具体的な実装を提供して無限再帰を防止しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a type does not support subnormals, &lt;c3&gt;x&lt;w4&gt;.ulp&lt;/w4&gt;&lt;/c3&gt; may be rounded to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型がサブノーマルをサポートしないならば、&lt;c3&gt;x&lt;w4&gt;.ulp&lt;/w4&gt;&lt;/c3&gt;はゼロに丸められるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a type’s radix is 2, then for finite nonzero numbers, the significand is in the range &lt;c0&gt;1&lt;w1&gt;.0 ..&lt; 2&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型の基数が２であるならば、そのとき有限の非ゼロの数に対して、仮数は範囲&lt;c0&gt;1&lt;w1&gt;.0 ..&lt; 2&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の中になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If all imported members have default values, Swift also provides a default initializer that takes no arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてのインポートされたメンバが省略時の値を持つならば、スウィフトもまた引数を取らない省略時のイニシャライザをひとつ提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an element equal to &lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt; is already contained in the set, &lt;c2&gt;new&lt;w3&gt;Member&lt;/w3&gt;&lt;/c2&gt; replaces the existing element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt;に等しい要素が既にこの集合に含まれるならば、&lt;c2&gt;new&lt;w3&gt;Member&lt;/w3&gt;&lt;/c2&gt;は既存の要素と置き換わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an element equal to &lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt; is already contained in the set, this method has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;new&lt;w1&gt;Member&lt;/w1&gt;&lt;/c0&gt;に等しい要素が既にこの集合に含まれるならば、このメソッドは効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an element equal to &lt;c4&gt;new&lt;w5&gt;Member&lt;/w5&gt;&lt;/c4&gt; was already contained in the set, the method returns &lt;c6&gt;(false, old&lt;w7&gt;Member)&lt;/w7&gt;&lt;/c6&gt;, where &lt;c8&gt;old&lt;w9&gt;Member&lt;/w9&gt;&lt;/c8&gt; is the element that was equal to &lt;c10&gt;new&lt;w11&gt;Member&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;new&lt;w5&gt;Member&lt;/w5&gt;&lt;/c4&gt;に等しい要素が既に集合に含まれたならば、メソッドは&lt;c6&gt;(false, old&lt;w7&gt;Member)&lt;/w7&gt;&lt;/c6&gt;を返します、ここで&lt;c8&gt;old&lt;w9&gt;Member&lt;/w9&gt;&lt;/c8&gt;は&lt;c10&gt;new&lt;w11&gt;Member&lt;/w11&gt;&lt;/c10&gt;に等しかった要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an object has a stronger notion of identity, it may be appropriate to provide a custom implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオブジェクトがより強い同一性概念を持つならば、それはあつらえの実装を提供するのが適切であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If any are found, the result of the initializer is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何か見つけられるならば、イニシャライザの結果は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If both &lt;c14&gt;x&lt;/c14&gt; and &lt;c15&gt;y&lt;/c15&gt; are NaN, or either &lt;c16&gt;x&lt;/c16&gt; or &lt;c17&gt;y&lt;/c17&gt; is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c14&gt;x&lt;/c14&gt;と&lt;c15&gt;y&lt;/c15&gt;の両方がNaN、または&lt;c16&gt;x&lt;/c16&gt;または&lt;c17&gt;y&lt;/c17&gt;のどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If both &lt;c9&gt;x&lt;/c9&gt; and &lt;c10&gt;y&lt;/c10&gt; are NaN, or either &lt;c11&gt;x&lt;/c11&gt; or &lt;c12&gt;y&lt;/c12&gt; is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;x&lt;/c9&gt;と&lt;c10&gt;y&lt;/c10&gt;の両方がNaN、または&lt;c11&gt;x&lt;/c11&gt;または&lt;c12&gt;y&lt;/c12&gt;のどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If either this value or &lt;c3&gt;other&lt;/c3&gt; is NaN, the result of this method is &lt;c4&gt;false&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値または&lt;c3&gt;other&lt;/c3&gt;のどちらかがNaNならば、このメソッドの結果は&lt;c4&gt;false&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If included, the exponent is separated by a single character, &lt;c0&gt;e&lt;/c0&gt; or &lt;c1&gt;E&lt;/c1&gt;, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もし含むならば、指数は１つの文字&lt;c0&gt;e&lt;/c0&gt;もしくは&lt;c1&gt;E&lt;/c1&gt;によって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If included, the exponent is separated by a single character, &lt;c0&gt;p&lt;/c0&gt; or &lt;c1&gt;P&lt;/c1&gt;, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もし含むならば、指数は１つの文字&lt;c0&gt;p&lt;/c0&gt;もしくは&lt;c1&gt;P&lt;/c1&gt;によって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If mutations need to invalidate indices in your custom collection type, don’t use &lt;c2&gt;Slice&lt;/c2&gt; as its subsequence type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変異体がインデックスを無効にすることがあなたのあつらえのコレクション型において必要ならば、&lt;c2&gt;Slice&lt;/c2&gt;をそれの下位シーケンス型として使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If necessary, the byte order of this value is reversed from the typical byte order of this integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必要ならば、この値のバイト順はこの整数型の典型的なバイト順からひっくり返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no elements in the collection match &lt;c4&gt;belongs&lt;w5&gt;In&lt;w6&gt;Second&lt;w7&gt;Partition&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, the returned index is equal to the collection’s &lt;c8&gt;end&lt;w9&gt;Index&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素が１つも&lt;c4&gt;belongs&lt;w5&gt;In&lt;w6&gt;Second&lt;w7&gt;Partition&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;に一致しないならば、返されるインデックスはコレクションの&lt;c8&gt;end&lt;w9&gt;Index&lt;/w9&gt;&lt;/c8&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no elements in the collection satisfy the given predicate, returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素が与えられた述部を満たすことがないならば、&lt;c2&gt;nil&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no nullability information is provided for a type, Swift doesn't distinguish between optional and nonoptional references, and imports the type as an implicitly unwrapped optional.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヌル可能性情報がある型に提供されないならば、Swiftはオプショナルと非オプショナル参照の間の区別をしません、そしてその型をある暗黙的にアンラップされるオプショナルとしてインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no such storage exists, it is first created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのようなストレージが存在しないならば、それが最初に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If parts of an Objective-C API aren't suitable for Swift, you can make those parts unavailable in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIの一部がSwiftに適さないならば、あなたそれらの部分をSwiftで利用可能できなくできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is empty, &lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; is equal to &lt;c5&gt;start&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスが空ならば、&lt;c3&gt;end&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;start&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance is empty, &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; is equal to &lt;c5&gt;end&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスが空ならば、&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;end&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;base&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt; of this buffer is &lt;c2&gt;nil&lt;/c2&gt;, the count is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの&lt;c0&gt;base&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;nil&lt;/c2&gt;ならば、総数はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;byte&lt;w1&gt;Count&lt;/w1&gt;&lt;/c0&gt; bytes of memory referenced by this pointer are bound to a type &lt;c2&gt;T&lt;/c2&gt;, then &lt;c3&gt;T&lt;/c3&gt; must be a trivial type, this pointer and &lt;c4&gt;source&lt;/c4&gt; must be properly aligned for accessing &lt;c5&gt;T&lt;/c5&gt;, and &lt;c6&gt;byte&lt;w7&gt;Count&lt;/w7&gt;&lt;/c6&gt; must be a multiple of &lt;c8&gt;Memory&lt;w9&gt;Layout&lt;T&gt;.stride&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリの&lt;c0&gt;byte&lt;w1&gt;Count&lt;/w1&gt;&lt;/c0&gt;バイトが型&lt;c2&gt;T&lt;/c2&gt;に束縛されるならば、そのとき&lt;c3&gt;T&lt;/c3&gt;は自明型でなければならず、このポインタと&lt;c4&gt;source&lt;/c4&gt;は&lt;c5&gt;T&lt;/c5&gt;にアクセスするために適切にアラインされなければならず、そして&lt;c6&gt;byte&lt;w7&gt;Count&lt;/w7&gt;&lt;/c6&gt;は&lt;c8&gt;Memory&lt;w9&gt;Layout&lt;T&gt;.stride&lt;/w9&gt;&lt;/c8&gt;の倍数でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は差そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は積そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire quotient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は全体の商を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire remainder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は余りそのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;overflow&lt;/c0&gt; component is &lt;c1&gt;false&lt;/c1&gt;, the &lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; component contains the entire sum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;overflow&lt;/c0&gt;構成部分が&lt;c1&gt;false&lt;/c1&gt;ならば、&lt;c2&gt;partial&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;構成部分は合計そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c0&gt;source&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt; bytes of memory referenced by this buffer are bound to a type &lt;c2&gt;T&lt;/c2&gt;, then &lt;c3&gt;T&lt;/c3&gt; must be a trivial type, the underlying pointer must be properly aligned for accessing &lt;c4&gt;T&lt;/c4&gt;, and &lt;c5&gt;source&lt;w6&gt;.count&lt;/w6&gt;&lt;/c5&gt; must be a multiple of &lt;c7&gt;Memory&lt;w8&gt;Layout&lt;T&gt;.stride&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリの&lt;c0&gt;source&lt;w1&gt;.count&lt;/w1&gt;&lt;/c0&gt;バイトが型&lt;c2&gt;T&lt;/c2&gt;に束縛されるならば、そのとき&lt;c3&gt;T&lt;/c3&gt;は自明型でなければならず、基盤となるポインタは&lt;c4&gt;T&lt;/c4&gt;にアクセスするために適切にアラインされなければならず、そして&lt;c5&gt;source&lt;w6&gt;.count&lt;/w6&gt;&lt;/c5&gt;は&lt;c7&gt;Memory&lt;w8&gt;Layout&lt;T&gt;.stride&lt;/w8&gt;&lt;/c7&gt;の倍数でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains either the truncated quotient or, if the quotient is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こった、そして&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分は切り詰められた商または、商が未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains the truncated product of this value and &lt;c8&gt;rhs&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こると&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分はこの値と&lt;c8&gt;rhs&lt;/c8&gt;の積の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains the truncated result of &lt;c8&gt;rhs&lt;/c8&gt; subtracted from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こると&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分はこの値から&lt;c8&gt;rhs&lt;/c8&gt;を減算した結果の切り詰められたもの含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains the truncated sum of this value and &lt;c8&gt;rhs&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、オーバーフローが起こると&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分はこの値と&lt;c8&gt;rhs&lt;/c8&gt;の合計の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the &lt;c4&gt;overflow&lt;/c4&gt; component is &lt;c5&gt;true&lt;/c5&gt;, an overflow occurred during division and the &lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt; component contains either the entire remainder or, if the remainder is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;overflow&lt;/c4&gt;構成部分が&lt;c5&gt;true&lt;/c5&gt;であるならば、除算の間にオーバーフローが起こった、そして&lt;c6&gt;partial&lt;w7&gt;Value&lt;/w7&gt;&lt;/c6&gt;構成部分は余りそのまままたは、余りが未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the Objective-C generic parameterization specifies class or protocols qualifications, the imported Swift declaration has a constraint that requires that type to be a subclass of the specified class or to conform to the specified protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C総称体パラメータ化がクラスまたはプロトコル適格を指定するならば、インポートされたスウィフト宣言はある制約を持ちます、それがその型に要求するのは、指定されたクラスのサブクラスであることまたは指定されたプロトコルに準拠することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the UTF-8 view is empty, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8ビューが空ならば、&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the Unicode replacement character U+FFFD is representable in this encoding, &lt;c0&gt;encoded&lt;w1&gt;Replacement&lt;w2&gt;Character&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; encodes that scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード代用文字 U+FFFD がこの符号化で表現可能ならば、&lt;c0&gt;encoded&lt;w1&gt;Replacement&lt;w2&gt;Character&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;がこのスカラー値を符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the bit width of the shifted integer type is a power of two, masking is performed using a bitmask; otherwise, masking is performed using a modulo operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトされる整数型のビット幅が２の冪ならば、マスクはビットマスクを使って実行されます；そうでなければ、マスクはモジュロ演算を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to &lt;c4&gt;replace&lt;w5&gt;Subrange(_:&lt;w6&gt;with:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; simply removes elements at the end of the string, the complexity is O(&lt;e7&gt;n&lt;/e7&gt;), where &lt;e8&gt;n&lt;/e8&gt; is equal to &lt;c9&gt;bounds&lt;w10&gt;.count&lt;/w10&gt;&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;replace&lt;w5&gt;Subrange(_:&lt;w6&gt;with:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;への呼び出しが単に要素を文字列の終わりから削除するだけならば、計算量はO(&lt;e7&gt;n&lt;/e7&gt;)です、ここで&lt;e8&gt;n&lt;/e8&gt;は&lt;c9&gt;bounds&lt;w10&gt;.count&lt;/w10&gt;&lt;/c9&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to &lt;c4&gt;replace&lt;w5&gt;Subrange(_:&lt;w6&gt;with:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; simply removes text at the end of the string, the complexity is O(&lt;e7&gt;n&lt;/e7&gt;), where &lt;e8&gt;n&lt;/e8&gt; is equal to &lt;c9&gt;bounds&lt;w10&gt;.count&lt;/w10&gt;&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;replace&lt;w5&gt;Subrange(_:&lt;w6&gt;with:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;への呼び出しが単にテキストを文字列の終わりから削除するだけならば、計算量はO(&lt;e7&gt;n&lt;/e7&gt;)です、ここで&lt;e8&gt;n&lt;/e8&gt;は&lt;c9&gt;bounds&lt;w10&gt;.count&lt;/w10&gt;&lt;/c9&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to this method simply appends the contents of &lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt; to the collection, the complexity is O(&lt;e8&gt;m&lt;/e8&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの呼び出しが単に&lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt;の内容をコレクションに追加するだけならば、計算量はO(&lt;e8&gt;m&lt;/e8&gt;)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the call to this method simply appends the contents of &lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt; to the collection, this method is equivalent to &lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドへの呼び出しが単に&lt;c6&gt;new&lt;w7&gt;Elements&lt;/w7&gt;&lt;/c6&gt;の内容をコレクションに追加するだけならば、このメソッドは&lt;c8&gt;append(contents&lt;w9&gt;Of:)&lt;/w9&gt;&lt;/c8&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the closure has a return value, that value is also used as the return value of the &lt;c0&gt;with&lt;w1&gt;UTF8Buffer(_:)&lt;/w1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャが戻り値を持つならば、その値はまた&lt;c0&gt;with&lt;w1&gt;UTF8Buffer(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not have sufficient capacity for another element, additional storage is allocated before appending &lt;c0&gt;new&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが別の要素に対して十分な容量を持たないならば、追加のストレージが&lt;c0&gt;new&lt;w1&gt;Element&lt;/w1&gt;&lt;/c0&gt;を追加する前に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not support an internal representation in a form of contiguous storage, &lt;c2&gt;body&lt;/c2&gt; is not called and &lt;c3&gt;nil&lt;/c3&gt; is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがある内部表現を隣接ストレージの形式でサポートしないならば、&lt;c2&gt;body&lt;/c2&gt;は呼び出されません、そして&lt;c3&gt;nil&lt;/c3&gt;が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection does not support an internal representation in a form of mutable contiguous storage, &lt;c2&gt;body&lt;/c2&gt; is not called and &lt;c3&gt;nil&lt;/c3&gt; is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションがある内部表現を可変の隣接ストレージの形式でサポートしないならば、&lt;c2&gt;body&lt;/c2&gt;は呼び出されません、そして&lt;c3&gt;nil&lt;/c3&gt;が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; is equal to &lt;c5&gt;end&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;end&lt;w6&gt;Index&lt;/w6&gt;&lt;/c5&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt; is equal to &lt;c6&gt;start&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;は&lt;c6&gt;start&lt;w7&gt;Index&lt;/w7&gt;&lt;/c6&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, the method returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空ならば、このメソッドは&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the collection is empty, the value of this property is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空であるならば、このプロパティは&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dynamic type of &lt;c0&gt;subject&lt;/c0&gt; conforms to &lt;c1&gt;Custom&lt;w2&gt;Reflectable&lt;/w2&gt;&lt;/c1&gt;, the resulting mirror is determined by its &lt;c3&gt;custom&lt;w4&gt;Mirror&lt;/w4&gt;&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subject&lt;/c0&gt;の動的型が&lt;c1&gt;Custom&lt;w2&gt;Reflectable&lt;/w2&gt;&lt;/c1&gt;に準拠するならば、結果として生じるミラーは、それの&lt;c3&gt;custom&lt;w4&gt;Mirror&lt;/w4&gt;&lt;/c3&gt;プロパティによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dynamic type of &lt;c0&gt;subject&lt;/c0&gt; has value semantics, subsequent mutations of &lt;c1&gt;subject&lt;/c1&gt; will not observable in &lt;c2&gt;Mirror&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subject&lt;/c0&gt;の動的な型が値意味論を持つならば、&lt;c1&gt;subject&lt;/c1&gt;の下位セグメント変異体たちは&lt;c2&gt;Mirror&lt;/c2&gt;の中で見分けがつかないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the given floating-point value cannot be represented exactly, the result is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた浮動小数点値が正確に表現できないならば、結果は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the given integer cannot be represented exactly, the result is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数が正確に表現できないならば、結果は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as &lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt; doesn’t have an exact corresponding position in &lt;c2&gt;target&lt;/c2&gt;, the result of the initializer is &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt;として渡されたインデックスがまさにその対応する位置を&lt;c2&gt;target&lt;/c2&gt;において持たないならば、イニシャライザの結果は&lt;c3&gt;nil&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as &lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt; doesn’t have an exact corresponding position in &lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;, the result of the initializer is &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt;として渡されたインデックスがまさにその対応する位置を&lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;において持たないならば、イニシャライザの結果は&lt;c4&gt;nil&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as &lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt; represents either the start of a Unicode scalar value or the position of a UTF-16 trailing surrogate, then the initializer succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt;として渡されるインデックスがユニコードスカラー値の始まりまたはUTF-16後続サロゲートの位置のどちらかを表すならば、イニシャライザはうまくいきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the index passed as &lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt; represents the start of an extended grapheme cluster—the element type of a string—then the initializer succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;w1&gt;Position&lt;/w1&gt;&lt;/c0&gt;として渡されるインデックスが拡張書記素クラスタ — ある文字列の要素型 — の始まりを表すならば、そのときイニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクションの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクション全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最大長がシーケンスの要素の数を越えるならば、結果はシーケンスの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is bound to a type &lt;c7&gt;U&lt;/c7&gt; that is layout compatible with &lt;c8&gt;T&lt;/c8&gt;, then it contains a value of type &lt;c9&gt;U&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが型&lt;c7&gt;U&lt;/c7&gt;で&lt;c8&gt;T&lt;/c8&gt;とレイアウト互換であるものに束縛されるならば、そのときそれは型&lt;c9&gt;U&lt;/c9&gt;の値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is bound to type &lt;c4&gt;T&lt;/c4&gt;, then it contains values of type &lt;c5&gt;T&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが型&lt;c4&gt;T&lt;/c4&gt;に束縛されるならば、そのときそれは型&lt;c5&gt;T&lt;/c5&gt;の値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is bound to type &lt;c6&gt;T&lt;/c6&gt;, then it contains values of type &lt;c7&gt;T&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが型&lt;c6&gt;T&lt;/c6&gt;に束縛されるならば、そのときそれは型&lt;c7&gt;T&lt;/c7&gt;の値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is uninitialized, it is still uninitialized after being bound to &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが未初期化であるならば、それは&lt;c4&gt;T&lt;/c4&gt;に束縛された後も依然として未初期化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the memory is uninitialized, it is still uninitialized after being bound to &lt;c5&gt;T&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリが未初期化であるならば、それは&lt;c5&gt;T&lt;/c5&gt;に束縛された後も依然として未初期化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the name begins with a number, the first digit is replaced with an underscore.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前が数字で始まるならば、最初の数字はアンダースコアで置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements is unknown, the value is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の数が未知ならば、値は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省かれることになる要素の数がコレクションの要素の数を越えるならば、結果は空の下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>取り除く要素の数がシーケンスの要素数を越えるならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the payload contains any other characters, it is ignored.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードが何か他の文字を含むならば、それは無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the position passed in &lt;c0&gt;utf16Index&lt;/c0&gt; doesn’t have an exact corresponding position in &lt;c1&gt;utf8&lt;/c1&gt;, the result of the initializer is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;utf16Index&lt;/c0&gt;に渡された位置がまさにその対応する位置を&lt;c1&gt;utf8&lt;/c1&gt;において持たないならば、イニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the quotient is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>商がこの型において表すのに大きすぎるならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the quotient of dividing &lt;c0&gt;dividend&lt;/c0&gt; by this value is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;dividend&lt;/c0&gt;をこの値で除算した商がこの型で表すのに大きすぎるならば、実行時エラーが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the result is &lt;a0&gt;&lt;c1&gt;Result&lt;w2&gt;.success(_:)&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;, this publisher sends the specified output to all subscribers and finishes normally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果が&lt;a0&gt;&lt;c1&gt;Result&lt;w2&gt;.success(_:)&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;ならば、このパブリッシャーは指定された出力をすべての加入者に送信します、そして正常に終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the result is &lt;a3&gt;&lt;c4&gt;Result&lt;w5&gt;.failure(_:)&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;, then the publisher fails immediately with the specified error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果が&lt;a3&gt;&lt;c4&gt;Result&lt;w5&gt;.failure(_:)&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;ならば、そのときパブリッシャーは指定されたエラーで直ちに終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the return value of this method is non-&lt;c0&gt;nil&lt;/c0&gt;, then accessing the value by key path or by an offset pointer are equivalent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドの戻り値が非&lt;c0&gt;nil&lt;/c0&gt;ならば、その時その値にキーパスによってまたはあるオフセットポインタによってアクセスすることは、等価です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is never executed and &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; is the result of the call to &lt;c5&gt;reduce(_:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は決して実行されません、そして&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;reduce(_:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, &lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is never executed and &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; is the result of the call to &lt;c5&gt;reduce(into:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、&lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は決して実行されません、そして&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;は&lt;c5&gt;reduce(into:&lt;w6&gt;_:)&lt;/w6&gt;&lt;/c5&gt;への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を持たないならば、&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, returns &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが要素を持たないならば、&lt;c4&gt;nil&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the sequence has no elements, the result is &lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが１つも要素を持たないならば、結果は&lt;c0&gt;initial&lt;w1&gt;Result&lt;/w1&gt;&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the set already contains one or more elements that are also in &lt;c0&gt;other&lt;/c0&gt;, the existing members are kept.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;の中にもある１つ以上の要素をこの集合がすでに含むならば、既存のメンバはそのままにしておかれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the set is empty, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合が空ならば、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the set is empty, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合が空ならば、&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the set is empty, returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合が空ならば、&lt;c0&gt;nil&lt;/c0&gt;が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the set wraps a bridged &lt;c1&gt;NSSet&lt;/c1&gt;, the performance is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合が、ブリッジされた&lt;c1&gt;NSSet&lt;/c1&gt;をラップするならば、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the string is empty, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が空ならば、&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the two ranges do not overlap, the result is an empty range within the bounds of &lt;c0&gt;limits&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの範囲が重ならないならば、結果は&lt;c0&gt;limits&lt;/c0&gt;の境界内の空の範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the type of the value pointed to by a C pointer cannot be represented by Swift, as is the case with an incomplete struct type, the pointer is imported as an &lt;c0&gt;Opaque&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cポインタによって指し示される値の型がSwiftによって表現できないならば、不完全なstruct型を持つケース節であるなど、そのポインタは&lt;c0&gt;Opaque&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the type supports subnormal values, &lt;c0&gt;least&lt;w1&gt;Nonzero&lt;w2&gt;Magnitude&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is smaller than &lt;c3&gt;least&lt;w4&gt;Normal&lt;w5&gt;Magnitude&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;; otherwise they are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その型がサブノーマル値をサポートするならば、&lt;c0&gt;least&lt;w1&gt;Nonzero&lt;w2&gt;Magnitude&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;least&lt;w4&gt;Normal&lt;w5&gt;Magnitude&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;より小さいです；そうでなければそれらは等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value fails to encode anything, &lt;c0&gt;encoder&lt;/c0&gt; will encode an empty keyed container in its place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が何かをエンコードに失敗するならば、&lt;c0&gt;encoder&lt;/c0&gt;は空のキー付きコンテナをその場でエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is &lt;c4&gt;nil&lt;/c4&gt;, it can be because &lt;c5&gt;key&lt;/c5&gt; is computed, has observers, requires reabstraction, or overlaps storage with other properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が&lt;c4&gt;nil&lt;/c4&gt;の場合、それが可能なのは&lt;c5&gt;key&lt;/c5&gt;が計算される、オブザーバを持つ、再抽象化を要求する、またはストレージを他のプロパティでオーバーラップするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is not null, does not increment currentIndex.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値がnullでないならば、currentIndexは増加しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value is zero, then &lt;c0&gt;leading&lt;w1&gt;Zero&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c4&gt;bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値がゼロならば、そのとき&lt;c0&gt;leading&lt;w1&gt;Zero&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c4&gt;bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/c4&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Float16&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Float16&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Float80&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Float80&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a &lt;c3&gt;Float&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードの値が&lt;c3&gt;Float&lt;w4&gt;.nan&lt;/w4&gt;&lt;/c3&gt;のペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as &lt;c0&gt;source&lt;/c0&gt; is greater than the maximum representable value in this type, the result is the type’s &lt;c1&gt;max&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡された値がこの型において最大限の表現可能な値より大きいならば、結果はこの型の&lt;c1&gt;max&lt;/c1&gt;値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value passed as &lt;c0&gt;source&lt;/c0&gt; is not representable exactly, the result is &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡された値が正確に表現可能でないならば、結果は&lt;c1&gt;nil&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value you pass to &lt;c0&gt;significand&lt;/c0&gt; is NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;significand&lt;/c0&gt;に渡す値がNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value you pass to &lt;c0&gt;significand&lt;/c0&gt; is zero or infinite, the result is zero or infinite, regardless of the value of &lt;c1&gt;exponent&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;significand&lt;/c0&gt;に渡す値がゼロまたは無限大ならば、結果はゼロまたは無限大です、&lt;c1&gt;exponent&lt;/c1&gt;の値に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there is no upper limit, then &lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Count&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; should be &lt;c6&gt;Int&lt;w7&gt;.max&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上限がないならば、そのとき&lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Count&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;は&lt;c6&gt;Int&lt;w7&gt;.max&lt;/w7&gt;&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there is no value of the type that corresponds with the specified raw value, this initializer returns &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された生の値に対応する型の値が１つもないならば、このイニシャライザは&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there's a chance that a closure you pass to an API won't be called, don't put code that's critical to continuing your app in the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがAPIに渡すクロージャが呼び出されない可能性があるならば、あなたのアプリを継続するのに重要なコードをクロージャの中に置かないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in &lt;c1&gt;characters&lt;/c1&gt;, this method returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置を&lt;c1&gt;characters&lt;/c1&gt;において持たないならば、イニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in &lt;c1&gt;utf16&lt;/c1&gt;, this method returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置を&lt;c1&gt;utf16&lt;/c1&gt;において持たないならば、イニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in &lt;c1&gt;utf8&lt;/c1&gt;, this method returns &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置を&lt;c1&gt;utf8&lt;/c1&gt;において持たないならば、イニシャライザの結果は&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this index does not have an exact corresponding position in &lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;, this method returns &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスがまさにその対応する位置を&lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;において持たないならば、イニシャライザの結果は&lt;c4&gt;nil&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this instance is &lt;c0&gt;nil&lt;/c0&gt;, returns &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが&lt;c0&gt;nil&lt;/c0&gt;ならば、&lt;c1&gt;nil&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this mutates the string, it will invalidate any pre-existing indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが文字列を変化させるならば、それはあらゆる前から存在するインデックスを無効にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this mutates the substring, it will invalidate any pre-existing indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これが下位文字列を変化させるならば、それはあらゆる前から存在するインデックスを無効にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this string is not contiguous, make it so.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列が隣接しないならば、それをそうします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this string is not contiguous, this will first make it contiguous, which will also speed up subsequent access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列が隣接しないならば、これは最初にそれを隣接させます、それはまた後に続くアクセスの速度を上げるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this substring is not contiguous, this will first make it contiguous, which will also speed up subsequent access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この下位文字列が隣接しないならば、これは最初にそれを隣接させます、それはまた後に続くアクセスの速度を上げるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type has value semantics, the &lt;c0&gt;Playground&lt;w1&gt;Quick&lt;w2&gt;Look&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance should be unaffected by subsequent mutations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が値意味論を持つならば、&lt;c0&gt;Playground&lt;w1&gt;Quick&lt;w2&gt;Look&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;はその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型が値意味論を持つならば、ミラーはインスタンスのその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type’s &lt;c0&gt;Stride&lt;/c0&gt; type conforms to &lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;, then for a value &lt;c3&gt;x&lt;/c3&gt;, a distance &lt;c4&gt;n&lt;/c4&gt;, and a value &lt;c5&gt;y = x&lt;w6&gt;.advanced(by: n)&lt;/w6&gt;&lt;/c5&gt;, &lt;c7&gt;x&lt;w8&gt;.distance(to: y) == n&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のもつ&lt;c0&gt;Stride&lt;/c0&gt;型が&lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;に準拠するならば、そのとき値&lt;c3&gt;x&lt;/c3&gt;、隔たり&lt;c4&gt;n&lt;/c4&gt;、そして値&lt;c5&gt;y = x&lt;w6&gt;.advanced(by: n)&lt;/w6&gt;&lt;/c5&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.distance(to: y) == n&lt;/w8&gt;&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this type’s &lt;c0&gt;Stride&lt;/c0&gt; type conforms to &lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;, then for two values &lt;c3&gt;x&lt;/c3&gt; and &lt;c4&gt;y&lt;/c4&gt;, and a distance &lt;c5&gt;n = x&lt;w6&gt;.distance(to: y)&lt;/w6&gt;&lt;/c5&gt;, &lt;c7&gt;x&lt;w8&gt;.advanced(by: n) == y&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の持つ&lt;c0&gt;Stride&lt;/c0&gt;型が&lt;c1&gt;Binary&lt;w2&gt;Integer&lt;/w2&gt;&lt;/c1&gt;に準拠するならば、そのとき２つの値&lt;c3&gt;x&lt;/c3&gt;と&lt;c4&gt;y&lt;/c4&gt;、そして隔たり&lt;c5&gt;n = x&lt;w6&gt;.distance(to: y)&lt;/w6&gt;&lt;/c5&gt;に対して、&lt;c7&gt;x&lt;w8&gt;.advanced(by: n) == y&lt;/w8&gt;&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this value and &lt;c0&gt;other&lt;/c0&gt; are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than &lt;c1&gt;other&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と&lt;c0&gt;other&lt;/c0&gt;が両方とも有限の数ならば、切り捨てられる余りはこの値と同じ符号を持ち、そして厳密に&lt;c1&gt;other&lt;/c1&gt;より小さい規模になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this value and &lt;c0&gt;other&lt;/c0&gt; are finite numbers, the remainder is in the closed range &lt;c1&gt;-abs(other / 2)...abs(other / 2)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と&lt;c0&gt;other&lt;/c0&gt;が有限数ならば、あまりは完結範囲&lt;c1&gt;-abs(other / 2)...abs(other / 2)&lt;/c1&gt;の中に入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this value is a finite nonzero number, &lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt; is the number of fractional bits required to represent the value of &lt;c2&gt;significand&lt;/c2&gt;; otherwise, &lt;c3&gt;significand&lt;w4&gt;Width&lt;/w4&gt;&lt;/c3&gt; is -1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値が有限の非ゼロ数ならば、&lt;c0&gt;significand&lt;w1&gt;Width&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;significand&lt;/c2&gt;の値を表すのに必要とされる小数部ビットの数です；そうでなければ、&lt;c3&gt;significand&lt;w4&gt;Width&lt;/w4&gt;&lt;/c3&gt;は-1です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの表現可能な値が同等であるくらい近いならば、結果はその仮数ビットパターンにおいてより多く後ろに続くゼロを持つ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you accept, Xcode creates the bridging header file along with the file you were creating, and names it by using your product module name followed by &lt;c0&gt;"-Bridging-Header&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが承諾するならば、Xcodeはブリッジヘッダファイルをあなたが作成していたファイルに加えて作成します、そしてあなたのプロダクトモジュール名に&lt;c0&gt;"-Bridging-Header&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;を続けることでそれに名前をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが数のわかった要素をコレクションに加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are adding a known number of elements to a set, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが数のわかった要素を集合に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are sorting strings to present to the end user, use &lt;c0&gt;String&lt;/c0&gt; APIs that perform localized comparison instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、代わりに&lt;c0&gt;String&lt;/c0&gt; APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are sorting strings to present to the end user, use &lt;c0&gt;String&lt;/c0&gt; APIs that perform localized comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、&lt;c0&gt;String&lt;/c0&gt; APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are using the memory for a specific type, allocate memory using the &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;w3&gt;.allocate(capacity:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; static method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリを特定の型に対して使っているならば、メモリを代わりに&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;w3&gt;.allocate(capacity:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;静的メソッドを使ってアロケートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you declare a new operator without specifying a precedence group, it is a member of the &lt;c0&gt;Default&lt;w1&gt;Precedence&lt;/w1&gt;&lt;/c0&gt; precedence group.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが新しい演算子を優先順位グループを指定せずに宣言するならば、それは&lt;c0&gt;Default&lt;w1&gt;Precedence&lt;/w1&gt;&lt;/c0&gt;優先順位グループのメンバです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you do need to access memory that is bound to one type as a different type, Swift’s pointer types provide type-safe ways to temporarily or permanently change the bound type of the memory, or to load typed instances directly from raw memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある型に束縛されるメモリに異なる型としてアクセスする必要があるならば、Swiftのポインタ型は型安全な方法を提供することで、一時的にまたは永続的にメモリの束縛される型を変更します、または型付インスタンスを直接に生のメモリからロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you misunderstand the requirements of &lt;a0&gt;&lt;c1&gt;close&lt;w2&gt;File()&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;, you might place the call inside the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;a0&gt;&lt;c1&gt;close&lt;w2&gt;File()&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;の必要条件を取り違えるならば、あなたは呼び出しをクロージャの内側に置くかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期されない複製の原因となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期しない複製という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが同じ型での逆にされたコレクションを必要とするならば、あなたはコレクションのもつシーケンス基盤のまたはコレクション基盤のイニシャライザを使うことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need an integer value within a specific range, use the static &lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt; method on that integer type instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある整数を指定範囲内で必要とするならば、静的&lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;メソッドをその整数型の上で使ってください、このメソッドの代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need the reference semantics that come with the Foundation reference type, you can access it with its original &lt;c0&gt;NS&lt;/c0&gt; class name prefix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがFoundation参照型に付属する参照意味論を必要とするならば、あなたはそれに、それの元の&lt;c0&gt;NS&lt;/c0&gt;クラス名接頭辞でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to access a specific position in a UTF-16 view, use Swift’s index manipulation methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがUTF-16ビューにおいて特定の位置にアクセスする必要があるならば、Swiftのインデックス操作メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;utf16&lt;/c2&gt;, or &lt;c3&gt;utf8&lt;/c3&gt; properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列の内容に異なるユニコードエンコーディングでエンコードされたようにアクセスする必要があるならば、その文字列のもつ&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;utf16&lt;/c2&gt;、または&lt;c3&gt;utf8&lt;/c3&gt;プロパティの１つを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to disambiguate between overloaded functions, use parenthesized expressions along with the &lt;c0&gt;as&lt;/c0&gt; operator to make the &lt;c1&gt;#selector&lt;/c1&gt; expression refer unambiguously to a specific overload.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーロードされた関数の間の違いを明らかにする必要があるならば、括弧に囲まれた式を&lt;c0&gt;as&lt;/c0&gt;演算子と一緒に使って、&lt;c1&gt;#selector&lt;/c1&gt;式を明白に特定のオーバーロードを参照するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to infer moves, call the &lt;c0&gt;inferring&lt;w1&gt;Moves()&lt;/w1&gt;&lt;/c0&gt; method on the resulting difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが移動の推論を必要とするならば、&lt;c0&gt;inferring&lt;w1&gt;Moves()&lt;/w1&gt;&lt;/c0&gt;メソッドを結果の差異の上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to iterate over consecutive floating-point values, see the &lt;c3&gt;stride(from:&lt;w4&gt;to:&lt;w5&gt;by:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが隣接浮動小数点値のすべてにわたって反復する必要があるならば、&lt;c3&gt;stride(from:&lt;w4&gt;to:&lt;w5&gt;by:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;関数を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to provide a customized playground representation in Swift 4.0 or Swift 3.2 or earlier, use a conditional compilation block:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがカスタマイズされたプレイグラウンド表現をSwift 4.0またはSwift 3.2以前において提供する必要があるならば、条件コンパイルブロックを使ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to store a copy of a nontrivial value into memory, or to store a value into memory that contains a nontrivial value, you cannot use the &lt;c0&gt;store&lt;w1&gt;Bytes(of:&lt;w2&gt;to&lt;w3&gt;Byte&lt;w4&gt;Offset:&lt;w5&gt;as:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが非自明の値のコピーをメモリに格納する、またはある値を非自明の値を含むメモリに格納する必要がある場合、あなたは&lt;c0&gt;store&lt;w1&gt;Bytes(of:&lt;w2&gt;to&lt;w3&gt;Byte&lt;w4&gt;Offset:&lt;w5&gt;as:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s &lt;c0&gt;same&lt;w1&gt;Position(in:)&lt;/w1&gt;&lt;/c0&gt; method or the &lt;c2&gt;init(_:&lt;w3&gt;within:)&lt;/w3&gt;&lt;/c2&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列の持つビューからのインデックスが別のビューでの正確な位置と対応することを有効にする必要があるならば、そのインデックスの&lt;c0&gt;same&lt;w1&gt;Position(in:)&lt;/w1&gt;&lt;/c0&gt;メソッドまたは&lt;c2&gt;init(_:&lt;w3&gt;within:)&lt;/w3&gt;&lt;/c2&gt;イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass a zero-length range as the &lt;c0&gt;subrange&lt;/c0&gt; parameter, this method inserts the elements of &lt;c1&gt;new&lt;w2&gt;Elements&lt;/w2&gt;&lt;/c1&gt; at &lt;c3&gt;subrange&lt;w4&gt;.start&lt;w5&gt;Index&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがゼロ長範囲を&lt;c0&gt;subrange&lt;/c0&gt;パラメータとして渡すならば、このメソッドは&lt;c1&gt;new&lt;w2&gt;Elements&lt;/w2&gt;&lt;/c1&gt;の要素を&lt;c3&gt;subrange&lt;w4&gt;.start&lt;w5&gt;Index&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass strings to the &lt;c3&gt;descendant(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt; method, labels are used for lookup.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが幾つか文字列を&lt;c3&gt;descendant(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt;メソッドに渡すならば、それらラベルは検索に使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass the collection’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property as the &lt;c2&gt;index&lt;/c2&gt; parameter, the new element is appended to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを&lt;c2&gt;index&lt;/c2&gt;パラメータとして渡すならば、新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you pass the collection’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property as the &lt;c2&gt;index&lt;/c2&gt; parameter, the new elements are appended to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティを&lt;c2&gt;index&lt;/c2&gt;パラメータとして渡すならば、いくらかの新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you provide your own implementation, make sure to compute the value nondestructively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなた独自の実装を提供するならば、値を非破壊的に計算することを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you return Core Foundation objects from your own C functions and Objective-C methods, you can annotate them with either the &lt;c0&gt;CF&lt;w1&gt;_RETURNS&lt;w2&gt;_RETAINED&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c3&gt;CF&lt;w4&gt;_RETURNS&lt;w5&gt;_NOT&lt;w6&gt;_RETAINED&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; macro to automatically insert memory management calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがCore Foundationオブジェクトをあなた独自のC関数およびObjective-Cメソッドから返すならば、あなたはそれらに&lt;c0&gt;CF&lt;w1&gt;_RETURNS&lt;w2&gt;_RETAINED&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c3&gt;CF&lt;w4&gt;_RETURNS&lt;w5&gt;_NOT&lt;w6&gt;_RETAINED&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;マクロのどちらかで注釈をつけて、自動的にメモリ管理呼び出しを差し込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c0&gt;11&lt;/c0&gt; as &lt;c1&gt;rhs&lt;/c1&gt;, &lt;c2&gt;x&lt;/c2&gt; is overshifted such that all of its bits are set to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;11&lt;/c0&gt;を&lt;c1&gt;rhs&lt;/c1&gt;として使うならば、&lt;c2&gt;x&lt;/c2&gt;は、それのビットのすべてがゼロに設定されるような、オーバーシフトをされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c2&gt;2&lt;/c2&gt; as the right-hand-side value in an operation on &lt;c3&gt;x&lt;/c3&gt;, the shift amount requires no masking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;2&lt;/c2&gt;を右手側の値として&lt;c3&gt;x&lt;/c3&gt;に関する演算において使うならば、シフト量はマスクを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c2&gt;2&lt;/c2&gt; as the right-hand-side value in an operation on &lt;c3&gt;x&lt;/c3&gt;, the value is shifted left by two bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;2&lt;/c2&gt;を&lt;c3&gt;x&lt;/c3&gt;上での演算の右手側の値として使うならば、値は2ビットだけ左にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you use &lt;c2&gt;2&lt;/c2&gt; as the right-hand-side value in an operation on &lt;c3&gt;x&lt;/c3&gt;, the value is shifted right by two bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;2&lt;/c2&gt;を&lt;c3&gt;x&lt;/c3&gt;上での演算の右手側の値として使うならば、値は2ビットだけ右にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to expose an Objective-C API to Swift with a different declaration, but a similar underlying implementation, use the &lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがObjective-C APIをSwiftに異なる宣言で、しかしよく似た基盤実装で公開したいならば、&lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to import an Objective-C API into Swift with a different name, use the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるObjective-C APIをSwiftへ異なる名前でインポートしたいならば、&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow addition operator (&lt;c0&gt;&amp;+&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー加算演算子（&lt;c0&gt;&amp;+&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow multiplication operator (&lt;c0&gt;&amp;*&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー乗算演算子（&lt;c0&gt;&amp;*&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow subtraction operator (&lt;c0&gt;&amp;-&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオーバーフロー検査を取りやめてあらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー減算演算子（&lt;c0&gt;&amp;-&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが数のわかった要素をコレクションに加えることになっているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're completely certain about the type of the object, you can use the forced downcast operator (&lt;c0&gt;as!&lt;/c0&gt;) instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがオブジェクトの型について完全に確信しているならば、あなたは強制ダウンキャスト演算子（&lt;c0&gt;as!&lt;/c0&gt;）を代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're going to pass a closure to an API that might call it multiple times, omit code that's intended to make a one-time change to external state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるクロージャをそれを複数回呼び出すかもしれないAPIに渡そうとしているならば、一度限りの変更を外部状態に対してするように意図されるコードを省いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your app target has an Objective-C bridging header, the generated header also includes interfaces marked with the &lt;c2&gt;internal&lt;/c2&gt; modifier.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのアプリターゲットがObjective-Cブリッジヘッダを含むならば、生成されたヘッダもまた&lt;c2&gt;internal&lt;/c2&gt;修飾子で印されたインターフェイスを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ要素からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ浮動小数点値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same sequence of integer values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ整数値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じシャッフルされた順番という結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you’re working directly with numeric values, use the addition operator (&lt;c1&gt;+&lt;/c1&gt;) instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが直接に数値を扱っているならば、加算演算子（&lt;c1&gt;+&lt;/c1&gt;）をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ill-formed sequences are replaced with the Unicode replacement character (&lt;c3&gt;"\u{FFFD}"&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>誤形式シーケンスは、ユニコード代替文字（&lt;c3&gt;"\u{FFFD}"&lt;/c3&gt;）で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Imagine you have a set of temperature data for which you need to report some general statistics: the total number of observations, the number of valid observations, and the average temperature.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが幾つかの一般統計：観測総数、有効観測数、そして平均温度を報告しなければならない一揃いの温度データを持つと想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implement this method to conform to the &lt;c0&gt;Hashable&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを実装して、&lt;c0&gt;Hashable&lt;/c0&gt;プロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implementing an iterator that conforms to &lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt; is simple.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;に準拠するイテレータを実装するのは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implements the publisher protocol by accepting the subscriber if the result is success, or terminating with an error immediately if it’s failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パブリッシャープロトコルを、もし結果が成功するならば加入者を受け入れる、またはもしそれが失敗するならばエラーで直ぐに終了することによって実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implicit Casting and Bridging</seg>
      </tuv>
      <tuv lang="ja">
        <seg>暗黙的なキャストとブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Code Within a Framework Target</seg>
      </tuv>
      <tuv lang="ja">
        <seg>フレームワークターゲット内部でコードをインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Code Within an App Target</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリターゲット内部でコードをインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Related Functions into Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連する関数をSwiftにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import Swift code into Objective-C within the same framework:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftコードをObjective-Cへと同じフレームワーク内部でインポートする：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import relevant system frameworks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連のあるシステムフレームワークをインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import the Swift code from that framework target into any Objective-C &lt;c0&gt;.m&lt;/c0&gt; file within that target using this syntax and substituting the appropriate names:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのフレームワークターゲットからのSwiftコードを何らかのObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルにそのターゲット内部で、この構文を使ってそして適切な名前で置き換えて、インポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import your Objective-C files by configuring the umbrella header:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cファイルをアンプレラヘッダを構成設定することによってインポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Import your Objective-C headers into an Objective-C bridging header file to expose the declarations to all your Swift files.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-CヘッダをObjective-Cブリッジヘッダファイルにインポートして、それら宣言をあなたのSwiftファイルすべてに露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="ja">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Imported C and Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたCおよびObjective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Importing Objective-C into Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-CをSwiftにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Importing Swift into Objective-C</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftをObjective-Cにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Improving Objective-C API Declarations for Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C API宣言をSwift用に改める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, a key is a string that identifies a specific property of an object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cでは、キーはオブジェクトの特定のプロパティを識別する文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, a selector is a type that refers to the name of an Objective-C method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Ojbective-Cでは、セレクタはObjective-Cメソッドの名前を参照するある型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, the &lt;c0&gt;id&lt;/c0&gt; type represents objects that are instances of any Objective-C class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cでは、&lt;c0&gt;id&lt;/c0&gt;型は、何らかのObjective-Cクラスのインスタンスであるオブジェクトを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Objective-C, you work with references to objects by using pointers that can be null, called &lt;c0&gt;nil&lt;/c0&gt; in Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cでは、あなたはオブジェクトへの参照をヌル、Objective-Cにおいて&lt;c0&gt;nil&lt;/c0&gt;と呼ばれるもの、であることが可能なポインタを使用して扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, &lt;e0&gt;reachability&lt;/e0&gt; refers to the ability to produce one value from the other through zero or more applications of &lt;c1&gt;index(after:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、&lt;e0&gt;到達可能性 reachability&lt;/e0&gt;は、ゼロ以上の&lt;c1&gt;index(after:)&lt;/c1&gt;の適用を通して、ある値を別のものから生み出す能力のことを言います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, Objective-C selectors are represented by the &lt;a0&gt;&lt;c1&gt;Selector&lt;/c1&gt;&lt;/a0&gt; structure, and you create them using the &lt;c2&gt;#selector&lt;/c2&gt; expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、Objective-Cセレクタは&lt;a0&gt;&lt;c1&gt;Selector&lt;/c1&gt;&lt;/a0&gt;構造体によって表されます、そしてあなたはそれらを&lt;c2&gt;#selector&lt;/c2&gt;式を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, all values — including object instances — are guaranteed to be non-null.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、すべての値は — オブジェクトインスタンスを含めて — 非ヌルであることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, it’s imported like this:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトでは、それはこのようにインポートされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, only class instances and metatypes have unique identities.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、クラスインスタンスとメタタイプだけが固有な識別子を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, the &lt;c0&gt;UITable&lt;w1&gt;View&lt;w2&gt;Cell&lt;w3&gt;Style&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; enumeration is imported like this:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、&lt;c0&gt;UITable&lt;w1&gt;View&lt;w2&gt;Cell&lt;w3&gt;Style&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;列挙はこのようにインポートされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can call C variadic functions, such as &lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, using the Swift &lt;a3&gt;&lt;c4&gt;get&lt;w5&gt;Va&lt;w6&gt;List(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt; or &lt;a7&gt;&lt;c8&gt;with&lt;w9&gt;Va&lt;w10&gt;List(_:&lt;w11&gt;_:)&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;&lt;/a7&gt; functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたはC可変長引数関数、例えば&lt;c0&gt;vasprintf(_:&lt;w1&gt;_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;などを呼び出すことが、Swiftの&lt;a3&gt;&lt;c4&gt;get&lt;w5&gt;Va&lt;w6&gt;List(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;または&lt;a7&gt;&lt;c8&gt;with&lt;w9&gt;Va&lt;w10&gt;List(_:&lt;w11&gt;_:)&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;&lt;/a7&gt;関数を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can use each pair of toll-free bridged Foundation and Core Foundation types interchangeably.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトにおいて、あなたは、トールフリーブリッジ（無料の橋渡し）されたFoundationとCore Foundation型の各対を入れ替えて使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you can use functions and generics to achieve the same results without any compromises.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトでは、あなたはどんな妥協もなしで同じ結果を成し遂げるために、関数と総称体を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you create a selector for an Objective-C method by placing the name of the method within the &lt;c0&gt;#selector&lt;/c0&gt; expression: &lt;c1&gt;#selector(My&lt;w2&gt;View&lt;w3&gt;Controller&lt;w4&gt;.tapped&lt;w5&gt;Button(_:))&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたはセレクタをObjective-Cメソッドに対して、そのメソッドの名前を&lt;c0&gt;#selector&lt;/c0&gt;式の内部に置くことによって作成します：&lt;c1&gt;#selector(My&lt;w2&gt;View&lt;w3&gt;Controller&lt;w4&gt;.tapped&lt;w5&gt;Button(_:))&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you use the &lt;c0&gt;#selector&lt;/c0&gt; and &lt;c1&gt;#key&lt;w2&gt;Path&lt;/w2&gt;&lt;/c1&gt; expressions to represent those method or property names as selectors or key paths, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたは&lt;c0&gt;#selector&lt;/c0&gt;と&lt;c1&gt;#key&lt;w2&gt;Path&lt;/w2&gt;&lt;/c1&gt;式を使って、それらメソッドまたはプロパティ名をセレクタまたはキーパスとして表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Swift, you use the &lt;c0&gt;@available&lt;/c0&gt; attribute to control whether a declaration is available to use when building an app for a particular target platform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでは、あなたは&lt;c0&gt;@available&lt;/c0&gt;属性を使うことで、あるアプリを特定の対象プラットホーム用にビルドする時に、ある宣言が利用に応じられるかを制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a &lt;c0&gt;Repeated&lt;/c0&gt; collection, &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; is always equal to &lt;c3&gt;count&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Repeated&lt;/c0&gt;コレクションにおいて、&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;は常に&lt;c3&gt;count&lt;/c3&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a &lt;c0&gt;Repeated&lt;/c0&gt; collection, &lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; is always equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Repeated&lt;/c0&gt;コレクションにおいて、&lt;c1&gt;start&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;は常にゼロと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a &lt;c0&gt;Zip2Sequence&lt;/c0&gt; instance, the elements of the &lt;e1&gt;i&lt;/e1&gt;th pair are the &lt;e2&gt;i&lt;/e2&gt;th elements of each underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Zip2Sequence&lt;/c0&gt;インスタンスにおいて、&lt;e1&gt;i&lt;/e1&gt;番目の対に属する要素らは、基盤となるシーケンスそれぞれの&lt;e2&gt;i&lt;/e2&gt;番目の要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a collection, the subsequence should also conform to &lt;c1&gt;Collection&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションにおいて、下位シーケンスはまた&lt;c1&gt;Collection&lt;/c1&gt;に準拠すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a mirror created with this ancestor representation, the &lt;c0&gt;superclass&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt; property is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この先祖表現で作成されるミラーにおいて、&lt;c0&gt;superclass&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;プロパティは&lt;c2&gt;nil&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to changing the value of an individual element, you can also change the values of a slice of elements in a mutable collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある一個の要素の値を変えることに加えて、あなたはまた可変コレクションの要素のスライスに属するいくらかの値を変更することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to checking whether the base scalar has &lt;c3&gt;is&lt;w4&gt;Emoji == true&lt;/w4&gt;&lt;/c3&gt;, you must also check its default presentation (see &lt;c5&gt;is&lt;w6&gt;Emoji&lt;w7&gt;Presentation&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;) and determine whether it is followed by a variation selector that would modify the presentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底スカラーが&lt;c3&gt;is&lt;w4&gt;Emoji == true&lt;/w4&gt;&lt;/c3&gt;であるかどうかを調べることに加えて、あなたはまたそれの省略時の表現を調べて（&lt;c5&gt;is&lt;w6&gt;Emoji&lt;w7&gt;Presentation&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;を見てください）そしてその表現を修正する異字体セレクタがそれの後に続くかどうかを判定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to creating a string from a single string literal, you can also create an empty string, a string containing an existing group of characters, or a string repeating the contents of another string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単独の文字列リテラルから文字列を作成することに加えて、あなたはまた、空の文字列、既存のいくつかの文字からなるグループを含んでいる文字列、または別の文字列の内容を繰り返している文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to its collection interface, an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance also supports the following methods provided by &lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Raw&lt;w8&gt;Pointer&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;, including bounds checks in debug mode:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのコレクションインターフェイスに加えて、&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスはまた、&lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Raw&lt;w8&gt;Pointer&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;によって提供される以下のメソッドをサポートし、デバッグモードにおける境界検査を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to its collection interface, an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance also supports the &lt;c4&gt;load(from&lt;w5&gt;Byte&lt;w6&gt;Offset:&lt;w7&gt;as:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; method provided by &lt;c8&gt;Unsafe&lt;w9&gt;Raw&lt;w10&gt;Pointer&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;, including bounds checks in debug mode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それのコレクションインターフェイスに加えて、&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスはまた、&lt;c4&gt;load(from&lt;w5&gt;Byte&lt;w6&gt;Offset:&lt;w7&gt;as:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;メソッドを&lt;c8&gt;Unsafe&lt;w9&gt;Raw&lt;w10&gt;Pointer&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;によって提供されてサポートし、デバッグモードにおける境界検査を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to representing specific numbers, floating-point types also have special values for working with overflow and nonnumeric results of calculation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定の数を表すことに加えて、浮動小数点型はまた、オーバーフローおよび非数の計算結果で使うための特別な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to the &lt;c0&gt;Set&lt;/c0&gt; type’s set operations, you can use any nonmutating sequence or collection methods with a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;/c0&gt;型の持つ集合演算に加えて、あなたはあらゆる非可変のシーケンスまたはコレクションメソッドを集合で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to using an array literal, you can also create a set using these initializers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルを使うことに加えて、あなたはまた集合をこれらのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, because &lt;c1&gt;abs(_:)&lt;/c1&gt; always returns a value of the same type, even in a generic context, using the function instead of the &lt;c2&gt;magnitude&lt;/c2&gt; property is encouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、&lt;c1&gt;abs(_:)&lt;/c1&gt;は常に同じ型の値を返すことから、総称体の文脈においてさえも、この関数を&lt;c2&gt;magnitude&lt;/c2&gt;プロパティの代わりに使うことは推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, because class instance properties are always stored out-of-line, their positions are not accessible using &lt;c4&gt;offset(of:)&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その上、クラスインスタンスプロパティは常にアウトオブラインに格納されることから、それらの位置は&lt;c4&gt;offset(of:)&lt;/c4&gt;によってアクセス可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, the unqualified &lt;c6&gt;list&lt;w7&gt;Of&lt;w8&gt;Objects&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; method uses the &lt;c9&gt;NSCopying&lt;/c9&gt; generic constraint inferred from the &lt;c10&gt;List&lt;/c10&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、不適格&lt;c6&gt;list&lt;w7&gt;Of&lt;w8&gt;Objects&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;メソッドは、&lt;c9&gt;NSCopying&lt;/c9&gt;総称体制約を&lt;c10&gt;List&lt;/c10&gt;型から推論されて使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, there are two other edge cases:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えて、２つの別の境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty UTF-16 view, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のUTF-16ビューにおいて、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty UTF-8 view, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のUTF-8ビューにおいて、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty Unicode scalars view, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のユニコードスカラービューにおいて、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty collection, &lt;c0&gt;start&lt;w1&gt;Index == end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のコレクションでは、&lt;c0&gt;start&lt;w1&gt;Index == end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty range, &lt;c0&gt;lower&lt;w1&gt;Bound&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;upper&lt;w3&gt;Bound&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の範囲では、&lt;c0&gt;lower&lt;w1&gt;Bound&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;upper&lt;w3&gt;Bound&lt;/w3&gt;&lt;/c2&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty range, &lt;c0&gt;upper&lt;w1&gt;Bound&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;lower&lt;w3&gt;Bound&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の範囲では、&lt;c0&gt;upper&lt;w1&gt;Bound&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;lower&lt;w3&gt;Bound&lt;/w3&gt;&lt;/c2&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty string, &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が空ならば、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In an empty string, &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; is equal to &lt;c2&gt;end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空の文字列において、&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In asynchronous APIs, the result won't be available until sometime later; this difference affects how you write code both &lt;e1&gt;in&lt;/e1&gt; your closure as well as the code &lt;e2&gt;following&lt;/e2&gt; your closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非同期APIでは、結果はいつか後まで利用可能でないでしょう；この違いは、あなたがコードを書く方法に、あなたのクロージャ&lt;e1&gt;において&lt;/e1&gt;それだけでなくあなたのクロージャ&lt;e2&gt;の後の&lt;/e2&gt;コードの両方で影響します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case of an invalid input value, nil is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効な入力値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case of an invalid input value, the result is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効な入力値の場合には、結果は&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case of an invalid unicode scalar value, nil is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無効なユニコードスカラー値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In code, the absence of a value is typically written using the &lt;c0&gt;nil&lt;/c0&gt; literal rather than the explicit &lt;c1&gt;.none&lt;/c1&gt; enumeration case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コードにおいて、ある値の不在は一般的に&lt;c0&gt;nil&lt;/c0&gt;リテラルを使って書かれます、明示的な&lt;c1&gt;.none&lt;/c1&gt;列挙ケース節ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In debug builds (&lt;c0&gt;-Onone&lt;/c0&gt;), the &lt;c1&gt;unsafely&lt;w2&gt;Unwrapped&lt;/w2&gt;&lt;/c1&gt; property has the same behavior as using the postfix &lt;c3&gt;!&lt;/c3&gt; operator and triggers a runtime error if the instance is &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッグビルド（&lt;c0&gt;-Onone&lt;/c0&gt;）において、&lt;c1&gt;unsafely&lt;w2&gt;Unwrapped&lt;/w2&gt;&lt;/c1&gt;プロパティは後置&lt;c3&gt;!&lt;/c3&gt;演算子を使うのと同じ挙動を持ち、そしてインスタンスが&lt;c4&gt;nil&lt;/c4&gt;ならば実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, &lt;c0&gt;s&lt;w1&gt;.flat&lt;w2&gt;Map(transform)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is equivalent to &lt;c3&gt;Array(s&lt;w4&gt;.map(transform).joined())&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>実際のところ、&lt;c0&gt;s&lt;w1&gt;.flat&lt;w2&gt;Map(transform)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は&lt;c3&gt;Array(s&lt;w4&gt;.map(transform).joined())&lt;/w4&gt;&lt;/c3&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In general, though, the observability of mutations is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>もっとも、一般的に変異体の観察性は未規定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In many cases, only one sequence of calls is correct for your app, so it's important to think through what the state of your app will be, given the APIs you're using.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの場合に、ただ１つの呼び出し順番だけがあなたのアプリにとって正しいです、それで重要なのは、あなたが使うAPIを与えられて、あなたのアプリの状態がどうなるのか考え抜くことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, you won't need to modify this setting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの場合では、あなたはこの設定を修正する必要はないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most scenarios, you use the preserved result as part of broader functionality in your code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ほとんどの状況では、あなたは保全された結果をあなたのコードにおけるより幅広い機能性の一部として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In order to use recursion without making copies of the strings at each step, &lt;c4&gt;count&lt;w5&gt;Letter&lt;w6&gt;Changes(_:&lt;w7&gt;_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; uses &lt;c8&gt;Substring&lt;/c8&gt;, a string’s slice type, for its parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各段階で文字列のコピーを作ることなく反復を使う手段として、&lt;c4&gt;count&lt;w5&gt;Letter&lt;w6&gt;Changes(_:&lt;w7&gt;_:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;は&lt;c8&gt;Substring&lt;/c8&gt;、文字列の持つスライス型、をそれのパラメータに対して使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, for ordinary collections &lt;c1&gt;c&lt;/c1&gt; having bidirectional indices:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>言い換えると、二方向性のインデックスを持つ通常のコレクション&lt;c1&gt;c&lt;/c1&gt;は：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, for ordinary sequences &lt;c1&gt;s&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>言い換えれば、よくあるシーケンス &lt;c1&gt;s&lt;/c1&gt;に対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, &lt;c0&gt;Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt;, when &lt;c2&gt;T&lt;/c2&gt; is a class type, is the same regardless of how many stored properties &lt;c3&gt;T&lt;/c3&gt; has.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、&lt;c0&gt;Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;T&lt;/c2&gt;がクラス型の時、&lt;c3&gt;T&lt;/c3&gt;がどのくらい多くの格納プロパティを持つかに関係なく同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, &lt;c4&gt;x&lt;w5&gt;.sign == .minus&lt;/w5&gt;&lt;/c4&gt; if &lt;c6&gt;x&lt;/c6&gt; is -0, and while &lt;c7&gt;x &lt; 0&lt;/c7&gt; is always &lt;c8&gt;false&lt;/c8&gt; if &lt;c9&gt;x&lt;/c9&gt; is NaN, &lt;c10&gt;x&lt;w11&gt;.sign&lt;/w11&gt;&lt;/c10&gt; could be either &lt;c12&gt;.plus&lt;/c12&gt; or &lt;c13&gt;.minus&lt;/c13&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、&lt;c6&gt;x&lt;/c6&gt;が-0ならば&lt;c4&gt;x&lt;w5&gt;.sign == .minus&lt;/w5&gt;&lt;/c4&gt;、一方で&lt;c9&gt;x&lt;/c9&gt;がNaNならば、&lt;c10&gt;x&lt;w11&gt;.sign&lt;/w11&gt;&lt;/c10&gt;が&lt;c12&gt;.plus&lt;/c12&gt;または&lt;c13&gt;.minus&lt;/c13&gt;のどちらでも、&lt;c7&gt;x &lt; 0&lt;/c7&gt;は常に&lt;c8&gt;false&lt;/c8&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, because &lt;c3&gt;cafe&lt;/c3&gt; was declared using the decomposed form of the &lt;c4&gt;"é"&lt;/c4&gt; character, &lt;c5&gt;unicode&lt;w6&gt;Scalars&lt;/w6&gt;&lt;/c5&gt; contains the scalar values for both the letter &lt;c7&gt;"e"&lt;/c7&gt; (101) and the accent character &lt;c8&gt;"´"&lt;/c8&gt; (769).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、&lt;c3&gt;cafe&lt;/c3&gt;は分解形式の&lt;c4&gt;"é"&lt;/c4&gt;文字を使って宣言されたことから、&lt;c5&gt;unicode&lt;w6&gt;Scalars&lt;/w6&gt;&lt;/c5&gt;は字&lt;c7&gt;"e"&lt;/c7&gt;（101）とアクセント文字&lt;c8&gt;"´"&lt;/c8&gt;（769）両方のスカラー値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジを&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;イニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジを&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;イニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジを&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;イニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, do not use implicit bridging when calling an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、暗黙的ブリッジを&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;イニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, negating a signed, fixed-width integer type’s minimum results in a value that cannot be represented.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、符号付きの、固定長整数型の最小値を負にすることは、表現できない値という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, passing NaN as &lt;c3&gt;other&lt;/c3&gt; always results in &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、NaNを&lt;c3&gt;other&lt;/c3&gt;として渡すことは常に&lt;c4&gt;nil&lt;/c4&gt;の結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, pointers and class instances all have the same contiguous memory footprint, regardless of the size of the referenced data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、ポインタおよびクラスインスタンスは、すべて同じ隣接メモリフットプリントを持ちます、参照されたデータの大きさに関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the names &lt;c2&gt;"Alicia"&lt;/c2&gt;, &lt;c3&gt;"Chris"&lt;/c3&gt;, and &lt;c4&gt;"Diana"&lt;/c4&gt; are removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個別的には、名前&lt;c2&gt;"Alicia"&lt;/c2&gt;、&lt;c3&gt;"Chris"&lt;/c3&gt;、そして&lt;c4&gt;"Diana"&lt;/c4&gt;は、削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the names &lt;c2&gt;"Bethany"&lt;/c2&gt; and &lt;c3&gt;"Eric"&lt;/c3&gt; are removed from &lt;c4&gt;employees&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個別的には、&lt;c2&gt;"Bethany"&lt;/c2&gt;と&lt;c3&gt;"Eric"&lt;/c3&gt;が&lt;c4&gt;employees&lt;/c4&gt;から削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the names &lt;c6&gt;"Alicia"&lt;/c6&gt;, &lt;c7&gt;"Chris"&lt;/c7&gt;, and &lt;c8&gt;"Diana"&lt;/c8&gt; are removed from &lt;c9&gt;employees&lt;/c9&gt; while the names &lt;c10&gt;"Forlani"&lt;/c10&gt; and &lt;c11&gt;"Greta"&lt;/c11&gt; are added.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個別的には、名前&lt;c6&gt;"Alicia"&lt;/c6&gt;、&lt;c7&gt;"Chris"&lt;/c7&gt;、そして&lt;c8&gt;"Diana"&lt;/c8&gt;は、&lt;c9&gt;employees&lt;/c9&gt;から削除される一方で名前&lt;c10&gt;"Forlani"&lt;/c10&gt;と&lt;c11&gt;"Greta"&lt;/c11&gt;は加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the names &lt;c6&gt;"Bethany"&lt;/c6&gt; and &lt;c7&gt;"Eric"&lt;/c7&gt; are removed from &lt;c8&gt;employees&lt;/c8&gt; while the name &lt;c9&gt;"Forlani"&lt;/c9&gt; is added.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個別的には、名前&lt;c6&gt;"Bethany"&lt;/c6&gt;と&lt;c7&gt;"Eric"&lt;/c7&gt;は&lt;c8&gt;employees&lt;/c8&gt;から削除される一方、名前&lt;c9&gt;"Forlani"&lt;/c9&gt;は加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the names &lt;c9&gt;"Bethany"&lt;/c9&gt; and &lt;c10&gt;"Eric"&lt;/c10&gt; do not appear in &lt;c11&gt;either&lt;w12&gt;Neighbors&lt;w13&gt;Or&lt;w14&gt;Employees&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個別的には、名前&lt;c9&gt;"Bethany"&lt;/c9&gt;と&lt;c10&gt;"Eric"&lt;/c10&gt;は、&lt;c11&gt;either&lt;w12&gt;Neighbors&lt;w13&gt;Or&lt;w14&gt;Employees&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;の中に現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, this discussion mentions &lt;a1&gt;extended grapheme clusters&lt;/a1&gt;, &lt;a2&gt;Unicode scalar values&lt;/a2&gt;, and &lt;a3&gt;canonical equivalence&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>とりわけ、この解説は&lt;a1&gt;拡張書記素クラスタ&lt;/a1&gt;、&lt;a2&gt;ユニコードスカラー値&lt;/a2&gt;、そして&lt;a3&gt;正準等価&lt;/a3&gt;について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, to find the value matching a key, you must search through every element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、あるキーに合った値を見つけるには、あなたはコレクションのすべての要素を通して検索しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In simple cases, you can use &lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; as the interpolation type for types that conform to the &lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;String&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単純な場合には、あなたは&lt;c0&gt;Default&lt;w1&gt;String&lt;w2&gt;Interpolation&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を補間型として&lt;c3&gt;Expressible&lt;w4&gt;By&lt;w5&gt;String&lt;w6&gt;Literal&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠する型に対して使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some cases, &lt;c12&gt;old&lt;w13&gt;Member&lt;/w13&gt;&lt;/c12&gt; may be distinguishable from &lt;c14&gt;new&lt;w15&gt;Member&lt;/w15&gt;&lt;/c14&gt; by identity comparison or some other means.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの場合には、&lt;c12&gt;old&lt;w13&gt;Member&lt;/w13&gt;&lt;/c12&gt;は同一性比較または何らかの他の意味で&lt;c14&gt;new&lt;w15&gt;Member&lt;/w15&gt;&lt;/c14&gt;から区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some cases, a returned element may be distinguishable from &lt;c3&gt;new&lt;w4&gt;Member&lt;/w4&gt;&lt;/c3&gt; by identity comparison or some other means.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの場合には、ある返される要素は、同一性比較または何らかの他の意味で&lt;c3&gt;new&lt;w4&gt;Member&lt;/w4&gt;&lt;/c3&gt;から区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some cases, the returned element may be distinguishable from &lt;c3&gt;new&lt;w4&gt;Member&lt;/w4&gt;&lt;/c3&gt; by identity comparison or some other means.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの場合には、返される要素は、同一性比較または何らかの他の意味で&lt;c3&gt;new&lt;w4&gt;Member&lt;/w4&gt;&lt;/c3&gt;から区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In synchronous APIs, the result of calling the closure will be available immediately after you pass the closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期APIでは、クロージャ呼び出しの結果は、あなたがクロージャを渡した直後に利用可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, a string’s &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; view contains more elements than the string itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その場合には、文字列のもつ&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;ビューは、その文字列それ自体より多くの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, the method returns &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その場合には、このメソッドは&lt;c3&gt;nil&lt;/c3&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the case of &lt;c4&gt;second&lt;w5&gt;Code&lt;w6&gt;Unit&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, that character is still the flag itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;second&lt;w5&gt;Code&lt;w6&gt;Unit&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;の場合では、その文字は依然として旗それ自体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the case of the &lt;c0&gt;Directions&lt;/c0&gt; option set, an instance can contain zero, one, or more of the four defined directions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Directions&lt;/c0&gt;オプションセットの場合では、あるインスタンスは４つ定義された方向のうちゼロ、１つ、またはそれ以上を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the encoded representation of a Unicode scalar value, each UTF-8 code unit after the first is called a &lt;e0&gt;continuation byte&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるユニコードスカラー値の符号化された表現において、最初のものの後の各UTF-8コード単位は、&lt;e0&gt;継続バイト&lt;/e0&gt;と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, &lt;c0&gt;more&lt;w1&gt;Numbers&lt;/w1&gt;&lt;/c0&gt; has the same type as &lt;c2&gt;numbers&lt;/c2&gt;, which is &lt;c3&gt;[Int]&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の例において、&lt;c0&gt;more&lt;w1&gt;Numbers&lt;/w1&gt;&lt;/c0&gt;は&lt;c2&gt;numbers&lt;/c2&gt;と同じ型を持ちます、それは&lt;c3&gt;[Int]&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example below, changing the value of the &lt;c0&gt;is&lt;w1&gt;Alive&lt;/w1&gt;&lt;/c0&gt; computed property on an instance of the &lt;c2&gt;Schroedingers&lt;w3&gt;Cat&lt;/w3&gt;&lt;/c2&gt; structure also changes the value of the instance’s &lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt; computed property:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例において、&lt;c0&gt;is&lt;w1&gt;Alive&lt;/w1&gt;&lt;/c0&gt;計算プロパティの値を&lt;c2&gt;Schroedingers&lt;w3&gt;Cat&lt;/w3&gt;&lt;/c2&gt;構造体のインスタンス上で変更することは、またそのインスタンスの&lt;c4&gt;is&lt;w5&gt;Dead&lt;/w5&gt;&lt;/c4&gt;計算プロパティの値も変更します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example, because the &lt;c0&gt;express&lt;/c0&gt; static property is assigned an array literal with the &lt;c1&gt;next&lt;w2&gt;Day&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;second&lt;w4&gt;Day&lt;/w4&gt;&lt;/c3&gt; options, it will contain those two elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例において、&lt;c0&gt;express&lt;/c0&gt;静的プロパティは&lt;c1&gt;next&lt;w2&gt;Day&lt;/w2&gt;&lt;/c1&gt;と&lt;c3&gt;second&lt;w4&gt;Day&lt;/w4&gt;&lt;/c3&gt;オプションを持つ配列リテラルを割り当てられるので、それはそれら２つの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, &lt;c1&gt;key&lt;w2&gt;Path1&lt;/w2&gt;&lt;/c1&gt; and &lt;c3&gt;key&lt;w4&gt;Path2&lt;/w4&gt;&lt;/c3&gt; are equivalent:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;key&lt;w2&gt;Path1&lt;/w2&gt;&lt;/c1&gt;と&lt;c3&gt;key&lt;w4&gt;Path2&lt;/w4&gt;&lt;/c3&gt;は同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, &lt;c2&gt;ptr&lt;/c2&gt; is a pointer to memory initialized with a value of &lt;c3&gt;23&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c2&gt;ptr&lt;/c2&gt;は&lt;c3&gt;23&lt;/c3&gt;の値で初期化されるメモリに対するポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, &lt;c4&gt;y&lt;/c4&gt; is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c4&gt;y&lt;/c4&gt;はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, a new element is inserted into &lt;c2&gt;class&lt;w3&gt;Days&lt;/w3&gt;&lt;/c2&gt;, a set of days of the week.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、新しい要素が、一揃いの曜日&lt;c2&gt;class&lt;w3&gt;Days&lt;/w3&gt;&lt;/c2&gt;へ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、数からなる配列は、30より大きな要素に合致するという述部によって仕切られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, because the extension applies only to &lt;c3&gt;Sequence&lt;/c3&gt;, side-effects such as the accumulation of &lt;c4&gt;result&lt;/c4&gt; are never unexpectedly dropped or deferred:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、拡張は&lt;c3&gt;Sequence&lt;/c3&gt;に対してのみ適用されることから、副作用それら、たとえば&lt;c4&gt;result&lt;/c4&gt;の蓄積などは、決して不意に投下されたり延期されたりしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;.priority&lt;/c0&gt; shipping option is removed from the &lt;c1&gt;options&lt;/c1&gt; option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;.priority&lt;/c0&gt;出荷オプションは、&lt;c1&gt;options&lt;/c1&gt;オプションセットから削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;.second&lt;w1&gt;Day&lt;/w1&gt;&lt;/c0&gt; shipping option is added to the &lt;c2&gt;free&lt;w3&gt;Options&lt;/w3&gt;&lt;/c2&gt; option set if &lt;c4&gt;purchase&lt;w5&gt;Price&lt;/w5&gt;&lt;/c4&gt; is greater than 50.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;.second&lt;w1&gt;Day&lt;/w1&gt;&lt;/c0&gt;出荷オプションは、&lt;c2&gt;purchase&lt;w3&gt;Price&lt;/w3&gt;&lt;/c2&gt;が50.0より大きいならば、&lt;c4&gt;free&lt;w5&gt;Options&lt;/w5&gt;&lt;/c4&gt;オプションセットを加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;ascii&lt;w1&gt;Table&lt;/w1&gt;&lt;/c0&gt; sequence is made by zipping together the characters in the &lt;c2&gt;alphabet&lt;/c2&gt; string with a partial range starting at 65, the ASCII value of the capital letter A. Iterating over two zipped sequences continues only as long as the shorter of the two sequences, so the iteration stops at the end of &lt;c3&gt;alphabet&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;ascii&lt;w1&gt;Table&lt;/w1&gt;&lt;/c0&gt;シーケンスは、&lt;c2&gt;alphabet&lt;/c2&gt;文字列中の文字を65で始まるある部分範囲と一緒に閉じ合わせることによって作られます。２つの閉じ合わされたシーケンスそれらに反復することは、より短いほうと同じだけ続きます、それでこの反復は&lt;c3&gt;alphabet&lt;/c3&gt;の終わりで停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;attendees&lt;w1&gt;And&lt;w2&gt;Visitors&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; set is made up of the elements of the &lt;c3&gt;attendees&lt;/c3&gt; and &lt;c4&gt;visitors&lt;/c4&gt; sets:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;attendees&lt;w1&gt;And&lt;w2&gt;Visitors&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;集合は&lt;c3&gt;attendees&lt;/c3&gt;と&lt;c4&gt;visitors&lt;/c4&gt;集合の要素から作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;attendees&lt;w1&gt;And&lt;w2&gt;Visitors&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; set is made up of the elements of the &lt;c3&gt;attendees&lt;/c3&gt; set and the &lt;c4&gt;visitors&lt;/c4&gt; array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;attendees&lt;w1&gt;And&lt;w2&gt;Visitors&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;集合は&lt;c3&gt;attendees&lt;/c3&gt;集合と&lt;c4&gt;visitors&lt;/c4&gt;配列の要素から作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;both&lt;w1&gt;Neighbors&lt;w2&gt;And&lt;w3&gt;Employees&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; set is made up of the elements that are in &lt;e4&gt;both&lt;/e4&gt; the &lt;c5&gt;employees&lt;/c5&gt; and &lt;c6&gt;neighbors&lt;/c6&gt; sets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;both&lt;w1&gt;Neighbors&lt;w2&gt;And&lt;w3&gt;Employees&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;集合は&lt;c5&gt;employees&lt;/c5&gt;と&lt;c6&gt;neighbors&lt;/c6&gt;集合の&lt;e4&gt;両方&lt;/e4&gt;にある要素から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;either&lt;w1&gt;Neighbors&lt;w2&gt;Or&lt;w3&gt;Employees&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; set is made up of the elements of the &lt;c4&gt;employees&lt;/c4&gt; and &lt;c5&gt;neighbors&lt;/c5&gt; sets that are not in both &lt;c6&gt;employees&lt;/c6&gt; &lt;e7&gt;and&lt;/e7&gt; &lt;c8&gt;neighbors&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;either&lt;w1&gt;Neighbors&lt;w2&gt;Or&lt;w3&gt;Employees&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;集合は&lt;c4&gt;employees&lt;/c4&gt;と&lt;c5&gt;neighbors&lt;/c5&gt;集合の要素で、&lt;c6&gt;employees&lt;/c6&gt;&lt;e7&gt;および&lt;/e7&gt;&lt;c8&gt;neighbors&lt;/c8&gt;の両方の中にはないものから作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;employees&lt;/c0&gt; set is disjoint with the &lt;c1&gt;visitors&lt;/c1&gt; set because no name appears in both sets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;employees&lt;/c0&gt;集合は&lt;c1&gt;visitors&lt;/c1&gt;集合と交わりを持ちません、両方に現れる名前がないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;employees&lt;/c0&gt; set is disjoint with the elements of the &lt;c1&gt;visitors&lt;/c1&gt; array because no name appears in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;employees&lt;/c0&gt;集合は&lt;c1&gt;visitors&lt;/c1&gt;配列の要素と交わりを持ちません、両方に現れる名前がないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;non&lt;w1&gt;Neighbors&lt;/w1&gt;&lt;/c0&gt; set is made up of the elements of the &lt;c2&gt;employees&lt;/c2&gt; set that are not elements of &lt;c3&gt;neighbors&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;non&lt;w1&gt;Neighbors&lt;/w1&gt;&lt;/c0&gt;集合は&lt;c2&gt;employees&lt;/c2&gt;集合の要素で&lt;c3&gt;neighbors&lt;/c3&gt;の要素でないものから作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the &lt;c0&gt;number&lt;w1&gt;To&lt;w2&gt;Match&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; constant is wrapped as an optional before comparing to the optional &lt;c3&gt;number&lt;w4&gt;From&lt;w5&gt;String&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>続く例において、&lt;c0&gt;number&lt;w1&gt;To&lt;w2&gt;Match&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;定数は、オプショナル&lt;c3&gt;number&lt;w4&gt;From&lt;w5&gt;String&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;との比較の前にオプショナル値としてラップされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例では、そのクロージャは、あるHTTP応答を記述するあつらえ列挙の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant &lt;c0&gt;y&lt;/c0&gt; is successfully created from &lt;c1&gt;x&lt;/c1&gt;, an &lt;c2&gt;Int&lt;/c2&gt; instance with a value of &lt;c3&gt;100&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、定数&lt;c0&gt;y&lt;/c0&gt;は、&lt;c1&gt;Int&lt;/c1&gt;インスタンスで&lt;c2&gt;100&lt;/c2&gt;の値を持つ&lt;c3&gt;x&lt;/c3&gt;からうまく作成されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant &lt;c2&gt;x&lt;/c2&gt; is successfully created from a value of &lt;c3&gt;100&lt;/c3&gt;, while the attempt to initialize the constant &lt;c4&gt;y&lt;/c4&gt; from &lt;c5&gt;1&lt;w6&gt;_000&lt;/w6&gt;&lt;/c5&gt; fails because the &lt;c7&gt;Int8&lt;/c7&gt; type can represent &lt;c8&gt;127&lt;/c8&gt; at maximum:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、定数&lt;c2&gt;x&lt;/c2&gt;は&lt;c3&gt;100&lt;/c3&gt;の値から首尾よく作り上げられます、一方で定数&lt;c4&gt;y&lt;/c4&gt;を&lt;c5&gt;1&lt;w6&gt;_000&lt;/w6&gt;&lt;/c5&gt;から初期化する試みは失敗します、なぜなら&lt;c7&gt;Int8&lt;/c7&gt;型は最大で&lt;c8&gt;127&lt;/c8&gt;を表現可能だからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the constant &lt;c2&gt;x&lt;/c2&gt; is successfully created from a value of &lt;c3&gt;21&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;, while the attempt to initialize the constant &lt;c5&gt;y&lt;/c5&gt; from &lt;c6&gt;21&lt;w7&gt;.5&lt;/w7&gt;&lt;/c6&gt; fails:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>続く例において、定数&lt;c2&gt;x&lt;/c2&gt;は&lt;c3&gt;21&lt;w4&gt;.0&lt;/w4&gt;&lt;/c3&gt;の値から首尾よく作成されます、一方で定数&lt;c5&gt;y&lt;/c5&gt;を&lt;c6&gt;21&lt;w7&gt;.5&lt;/w7&gt;&lt;/c6&gt;から初期化する試みは失敗します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the difference of &lt;c1&gt;10&lt;/c1&gt; and &lt;c2&gt;21&lt;/c2&gt; is less than zero, the minimum representable &lt;c3&gt;UInt&lt;/c3&gt; value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;10&lt;/c1&gt;と&lt;c2&gt;21&lt;/c2&gt;の差はゼロ、最小限表現可能な&lt;c3&gt;UInt&lt;/c3&gt;値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the difference of &lt;c1&gt;10&lt;/c1&gt; and &lt;c2&gt;21&lt;/c2&gt; is less than zero, the minimum representable &lt;c3&gt;UInt&lt;/c3&gt; value, so the result is the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;10&lt;/c1&gt;と&lt;c2&gt;21&lt;/c2&gt;の差はゼロ、最小限表現可能な&lt;c3&gt;UInt&lt;/c3&gt;値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the elements of the &lt;c0&gt;employees&lt;/c0&gt; set that are also elements of the &lt;c1&gt;neighbors&lt;/c1&gt; array are removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;employees&lt;/c0&gt;集合の要素でまた&lt;c1&gt;neighbors&lt;/c1&gt;配列の要素でもあるものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the elements of the &lt;c0&gt;employees&lt;/c0&gt; set that are also members of &lt;c1&gt;neighbors&lt;/c1&gt; are removed from &lt;c2&gt;employees&lt;/c2&gt;, while the elements of &lt;c3&gt;neighbors&lt;/c3&gt; that are not members of &lt;c4&gt;employees&lt;/c4&gt; are added to &lt;c5&gt;employees&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;employees&lt;/c0&gt;集合の要素でまた&lt;c1&gt;neighbors&lt;/c1&gt;のメンバであるものは&lt;c2&gt;employees&lt;/c2&gt;から削除されます、一方で&lt;c3&gt;neighbors&lt;/c3&gt;の要素で&lt;c4&gt;employees&lt;/c4&gt;の要素でないものは&lt;c5&gt;employees&lt;/c5&gt;に加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the elements of the &lt;c0&gt;employees&lt;/c0&gt; set that are also members of the &lt;c1&gt;neighbors&lt;/c1&gt; set are removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;employees&lt;/c0&gt;集合の要素でまた&lt;c1&gt;neighbors&lt;/c1&gt;集合のメンバでもあるものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the elements of the &lt;c0&gt;employees&lt;/c0&gt; set that are not also members of the &lt;c1&gt;neighbors&lt;/c1&gt; set are removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;employees&lt;/c0&gt;集合の要素でまた&lt;c1&gt;neighbors&lt;/c1&gt;集合のメンバではないものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the elements of the &lt;c0&gt;visitors&lt;/c0&gt; set are added to the &lt;c1&gt;attendees&lt;/c1&gt; set:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;visitors&lt;/c0&gt;集合の要素は&lt;c1&gt;attendees&lt;/c1&gt;集合に加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the predicate provides an ordering for an array of a custom &lt;c0&gt;HTTPResponse&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例では、その述部はあつらえの&lt;c0&gt;HTTPResponse&lt;/c0&gt;型の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the product of &lt;c1&gt;10&lt;/c1&gt; and &lt;c2&gt;50&lt;/c2&gt; is greater than the maximum representable &lt;c3&gt;Int8&lt;/c3&gt; value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;10&lt;/c1&gt;と&lt;c2&gt;50&lt;/c2&gt;の積は、最大限表現可能な&lt;c3&gt;Int8&lt;/c3&gt;値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of &lt;c0&gt;21 * 21&lt;/c0&gt; is greater than the maximum representable &lt;c1&gt;Int8&lt;/c1&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;21 * 21&lt;/c0&gt;の結果は、最大限表現可能な&lt;c1&gt;Int8&lt;/c1&gt;値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of &lt;c0&gt;21 + 120&lt;/c0&gt; is greater than the maximum representable &lt;c1&gt;Int8&lt;/c1&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;21 + 120&lt;/c0&gt;の結果は、最大限表現可能な&lt;c1&gt;Int8&lt;/c1&gt;値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the result of &lt;c0&gt;21 - 50&lt;/c0&gt; is less than zero, the minimum representable &lt;c1&gt;UInt8&lt;/c1&gt; value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c0&gt;21 - 50&lt;/c0&gt;の結果は、最大限表現可能な&lt;c1&gt;UInt8&lt;/c1&gt;値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the sum of &lt;c1&gt;100&lt;/c1&gt; and &lt;c2&gt;121&lt;/c2&gt; is greater than the maximum representable &lt;c3&gt;Int8&lt;/c3&gt; value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例において、&lt;c1&gt;100&lt;/c1&gt;と&lt;c2&gt;121&lt;/c2&gt;の合計は、最大限表現可能な&lt;c3&gt;Int8&lt;/c3&gt;値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, &lt;c0&gt;y&lt;/c0&gt; has a value of &lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;, which is encoded as &lt;c3&gt;1&lt;w4&gt;.34375 * 2 ** 4&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例において、&lt;c0&gt;y&lt;/c0&gt;は&lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;の値を持ちます、それは&lt;c3&gt;1&lt;w4&gt;.34375 * 2 ** 4&lt;/w4&gt;&lt;/c3&gt;のようにエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, an integer literal is compared with the optional integer &lt;c0&gt;number&lt;w1&gt;From&lt;w2&gt;String&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例では、整数リテラルがオプショナル整数&lt;c0&gt;number&lt;w1&gt;From&lt;w2&gt;String&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, the &lt;c0&gt;.express&lt;/c0&gt; element is passed to &lt;c1&gt;remove(_:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例では、&lt;c0&gt;.express&lt;/c0&gt;要素が&lt;c1&gt;remove(_:)&lt;/c1&gt;に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the standard library, you can use the &lt;c2&gt;Set&lt;/c2&gt; type with elements of any hashable type, or you can easily create bit masks with &lt;c3&gt;Set&lt;w4&gt;Algebra&lt;/w4&gt;&lt;/c3&gt; conformance using the &lt;c5&gt;Option&lt;w6&gt;Set&lt;/w6&gt;&lt;/c5&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリにおいて、あなたは&lt;c2&gt;Set&lt;/c2&gt;型を何らかのハッシュ型の要素で使うことができます、またはあなたは&lt;c3&gt;Set&lt;w4&gt;Algebra&lt;/w4&gt;&lt;/c3&gt;準拠を持つビットマスクを&lt;c5&gt;Option&lt;w6&gt;Set&lt;/w6&gt;&lt;/c5&gt;プロトコルを使って簡単に作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the umbrella header, import every Objective-C header you want to expose to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アンブレラヘッダにおいて、あなたが望むあらゆるObjective-CヘッダをインポートすることでSwiftに露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In these cases, you need to store the whole result rather than just the success value or that the API call failed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの場合において、あなたは全体の結果を取っておく必要があります、成功値またはAPI呼び出しが失敗したことだけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In these scenarios, use the &lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt; macro instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの予想される事態には、&lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt;マクロを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, see the documentation of &lt;c1&gt;Collection&lt;w2&gt;.underestimated&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合には、&lt;c1&gt;Collection&lt;w2&gt;.underestimated&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, the &lt;c0&gt;number&lt;w1&gt;Of&lt;w2&gt;Cookies&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; constant has the default type for an integer literal, &lt;c3&gt;Int&lt;/c3&gt;, as designated by the &lt;c4&gt;Integer&lt;w5&gt;Literal&lt;w6&gt;Type&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; type alias.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合では、&lt;c0&gt;number&lt;w1&gt;Of&lt;w2&gt;Cookies&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;定数は整数リテラルに対する省略時型、&lt;c3&gt;Int&lt;/c3&gt;を持ちます、&lt;c4&gt;Integer&lt;w5&gt;Literal&lt;w6&gt;Type&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;型エイリアスによって設計されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合、あるシーケンスが消耗可能になっているそして反復を再開することになるか、またはあるシーケンスがコレクションであるそして最初の要素から反復を再度着手することになるか、あなたはどちらか決めてかかることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, 100 bytes of raw memory are allocated for the pointer &lt;c0&gt;bytes&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;, and then the first four bytes are bound to the &lt;c2&gt;Int8&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、100バイトの生のメモリがポインタ&lt;c0&gt;bytes&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;に対して割り当てられて、それから最初の４バイトが&lt;c2&gt;Int8&lt;/c2&gt;型に束縛されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;filter(_:)&lt;/c0&gt; is used to include only names shorter than five characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;filter(_:)&lt;/c0&gt;は５つの文字より短い名前のみ含めるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;map&lt;/c0&gt; is used first to convert the names in the array to lowercase strings and then to count their characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、&lt;c0&gt;map&lt;/c0&gt;は最初に配列中の名前を小文字文字列に変換するために、それからそれらの文字を数えるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;x&lt;/c0&gt; has a value of &lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;, which is stored as &lt;c3&gt;1&lt;w4&gt;.34375 * 2**4&lt;/w4&gt;&lt;/c3&gt;, where &lt;c5&gt;**&lt;/c5&gt; is exponentiation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;は&lt;c1&gt;21&lt;w2&gt;.5&lt;/w2&gt;&lt;/c1&gt;の値を持ちます、それは&lt;c3&gt;1&lt;w4&gt;.34375 * 2**4&lt;/w4&gt;&lt;/c3&gt;として格納されます、ここで&lt;c5&gt;**&lt;/c5&gt;は冪です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;x&lt;/c0&gt; is initialized as an &lt;c1&gt;Int8&lt;/c1&gt; instance by clamping &lt;c2&gt;500&lt;/c2&gt; to the range &lt;c3&gt;-128...127&lt;/c3&gt;, and &lt;c4&gt;y&lt;/c4&gt; is initialized as a &lt;c5&gt;UInt&lt;/c5&gt; instance by clamping &lt;c6&gt;-500&lt;/c6&gt; to the range &lt;c7&gt;0...UInt&lt;w8&gt;.max&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;は&lt;c1&gt;Int8&lt;/c1&gt;インスタンスとして、&lt;c2&gt;500&lt;/c2&gt;を範囲&lt;c3&gt;-128...127&lt;/c3&gt;に制限すること（クランピング）によって初期化されます、そして&lt;c4&gt;y&lt;/c4&gt;は&lt;c5&gt;UInt&lt;/c5&gt;インスタンスとして、&lt;c6&gt;-500&lt;/c6&gt;を範囲&lt;c7&gt;0...UInt&lt;w8&gt;.max&lt;/w8&gt;&lt;/c7&gt;に制限することによって初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, a new element is inserted into &lt;c2&gt;class&lt;w3&gt;Days&lt;/w3&gt;&lt;/c2&gt;, a set of days of the week.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、新しい要素が、一揃いの曜日&lt;c2&gt;class&lt;w3&gt;Days&lt;/w3&gt;&lt;/c2&gt;へ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an Objective-C class that provides a convenience initializer that takes variadic arguments for key-value pairs suggests using a dictionary literal instead:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、可変長引数をキー値ペアに対して取る便宜イニシャライザを提供するあるObjective-Cクラスは、代わりに辞書リテラルを使うことを提案します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、３つの範囲からなる配列は平坦化されます、それで各範囲の要素は順に反復されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an existing element is inserted into &lt;c4&gt;class&lt;w5&gt;Days&lt;/w5&gt;&lt;/c4&gt;, a set of days of the week.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、既存の要素が、一揃いの曜日&lt;c4&gt;class&lt;w5&gt;Days&lt;/w5&gt;&lt;/c4&gt;へ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;compact&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt; with a transformation that returns an optional &lt;c3&gt;Int&lt;/c3&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;/c0&gt;と&lt;c1&gt;compact&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt;を、オプショナル&lt;c3&gt;Int&lt;/c3&gt;値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt; with a transformation that returns an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;/c0&gt;と&lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt;をある配列を返す変換とともに使うことの結果における違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, note the difference in the result of using &lt;c0&gt;map&lt;/c0&gt; and &lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt; with a transformation that returns an optional &lt;c3&gt;Int&lt;/c3&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;map&lt;/c0&gt;と&lt;c1&gt;flat&lt;w2&gt;Map&lt;/w2&gt;&lt;/c1&gt;を、オプショナル&lt;c3&gt;Int&lt;/c3&gt;値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the &lt;c0&gt;CFArray&lt;w1&gt;Call&lt;w2&gt;Backs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; initializer uses &lt;c3&gt;nil&lt;/c3&gt; values as arguments for the &lt;c4&gt;retain&lt;/c4&gt; and &lt;c5&gt;release&lt;/c5&gt; parameters, the &lt;c6&gt;custom&lt;w7&gt;Copy&lt;w8&gt;Description(_:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; function as the argument for the &lt;c9&gt;custom&lt;w10&gt;Copy&lt;w11&gt;Description&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt; parameter, and a closure literal as the argument for the &lt;c12&gt;equal&lt;/c12&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;CFArray&lt;w1&gt;Call&lt;w2&gt;Backs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;イニシャライザは&lt;c3&gt;nil&lt;/c3&gt;値を&lt;c4&gt;retain&lt;/c4&gt;と&lt;c5&gt;release&lt;/c5&gt;パラメーターに対する引数として、&lt;c6&gt;custom&lt;w7&gt;Copy&lt;w8&gt;Description(_:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;関数を&lt;c9&gt;custom&lt;w10&gt;Copy&lt;w11&gt;Description&lt;/w11&gt;&lt;/w10&gt;&lt;/c9&gt;パラメーターに対する引数として、そしてクロージャリテラルを&lt;c12&gt;equal&lt;/c12&gt;パラメーターに対する引数として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;i&lt;/c0&gt; variable calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;i&lt;/c0&gt;定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;letter&lt;w1&gt;K&lt;/w1&gt;&lt;/c0&gt; constant is handled by this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;letter&lt;w1&gt;K&lt;/w1&gt;&lt;/c0&gt;定数への代入は、このイニシャライザによって舞台裏で取り扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;x&lt;/c0&gt; constant calls this floating-point literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;定数への代入は、この浮動小数点リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the assignment to the &lt;c0&gt;x&lt;/c0&gt; constant calls this integer literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、&lt;c0&gt;x&lt;/c0&gt;定数への代入は、この整数リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the expression &lt;c0&gt;single&lt;w1&gt;Digits&lt;w2&gt;.drop&lt;w3&gt;First(5))&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is equivalent to calling this initializer with &lt;c4&gt;single&lt;w5&gt;Digits&lt;/w5&gt;&lt;/c4&gt; and a range covering the last five items of &lt;c6&gt;single&lt;w7&gt;Digits&lt;w8&gt;.indices&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例において、式&lt;c0&gt;single&lt;w1&gt;Digits&lt;w2&gt;.drop&lt;w3&gt;First(5))&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、このイニシャライザを&lt;c4&gt;single&lt;w5&gt;Digits&lt;/w5&gt;&lt;/c4&gt;および&lt;c6&gt;single&lt;w7&gt;Digits&lt;w8&gt;.indices&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;の終わり５項目を対象とする範囲とともに呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, three elements in the middle of an array of integers are replaced by the five elements of a &lt;c0&gt;Repeated&lt;Int&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例では、整数からなる配列の真ん中の３つの要素が、&lt;c0&gt;Repeated&lt;Int&gt;&lt;/c0&gt;インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this model, each state is represented by a case with a matching name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このモデルにおいて、各状態は合致する名前を持つケース節によって表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this model, the app defines two variables: an optional &lt;c0&gt;user&lt;/c0&gt; that stores user information, and a Boolean value named &lt;c1&gt;session&lt;w2&gt;Expired&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このモデルでは、アプリは２つの変数を定義します：ユーザ情報を格納するオプショナルの&lt;c0&gt;user&lt;/c0&gt;、そして&lt;c1&gt;session&lt;w2&gt;Expired&lt;/w2&gt;&lt;/c1&gt;と名前をつけられるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In your &lt;c0&gt;hash(into:)&lt;/c0&gt; implementation, call &lt;c1&gt;combine(_:)&lt;/c1&gt; on the provided &lt;c2&gt;Hasher&lt;/c2&gt; instance with the essential components of your type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの&lt;c0&gt;hash(into:)&lt;/c0&gt;実装において、&lt;c1&gt;combine(_:)&lt;/c1&gt;をその提供された&lt;c2&gt;Hasher&lt;/c2&gt;インスタンス上で、あなたの型の本質的な構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In your Objective-C bridging header, import every Objective-C header you want to expose to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cブリッジヘッダにおいて、あなたが露出したいあらゆるObjective-CヘッダをSwiftにインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Include Swift Classes in Objective-C Headers Using Forward Declarations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftクラスをObjective-Cヘッダの中に前方宣言を使ってインクルードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>字下げは、複数行文字列リテラルの各行から剥ぎ取られて、閉じ区切り子の字下げに合わせられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Index and iterator types for other sequence and collection types in the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの中の他のシーケンスとコレクション型のためのインデックスとイテレータ型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indicates that a precondition was violated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは前提条件が破られたことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indicates that an internal sanity check failed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある内部的な正常性確認が失敗したことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indices and Iterators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスとイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indices of a slice can be used interchangeably with indices of the base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスのインデックスは、基盤コレクションのインデックスと交換可能に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Individual Unicode Scalar Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>個々のユニコードスカラー値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inequality is the inverse of equality.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不等性は、同等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infinite values with the same sign are equal to each other.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じ符号を持つ無限大値は互いに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infinity</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infinity compares greater than all finite numbers and equal to other infinite values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限大は、すべての有限の数より大きい、そして他の無限大の値と等しいと比較されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Infrequently Used Functionality</seg>
      </tuv>
      <tuv lang="ja">
        <seg>滅多に使われない機能性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inherited By</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承される先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inherits From</seg>
      </tuv>
      <tuv lang="ja">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization with Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラルを使った初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization, assignment, and deinitialization can be performed using &lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化、代入、そしてデイニシャライズは、&lt;c5&gt;Unsafe&lt;w6&gt;Mutable&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;メソッドを使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialized Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化済みメモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializer methods are imported by Swift with double underscores (&lt;c0&gt;__&lt;/c0&gt;) prepended to their first argument labels.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザメソッドそれらは、Swiftによって、それらの最初の引数ラベルの前に付けられる二重アンダースコア（&lt;c0&gt;__&lt;/c0&gt;）を使ってインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes every element in this buffer’s memory to a copy of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリの中の全ての要素を与えられた値のコピーへと初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the buffer’s memory with the given elements, binding the initialized memory to the elements’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリを与えられた要素で初期化します、初期化されたメモリを要素のもつ型に束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the buffer’s memory with the given elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたいくらかの要素を使ってバッファの持つメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this buffer with the given value, binds the memory to the value’s type, and returns a typed buffer of the initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリを与えられた値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリの型付バッファを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the given value, binds the memory to the value’s type, and returns a typed pointer to the initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられた値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer, binds the memory to the values’ type, and returns a typed pointer to the initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まる値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer, binds the memory to the values’ type, deinitializes the source memory, and returns a typed pointer to the newly initialized memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まる値で初期化して、そのメモリを値の型に束縛し、元となるメモリをデイニシャライズして、そして新しく初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを、与えられたポインタで始まるいくらかの値で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes this pointer’s memory with a single instance of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつメモリを、与えられた値の単一のインスタンスで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initializes this pointer’s memory with the specified number of consecutive copies of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつメモリを、指定された数の与えられた値の連続コピーで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Input and Output</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入力と出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserting Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字の挿入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a collection of characters at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列からなるコレクションを指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a new character at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい文字を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts a new element into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある新しい要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the elements of a sequence into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスに属する複数の要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the elements of another set into this option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別のセットの要素をこのオブションセットへと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the elements of the given sequence into the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの要素を集合に挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the given element in the set if it is not already present.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが既に存在するのでないならば、与えられた要素を集合へと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the given element into the set unconditionally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素を集合へと無条件に挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inserts the given element into the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素をセットへと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inside unit test targets, you can access imported internal declarations as if they were public by prepending &lt;c8&gt;@testable&lt;/c8&gt; to the product module import statement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニットテスト内部で、あなたはインポートされたinternal宣言に、まるでそれらがパブリックだったかのようにアクセスすることが、製品モジュールインポート文に&lt;c8&gt;@testable&lt;/c8&gt;を前に付けることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Buffer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Range</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting an Optional</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナルを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスメソッド </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>様々なインスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instance Property</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances of &lt;c0&gt;Unfold&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt; are created with the functions &lt;c2&gt;sequence(first:&lt;w3&gt;next:)&lt;/w3&gt;&lt;/c2&gt; and &lt;c4&gt;sequence(state:&lt;w5&gt;next:)&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unfold&lt;w1&gt;Sequence&lt;/w1&gt;&lt;/c0&gt;のインスタンスは、関数&lt;c2&gt;sequence(first:&lt;w3&gt;next:)&lt;/w3&gt;&lt;/c2&gt;および&lt;c4&gt;sequence(state:&lt;w5&gt;next:)&lt;/w5&gt;&lt;/c4&gt;で作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances of the &lt;c0&gt;Static&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt; type are immutable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Static&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;型のインスタンスは、不変です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances of types that conform to the &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol can write their value to instances of any type that conforms to the &lt;c3&gt;Text&lt;w4&gt;Output&lt;w5&gt;Stream&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型のインスタンスは、それらの値を&lt;c3&gt;Text&lt;w4&gt;Output&lt;w5&gt;Stream&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠するあらゆる型のインスタンスへ書き出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instantiates an instance of the conforming type from a string representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型のインスタンスを文字列表現から初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定のUTF-8コード単位にアクセスすることだけではなく、そのインデックスは、インデックスの持つエンコードされたオフセットでの文字の位置として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, convert an instance of any type to a string by using the &lt;c0&gt;String(describing:)&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、&lt;c0&gt;String(describing:)&lt;/c0&gt;イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, convert an instance of any type to a string by using the &lt;c0&gt;String(reflecting:)&lt;/c0&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、&lt;c0&gt;String(reflecting:)&lt;/c0&gt;イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, create a new set using an array literal as its value by enclosing a comma-separated list of values in square brackets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、新しい集合を配列リテラルをそれの値として、コンマ区切りの値のリストを角カッコで囲むことによって、作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, create a slice of a collection by using the collection’s range-based subscript or by using methods that return a subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、そのコレクションのもつ範囲に基づく添え字によって、または下位シーケンスを返すメソッドを使うことによって、コレクションのスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, define your own subsequence type that takes your index invalidation requirements into account.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その代わりに、あなたのインデックス無効化要件を考慮に入れるあなた自身の下位シーケンス型を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using a floating-point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、浮動小数点リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using a string literal with interpolated expressions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、補間式いくらかを持つある文字列リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, initialize a variable or constant using an integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、整数リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use &lt;c1&gt;reduce&lt;/c1&gt; for summing operations, or &lt;c2&gt;for&lt;w3&gt;Each&lt;/w3&gt;&lt;/c2&gt; or a &lt;c4&gt;for&lt;/c4&gt;-&lt;c5&gt;in&lt;/c5&gt; loop for operations with side effects.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、&lt;c1&gt;reduce&lt;/c1&gt;を合計演算のために、また&lt;c2&gt;for&lt;w3&gt;Each&lt;/w3&gt;&lt;/c2&gt;や&lt;c4&gt;for&lt;/c4&gt;-&lt;c5&gt;in&lt;/c5&gt;ループを副作用付き演算のために、使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use an initializing method, such as &lt;c0&gt;initialize(to:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、初期化するメソッド、&lt;c0&gt;initialize(to:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt;などを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use an initializing method, such as &lt;c1&gt;initialize(to:&lt;w2&gt;count:)&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、初期化するメソッド、&lt;c1&gt;initialize(to:&lt;w2&gt;count:)&lt;/w2&gt;&lt;/c1&gt;などを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use simple assignment to create a new constant or variable equal to this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、単純な代入を使ってこの文字列と等しい新しい定数または変数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (&lt;c0&gt;\(&lt;/c0&gt;…&lt;c1&gt;)&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、文字列補間を使って、バックスラッシュ&lt;c0&gt;\(&lt;/c0&gt;…&lt;c1&gt;)&lt;/c1&gt;を前に置いた丸括弧に囲まれた値、リテラル、変数、または式を含めることで、新しい文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the &lt;a2&gt;&lt;c3&gt;Result&lt;/c3&gt;&lt;/a2&gt; enumeration to capture information about whether an asychronous call succeeds or fails, and use the associated values for the &lt;a4&gt;&lt;c5&gt;Result&lt;w6&gt;.success(_:)&lt;/w6&gt;&lt;/c5&gt;&lt;/a4&gt; and &lt;a7&gt;&lt;c8&gt;Result&lt;w9&gt;.failure(_:)&lt;/w9&gt;&lt;/c8&gt;&lt;/a7&gt; cases to carry information about the result of the call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、&lt;a2&gt;&lt;c3&gt;Result&lt;/c3&gt;&lt;/a2&gt;列挙を使うことで、非同期の呼び出しが成功するか失敗するかについての情報をキャプチャしてください、そして&lt;a4&gt;&lt;c5&gt;Result&lt;w6&gt;.success(_:)&lt;/w6&gt;&lt;/c5&gt;&lt;/a4&gt;と&lt;a7&gt;&lt;c8&gt;Result&lt;w9&gt;.failure(_:)&lt;/w9&gt;&lt;/c8&gt;&lt;/a7&gt;ケース節に対する関連値を使うことで、呼び出しの結果についての情報を運んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the &lt;c3&gt;body&lt;/c3&gt; closure’s buffer argument to access the values in memory as instances of type &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、&lt;c3&gt;body&lt;/c3&gt;クロージャの持つバッファ引数を使ってメモリ中の値に型&lt;c4&gt;T&lt;/c4&gt;のインスタンスとしてアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the &lt;c3&gt;body&lt;/c3&gt; closure’s pointer argument to access the values in memory as instances of type &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、&lt;c3&gt;body&lt;/c3&gt;クロージャのもつポインタ引数を使うことで、メモリの中の値に型&lt;c4&gt;T&lt;/c4&gt;のインスタンスとしてアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, use the value’s &lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、その値の&lt;c1&gt;is&lt;w2&gt;Na&lt;w3&gt;N&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, when you need an operation to have a specific numeric result, filter out any NaN values using the &lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうではなく、あなたがある特定の数値結果を持つ演算を必要とする場合、あらゆるNaN値を&lt;c0&gt;is&lt;w1&gt;Na&lt;w2&gt;N&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;特性を使って除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, you can perform set operations with another set, an array, or any other sequence type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それどころか、あなたは集合演算を他の集合、配列、またはあらゆる他のシーケンス型とで実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, you must know the type of value previously in memory and initialize or assign the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、あなたは前もってメモリ中の値の型を知っていて、メモリを初期化またはアサインする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead, you represent a value that could be missing as wrapped in an optional type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>代わりに、あなたは見つからないかもしれない値をオプショナル型でラップすることで表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer Operators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer Value Casting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数値のキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Interoperability makes it possible to integrate features migrated to Swift into Objective-C code with no hassle.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>相互運用性は、Swiftに移される特徴を、面倒なしでObjective-Cコードに統合することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Interpolated expressions don’t pass through this method; instead, Swift selects an overload of &lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間式はこのメソッドを通り抜けられません；代わりに、Swiftは&lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;のオーバーロードを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invoke the throwing expression inside the closure you pass to the initializer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スロー式をあなたがこのイニシャライザに渡すクロージャ内から発動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a C &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; argument derived from the given array of arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、その与えられた引数の配列から引き出されたC &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;引数で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a buffer containing the static string’s UTF-8 code unit sequence (excluding the null terminator).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを発動します、静的文字列のもつUTF-8コード単位シーケンス（null終端子を除外して）を含んでいるパッファを用います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換しているバッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a mutable buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換している可変バッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Invokes the given closure with a pointer to the given argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを、与えられた引数に対するポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It acts as an iterator by using a collection’s indices to step over each value in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、コレクションのインデックスを使ってコレクションの中の各値のすべてを渡っていくあるイテレータとしての役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also supports chaining through optional values within a chain, such as &lt;c11&gt;#key&lt;w12&gt;Path(Person&lt;w13&gt;.best&lt;w14&gt;Friend&lt;w15&gt;.name)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それはまた、連鎖内でオプショナル値を通した連鎖をサポートします、例えば&lt;c11&gt;#key&lt;w12&gt;Path(Person&lt;w13&gt;.best&lt;w14&gt;Friend&lt;w15&gt;.name)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It does not attempt to cover multiple uses of some scalars, such as the use of letters to represent Roman numerals.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、いくつかのスカラーの複数の使用を対象とすること、たとえばローマ数字を表すための複数の表音文字の使用など、を試みようとしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It does not copy the elements from the collection into separate storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、要素をそのコレクションから別個のストレージへとコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is safe to use operations that put an upper limit on the number of elements they access, such as &lt;c6&gt;prefix(_:)&lt;/c6&gt; or &lt;c7&gt;drop&lt;w8&gt;First(_:)&lt;/w8&gt;&lt;/c7&gt;, and operations that you can guarantee will terminate, such as passing a closure you know will eventually return &lt;c9&gt;true&lt;/c9&gt; to &lt;c10&gt;first(where:)&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>安全なのは、上側の限界をそれらがアクセスする要素数に置く演算、例えば&lt;c6&gt;prefix(_:)&lt;/c6&gt;または&lt;c7&gt;drop&lt;w8&gt;First(_:)&lt;/w8&gt;&lt;/c7&gt;など、そしてあなたが終わらせることができる演算、例えばあなたが結局は&lt;c9&gt;true&lt;/c9&gt;を&lt;c10&gt;first(where:)&lt;/c10&gt;に返すと知っているクロージャを渡すことなどの使用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is unusual to need to call this method directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを直接呼び出す必要は通常ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is up to both the conformer and the receiver of the protocol to document the nature of the identity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その同一性の本質を文書化するのは、そのプロトコルの準拠側とレシーバの両方の責任です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you create a string using string interpolation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それはあなたが文字列補間を使って文字列を作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you initialize a string using a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使って文字列を初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you initialize an &lt;c0&gt;Optional&lt;/c0&gt; instance with a &lt;c1&gt;nil&lt;/c1&gt; literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが&lt;c0&gt;Optional&lt;/c0&gt;インスタンスを&lt;c1&gt;nil&lt;/c1&gt;リテラルで初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is used by the compiler when you use an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが配列リテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you initialize a static string using a string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you initialize a static string using an extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが拡張初期素クラスタを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you initialize a static string with a Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたがユニコードスカラーで静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be used by the compiler when you use a string literal to initialize a &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それは、あなたが文字列リテラルを使って&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It's also possible to model an app’s state by using individual variables in combination to hold the state and the required data, which is not recommended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリの持つ状態を、状態と必要データを保持するよう組み合わせた独立した幾つかの変数を使ってモデル化することもまた可能です、それは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating Over a Range's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の持つ要素すべてに反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating Over a Sequence's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスの要素のすべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating over a Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合のすべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating over a String's Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つ文字のすべてにわたって反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Its &lt;c1&gt;deinit&lt;/c1&gt; must destroy its stored &lt;c2&gt;Header&lt;/c2&gt; and any constructed &lt;c3&gt;Element&lt;/c3&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの&lt;c1&gt;deinit&lt;/c1&gt;は、それの格納された&lt;c2&gt;Header&lt;/c2&gt;とあらゆる構成された&lt;c3&gt;Element&lt;/c3&gt;を破棄しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Joint Iteration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>接合反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key paths created using the &lt;c16&gt;#key&lt;w17&gt;Path&lt;/w17&gt;&lt;/c16&gt; string expression don’t pass type information about the properties or methods they reference to the APIs that accept key paths.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c16&gt;#key&lt;w17&gt;Path&lt;/w17&gt;&lt;/c16&gt;文字列式を使って作成されるキーパスは、それらが参照するプロパティまたはメソッドについての型情報を、キーパスを受け入れるAPIに渡しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key-Path Expressions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Key-Value Pairs as a Function Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数パラメータとしてのキー値ペア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Keyed&lt;w0&gt;Decoding&lt;w1&gt;Container&lt;w2&gt;Protocol Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Keyed&lt;w0&gt;Decoding&lt;w1&gt;Container&lt;w2&gt;プロトコルの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Keyed&lt;w0&gt;Encoding&lt;w1&gt;Container&lt;w2&gt;Protocol Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Keyed&lt;w0&gt;Encoding&lt;w1&gt;Container&lt;w2&gt;プロトコルの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>KeyedDecodingContainerProtocol Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>KeyedDecodingContainerProtocol 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>KeyedEncodingContainerProtocol Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>KeyedEncodingContainerProtocol 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Keys and key paths are frequently used for key-value coding (KVC), a mechanism for indirectly accessing an object’s attributes and relationships using string identifiers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーとキーパスは、文字列識別子を使ってオブジェクトの属性および関連付け（リレーションシップ）に間接的にアクセスするための仕組み、キー値コーディング（KVC）のためにしばしば使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Language Interoperability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>言語互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lastly, use the eponymous &lt;c0&gt;replace&lt;w1&gt;Subrange(_:&lt;w2&gt;with:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method to replace a subrange of elements with the contents of another collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後に、名前の元となった&lt;c0&gt;replace&lt;w1&gt;Subrange(_:&lt;w2&gt;with:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、いくつかの要素からなる下位範囲を別のコレクションの内容で置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lazy Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延コレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lazy Wrappers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lazy sequences can be used to avoid needless storage allocation and computation, because they use an underlying sequence for storage and compute their elements on demand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延シーケンスは、不必要なストレージの割り当てと計算を防止するために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lazy&lt;w0&gt;Sequence&lt;w1&gt;Protocol Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Lazy&lt;w0&gt;Sequence&lt;w1&gt;プロトコルの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how Swift represents imported C structures and unions, including types with bitfields and unnamed fields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftがインポートされたC構造体と共用体を表す方法を、ビットフィールドおよび無名フィールドを持つ型を含めて、学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how imported Objective-C protocol-qualified classes and metaclasses are represented.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたObjective-Cプロトコル適応のクラスおよびメタクラスが表される方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how the Swift standard library uses protocols and generics to express powerful constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どのようにSwift標準ライブラリがプロトコルや総称体を使ってパワフルな制約を表すかを学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn how to call imported functions that are declared in a C header.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cヘッダにおいて宣言されるインポートされた関数を呼び出す方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learn the recommended steps to migrate your code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを移行するための推奨される段階を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Left associative</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Left bit shift and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Less than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Less than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like a C function pointer, a Swift function type with the &lt;c0&gt;@convention(c)&lt;/c0&gt; attribute does not capture the context of its surrounding scope.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数ポインタのように、&lt;c0&gt;@convention(c)&lt;/c0&gt;属性を持つスウィフト関数型は、それを取り囲んでいるスコープのコンテキストをキャプチャしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, &lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; types can remove one or more elements using a single operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型は、１つ以上の要素の削除をただ１つの演算を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c2&gt;distance &lt; 0&lt;/c2&gt;, a limit that is greater than &lt;c3&gt;i&lt;/c3&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c2&gt;distance &lt; 0&lt;/c2&gt;ならば、&lt;c3&gt;i&lt;/c3&gt;より大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c2&gt;n &lt; 0&lt;/c2&gt;, a limit that is greater than &lt;c3&gt;i&lt;/c3&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c2&gt;n &lt; 0&lt;/c2&gt;ならば、&lt;c3&gt;i&lt;/c3&gt;より大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if &lt;c3&gt;distance &lt; 0&lt;/c3&gt;, &lt;c4&gt;limit&lt;/c4&gt; should be less than &lt;c5&gt;i&lt;/c5&gt; to have any effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、&lt;c3&gt;distance &lt; 0&lt;/c3&gt;ならば、&lt;c4&gt;limit&lt;/c4&gt;が何らかの効果を持つには&lt;c5&gt;i&lt;/c5&gt;より少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, if you pass a zero-length collection as the &lt;c0&gt;new&lt;w1&gt;Elements&lt;/w1&gt;&lt;/c0&gt; parameter, this method removes the elements in the given subrange without replacement.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、あなたがゼロ長コレクションを&lt;c0&gt;new&lt;w1&gt;Elements&lt;/w1&gt;&lt;/c0&gt;パラメータとして渡すならば、このメソッドは与えられた下位範囲の中の要素を置き換えることなく削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, scalars that default to text presentation can be followed by U+FE0F VARIATION SELECTOR-16 to request the emoji presentation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じように、テキスト表現が初期状態のスカラーは、U+FE0F VARIATION SELECTOR-16が後に続くことで、emoji表現を要請できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Linux platforms use &lt;c0&gt;getrandom(2)&lt;/c0&gt; when available; otherwise, they read from &lt;c1&gt;/dev/urandom&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Linuxプラットホームは、&lt;c0&gt;getrandom(2)&lt;/c0&gt;を利用可能な場合は使います；そうでなければ、それらは&lt;c1&gt;/dev/urandom&lt;/c1&gt;から読み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical AND</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical NOT</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical OR</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>論理値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can erroneously appear to be memory leakage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Macros are imported when they use literals for string, floating-point, or integer values, or use operators like &lt;c1&gt;+&lt;/c1&gt;, &lt;c2&gt;-&lt;/c2&gt;, &lt;c3&gt;&gt;&lt;/c3&gt;, and &lt;c4&gt;==&lt;/c4&gt; between literals or previously defined macros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マクロは、それらがリテラルを文字列に対して使う、または&lt;c1&gt;+&lt;/c1&gt;、&lt;c2&gt;-&lt;/c2&gt;、&lt;c3&gt;&gt;&lt;/c3&gt;、そして&lt;c4&gt;==&lt;/c4&gt;のような演算子をリテラルや以前に定義されたマクロの間で使う場合にインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maintaining State in Your Apps</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのアプリの状態を保守する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make an API Unavailable in Both Languages</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるAPIを両方の言語で利用できなくする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make sure that your Objective-C code and Swift code have optimal compatibility by tidying up and modernizing your existing Objective-C codebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-CコードとSwiftコードが最善の互換性を持つことを、あなたの既存のObjective-Cコード基盤を整頓および近代化することによって確かにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make sure your code follows modern coding practices so that it interacts more effectively with Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードが近代的コード慣行に従うことを確かにしてください、それでそれはより効果的にSwiftと相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make your data types encodable and decodable for compatibility with external representations such as JSON.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのデータ型のエンコーディングとデコーディングを外部表現、例えばJSONなどとの互換性のために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Making Objective-C APIs Unavailable in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIをSwiftにおいて利用できなくする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Making false assumptions about when a closure is called can lead to data inconsistency and app crashes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いつクロージャが呼び出されるかについてfalseを仮定することは、データの矛盾そしてアプリクラッシュに至る可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Making your own custom types conform to &lt;c0&gt;Sequence&lt;/c0&gt; enables many useful operations, like &lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt; looping and the &lt;c3&gt;contains&lt;/c3&gt; method, without much effort.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型を&lt;c0&gt;Sequence&lt;/c0&gt;に準拠させることは、多くの有用な演算能力を与えます、&lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt;ループおよび&lt;c3&gt;contains&lt;/c3&gt;メソッドのように、あまり苦労せずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manage the given &lt;c0&gt;buffer&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された&lt;c0&gt;buffer&lt;/c0&gt;を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Managed Buffers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manipulating Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスを操る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manual Iteration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手動反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manual Memory Management</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手動メモリ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many collection operations are performed by wrapping a collection in another type, instead of copying the collection's contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くのコレクション演算は、コレクションを別の型の中にラップすることによって実行されます、コレクションの内容をコピーするのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの単一の文字、例えば「é」、「김」、そして「🇮🇳」などが、複数のユニコードスカラー値から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many of the APIs you use in Swift take a closure—or a function passed as an instance—as a parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがSwiftで使うAPIの多くは、クロージャ — またはインスタンスとして渡される関数 — をパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many other types are renamed or nested to clarify relationships.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くの他の型は、改名または入れ子にされて、関係がはっきりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many pointer operations must only be applied to pointers with memory in a specific state—you must keep track of the state of the memory you are working with and understand the changes to that state that different operations perform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くのポインタ演算はある特定の状態のメモリを持つポインタに適用されるだけであるべきです — あなたは、あなたが作業しているメモリの状態を見失わないようにして、異なる演算が実行するその状態の変更を理解していなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many sequence and collection operations return an array or a type-erasing collection wrapper instead of a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>多くのシーケンスおよびコレクション演算は、集合ではなく、ある配列またはある型消去コレクションラッパーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many types in the standard library conform to &lt;c1&gt;Hashable&lt;/c1&gt;: Strings, integers, floating-point and Boolean values, and even sets are hashable by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの中の多くの型は&lt;c1&gt;Hashable&lt;/c1&gt;に準拠します：様々な文字列、整数、浮動小数点およびブール値、そして様々な集合さえも、初期状態でハッシュ化可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mark Availability</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利用可能性を印する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marking API Availability in Objective-C</seg>
      </tuv>
      <tuv lang="ja">
        <seg>API利用可能性をObjective-Cにおいて印する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marking the &lt;c0&gt;My&lt;w1&gt;List&lt;/w1&gt;&lt;/c0&gt; declaration as audited for nullability reduces the number of annotations that are required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;My&lt;w1&gt;List&lt;/w1&gt;&lt;/c0&gt;宣言をヌル可能性について監査済みと印することは、必要とされる注釈の数を減らします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached at the bottom left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>左下で付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached at the top right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右上で付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached directly above.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直上に付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks attached directly below.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>直下に付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marks that overlay a base letter or symbol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底表音文字またはシンボルを覆う記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Masked Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>隠された算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Measuring the Length of a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の長さを計測する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory Access</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory Layout</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリレイアウト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory can be untyped and uninitialized, bound to a type and uninitialized, or bound to a type and initialized to a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、型無しで未初期化、ある型に束縛されて未初期化、またはある型に束縛されてある値に初期化される可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that has been bound to a type can be rebound to a different type only after it has been deinitialized or if the bound type is a &lt;e0&gt;trivial type&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型に束縛されているメモリは、それがデイニシャライズされた後にまたは束縛型が&lt;e0&gt;trivial type&lt;/e0&gt;である場合にのみ、異なる型に再束縛が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that has been bound to a type, whether it is initialized or uninitialized, is typically accessed using typed pointers—instances of &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型に束縛されているメモリは、それが初期化済みか未初期化かにかかわらず、一般的に型付ポインタを使ってアクセスされます — &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;ではなくて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that has just been allocated through a typed pointer or has been deinitialized is in an &lt;e0&gt;uninitialized&lt;/e0&gt; state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタを通して今しがたアロケートされる、または&lt;e0&gt;未初期化&lt;/e0&gt;状態にデイニシャライズされるメモリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory that you manually manage can be either &lt;e0&gt;untyped&lt;/e0&gt; or &lt;e1&gt;bound&lt;/e1&gt; to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが手動で管理するメモリは、特定の型に対して&lt;e0&gt;型付けされない&lt;/e0&gt;または&lt;e1&gt;束縛される&lt;/e1&gt;のいずれかが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Message&lt;w0&gt;Authentication&lt;w1&gt;Code Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Message&lt;w0&gt;Authentication&lt;w1&gt;Code 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Methods and properties that are marked with the &lt;c2&gt;internal&lt;/c2&gt; modifier and declared within a class that inherits from an Objective-C class are accessible to the Objective-C runtime.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;internal&lt;/c2&gt;修飾子で印されたそしてObjective-Cクラスから継承するクラス内部で宣言されたメソッドとプロパティは、Objective-Cランタイムからアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Migrate Your Code</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコードを移行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Migrating Your Objective-C Code to Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cコードのスウィフトへの移行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Migration experiences differ depending on your existing codebase, but here are some general steps and tools to help you troubleshoot the process:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以降体験はあなたの既存のコード基盤に依存して異なります、しかしここにその過程の問題をあなたが解決する助けとなるいくつかの一般的な段階とツールがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mirrors also provide a “display style” property that suggests how this mirror might be rendered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ミラーはまた、「display style」プロパティを提供します、それはどのようにこのミラーが描画されるかを提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Model data with numbers, Boolean values, and other fundamental types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数、ブール値、および他の基本的な型に関してデータをモデル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modifying a copy of a string leaves the original unaffected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のコピーを修正しても、元のものはそのままで影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modifying and Comparing Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の修正と比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most collections in the standard library use &lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt; as their iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの中のほとんどのコレクションは、&lt;c2&gt;Indexing&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt;をそれらのイテレータとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most importantly, they can be overloaded, so a type that conforms to &lt;c2&gt;String&lt;w3&gt;Interpolation&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; can provide several different &lt;c5&gt;append&lt;w6&gt;Interpolation&lt;/w6&gt;&lt;/c5&gt; methods with different behaviors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も重要なことには、それらはオーバーロードされることができます、それで&lt;c2&gt;String&lt;w3&gt;Interpolation&lt;w4&gt;Protocol&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠する型は、いくつかの異なる&lt;c5&gt;append&lt;w6&gt;Interpolation&lt;/w6&gt;&lt;/c5&gt;メソッドを異なる挙動で提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most operations with a NaN operand produce a NaN result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaN演算数を使うほとんどの演算は、結果NaNを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moves instances from initialized source memory into the uninitialized memory referenced by this pointer, leaving the source memory uninitialized and the memory referenced by this pointer initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかのインスタンスを初期化されたソースメモリからこのポインタによって参照される未初期化メモリに移動します、残っている未初期化ソースメモリは未初期化で、このポインタによって参照されたメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiline string literals are enclosed in three double quotation marks (&lt;c0&gt;"""&lt;/c0&gt;), with each delimiter on its own line.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数行文字列リテラルは、３つの二重引用符記号（&lt;c0&gt;"""&lt;/c0&gt;）に囲まれ、各区切り子をそれの独自の行上に持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and produces their product, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算してそれらの積を生成します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and produces their product.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算してそれらの積を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiply, ignoring overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算、オーバーフローを無視</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Must be non-zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非ゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mutable&lt;w0&gt;Collection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変&lt;w0&gt;コレクションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>MutableCollection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>MutableCollection 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NOTE: older runtimes had Swift.AnyKeyPath as the ObjC name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意：より古いランタイムは、Swift.AnyKeyPath を ObjC名として持ちました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN (“not a number”)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaN（「非数」）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN is not equal to any value, including itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、それ自身を含めてあらゆる値と等しくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN propagates through many arithmetic operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、いくつもの算術演算をずっと伝播していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NaN values compare not equal to every value, including themselves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNは、それら自身を含めてあらゆる値に対して等しくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Named and Unnamed Combining Classes</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前付きおよび名無しの結合クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Negation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Negative values are returned in two’s complement representation, regardless of the type’s underlying implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値が、２の補数表現において返されます、その型の持つ基礎となる実装に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Never call &lt;c0&gt;finalize()&lt;/c0&gt; on &lt;c1&gt;hasher&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;finalize()&lt;/c0&gt;を&lt;c1&gt;hasher&lt;/c1&gt;上で決して呼び出さないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, create unique options as static properties of your custom type using unique powers of two (1, 2, 4, 8, 16, and so forth) for each individual property’s raw value so that each property can be represented by a single bit of the type’s raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、それぞれが特有なオプションをあなたのあつらえの型の静的プロパティとして作成してください、特有な２の冪（1、2、4、8、16、およびそれ以降）を各個別プロパティの生の値に対して使います、それで各プロパティはその型の持つ生の値からなるある単一ビットによって表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, the &lt;c3&gt;while&lt;/c3&gt; loop calls the iterator’s &lt;c4&gt;next()&lt;/c4&gt; method repeatedly, binding each element that is returned to &lt;c5&gt;animal&lt;/c5&gt; and exiting when the &lt;c6&gt;next()&lt;/c6&gt; method returns &lt;c7&gt;nil&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、&lt;c3&gt;while&lt;/c3&gt;ループは、そのイテレータのもつ&lt;c4&gt;next()&lt;/c4&gt;メソッドを繰り返し呼び出して、返される各要素を&lt;c5&gt;animal&lt;/c5&gt;に束縛して、そして&lt;c6&gt;next()&lt;/c6&gt;メソッドが&lt;c7&gt;nil&lt;/c7&gt;を返すとき退出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, the bytes referenced by &lt;c0&gt;dest&lt;w1&gt;Bytes&lt;/w1&gt;&lt;/c0&gt; are copied into &lt;c2&gt;byte&lt;w3&gt;Array&lt;/w3&gt;&lt;/c2&gt;, a new &lt;c4&gt;[UInt]&lt;/c4&gt; array, and then the remainder of &lt;c5&gt;some&lt;w6&gt;Bytes&lt;/w6&gt;&lt;/c5&gt; is appended to &lt;c7&gt;byte&lt;w8&gt;Array&lt;/w8&gt;&lt;/c7&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、&lt;c0&gt;dest&lt;w1&gt;Bytes&lt;/w1&gt;&lt;/c0&gt;によって参照されるバイトは&lt;c2&gt;byte&lt;w3&gt;Array&lt;/w3&gt;&lt;/c2&gt;、新しい&lt;c4&gt;[UInt]&lt;/c4&gt;配列へとコピーされます、そしてそれから&lt;c5&gt;some&lt;w6&gt;Bytes&lt;/w6&gt;&lt;/c5&gt;の残りは&lt;c7&gt;byte&lt;w8&gt;Array&lt;/w8&gt;&lt;/c7&gt;に加えられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, the function calls the array’s &lt;c2&gt;index(before:)&lt;/c2&gt; method to return the correct position in the passed array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、関数は配列の&lt;c2&gt;index(before:)&lt;/c2&gt;メソッドを呼び出すことで渡された配列での正しい位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, the observations in Celsius are converted to Fahrenheit:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次に、摂氏での観測は華氏に変換されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Nil coalescing</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No buffering storage is allocated and each traversal step invokes &lt;c0&gt;predicate&lt;/c0&gt; on one or more underlying elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファするストレージが割り当てられること、そしてひとつひとつ見ていく各処理が１つまたはそれ以上の基盤となる要素上で&lt;c0&gt;predicate&lt;/c0&gt;を呼び出すことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No matter which way you call &lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, Swift’s type safety guarantees that you can only pass a pointer to the type required by the function—in this case, a pointer to an &lt;c3&gt;Int&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;print&lt;w1&gt;Int(at&lt;w2&gt;Address:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を呼び出す方法は問題ではありません、Swiftの型安全は、あなたが関数によって要求される型へのポインタを渡すことだけが可能であるのを保証します — この場合、&lt;c3&gt;Int&lt;/c3&gt;へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>None</seg>
      </tuv>
      <tuv lang="ja">
        <seg>なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Nonnullable—Imported as nonoptionals, whether annotated directly or by inclusion in an annotated region</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非ヌル可能性 — 非オプショナルとしてインポートされます、直接に注釈を付けられようとまたは注釈を付けられた領域の中に包含されようと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not identical</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一でない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notably, it does &lt;e1&gt;not&lt;/e1&gt; contain the standard digits or Latin/Greek letter blocks; instead, it contains the mathematical Latin, Greek, and Arabic letters and numbers defined in the Supplemental Multilingual Plane.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特に、それは標準の桁またはラテン／ギリシャ文字ブロックを含み&lt;e1&gt;ません&lt;/e1&gt;；代わりに、それは補助多言語面で定義される数学用のラテン、ギリシャ、そしてアラビア文字と数字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note Renamed Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>改名される参照型に注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c0&gt;Float80&lt;w1&gt;.significand&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is 63, even though 64 bits are used to store the significand in the memory representation of a &lt;c4&gt;Float80&lt;/c4&gt; (unlike other floating-point types, &lt;c5&gt;Float80&lt;/c5&gt; explicitly stores the leading integral significand bit, but the &lt;c6&gt;Binary&lt;w7&gt;Floating&lt;w8&gt;Point&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt; APIs provide an abstraction so that users don’t need to be aware of this detail).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float80&lt;w1&gt;.significand&lt;w2&gt;Bit&lt;w3&gt;Count&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は63であることに注意してください、64ビットが使用されて仮数を&lt;c4&gt;Float80&lt;/c4&gt;メモリ表現に格納するとしてもです（他の浮動小数点型と違い、&lt;c5&gt;Float80&lt;/c5&gt;は明示的に先頭整数仮数ビットを格納します、しかし&lt;c6&gt;Binary&lt;w7&gt;Floating&lt;w8&gt;Point&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;APIはある抽象化を提供します、それでユーザはこの詳細に通じている必要はありません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c0&gt;is&lt;w1&gt;Finite&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;is&lt;w3&gt;Infinite&lt;/w3&gt;&lt;/c2&gt; do not form a dichotomy, because they are not total: If &lt;c4&gt;x&lt;/c4&gt; is &lt;c5&gt;Na&lt;w6&gt;N&lt;/w6&gt;&lt;/c5&gt;, then both properties are &lt;c7&gt;false&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Finite&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;is&lt;w3&gt;Infinite&lt;/w3&gt;&lt;/c2&gt;は二項対立を形作らないことに注意してください、なぜならそれらが全てではないからです：&lt;c4&gt;x&lt;/c4&gt;が&lt;c5&gt;Na&lt;w6&gt;N&lt;/w6&gt;&lt;/c5&gt;ならば、そのとき両方のプロパティとも&lt;c7&gt;false&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c0&gt;typedef&lt;/c0&gt; types aren't assumed to be nonnull, even within audited regions, because they aren't inherently nullable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;typedef&lt;/c0&gt;型は非ヌルであると仮定されません、監査済み領域内でさえもです、なぜならそれらはそもそもヌル可能でないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c10&gt;q&lt;/c10&gt; is &lt;e11&gt;not&lt;/e11&gt; &lt;c12&gt;x / y&lt;/c12&gt; computed in floating-point arithmetic, and that &lt;c13&gt;q&lt;/c13&gt; may not be representable in any available integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c10&gt;q&lt;/c10&gt;が浮動小数点算術で計算される&lt;c12&gt;x / y&lt;/c12&gt;では&lt;e11&gt;ない&lt;/e11&gt;こと、そして&lt;c13&gt;q&lt;/c13&gt;は何らかの利用可能な整数型において表現可能でないかもしれないことに注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that an index into one view may not have an exact corresponding position in another view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるビューに対するインデックスが別のビューにおいて正確に対応する位置を持たないかもしれないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that it is unsafe to escape the pointer provided to &lt;c0&gt;body&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;に提供されたポインタをエスケープすることは安全でないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that some elements in the &lt;c0&gt;temperature&lt;w1&gt;Data &lt;/w1&gt;&lt;/c0&gt; array are not valid numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;temperature&lt;w1&gt;Data &lt;/w1&gt;&lt;/c0&gt;配列の幾つかの要素は有効な数字ではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the &lt;c0&gt;Element&lt;/c0&gt; array is suitably-aligned &lt;s1&gt;raw memory&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Element&lt;/c0&gt;配列は、&lt;s1&gt;生のメモリ&lt;/s1&gt;に適切に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note: this property need not be implemented by conforming types, it has a default implementation in a protocol extension that just returns &lt;c0&gt;self&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注意：このプロパティは準拠する型で実装される必要はありません、それはプロトコル拡張において初期実装、単に&lt;c0&gt;self&lt;/c0&gt;を返すものを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that &lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; conforms to the &lt;c2&gt;Hashable&lt;/c2&gt; protocol, you can create a set of previously tapped grid points.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Grid&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;が&lt;c2&gt;Hashable&lt;/c2&gt;プロトコルに準拠する今、あなたは以前にタップされた格子点の集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that the &lt;c0&gt;shorter&lt;w1&gt;Indices&lt;/w1&gt;&lt;/c0&gt; array holds the indices of the shorter names in the &lt;c2&gt;names&lt;/c2&gt; set, you can use those indices to access elements in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在、&lt;c0&gt;shorter&lt;w1&gt;Indices&lt;/w1&gt;&lt;/c0&gt;配列は&lt;c2&gt;names&lt;/c2&gt;集合の中のより短い名前のインデックスを保持します、あなたはそれらのインデックスを使ってこの集合の要素にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Nullable—Imported as optionals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヌル可能性 — オプショナルとしてインポートされます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numbers and Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数と基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numbers, Data, and Basic Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数、データ、そして基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numerals greater than 9 are represented as Roman letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>９より大きい数詞はローマ字で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numeric Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数に関するプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numeric Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Object subscripting methods are imported by Swift as methods with double underscores (&lt;c0&gt;__&lt;/c0&gt;) prepended to their base names, rather than as a Swift subscript, if either the getter or setter method is marked as &lt;c1&gt;NS&lt;w2&gt;_REFINED&lt;w3&gt;_FOR&lt;w4&gt;_SWIFT&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクト添え字メソッドは、スウィフトによってメソッドとして二重アンダースコア（&lt;c0&gt;__&lt;/c0&gt;）をそれのベース名の前に付けられてインポートされます、スウィフト添え字としてではなく、もしゲッターとセッターメソッドの両方が&lt;c1&gt;NS&lt;w2&gt;_REFINED&lt;w3&gt;_FOR&lt;w4&gt;_SWIFT&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;と印付けされるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C and C Code Customization</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-CとCコードのカスタム化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C classes qualified by one or more protocols, like the one in the example below, are imported by Swift as protocol composition types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例でのもののような、１つ以上のプロトコルによる基準を満たすObjective-Cクラスは、スウィフトによってプロトコル合成型としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C key paths are distinct from, but related to, key-path expressions in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cキーパスは、Swiftでのキーパス式とは違います、しかしそれと関連します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C reference type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C type declarations that use lightweight generic parameterization are imported by Swift with information about the type of their contents preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>軽量総称体パラメーター化を使うObjective-C宣言は、それらの保管される内容についての情報を使ってスウィフトによってインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Obtain each separate iterator from separate calls to the sequence’s &lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt; method rather than by copying.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスのもつ&lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt;メソッドへの独立した呼び出しから独立したイテレータを取得してください、コピーによってではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Offsets the given index by the specified distance, or so that it equals the given limiting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをこの指定された隔たりで補います、またはそれでそれは与えられた限界インデックスと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Offsets the given index by the specified distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスを指定された間隔で補います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often, the optimizer can eliminate bounds- and uniqueness-checks within an algorithm, but when that fails, invoking the same algorithm on &lt;c0&gt;body&lt;/c0&gt;\ ’s argument lets you trade safety for speed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しばしば、最適化機能はアルゴリズム内部で境界および固有さ検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムを&lt;c0&gt;body&lt;/c0&gt;の引数上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On 32-bit platforms, &lt;c0&gt;Int&lt;/c0&gt; is the same size as &lt;c1&gt;Int32&lt;/c1&gt;, and on 64-bit platforms, &lt;c2&gt;Int&lt;/c2&gt; is the same size as &lt;c3&gt;Int64&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビットプラットホーム上では、&lt;c0&gt;Int&lt;/c0&gt;は&lt;c1&gt;Int32&lt;/c1&gt;と同じ大きさです、そして64ビットプラットホーム上では、&lt;c2&gt;Int&lt;/c2&gt;は&lt;c3&gt;Int64&lt;/c3&gt;と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On 32-bit platforms, &lt;c0&gt;UInt&lt;/c0&gt; is the same size as &lt;c1&gt;UInt32&lt;/c1&gt;, and on 64-bit platforms, &lt;c2&gt;UInt&lt;/c2&gt; is the same size as &lt;c3&gt;UInt64&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32ビットプラットホーム上では、&lt;c0&gt;UInt&lt;/c0&gt;は&lt;c1&gt;UInt32&lt;/c1&gt;と同じ大きさです、そして64ビットプラットホーム上では、&lt;c2&gt;UInt&lt;/c2&gt;は&lt;c3&gt;UInt64&lt;/c3&gt;と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On This Page</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この項には</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On a big-endian platform, for any integer &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x == x&lt;w2&gt;.big&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビッグエンディアンプラットホーム上で、何らかの整数&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x == x&lt;w2&gt;.big&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On a little-endian platform, for any integer &lt;c0&gt;x&lt;/c0&gt;, &lt;c1&gt;x == x&lt;w2&gt;.little&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リトルエンディアンプラットホーム上で、何らかの整数&lt;c0&gt;x&lt;/c0&gt;に対して、&lt;c1&gt;x == x&lt;w2&gt;.little&lt;w3&gt;Endian&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On i386 and x86_64, &lt;c0&gt;Float80&lt;/c0&gt; has a number of non-canonical encodings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>i386およびx86_64では、&lt;c0&gt;Float80&lt;/c0&gt;は非正準エンコーディングのある数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On platforms that flush subnormal numbers to zero (such as armv7 with the default floating-point environment), Swift interprets subnormal &lt;c0&gt;Float&lt;/c0&gt; and &lt;c1&gt;Double&lt;/c1&gt; values as non-canonical zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非正規化数をゼロへとフラッシュするプラットホーム（たとえば省略時の浮動小数点環境でのarmv7）上では、Swiftは非正規化数&lt;c0&gt;Float&lt;/c0&gt;および&lt;c1&gt;Double&lt;/c1&gt;値を非正準のゼロとして解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On platforms that fully support IEEE 754, every &lt;c2&gt;Float&lt;/c2&gt; or &lt;c3&gt;Double&lt;/c3&gt; value is canonical, but non-canonical values can exist on other platforms or for other types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完全にIEEE 754をサポートするプラットホーム上では、あらゆる&lt;c2&gt;Float&lt;/c2&gt;または&lt;c3&gt;Double&lt;/c3&gt;値は正準です、しかし非正準値は他のプラットホーム上でまたは他の型に対して存在できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like &lt;c0&gt;"\u{1F1F5}"&lt;/c0&gt; and &lt;c1&gt;"\u{1F1F7}"&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一方で、あるemoji国旗文字は一対のユニコードスカラー値から構築されます、&lt;c0&gt;"\u{1F1F5}"&lt;/c0&gt;と&lt;c1&gt;"\u{1F1F7}"&lt;/c1&gt;のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once &lt;c0&gt;nil&lt;/c0&gt; has been returned, all subsequent calls return &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一旦&lt;c0&gt;nil&lt;/c0&gt;が返されるならば、すべての続いて起こる呼び出しは&lt;c1&gt;nil&lt;/c1&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once &lt;c2&gt;predicate&lt;/c2&gt; returns &lt;c3&gt;false&lt;/c3&gt; it will not be called again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いったん&lt;c2&gt;predicate&lt;/c2&gt;が&lt;c3&gt;false&lt;/c3&gt;を返すならそれは再び呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once all of the segments are appended, the interpolation is passed to an &lt;c6&gt;init(string&lt;w7&gt;Interpolation:)&lt;/w7&gt;&lt;/c6&gt; initializer on the type being created, which must extract the accumulated data from the &lt;c8&gt;String&lt;w9&gt;Interpolation&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一旦すべての文節が追加されるならば、補間はその作成されている型上での&lt;c6&gt;init(string&lt;w7&gt;Interpolation:)&lt;/w7&gt;&lt;/c6&gt;イニシャライザに渡されます、それは蓄積されたデータを&lt;c8&gt;String&lt;w9&gt;Interpolation&lt;/w9&gt;&lt;/c8&gt;から抽出しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once the predicate returns &lt;c2&gt;false&lt;/c2&gt; it will not be called again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いったん述部が&lt;c2&gt;false&lt;/c2&gt;を返すならそれは再び呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once you migrate a class to Swift, you must remove the corresponding &lt;c0&gt;.m&lt;/c0&gt; file from the target before building to avoid a duplicate symbol error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一旦あなたがあるクラスをスウィフトに移行したならば、あなたは、ビルドの前にそのターゲットから対応する&lt;c0&gt;.m&lt;/c0&gt;ファイルを取り除いて重複シンボル・エラーを避けなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One example is the &lt;c0&gt;reduce1(_:)&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの例は&lt;c0&gt;reduce1(_:)&lt;/c0&gt;メソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One of the values to multiply before adding to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加えられる前に掛け合わされる値のうちの１つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only Swift function types with C function reference calling convention may be used for function pointer arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数参照呼出手法を持つスウィフト関数型だけが、関数ポインタ引数のために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only the &lt;c2&gt;String&lt;/c2&gt; and &lt;c3&gt;Substring&lt;/c3&gt; types in the standard library are valid conforming types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;String&lt;/c2&gt;と&lt;c3&gt;Substring&lt;/c3&gt;型だけが標準ライブラリにおいて有効な準拠する型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only use this method to rebind the buffer’s memory to a type with the same size and stride as the currently bound &lt;c0&gt;Element&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリを現在バインドされる&lt;c0&gt;Element&lt;/c0&gt;型と同じサイズおよびストライドを持つある型に再バインドするためにだけこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only use this method to rebind the pointer’s memory to a type with the same size and stride as the currently bound &lt;c0&gt;Pointee&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタのもつメモリを現在バインドされる&lt;c0&gt;Pointee&lt;/c0&gt;型と同じサイズおよびストライドを持つある型に再バインドするためにだけこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Opaque pointers are used to represent C pointers to types that cannot be represented in Swift, such as incomplete struct types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明ポインタは、Swiftでは表されることができない型、例えば不完全なstruct型などへのCポインタを表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operating on substrings is fast and efficient because a substring shares its storage with the original string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列での演算は高速で効率的です、なぜなら下位文字列はそれのストレージを本来の文字列と共有するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operations on types conforming to the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol should support this behavior, but they might also support other options.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型での演算はこの挙動をサポートします、しかしそれらはまた他の選択肢もサポートするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operations with infinite values follow real arithmetic as much as possible: Adding or subtracting a finite value, or multiplying or dividing infinity by a nonzero finite value, results in infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限大値を伴う演算は、実数算術にできうる限り従います：ある無限大値を加算や減算すること、または非ゼロの有限値によって無限に乗算や除算することは、無限大の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator Declarations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operator Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算子関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option set values have a one-to-one correspondence with their associated raw values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセット値それらは、それらの関連する生の値と一対一の対応を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option sets all conform to &lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt; by inheritance using the &lt;c2&gt;Option&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセットすべては、&lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;への準拠を&lt;c2&gt;Option&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt;プロトコルを使って継承することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option sets use bitwise operations on their associated raw values to implement their mathematical set operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセットは、ビット単位演算をそれらの関連する生の値上で使うことで、それらの数学的集合演算を実施します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option-click a symbol to see implicit information about it, like its type, attributes, and documentation comments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シンボルをオプション-クリックして、それに関する暗黙表示の情報、その型、属性、そして注釈文書などを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option&lt;w0&gt;Set Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプション&lt;w0&gt;集合の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optional Binding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル束縛</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optional Chaining</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル連鎖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optionals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Order Dependent Operations on Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合での順序依存演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other classes derived from such an ancestor are given a default mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのような先祖から派生する別のクラスは、省略時のミラーを与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other letters, including syllables and ideographs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の文字、音節と表意文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other methods are imported with double underscores (&lt;c0&gt;__&lt;/c0&gt;) prepended to their base names.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のメソッドは、二重アンダースコア（&lt;c0&gt;__&lt;/c0&gt;）をそれのベース名の前に付けられてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other than these signaling operations, a signaling NaN behaves in the same manner as a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのシグナル演算の他は、シグナルNaNはクワイエットNaNと同じ流儀で振舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, iteration will stop if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、反復は誤形式シーケンスが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, returns &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c2&gt;false&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, returns &lt;c5&gt;(false, old&lt;w6&gt;Member)&lt;/w6&gt;&lt;/c5&gt;, where &lt;c7&gt;old&lt;w8&gt;Member&lt;/w8&gt;&lt;/c7&gt; is the member of the set equal to &lt;c9&gt;new&lt;w10&gt;Member&lt;/w10&gt;&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、&lt;c5&gt;(false, old&lt;w6&gt;Member)&lt;/w6&gt;&lt;/c5&gt;を返します、そこで&lt;c7&gt;old&lt;w8&gt;Member&lt;/w8&gt;&lt;/c7&gt;は&lt;c9&gt;new&lt;w10&gt;Member&lt;/w10&gt;&lt;/c9&gt;に等しいこの集合のメンバです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, the memory must not be initialized or &lt;c6&gt;Pointee&lt;/c6&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、メモリは初期化されてはなりません、また&lt;c6&gt;Pointee&lt;/c6&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, the result is generated by the language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そうでなければ、結果は言語によって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overflow checking is not performed in &lt;c0&gt;-Ounchecked&lt;/c0&gt; builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー検査は、&lt;c0&gt;-Ounchecked&lt;/c0&gt;ビルドでは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parameter: A metatype.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パラメータ：あるメタタイプ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parameters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parses a single Unicode scalar value from &lt;c0&gt;input&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;input&lt;/c0&gt;からの単一ユニコードスカラー値を構文解析します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parsing of the string is case insensitive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の構文解析は、大文字小文字に影響されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; if you need the result to use only ASCII characters; otherwise, pass &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが結果にASCII文字のみ使うことを必要とするならば&lt;c0&gt;true&lt;/c0&gt;；そうでなければ、&lt;c1&gt;false&lt;/c1&gt;を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to create a new string, even when the data referenced by &lt;c1&gt;c&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt; contains ill-formed sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡すと、&lt;c1&gt;c&lt;w2&gt;String&lt;/w2&gt;&lt;/c1&gt;によって参照されるデータが誤形式シーケンスを含む時であっても新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to create a signaling NaN or &lt;c1&gt;false&lt;/c1&gt; to create a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNを作成するために&lt;c0&gt;true&lt;/c0&gt;を、またはクワイエットNaNを作成するために&lt;c1&gt;false&lt;/c1&gt;を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to measure the length of &lt;c1&gt;input&lt;/c1&gt; even when &lt;c2&gt;input&lt;/c2&gt; contains ill-formed sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡すと、&lt;c2&gt;input&lt;/c2&gt;が誤形式シーケンスを含む時であっても&lt;c1&gt;input&lt;/c1&gt;の長さを測ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to prevent the release of the string’s allocated storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡して文字列のもつ割り当てストレージの解放を防止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to request that the collection avoid releasing its storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡して、コレクションがそのストレージを解放するのを回避するよう要求してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c0&gt;true&lt;/c0&gt; to use uppercase letters to represent numerals greater than 9, or &lt;c1&gt;false&lt;/c1&gt; to use lowercase letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を渡すことで大文字を使って９より大きい数詞を表します、または&lt;c1&gt;false&lt;/c1&gt;では小文字を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c4&gt;false&lt;/c4&gt; to immediately stop measuring &lt;c5&gt;input&lt;/c5&gt; when an ill-formed sequence is encountered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;false&lt;/c4&gt;を渡すと、誤形式シーケンスと出くわす場合に&lt;c5&gt;input&lt;/c5&gt;の計測を直ちに中止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass &lt;c4&gt;false&lt;/c4&gt; to interrupt the creation of the new string if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;false&lt;/c4&gt;を渡すと新しい文字列の作成は、誤形式シーケンスが検出されるならば中断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a Constant Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>定数ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a Function Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a Mutable Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可変ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a dictionary literal with string keys as &lt;c2&gt;children&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列キーを持つ辞書リテラルを&lt;c2&gt;children&lt;/c2&gt;として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass a variadic list of string and integer arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列および整数の引数からなる可変長リストを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass an Autoreleasing Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オートリリースポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass an instance to these static methods to acess the layout for that instance's type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインスタンスをこれら静的メソッドに渡すことで、そのインスタンスの持つ型に対するレイアウトにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pass the greater-than operator (&lt;c1&gt;&gt;&lt;/c1&gt;) operator as the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい（&lt;c1&gt;&gt;&lt;/c1&gt;）演算子を述部として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a NaN to an operation generally results in NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>NaNをある演算に渡すことは、一般的にNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a sequence with no elements or an empty collection as &lt;c0&gt;possible&lt;w1&gt;Prefix&lt;/w1&gt;&lt;/c0&gt; always results in &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>１つの要素もないシーケンスまたは空のコレクションを&lt;c0&gt;possible&lt;w1&gt;Prefix&lt;/w1&gt;&lt;/c0&gt;として渡すことは、常に&lt;c2&gt;true&lt;/c2&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing a value that can’t be represented in this type results in a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型において表せない値を渡すことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing any other format or any additional characters as &lt;c0&gt;text&lt;/c0&gt; results in &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何か他の形式または追加文字を&lt;c0&gt;text&lt;/c0&gt;として渡すことは、&lt;c1&gt;nil&lt;/c1&gt;の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the collection’s &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; as the &lt;c2&gt;start&lt;/c2&gt; parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;を&lt;c2&gt;start&lt;/c2&gt;パラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the collection’s starting index as the &lt;c0&gt;end&lt;/c0&gt; parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの開始インデックスを&lt;c0&gt;end&lt;/c0&gt;パラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Passing the same index as both &lt;c2&gt;i&lt;/c2&gt; and &lt;c3&gt;j&lt;/c3&gt; has no effect.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;i&lt;/c2&gt;と&lt;c3&gt;j&lt;/c3&gt;の両方と同じアンデックスを渡すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern match</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターン・マッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform arithmetic and bitwise operations or compare values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>算術およびビット単位の演算を実行します、または値を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform casts between types or represent values of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型の間でキャストを実行したり、任意型の値を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Perform order-dependent operations common to all collections, as implemented for &lt;c0&gt;Set&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すべてのコレクションに共通の順序依存演算を、&lt;c0&gt;Set&lt;/c0&gt;に対して実装されたように実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performance Optimizations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>性能最適化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Calculations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Calculations with Overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフローを伴う計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Collection Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクション演算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Double-Width Calculations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２倍幅計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing Typed Pointer Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタ算術を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing a bitwise NOT operation on 0 returns a value with every bit set to &lt;c0&gt;1&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位のNOT演算を0に関して実行することは、すべてのビットが&lt;c0&gt;1&lt;/c0&gt;に設定された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performing truncating division with floating-point values results in a truncated integer quotient and a remainder.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不動小数点値で切り捨て除算を実行することは、切り捨てられる整数指数と余りという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an &lt;c0&gt;Optional&lt;/c0&gt; instance or a default &lt;c1&gt;Optional&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算を実行します、ラップされた値の&lt;c0&gt;Optional&lt;/c0&gt;インスタンスまたは省略時の&lt;c1&gt;Optional&lt;/c1&gt;値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an &lt;c0&gt;Optional&lt;/c0&gt; instance or a default value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算を実行します、ラップされた値の&lt;c0&gt;Optional&lt;/c0&gt;インスタンスまたは省略時の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a traditional C-style assert with an optional message.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>随意のメッセージを持つ伝統的なC形式アサートを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs an unbalanced autorelease of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトのある不均衡なオートリリース（自動解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs an unbalanced release of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトのある不均衡なリリース（解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs an unbalanced retain of the object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトのある不均衡なリテイン（保持）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Persistently unique per environment (e.g. database record keys).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>環境ごとに永続的に特有である（たとえば、データベースレコードキー）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Platform Implementation of SystemRandomNumberGenerator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SystemRandomNumberGeneratorのプラットホーム実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Platform-specific classes, like &lt;c0&gt;NSBackground&lt;w1&gt;Activity&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;NSUser&lt;w3&gt;Notification&lt;/w3&gt;&lt;/c2&gt;, and &lt;c4&gt;NSXPCConnection&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プラットホーム特有のクラス、&lt;c0&gt;NSBackground&lt;w1&gt;Activity&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;NSUser&lt;w3&gt;Notification&lt;/w3&gt;&lt;/c2&gt;、そして&lt;c4&gt;NSXPCConnection&lt;/c4&gt;のような</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Playgrounds and the debugger use the &lt;c0&gt;Mirror&lt;/c0&gt; type to display representations of values of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンド及びデバッガは、&lt;c0&gt;Mirror&lt;/c0&gt;型を使ってあらゆる型の値の表現を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Playgrounds and the debugger will show a representation similar to the one used for instances of the kind indicated by the &lt;c0&gt;Display&lt;w1&gt;Style&lt;/w1&gt;&lt;/c0&gt; case name when the mirror is used for display.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プレイグラウンドとデバッガは、&lt;c0&gt;Display&lt;w1&gt;Style&lt;/w1&gt;&lt;/c0&gt;ケース節名によって指し示される種類のインスタンスに対して使われるものに似た表現をミラーが表示用に使われる時に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please see &lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for background; &lt;c3&gt;Lazy&lt;w4&gt;Collection&lt;w5&gt;Protocol&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; is an analogous component, but for collections.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予備知識として&lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;をぜひ見てください；&lt;c3&gt;Lazy&lt;w4&gt;Collection&lt;w5&gt;Protocol&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;は、類似した、しかしコレクションのためのコンポーネントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointer arithmetic with a typed pointer is counted in strides of the pointer’s &lt;c0&gt;Pointee&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタでのポインタ算術は、ポインタのもつ&lt;c0&gt;Pointee&lt;/c0&gt;型のストライドで勘定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointer arithmetic with raw pointers is performed at the byte level.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタを使うポインタ算術は、バイト水準で実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointers to Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値へのポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise greater than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連大なり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise greater than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連大なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise less than</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連の小なり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise less than or equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連小なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pointwise not equal</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント関連不等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Positive infinity compares greater than every finite value and negative infinity, while negative infinity compares less than every finite value and positive infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の無限大はすべての有限値と負の無限大より大きいと比較されます、一方負の無限大はすべての有限値と正の無限大より小さいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Positive infinity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precedence group</seg>
      </tuv>
      <tuv lang="ja">
        <seg>優先順位グループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;buffer&lt;/c0&gt; is an instance of a non-&lt;c1&gt;@objc&lt;/c1&gt; class whose &lt;c2&gt;deinit&lt;/c2&gt; destroys its stored &lt;c3&gt;Header&lt;/c3&gt; and any constructed &lt;c4&gt;Element&lt;/c4&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;buffer&lt;/c0&gt;は非&lt;c1&gt;@objc&lt;/c1&gt;クラスのインスタンスです、それの&lt;c2&gt;deinit&lt;/c2&gt;はそれの格納された&lt;c3&gt;Header&lt;/c3&gt;とあらゆる構成された&lt;c4&gt;Element&lt;/c4&gt;を破棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;minimum&lt;w1&gt;Capacity &gt;= 0&lt;/w1&gt;&lt;/c0&gt;, and the type indicated by &lt;c2&gt;buffer&lt;w3&gt;Class&lt;/w3&gt;&lt;/c2&gt; is a non-&lt;c4&gt;@objc&lt;/c4&gt; class with no declared stored properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;minimum&lt;w1&gt;Capacity &gt;= 0&lt;/w1&gt;&lt;/c0&gt;、そして&lt;c2&gt;buffer&lt;w3&gt;Class&lt;/w3&gt;&lt;/c2&gt;によって示される型が非&lt;c4&gt;@objc&lt;/c4&gt;クラスで宣言された格納プロパティを持たないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;next()&lt;/c0&gt; has not been applied to a copy of &lt;c1&gt;self&lt;/c1&gt; since the copy was made.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;next()&lt;/c0&gt;が&lt;c1&gt;self&lt;/c1&gt;のコピーに、そのコピーが作成されて以来まったく適用されていないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;position&lt;/c0&gt; is a valid position in &lt;c1&gt;self&lt;/c1&gt; and &lt;c2&gt;position != end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;position&lt;/c0&gt;が&lt;c1&gt;self&lt;/c1&gt;の中の有効な位置であり&lt;c2&gt;position != end&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;scalars&lt;/c0&gt; must have the same number of elements as the vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;scalars&lt;/c0&gt;は、ベクター型と同じ数の要素を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: &lt;c0&gt;v&lt;w1&gt;.value&lt;/w1&gt;&lt;/c0&gt; can be represented as ASCII (0..&lt;128).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：&lt;c0&gt;v&lt;w1&gt;.value&lt;/w1&gt;&lt;/c0&gt;がASCII（0..&lt;128）として表現できること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: May not be called after a previous &lt;c0&gt;self&lt;w1&gt;.encode(_:)&lt;/w1&gt;&lt;/c0&gt; call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：前の&lt;c0&gt;self&lt;w1&gt;.encode(_:)&lt;/w1&gt;&lt;/c0&gt;呼び出しの後に呼び出されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The next location exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：次の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The next position is representable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：次の位置が表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precondition: The previous location exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前提条件：前の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prefer Swift Value Types to Bridged Objective-C Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift値型はブリッジされたObjective-C参照型より好ましい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を格納するようにコレクションを準備します、そうすることが基礎をなす型に対して適切である場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Preserving the Results of a Throwing Expression</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スローする式の結果を保全する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prevent an Objective-C API from Being Imported</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるObjective-C APIがインポートされるのを妨げる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Preventing Timing Problems When Using Closures</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャを使う場合のタイミング問題を防ぐ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Print the result using the index found in step 2 on the original &lt;c0&gt;absences&lt;/c0&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>手順２で見つけたインデックスをオリジナル&lt;c0&gt;absences&lt;/c0&gt;配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Print values to the console, read from and write to text streams, and use command line arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値をコンソールに出力し、テキストストリームから読み込みおよびそれへと書き出し、そしてコマンドライン引数を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Printing and Displaying a Scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーをプリントおよび表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Printing and Dumping</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プリントとダンプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces a string containing the bytes in a given C array, interpreted according to a given encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた符号化によって解釈される、与えられたC配列の中のバイトを含んでいる文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces a string created by copying the data from a given C array of UTF8-encoded bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF8符号化されたバイトからなる与えられたC配列からコピーするデータによって作成される文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Produces an initialized &lt;c0&gt;String&lt;/c0&gt; object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化された&lt;c0&gt;String&lt;/c0&gt;オブジェクトを作成します、それは与えられた符号化での与えられたバイト解釈のバッファ由来の与えられた数のバイトを含んでいます、そして随意にそのバッファを解放します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Programming Tasks</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プログラミング作業</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Properties are not directly accessible if they trigger any &lt;c0&gt;did&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt; or &lt;c2&gt;will&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt; accessors, perform any representation changes such as bridging or closure reabstraction, or mask the value out of overlapping storage as for packed bitfields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロパティは直接にアクセス可能ではありません、もしそれらが何らかの&lt;c0&gt;did&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt;または&lt;c2&gt;will&lt;w3&gt;Set&lt;/w3&gt;&lt;/c2&gt;アクセッサの引き金になる、何らかの表現変更の実行たとえばブリッジまたはクロージャ再抽象化など、またはオーバーラップしているストレージの外の値をパックされたビットフィールドとしてマスクするならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Properties of this scalar defined by the Unicode standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード標準によって定義されるこのスカラーのプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols, such as &lt;a0&gt;&lt;c1&gt;Collection&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Equatable&lt;/c3&gt;&lt;/a2&gt;, that describe common abstractions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコル、たとえば&lt;a0&gt;&lt;c1&gt;Collection&lt;/c1&gt;&lt;/a0&gt;そして&lt;a2&gt;&lt;c3&gt;Equatable&lt;/c3&gt;&lt;/a2&gt;など、それは共通の抽象化を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols, such as &lt;a0&gt;&lt;c1&gt;Custom&lt;w2&gt;Debug&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; and &lt;a5&gt;&lt;c6&gt;Custom&lt;w7&gt;Reflectable&lt;/w7&gt;&lt;/c6&gt;&lt;/a5&gt;, that you use to customize operations that are available to all types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコル、たとえば&lt;a0&gt;&lt;c1&gt;Custom&lt;w2&gt;Debug&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;そして&lt;a5&gt;&lt;c6&gt;Custom&lt;w7&gt;Reflectable&lt;/w7&gt;&lt;/c6&gt;&lt;/a5&gt;など、あなたはそれを使って全ての型で利用可能である演算をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocols, such as &lt;a0&gt;&lt;c1&gt;Option&lt;w2&gt;Set&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;, that you use to provide implementations that would otherwise require boilerplate code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>プロトコル、たとえば&lt;a0&gt;&lt;c1&gt;Option&lt;w2&gt;Set&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;など、あなたはそれを使用してそうしなければ定型文コードを必要としただろう実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provide a custom reflection for your types using these protocols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえのリフレクションをあなたの型に対してこれらのプロトコルを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Providing a Hash Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値の提供</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing a Result</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の発行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing a Sequence</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスを発行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing an Optional</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナルを発行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying Descendants</seg>
      </tuv>
      <tuv lang="ja">
        <seg>子孫について問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying Runtime Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>実行時値の問い合わせ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying Type Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying a Float</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floatに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Querying a Float's State</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Floatの状態を問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Random Number Generators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為数生成子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Random-access collections can move indices any distance and measure the distance between indices in O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為アクセスのコレクションは、任意の隔たりのインデックスを移動できます、そしてインデックス間の隔たりの測定をO(1)時間で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Random&lt;w0&gt;Access&lt;w1&gt;Collection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為&lt;w0&gt;アクセス&lt;w1&gt;コレクションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Random&lt;w0&gt;Number&lt;w1&gt;Generator Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乱&lt;w0&gt;数&lt;w1&gt;ジェネレータの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range Expressions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range-replaceable collections provide operations that insert and remove elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲交換可能なコレクションは、いくつかの要素の挿入や削除を行う演算を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Range&lt;w0&gt;Replaceable&lt;w1&gt;Collection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲&lt;w0&gt;置換可能&lt;w1&gt;コレクションの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>RangeReplaceableCollection Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>RangeReplaceableCollection 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまな範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Pointer Arithmetic</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタ算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw memory that has just been allocated is in an &lt;e0&gt;uninitialized, untyped&lt;/e0&gt; state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートされてすぐの生のメモリは、&lt;e0&gt;初期化されない、型付けされない&lt;/e0&gt;状態にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw, Uninitialized Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の、初期化されないメモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reading from and writing to memory through a raw buffer are untyped operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある生のバッファを通してメモリから読み込むそしてそれへ書き込むことは、型無し演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reading from memory through a raw buffer is an untyped operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある生のバッファを通してメモリから読み込むことは、型無し演算のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference Counting</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照カウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Related String Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連した文字列型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Relationships</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関係</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remainder</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remainder and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that you can't subclass a Swift class in Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがObjective-CにおいてSwiftクラスをサブクラス化できないことを忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remove the original Objective-C &lt;c0&gt;.m&lt;/c0&gt; file from the target by deselecting the target membership checkbox.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ターゲットから本来のObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルを、ターゲットメンバーシップ・チェックボックスの選択を外すことによって取り除いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all elements from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all elements of this option set that are not also present in the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このオプションセットに属し、また与えられたセットの中に含まれない、すべての要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all members from the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合からすべてのメンバを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all the elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素すべてを除去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the character at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置での文字を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the element at the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置での要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the first element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the first element of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes and returns the last element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最後の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the characters in the given range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた範囲の中の文字を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the element at the given index of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスでの集合の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements in the specified subrange from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された下位範囲の中の要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements of the given sequence from the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの要素を集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements of the given set from this set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた集合の要素をこの集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements of the set that are also in the given sequence and adds the members of the sequence that are not already in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合の要素で与えられたシーケンスの中にもあるものを削除します、そしてシーケンスのメンバで集合の中にはまだないものを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた集合の中にもあるこの集合の要素を削除します、そして与えられた集合のメンバでこの集合の中にはまだないものを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements of the set that aren’t also in the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中にはない、この集合の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the elements of this set that aren’t also in the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた集合の中にはない、この集合の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the first element of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の最初の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the given element and all elements subsumed by it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素とそれによって包括されるすべての要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the given element and any elements subsumed by the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と、与えられた要素によって包括されるあらゆる要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the given number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified element from the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された要素を集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified number of elements from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素をコレクションの始まりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the specified subrange of elements from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなる指定された下位範囲をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removing Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removing Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rename APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>APIを改名する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Renaming Objective-C APIs for Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIをSwift用に改名する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reordering Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素を再配列する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reordering a String's Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の持つ文字を並び替えます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素を再配列します、例えば、与えられた述部にマッチする要素すべてが、合致しない要素すべての後になるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repeated Access</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返してアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repeatedly calling this method returns all the elements of the underlying sequence in order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repeatedly calling this method returns, in order, all the elements of the underlying sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replace this set with the elements contained in this set or the given set, but not both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合を、この集合または与えられた集合の中に含まれる、しかし両方にではない要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces elements of this vector with &lt;c0&gt;other&lt;/c0&gt; in the lanes where &lt;c1&gt;mask&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの要素を、&lt;c0&gt;mask&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;であるところの、レーンの中の&lt;c2&gt;other&lt;/c2&gt;で置き換えます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces elements of this vector with elements of &lt;c0&gt;other&lt;/c0&gt; in the lanes where &lt;c1&gt;mask&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの要素を、&lt;c0&gt;mask&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;であるところの、レーンの中の&lt;c2&gt;other&lt;/c2&gt;の要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the elements within the specified bounds with the given Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された領域内の要素を与えられたユニコードスカラー値で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the given index with its predecessor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをそれの前のものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the given index with its successor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスをそれの後に続くものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the memory referenced by this pointer with the values starting at the given pointer, leaving the source memory uninitialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まるいくらかの値と置き換えます、ソースメモリは未初期化のままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the specified subrange of elements with the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの要素からなる指定された下位範囲を与えられたコレクションで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces the text within the specified bounds with the given characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された領域内のテキストを与えられた幾らかの文字で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this pointer’s initialized memory with the specified number of instances from the given pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつ初期化されたメモリを、指定されたポインタのもつメモリからの指定された数のインスタンスで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this pointer’s memory with the specified number of consecutive copies of the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタのもつメモリを、指定された数の指定された値の連続コピーで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このセットを、このセットか与えられたセットのどちらかの中に、しかし両方ではなく、含まれるすべての要素を含んでいる新しいセットで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this string with the empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列を空の文字列で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with its additive inverse.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をそれの加法の逆元で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with its square root, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値をそれの平方根で置き換えます、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with the remainder of itself divided by the given value using truncating division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り捨て除算を使ってそれ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replaces this value with the remainder of itself divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replacing Substrings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列の置換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Representing a Result</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Represents a string literal with interpolations while it is being built up.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列リテラルでいくらかの補間をもつものを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Represents the contents of a string literal with interpolations while it’s being built up.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくらかの補間をもつある文字列リテラルの内容それらを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Required Initializer</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space in the string’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数のASCII文字を格納するのに十分な空間を文字列のもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space in the view’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数のASCII文字を格納するのに十分な空間をビューのもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reserves enough space to store the specified number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の要素を格納するのに十分な空間を確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのストレージを保持することは、あなたがコレクションをもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retaining the storage can be a useful optimization when you’re planning to grow the string again.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストレージを保持することは、あなたが文字列をもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Retrieves and returns the referenced instance, returning the pointer’s memory to an uninitialized state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照されたインスタンスを取ってきて返します、ポインタのメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return Result Instances Asynchronously</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果インスタンスを非同期に返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素すべてに対するあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;-1&lt;/c0&gt; if this value is negative and &lt;c1&gt;1&lt;/c1&gt; if it’s positive; otherwise, &lt;c2&gt;0&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値が負ならば&lt;c0&gt;-1&lt;/c0&gt;そしてそれが正ならば&lt;c1&gt;1&lt;/c1&gt;；それ以外では&lt;c2&gt;0&lt;/c2&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if &lt;c1&gt;self&lt;/c1&gt; holds the only strong reference to its buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;を返します、もし&lt;c1&gt;self&lt;/c1&gt;がそれのバッファに対する強い参照のみを保持するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns &lt;c0&gt;true&lt;/c0&gt; if this value is a multiple of the given value, and &lt;c1&gt;false&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;true&lt;/c0&gt;をもしこの値がその与えられた値の倍数ならば、そして&lt;c1&gt;false&lt;/c1&gt;をそうでないならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a &lt;c0&gt;CVa&lt;w1&gt;List&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; that is backed by autoreleased storage, built from the given array of arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オートリリースされるストレージによって裏付けられる&lt;c0&gt;CVa&lt;w1&gt;List&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を返します、いくらかの引数からなる与えられた配列から組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a &lt;c0&gt;Decoder&lt;/c0&gt; instance for decoding &lt;c1&gt;super&lt;/c1&gt; from the container associated with the default &lt;c2&gt;super&lt;/c2&gt; key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Decoder&lt;/c0&gt;インスタンスを、&lt;c1&gt;super&lt;/c1&gt;をデコードするために、省略時&lt;c2&gt;super&lt;/c2&gt;キーと結び付けられるコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a &lt;c0&gt;Decoder&lt;/c0&gt; instance for decoding &lt;c1&gt;super&lt;/c1&gt; from the container associated with the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;super&lt;/c0&gt;をデコードするための&lt;c1&gt;Decoder&lt;/c1&gt;インスタンスを、指定のキーと結び付けられるコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a &lt;c0&gt;Lazy&lt;w1&gt;Map&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; over this &lt;c3&gt;Sequence&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;c3&gt;Sequence&lt;/c3&gt;を覆う&lt;c0&gt;Lazy&lt;w1&gt;Map&lt;w2&gt;Sequence&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether a value is included in a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値が範囲に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスのすべての要素がある与えられた述部を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the decoder contains a value associated with the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーと結び付けられた値をデコーダが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given element is contained within the range expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素がこの範囲式内に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given element is contained within the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素がこの範囲内に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the given object is known to have a single strong reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるブール値を返して、与えられたオブジェクトが１つだけ強い参照を持つことを知られるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同等かどうかを、与えられた述部を同等性テストとして使って指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同じかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された述部を満足させるある要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence contains the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが別のシーケンスの前に来るかどうかをある語彙筆記的順序（字典）順序において、与えられた述部を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (&lt;c0&gt;&lt;&lt;/c0&gt;) to compare elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスが別のシーケンスの前に来るかどうかを、ある語彙筆記的順序（字典）順序において、より小さい演算子（&lt;c0&gt;&lt;&lt;/c0&gt;）を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a UTF-8 continuation byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位がUTF-8継続バイトかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a high or low surrogate code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位が高位または低位サロゲートコード単位かを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a high-surrogate code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位が上位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a low-surrogate code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたコード単位が下位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the string begins with the specified prefix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が指定された接頭辞で始まるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the string ends with the specified suffix.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が指定された接尾辞で終わるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two arguments are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two arguments are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two given values are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the two given values are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより少ないまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の引数の値が２番目の引数のそれより少ないかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance is equal to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが与えられた値と等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance is less than or equal to the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが与えられた値より小さいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance is less than the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスが与えられた値より小さいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスがある昇順ソートにおいて、与えられた値より前にくるまたは同じ位置かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this range and the given range contain an element in common.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲と与えられた範囲がある要素を共通に含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスともう一方のシーケンスが同等の要素を同じ順序で含むかどうかを、与えられた述部を同等テストとして使って、指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスともう一方のシーケンスが同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two optional instances are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのオプショナルインスタンスが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two ranges are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの範囲が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two references point to different object instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの参照が異なるオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two references point to the same object instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの参照が同じオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two sets have equal elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの集合がまったく等しい要素らを持つかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two types are identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型が同一かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two types are not identical.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの型が同一でないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two values are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two values are not equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value indicating whether two vectors are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether a given element is a member of the option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素がオプションセットのメンバであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the given element exists in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素が集合の中の存在するかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set has no members in common with the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられたシーケンスと共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set has no members in common with the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が、与えられた集合と共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set is a strict subset of the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられたシーケンスの狭義の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set is a strict superset of the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられたシーケンスの狭義の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set is a subset of another set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は別の集合の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set is a subset of the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられたシーケンスの下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set is a superset of the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられたシーケンスの上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether the set is a superset of the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合が、与えられた集合の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether this set has no members in common with the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられた集合と共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether this set is a strict subset of the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられた集合の狭義の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether this set is a strict superset of the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられた集合の狭義の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether this set is a subset of the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられた集合の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a Boolean value that indicates whether this set is a superset of the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合は与えられた集合の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a closed range that contains both of its bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの境界の両方を含む完結範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a copy of this range clamped to the given limiting range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた限界範囲に締め金具で留められる（制限を課される）、この範囲のコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a copy of this vector, with elements &lt;c0&gt;other&lt;/c0&gt; in the lanes where &lt;c1&gt;mask&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのコピーを返します、&lt;c0&gt;mask&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;であるところの、レーンの中の要素&lt;c2&gt;other&lt;/c2&gt;を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a copy of this vector, with elements replaced by elements of &lt;c0&gt;other&lt;/c0&gt; in the lanes where &lt;c1&gt;mask&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターのコピーを返します、&lt;c0&gt;mask&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;であるところの、レーンの中の要素&lt;c2&gt;other&lt;/c2&gt;を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a half-open range that contains its lower bound but not its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの下側の境界は含むがそれの上側の境界はそうしない半開範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a human-readable string giving the name of a given encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた符号化の名前を与えている、人間が読む文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lazy sequence of the initial consecutive elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;を満足させる、冒頭の隣接要素からなるある遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lazy sequence that concatenates the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する複数のシーケンスの要素を鎖状に連結する遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lazy sequence that skips any initial elements that satisfy &lt;c0&gt;predicate&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;を満足させる、あらゆる冒頭の要素を省くある遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a lowercase version of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の小文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a mirror that reflects the UTF-16 view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のUTF-16ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a mirror that reflects the UTF-8 view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のUTF-8ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a mirror that reflects the Unicode scalars view of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のユニコードスカラービューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オリジナルのコレクションの要素で与えられた述部を満たすものを、順序正しく、含んでいる同じ型の新しいコレクションを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new instance of the given type, constructed from the raw memory at the specified offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の新しいインスタンスを返します、生のメモリから指定されたオフセットで構築されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new instance of the given type, read from the buffer pointer’s raw memory at the specified byte offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた型の新しいインスタンスを返します、バッファポインタの生のメモリから指定されたバイトオフセットで読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new key path created by appending the given key path to this one.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーパスをこのものに加えることによって作成された新しいキーパスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new option set of the elements contained in this set, in the given set, or in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このセットの中に、与えられたセットの中に、または両方の中に、含まれる要素からなる新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new option set with only the elements contained in both this set and the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このセットと与えられたセットの両方の中に含まれる要素だけを持つ新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new option set with the elements contained in this set or in the given set, but not in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このセットの中にまたは与えられたセットの中に、しかし両方の中にではなく、含まれる要素からなる新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new result, mapping any failure value using the given transformation and unwrapping the produced result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい結果を返します、あらゆる失敗値をこの与えられた変換を使ってマッピングします、そして生成された結果をアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new result, mapping any failure value using the given transformation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい結果を返します、あらゆる失敗値をこの与えられた変換を使ってマッピングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new result, mapping any success value using the given transformation and unwrapping the produced result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい結果を返します、あらゆる成功値をこの与えられた変換を使ってマッピングします、そして生成された結果をアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new result, mapping any success value using the given transformation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい結果を返します、あらゆる成功値をこの与えられた変換を使ってマッピングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set containing the elements of the set that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合の要素で与えられた述部を満たすものを含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set containing the elements of this set that do not occur in the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたシーケンスの中の現れないこの集合の要素を含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set containing the elements of this set that do not occur in the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた集合の中の現れないこの集合の要素を含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set with the elements of both this and the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これと与えられた集合の両方の要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set with the elements of both this set and the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合と与えられたシーケンスの両方の要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set with the elements that are common to both this set and the given sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合と与えられたシーケンスの両方に共通である要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set with the elements that are common to both this set and the given set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合と与えられた集合の両方に共通である要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set with the elements that are either in this set or in the given sequence, but not in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合の中か与えられたシーケンスの中かどちらかの、しかし両方の中にではない要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new set with the elements that are either in this set or in the given set, but not in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合の中か与えられた集合の中かどちらかの、しかし両方の中にではない要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素の間に与えられた分離子を加えて、シーケンスの要素を連結することによる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a newly allocated buffer with the given size, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた大きさで新しくアロケートされたバッファを、バイトで返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下側の境界から上方に拡張している部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range up to, and including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上側の境界までの、そしてそれを含む部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a partial range up to, but not including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの上側の境界までの、しかしそれを含んでいない、部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random element of the collection, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある無作為な要素を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションのある無作為の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value that is less than the given upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた上側の境界より小さい無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value within the specified range, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された範囲内のある無作為な値を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a random value within the specified range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された範囲内のある無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を飛ばすことによるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing all but the given number of final elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の末尾要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の冒頭要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence containing the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence formed from &lt;c0&gt;first&lt;/c0&gt; and repeated lazy applications of &lt;c1&gt;next&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;/c0&gt;からそして繰り返し&lt;c1&gt;next&lt;/c1&gt;を遅延適用して形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence formed from repeated lazy applications of &lt;c0&gt;next&lt;/c0&gt; to a mutable &lt;c1&gt;state&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返し&lt;c0&gt;next&lt;/c0&gt;を可変の&lt;c1&gt;state&lt;/c1&gt;に遅延適用することから形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence from a starting value to, but not including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値まで、しかしそれは含めないシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence from a starting value toward, and possibly including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値の方へ、そしてもしかするとそれを含めるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence of pairs (&lt;e0&gt;n&lt;/e0&gt;, &lt;e1&gt;x&lt;/e1&gt;), where &lt;e2&gt;n&lt;/e2&gt; represents a consecutive integer starting at zero and &lt;e3&gt;x&lt;/e3&gt; represents an element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペア (&lt;e0&gt;n&lt;/e0&gt;, &lt;e1&gt;x&lt;/e1&gt;) のシーケンスを返します、そこで&lt;e2&gt;n&lt;/e2&gt;はゼロで開始する連続した数を表して、&lt;e3&gt;x&lt;/e3&gt;はシーケンスの要素を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された最大長まで、そのシーケンスの冒頭の要素を含んでいる、あるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a specific descendant of the reflected subject, or &lt;c0&gt;nil&lt;/c0&gt; if no such descendant exists.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リフレクションされている主題の特定の子孫を返します、またはそのような子孫が存在しないならば&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた書式設定文字列をテンプレートとして使ってユーザの省略時のロケールに従って残りの引数値がそれに対する代用とされることによって作成される文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string read from standard input through the end of the current line or until EOF is reached.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準入力から現在の行の終わりまでまたはEOFが到達されるまで読み込んだ文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a string representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーの文字列表現を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence by skipping elements while &lt;c0&gt;predicate&lt;/c0&gt; returns &lt;c1&gt;true&lt;/c1&gt; and returning the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;を返す間は要素を飛ばして残りの要素を返すことによって、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の冒頭要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing all but the specified number of final elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された数の末尾要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence containing the initial elements until &lt;c0&gt;predicate&lt;/c0&gt; returns &lt;c1&gt;false&lt;/c1&gt; and skipping the remaining elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;が&lt;c1&gt;false&lt;/c1&gt;を返すまで冒頭の要素を含んでいて残りの要素を飛ばしている、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the specified position to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された位置からコレクションの終わりまでの下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the start of the collection through the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから指定された位置までも含む下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence from the start of the collection up to, but not including, the specified position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから指定された位置まで、しかしそれは含めない下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、シーケンスの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの冒頭の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値で掛ける結果の高および低部分を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the quotient and remainder obtained by dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値で割ることで入手される商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a tuple containing the quotient and remainder of dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値で除算した商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a typed pointer to the memory referenced by this pointer, assuming that the memory is already bound to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリに対する型付ポインタを返します、メモリがすでに指定された型へ束縛されると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a value from a uniform, independent distribution of binary data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリデータの一様な、独立分布からの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a value that is offset the specified distance from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定の隔たりをこの値からオフセットされたある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt; randomly assigned in each lane, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各レーンに無作為に割り当てられる&lt;c0&gt;true&lt;/c0&gt;または&lt;c1&gt;false&lt;/c1&gt;を持つあるベクターを返します、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with &lt;c0&gt;true&lt;/c0&gt; or &lt;c1&gt;false&lt;/c1&gt; randomly assigned in each lane.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各レーンに無作為に割り当てられる&lt;c0&gt;true&lt;/c0&gt;または&lt;c1&gt;false&lt;/c1&gt;を持つあるベクターを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise equality comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位同等比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise greater than comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位大なり比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise greater than or equal comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位大なり同等比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise inequality comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位不等比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise less than comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位小なり比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector mask with the result of a pointwise less than or equal comparison.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポイント単位小なり同等比較の結果を持つベクターマスクを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのレーンにおいてこの指定された範囲内から無作為な値を持つベクターを返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a vector with random values from within the specified range in all lanes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全てのレーンにおいてこの指定された範囲内から無作為な値を持つベクターを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns a view presenting the elements of the collection in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素を逆順に表しているある見方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an Array of the encodings string objects support in the application’s environment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリケーションの環境においてサポートされる符号化文字列オブジェクトの配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果を連結したものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素を逆順に含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the non-&lt;c0&gt;nil&lt;/c0&gt; results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果で非-&lt;c0&gt;nil&lt;/c0&gt;のものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing the results of mapping the given closure over the sequence’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャをシーケンスのもつ要素全体にわたってマップする結果を含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された述部を満足させるものであるシーケンスの要素を、順序通りに、含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します、その隔たりが与えられた限界インデックスを越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an index that is the specified distance from the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an initialized &lt;c0&gt;String&lt;/c0&gt; object that contains a given number of characters from a given array of UTF-16 Code Units</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化された&lt;c0&gt;String&lt;/c0&gt;オブジェクトを返します、それは与えられた数の文字をユニコード文字からなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an initialized &lt;c0&gt;String&lt;/c0&gt; object that contains a given number of characters from a given array of Unicode characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化された&lt;c0&gt;String&lt;/c0&gt;オブジェクトを返します、それは与えられた数の文字をユニコードスカラーからなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator for this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに対するイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the bytes of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスのバイトすべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの要素すべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an iterator over the members of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合のメンバすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an uppercase version of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の大文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the C-string encoding assumed for any method accepting a C string as an argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C文字列を引数として受け入れる何らかのメソッドのために仮定されるC文字列符号化を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the absolute value of the given number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数の絶対値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the additive inverse of the specified value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the bits of the given instance, interpreted as having the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスのビットを返します、指定された型を持つと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素の間に与えられた分離子を挿入して、このシーケンスに属する複数のシーケンスの要素を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the concatenated results of mapping the given transformation over this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた変換をこのシーケンス全体にわたってマッピングする結果を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the contiguous memory footprint of the given instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスの隣接メモリフットプリントを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the data stored for the given key as represented in a container keyed by the given key type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対して格納されるデータを、与えられたキー型によってキー付けされるコンテナの中に表される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the data stored for the given key as represented in an unkeyed container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーに対して格納されるデータを、キー無しコンテナにおいて表現される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the default memory alignment of &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;の省略時のメモリアライメントを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異を返します、与えられた述部を同等性テストとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference needed to produce this collection’s ordered elements from the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値をこの値から減じることで入手される差、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the difference of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の差を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance between two indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのインデックス間の隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the distance from this value to the given value, expressed as a stride.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から特定の値までの隔たりを返します、ストライドとして表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the dynamic type of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の動的型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of &lt;c0&gt;self&lt;/c0&gt; that satisfy &lt;c1&gt;is&lt;w2&gt;Included&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;の要素で&lt;c1&gt;is&lt;w2&gt;Included&lt;/w2&gt;&lt;/c1&gt;を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, shuffled using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素を返します、与えられた生成子を無作為さの出典として使って混ぜ合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, shuffled.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>混ぜ合わされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を要素間の比較として使ってソートされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of the sequence, sorted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスに属する要素を、ソートして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the elements of this sequence of sequences, concatenated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する複数のシーケンスの要素を、鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たすこのシーケンスの最初の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first index in which an element of the collection satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のインデックスで、それにおけるコレクションの要素が与えられた述部を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the first index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値がコレクションにおいて現れるところの最初のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given instance cast unconditionally to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインスタンスを無条件に特定の型にキャストして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given integer as the equivalent value in a different integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた整数を同等値としてある異なる整数型において返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the given number unchanged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた数を変更せずに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greater of the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の大きい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greater of two comparable values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの比較可能な値のうちより大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greatest argument passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡された引数の最も大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the greatest scalar in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの中の最大のスカラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the high-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの上位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the index of the given element in the set, or &lt;c0&gt;nil&lt;/c0&gt; if the element is not a member of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素の集合の中のインデックス、またはその要素が集合のメンバでないならば&lt;c0&gt;nil&lt;/c0&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the index of the last element in the collection that matches the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部に合致する、コレクションの中の最後の要素のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the inverse of the bits set in the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数におけるビットの逆順を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the last element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす、シーケンスの最後の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the last index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された値がコレクションにおいて現れるところの最後のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the least argument passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>渡された引数の最も少ないものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the least scalar in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの中の最小のスカラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the lesser of the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値のより小さい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the lesser of two comparable values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの比較可能な値のうちより小さいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と等しい要素を避けるようにして、このコレクションの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素を含んでいない、このコレクションの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素と等しい要素を避けるようにして、このシーケンスの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた述部を満たす要素を含んでいない、このシーケンスの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the low-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの下位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the maximum element in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the minimum element in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the next consecutive location after &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の後の、以降に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the next consecutive position after &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の後の、以降に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the non-&lt;c0&gt;nil&lt;/c0&gt; results of mapping the given transformation over this sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた変換をこのシーケンス全体にわたってマッピングする非&lt;c0&gt;nil&lt;/c0&gt;の結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the number of UTF-16 code units required for the given code unit sequence when transcoded to UTF-16, and a Boolean value indicating whether the sequence was found to contain only ASCII characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16にコード変換するときに指定されたコードユニットシーケンスに必要とされるUTF-16コードユニットの数を、およびそのシーケンスがASCII文字だけを含むことを発見されたかどうかを指し示すブール値を、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the number of bytes from the start of one instance of &lt;c0&gt;T&lt;/c0&gt; to the start of the next when stored in contiguous memory or in an &lt;c1&gt;Array&lt;T&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;の１つのインスタンスの始まりから次のものの始まりまでのバイト数を返します、隣接メモリの中にまたは&lt;c1&gt;Array&lt;T&gt;&lt;/c1&gt;の中に格納される場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the number of code units required to encode the given Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーをエンコードするのに必要とされるコードユニットの数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the object instance being used for storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストレージのために使われているオブジェクトインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the offset of an inline stored property within a type’s in-memory representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インライン格納プロパティの、ある型のインメモリ表現内部でのオフセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position immediately after the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスの直後の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position immediately before the given index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたインデックスの直前の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given UTF-16 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-16ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given UTF-8 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたUTF-8ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given string that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列の中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the position in the given view of Unicode scalars that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたユニコードスカラーのビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the previous consecutive location before &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;前の、以前に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the product of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と与えられた値の積、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient and remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値で除算されたこの値の商と余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値で割ることで入手される商、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient of dividing the first value by the second, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した商を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the quotient of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した商を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the range of indices described by this range expression within the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコレクション内の、この範囲式によって記述されるインデックスの範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を指定の値によって除算する後の余り、それに加えてオーバーフローが除算の間に起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の値を２番目の値で除算した余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of this value divided by the given value using truncating division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り捨て除算を使って与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の積をこの値に加える結果を返します、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of combining the elements of the sequence using the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャを使って、このシーケンスの要素を結合する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise AND operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise OR operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of performing a bitwise XOR operation on the two given values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をその型の持つビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をマスクしてその型の持つビット幅にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します、シフト量をその型の持つビット幅にマスクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the square root of the value, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の平方根を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the success value as a throwing expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>成功値をスローする式として返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of the scalars in the vector, computed with wrapping addition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの中のスカラーそれらの合計を返します、加算をラップすることで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of the scalars in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの中のスカラーそれらの合計を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの与えられた値の合計を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と与えられた値の合計、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the underlying string from which this Substring was derived.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからこの下位文字列が引き出された基礎をなす文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the value with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より大きい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns the value with lesser magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns this value rounded to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された丸め規則を使って整数値に丸められたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns this value rounded to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「教科書丸め」を使って整数値に丸めたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns whether the given code unit represents an ASCII scalar</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたコード単位が、あるASCIIスカラーを表すかどうかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns whether this string is capable of providing access to validly-encoded UTF-8 contents in contiguous memory in O(1) time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列が、有効に符号化されたUTF-8内容に隣接メモリにおいて O(1) 時間でアクセスを提供する能力があるかどうかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns without performing work if &lt;c0&gt;self&lt;/c0&gt; and &lt;c1&gt;source&lt;/c1&gt; are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;self&lt;/c0&gt;と&lt;c1&gt;source&lt;/c1&gt;が等しいならば、作業を実行することなしに戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reuse the Existing Implementation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>既存の実装を再利用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reverses the elements of the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの要素をその場で逆順にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reversing a Set's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の要素を逆順にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reversing a reversed collection returns the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>逆にされたコレクションを逆にすることは、元のコレクションを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right associative</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right bit shift and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>右ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Right shift operations on negative values “fill in” the high bits with ones instead of zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負値上での右シフト演算は、高ビットを１で「満たします」、ゼロではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value that is greater than or equal to the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ソースより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value that is less than or equal to the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ソースより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value whose magnitude is greater than or equal to that of the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの規模がソースのそれより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value whose magnitude is less than or equal to that of the source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの規模がソースのそれより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value; if two values are equally close, the even one is chosen.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、偶数のものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Round to the closest allowed value; if two values are equally close, the one with greater magnitude is chosen.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、より大きい規模を持つものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rounding Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rounds the value to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された丸め規則を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rounds this value to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「教科書丸め」を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running the analysis on a sufficiently large sample generates an average number near 50 and a failure rate near 50%:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>十分に大きなサンプル上での分析の実行は、50に近い平均数と50%に近い失敗割合を生成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running the code in the example above usually prints the letters in the order &lt;c0&gt;B&lt;/c0&gt; → &lt;c1&gt;C&lt;/c1&gt; → &lt;c2&gt;D&lt;/c2&gt; → &lt;c3&gt;A&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上の例のコードを実行することは、通常は文字をこの順番で出力します、&lt;c0&gt;B&lt;/c0&gt; → &lt;c1&gt;C&lt;/c1&gt; → &lt;c2&gt;D&lt;/c2&gt; → &lt;c3&gt;A&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs &lt;c0&gt;body&lt;/c0&gt; over the content of this string in contiguous memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;を、隣接メモリの中のこの文字列の内容に対して実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs &lt;c0&gt;body&lt;/c0&gt; over the content of this substring in contiguous memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;を、隣接メモリの中のこの下位文字列の内容に対して実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>S() == []</seg>
      </tuv>
      <tuv lang="ja">
        <seg>S() == [] （空の集合は空の配列リテラルと同等です）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMD実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Vector Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクター型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD Vectors</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDベクター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMD-Supporting Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMD支援型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SIMDStorage Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SIMDStorage実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalar values representing characters that are normally unprintable or that otherwise require escaping are escaped with a backslash.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>通常は出力できないまたはそうするにはエスケープする必要がある、スカラー値表現の文字は、バックスラッシュでエスケープされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars are never removed from the Unicode Standard, but the usage of deprecated scalars is strongly discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーは決して「ユニコード標準」から取り除かれません、しかし非推奨のスカラーの使用は強く反対されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars for which this property is &lt;c0&gt;true&lt;/c0&gt; are frequently, but not always, combining marks or modifiers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこのプロパティが&lt;c0&gt;true&lt;/c0&gt;であるスカラーはしばしば、しかし常にではなく、符号または修飾子と組み合わさっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars that have default to emoji presentation can be followed by U+FE0E VARIATION SELECTOR-15 to request the text presentation of the scalar instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>emoji表現が初期状態であるスカラーは、U+FE0E VARIATION SELECTOR-15が後に続くことで、そのスカラーのテキスト表現を代わりに要請できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars with a non-nil numeric type include numbers, fractions, numeric superscripts and subscripts, and circled or otherwise decorated number glyphs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非nilの数値型をもつスカラーは、数字、分数、上付きおよび下付き数字、そして丸またはそれ以外に装飾された数の字体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scalars with this numeric type are often those that represent a decimal digit but would not typically be used to write a base-10 number, such as “④” (U+2463 CIRCLED DIGIT FOUR).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数値型を持つスカラーは、たいてい10進法桁を表すがしかし概して底10の数を記述するのに使われないものです、例えば “④”（U+2463 CIRCLED DIGIT FOUR）など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Screenshot of the Xcode prompt to configure an Objective-C bridging header.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Xcodeのスクリーンショットは、Objective-Cブリッジヘッダを構成設定するよう促します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;Toll-Free Bridging&lt;/a0&gt; for more information.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなる情報のために&lt;a0&gt;Toll-Free Bridging&lt;/a0&gt;を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; for details.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Known&lt;w2&gt;Uniquely&lt;w3&gt;Referenced&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See Also</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also the &lt;c0&gt;ulp&lt;/c0&gt; member property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>また&lt;c0&gt;ulp&lt;/c0&gt;メンバープロパティも見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also the &lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; static property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>また&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;静的プロパティを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also: &lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照：&lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also: &lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, &lt;c3&gt;Lazy&lt;w4&gt;Collection&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照：&lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;、&lt;c3&gt;Lazy&lt;w4&gt;Collection&lt;/w4&gt;&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See also: &lt;c0&gt;elements&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>参照：&lt;c0&gt;elements&lt;/c0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See the &lt;c1&gt;children&lt;/c1&gt; property for details.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;children&lt;/c1&gt;プロパティを詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See the &lt;c2&gt;children&lt;/c2&gt; property for details.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;children&lt;/c2&gt;プロパティを詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See those types for more information.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さらなる情報としてそれらの型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Selecting Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequence Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Sequence 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequence and Collection Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスおよびコレクション演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequence and Collection Protocols</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスおよびコレクションプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequence operations that take closure arguments, such as &lt;c0&gt;map(_:)&lt;/c0&gt; and &lt;c1&gt;filter(_:)&lt;/c1&gt;, are normally eager: They use the closure immediately and return a new array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャ引数をとるシーケンス演算、たとえば&lt;c0&gt;map(_:)&lt;/c0&gt;および&lt;c1&gt;filter(_:)&lt;/c1&gt;は、通常は先行です；それらはクロージャを直ちに使います、そして新しい配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sequences provide access to their elements by creating an iterator, which keeps track of its iteration process and returns one element at a time as it advances through the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>さまざまなシーケンスは、あるイテレータを作成することによってそれらの要素に対するアクセスを提供します、それはそれの反復処理を追跡し続けてそれがそのシーケンスを始めから終わりへと前進するごとに１度に１つ要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Serialize and deserialize instances of your types with implicit or customized encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のインスタンスを暗黙のまたはカスタマイズされたエンコーディングでシリアライズおよびデシリアライズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set &lt;e0&gt;A&lt;/e0&gt; is a strict subset of another set &lt;e1&gt;B&lt;/e1&gt; if every member of &lt;e2&gt;A&lt;/e2&gt; is also a member of &lt;e3&gt;B&lt;/e3&gt; and &lt;e4&gt;B&lt;/e4&gt; contains at least one element that is not a member of &lt;e5&gt;A&lt;/e5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合&lt;e0&gt;A&lt;/e0&gt;がもう１つの集合&lt;e1&gt;B&lt;/e1&gt;の狭義の部分集合であるのは、&lt;e2&gt;A&lt;/e2&gt;のすべてのメンバがまた&lt;e3&gt;B&lt;/e3&gt;のメンバであり、&lt;e4&gt;B&lt;/e4&gt;が少なくとも１つの&lt;e5&gt;A&lt;/e5&gt;のメンバではない要素を含む場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set &lt;e0&gt;A&lt;/e0&gt; is a strict superset of another set &lt;e1&gt;B&lt;/e1&gt; if every member of &lt;e2&gt;B&lt;/e2&gt; is also a member of &lt;e3&gt;A&lt;/e3&gt; and &lt;e4&gt;A&lt;/e4&gt; contains at least one element that is &lt;e5&gt;not&lt;/e5&gt; a member of &lt;e6&gt;B&lt;/e6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合&lt;e0&gt;A&lt;/e0&gt;がもう１つの集合&lt;e1&gt;B&lt;/e1&gt;の狭義の上位集合であるのは、&lt;e2&gt;B&lt;/e2&gt;のすべてのメンバがまた&lt;e3&gt;A&lt;/e3&gt;のメンバであり、&lt;e4&gt;A&lt;/e4&gt;が少なくとも１つの&lt;e6&gt;B&lt;/e6&gt;のメンバでは&lt;e5&gt;ない&lt;/e5&gt;要素を含む場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set &lt;e0&gt;A&lt;/e0&gt; is a subset of another set &lt;e1&gt;B&lt;/e1&gt; if every member of &lt;e2&gt;A&lt;/e2&gt; is also a member of &lt;e3&gt;B&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合&lt;e0&gt;A&lt;/e0&gt;がもう１つの集合&lt;e1&gt;B&lt;/e1&gt;の狭義の部分集合であるのは、&lt;e2&gt;A&lt;/e2&gt;のすべてのメンバがまた&lt;e3&gt;B&lt;/e3&gt;のメンバである場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set &lt;e0&gt;A&lt;/e0&gt; is a superset of another set &lt;e1&gt;B&lt;/e1&gt; if every member of &lt;e2&gt;B&lt;/e2&gt; is also a member of &lt;e3&gt;A&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合&lt;e0&gt;A&lt;/e0&gt;がもう１つの集合&lt;e1&gt;B&lt;/e1&gt;の狭義の上位集合であるのは、&lt;e2&gt;B&lt;/e2&gt;のすべてのメンバがまた&lt;e3&gt;A&lt;/e3&gt;のメンバである場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set Operations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set operations are not limited to use with other sets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合演算は、他の集合との使用に制限されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set&lt;w0&gt;Algebra Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Set&lt;w0&gt;Algebra 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sets</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sets and Dictionaries</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sets provide a suite of mathematical set operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合は、数学的な集合演算のひとそろいを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shuffles the collection in place, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場で混ぜ合わせます、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shuffles the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場で混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signaling NaNs typically raise the Invalid flag when used in general computing operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNは、一般的な計算操作に使われる時に通常は無効フラグをあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signed Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signed&lt;w0&gt;Numeric Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号付き&lt;w0&gt;数関連の実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similar to the &lt;c1&gt;reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/c1&gt; method defined in the standard library, which takes an initial value and a combining closure, &lt;c3&gt;reduce1(_:)&lt;/c3&gt; uses the first element of the sequence as the initial value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期値と結合クロージャをとる、標準ライブラリ定義の&lt;c1&gt;reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/c1&gt;メソッドとよく似て、 &lt;c3&gt;reduce1(_:)&lt;/c3&gt;はシーケンスの最初の要素を初期値として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, you use the availability condition &lt;c1&gt;#available&lt;/c1&gt; to execute code conditionally based on required platform and version conditions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同様に、あなたは利用可能性条件&lt;c1&gt;#available&lt;/c1&gt;を使うことで、必要なプラットホームおよびバージョン条件に基づいて、条件付きでコードを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Simply assign an array literal to a variable or constant with the &lt;c0&gt;Set&lt;/c0&gt; type specified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単にある配列リテラルを&lt;c0&gt;Set&lt;/c0&gt;型指定子を持つ変数または定数に代入してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Inherit Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスは意味論を継承します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slices Share Indices</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスはインデックスを共有します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Slicing with an unbounded range is essentially a conversion of a collection instance into its slice type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無境界範囲でスライスすることは、本質的にあるコレクションインスタンスのそれのスライス型への変換です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Solve complex problems and write high-performance, readable code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複雑な問題を解決します、そして高性能の、読みやすいコードを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some Objective-C APIs—like target-action—accept method or property names as parameters, then use those names to dynamically call or access the methods or properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかのObjective-C API — ターゲットアクションのような — は、メソッドまたはプロパティ名を引数として受け入れます、そのときそれらの名前を使って動的にメソッドまたはプロパティに呼び出しまたはアクセスをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some algorithms, however, may call for direct iterator use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>幾つかのアルゴリズムは、しかしながら、直にイテレータを使うために呼び出すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some characters that are visible in a string are made up of more than one Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列の中に見られるいくつかの文字は、１つ以上のユニコードスカラー値で構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some examples:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some letterlike scalars used in numeric systems, such as Greek or Latin letters, do not have a non-nil numeric type, in order to prevent programs from incorrectly interpreting them as numbers in non-numeric contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数値システムにおいて使われるいくつかの字のようなスカラー、例えばギリシャまたはラテン文字それらは、非nilの数値型を持ちません、その目的はプログラムが非数値文脈においてそれらを間違って数として解釈するのを防ぐことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some operations that are efficient on a dictionary are slower when using &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>辞書に効率の良いいくつかの演算は、&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使う場合により遅くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some other types, such as optionals, arrays and ranges automatically become hashable when their type arguments implement the same.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの他の型、オプショナル、配列および範囲は、自動的にハッシュ化可能になります、それらの型引数が同じものを実装する場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some scalars, such as control characters, do not have a value for this property in the Unicode Character Database.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかのスカラー、例えば制御文字などは、このプロパティに対する値を「ユニコード文字データベース」において持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some special cases apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いくつかの特別な場合が適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you need to preserve the entire result of a function call or other expression that can either throw or return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>時々あなたはスローするまたは値を返すどちらかが可能な関数呼び出しや他の式の結果の全体を保全する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorting Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素のソート（並べ換え）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorting these scalars by their combining classes yields &lt;c1&gt;"\u{0041}\u{0316}\u{0301}"&lt;/c1&gt;, so two strings that differ only by the ordering of those scalars would compare as equal:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラーをそれらの結合クラスによってソートすることは、&lt;c1&gt;"\u{0041}\u{0316}\u{0301}"&lt;/c1&gt;を生み出します、それでこれらのスカラーの順番によってのみ異なる２つの文字列は等しいと比較されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorts the collection in place, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場でソートします、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sorts the collection in place.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをその場でソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special-Use Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊用途のコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special-Use Numeric Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特殊用途の数値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, it does not validate that a high-surrogate code unit precedes &lt;c0&gt;x&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的には、それは高位サロゲートコード単位が&lt;c0&gt;x&lt;/c0&gt;の前にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, it does not validate that a low-surrogate code unit follows &lt;c0&gt;x&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的には、それは低位サロゲートコード単位が&lt;c0&gt;x&lt;/c0&gt;の後にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically, scalars have this numeric type if they occupy a contiguous range of code points representing numeric values &lt;c0&gt;0...9&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的に、スカラーは、もしそれらが数値&lt;c0&gt;0...9&lt;/c0&gt;を表しているコード点の隣接範囲を占有するならば、この数値型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifying the Associated Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関連型を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifying the Identified Item</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同一視される項目を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Splitting a String</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列を分割する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Splitting and Joining Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>要素の分割と連結</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a UTF-16 sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるUTF-16シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a UTF-32 sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるUTF-32シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a UTF-8 sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるUTF-8シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts or continues decoding a code unit sequence into Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コード単位シーケンスをユニコードスカラー値へデコードすることを開始するまたは継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 16 floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 16 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>16整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 32 floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 32 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>32整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 64 floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of 64 integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of eight floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of eight integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>８整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of four floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>４浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of four integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>4整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of two floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２浮動小数点値のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storage for a vector of two integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２整数のベクターに対するストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Store and organize data using arrays, dictionaries, sets, and other data structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列、辞書、集合、および他のデータ構造を使ってデータを格納および組織化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Store your custom types in sets or use them as dictionary keys.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>いろいろなあなたのあつらえの型を集合に格納するまたはそれらを辞書キーとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores a keyed encoding container for the given key and returns it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付けされたエンコーディングコンテナを指定キーに対して供給して、それを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores a value’s bytes into the buffer pointer’s raw memory at the specified byte offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値のもつバイトをバッファポインタのもつ生のメモリに指定されたバイトオフセットで格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores an unkeyed encoding container for the given key and returns it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー付けされないエンコーディングコンテナを指定キーに対して供給して、それを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the given value’s bytes into raw memory at the specified offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値のもつバイトを生のメモリへ指定されたオフセットで格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Storing substrings may, therefore, prolong the lifetime of string data that is no longer otherwise accessible, which can appear to be memory leakage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列の格納は、したがって、それ以外ではもはやアクセスできない文字列データのライフサイクルを延長するでしょう、それはメモリリークとして現れかねません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Streams</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストリーム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strides</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストライド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列バッファは指数成長戦略を使います、それはある文字列へ追加することを、多くの追加演算を平均した時に定数時間演算にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String interpolations give you an easy way to build a string from multiple pieces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間は、多様な断片からある文字列を組み立てる簡単な方法をあなたに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String&lt;w0&gt;Protocol Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>String&lt;w0&gt;プロトコルの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings always have value semantics.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は常に値意味論を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列と文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and Text</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列とテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings and their views share indices, so you can access the UTF-8 view of the &lt;c0&gt;name&lt;/c0&gt; string using the same &lt;c1&gt;first&lt;w2&gt;Space&lt;/w2&gt;&lt;/c1&gt; index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列とそれのビューはインデックスを共有します、それであなたは&lt;c0&gt;name&lt;/c0&gt;文字列のUTF-8ビューにアクセスすることが同じ&lt;c1&gt;first&lt;w2&gt;Space&lt;/w2&gt;&lt;/c1&gt;インデックスを使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでの文字列は、ユニコードに正確でロケールに影響されず、そして効率的であるように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strings in Swift conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol, so the names are sorted in ascending order according to the less-than operator (&lt;c1&gt;&lt;&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列はSwift では&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠します、それでこれらの名前はより小さい演算子（&lt;c1&gt;&lt;&lt;/c1&gt;）によって昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures in Swift can declare methods, property accessors, and initializers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftでの構造体は、メソッド、プロパティアクセッサ、そしてイニシャライザを宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures with Default Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値を持つ構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subclasses must not have any stored properties; any storage needed should be included in &lt;c0&gt;Header&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>サブクラスは、どんな保存プロパティも持つ必要はありません；必要とされるあらゆるストレージは&lt;c0&gt;Header&lt;/c0&gt;の中に含められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subnormal numbers are often called &lt;e0&gt;denormal&lt;/e0&gt; or &lt;e1&gt;denormalized&lt;/e1&gt;—these are different names for the same concept.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>サブノーマル数は、しばしば&lt;e0&gt;デノーマル&lt;/e0&gt;または&lt;e1&gt;デノーマライズされた&lt;/e1&gt;と呼ばれます—それらは同じ概念に対する異なる名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subnormal values do not use the full precision available to values of a type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>サブノーマル値は、ある型の値に利用可能な完全な精度を使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subscripts</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Substrings present the same interface as strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位文字列は、文字列と同じインターフェイスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract and assign</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtract with overflow</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts one value from another and produces their difference, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をもう一方から減じて、それらの差を返します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts one value from another and produces their difference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値をもう一方から減じて、それらの差を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じてその差を左手側の変数の中に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such letters are stored in text ahead of syllable-initial consonants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのような文字は、テキストにおいて音節リテラルの子音の前に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supporting Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補助関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supporting Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>支援を行う型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppresses the representation of all ancestor classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>全ての先祖クラスの表現を抑制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Standard Library</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift Syntax</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフト構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift and Objective-C in the Same Project</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同じプロジェクトの中のSwiftとObjective-C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift automatically imports simple, constant-like macros, declared with the &lt;c0&gt;#define&lt;/c0&gt; directive, as global constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは自動的に簡単に、&lt;c0&gt;#define&lt;/c0&gt;で宣言される、定数のようなマクロをグローバル定数としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift converts an expression like &lt;c9&gt;"The time is \(time)." as My&lt;w10&gt;String&lt;/w10&gt;&lt;/c9&gt; into a series of statements similar to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、&lt;c9&gt;"The time is \(time)." as My&lt;w10&gt;String&lt;/w10&gt;&lt;/c9&gt;のような式を、次のような一連の文に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift deliberately avoids using the term “epsilon” because:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、故意に用語 “イプシロン” を使うのを避けます、なぜなら：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports C unions as Swift structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、C共用体をスウィフト構造体としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports any C structure declared in a C header as a Swift structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、Cヘッダにおいて宣言されるどんなC構造体もスウィフト構造体としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports any function declared in a C header as a Swift global function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトは、Cヘッダにおいて宣言されるどんな関数もスウィフトのグローバルな関数としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports bit fields that are declared in structures, like those found in Foundation’s &lt;c0&gt;NSDecimal&lt;/c0&gt; type, as computed properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、構造体において宣言されるビットフィールド、Foundationの&lt;c0&gt;NSDecimal&lt;/c0&gt;型において見つけられるそれらに似たもの、を計算プロパティとしてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports each object instance parameter, return value, and property as an implicitly wrapped optional:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、オブジェクトインスタンスパラメータ、戻り値、そしてプロパティそれぞれを暗黙的にラップされたオプショナルとしてインポートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift imports the type the same way as in the previous section.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、その型を以前の節と同じ方法でインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift makes it as easy to create a new set as to create a new array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、新しい集合を作成することを新しい配列を作成するのと同じくらい簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift numeric types (&lt;c0&gt;Int&lt;/c0&gt;, &lt;c1&gt;Float&lt;/c1&gt;, and so on)</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift数値型（&lt;c0&gt;Int&lt;/c0&gt;、&lt;c1&gt;Float&lt;/c1&gt;、など）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift only imports C variadic functions that use a &lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt; for their arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、C可変長引数関数で、&lt;c0&gt;va&lt;w1&gt;_list&lt;/w1&gt;&lt;/c0&gt;をそれの引数として使うものをインポートするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftはこのイニシャライザに、リテラル文節のサイズと補間文節の数を指定する一対の引数を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift sees every header you expose publicly in your umbrella header.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、あなたがパブリックにあなたのアンブレラヘッダにおいて露出するすべてのヘッダを見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift streamlines interoperation with C string APIs by letting you pass a &lt;c0&gt;String&lt;/c0&gt; instance to a function as an &lt;c1&gt;Int8&lt;/c1&gt; or &lt;c2&gt;UInt8&lt;/c2&gt; pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、あなたに&lt;c0&gt;String&lt;/c0&gt;インスタンスを関数へ&lt;c1&gt;Int8&lt;/c1&gt;または&lt;c2&gt;UInt8&lt;/c2&gt;ポインタとして渡させることによって、C文字列APIとの相互作用を能率化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift uses a sequence’s or collection’s iterator internally to enable the &lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt; loop language construct.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、あるシーケンスのもつまたはコレクションのもつイテレータを内部的に使うことで、&lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt;ループ言語構成体を可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift value type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift wraps these returned Core Foundation objects in an &lt;a0&gt;&lt;c1&gt;Unmanaged&lt;/c1&gt;&lt;/a0&gt;&lt;c2&gt;&lt;Instance&gt;&lt;/c2&gt; structure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftは、これらの返されたCore Foundationオブジェクトを &lt;a0&gt;&lt;c1&gt;Unmanaged&lt;/c1&gt;&lt;/a0&gt;&lt;c2&gt;&lt;Instance&gt;&lt;/c2&gt;構造体でラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift’s &lt;c7&gt;String&lt;/c7&gt; type conforms to &lt;c8&gt;Text&lt;w9&gt;Output&lt;w10&gt;Stream&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; already, so you can capture the output from &lt;c11&gt;print(_:&lt;w12&gt;to:)&lt;/w12&gt;&lt;/c11&gt; and &lt;c13&gt;dump(_:&lt;w14&gt;to:)&lt;/w14&gt;&lt;/c13&gt; in a string instead of logging it to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftの&lt;c7&gt;String&lt;/c7&gt;型は、すでに&lt;c8&gt;Text&lt;w9&gt;Output&lt;w10&gt;Stream&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;に準拠します、なのであなたは&lt;c11&gt;print(_:&lt;w12&gt;to:)&lt;/w12&gt;&lt;/c11&gt;および&lt;c13&gt;dump(_:&lt;w14&gt;to:)&lt;/w14&gt;&lt;/c13&gt;からの出力を文字列の中に捕えることが、それを標準出力に記録する代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Swift’s type system usually shows the wrapped type’s name with a trailing question mark (&lt;c2&gt;?&lt;/c2&gt;) instead of showing the full type name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftのもつ型システムは通常、ラップされた型の名前を後に続く疑問符（&lt;c2&gt;?&lt;/c2&gt;）で示します、完全な型の名前を示す代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ternary conditional</seg>
      </tuv>
      <tuv lang="ja">
        <seg>三項条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing for Membership</seg>
      </tuv>
      <tuv lang="ja">
        <seg>帰属をテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Text Output</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テキスト出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That argument list can include multiple arguments and argument labels.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数リストは、複数の引数そして引数ラベルを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for a mutable collection instance &lt;c2&gt;a&lt;/c2&gt;, index &lt;c3&gt;i&lt;/c3&gt;, and value &lt;c4&gt;x&lt;/c4&gt;, the two sets of assignments in the following code sample must be equivalent:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、ある可変コレクションインスタンス&lt;c2&gt;a&lt;/c2&gt;、インデックス&lt;c3&gt;i&lt;/c3&gt;、そして値&lt;c4&gt;x&lt;/c4&gt;に対して、以下のコード見本における２組の代入は同等なものでなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any elements &lt;c1&gt;a&lt;/c1&gt;, &lt;c2&gt;b&lt;/c2&gt;, and &lt;c3&gt;c&lt;/c3&gt;, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、何らかの要素&lt;c1&gt;a&lt;/c1&gt;、&lt;c2&gt;b&lt;/c2&gt;、そして&lt;c3&gt;c&lt;/c3&gt;に対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, for any elements &lt;c5&gt;a&lt;/c5&gt;, &lt;c6&gt;b&lt;/c6&gt;, and &lt;c7&gt;c&lt;/c7&gt;, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、何らかの要素&lt;c5&gt;a&lt;/c5&gt;、&lt;c6&gt;b&lt;/c6&gt;、そして&lt;c7&gt;c&lt;/c7&gt;に対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if &lt;c2&gt;source&lt;/c2&gt; is negative, the result is padded with ones; otherwise, the result is padded with zeros.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c2&gt;source&lt;/c2&gt;が負ならば、結果は１で詰め物をされます；そうでなければ、結果はゼロで詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, if a &lt;c0&gt;Slice&lt;/c0&gt; instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>すなわち、&lt;c0&gt;Slice&lt;/c0&gt;インスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That kind of conversion is nonbreaking in other contexts, but would trigger a runtime error if the result of &lt;c3&gt;offset(of:)&lt;/c3&gt; is force-unwrapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その種の変換は、他の文脈においては非破壊です、しかし&lt;c3&gt;offset(of:)&lt;/c3&gt;の結果が強制アンラップされるならば実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That requirement holds even for empty ranges.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その要件は空の範囲に対しても適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That way, Swift can handle memory management for you.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのように、スウィフトはあなたの代わりにメモリ管理をうまく取り扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The 64-bit integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるデータ値の中にラップされる64ビット整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;a0&gt;IEEE 754 specification&lt;/a0&gt; defines a &lt;e1&gt;canonical&lt;/e1&gt;, or preferred, encoding of a floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;a0&gt;IEEE 754仕様&lt;/a0&gt;は、ある&lt;e1&gt;正準の&lt;/e1&gt;、または推奨の、浮動小数点値のエンコーディングを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&amp;&lt;&lt;=&lt;/c0&gt; operator performs a &lt;e1&gt;masking shift&lt;/e1&gt;, where the value used as &lt;c2&gt;rhs&lt;/c2&gt; is masked to produce a value in the range &lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&amp;&lt;&lt;=&lt;/c0&gt;演算子は、&lt;e1&gt;マスクするシフト&lt;/e1&gt;を実行します、そこにおいて&lt;c2&gt;rhs&lt;/c2&gt;として使われる値はマスクされることで範囲&lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&amp;&gt;&gt;=&lt;/c0&gt; operator performs a &lt;e1&gt;masking shift&lt;/e1&gt;, where the value passed as &lt;c2&gt;rhs&lt;/c2&gt; is masked to produce a value in the range &lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&amp;&gt;&gt;=&lt;/c0&gt;演算子は、&lt;e1&gt;マスクするシフト&lt;/e1&gt;を実行します、そこにおいて&lt;c2&gt;rhs&lt;/c2&gt;として渡される値はマスクされることで範囲&lt;c3&gt;0..&lt;lhs&lt;w4&gt;.bit&lt;w5&gt;Width&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;の中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;*&lt;/c0&gt; operator implements the multiplication operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;*&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される乗算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;+&lt;/c0&gt; operator implements the addition operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;+&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される加算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;-&lt;/c0&gt; operator implements the subtraction operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;-&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される減算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;/&lt;/c0&gt; operator implements the division operation defined by the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;/&lt;/c0&gt;演算子は、&lt;a1&gt;IEEE 754 仕様&lt;/a1&gt;によって定義される除算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&lt;&lt;&lt;/c0&gt; operator performs a &lt;e1&gt;smart shift&lt;/e1&gt;, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&lt;&lt;&lt;/c0&gt;演算子は、ある&lt;e1&gt;賢いシフト&lt;/e1&gt;を実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&gt;&gt;&lt;/c0&gt; operator performs a &lt;e1&gt;smart shift&lt;/e1&gt;, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&gt;&gt;&lt;/c0&gt;演算子は、ある&lt;e1&gt;賢いシフト&lt;/e1&gt;を実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;&gt;&gt;=&lt;/c0&gt; operator performs a &lt;e1&gt;smart shift&lt;/e1&gt;, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;&gt;&gt;=&lt;/c0&gt;演算子は、ある&lt;e1&gt;賢いシフト&lt;/e1&gt;を実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;??&lt;/c0&gt; operator also works with another &lt;c1&gt;Optional&lt;/c1&gt; instance on the right-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;??&lt;/c0&gt;演算子はまた、別の&lt;c1&gt;Optional&lt;/c1&gt;インスタンスを右手側でも扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;ASCIILogger&lt;/c0&gt; type’s &lt;c1&gt;write(_:)&lt;/c1&gt; method processes its string input by escaping each Unicode scalar, with the exception of &lt;c2&gt;"\n"&lt;/c2&gt; line returns.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ASCIILogger&lt;/c0&gt;型のもつ&lt;c1&gt;write(_:)&lt;/c1&gt;メソッドは、それの文字列入力を各ユニコードスカラーをエスケープすることによって処理します、&lt;c2&gt;"\n"&lt;/c2&gt;行復帰を除いては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Base&lt;/c0&gt; (presumably non-lazy) sequence from which &lt;c1&gt;self&lt;/c1&gt; was created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それから&lt;c0&gt;self&lt;/c0&gt;が作成された&lt;c1&gt;Base&lt;/c1&gt;（おそらく非遅延の）シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Canonical&lt;w1&gt;Combining&lt;w2&gt;Class&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type conforms to &lt;c3&gt;Raw&lt;w4&gt;Representable&lt;/w4&gt;&lt;/c3&gt; with a raw value of type &lt;c5&gt;UInt8&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Canonical&lt;w1&gt;Combining&lt;w2&gt;Class&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型は、&lt;c3&gt;Raw&lt;w4&gt;Representable&lt;/w4&gt;&lt;/c3&gt;に型&lt;c5&gt;UInt8&lt;/c5&gt;の生の値で準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; structure is a fixed-size collection that always holds two elements of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;c0&gt;Collection&lt;w1&gt;Of&lt;w2&gt;Two&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;構造体は固定サイズのコレクションです、それは常にある決まった型の２つの要素を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Date&lt;/c0&gt; type can now be used with the &lt;c1&gt;stride(from:&lt;w2&gt;to:&lt;w3&gt;by:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;stride(from:&lt;w5&gt;through:&lt;w6&gt;by:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; functions and as the bounds of an iterable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Date&lt;/c0&gt;型は、今では&lt;c1&gt;stride(from:&lt;w2&gt;to:&lt;w3&gt;by:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;および&lt;c4&gt;stride(from:&lt;w5&gt;through:&lt;w6&gt;by:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;関数でそして反復可能な範囲の境界として使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol adds binary bitwise operations, bit shifts, and overflow handling to the operations supported by the &lt;c3&gt;Binary&lt;w4&gt;Integer&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルは、バイナリビット単位演算子、ビットシフト、そしてオーバーフロー処理を、&lt;c3&gt;Binary&lt;w4&gt;Integer&lt;/w4&gt;&lt;/c3&gt;プロトコルによってサポートされる演算に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol declares common arithmetic operations, so you can write functions and algorithms that work on any floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルは通常の算術演算子を宣言します、それであなたは何らかの浮動小数点型上で働く関数およびアルゴリズムを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Indexing&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt; type is the default iterator for any collection that doesn’t declare its own.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Indexing&lt;w1&gt;Iterator&lt;/w1&gt;&lt;/c0&gt;型は、それ独自のものを宣言しないあらゆるコレクションに対する省略時のイテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt; protocol is tightly linked with the &lt;c2&gt;Sequence&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;プロトコルは、&lt;c2&gt;Sequence&lt;/c2&gt;プロトコルときつく結び付けられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; protocol allows changing the values of a collection’s elements but not the length of the collection itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;プロトコルは、コレクションのもつ要素の値の変更を可能にします、しかしコレクション自体の長さはそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt; macro is the only enumeration macro that results in an actual enumeration type when imported to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt;マクロは、Swiftにインポートされる場合に実際の列挙型という結果になるただ１つの列挙マクロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Numeric&lt;/c0&gt; protocol provides a suitable basis for arithmetic on scalar values, such as integers and floating-point numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Numeric&lt;/c0&gt;プロトコルは、例えば整数および浮動小数点数など、スカラー値に関する算術にふさわしい基礎を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Optional&lt;/c0&gt; type is an enumeration with two cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Optional&lt;/c0&gt;型は、２つのケース節を持つ列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Playground&lt;w1&gt;Quick&lt;w2&gt;Look&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol is deprecated, and will be removed from the standard library in a future Swift release.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Playground&lt;w1&gt;Quick&lt;w2&gt;Look&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルは推奨されません、そして将来のSwiftリリースで標準ライブラリから取り除かれるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol adds further constraints on the associated &lt;c3&gt;Indices&lt;/c3&gt; and &lt;c4&gt;Sub&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/c4&gt; types, but otherwise imposes no additional requirements over the &lt;c6&gt;Bidirectional&lt;w7&gt;Collection&lt;/w7&gt;&lt;/c6&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルは、一層の制約を関連&lt;c3&gt;Indices&lt;/c3&gt;および&lt;c4&gt;Sub&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/c4&gt;型に加えます、しかしそれ以外では&lt;c6&gt;Bidirectional&lt;w7&gt;Collection&lt;/w7&gt;&lt;/c6&gt;プロトコルを越える追加要件は課されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt; protocol is seen mainly in two categories of types: enumerations with raw value types and option sets.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;プロトコルが主に見られるのは、２つの部類の型：列挙で生の値型を持つものとオプションセットにおいてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;SIMDStorage&lt;/c0&gt; protocol defines a storage layout and provides elementwise accesses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;SIMDStorage&lt;/c0&gt;プロトコルは、ストレージレイアウトを定義します、そして要素単位のアクセスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Sandwich&lt;w1&gt;Preferences&lt;/w1&gt;&lt;/c0&gt; class and its &lt;c2&gt;includes&lt;w3&gt;Crust&lt;/w3&gt;&lt;/c2&gt; property are renamed to &lt;c4&gt;Sandwich&lt;w5&gt;.Preferences&lt;/w5&gt;&lt;/c4&gt; and &lt;c6&gt;is&lt;w7&gt;Crusty&lt;/w7&gt;&lt;/c6&gt; for Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Sandwich&lt;w1&gt;Preferences&lt;/w1&gt;&lt;/c0&gt;クラスとそれの&lt;c2&gt;includes&lt;w3&gt;Crust&lt;/w3&gt;&lt;/c2&gt;プロパティは、&lt;c4&gt;Sandwich&lt;w5&gt;.Preferences&lt;/w5&gt;&lt;/c4&gt;と&lt;c6&gt;is&lt;w7&gt;Crusty&lt;/w7&gt;&lt;/c6&gt;へとSwiftのために改名されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Sequence&lt;/c0&gt; protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O(&lt;e1&gt;n&lt;/e1&gt;) unless documented otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルは要素アクセスについて他の要件を設けません、それでシーケンスを辿っていくおきまりの仕事はO(&lt;e1&gt;n&lt;/e1&gt;)と考えるべきです、そうでないと文書化されるのでない限り。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Sequence&lt;/c0&gt; protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルは、準拠する型に関して、それらが反復によって破壊的に消費されることになるかについて要件を設けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Sequence&lt;/c0&gt; protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルは、シーケンスのもつ値への順次的なアクセスを頼りにするような多くの一般的な演算に対して省略時の実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Signed&lt;w1&gt;Numeric&lt;/w1&gt;&lt;/c0&gt; protocol extends the operations defined by the &lt;c2&gt;Numeric&lt;/c2&gt; protocol to include a value’s additive inverse.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Signed&lt;w1&gt;Numeric&lt;/w1&gt;&lt;/c0&gt;プロトコルは、&lt;c2&gt;Numeric&lt;/c2&gt;プロトコルによって定義される演算を拡張して、値の加法の逆元を含めるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Stride&lt;/c0&gt; type for &lt;c1&gt;Date&lt;/c1&gt; is &lt;c2&gt;Int&lt;/c2&gt;, inferred from the parameter and return types of &lt;c3&gt;advanced(by:)&lt;/c3&gt; and &lt;c4&gt;distance(to:)&lt;/c4&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Date&lt;/c0&gt;のための&lt;c1&gt;Stride&lt;/c1&gt;型は&lt;c2&gt;Int&lt;/c2&gt;です、パラメータと戻り値の&lt;c3&gt;advanced(by:)&lt;/c3&gt;と&lt;c4&gt;distance(to:)&lt;/c4&gt;から推論されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Strideable&lt;/c0&gt; protocol provides default implementations for the equal-to (&lt;c1&gt;==&lt;/c1&gt;) and less-than (&lt;c2&gt;&lt;&lt;/c2&gt;) operators that depend on the &lt;c3&gt;Stride&lt;/c3&gt; type’s implementations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Strideable&lt;/c0&gt;プロトコルは、省略時の実装を同等（&lt;c1&gt;==&lt;/c1&gt;）およびより小さい（&lt;c2&gt;&lt;&lt;/c2&gt;）演算子に対して、&lt;c3&gt;Stride&lt;/c3&gt;型の実装に依存して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;String&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt; type is responsible for collecting the segments passed to its &lt;c2&gt;append&lt;w3&gt;Literal(_:)&lt;/w3&gt;&lt;/c2&gt; and &lt;c4&gt;append&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/c4&gt; methods and assembling them into a whole, converting as necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;型は、それの&lt;c2&gt;append&lt;w3&gt;Literal(_:)&lt;/w3&gt;&lt;/c2&gt;と&lt;c4&gt;append&lt;w5&gt;Interpolation&lt;/w5&gt;&lt;/c4&gt;メソッドに渡される文節を集めること、そしてそれらをある全体へと、必要に応じて変換して、組み立てることに責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; of an interpolation type must match the &lt;c3&gt;String&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間型の&lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、準拠している型の&lt;c3&gt;String&lt;w4&gt;Literal&lt;w5&gt;Type&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;と合致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;UTF16View&lt;/c0&gt; in which to find the new position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいて新しい位置を見つける&lt;c0&gt;UTF16View&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;UTF8View&lt;/c0&gt; in which to find the new position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいて新しい位置を見つける&lt;c0&gt;UTF8View&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; type, representing a single Unicode scalar value, is the element type of a string’s &lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt; collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値を表している、&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;型は、ある文字列のもつ&lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;コレクションの要素型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unicode&lt;w1&gt;Codec&lt;/w1&gt;&lt;/c0&gt; protocol declares methods that decode code unit sequences into Unicode scalar values and encode Unicode scalar values into code unit sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unicode&lt;w1&gt;Codec&lt;/w1&gt;&lt;/c0&gt;プロトコルは、コード単位シーケンスをユニコードスカラー値へデコードする、ユニコードスカラー値をコード単位シーケンスへエンコードするメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unicode&lt;w1&gt;Scalar&lt;w2&gt;View&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; in which to find the new position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいて新しい位置を見つける&lt;c0&gt;Unicode&lt;w1&gt;Scalar&lt;w2&gt;View&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unmanaged&lt;Instance&gt;&lt;/c0&gt; structure provides two methods to convert an unmanaged object to a memory-managed object—&lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;take&lt;w5&gt;Retained&lt;w6&gt;Value()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unmanaged&lt;Instance&gt;&lt;/c0&gt;構造体は、２つのメソッドを、管理されないオブジェクトをメモリ管理されたオブジェクトに変換するために提供します ― &lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;と&lt;c4&gt;take&lt;w5&gt;Retained&lt;w6&gt;Value()&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type provides no automated memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型は、自動メモリ管理、型安全、そしてアライメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type provides no automated memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型は、自動メモリ管理、型安全、そしてアライメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;adjective&lt;/c0&gt; constant is created by calling this initializer with a slice of the &lt;c1&gt;picnic&lt;w2&gt;Guest&lt;w3&gt;.unicode&lt;w4&gt;Scalars&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;adjective&lt;/c0&gt;定数は、このイニシャライザを&lt;c1&gt;picnic&lt;w2&gt;Guest&lt;w3&gt;.unicode&lt;w4&gt;Scalars&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;ビューのスライスとともに呼び出すことによって作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt; methods in your custom type must be mutating instance methods that return &lt;c2&gt;Void&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型における&lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;c2&gt;Void&lt;/c2&gt;を返す変更インスタンスメソッドでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;binary&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt; implementation uses the static &lt;c2&gt;bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/c2&gt; property and the right shift operator (&lt;c4&gt;&gt;&gt;&lt;/c4&gt;), both of which are available to any type that conforms to the &lt;c5&gt;Fixed&lt;w6&gt;Width&lt;w7&gt;Integer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;binary&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;実装は、静的&lt;c2&gt;bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/c2&gt;プロパティと右シフト演算子（&lt;c4&gt;&gt;&gt;&lt;/c4&gt;）を使います、それらの両方とも&lt;c5&gt;Fixed&lt;w6&gt;Width&lt;w7&gt;Integer&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;プロトコルに準拠するあらゆる型で使用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;cafe&lt;/c0&gt; string is a collection of the nine characters that are visible when the string is displayed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;cafe&lt;/c0&gt;文字列は、９つの文字からなる１つのコレクションで、その文字列が表示される時に見られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;children&lt;/c0&gt; collection of the resulting mirror may be upgraded to a random access collection later.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるミラーの&lt;c0&gt;children&lt;/c0&gt;コレクションは、後にランダムアクセスコレクションにアップグレードされるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property of an &lt;c2&gt;Unsafe&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance is always identical to &lt;c5&gt;count&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティは、常に&lt;c5&gt;count&lt;/c5&gt;と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property of an &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance is always identical to &lt;c6&gt;count&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティは、常に&lt;c6&gt;count&lt;/c6&gt;と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property of an &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Buffer&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance is always identical to &lt;c7&gt;count&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Buffer&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティは、常に&lt;c7&gt;count&lt;/c7&gt;と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property of an &lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance is always identical to &lt;c6&gt;count&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスの&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティは、常に&lt;c6&gt;count&lt;/c6&gt;と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;exponent&lt;/c0&gt; property has the following edge cases:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;exponent&lt;/c0&gt;プロパティは、次の境界事例を持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;fetch&lt;w1&gt;Remote&lt;w2&gt;Random&lt;w3&gt;Number(completion:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method returns &lt;c4&gt;Void&lt;/c4&gt; synchronously, and asynchronously calls a completion handler with a &lt;c5&gt;Result&lt;Int, Entropy&lt;w6&gt;Error&gt;&lt;/w6&gt;&lt;/c5&gt; instance that contains either a random result or information about the failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;fetch&lt;w1&gt;Remote&lt;w2&gt;Random&lt;w3&gt;Number(completion:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;c4&gt;Void&lt;/c4&gt;を同期的に返します、そして非同期に完了ハンドラを&lt;c5&gt;Result&lt;Int, Entropy&lt;w6&gt;Error&gt;&lt;/w6&gt;&lt;/c5&gt;インスタンスとともに呼び出します、それはある無作為な結果またはその失敗についての情報のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;first&lt;w1&gt;Name&lt;/w1&gt;&lt;/c0&gt; constant is an instance of the &lt;c2&gt;Substring&lt;/c2&gt; type—a type that represents substrings of a string while sharing the original string’s storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;first&lt;w1&gt;Name&lt;/w1&gt;&lt;/c0&gt;定数は、&lt;c2&gt;Substring&lt;/c2&gt;型 — ある文字列の下位文字列をオリジナル文字列のもつストレージを共有している間に表す型のインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;hash(into:)&lt;/c0&gt; method in this example feeds the grid point’s &lt;c1&gt;x&lt;/c1&gt; and &lt;c2&gt;y&lt;/c2&gt; properties into the provided hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;hash(into:)&lt;/c0&gt;メソッドはこの例において、格子点のもつ&lt;c1&gt;x&lt;/c1&gt;と&lt;c2&gt;y&lt;/c2&gt;プロパティをその提供されたhasherへと与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;high&lt;/c0&gt; component of the value carries the sign, if the type is signed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の&lt;c0&gt;high&lt;/c0&gt;構成部分は符号を運びます、その型が符号付きならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Equal(to:)&lt;/w1&gt;&lt;/c0&gt; method implements the equality predicate defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Equal(to:)&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;によって定義される同等性述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Less(than:)&lt;/w1&gt;&lt;/c0&gt; method implements the less-than predicate defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Less(than:)&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;によって定義される「より少ない」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Less&lt;w2&gt;Than&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method implements the less-than-or-equal predicate defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Less&lt;w2&gt;Than&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To(_:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義される「より少ないか等しい」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method implements the total order relation as defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、全順序関係を&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義されるとおりに実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;is&lt;w1&gt;Zero&lt;/w1&gt;&lt;/c0&gt; property of a value &lt;c2&gt;x&lt;/c2&gt; is &lt;c3&gt;true&lt;/c3&gt; when &lt;c4&gt;x&lt;/c4&gt; represents either &lt;c5&gt;-0&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt; or &lt;c7&gt;+0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値&lt;c2&gt;x&lt;/c2&gt;の&lt;c0&gt;is&lt;w1&gt;Zero&lt;/w1&gt;&lt;/c0&gt;プロパティが&lt;c3&gt;true&lt;/c3&gt;であるのは、&lt;c4&gt;x&lt;/c4&gt;が&lt;c5&gt;-0&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;または&lt;c7&gt;+0&lt;w8&gt;.0&lt;/w8&gt;&lt;/c7&gt;のどちらかを表す場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;joined&lt;/c0&gt; method is always lazy, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;joined&lt;/c0&gt;メソッドは常に遅延です、しかしそれの結果に適用されるアルゴリズム上に、遅延性を暗黙的に授けられません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;logged&lt;w1&gt;In&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;session&lt;w3&gt;Expired&lt;/w3&gt;&lt;/c2&gt; cases include the user as an associated value, while the &lt;c4&gt;unregistered&lt;/c4&gt; case doesn't include an associated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;logged&lt;w1&gt;In&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;session&lt;w3&gt;Expired&lt;/w3&gt;&lt;/c2&gt;ケース節はユーザを関連値として含みます、一方で&lt;c4&gt;unregistered&lt;/c4&gt;ケース節は関連値を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt; method returns another custom type, an iterator named &lt;c2&gt;Countdown&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;make&lt;w1&gt;Iterator()&lt;/w1&gt;&lt;/c0&gt;メソッドは、別のあつらえの型、&lt;c2&gt;Countdown&lt;w3&gt;Iterator&lt;/w3&gt;&lt;/c2&gt;と名前をつけられるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;maximum&lt;/c0&gt; method implements the &lt;c1&gt;max&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a3&gt;IEEE 754 specification&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;maximum&lt;/c0&gt;メソッドは、&lt;a3&gt;IEEE 754仕様&lt;/a3&gt;によって定義される&lt;c1&gt;max&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;maximum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt; method implements the &lt;c2&gt;max&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; operation defined by the &lt;a5&gt;IEEE 754 specification&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;maximum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a5&gt;IEEE 754仕様&lt;/a5&gt;によって定義される&lt;c2&gt;max&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;minimum&lt;/c0&gt; method implements the &lt;c1&gt;min&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a3&gt;IEEE 754 specification&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;minimum&lt;/c0&gt;メソッドは&lt;c1&gt;min&lt;w2&gt;Num&lt;/w2&gt;&lt;/c1&gt;演算を実装します、それは&lt;a3&gt;IEEE 754仕様&lt;/a3&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;minimum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt; method implements the &lt;c2&gt;min&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; operation defined by the &lt;a5&gt;IEEE 754 specification&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;minimum&lt;w1&gt;Magnitude&lt;/w1&gt;&lt;/c0&gt;メソッドは、&lt;a5&gt;IEEE 754仕様&lt;/a5&gt;によって定義される&lt;c2&gt;min&lt;w3&gt;Num&lt;w4&gt;Mag&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;name&lt;w1&gt;Alias&lt;/w1&gt;&lt;/c0&gt; property is provided to issue corrections if a name was issued erroneously.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;name&lt;w1&gt;Alias&lt;/w1&gt;&lt;/c0&gt;プロパティは、ある名前が不正確に発行されたならば、訂正を発行するために提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called sequentially with an accumulating value initialized to &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャは、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;に初期化された蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called with &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;—&lt;c5&gt;0&lt;/c5&gt; in this case—and the first element of &lt;c6&gt;numbers&lt;/c6&gt;, returning the sum: &lt;c7&gt;1&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Partial&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャが、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;—この場合では&lt;c5&gt;0&lt;/c5&gt;と&lt;c6&gt;numbers&lt;/c6&gt;の最初の要素とともに呼び出されて、その合計：&lt;c7&gt;1&lt;/c7&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;now(_:)&lt;/c0&gt; and &lt;c1&gt;later(_:)&lt;/c1&gt; functions represent the two most common categories of APIs you'll encounter in methods from app frameworks that take closures: synchronous APIs like &lt;c2&gt;now(_:)&lt;/c2&gt;, and asynchronous APIs like &lt;c3&gt;later(_:)&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;now(_:)&lt;/c0&gt;と&lt;c1&gt;later(_:)&lt;/c1&gt;関数は、クロージャを取るアプリフレームワーク由来のメソッドにおいてあなたが出くわす、２つの最も一般的なAPIのカテゴリを表します：&lt;c2&gt;now(_:)&lt;/c2&gt;のような同期的API、そして&lt;c3&gt;later(_:)&lt;/c3&gt;のような非同期的API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;nullable&lt;/c0&gt; and &lt;c1&gt;nonnull&lt;/c1&gt; annotations are simplified forms of the &lt;c2&gt;_Nullable&lt;/c2&gt; and &lt;c3&gt;_Nonnull&lt;/c3&gt; annotations, which you can use in almost any context that you would use the &lt;c4&gt;const&lt;/c4&gt; keyword with a pointer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;nullable&lt;/c0&gt;と&lt;c1&gt;nonnull&lt;/c1&gt;注釈は、&lt;c2&gt;_Nullable&lt;/c2&gt;と&lt;c3&gt;_Nonnull&lt;/c3&gt;注釈の簡素化された形式です、それはあなたが&lt;c4&gt;const&lt;/c4&gt;キーワードをポインタ型とともに使うであろう、ほとんどあらゆる文脈で使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;numbers&lt;/c0&gt; array is now arranged in two partitions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;numbers&lt;/c0&gt;配列は今や２つの区分に整頓されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;r1&lt;/c0&gt; range is bounded on the lower end by &lt;c1&gt;0&lt;/c1&gt; because that is the starting index of the &lt;c2&gt;numbers&lt;/c2&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;r1&lt;/c0&gt;範囲は、&lt;c1&gt;0&lt;/c1&gt;によって下端に境界をつけられます、なぜならそれが&lt;c2&gt;numbers&lt;/c2&gt;配列の開始インデックスだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;random()&lt;/c0&gt; static method chooses a random value from a continuous uniform distribution in &lt;c1&gt;range&lt;/c1&gt;, and then converts that value to the nearest representable value in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random()&lt;/c0&gt;静的メソッドは無作為の値を&lt;c1&gt;range&lt;/c1&gt;の中の連続一様分布から選びます、それからその値をその型で表現可能な最も近い値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt; static method chooses a random value from a continuous uniform distribution in &lt;c2&gt;range&lt;/c2&gt;, and then converts that value to the nearest representable value in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;静的メソッドは無作為の値を&lt;c2&gt;range&lt;/c2&gt;の中の連続一様分布から選びます、それからその値をその型で表現可能な最も近い値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;reduce1(_:)&lt;/c0&gt; method makes certain kinds of sequence operations simpler.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reduce1(_:)&lt;/c0&gt;メソッドは、特定の種類のシーケンス演算をより簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;reversed()&lt;/c0&gt; method is always lazy when applied to a collection with bidirectional indices, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x.reversed()&lt;/c0&gt;メソッドは、双方向性のインデックスを持つコレクションに適用される時は常に遅延です、しかしそれの結果に適用されるアルゴリズムに暗黙的に遅延性を授けることはしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;round()&lt;/c0&gt; method uses the &lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;round()&lt;/c0&gt;メソッドは&lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;rounded()&lt;/c0&gt; method uses the &lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rounded()&lt;/c0&gt;メソッドは&lt;c1&gt;.to&lt;w2&gt;Nearest&lt;w3&gt;Or&lt;w4&gt;Away&lt;w5&gt;From&lt;w6&gt;Zero&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sign&lt;/c0&gt; property is &lt;c1&gt;.minus&lt;/c1&gt; if the value’s signbit is set, and &lt;c2&gt;.plus&lt;/c2&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;sign&lt;/c0&gt;プロパティは、値のsignbitがセットされるならば&lt;c1&gt;.minus&lt;/c1&gt;です、そしてそうでないなら&lt;c2&gt;.plus&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; property does not include the leading integral bit of the significand, even for types like &lt;c3&gt;Float80&lt;/c3&gt; that store it explicitly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;significand&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロパティは、仮数の先頭整数ビットを含みません、それを明示的に格納する&lt;c3&gt;Float80&lt;/c3&gt;のような型に対してさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property of an &lt;c2&gt;Unsafe&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance is always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスの&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティは、常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; property of an &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance is always zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスの&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;プロパティは、常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; constant corresponds to the C macros &lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;, &lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;, and others with a similar purpose.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;ulp&lt;w1&gt;Of&lt;w2&gt;One&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;定数は、Cマクロ&lt;c3&gt;FLT&lt;w4&gt;_EPSILON&lt;/w4&gt;&lt;/c3&gt;、&lt;c5&gt;DBL&lt;w6&gt;_EPSILON&lt;/w6&gt;&lt;/c5&gt;、そして類似した目的を持つ他のものに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; view’s elements comprise each Unicode scalar value in the &lt;c2&gt;cafe&lt;/c2&gt; string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;ビューのもつ各要素は、&lt;c2&gt;cafe&lt;/c2&gt;文字列の中の各ユニコードスカラー値からなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;unsafely&lt;w1&gt;Unwrapped&lt;/w1&gt;&lt;/c0&gt; property is recommended over calling the &lt;c2&gt;unsafe&lt;w3&gt;Bit&lt;w4&gt;Cast(_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; function because the property is more restrictive and because accessing the property still performs checking in debug builds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;unsafely&lt;w1&gt;Unwrapped&lt;/w1&gt;&lt;/c0&gt;プロパティは、&lt;c2&gt;unsafe&lt;w3&gt;Bit&lt;w4&gt;Cast(_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;関数呼び出し全般で推奨されます、なぜならこのプロパティはより制限的であるから、そしてこのプロパティにアクセスすることはデバッグビルドにおいて依然として確認を実行するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;unsafely&lt;w1&gt;Unwrapped&lt;/w1&gt;&lt;/c0&gt; property provides the same value as the forced unwrap operator (postfix &lt;c2&gt;!&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;unsafely&lt;w1&gt;Unwrapped&lt;/w1&gt;&lt;/c0&gt;プロパティは、強制アンラップ演算子（後置&lt;c2&gt;!&lt;/c2&gt;）と同じ値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called sequentially with a mutable accumulating value initialized to &lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt; and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャは、&lt;c3&gt;initial&lt;w4&gt;Result&lt;/w4&gt;&lt;/c3&gt;に初期化された可変の蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closure is called with the initial accumulating value—&lt;c3&gt;[:]&lt;/c3&gt; in this case—and the first character of &lt;c4&gt;letters&lt;/c4&gt;, modifying the accumulating value by setting &lt;c5&gt;1&lt;/c5&gt; for the key &lt;c6&gt;"a"&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;update&lt;w1&gt;Accumulating&lt;w2&gt;Result&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;クロージャが、初期蓄積値—この場合では&lt;c3&gt;[:]&lt;/c3&gt;—および&lt;c4&gt;letters&lt;/c4&gt;の最初の文字とともに呼び出されて、&lt;c5&gt;1&lt;/c5&gt;をキー&lt;c6&gt;"a"&lt;/c6&gt;に対して設定することで蓄積値を修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c12&gt;with&lt;w13&gt;Va&lt;w14&gt;List(_:&lt;w15&gt;_:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt; function takes an array of &lt;a16&gt;&lt;c17&gt;CVar&lt;w18&gt;Arg&lt;/w18&gt;&lt;/c17&gt;&lt;/a16&gt; values and provides a &lt;a19&gt;&lt;c20&gt;CVa&lt;w21&gt;List&lt;w22&gt;Pointer&lt;/w22&gt;&lt;/w21&gt;&lt;/c20&gt;&lt;/a19&gt; value within the body of a closure parameter, whereas the &lt;c23&gt;get&lt;w24&gt;Va&lt;w25&gt;List(_:)&lt;/w25&gt;&lt;/w24&gt;&lt;/c23&gt; function returns this value directly.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c12&gt;with&lt;w13&gt;Va&lt;w14&gt;List(_:&lt;w15&gt;_:)&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;関数は、&lt;a16&gt;&lt;c17&gt;CVar&lt;w18&gt;Arg&lt;/w18&gt;&lt;/c17&gt;&lt;/a16&gt;値からなるひとつの配列をとって、&lt;a19&gt;&lt;c20&gt;CVa&lt;w21&gt;List&lt;w22&gt;Pointer&lt;/w22&gt;&lt;/w21&gt;&lt;/c20&gt;&lt;/a19&gt;値をクロージャパラメータの本体内で提供します、一方で&lt;c23&gt;get&lt;w24&gt;Va&lt;w25&gt;List(_:)&lt;/w25&gt;&lt;/w24&gt;&lt;/c23&gt;関数はこの値を直接に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;CF&lt;w2&gt;_SWIFT&lt;w3&gt;_NAME&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; macro is applied to each function, giving each one a new name for Swift that's nested together under the &lt;c4&gt;Color&lt;/c4&gt; type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;CF&lt;w2&gt;_SWIFT&lt;w3&gt;_NAME&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;マクロは各関数に適用されます、それぞれのものに&lt;c4&gt;Color&lt;/c4&gt;型の下に一緒に入れ子にされるSwift用の新しい名前を与えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;CFType&lt;w2&gt;Ref&lt;/w2&gt;&lt;/c1&gt; type completely remaps to the &lt;c3&gt;Any&lt;w4&gt;Object&lt;/w4&gt;&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;CFType&lt;w2&gt;Ref&lt;/w2&gt;&lt;/c1&gt;型は、&lt;c3&gt;Any&lt;w4&gt;Object&lt;/w4&gt;&lt;/c3&gt;型に完全にリマップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;Hashable&lt;/c1&gt; protocol inherits from the &lt;c2&gt;Equatable&lt;/c2&gt; protocol, so you must also satisfy that protocol’s requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Hashable&lt;/c1&gt;プロトコルは、&lt;c2&gt;Equatable&lt;/c2&gt;プロトコルから継承します、それであなたは同様にそのプロトコルのもつ要件も満たさなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;String&lt;/c1&gt; type bridges with the Objective-C class &lt;c2&gt;NSString&lt;/c2&gt; and offers interoperability with C functions that works with strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;String&lt;/c1&gt;型は、Objective-Cクラス&lt;c2&gt;NSString&lt;/c2&gt;とブリッジします、そしてC関数で文字列を扱うものと相互運用を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;Substring&lt;/c1&gt; type presents the same interface as &lt;c2&gt;String&lt;/c2&gt;, so you can avoid or defer any copying of the string’s contents.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Substring&lt;/c1&gt;型は、&lt;c2&gt;String&lt;/c2&gt;と同じインターフェイスを提供します、それであなたは文字列の内容の何らかのコピーを避けるまたは延期できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;apple&lt;/c1&gt; string contains a single emoji character made up of a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;apple&lt;/c1&gt;文字列は、UTF-16でエンコードされる場合あるサロゲートペアから作り上げられる単一のemoji文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;binade&lt;/c1&gt; property is a member of the same binade as this value, but with a unit significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;binade&lt;/c1&gt;プロパティは、この値と同じbinadeに属するあるメンバです、しかしある単位仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;id&lt;/c1&gt; type is instead imported by Swift as the &lt;c2&gt;Any&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;id&lt;/c1&gt;型は、代わりにSwiftによって&lt;c2&gt;Any&lt;/c2&gt;型としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;make&lt;w2&gt;Iterator()&lt;/w2&gt;&lt;/c1&gt; method is provided as a default implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;make&lt;w2&gt;Iterator()&lt;/w2&gt;&lt;/c1&gt;メソッドは、省略時の実装として提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;move&lt;w2&gt;Initialize&lt;w3&gt;Memory(as:&lt;w4&gt;from:&lt;w5&gt;count:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method automatically performs a forward or backward copy of all instances from the source region to their destination.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;move&lt;w2&gt;Initialize&lt;w3&gt;Memory(as:&lt;w4&gt;from:&lt;w5&gt;count:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドは、すべてのインスタンスの前方および後方へのコピーをソース領域からそれらの行き先へ自動的に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c1&gt;strncmp&lt;/c1&gt; function takes two &lt;c2&gt;const char*&lt;/c2&gt; pointers and an integer specifying the number of characters to compare.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;strncmp&lt;/c1&gt;関数は、２つの&lt;c2&gt;const char*&lt;/c2&gt;ポインタと、比較する文字数を指定している整数を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;Countdown&lt;/c2&gt; structure’s definition is short: It contains only the starting count and the &lt;c3&gt;make&lt;w4&gt;Iterator()&lt;/w4&gt;&lt;/c3&gt; method required by the &lt;c5&gt;Sequence&lt;/c5&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Countdown&lt;/c2&gt;構造体の定義は短いです：それはただ数え始めと&lt;c5&gt;Sequence&lt;/c5&gt;プロトコルによって要求される&lt;c3&gt;make&lt;w4&gt;Iterator()&lt;/w4&gt;&lt;/c3&gt;メソッドだけを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;form&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;form&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;form&lt;w3&gt;Truncating&lt;w4&gt;Remainder(dividing&lt;w5&gt;By:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;form&lt;w3&gt;Truncating&lt;w4&gt;Remainder(dividing&lt;w5&gt;By:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;remainder(dividing&lt;w3&gt;By:)&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;remainder(dividing&lt;w3&gt;By:)&lt;/w3&gt;&lt;/c2&gt;メソッドは常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;remove&lt;w3&gt;Last()&lt;/w3&gt;&lt;/c2&gt; method must be used only on a nonempty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;remove&lt;w3&gt;Last()&lt;/w3&gt;&lt;/c2&gt;メソッドは、空でないコレクションでのみ使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c2&gt;truncating&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;truncating&lt;w3&gt;Remainder(dividing&lt;w4&gt;By:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;..&lt;&lt;/c3&gt; operator creates a range that doesn’t include the upper bound, so it’s always safe to use with &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;..&lt;&lt;/c3&gt;演算子は上方の境界を含まないある範囲を作成します、それでそれは常に&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;と使うのに安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;high&lt;/c3&gt; and &lt;c4&gt;low&lt;/c4&gt; properties of the &lt;c5&gt;result&lt;/c5&gt; value represent 2000 when concatenated to form a double-width integer; that is, using &lt;c6&gt;result&lt;w7&gt;.high&lt;/w7&gt;&lt;/c6&gt; as the high byte and &lt;c8&gt;result&lt;w9&gt;.low&lt;/w9&gt;&lt;/c8&gt; as the low byte of a &lt;c10&gt;UInt16&lt;/c10&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;result&lt;/c5&gt;値の&lt;c3&gt;high&lt;/c3&gt;および&lt;c4&gt;low&lt;/c4&gt;プロパティは、二倍幅整数に成形するために連結される時2000を表します；すなわち、&lt;c10&gt;UInt16&lt;/c10&gt;インスタンスの高バイトとして&lt;c6&gt;result&lt;w7&gt;.high&lt;/w7&gt;&lt;/c6&gt;をそして低バイトとして&lt;c8&gt;result&lt;w9&gt;.low&lt;/w9&gt;&lt;/c8&gt;を使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;name&lt;w4&gt;Alias&lt;/w4&gt;&lt;/c3&gt; property then contains the corrected name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;name&lt;w4&gt;Alias&lt;/w4&gt;&lt;/c3&gt;プロパティはその後、訂正された名前を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c3&gt;user&lt;/c3&gt; variable is &lt;c4&gt;nil&lt;/c4&gt; when the user not logged in and has a value once the user logs in.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;user&lt;/c3&gt;変数は、ユーザがログインしていない場合&lt;c4&gt;nil&lt;/c4&gt;です、そして一旦ユーザがログインするならばある値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;Countdown&lt;w5&gt;Iterator&lt;/w5&gt;&lt;/c4&gt; type keeps track of both the &lt;c6&gt;Countdown&lt;/c6&gt; sequence that it’s iterating and the number of times it has returned a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Countdown&lt;w5&gt;Iterator&lt;/w5&gt;&lt;/c4&gt;型は、それが反復している&lt;c6&gt;Countdown&lt;/c6&gt;シーケンスそしてそれが値を返した回数の両方の情報を得続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;Key&lt;w5&gt;Value&lt;w6&gt;Pairs&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; instance preserves the order of the elements as passed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Key&lt;w5&gt;Value&lt;w6&gt;Pairs&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;インスタンスは、要素の順番を渡された通りに保全します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c4&gt;high&lt;/c4&gt; and &lt;c5&gt;low&lt;/c5&gt; compnents of the &lt;c6&gt;result&lt;/c6&gt; value represent &lt;c7&gt;-1920&lt;/c7&gt; when concatenated to form a double-width integer; that is, using &lt;c8&gt;result&lt;w9&gt;.high&lt;/w9&gt;&lt;/c8&gt; as the high byte and &lt;c10&gt;result&lt;w11&gt;.low&lt;/w11&gt;&lt;/c10&gt; as the low byte of an &lt;c12&gt;Int16&lt;/c12&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;result&lt;/c4&gt;値の&lt;c5&gt;high&lt;/c5&gt;と&lt;c6&gt;low&lt;/c6&gt;構成要素は、２倍幅整数に成形するために連結される場合&lt;c7&gt;-1920&lt;/c7&gt;を表します；すなわち、&lt;c8&gt;result&lt;w9&gt;.high&lt;/w9&gt;&lt;/c8&gt;を高バイトとして&lt;c10&gt;result&lt;w11&gt;.low&lt;/w11&gt;&lt;/c10&gt;を低バイトとして&lt;c12&gt;Int16&lt;/c12&gt;インスタンスに使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c5&gt;CFArray&lt;w6&gt;Create&lt;w7&gt;Mutable(_:&lt;w8&gt;_:&lt;w9&gt;_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; function takes a &lt;c10&gt;CFArray&lt;w11&gt;Call&lt;w12&gt;Backs&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; structure, which is initialized with function pointer callbacks:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;CFArray&lt;w6&gt;Create&lt;w7&gt;Mutable(_:&lt;w8&gt;_:&lt;w9&gt;_:)&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;関数は、ひとつの&lt;c10&gt;CFArray&lt;w11&gt;Call&lt;w12&gt;Backs&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;構造体を取ります、それは関数ポインタコールバックで初期化されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c5&gt;Set&lt;w6&gt;Algebra&lt;/w6&gt;&lt;/c5&gt; protocol is specifically designed to accommodate both kinds of set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;Set&lt;w6&gt;Algebra&lt;/w6&gt;&lt;/c5&gt;プロトコルは、とりわけ両方の種類の集合に配慮するように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c5&gt;deinit&lt;/c5&gt; of &lt;c6&gt;buffer&lt;w7&gt;Class&lt;/w7&gt;&lt;/c6&gt; must destroy its stored &lt;c8&gt;Header&lt;/c8&gt; and any constructed &lt;c9&gt;Element&lt;/c9&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;buffer&lt;w7&gt;Class&lt;/w7&gt;&lt;/c6&gt;の&lt;c5&gt;deinit&lt;/c5&gt;は、それの格納した&lt;c8&gt;Header&lt;/c8&gt;とあらゆる構成した&lt;c9&gt;Element&lt;/c9&gt;それらを破棄しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c5&gt;session&lt;w6&gt;Expired&lt;/w6&gt;&lt;/c5&gt; variable begins as &lt;c7&gt;false&lt;/c7&gt; and is set to &lt;c8&gt;true&lt;/c8&gt; if the session expires.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;session&lt;w6&gt;Expired&lt;/w6&gt;&lt;/c5&gt;変数は、&lt;c7&gt;false&lt;/c7&gt;で始まります、そしてセッションが期限切れになるならば&lt;c8&gt;true&lt;/c8&gt;に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c7&gt;base&lt;/c7&gt; property of the slice is equal to &lt;c8&gt;single&lt;w9&gt;Digits&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスライスの&lt;c7&gt;base&lt;/c7&gt;プロパティは、&lt;c8&gt;single&lt;w9&gt;Digits&lt;/w9&gt;&lt;/c8&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c9&gt;#key&lt;w10&gt;Path&lt;/w10&gt;&lt;/c9&gt; string expression accepts chained method or property references.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c9&gt;#key&lt;w10&gt;Path&lt;/w10&gt;&lt;/c9&gt;文字列式は、数珠つなぎにされたメソッドまたはプロパティ参照を受け入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;e0&gt;exponent&lt;/e0&gt; of a floating-point value is the integer part of the logarithm of the value’s magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の&lt;e0&gt;指数&lt;/e0&gt;は、値の規模の対数の整数部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;e3&gt;exponent bias&lt;/e3&gt; of a type &lt;c4&gt;F&lt;/c4&gt; can be calculated as the following, where &lt;c5&gt;**&lt;/c5&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型&lt;c4&gt;F&lt;/c4&gt;の&lt;e3&gt;指数バイアス&lt;/e3&gt;は、以下のように計算されます、ここで&lt;c5&gt;**&lt;/c5&gt;は冪です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII representation of a number in the radix passed as &lt;c0&gt;radix&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;radix&lt;/c0&gt;として渡される基数におけるある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ASCII representation of a number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘_Bool’ and C++ ‘bool’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの「_Bool」およびC++の「bool」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Cの「char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘double’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「double」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘float’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「float」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘int’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘long long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘short’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘signed char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「signed char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned char’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned int’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned long long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned long’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C ‘unsigned short’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C「unsigned short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++ ‘wchar_t’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++「wchar_t」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++11 ‘char16_t’ type, which has UTF-16 encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++11「char16_t」型、それはUTF-16エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The C++11 ‘char32_t’ type, which has UTF-32 encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C++11「char32_t」型、それはUTF-32エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Fitzpatrick skin types are examples of emoji modifiers; they change the appearance of the preceding emoji base (that is, a scalar for which &lt;c0&gt;is&lt;w1&gt;Emoji&lt;w2&gt;Modifier&lt;w3&gt;Base&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is true) by rendering it with a different skin tone.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Fitzpatrickスキン型はemoji修飾子の例です；それらは先行するemoji基盤（すなわち、それに対して&lt;c0&gt;is&lt;w1&gt;Emoji&lt;w2&gt;Modifier&lt;w3&gt;Base&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;がtrueであるスカラー）の外観を、それを異なるスキントーンで描出することによって変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The IEEE 754 floating-point classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>IEEE 754浮動小数点の様々な部類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The NaN values in the &lt;c0&gt;temps&lt;w1&gt;Celsius&lt;/w1&gt;&lt;/c0&gt; array are propagated through the conversion and remain NaN in &lt;c2&gt;temps&lt;w3&gt;Fahrenheit&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;temps&lt;w1&gt;Celsius&lt;/w1&gt;&lt;/c0&gt;配列の中のNaN値は、変換を通して伝播されていき、&lt;c2&gt;temps&lt;w3&gt;Fahrenheit&lt;/w3&gt;&lt;/c2&gt;においてNaNのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Objective-C declarations are automatically available from any Swift file within that target, with no import statements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C宣言は、自動的にあらゆるSwiftファイルからそのターゲット内部で、インポート文なしで利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift interfaces in the generated header include references to all of the Objective-C types used in them, so make sure to import the Objective-C headers for those types first.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生成されたヘッダの中のSwiftインタフェースそれらは、それらの中で使われるObjective-C型への全ての参照を含みます、それで最初にそれらの型に対するObjective-Cヘッダをインポートすることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift standard library defines a base layer of functionality for writing Swift programs, including:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリは、Swiftプログラムを記述するための機能性の基盤層を定義していて、以下を含んでいます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Swift standard library’s text-related types, &lt;c6&gt;String&lt;/c6&gt;, &lt;c7&gt;Character&lt;/c7&gt;, and &lt;c8&gt;Unicode&lt;w9&gt;.Scalar&lt;/w9&gt;&lt;/c8&gt;, all conform to &lt;c10&gt;Text&lt;w11&gt;Output&lt;w12&gt;Streamable&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift標準ライブラリのテキスト関連の型、&lt;c6&gt;String&lt;/c6&gt;、&lt;c7&gt;Character&lt;/c7&gt;、そして&lt;c8&gt;Unicode&lt;w9&gt;.Scalar&lt;/w9&gt;&lt;/c8&gt;は、すべて&lt;c10&gt;Text&lt;w11&gt;Output&lt;w12&gt;Streamable&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UTF-16 code unit offset corresponding to this Index</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに対応しているUTFー16コード単位オフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UTF-16 code units of a string’s &lt;c0&gt;utf16&lt;/c0&gt; view match the elements accessed through indexed &lt;c1&gt;NSString&lt;/c1&gt; APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;ビューのUTF-16コード単位は、&lt;c1&gt;NSString&lt;/c1&gt; APIでインデックスを使われることでアクセスされる要素と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode code point to use for the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのために使うユニコードコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode encoding of &lt;c0&gt;input&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;input&lt;/c0&gt;のユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode encoding of the data referenced by &lt;c0&gt;c&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;c&lt;w1&gt;String&lt;/w1&gt;&lt;/c0&gt;によって参照されるデータのユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value &lt;c0&gt;"\u{301}"&lt;/c0&gt; modifies the preceding character to include an accent, so &lt;c1&gt;"e\u{301}"&lt;/c1&gt; has the same canonical representation as the single Unicode scalar value &lt;c2&gt;"é"&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値&lt;c0&gt;"\u{301}"&lt;/c0&gt;は、先行する文字を修飾してアクセントを含めます、それで&lt;c1&gt;"e\u{301}"&lt;/c1&gt;は単一のユニコードスカラー値&lt;c2&gt;"é"&lt;/c2&gt;と同じ正準表現を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value of &lt;e1&gt;A&lt;/e1&gt; is &lt;c2&gt;65&lt;/c2&gt;, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;e1&gt;A&lt;/e1&gt;のユニコードスカラー値は&lt;c2&gt;65&lt;/c2&gt;です、それはUTF-16およびUTF-8両方において単一のコード単位の中にぴったり収まるにの十分に小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode scalar value to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードするあるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode-safe comparison matches Unicode extended grapheme clusters rather than the code points used to compose them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード安全比較は、ユニコード拡張書記素クラスタにマッチします、それらを組み立てるのに使われるコード点ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Unicode-safe comparison matches Unicode scalar values rather than the code points used to compose them.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード安全での比較は、ユニコードスカラー値を比べます、それらを組み立てるのに使われるコード点ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The absence of a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の不在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original buffer uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（断片）は、同じ要素に対して、元のバッファが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The actual number of elements that can be stored in this object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このオブジェクトに格納できる要素の実際の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The addition operator (&lt;c0&gt;+&lt;/c0&gt;) calculates the sum of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算演算子（&lt;c0&gt;+&lt;/c0&gt;）は、それの２つの引数の合計を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The additional initializer omits the label requirement for its first parameter:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加的なイニシャライザは、それの最初のパラメータに対するラベル要件を省略します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The additive inverse of the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この引数の加法の逆元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The additive inverse of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の加法の逆元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The address of that buffer is passed to the callee, and on return, the value in the buffer is loaded, retained, and reassigned into the operand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのバッファのアドレスは呼び出される側に渡されます、そして戻る時に、バッファの値はロードされ、保持され、演算数に再割り当てされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The address of the memory that starts the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのアドレス、それはバッファを始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to create random values may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為値を作成するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to select a random element may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な要素を選択するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to shuffle a collection may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm used to shuffle a sequence may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変更するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The alignment of the new region of allocated memory, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートされたメモリの新しい領域のアラインメント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The allocated memory is not bound to any specific type and must be bound before performing any typed operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートされたメモリは、何ら特定の型に束縛されません、そして何らかの型付き演算を実行する前に束縛されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The allowed formats for each of these representations is then as follows:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの表現のそれぞれに対する許される形式はそれで以下になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount of memory to allocate, counted in instances of &lt;c0&gt;Element&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートするメモリの総量、&lt;c0&gt;Element&lt;/c0&gt;のインスタンスで数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount of memory to allocate, counted in instances of &lt;c0&gt;Pointee&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートするメモリの総量、&lt;c0&gt;Pointee&lt;/c0&gt;のインスタンスで数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The amount of memory to bind to type &lt;c0&gt;T&lt;/c0&gt;, counted as instances of &lt;c1&gt;T&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;T&lt;/c0&gt;へと束縛するメモリの量、&lt;c1&gt;T&lt;/c1&gt;のインスタンスとして数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The approximate size of all literal segments combined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結合された全てのリテラル文節のおおよそのサイズ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The argument you pass to the &lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro uses the same syntax as the &lt;c3&gt;#selector&lt;/c3&gt; expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロに渡す引数は、&lt;c3&gt;#selector&lt;/c3&gt;式と同じ構文を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The array to append to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加先の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The available number of fractional significand bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>利用可能な小数の仮数ビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基底状態。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base to use for the string representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列表現のために使う底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base, precision, and exponent range are not fixed in any way by this protocol, but it enforces the basic requirements of any IEEE 754 floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基数、精度、そして指数範囲は、このプロトコルによって何らかの方法で固定されません、しかしそれはIEEE 754浮動小数点型どれかの基本要件を強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The basic unit of encoding</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号化の基本単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The behavior of accessing memory as a type unrelated to its bound type is undefined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにそれの束縛型と関係ない型でアクセスすることの挙動は未定義です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The behavior of incrementing indefinitely is determined by the type of &lt;c0&gt;Bound&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限に漸増する挙動は、&lt;c0&gt;Bound&lt;/c0&gt;の型によって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The big-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のビッグエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern matches the binary interchange format defined by the &lt;a0&gt;IEEE 754 specification&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットパターンは&lt;a0&gt;IEEE 754仕様&lt;/a0&gt;で定義されるバイナリ交換形式に一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern of the value’s encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の持つエンコーディングのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern to use for the exponent field of the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の指数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit pattern to use for the significand field of the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の仮数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int16&lt;/c0&gt; instance is 16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int16&lt;/c0&gt;インスタンスのビット幅は16です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int32&lt;/c0&gt; instance is 32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int32&lt;/c0&gt;インスタンスのビット幅は32です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int64&lt;/c0&gt; instance is 64.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int64&lt;/c0&gt;インスタンスのビット幅は64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;Int&lt;/c0&gt; instance is 32 on 32-bit platforms and 64 on 64-bit platforms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int&lt;/c0&gt;インスタンスのビット幅は、32ビットプラットホーム上では32そして64ビットプラットホーム上では64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;UInt16&lt;/c0&gt; instance is 16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt16&lt;/c0&gt;インスタンスのビット幅は16です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;UInt32&lt;/c0&gt; instance is 32.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt32&lt;/c0&gt;インスタンスのビット幅は32です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;UInt64&lt;/c0&gt; instance is 64.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt64&lt;/c0&gt;インスタンスのビット幅は64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of a &lt;c0&gt;UInt&lt;/c0&gt; instance is 32 on 32-bit platforms and 64 on 64-bit platforms.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt&lt;/c0&gt;インスタンスのビット幅は、32ビットプラットホーム上では32そして64ビットプラットホーム上では64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of an &lt;c0&gt;Int8&lt;/c0&gt; instance is 8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Int8&lt;/c0&gt;インスタンスのビット幅は８です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bit width of an &lt;c0&gt;UInt8&lt;/c0&gt; instance is 8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;UInt8&lt;/c0&gt;インスタンスのビット幅は８です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bitwise NOT operator (&lt;c0&gt;~&lt;/c0&gt;) is a prefix operator that returns a value in which all the bits of its argument are flipped: Bits that are &lt;c1&gt;1&lt;/c1&gt; in the argument are &lt;c2&gt;0&lt;/c2&gt; in the result, and bits that are &lt;c3&gt;0&lt;/c3&gt; in the argument are &lt;c4&gt;1&lt;/c4&gt; in the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビット単位のNOT演算子（&lt;c0&gt;~&lt;/c0&gt;）は前置演算子で、それの引数のビットすべてがひっくり返されるある値を返します：引数において&lt;c1&gt;1&lt;/c1&gt;であるビットは結果において&lt;c2&gt;0&lt;/c2&gt;になります、そして引数において&lt;c3&gt;0&lt;/c3&gt;であるビットは結果において&lt;c4&gt;1&lt;/c4&gt;になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の境界は、このバッファの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、コレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the range must be valid indices of the view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の境界は、ビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bounds of the result are always limited to the bounds of &lt;c0&gt;limits&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の領域は、常に&lt;c0&gt;limits&lt;/c0&gt;の領域に制限されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer argument contains the same number of complete instances of &lt;c1&gt;T&lt;/c1&gt; as the original&lt;br/&gt;buffer’s &lt;c2&gt;count&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファ引数は、オリジナルのバッファのもつ&lt;c2&gt;count&lt;/c2&gt;と同じ数の完全な&lt;c1&gt;T&lt;/c1&gt;のインスタンスを含まなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer must contain sufficient memory to accommodate &lt;c4&gt;source&lt;w5&gt;.underestimated&lt;w6&gt;Count&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファは、&lt;c4&gt;source&lt;w5&gt;.underestimated&lt;w6&gt;Count&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;を収容するのに十分なメモリを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer must contain sufficient memory to accommodate &lt;c7&gt;source&lt;w8&gt;.underestimated&lt;w9&gt;Count&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファは、&lt;c7&gt;source&lt;w8&gt;.underestimated&lt;w9&gt;Count&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を収容するのに十分なメモリを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer pointer plus &lt;c0&gt;offset&lt;/c0&gt; must be properly aligned for accessing an instance of type &lt;c1&gt;T&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;offset&lt;/c0&gt;を加えたバッファポインタは、型&lt;c1&gt;T&lt;/c1&gt;のインスタンスにアクセスするために適切にアラインされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer slice to rebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再構築されるバッファスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになるバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer’s memory must be initialized or the buffer’s &lt;c0&gt;Element&lt;/c0&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリは初期化されなければなりません、またバッファのもつ&lt;c0&gt;Element&lt;/c0&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The buffer’s type &lt;c0&gt;T&lt;/c0&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつ型&lt;c0&gt;T&lt;/c0&gt;は、自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The bytes for &lt;c3&gt;a&lt;/c3&gt; are copied from the first four bytes of &lt;c4&gt;some&lt;w5&gt;Bytes&lt;/w5&gt;&lt;/c4&gt;, and the bytes for &lt;c6&gt;b&lt;/c6&gt; are copied from the next four bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;a&lt;/c3&gt;に対するバイトは、&lt;c4&gt;some&lt;w5&gt;Bytes&lt;/w5&gt;&lt;/c4&gt;の最初の４バイトからコピーされます、そして&lt;c6&gt;b&lt;/c6&gt;に対するバイトは次の４バイトからコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The call to &lt;c0&gt;animals&lt;w1&gt;.make&lt;w2&gt;Iterator()&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; returns an instance of the array’s iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;animals&lt;w1&gt;.make&lt;w2&gt;Iterator()&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;への呼び出しは、配列のもつイテレータの１つのインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The call to &lt;c3&gt;first&lt;w4&gt;Index(where:)&lt;/w4&gt;&lt;/c3&gt; in the following example must traverse the whole collection to find the element that matches the predicate:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;first&lt;w4&gt;Index(where:)&lt;/w4&gt;&lt;/c3&gt;への呼び出しは以下の例において、コレクション全体を横断していき、述部に合致する要素を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The canonical combining class of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの正準結合クラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The case-sensitive comparison will only match strings whose corresponding characters have the same case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>大文字小文字考慮での比較は、対応する文字の大文字小文字が同じである文字列同士のみが一致することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character at that position is the composed &lt;c1&gt;"é"&lt;/c1&gt; character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その位置での文字は、合成済&lt;c1&gt;"é"&lt;/c1&gt;文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character that was removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除された文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character to append to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列に追加されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character to convert to a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列へと変換されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The character to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返すことになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The children to use for the mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ミラーのために使う幾らかの子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The class of the object used for storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ストレージのために使われるオブジェクトのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classification of a scalar used in the Canonical Ordering Algorithm defined by the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「Unicode標準」によって定義される「正準順序アルゴリズム」において使われるあるスカラーのクラス分け。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classification of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の分類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure is called again repeatedly with the previous call’s return value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、前の呼び出しの戻り値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure is called again repeatedly with the updated accumulating value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、更新された蓄積値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure should return the number of initialized code units, or 0 if it couldn’t initialize the buffer (for example if the requested capacity was too small).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャは、初期化されたコード単位の数を返すべきです、または０をもしそれがバッファを初期化することができなかったならば（例えば要請された収容能力が小さすぎたならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure’s buffer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャのもつバッファ引数は、このクロージャの実行の間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure’s pointer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クロージャのもつポインタ引数は、このクロージャの実行の間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code above stores the value &lt;c0&gt;0x&lt;w1&gt;FFFF&lt;w2&gt;_FFFF&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; into the four newly allocated bytes, and then loads the first byte as a &lt;c3&gt;UInt8&lt;/c3&gt; instance and the third and fourth bytes as a &lt;c4&gt;UInt16&lt;/c4&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>上のコードは値&lt;c0&gt;0x&lt;w1&gt;FFFF&lt;w2&gt;_FFFF&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を４つの新しいアロケート済みバイトに格納して、それから最初のバイトを&lt;c3&gt;UInt8&lt;/c3&gt;インスタンスとして、そして３番目と４番目のバイトを&lt;c4&gt;UInt16&lt;/c4&gt;インスタンスとしてロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code point to use for the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのために使うコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The code units of that buffer match the code units in the string’s &lt;c4&gt;utf8&lt;/c4&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのコード単位は、文字列のもつ&lt;c4&gt;utf8&lt;/c4&gt;ビューでのコード単位と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection being appended to allocates any additional necessary storage to hold the new elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは追加されることによって、新しい要素を保有するために何らかの追加的に必要なストレージを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションは空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection to create a view into.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してビューが作成されることになるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection to evaluate this range expression in relation to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションに関して、この範囲式を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection traversal modeled by &lt;c0&gt;children&lt;/c0&gt; is captured so that the resulting mirror’s children may be upgraded to a bidirectional or random access collection later.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;children&lt;/c0&gt;による走査型のコレクションはキャプチャされます、それで結果となるミラーのもつ子らは、双方向または無作為アクセスのコレクションに後でアップグレードできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection traversal modeled by &lt;c0&gt;unlabeled&lt;w1&gt;Children&lt;/w1&gt;&lt;/c0&gt; is captured so that the resulting mirror’s children may be upgraded to a bidirectional or random access collection later.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;unlabeled&lt;w1&gt;Children&lt;/w1&gt;&lt;/c0&gt;による走査型のコレクションはキャプチャされます、それで結果となるミラーのもつ子らは、双方向または無作為アクセスのコレクションに後でアップグレードできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection’s “past the end” position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの「終わりを過ぎた」位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The combining classes of these scalars have the numeric values 0, 230, and 220, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラーの結合クラスは、数値 0、230、そして220をそれぞれ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The comparison is both case sensitive and Unicode safe.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>比較は、大文字小文字考慮のみならずユニコード安全でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The comparison returns &lt;c2&gt;true&lt;/c2&gt; if both arguments are &lt;c3&gt;nil&lt;/c3&gt; or if the two arguments wrap values that are equal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この比較が&lt;c2&gt;true&lt;/c2&gt;を返すのは、両方の引数が&lt;c3&gt;nil&lt;/c3&gt;である場合か、２つの引数が同等な値らをラップする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compiler automatically synthesizes your custom type’s &lt;c0&gt;Hashable&lt;/c0&gt; and requirements when you declare &lt;c1&gt;Hashable&lt;/c1&gt; conformance in the type’s original declaration and your type meets these criteria:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイラは、自動的にあなたのあつらえの型の持つ&lt;c0&gt;Hashable&lt;/c0&gt;と要件を、あなたが&lt;c1&gt;Hashable&lt;/c1&gt;準拠をその型の持つ元の宣言において宣言して、あなたの型がそれら基準に合う場合に合成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The compiler removes &lt;c0&gt;Ref&lt;/c0&gt; from the end of each type name because all Swift classes are reference types; therefore, the suffix is redundant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンパイラは各型名の終わりから&lt;c0&gt;Ref&lt;/c0&gt;を削除します、なぜなら全てのスウィフトクラスが参照型であるからです；したがって、この接尾辞は冗長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The components used for hashing must be the same as the components compared in your type’s &lt;c1&gt;==&lt;/c1&gt; operator implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ化に使用される構成要素は、あなたの型の持つ&lt;c1&gt;==&lt;/c1&gt;演算子実装において比較される構成要素と同じでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The container to hold.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>収容するためのコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of the Objective-C files in that framework are automatically available from any Swift file within that framework target, with no import statements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのフレームワークの中のObjective-Cファイルの内容は、自動的にそのフレームワークターゲット内のあらゆるSwiftファイルから、インポート文なしで利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contents of the interpolation’s parentheses are treated as the call’s argument list.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間のもつ丸括弧の内容は、その呼び出しの引数リストとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The contiguous memory footprint of &lt;c0&gt;T&lt;/c0&gt;, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;の隣接メモリフットプリント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion of &lt;c0&gt;p&lt;/c0&gt; to a string in the assignment to &lt;c1&gt;s&lt;/c1&gt; uses the &lt;c2&gt;Point&lt;/c2&gt; type’s &lt;c3&gt;debug&lt;w4&gt;Description&lt;/w4&gt;&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;p&lt;/c0&gt;の文字列への変換は&lt;c1&gt;s&lt;/c1&gt;への代入において、&lt;c2&gt;Point&lt;/c2&gt;型のもつ&lt;c3&gt;debug&lt;w4&gt;Description&lt;/w4&gt;&lt;/c3&gt;プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion of &lt;c0&gt;p&lt;/c0&gt; to a string in the assignment to &lt;c1&gt;s&lt;/c1&gt; uses the &lt;c2&gt;Point&lt;/c2&gt; type’s &lt;c3&gt;description&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;s&lt;/c1&gt;への代入における&lt;c0&gt;p&lt;/c0&gt;の文字列への変換は、&lt;c2&gt;Point&lt;/c2&gt;型の&lt;c3&gt;description&lt;/c3&gt;プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The correct placement of the call to &lt;s6&gt;&lt;c7&gt;close&lt;w8&gt;File()&lt;/w8&gt;&lt;/c7&gt;&lt;/s6&gt; is outside of the closure:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s6&gt;&lt;c7&gt;close&lt;w8&gt;File()&lt;/w8&gt;&lt;/c7&gt;&lt;/s6&gt;への呼び出しの正しい配置は、クロージャの外側です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The corresponding value of the raw type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この生の型の対応している値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The current decoding index of the container (i.e. the index of the next element to be decoded.) Incremented after every successful decode call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコンテナの現在のデコーディングインデックス（すなわちデコードされることになる、次の要素のインデックス）。すべての成功したデコード呼び出しの後に増やされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The custom mirror for this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのためのあつらえのミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The decoder to read data from.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それからデータを読み出すデコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default IEEE 754 behavior of operations involving a signaling NaN is to raise the Invalid flag in the floating-point environment and return a quiet NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNを伴う演算の初期状態のIEEE 754挙動は、無効なフラグを浮動小数点環境において上げて、クワイエットNaNを返すことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default implementation returns 0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の実装は、０を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is 10.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時は10。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時には&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態は&lt;c2&gt;false&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is &lt;c3&gt;.generated&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時は&lt;c3&gt;.generated&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default is zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期状態はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default memory alignment of &lt;c0&gt;T&lt;/c0&gt;, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;の省略時のメモリアライメント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default memory alignment, in bytes, of the given value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値の型の、バイトでの、省略時のメモリアライメント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default separator is an empty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の分離子は空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained Boolean literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブールリテラルである他は別途制約されない省略時用の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained Unicode extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されないユニコード拡張書記素クラスタリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained floating point literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない浮動小数点リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained integer literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない整数リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されない文字列リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default type for an otherwise-unconstrained unicode scalar literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別途制約されないユニコードスカラーリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は&lt;c1&gt;false&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c4&gt;Int&lt;w5&gt;.max&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は&lt;c4&gt;Int&lt;w5&gt;.max&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c4&gt;true&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、&lt;c4&gt;true&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c5&gt;true&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、&lt;c5&gt;true&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default value is &lt;c6&gt;true&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の値は、&lt;c6&gt;true&lt;/c6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The deinitialized memory can be reinitialized with values of the same type, bound to a new type, or deallocated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デイニシャライズされたメモリは、同じ型の値で再初期化する、新しい型に束縛する、またはデアロケートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The descendant of this mirror specified by the given mirror path components if such a descendant exists; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたミラーパス構成要素によって指定されるこのミラーの子孫、もしそのような子孫が存在するならば；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The description property of a conforming type must be a value-preserving representation of the original value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型の説明プロパティは、元の値の値保全表現でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The destination memory must be uninitialized or the buffer’s &lt;c0&gt;Element&lt;/c0&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先のメモリは未初期化でなければなりません、またポインタのもつ&lt;c0&gt;Element&lt;/c0&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The destination memory must be uninitialized or the pointer’s &lt;c0&gt;Pointee&lt;/c0&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>行き先のメモリは未初期化でなければなりません、またポインタのもつ&lt;c0&gt;Pointee&lt;/c0&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference between these states can be distinguished by checking &lt;c1&gt;is&lt;w2&gt;At&lt;w3&gt;End&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの状態の間の差は、&lt;c1&gt;is&lt;w2&gt;At&lt;w3&gt;End&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference between these states can be distinguished with a &lt;c2&gt;contains(_:)&lt;/c2&gt; call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの状態の相違は、&lt;c2&gt;contains(_:)&lt;/c2&gt;呼び出しで見分けることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference needed to produce the reciever’s state from the parameter’s state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>レシーバのもつ状態をパラメータのもつ状態から生成するのに必要とされる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference needed to produce this collection’s ordered elements from the given collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのもつ順番付けられた要素をこの与えられたコレクションから生成するのに必要とされる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の差は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference to be applied.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>適用されることになる差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance between &lt;c0&gt;start&lt;/c0&gt; and &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;/c0&gt;と&lt;c1&gt;end&lt;/c1&gt;の隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance from this value to &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から&lt;c0&gt;other&lt;/c0&gt;までの隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance to advance this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を前進させる距離。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distance to offset &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;を補う間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The division operator (&lt;c0&gt;/&lt;/c0&gt;) calculates the quotient of the division if &lt;c1&gt;rhs&lt;/c1&gt; is nonzero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算演算子（&lt;c0&gt;/&lt;/c0&gt;）は、&lt;c1&gt;rhs&lt;/c1&gt;が非ゼロならばその除算の商を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The earliest version of the Unicode Standard in which the scalar was assigned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それにおいてこのスカラーが割り当てられた「ユニコード標準」の最も時期の早いバージョン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The efficiency of finding each element in the argument list depends on the argument type and the capabilities of the each level of the mirror’s &lt;c0&gt;children&lt;/c0&gt; collections.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各要素を引数リストにおいて見つけることの効率は、引数型と、ミラーのもつ&lt;c0&gt;children&lt;/c0&gt;コレクションそれらの各水準の能力に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element at the position created using &lt;c0&gt;Reversed&lt;w1&gt;Index&lt;...&gt;(a&lt;w2&gt;Index)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;"r"&lt;/c3&gt;, the character before &lt;c4&gt;"a"&lt;/c4&gt; in the &lt;c5&gt;name&lt;/c5&gt; string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Reversed&lt;w1&gt;Index&lt;...&gt;(a&lt;w2&gt;Index)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って作成された位置での要素は、&lt;c3&gt;"r"&lt;/c3&gt;、&lt;c5&gt;name&lt;/c5&gt;文字列の中の&lt;c4&gt;"a"&lt;/c4&gt;の前の文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element of the set to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除されることになる集合の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element that should be split upon.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで分離されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element that was removed from the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合から削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to append to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to check for containment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この要素が含まれるかを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to find in the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスにおいて見つける要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to insert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>挿入される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to look for in the option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセットにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to remove from the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合から削除されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element type of a &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;: a tuple containing an individual key-value pair.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;の要素型：個々のキー値ペアを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The element type of the option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセットの要素型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of a partial range are the consecutive values from its lower bound continuing upward indefinitely.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>部分範囲の要素は、それの下側の境界から無限に上方に続いている隣接範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the &lt;c0&gt;utf16&lt;/c0&gt; view are the code units for the string when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;utf16&lt;/c0&gt;ビューの要素は、UTF-16で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the &lt;c0&gt;utf8&lt;/c0&gt; view are the code units for the string when encoded in UTF-8.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;utf8&lt;/c0&gt;ビューの要素は、UTF-8で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the index vector are wrapped modulo the count of elements in this vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックスベクターの要素は、このベクターの中の要素の数によるモジュロでラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the range are the consecutive values from its lower bound up to, but not including, its upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の要素は、それの下側の境界から、それの上側の境界までしかしそれを含まない、隣接値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the result are computed lazily, each time they are read, by calling &lt;c4&gt;transform&lt;/c4&gt; function on a base element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のそれぞれの要素は遅延に計算されます、毎回それらは、基盤となる要素上で&lt;c4&gt;transform&lt;/c4&gt;関数を呼び出すことによって読み出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the result are computed on-demand, as the result is used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の要素は、要求に応じて、結果が使われるときに計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the resulting array are ordered according to the given predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の配列の要素は、与えられた述部にしたがって並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of the sequence are computed lazily and the sequence may potentially be infinite in length.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスに属する要素らは、遅延に計算されます、そしてこのシーケンスの長さは潜在的に無限大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements of this view are a concatenation of the elements of each sequence in the base.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この見方での要素たちは、その基盤の中の各シーケンスのもつ要素の連結です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to append to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to use as members of the new set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい集合の要素として使うための要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elements to use in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターにおいて使うことになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoder to write data to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データを書き込むエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoding in which &lt;c0&gt;code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt; should be interpreted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで&lt;c0&gt;code&lt;w1&gt;Units&lt;/w1&gt;&lt;/c0&gt;が解釈されるべきエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoding in which the code units should be interpreted.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それでコード単位が解釈されるべきエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The encoding with which this parser is associated</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それとこのパーサーが結びつけられる符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>末尾インデックスは、あるコレクションの最後の要素を１つ過ぎた位置を参照します、それでそれはある要素に対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The entire region of memory referenced by this buffer must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリの全領域は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The enumeration has any private cases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙が何らかのプライベートなケース節を持つならば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below adds another favorite color:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、別のお気に入りの色を加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below adds the &lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to the &lt;c4&gt;get&lt;w5&gt;Red(red:&lt;w6&gt;green:&lt;w7&gt;blue:&lt;w8&gt;alpha:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを&lt;c4&gt;get&lt;w5&gt;Red(red:&lt;w6&gt;green:&lt;w7&gt;blue:&lt;w8&gt;alpha:)&lt;/w8&gt;&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;メソッドに加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below creates a &lt;a0&gt;&lt;c1&gt;File&lt;w2&gt;Handle&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; and an array of data lines to write to the file that the handle refers to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;a0&gt;&lt;c1&gt;File&lt;w2&gt;Handle&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;と、データ行からなる配列を作成して、そのハンドルが参照するファイルに書き出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below defines a &lt;c0&gt;Lottery&lt;/c0&gt; enumeration that randomly picks a winning number and calls a completion handler if the right number is guessed:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;Lottery&lt;/c0&gt;列挙を定義します、それはランダムに当選番号を選んで、正しい数が推測されるならば完了ハンドラを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below defines a &lt;c0&gt;Person&lt;/c0&gt; class, creates two instances of it, and uses several &lt;c1&gt;#key&lt;w2&gt;Path&lt;/w2&gt;&lt;/c1&gt; string expressions to access properties and properties of those properties:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;Person&lt;/c0&gt;クラスを定義して、それの２つのインスタンスを作成して、そしていくつかの&lt;c1&gt;#key&lt;w2&gt;Path&lt;/w2&gt;&lt;/c1&gt;文字列式を使っていくつかのプロパティおよびそれらプロパティのプロパティにアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below defines two functions, &lt;c0&gt;now(_:)&lt;/c0&gt; and &lt;c1&gt;later(_:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、２つの関数、&lt;c0&gt;now(_:)&lt;/c0&gt;と&lt;c1&gt;later(_:)&lt;/c1&gt;を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below renames a class and one of its properties:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、クラスとそれのプロパティの１つを改名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below shows a selector being used as part of the target-action pattern to call a method in response to the &lt;a13&gt;&lt;c14&gt;touch&lt;w15&gt;Up&lt;w16&gt;Inside&lt;/w16&gt;&lt;/w15&gt;&lt;/c14&gt;&lt;/a13&gt; event.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、ターゲットアクションパターンの一部として使われるセレクタを示して、あるメソッドを&lt;a13&gt;&lt;c14&gt;touch&lt;w15&gt;Up&lt;w16&gt;Inside&lt;/w16&gt;&lt;/w15&gt;&lt;/c14&gt;&lt;/a13&gt;メソッドに答えて呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below shows an Objective-C API that can be expressed more succinctly once it's imported into Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、あるObjective-C APIを示します、それはいったんそれがSwiftにインポートされるならばより簡潔に表現可能なものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below shows how to apply the &lt;c0&gt;NS&lt;w1&gt;_OPTIONS&lt;/w1&gt;&lt;/c0&gt; macro and assign raw values that are mutually exclusive:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;NS&lt;w1&gt;_OPTIONS&lt;/w1&gt;&lt;/c0&gt;マクロを適用する、そして互いに排他的である生の値を割り当てる方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below shows several functions that are all related to a &lt;c0&gt;Color&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、すべて&lt;c0&gt;Color&lt;/c0&gt;型に関係するいくつかの関数を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below uses the &lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to declare the different colors used by a traffic light:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使って、信号機によって使われる異なる色を宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below uses the macro to declare a &lt;c0&gt;UITable&lt;w1&gt;View&lt;w2&gt;Cell&lt;w3&gt;Style&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; enumeration that groups several different view styles for table views:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、このマクロを使って、&lt;c0&gt;UITable&lt;w1&gt;View&lt;w2&gt;Cell&lt;w3&gt;Style&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;列挙を宣言します、それはテーブルビューに対する幾つかの異なるビュースタイルをグループにまとめます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example below uses two strings with different forms of the &lt;c0&gt;"é"&lt;/c0&gt; character—the first uses the composed form and the second uses the decomposed form.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、異なる形式の&lt;c0&gt;"é"&lt;/c0&gt;文字を持つ２つの文字列を使います—最初は合成形式を使い、そして２番目は分解形式を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The examples below show how a &lt;c0&gt;Favorite&lt;w1&gt;Color&lt;/w1&gt;&lt;/c0&gt; type is declared, imported, and extended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の例は、&lt;c0&gt;Favorite&lt;w1&gt;Color&lt;/w1&gt;&lt;/c0&gt;型が宣言、インポート、そして拡張される方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The existing API is renamed with double underscores (&lt;c4&gt;__&lt;/c4&gt;) when it's imported, to help prevent you from accidentally using the existing API elsewhere.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>既存のAPIは、それがインポートされる時に二重アンダースコア（&lt;c4&gt;__&lt;/c4&gt;）で改名され、あなたが誤って既存のAPIをどこか他で使うことを防ぐ助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The explicit permission to implement operations lazily applies only in contexts where the sequence is statically known to conform to &lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延に演算を実施するための明示的な許可は、そこにおいてシーケンスが&lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠することを静的に見分けられる文脈においてのみ適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The exponent of the floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The failure to send when terminating.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>終了する時に送られることになる失敗。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final accumulated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最終的に蓄積された値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final example passes &lt;c0&gt;false&lt;/c0&gt; for the &lt;c1&gt;omitting&lt;w2&gt;Empty&lt;w3&gt;Subsequences&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の例は&lt;c0&gt;falseを&lt;/c0&gt;&lt;c1&gt;omitting&lt;w2&gt;Empty&lt;w3&gt;Subsequences&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;パラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final example passes &lt;c0&gt;true&lt;/c0&gt; for the &lt;c1&gt;allow&lt;w2&gt;Empty&lt;w3&gt;Slices&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の例は&lt;c0&gt;true&lt;/c0&gt;を&lt;c1&gt;allow&lt;w2&gt;Empty&lt;w3&gt;Slices&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;パラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final result is true because the ASCII digits have non-default emoji presentations; some platforms render these with an alternate appearance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最後の結果はtrueです、なぜならASCII桁それらは非初期状態emoji表現を持つので；いくつかのプラットホームはそれらは代替の外観で描出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first and second code units of the pair, designated &lt;e0&gt;leading&lt;/e0&gt; and &lt;e1&gt;trailing&lt;/e1&gt; surrogates, make up a &lt;e2&gt;surrogate pair&lt;/e2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このペアの最初と２番目のコード単位、&lt;e0&gt;先行&lt;/e0&gt;および&lt;e1&gt;後続&lt;/e1&gt;サロゲートと呼ばれるものが、ひとつの&lt;e2&gt;サロゲートペア&lt;/e2&gt;を作り上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first code unit is designated a &lt;e0&gt;lead&lt;/e0&gt; byte and the rest are &lt;e1&gt;continuation&lt;/e1&gt; bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のコード単位は、&lt;e0&gt;先行&lt;/e0&gt;バイトに指定されます、そして残りは&lt;e1&gt;継続&lt;/e1&gt;バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the collection if the collection is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空でないならばコレクションの最初の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the sequence that satisfies &lt;c0&gt;predicate&lt;/c0&gt;, or &lt;c1&gt;nil&lt;/c1&gt; if there is no element that satisfies &lt;c2&gt;predicate&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;満たすシーケンスの最初の要素、または&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素が無いならば&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(&lt;e10&gt;n&lt;/e10&gt;) time and space, where &lt;e11&gt;n&lt;/e11&gt; is the length of the string’s encoded representation (or more, if the underlying &lt;c12&gt;NSString&lt;/c12&gt; has unusual performance characteristics).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの変更を行う一連の演算の中の最初のものは、要素が固有の、隣接するストレージへとコピーされる原因となり、それはO(&lt;e10&gt;n&lt;/e10&gt;)の時間と空間がかかります、そこにおいて&lt;e11&gt;n&lt;/e11&gt;は文字列表現の長さです（またはそれ以上のもの、基盤となる&lt;c12&gt;NSString&lt;/c12&gt;が通常でない性能特質を持つならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first index where &lt;c0&gt;element&lt;/c0&gt; is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;element&lt;/c0&gt;が見つけられたところの最初のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first mirror path component to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスすることになる最初のミラーパス構成要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first one declares the &lt;c2&gt;Favorite&lt;w3&gt;Color&lt;/w3&gt;&lt;/c2&gt; type and adds a single enumeration case for the color blue:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のものは、&lt;c2&gt;Favorite&lt;w3&gt;Color&lt;/w3&gt;&lt;/c2&gt;型を宣言して、単一の列挙ケース節を青色に対して加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first partition, &lt;c1&gt;numbers[..&lt;p]&lt;/c1&gt;, is made up of the elements that are not greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初の区画、&lt;c1&gt;numbers[..&lt;p]&lt;/c1&gt;は、30より大きくない要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first use of &lt;c5&gt;split&lt;/c5&gt; returns each word that was originally separated by one or more spaces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;split&lt;/c5&gt;の最初の利用は、各単語を返します、それはもともと１つ以上の空白で隔てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to add.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算する第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされる第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The floating-point types in the standard library are &lt;c0&gt;Float&lt;/c0&gt;, &lt;c1&gt;Double&lt;/c1&gt;, and &lt;c2&gt;Float80&lt;/c2&gt; where available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリにおける浮動小数点型は、&lt;c0&gt;Float&lt;/c0&gt;、&lt;c1&gt;Double&lt;/c1&gt;、そして利用可能なところでは&lt;c2&gt;Float80&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と同じ符号と指数を持つ浮動小数点値、しかし1.0の仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following Objective-C property refers to a view controller that also acts a data source and delegate:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のObjective-Cプロパティは、あるビューコントローラを参照します、それはまたデータソースと委任先の役割を果たします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code creates &lt;c0&gt;slice&lt;/c0&gt;, a slice covering part of an existing buffer instance, then rebases it into a new &lt;c1&gt;rebased&lt;/c1&gt; buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは&lt;c0&gt;slice&lt;/c0&gt;、既存のバッファインスタンスの一部をカバーするスライス、を作成します、それからそれを新しい生の&lt;c1&gt;rebased&lt;/c1&gt;バッファへと再構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code creates constants for the first and second positions in the &lt;c1&gt;flag&lt;w2&gt;.utf8&lt;/w2&gt;&lt;/c1&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、&lt;c1&gt;flag&lt;w2&gt;.utf8&lt;/w2&gt;&lt;/c1&gt;ビューの中の１番目と２番目の位置に対する定数それぞれを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code declares a generic version of the &lt;c3&gt;parse&lt;w4&gt;And&lt;w5&gt;Add&lt;w6&gt;One(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; function:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、&lt;c3&gt;parse&lt;w4&gt;And&lt;w5&gt;Add&lt;w6&gt;One(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;関数のひとつの総称体版を宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code encodes a fermata in UTF-16:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、フェルマータをUTF-16でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code encodes a fermata in UTF-32:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、フェルマータをUTF-32でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code encodes a fermata in UTF-8:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードはフェルマータをUTF-8でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code shows the &lt;c0&gt;My&lt;w1&gt;List&lt;/w1&gt;&lt;/c0&gt; type after annotation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、注釈の後の&lt;c0&gt;My&lt;w1&gt;List&lt;/w1&gt;&lt;/c0&gt;型を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code temporarily rebinds the memory that &lt;c5&gt;uint8Pointer&lt;/c5&gt; references from &lt;c6&gt;UInt8&lt;/c6&gt; to &lt;c7&gt;Int8&lt;/c7&gt; to call the imported C &lt;c8&gt;strlen&lt;/c8&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、一時的に&lt;c5&gt;uint8Pointer&lt;/c5&gt;が参照するメモリを&lt;c6&gt;UInt8&lt;/c6&gt;から&lt;c7&gt;Int8&lt;/c7&gt;へと再束縛することで、インポートされたC &lt;c8&gt;strlen&lt;/c8&gt;関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code tests whether a string contains any math symbols:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、ある文字列が何らかの数学記号を含むかどうかをテストします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code uses the &lt;c1&gt;UTF8&lt;/c1&gt; codec to encode a fermata in UTF-8:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、&lt;c1&gt;UTF8&lt;/c1&gt;コーデックを使ってUTF-8でのフェルマータをエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code uses this method to test whether all the names in an array have at least five characters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコードは、このメソッドを使って、配列の中の全ての名前が少なくとも５つの文字を含むかどうかを試験します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example accesses an element of an array through its subscript to print its value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、配列のある要素にそれの添え字によってアクセスしてそれの値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example accesses the fourth code unit in both the &lt;c3&gt;flowers&lt;/c3&gt; and &lt;c4&gt;nsflowers&lt;/c4&gt; strings:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c3&gt;flowers&lt;/c3&gt;と&lt;c4&gt;nsflowers&lt;/c4&gt;文字列の両方で４番目のコード単位にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example adds a new number to an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、ある新しい要素を整数からなる配列へ加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example adds an emoji globe to the end of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は地球絵文字をある文字列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates a buffer that can store four &lt;c0&gt;Int&lt;/c0&gt; instances and then initializes that memory with the elements of a range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、４つの&lt;c0&gt;Int&lt;/c0&gt;インスタンスを格納できるあるバッファをアロケートして、それからそのメモリをある範囲に属するいくらかの要素で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates enough new memory to store four &lt;c0&gt;Int&lt;/c0&gt; instances and then initializes that memory with the elements of a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、新しいメモリを必要なだけアロケートすることで、４つの&lt;c0&gt;Int&lt;/c0&gt;インスタンスを格納して、それからそのメモリをある範囲に属するいくらかの要素で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates enough raw memory to hold four instances of &lt;c0&gt;Int8&lt;/c0&gt;, and then uses the &lt;c1&gt;initialize&lt;w2&gt;Memory(as:&lt;w3&gt;from:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method to initialize the allocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、生のメモリを必要なだけアロケートすることで、４つの&lt;c0&gt;Int8&lt;/c0&gt;インスタンスを保持して、それから&lt;c1&gt;initialize&lt;w2&gt;Memory(as:&lt;w3&gt;from:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドを使ってアロケートされたメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates enough raw memory to hold four instances of &lt;c0&gt;Int8&lt;/c0&gt;, and then uses the &lt;c1&gt;initialize&lt;w2&gt;Memory(as:&lt;w3&gt;repeating:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method to initialize the allocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、生のメモリを必要なだけアロケートすることで、４つの&lt;c0&gt;Int8&lt;/c0&gt;インスタンスを保持して、それから&lt;c1&gt;initialize&lt;w2&gt;Memory(as:&lt;w3&gt;repeating:&lt;w4&gt;count:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドを使ってアロケートされたメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example allocates four bytes of memory and stores &lt;c0&gt;0x&lt;w1&gt;FF&lt;/w1&gt;&lt;/c0&gt; in all four bytes:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、４バイトのメモリをアロケートして&lt;c0&gt;0x&lt;w1&gt;FF&lt;/w1&gt;&lt;/c0&gt;を４バイトすべての中に格納します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example appends the elements of a &lt;c0&gt;Range&lt;Int&gt;&lt;/c0&gt; instance to an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、&lt;c0&gt;Range&lt;Int&gt;&lt;/c0&gt;インスタンスからなるいくらかの要素を整数からなる配列に追加します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example binds the memory referenced by &lt;c3&gt;uint8Pointer&lt;/c3&gt; to one instance of the &lt;c4&gt;UInt64&lt;/c4&gt; type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c3&gt;uint8Pointer&lt;/c3&gt;によって参照されるメモリを&lt;c4&gt;UInt64&lt;/c4&gt;型のあるインスタンスに束縛します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example builds a customized greeting by using the &lt;c0&gt;append(_:)&lt;/c0&gt; method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はあつらえの挨拶を&lt;c0&gt;append(_:)&lt;/c0&gt;メソッドを使うことによって作ります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calculates the remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、8.625を0.75で割ることの余りを計算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calculates the truncating remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、8.625を0.75で除算することの切り捨てられる余りを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calls this initializer with pointers to the contents of two different &lt;c0&gt;CChar&lt;/c0&gt; arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを２つの異なる&lt;c0&gt;CChar&lt;/c0&gt;配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example calls this method with pointers to the contents of two different &lt;c0&gt;CChar&lt;/c0&gt; arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを２つの異なる&lt;c0&gt;CChar&lt;/c0&gt;配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example converts the maximal &lt;c0&gt;Int&lt;/c0&gt; value to a string and prints its length:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、最大限の&lt;c0&gt;Int&lt;/c0&gt;値を文字列へ変換してそれの長さを出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example converts the position of the Unicode scalar &lt;c0&gt;"e"&lt;/c0&gt; into its corresponding position in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ユニコードスカラー&lt;c0&gt;"e"&lt;/c0&gt;の位置を文字列でのそれの対応位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a &lt;c0&gt;greeting&lt;/c0&gt; string, and then finds the substring of the first sentence:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;greeting&lt;/c0&gt;文字列を作成して、それから第一文からなる下位文字列を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a collection containing the name “Humperdinck” repeated five times:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、５回繰り返した名前「Humperdinck」を含んでいるコレクションを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates a new &lt;c3&gt;Reversed&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; from the index of the &lt;c5&gt;"a"&lt;/c5&gt; character in a string’s character view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、新しい&lt;c3&gt;Reversed&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;を、文字列の文字ビューの中の&lt;c5&gt;"a"&lt;/c5&gt;文字のインデックスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates an array initialized with five strings containing the letter &lt;e0&gt;Z&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、字&lt;e0&gt;Z&lt;/e0&gt;を含んでいる５つの文字列で初期化される配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates an example class &lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt; and compares instances of the class using their object identifiers and the identical-to operator (&lt;c2&gt;===&lt;/c2&gt;):</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、ある見本クラス&lt;c0&gt;Integer&lt;w1&gt;Ref&lt;/w1&gt;&lt;/c0&gt;を作成して、そのクラスのインスタンスをそれらのオブジェクト識別子と同一演算子（&lt;c2&gt;===&lt;/c2&gt;）を使って比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example creates two new &lt;c0&gt;Int32&lt;/c0&gt; instances from the memory referenced by the buffer pointer &lt;c1&gt;some&lt;w2&gt;Bytes&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、２つの新しい&lt;c0&gt;Int32&lt;/c0&gt;インスタンスをバッファポインタ&lt;c1&gt;some&lt;w2&gt;Bytes&lt;/w2&gt;&lt;/c1&gt;によって参照されるメモリから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares &lt;c1&gt;single&lt;w2&gt;Digits&lt;/w2&gt;&lt;/c1&gt;, a range of single digit integers, and then drops the first element to create a slice of that range, &lt;c3&gt;single&lt;w4&gt;Non&lt;w5&gt;Zero&lt;w6&gt;Digits&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、１桁整数からなる範囲、&lt;c1&gt;single&lt;w2&gt;Digits&lt;/w2&gt;&lt;/c1&gt;を宣言します、それから最初の要素を落としてその範囲のあるスライス、&lt;c3&gt;single&lt;w4&gt;Non&lt;w5&gt;Zero&lt;w6&gt;Digits&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares a &lt;c2&gt;Point&lt;/c2&gt; type with &lt;c3&gt;x&lt;/c3&gt; and &lt;c4&gt;y&lt;/c4&gt; coordinates and a Boolean &lt;c5&gt;is&lt;w6&gt;Filled&lt;/w6&gt;&lt;/c5&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c2&gt;Point&lt;/c2&gt;型を&lt;c3&gt;x&lt;/c3&gt;および&lt;c4&gt;y&lt;/c4&gt;座標、そしてブールの&lt;c5&gt;is&lt;w6&gt;Filled&lt;/w6&gt;&lt;/c5&gt;プロパティで宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はある関数を宣言します、それは、それの２つの直角側を与えられる直角三角形の斜辺の長さを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example declares a function that returns the index of the last even number in the passed array, if one is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある関数を宣言します、それは渡された配列の中の最後の偶数のインデックスを返します、それが見つけられるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example decodes the UTF-16 encoded bytes of a string into an array of &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のUTF-16エンコードされたバイトを、&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instances:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスの配列へとデコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines &lt;c0&gt;x&lt;/c0&gt; as an instance of &lt;c1&gt;UInt8&lt;/c1&gt;, an 8-bit, unsigned integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;x&lt;/c0&gt;を&lt;c1&gt;UInt8&lt;/c1&gt;のインスタンス、ある８ビットの、符号なし整数型として定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example divides a value that is too large to be represented using a single &lt;c0&gt;Int&lt;/c0&gt; instance by another &lt;c1&gt;Int&lt;/c1&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、単一の&lt;c0&gt;Int&lt;/c0&gt;インスタンスを使って表されるには大きすぎる値を、別の&lt;c1&gt;Int&lt;/c1&gt;値によって割ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example extends &lt;c0&gt;Sequence&lt;/c0&gt; with a method that returns an array with the sequence’s values multiplied by two.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;Sequence&lt;/c0&gt;をあるメソッドで拡張します、それはそのシーケンスの２を掛けた値を持つ配列を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the length of the UTF-16 encoding of the string &lt;c0&gt;"Fermata 𝄐"&lt;/c0&gt;, starting with its UTF-8 representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列&lt;c0&gt;"Fermata 𝄐"&lt;/c0&gt;のUTF-16エンコーディングの長さを、それのUTF-8表現で開始して見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the position of a space in a string and then converts that position to an index in the string’s &lt;c0&gt;utf16&lt;/c0&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある空白の位置を文字列の中で見つけて、それからその位置を文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the position of a space in a string’s &lt;c0&gt;utf16&lt;/c0&gt; view and then converts that position to an index in the string’s &lt;c1&gt;unicode&lt;w2&gt;Scalars&lt;/w2&gt;&lt;/c1&gt; view:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある空白の位置を文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;ビューの中で見つけて、それからその位置を文字列のもつ&lt;c1&gt;unicode&lt;w2&gt;Scalars&lt;/w2&gt;&lt;/c1&gt;ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example finds the position of a space in a string’s &lt;c0&gt;utf16&lt;/c0&gt; view and then converts that position to an index in the string’s &lt;c1&gt;utf8&lt;/c1&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある空白の位置を文字列のもつ&lt;c0&gt;utf16&lt;/c0&gt;ビューの中で見つけて、それからその位置を文字列のもつ&lt;c1&gt;utf8&lt;/c1&gt;ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example introduces an API that generates random numbers, but that fails approximately half of the time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、無作為な数を生成するあるAPIを導入します、しかしそれはおおよそ半分は失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example models an asynchronous source of random numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、無作為数の非同期ソースをこしらえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列の開始インデックスから４位置進んだインデックスを取得して、それからその位置の文字を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、配列の始まりから４位置進んだインデックスを入手して、それからその位置での要素を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example passes a pointer to the &lt;c1&gt;value&lt;/c1&gt; variable by using inout syntax:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c1&gt;value&lt;/c1&gt;変数へのポインタをinout構文を使って渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example reverses the elements of an array of characters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、文字列からなる配列の要素を逆順にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example rounds a value using four different rounding rules:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はある値を４つの丸め規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example rounds several values using this default rule:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例はいくつかの値をこの初期設定での規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches a string’s Unicode scalars view for a capital letter and then prints the character and Unicode scalar value at the found index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列のもつユニコートスカラービューで大文字を捜して、それから見つかったインデックスでの文字とユニコードスカラー値を出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number &lt;c0&gt;40&lt;/c0&gt; in an array of integers, and then prints the suffix of the array starting at that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数&lt;c0&gt;40&lt;/c0&gt;のインデックスを捜して、それからそのインデックスで始まる配列の末尾を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number &lt;c2&gt;40&lt;/c2&gt; in an array of integers, and then prints the prefix of the array up to, and including, that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数&lt;c2&gt;40&lt;/c2&gt;のインデックスを捜して、それからそのインデックスに至るまでの、そしてそれを含めて、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example searches for the index of the number &lt;c2&gt;40&lt;/c2&gt; in an array of integers, and then prints the prefix of the array up to, but not including, that index:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、整数からなる配列において数&lt;c2&gt;40&lt;/c2&gt;のインデックスを捜して、それからそのインデックスに至るまでの、しかしそれを含めずに、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how NaN values operate in different contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのようにNaN値が異なる前後関係において作動するかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how an array of strings can be joined to a single, comma-separated string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのように文字列からなる配列が単一の、コンマ区切りの文字列へと連結できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how an iterator can be used explicitly to emulate a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、イテレータが明示的に使われて&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how you can determine free shipping options based on a customer’s purchase price:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どうやってあなたが顧客の購入品価格を基に無償出荷オプションを判定できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example temporarily rebinds the memory of a &lt;c0&gt;UInt64&lt;/c0&gt; pointer to &lt;c1&gt;Int64&lt;/c1&gt;, then accesses a property on the signed integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、 一時的に&lt;c0&gt;UInt64&lt;/c0&gt;ポインタのメモリを&lt;c1&gt;Int64&lt;/c1&gt;に再束縛します、それから符号付き整数上のあるプロパティにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example transforms a string to uppercase letters:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある文字列を大文字の文字に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example transforms the error value of a result by wrapping it in a custom &lt;c1&gt;Error&lt;/c1&gt; type:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある結果のエラー値を、それをあるあつらえの&lt;c1&gt;Error&lt;/c1&gt;型の中のラップすることによって変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example transforms the integer success value of a result into a string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、ある結果の整数成功値を文字列へ変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses &lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to sort an array of floating-point values, including some that are NaN:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;is&lt;w1&gt;Totally&lt;w2&gt;Ordered(below&lt;w3&gt;Or&lt;w4&gt;Equal&lt;w5&gt;To:)&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って、NaNである何かを含んでいる、浮動小数点値の配列をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses &lt;c0&gt;some&lt;w1&gt;Bytes&lt;/w1&gt;&lt;/c0&gt;, an &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Buffer&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance, to demonstrate the difference between assigning a buffer pointer and using a buffer pointer as the source for another collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は&lt;c0&gt;some&lt;w1&gt;Bytes&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Buffer&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスを使って、バッファポインタの割り当することとバッファポインタを別のコレクションの要素のソースとして使うことの間の違いを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses &lt;c0&gt;some&lt;w1&gt;Bytes&lt;/w1&gt;&lt;/c0&gt;, an &lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance, to demonstrate the difference between assigning a buffer pointer and using a buffer pointer as the source for another collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は&lt;c0&gt;some&lt;w1&gt;Bytes&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Buffer&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスを使って、バッファポインタの割り当することとバッファポインタを別のコレクションの要素のソースとして使うことの間の違いを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses implicit bridging to pass a pointer to &lt;c1&gt;value&lt;/c1&gt; when calling &lt;c2&gt;print(address:&lt;w3&gt;as:)&lt;/w3&gt;&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c2&gt;print(address:&lt;w3&gt;as:)&lt;/w3&gt;&lt;/c2&gt;を呼び出すとき、暗黙的ブリッジを使ってポインタを&lt;c1&gt;value&lt;/c1&gt;へと渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses optional chaining to access the &lt;c1&gt;has&lt;w2&gt;Suffix(_:)&lt;/w2&gt;&lt;/c1&gt; method on a &lt;c3&gt;String?&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、オプショナル連鎖を使って、&lt;c1&gt;has&lt;w2&gt;Suffix(_:)&lt;/w2&gt;&lt;/c1&gt;メソッドに&lt;c3&gt;String?&lt;/c3&gt;インスタンス上でアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;drop(while:)&lt;/c0&gt; method to skip over the positive numbers at the beginning of the &lt;c1&gt;numbers&lt;/c1&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;drop(while:)&lt;/c0&gt;メソッドを使って、正の数を&lt;c1&gt;numbers&lt;/c1&gt;配列の始まりで省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;first(where:)&lt;/c0&gt; method to find the first negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;first(where:)&lt;/c0&gt;メソッドを使って、整数の配列において最初の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;negate()&lt;/c0&gt; method to negate the value of an integer &lt;c1&gt;x&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は&lt;c0&gt;negate()&lt;/c0&gt;メソッドを使って、整数&lt;c1&gt;x&lt;/c1&gt;の値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;prefix(while:)&lt;/c0&gt; method to find the positive numbers at the beginning of the &lt;c1&gt;numbers&lt;/c1&gt; array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;prefix(while:)&lt;/c0&gt;メソッドを使って、正の数を&lt;c1&gt;numbers&lt;/c1&gt;配列の始まりで見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c0&gt;zip(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は&lt;c0&gt;zip(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;関数を使って、同時に文字列からなる配列とある可付番範囲の全体にわたって反復します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;c2&gt;~=&lt;/c2&gt; operator to test whether an integer is included in a range of single-digit numbers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c2&gt;~=&lt;/c2&gt;演算子を使って、ある整数が一桁の数いくつかからなるある範囲に含まれるかどうか調べます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;s0&gt;&lt;c1&gt;init(catching:)&lt;/c1&gt;&lt;/s0&gt; initializer in the broader context of saving a series of calls for later statistical analysis:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;s0&gt;&lt;c1&gt;init(catching:)&lt;/c1&gt;&lt;/s0&gt;イニシャライザを、後で統計学的に分析するために一連の呼び出しを保存する、より幅広い文脈において使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the C &lt;c0&gt;strncmp&lt;/c0&gt; function to compare the beginning of two Swift strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、C &lt;c0&gt;strncmp&lt;/c0&gt;関数を使って２つのSwift文字列を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the buffer pointer’s subscript to access and modify the elements of a mutable buffer pointing to the contiguous contents of an array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、バッファポインタのもつ添え字を使うことで、配列の隣接内容を指している可変バッファの要素にアクセスして修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the buffer pointer’s subscript to access every other element of the buffer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、バッファポインタの添え字を使うことで、そのバッファのすべての他の要素にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the macro as a suffix to rename an enumeration:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、マクロを接尾辞として使って列挙を改名します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-16 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-16コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-8コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this initializer to create a new &lt;c0&gt;Double&lt;/c0&gt; instance with the sign of &lt;c1&gt;a&lt;/c1&gt; and the magnitude of &lt;c2&gt;b&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを使って新しい&lt;c0&gt;Double&lt;/c0&gt;インスタンスを&lt;c1&gt;a&lt;/c1&gt;の符号と&lt;c2&gt;b&lt;/c2&gt;の規模で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this initializer to create a new &lt;c0&gt;Double&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを使って新しい&lt;c0&gt;Double&lt;/c0&gt;インスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to convert a partial range up to &lt;c1&gt;4&lt;/c1&gt; into a half-open range, using an array instance to add the range’s lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、&lt;c1&gt;4&lt;/c1&gt;までの不完全な範囲を半開範囲へと変換します、配列インスタンスを使って範囲の下側の境界を追加しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to multiply two &lt;c6&gt;Int8&lt;/c6&gt; values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つの&lt;c6&gt;Int8&lt;/c6&gt;値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses this method to multiply two &lt;c6&gt;UInt8&lt;/c6&gt; values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つの&lt;c6&gt;UInt8&lt;/c6&gt;値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show how string interpolations are translated into calls to &lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、どのように文字列補間が&lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;への呼び出しに翻訳されるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show the effects of the &lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; parameters when splitting a string at each space character (” “).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;パラメータの効果を、各空白文字（” “）で文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples show the effects of the &lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; parameters when splitting a string using a closure that matches spaces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、&lt;c0&gt;max&lt;w1&gt;Splits&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;omitting&lt;w3&gt;Empty&lt;w4&gt;Subsequences&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;パラメータの効果を、空白にマッチするクロージャを使って文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples use this dictionary of image names and file paths:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以降の例は、この画像名とファイルパスの辞書を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following examples use this initializer with the contents of two different &lt;c0&gt;UInt8&lt;/c0&gt; arrays—the first with a well-formed UTF-8 code unit sequence, and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例は、このイニシャライザを２つの異なる&lt;c0&gt;UInt8&lt;/c0&gt;配列の内容とともに使います — 整形式UTF-8コード単位シーケンスをもつ最初のもの、そして誤形式シーケンスをその終わりでもつ２番目もの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following rules determine how an API's existing interface is imported:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の規則は、APIの持つ既存のインターフェイスがインポートされる方法を決定します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following special cases also apply:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の特別な場合もまた適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following tables use &lt;c0&gt;Type&lt;/c0&gt; as a placeholder type name to indicate syntax for the mappings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の表は、&lt;c0&gt;Type&lt;/c0&gt;をプレースホルダー型名として使ってマップのための構文を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The fourth element of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの４番目の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function uses a recursive approach to perform the same comparisons on smaller and smaller pieces of the original strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、反復する取り組みを使って、元の文字列のどんどん小さい断片上で同じ比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function uses the &lt;c2&gt;multiplied&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; method to multiply &lt;c5&gt;x&lt;/c5&gt; by itself and check whether the result is too large to represent in the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、&lt;c2&gt;multiplied&lt;w3&gt;Reporting&lt;w4&gt;Overflow(by:)&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;メソッドを使って、&lt;c5&gt;x&lt;/c5&gt;をそれ自身で乗算して、結果が同じ型で表現するのに大きすぎないかどうか検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general category (most usual classification) of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの一般カテゴリ（最も普通のクラス分け）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general category of a scalar is its “first-order, most usual categorization”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーの一般カテゴリは、それの “第一次の、最も普通のカテゴリ分け” です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The given argument without any changes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何ら変更のない、与えられた引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The given string may begin with a plus or minus sign character (&lt;c0&gt;+&lt;/c0&gt; or &lt;c1&gt;-&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた文字列は、プラスまたはマイナス符号文字（&lt;c0&gt;+&lt;/c0&gt;または&lt;c1&gt;-&lt;/c1&gt;）で始まっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The global &lt;c0&gt;abs(_:)&lt;/c0&gt; function provides more familiar syntax when you need to find an absolute value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>グローバル&lt;c0&gt;abs(_:)&lt;/c0&gt;関数は、あなたが絶対値を見つける必要がある時により親しみやすい構文を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greater of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のより大きい方、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greatest element in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの中の最大の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greatest finite number representable by this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型によって表現可能な最も大きな有限数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The greatest representable value that compares less than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表現可能な最も大きい値で、この値と比較してより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash algorithm implemented by &lt;c1&gt;Hasher&lt;/c1&gt; may itself change between any two versions of the standard library.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Hasher&lt;/c1&gt;によって実装されるハッシュアルゴリズムは、標準ライブラリの任意の２つのバージョン間でそれ自体が変化するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash value calculated by the hasher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーによって計算されるハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hash value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hasher to use when combining the components of this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスの構成要素を結合する場合に使うハーシャー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hasher uses a per-execution seed value that is set during process startup, usually from a high-quality random source.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ハーシャーは実行毎シード値を使います、それはプロセスの立ち上げの間に設定されます、ふつうは高品質の無作為出典から。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The header's name is generated from your product module name, followed by &lt;c0&gt;"-Swift&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヘッダの名前は、あなたの製品モジュール名から、それに&lt;c0&gt;"-Swift&lt;w1&gt;.h"&lt;/w1&gt;&lt;/c0&gt;を続けることで生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The immutable buffer pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる不変のバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The immutable pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる不変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The immutable raw pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる不変の生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The implementation of the new &lt;c0&gt;rgba&lt;/c0&gt; property reuses the existing &lt;c1&gt;_&lt;w2&gt;_get&lt;w3&gt;Red(red:&lt;w4&gt;green:&lt;w5&gt;blue:&lt;w6&gt;alpha:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method to ensure that functionality remains the same between Swift and Objective-C:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい&lt;c0&gt;rgba&lt;/c0&gt;プロパティの実装は、既存の&lt;c1&gt;_&lt;w2&gt;_get&lt;w3&gt;Red(red:&lt;w4&gt;green:&lt;w5&gt;blue:&lt;w6&gt;alpha:)&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドを再利用して、SwiftとObjective-Cの間で機能性が同じままであることを確かにします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The imported &lt;c0&gt;Cake&lt;/c0&gt; structure and its nested types are imported with a memberwise initializer that you can use to initialize the structure with custom values for its fields:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされた&lt;c0&gt;Cake&lt;/c0&gt;構造体とそれの入れ子にされる型は、あるメンバー関連イニシャライザを使ってインポートされます、それをあなたは使うことで構造体をそれのフィールドにカスタム値を使って初期化できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The imported Swift structure contains a stored property for each C structure field and an initializer whose parameters correspond to the stored properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたSwift構造体は、各C構造体フィールドに対してひとつの格納プロパティを、そしてそれのパラメータが格納プロパティと対応するひとつのイニシャライザを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The increasing sequence of nonnegative integers used along with the bitwise left shift operator (&lt;c0&gt;&lt;&lt;&lt;/c0&gt;) ensures that each option in the option set takes up a unique bit in the binary representation of the raw value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非負整数からなるシーケンスの漸増、それだけでなくビット単位左シフト演算子（&lt;c0&gt;&lt;&lt;&lt;/c0&gt;）は、オプションセットの中の各オプションが、生の値のバイナリ表現においてある特有なビットを取ることを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index at which to start the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それで結果の下位シーケンスが始まるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index must be a valid index of &lt;c0&gt;String(utf16)&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは&lt;c0&gt;String(utf16)&lt;/c0&gt;の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of &lt;c0&gt;member&lt;/c0&gt; if it exists in the set; otherwise, &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それがこの集合に含まれるならば&lt;c0&gt;member&lt;/c0&gt;のインデックス；そうでなければ、&lt;c1&gt;nil&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the element to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスする要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first byte to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する最初のバイトのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element for which &lt;c0&gt;predicate&lt;/c0&gt; returns &lt;c1&gt;true&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対して&lt;c0&gt;predicate&lt;/c0&gt;が&lt;c1&gt;true&lt;/c1&gt;を返す最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element in a nonempty buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないバッファの中の最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first element in the reordered collection that matches &lt;c0&gt;belongs&lt;w1&gt;In&lt;w2&gt;Second&lt;w3&gt;Partition&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>並べ直されたコレクションの中の最初の要素のインデックス、それは&lt;c0&gt;belongs&lt;w1&gt;In&lt;w2&gt;Second&lt;w3&gt;Partition&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the first value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する１つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the last element in the collection that matches &lt;c0&gt;predicate&lt;/c0&gt;, or &lt;c1&gt;nil&lt;/c1&gt; if no elements match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;に合致する、コレクションの中の最後の要素のインデックス、または合致する要素がないならば&lt;c1&gt;nil&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the last element to include in the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の下位シーケンスの中に含まれることになる最後の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the lead surrogate is successfully converted to a position in &lt;c1&gt;utf8&lt;/c1&gt;, but the index of the trailing surrogate is not.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先頭サロゲートはうまく&lt;c1&gt;utf8&lt;/c1&gt;での位置に変換されます、しかし後続サロゲートのインデックスは違います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the member to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除するメンバのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the second byte to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する２番目のバイトのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index of the second value to swap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>交換する２つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index type for a string’s &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列のもつ&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;ビューのためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index value immediately after &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の直後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The index value immediately before &lt;c0&gt;i&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;i&lt;/c0&gt;の直前のインデックス値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの添え字に使うのに有効である、昇順でのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The indices that are valid for subscripting the range, in ascending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>昇順で、範囲の添え字として有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The infix operators are grouped below by precedence group in decreasing order of precedence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>中置演算子は、以下に優先順位の高い方から優先順位グループによって分類されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer creates the string representation of &lt;c0&gt;instance&lt;/c0&gt; in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザは、&lt;c0&gt;instance&lt;/c0&gt;の文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer creates the string representation of &lt;c1&gt;instance&lt;/c1&gt; in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザは、&lt;c1&gt;instance&lt;/c1&gt;の文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer succeeds if &lt;c0&gt;v&lt;/c0&gt; is a valid Unicode scalar value, in the range &lt;c1&gt;0...0x&lt;w2&gt;D7FF&lt;/w2&gt;&lt;/c1&gt; or &lt;c3&gt;0x&lt;w4&gt;E000...0x10FFFF&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;v&lt;/c0&gt;が有効なユニコードスカラー値、範囲&lt;c1&gt;0...0x&lt;w2&gt;D7FF&lt;/w2&gt;&lt;/c1&gt;または&lt;c3&gt;0x&lt;w4&gt;E000...0x10FFFF&lt;/w4&gt;&lt;/c3&gt;の中であるならば、イニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initializer succeeds if &lt;c0&gt;v&lt;/c0&gt; is a valid Unicode scalar value—that is, if &lt;c1&gt;v&lt;/c1&gt; is in the range &lt;c2&gt;0...0x&lt;w3&gt;D7FF&lt;/w3&gt;&lt;/c2&gt; or &lt;c4&gt;0x&lt;w5&gt;E000...0x10FFFF&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;v&lt;/c0&gt;が有効なユニコードスカラー値であるならば — すなわち、&lt;c1&gt;v&lt;/c1&gt;が範囲&lt;c2&gt;0...0x&lt;w3&gt;D7FF&lt;/w3&gt;&lt;/c2&gt;または&lt;c4&gt;0x&lt;w5&gt;E000...0x10FFFF&lt;/w5&gt;&lt;/c4&gt;の中であるならば、イニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Float16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float16&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Float80&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float80&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input string to convert to a &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;/c0&gt;インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The input was entirely consumed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入力はすっかり消費された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance for which to create a mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してミラーを作成するインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance passed as &lt;c0&gt;value&lt;/c0&gt; will leak if nothing eventually balances the retain.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;として渡されるインスタンスは、リテインが結局は均衡を保つことがないならば漏洩します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to assign this buffer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それにこのバッファのもつメモリをアサインします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to assign this pointer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それにこのポインタのもつメモリをアサインします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to copy into memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにコピーすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to initialize this buffer’s memory with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それでこのバッファのもつメモリ初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to initialize this pointer’s memory with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それでこのポインタのもつメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to initialize this pointer’s pointee to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンス、それにこのポインタのもつpointeeを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance to represent in the new mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいミラーの中で表現するインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instances in the region &lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt; are unaffected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c6&gt;source..&lt;(source + count)&lt;/c6&gt;の中のインスタンスは、影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instances of &lt;c8&gt;NSSet&lt;/c8&gt; and &lt;c9&gt;Set&lt;/c9&gt; share buffer using the same copy-on-write optimization that is used when two instances of &lt;c10&gt;Set&lt;/c10&gt; share buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c8&gt;NSSet&lt;/c8&gt;と&lt;c9&gt;Set&lt;/c9&gt;のインスタンスは、&lt;c10&gt;Set&lt;/c10&gt;の２つのインスタンスがバッファを共有するとき使われるのと、同じコピーオンライト最適化を使ってバッファを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer encoding of a &lt;c0&gt;Float16&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Float16&lt;/c0&gt;インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer encoding of a &lt;c0&gt;Float&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある&lt;c0&gt;Float&lt;/c0&gt;インスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer to convert to a floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値へ変換されることになる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer value of the unique identifier wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる特有識別子の整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integer wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるデータ値の中にラップされる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The integral value found by rounding using &lt;c0&gt;rule&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rule&lt;/c0&gt;を使って丸められることによって見出される整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The intersection of &lt;c0&gt;[member]&lt;/c0&gt; and the set, if the intersection was nonempty; otherwise, &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;[member]&lt;/c0&gt;とこの集合の交叉、その交叉が空でなかったならば；そうでなければ、&lt;c1&gt;nil&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The intersection of &lt;c0&gt;[new&lt;w1&gt;Member]&lt;/w1&gt;&lt;/c0&gt; and the set if the intersection was nonempty; otherwise, &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;[new&lt;w1&gt;Member]&lt;/w1&gt;&lt;/c0&gt;とこの集合の交叉、その交叉が空でなかったならば；そうでなければ、&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The iterator for a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスに対するイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The joined sequence of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>つなぎ合わされたシーケンス要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key path to append.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加することになるキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key that the decoded value is associated with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコードされた値が関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key that the nested container is associated with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>入れ子にされたコンテナが関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to associate the object with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オブジェクトと関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to associate the value with.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値と関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to decode &lt;c0&gt;super&lt;/c0&gt; for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;super&lt;/c0&gt;をデコードするためのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to encode &lt;c0&gt;super&lt;/c0&gt; for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;super&lt;/c0&gt;をエンコードするためのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to encode the container for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンテナをエンコードするためのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to search for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このキーについて調査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key type to use for the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コンテナに対して使うためのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key-value pair at position &lt;c0&gt;position&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>位置&lt;c0&gt;position&lt;/c0&gt;でのキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The kind of error this publisher might publish.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このパブリッシャーが発行するかもしれないエラーの種類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The kind of value published by this publisher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このパブリッシャーによって発行された値の種類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The kind of values published by this publisher.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このパブリッシャーによって発行される値の種類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The labels of the resulting mirror’s &lt;c2&gt;children&lt;/c2&gt; collection are all &lt;c3&gt;nil&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のミラーのもつ&lt;c2&gt;children&lt;/c2&gt;コレクションのラベルは、すべて&lt;c3&gt;nil&lt;/c3&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lanewise maximum of two vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターのレーン単位の最大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lanewise minimum of two vectors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのベクターのレーン単位最小。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection if the collection has one or more elements; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが１つ以上の要素を持つならばコレクションの最後の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection if the collection is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空でないならばコレクションの最後の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの最後の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last element of the sequence that satisfies &lt;c0&gt;predicate&lt;/c0&gt;, or &lt;c1&gt;nil&lt;/c1&gt; if there is no element that satisfies &lt;c2&gt;predicate&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;predicate&lt;/c0&gt;満たすシーケンスの最後の要素、または&lt;c1&gt;predicate&lt;/c1&gt;を満たす要素が無いならば&lt;c2&gt;nil&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last index where &lt;c0&gt;element&lt;/c0&gt; is found.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで&lt;c0&gt;element&lt;/c0&gt;が見つけられた最後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last parameter of these functions is of the associated &lt;c0&gt;Stride&lt;/c0&gt; type—the type that represents the distance between any two instances of the &lt;c1&gt;Strideable&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの関数の最後のパラメータは、&lt;c0&gt;Stride&lt;/c0&gt;型 — &lt;c1&gt;Strideable&lt;/c1&gt;型の何らかの２つのインスタンスの間の隔たりを表す型の関連型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The leading surrogate code unit of &lt;c0&gt;x&lt;/c0&gt; when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16でエンコードされる時の&lt;c0&gt;x&lt;/c0&gt;の先行サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least element in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクターの中の最小の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least normal exponent for values of the type &lt;c0&gt;F&lt;/c0&gt; is &lt;c1&gt;1 - bias&lt;/c1&gt;, and the largest finite exponent is &lt;c2&gt;bias&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;F&lt;/c0&gt;の最小正規化指数は、&lt;c1&gt;1 - bias&lt;/c1&gt;です、最大有限指数は&lt;c2&gt;bias&lt;/c2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least positive normal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も小さい正のノーマル数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least positive number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も小さい正の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The least representable value that compares greater than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>表現可能な最も小さい値で、この値と比較してより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The literal &lt;c3&gt;23&lt;/c3&gt; is inferred as an &lt;c4&gt;Int&lt;/c4&gt; instance and then wrapped as an optional before the comparison is performed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラル&lt;c3&gt;23&lt;/c3&gt;は、&lt;c4&gt;Int&lt;/c4&gt;インスタンスと推論され、それから比較が実行される前にオプショナルとしてラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The little-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この整数のリトルエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The longer scalar values may need two &lt;c0&gt;UInt16&lt;/c0&gt; values for storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より長いスカラー値は、２つの&lt;c0&gt;UInt16&lt;/c0&gt;値をストレージとして必要とするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lower bound for the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の下側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The lowercase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのローワーケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The macro behaves just like the &lt;c2&gt;NS&lt;w3&gt;_SWIFT&lt;w4&gt;_UNAVAILABLE&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; macro except that it doesn't support the customizable error message and it restricts compile-time access to the declaration in Objective-C code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このマクロはちょうど&lt;c2&gt;NS&lt;w3&gt;_SWIFT&lt;w4&gt;_UNAVAILABLE&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;マクロのように振舞います、しかしそれがカスタマイズ可能なエラーメッセージをサポートしないことと、それがコンパイル時アクセスをObjective-Cコードの中の宣言に制限することを除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The macro preserves the Objective-C name for use with Objective-C code, so the API has appropriate names in each language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このマクロは、Objective-C名をObjective-Cコードで使うために保護します、それでそのAPIは適切な名前を各言語において持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The magnitude of a floating-point value &lt;c0&gt;x&lt;/c0&gt; of type &lt;c1&gt;F&lt;/c1&gt; can be calculated by using the following formula, where &lt;c2&gt;**&lt;/c2&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c1&gt;F&lt;/c1&gt;の浮動小数点値&lt;c0&gt;x&lt;/c0&gt;の規模は、以下の公式を使って計算されることができます、そこで&lt;c2&gt;**&lt;/c2&gt;は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The magnitude of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の規模。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mask type resulting from pointwise comparisons of this vector type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクター型のポイント関連比較からの結果のマスク型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking addition assignment operator (&lt;c0&gt;&amp;+=&lt;/c0&gt;) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク加算代入演算子（&lt;c0&gt;&amp;+=&lt;/c0&gt;）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking multiplication assignment operator (&lt;c0&gt;&amp;*=&lt;/c0&gt;) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク乗算代入演算子（&lt;c0&gt;&amp;*=&lt;/c0&gt;）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The masking subtraction assignment operator (&lt;c0&gt;&amp;-=&lt;/c0&gt;) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク減算代入演算子（&lt;c0&gt;&amp;-=&lt;/c0&gt;）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mathematical constant pi.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>数学の定数pi。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of elements to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される要素の最大限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of times to split the collection, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum number of times to split the sequence, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maximum representable integer in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型における最大の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The means of generating the subject’s ancestor representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>主題のもつ先祖表現を生み出す手段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory at this pointer plus &lt;c0&gt;offset&lt;/c0&gt; must be properly aligned for accessing &lt;c1&gt;T&lt;/c1&gt; and initialized to &lt;c2&gt;T&lt;/c2&gt; or another type that is layout compatible with &lt;c3&gt;T&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタに&lt;c0&gt;offset&lt;/c0&gt;を加えたところでのメモリは、&lt;c1&gt;T&lt;/c1&gt;にアクセスするために厳密にアラインされ、そして&lt;c2&gt;T&lt;/c2&gt;または&lt;c3&gt;T&lt;/c3&gt;とレイアウト互換の別の型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory at this pointer plus &lt;c1&gt;offset&lt;/c1&gt; must be properly aligned for accessing &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;offset&lt;/c1&gt;を加えたこのポインタでのメモリは、&lt;c2&gt;T&lt;/c2&gt;にアクセスするために適切にアラインされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region &lt;c0&gt;source..&lt;(source + byte&lt;w1&gt;Count)&lt;/w1&gt;&lt;/c0&gt; may overlap with the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c0&gt;source..&lt;(source + byte&lt;w1&gt;Count)&lt;/w1&gt;&lt;/c0&gt;の中のメモリは、このポインタによって参照されるメモリと重なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region &lt;c0&gt;source..&lt;(source + byte&lt;w1&gt;Count)&lt;/w1&gt;&lt;/c0&gt; must be initialized to a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c0&gt;source..&lt;(source + byte&lt;w1&gt;Count)&lt;/w1&gt;&lt;/c0&gt;の中のメモリは、自明型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region &lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt; may overlap with the destination region.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt;の中のメモリは、行き先の領域と重なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region &lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt; must be initialized to type &lt;c1&gt;T&lt;/c1&gt; and must not overlap the destination region.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt;の中のメモリは、型&lt;c1&gt;T&lt;/c1&gt;に初期化されなければなりません、そして行き先の領域と重なってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in the region &lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt; must be initialized to type &lt;c1&gt;T&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>領域&lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt;の中のメモリは、型&lt;c1&gt;T&lt;/c1&gt;に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory in this region is bound to &lt;c0&gt;T&lt;/c0&gt;, but has not been modified in any other way.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この領域の中のメモリは、&lt;c0&gt;T&lt;/c0&gt;へと束縛されます、しかし他のいかなる方法においても変更されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory is allocated, but not initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリはアロケートされます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory layout of a type, describing its size, stride, and alignment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型のメモリレイアウト、それはそれのサイズ、ストライド、およびアライメントを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must also be uninitialized, initialized to &lt;c1&gt;T&lt;/c1&gt;, or initialized to another trivial type that is layout compatible with &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリはまた、未初期化状態にされる、&lt;c1&gt;T&lt;/c1&gt;に初期化される、または別の自明型で&lt;c2&gt;T&lt;/c2&gt;とレイアウト互換なものに初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must also be uninitialized, initialized to &lt;c3&gt;T&lt;/c3&gt;, or initialized to another trivial type that is layout compatible with &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリはまた、未初期化状態にされる、&lt;c3&gt;T&lt;/c3&gt;に初期化される、または別の自明型で&lt;c4&gt;T&lt;/c4&gt;とレイアウト互換なものに初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must be initialized to a value of a type that is layout compatible with &lt;c0&gt;type&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、&lt;c0&gt;type&lt;/c0&gt;とレイアウト互換である型の値に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must be uninitialized or initialized to a type that is layout compatible with &lt;c3&gt;T&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、未初期化であるか&lt;c3&gt;T&lt;/c3&gt;とレイアウト互換でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must be uninitialized or initialized to a type that is layout compatible with &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは、未初期化であるか&lt;c4&gt;T&lt;/c4&gt;とレイアウト互換でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory must not be initialized or &lt;c0&gt;Pointee&lt;/c0&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリは初期化されてはなりません、また&lt;c0&gt;Pointee&lt;/c0&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by &lt;c0&gt;source&lt;/c0&gt; may overlap with the memory referenced by this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;によって参照されるメモリは、このバッファによって参照されるメモリと重なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスによって参照されるメモリは、いくつかの状態の１つであることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスによって参照されるメモリは、いくつかの状態の１つであることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;インスタンスによって参照されるメモリは、幾つかの状態のうち１つであるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスによって参照されるメモリは、幾つかの状態のうち１つであるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by the new buffer is allocated, but not initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファによって参照されるメモリは、アロケートされます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by the returned raw pointer is still bound to &lt;c0&gt;Pointee&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される生のポインタによって参照されるメモリは、依然として&lt;c0&gt;Pointee&lt;/c0&gt;への境界です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by this buffer must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリは、未初期化状態にされるまたは自明型に初期化されなければなりません、そして&lt;c0&gt;T&lt;/c0&gt;にアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by this pointer must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリは、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory referenced by this pointer must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing &lt;c0&gt;T&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリは、未初期化状態にされるまたは自明型に初期化されなければなりません、そして&lt;c0&gt;T&lt;/c0&gt;にアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory region &lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt; must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ領域&lt;c0&gt;source..&lt;(source + count)&lt;/c0&gt;は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory regions referenced by &lt;c1&gt;source&lt;/c1&gt; and this pointer may overlap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;source&lt;/c1&gt;によって参照されるメモリ領域とこのポインタは、重なり合うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory regions referenced by &lt;c1&gt;source&lt;/c1&gt; and this pointer must not overlap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;source&lt;/c1&gt;によって参照されるメモリ領域とこのポインタは、重なり合わなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory regions referenced by &lt;c2&gt;source&lt;/c2&gt; and this pointer may overlap.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;source&lt;/c2&gt;によって参照されるメモリ領域とこのポインタは、重なり合うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory starting at this pointer must be bound to the type &lt;c1&gt;T&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まるメモリは、型&lt;c1&gt;T&lt;/c1&gt;に束縛されていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory to be deallocated must be uninitialized or initialized to a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>割り当て解除されるメモリは、未初期化でなければなりません、または自明型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory to read for the new instance must not extend beyond the buffer pointer’s memory region—that is, &lt;c0&gt;offset + Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt; must be less than or equal to the buffer pointer’s &lt;c2&gt;count&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために読み出すメモリは、バッファポインタのもつメモリ領域を越えて拡張されてはなりません — すなわち、&lt;c0&gt;offset + Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt;はバッファポインタのもつ&lt;c2&gt;count&lt;/c2&gt;より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The memory written to must not extend beyond the buffer pointer’s memory region—that is, &lt;c0&gt;offset + Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt; must be less than or equal to the buffer pointer’s &lt;c2&gt;count&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込まれることになるメモリは、バッファポインタのもつメモリ領域を越えて拡張されてはなりません — すなわち、&lt;c0&gt;offset + Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt;はバッファポインタのもつ&lt;c2&gt;count&lt;/c2&gt;より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum number of &lt;c0&gt;Element&lt;/c0&gt;s that must be able to be stored in the new buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファに格納されることが可能でなければならない&lt;c0&gt;Element&lt;/c0&gt;の最小限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum number of ASCII character’s worth of storage to allocate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>割り当てる最小数のASCII文字相当のストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum number of elements that the newly created set should be able to store without reallocating its storage buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しく作成された集合がそれのストレージバッファをアロケートし直すことなしに格納できるであろう要素の最小の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt;, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;の最小、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The minimum representable integer in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型における最小の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most common way to iterate over the elements of a sequence is to use a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの要素のすべてにわたって反復するための最も一般的な方法は、&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループを使うことです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most effective approach for migrating code to Swift is on a per-file basis—that is, one class at a time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトへの移っているコードのために最も効果的なアプローチは、ファイル毎原則の上にあります ― すなわち、一度にひとつのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most general classification of a Unicode scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーの最も一般的なクラス分け。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The multiplication operator (&lt;c0&gt;*&lt;/c0&gt;) calculates the product of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>乗算演算子（&lt;c0&gt;*&lt;/c0&gt;）は、それの２つの引数の積を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mutable buffer pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる可変のバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mutable raw pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる可変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of a scalar is immutable and never changed in future versions of the Unicode Standard.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーの名前は不変です、そして決してユニコード標準の将来の版において変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name “epsilon” suggests that this quantity is a good tolerance to choose for approximate comparisons, but it is almost always unsuitable for that purpose.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前 “イプシロン” は、この量がおおよその比較のために選ぶのに良い許容誤差であることを暗示します、しかしそれはほとんど常にその目的のために適しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The naming of those macros is slightly misleading, because &lt;c4&gt;infinity&lt;/c4&gt; is greater than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜなら&lt;c4&gt;infinity&lt;/c4&gt;はこの値より大きいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The naming of those macros is slightly misleading, because subnormals, zeros, and negative numbers are smaller than this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜならサブノーマル、ゼロ、そして負の数はこの値より小さいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い整数値、または、２つの整数値が同じくらい近いならば、より大きい規模を持つ整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The negation operator (prefix &lt;c0&gt;-&lt;/c0&gt;) returns the additive inverse of its argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負にする演算子（前置&lt;c0&gt;-&lt;/c0&gt;）は、この引数の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new Unicode scalar values to add to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ加える新しいユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new buffer represents the same region of memory as &lt;c0&gt;slice&lt;/c0&gt;, but is indexed starting at zero instead of sharing indices with the original buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファは、&lt;c0&gt;slice&lt;/c0&gt;と同じメモリ領域を表します、しかしゼロで開始してインデックスをつけられます、元のバッファとインデックスを共有するのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new buffer represents the same region of memory as the slice, but its indices start at zero instead of at the beginning of the slice in the original buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファは、このスライスと同じメモリ領域を表します、しかしそれのインデックスはゼロで開始します、元のバッファ中のスライスの始まりでというわけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new character to insert into the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ挿入する新しい文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new characters to add to the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ加える新しいいくらかの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new element is inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素は、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new element to insert into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements are inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいいくらかの要素が、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to add to the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションに加える新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new elements to insert into the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションへ挿入される新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new name is shorter, but still understandable because it uses an industry-standard initialism for color components: RGBA.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい名前はより短いです、しかしまだ理解可能です、なぜならそれは色構成要素のための業界標準頭文字語：RGBAを使うからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value represents the address of the pointer passed as &lt;c0&gt;pointer&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値は、&lt;c0&gt;pointer&lt;/c0&gt;として渡されるポインタのアドレスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value’s exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の持つ指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new value’s significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の持つ仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next &lt;c5&gt;n&lt;/c5&gt; bytes of the memory that &lt;c6&gt;some&lt;w7&gt;Bytes&lt;/w7&gt;&lt;/c6&gt; references are copied in this code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c6&gt;some&lt;w7&gt;Bytes&lt;/w7&gt;&lt;/c6&gt;が参照する次の&lt;c5&gt;n&lt;/c5&gt;バイトのメモリは、このコードでコピーされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next element in the underlying sequence if a next element exists; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素が存在するならば基礎をなすシーケンス中の次の要素；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next element in the underlying sequence, if a next element exists; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の要素が存在するならば、基礎をなすシーケンス中の次の要素；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to convert the indices of the two UTF-16 code points that represent the teacup emoji (&lt;c0&gt;"🍵"&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、ティーカップ絵文字（&lt;c0&gt;"🍵"&lt;/c0&gt;）を表す２つのUTF-16コード点のインデックスの変換を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to retrieve an index six positions from &lt;c0&gt;s&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; but fails, because that distance is beyond the index passed as &lt;c3&gt;limit&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は&lt;c0&gt;s&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から６位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔は&lt;c3&gt;limit&lt;/c3&gt;として渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example attempts to retrieve an index ten positions from &lt;c0&gt;numbers&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, but fails, because that distance is beyond the index passed as &lt;c3&gt;limit&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は&lt;c0&gt;numbers&lt;w1&gt;.start&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から10位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔は&lt;c3&gt;limit&lt;/c3&gt;として渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example creates a slice of &lt;c4&gt;numbers&lt;/c4&gt; starting at index &lt;c5&gt;2&lt;/c5&gt;, and then uses the slice with &lt;c6&gt;relative(to:)&lt;/c6&gt; to convert &lt;c7&gt;up&lt;w8&gt;To&lt;w9&gt;Four&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; to a concrete range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、&lt;c4&gt;numbers&lt;/c4&gt;のスライスをインデックス&lt;c5&gt;2&lt;/c5&gt;で開始して作成して、それからそのスライスを&lt;c6&gt;relative(to:)&lt;/c6&gt;と使うことで&lt;c7&gt;up&lt;w8&gt;To&lt;w9&gt;Four&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を具体的な範囲へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example declares a generic &lt;c0&gt;squared&lt;/c0&gt; function, which accepts an instance &lt;c1&gt;x&lt;/c1&gt; of any fixed-width integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>次の例は、総称体&lt;c0&gt;squared&lt;/c0&gt;関数を宣言します、それはどんな固定長整数型の&lt;c1&gt;x&lt;/c1&gt;インスタンスでも受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next sequential byte in the raw buffer if another byte exists; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>別のバイトが存在するならば生のバッファでの次の順次的なバイト；そうでなければ、&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The non-optional value is wrapped as an optional before the comparison is made.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>非オプショナル値は、比較がなされる前にオプショナル値としてラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The normative formal alias of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのスカラーの標準の公式のエイリアス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of UTF-8 code units (excluding the null terminator).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8コード単位の数（null終端子を除外して）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of UTF-8 code units worth of memory to allocate for the string (excluding the null terminator).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このUTF-8コード単位の数だけのメモリを文字列に対してアロケートすることになります（null終端子を除外して）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits equal to 1 in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現の中の１に等しいビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits in the binary representation of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現でのビット数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits required to represent the value’s significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の仮数を表すのに必要とされるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits to shift &lt;c0&gt;lhs&lt;/c0&gt; to the left.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビット数を&lt;c0&gt;lhs&lt;/c0&gt;から左へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits to shift &lt;c0&gt;lhs&lt;/c0&gt; to the right.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このビット数を&lt;c0&gt;lhs&lt;/c0&gt;から右へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits used for the underlying binary representation of values of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の値の基礎をなすバイナリ表現に対して使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bits used to represent the type’s exponent.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の指数を表すのに使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes from the start of one instance of &lt;c0&gt;T&lt;/c0&gt; to the start of the next when stored in contiguous memory or in an &lt;c1&gt;Array&lt;T&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;の１つのインスタンスの始まりから次のものの始まりまでのバイト数、隣接メモリの中にまたは&lt;c1&gt;Array&lt;T&gt;&lt;/c1&gt;の中に格納される場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの中のバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes in this region is &lt;c1&gt;count * Memory&lt;w2&gt;Layout&lt;T&gt;.stride&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この領域の中のバイト数は、&lt;c1&gt;count * Memory&lt;w2&gt;Layout&lt;T&gt;.stride&lt;/w2&gt;&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes to allocate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アロケートすることになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes to copy.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コピーされることになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of bytes to include in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの中に含むことになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of characters in a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の中の文字数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of colors that a traffic light uses isn't expected to grow, so it's not declared to be extensible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>信号機が使う色の数は増大は想定されません、それでそれは拡張可能に宣言されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of consecutive copies of &lt;c0&gt;new&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; to assign.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アサインする&lt;c0&gt;new&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;の連続コピーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of consecutive copies of &lt;c0&gt;new&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; to initialize.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初期化する&lt;c0&gt;new&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;の連続コピーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of copies of &lt;c0&gt;value&lt;/c0&gt; to copy into memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリにコピーすることになる&lt;c0&gt;value&lt;/c0&gt;のコピー数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements contained within this container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコンテナ内に含まれる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements encoded into the container.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコンテナへとエンコードされる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements in this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションの要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの始まりから省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このシーケンスの初めの部分から落とす要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop off the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションの終わりで省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to drop off the end of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの末尾から取り除く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to remove from the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションから削除される要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances in the buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファの中のインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances of &lt;c0&gt;Pointee&lt;/c0&gt; to bind to &lt;c1&gt;type&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Pointee&lt;/c0&gt;のインスタンスの数、&lt;c1&gt;type&lt;/c1&gt;に束縛されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances to copy from the memory referenced by &lt;c0&gt;source&lt;/c0&gt; to this pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;によって参照されるメモリからこのポインタのもつメモリまでコピーされるインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances to deinitialize.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デイニシャライズするインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of instances to move from &lt;c0&gt;source&lt;/c0&gt; to this pointer’s memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;からこのポインタのもつメモリまで移動することになるインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of interpolations which will be appended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>追加されるだろう補間の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of leading zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現における先頭のゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of new elements need not match the number of elements being removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい要素の数は、削除される要素の数と一致する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの中のスカラーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars, or elements, in a vector of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のあるベクターの中のスカラーそれら、または要素それらの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of scalars, or elements, in the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの中のスカラー、または要素、の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of times to repeat &lt;c0&gt;repeated&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; in the resulting string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;repeated&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;を結果文字列の中で繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of times to repeat the value passed in the &lt;c0&gt;repeating&lt;/c0&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;repeating&lt;/c0&gt;パラメータで渡された値を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The number of trailing zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値のバイナリ表現において後に続くゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric type of a scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるスカラーの数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric type of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The numeric value of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The object referenced by this &lt;c0&gt;Unmanaged&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;c0&gt;Unmanaged&lt;/c0&gt;インスタンスによって参照されるオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The object to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードするオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset from this pointer at which to access an instance, measured in strides of the pointer’s &lt;c0&gt;Pointee&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからのオフセット、それでインスタンスにアクセスします、ポインタの&lt;c0&gt;Pointee&lt;/c0&gt;型のストライドにおいて測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset from this pointer, in bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタからのオフセット、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset in bytes from a pointer to a value of type &lt;c0&gt;T&lt;/c0&gt; to a pointer to the storage referenced by &lt;c1&gt;key&lt;/c1&gt;, or &lt;c2&gt;nil&lt;/c2&gt; if no such offset is available for the storage referenced by &lt;c3&gt;key&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型&lt;c0&gt;T&lt;/c0&gt;の値へのポインタから、&lt;c1&gt;key&lt;/c1&gt;によって参照されるストレージへのポインタまでのバイトでのオフセット、または&lt;c2&gt;nil&lt;/c2&gt;、もしそのようなオフセットが&lt;c3&gt;key&lt;/c3&gt;によって参照されるストレージに利用可能でないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset in bytes into the buffer pointer’s memory to begin reading data for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのためにデータの読み出しを開始するための、バッファポインタのもつメモリに対するバイトでのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset into a string’s code units for this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに対する、ある文字列のもつコード単位へのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset is available only if the given key refers to inline, directly addressable storage within the in-memory representation of &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このオフセットは与えられたキーがインラインの、直接にアドレス指定可能なストレージを&lt;c2&gt;T&lt;/c2&gt;のインメモリ表現内で参照する場合にのみ利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset of the byte to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスすることになるバイトのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The offset, in bytes, into the buffer pointer’s memory at which to begin reading data for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファポインタのもつメモリに対する、バイトでの、オフセット、それで新しいインスタンスに対してデータ読み出しを始めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The old name must not be used in the new runtime.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>古い名前は、新しいランタイムで使用されてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The only scalars for which this property is &lt;c0&gt;true&lt;/c0&gt; are:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のスカラーに対してのみこのプロパティは&lt;c0&gt;true&lt;/c0&gt;です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The operation doesn’t require going beyond the limiting &lt;c0&gt;numbers&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value, so it succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この操作は、限度である&lt;c0&gt;numbers&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;値を越えることを要求しません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The operation doesn’t require going beyond the limiting &lt;c0&gt;s&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; value, so it succeeds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算は、限界である&lt;c0&gt;s&lt;w1&gt;.end&lt;w2&gt;Index&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;値を越えていく必要はありません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order in which &lt;c0&gt;A&lt;/c0&gt; is printed relative to the other letters isn't guaranteed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;A&lt;/c0&gt;が他の文字に関連して印字される順番は、保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order of the key-value pairs is kept intact in the resulting &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キー値ペアの順序は、結果の&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスにおいて損なわれず保たれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order of the remaining elements is preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>残っている要素の順番は保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ordering difference happens due to the way the &lt;c5&gt;now(_:)&lt;/c5&gt; and &lt;c6&gt;later(_:)&lt;/c6&gt; functions are defined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>順番の違いは、&lt;c5&gt;now(_:)&lt;/c5&gt; and &lt;c6&gt;later(_:)&lt;/c6&gt;関数が定義される方法のために起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The other enumeration macros generate structures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他の列挙マクロは、構造体を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The other value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされることになるもう一方の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output to deliver to each subscriber.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各加入者に配達することになる出力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow addition operator (&lt;c0&gt;&amp;+&lt;/c0&gt;) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー加算演算子（&lt;c0&gt;&amp;+&lt;/c0&gt;）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow multiplication operator (&lt;c0&gt;&amp;*&lt;/c0&gt;) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー乗算演算子（&lt;c0&gt;&amp;*&lt;/c0&gt;）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The overflow subtraction operator (&lt;c0&gt;&amp;-&lt;/c0&gt;) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オーバーフロー減算演算子（&lt;c0&gt;&amp;-&lt;/c0&gt;）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The parameter indicates what a developer using Swift should do instead of using the part of the API you're making unavailable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのパラメータは、あなたが利用できなくしているAPIの部分を使う代わりにSwiftを使う開発者がすべきは何かを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to this point in decoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of coding keys taken to get to this point in encoding.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path should be relative to your project, similar to the way your &lt;c0&gt;Info&lt;w1&gt;.plist&lt;/w1&gt;&lt;/c0&gt; path is specified in Build Settings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パスは、あなたの&lt;c0&gt;Info&lt;w1&gt;.plist&lt;/w1&gt;&lt;/c0&gt;パスがBuild Settingsにおいて指定される方法と同様に、あなたのプロジェクトに対して相対的であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pattern-matching operator is used internally in &lt;c1&gt;case&lt;/c1&gt; statements for pattern matching.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パターンマッチング演算子は、内部的に&lt;c1&gt;case&lt;/c1&gt;文の中でパターンマッチングのために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The payload consists of a sequence of decimal digits, or the characters &lt;c1&gt;0X&lt;/c1&gt; or &lt;c2&gt;0x&lt;/c2&gt; followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ペイロードは、一連の10進の桁、または文字&lt;c1&gt;0X&lt;/c1&gt;か&lt;c2&gt;0x&lt;/c2&gt;に続く一連の16進の桁から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The payload for this option should always be &lt;c0&gt;{ super&lt;w1&gt;.custom&lt;w2&gt;Mirror }&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このオプションに対する積荷は、常に&lt;c0&gt;{ super&lt;w1&gt;.custom&lt;w2&gt;Mirror }&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;であるべきです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The payload to use for the new NaN value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいNaN値のために使うためのペイロード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The performance of accessing &lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt; depends on how many elements satisfy the predicate at the start of the collection, and might not offer the usual performance given by the &lt;c2&gt;Collection&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;end&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;にアクセスする性能は、どのくらい多くの要素がこの述部をコレクションの始まりで満たすかに依存します、そして&lt;c2&gt;Collection&lt;/c2&gt;プロトコルによって与えられる通常の性能を呈さないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The performance of accessing &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;first&lt;/c2&gt;, any methods that depend on &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;, or of advancing an index depends on how sparsely the filtering predicate is satisfied, and may not offer the usual performance given by &lt;c5&gt;Collection&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;first&lt;/c2&gt;、あらゆる&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;依存のメソッドでのアクセスにおける、またはあるインデックスを進んでいくことにおける性能は、どのくらいフィルタ述部が満たされるのがまばらかに依存します、そして&lt;c5&gt;Collection&lt;/c5&gt;によって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The performance of accessing &lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;first&lt;/c2&gt;, or any methods that depend on &lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt; depends on how many elements satisfy the predicate at the start of the collection, and may not offer the usual performance given by the &lt;c5&gt;Collection&lt;/c5&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;start&lt;w1&gt;Index&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;first&lt;/c2&gt;、または&lt;c3&gt;start&lt;w4&gt;Index&lt;/w4&gt;&lt;/c3&gt;に依存するあらゆるメソッドにアクセスする性能は、どのくらい多くの要素がその述部をコレクションの始まりで満たすかに依存します、そして&lt;c5&gt;Collection&lt;/c5&gt;プロトコルによって与えられる通常の性能を呈さないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument is valid only for the duration of the method’s execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタ引数は、ただメソッドの実行の間に対してのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;UTF8Buffer(_:)&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;へのポインタ引数は、&lt;c1&gt;with&lt;w2&gt;UTF8Buffer(_:)&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer created through implicit bridging of an instance or of an array’s elements is only valid during the execution of the called function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスのまたは配列の要素の暗黙的ブリッジを通して作成されるポインタは、呼び出された関数の実行の間に有効であるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as &lt;c7&gt;start&lt;/c7&gt; must be aligned to &lt;c8&gt;Memory&lt;w9&gt;Layout&lt;Element&gt;.alignment&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c7&gt;start&lt;/c7&gt;として渡されるポインタは、&lt;c8&gt;Memory&lt;w9&gt;Layout&lt;Element&gt;.alignment&lt;/w9&gt;&lt;/c8&gt;にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;CString(_:)&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数として&lt;c0&gt;body&lt;/c0&gt;に渡されるポインタは、&lt;c1&gt;with&lt;w2&gt;CString(_:)&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer passed as an argument to &lt;c0&gt;body&lt;/c0&gt; is valid only during the execution of &lt;c1&gt;with&lt;w2&gt;CString(encoded&lt;w3&gt;As:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>引数として&lt;c0&gt;body&lt;/c0&gt;に渡されるポインタは、&lt;c1&gt;with&lt;w2&gt;CString(encoded&lt;w3&gt;As:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer to use as the source for the new integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい整数のためのソースとして使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The pointer you pass to the function is only guaranteed to be valid for the duration of the function call.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが関数に渡すポインタは、関数呼び出しの間に対して有効であることだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position after the element to create an index for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対するインデックスを作成する要素の後の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position after this position in the underlying collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基盤コレクションでのこの位置の後の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position at which to insert the new element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで新しい要素が挿入されることになる位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position at which to insert the new elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そこで新しいいくらかの要素が挿入されるところの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in &lt;c0&gt;characters&lt;/c0&gt; that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応する&lt;c0&gt;characters&lt;/c0&gt;の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応する&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in &lt;c0&gt;utf16&lt;/c0&gt; that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応する&lt;c0&gt;utf16&lt;/c0&gt;の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position in &lt;c0&gt;utf8&lt;/c0&gt; that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスに正確に対応する&lt;c0&gt;utf8&lt;/c0&gt;の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of an element in a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の中でのある要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the character to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the element to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスする要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the element to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first Unicode scalar value if the string is nonempty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列が空でないならば、最初のユニコードスカラー値の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first character in a nonempty string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でない文字列の中の最初の文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first code unit if the &lt;c0&gt;String&lt;/c0&gt; is nonempty; identical to &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;/c0&gt;が空で無いならば最初のコードユニットの位置；そうでないならば&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;と同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first code unit if the UTF-8 view is nonempty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8ビューが空でないならば、最初のコードユニットの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最初のコード単位の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a non-empty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないコレクションにおける最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The position of the first element in a nonempty collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空でないコレクションの中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The positive difference between 1.0 and the next greater representable number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>1.0と次により大きい表現可能な数との間の正の差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate must be a &lt;e0&gt;equivalence relation&lt;/e0&gt; over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は要素に対して&lt;e0&gt;同値関係&lt;/e0&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate must be a &lt;e0&gt;strict weak ordering&lt;/e0&gt; over the elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>述部は、それら要素に対して&lt;e0&gt;厳密弱順序&lt;/e0&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The predicate orders errors before successes and sorts the error responses by their error code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この述部はエラーを成功の前に並べて、そしてそれらエラー応答をそのエラーコードによってソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The preferred display style for the mirror when presented in the debugger or in a playground.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>デバッガにまたはプレイグラウンドに含まれる時のミラーのための優先表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The presence of a value, stored as &lt;c0&gt;Wrapped&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の存在、&lt;c0&gt;Wrapped&lt;/c0&gt;として格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The process for importing Swift declarations into Objective-C code differs slightly depending on whether you’re writing an app or a framework.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swift宣言をObjective-Cコードにインポートする行程は、あなたがアプリを書いているかフレームワークを書いているかに従い、わずかに異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The process for using your Objective-C declarations from your Swift code within mixed-language targets differs slightly depending on whether you’re writing an app or a framework.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-C宣言をあなたのSwiftコードから混合言語ターゲット内部において使うことに対する行程は、あなたがアプリをまたはフレームワークを書くかによって少しばかり異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of &lt;c0&gt;lhs&lt;/c0&gt; and &lt;c1&gt;rhs&lt;/c1&gt;, added to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加えられることになる、&lt;c0&gt;lhs&lt;/c0&gt;と&lt;c1&gt;rhs&lt;/c1&gt;の積。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt; is 2000, which is too large to represent in a &lt;c2&gt;UInt8&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;の積は2000です、それは&lt;c2&gt;UInt8&lt;/c2&gt;インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of &lt;c0&gt;x&lt;/c0&gt; and &lt;c1&gt;y&lt;/c1&gt; is &lt;c2&gt;-1920&lt;/c2&gt;, which is too large to represent in an &lt;c3&gt;Int8&lt;/c3&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;の積は&lt;c2&gt;-1920&lt;/c2&gt;です、それは&lt;c3&gt;Int8&lt;/c3&gt;インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の積は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The property defined by the new declaration is easier to use in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい宣言によって宣言されるこのプロパティは、Swiftで使うのがより簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol to which all class types implicitly conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロトコルに対して、全てのクラス型は暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol to which all classes implicitly conform.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロトコルに対して、全てのクラスは暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The published name of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーの公開名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The radix, or base of exponentiation, for a floating-point type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点型の基数、または冪演算の底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The radix, or base, to use for converting &lt;c0&gt;text&lt;/c0&gt; to an integer value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt;を整数値に変換するのに使うための基数、または底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when choosing a random element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある無作為な要素を選ぶときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when creating the new random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい無作為値を作成するときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when shuffling the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The random number generator to use when shuffling the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range expression is converted to a concrete subrange relative to this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式は、このコレクションに関連するある具体的な下位範囲へ変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range in which to create a random value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その中においてある無作為な値が作成される範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of byte offsets to access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アクセスすることになるバイトオフセットの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of elements to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えることになる要素範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of indices to allow access to in the new slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいスライスにおいて、アクセスするのが許されるインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of text to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えるテキスト範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of the collection to be removed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除されることになるコレクションの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range of the elements to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除する要素の範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range to clamp the bounds of this range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲に制限を課すための範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range’s lower bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その範囲の下方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その範囲の上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw buffer slice to rebase.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>再構築される生のバッファスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw encoding of the value’s exponent field.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の指数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw encoding of the value’s significand field.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値の仮数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw integer value of the canonical combining class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この正準結合クラスの生の整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw type that can be used to represent all values of the conforming type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠している型のすべての値を表すために使われる生の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw value must therefore be of a type that conforms to the &lt;c4&gt;Fixed&lt;w5&gt;Width&lt;w6&gt;Integer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; protocol, such as &lt;c7&gt;UInt8&lt;/c7&gt; or &lt;c8&gt;Int&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生の値はしたがって、&lt;c4&gt;Fixed&lt;w5&gt;Width&lt;w6&gt;Integer&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;プロトコルに準拠する型、例えば&lt;c7&gt;UInt8&lt;/c7&gt;または&lt;c8&gt;Int&lt;/c8&gt;などのものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw value of the &lt;c1&gt;allowed&lt;w2&gt;Moves&lt;/w2&gt;&lt;/c1&gt; instance is the result of the bitwise OR of its three members’ raw values:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;allowed&lt;w2&gt;Moves&lt;/w2&gt;&lt;/c1&gt;インスタンスの生の値は、それの３つのメンバの持つ生の値のビット単位ORの結果です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw value of the option set to create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>作成されるオプションセットの生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The raw value to use for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために使う生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The reference writeable key path to append.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込み可能なキーパスの参照、これに対して追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The region of memory starting at this pointer and covering &lt;c0&gt;count&lt;/c0&gt; instances of the pointer’s &lt;c1&gt;Pointee&lt;/c1&gt; type must be initialized or &lt;c2&gt;Pointee&lt;/c2&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まりそしてポインタの&lt;c0&gt;Pointee&lt;/c0&gt;型の&lt;c1&gt;count&lt;/c1&gt;個のインスタンスを対象とするメモリ領域は初期化されなければならず、また&lt;c2&gt;Pointee&lt;/c2&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The region of memory starting at this pointer and covering &lt;c0&gt;count&lt;/c0&gt; instances of the pointer’s &lt;c1&gt;Pointee&lt;/c1&gt; type must be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まりそしてポインタのもつ&lt;c0&gt;Pointee&lt;/c0&gt;型の&lt;c1&gt;count&lt;/c1&gt;個のインスタンスを対象とするメモリ領域は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The region of memory starting at this pointer and covering &lt;c0&gt;count&lt;/c0&gt; instances of the pointer’s &lt;c1&gt;Pointee&lt;/c1&gt; type must be uninitialized or &lt;c2&gt;Pointee&lt;/c2&gt; must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタで始まりそしてポインタの&lt;c0&gt;Pointee&lt;/c0&gt;型の&lt;c1&gt;count&lt;/c1&gt;個のインスタンスを対象とするメモリ領域は未初期化でなければなりません、また&lt;c2&gt;Pointee&lt;/c2&gt;は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of the allocated region is unbound raw memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>割り当てられた領域の残りは、生のメモリに束縛されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of the relational operator functions are implemented by the standard library for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>残りの関係演算子関数は、&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して標準ライブラリによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of this value divided by &lt;c0&gt;other&lt;/c0&gt; using truncating division.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>切り捨て除算を使って&lt;c0&gt;other&lt;/c0&gt;で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The remainder of this value divided by &lt;c0&gt;other&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The removed element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The representation to use for ancestor classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先祖クラスに対して使う表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The requested number of elements to store.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>依頼された格納される要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The required methods that are suffixed with &lt;c3&gt;Reporting&lt;w4&gt;Overflow&lt;/w4&gt;&lt;/c3&gt; serve as the customization points for arithmetic operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>必須メソッドで&lt;c3&gt;Reporting&lt;w4&gt;Overflow&lt;/w4&gt;&lt;/c3&gt;を末尾に付けられるものは、算術演算に対するカスタマイズポイントとして供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result begins with the first element of &lt;c2&gt;numbers&lt;/c2&gt; that does not satisfy &lt;c3&gt;predicate&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、&lt;c2&gt;predicate&lt;/c2&gt;を満たさない、&lt;c3&gt;numbers&lt;/c3&gt;の最初の要素で始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result can be negative only if the collection conforms to the &lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、そのコレクションが&lt;c2&gt;Bidirectional&lt;w3&gt;Collection&lt;/w3&gt;&lt;/c2&gt;プロトコルに準拠する場合に限り、負であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result does not include any dynamically allocated or out of line storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、あらゆる動的にアロケートされるおよびアウトオブラインのストレージを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result has the same sign as &lt;c0&gt;lhs&lt;/c0&gt; and has a magnitude less than &lt;c1&gt;rhs&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、&lt;c0&gt;lhs&lt;/c0&gt;と同じ符号を持ち、&lt;c1&gt;rhs&lt;w2&gt;.magnitude&lt;/w2&gt;&lt;/c1&gt;より小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result is &lt;c0&gt;nil&lt;/c0&gt; if &lt;c1&gt;from&lt;/c1&gt; is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は、&lt;c1&gt;from&lt;/c1&gt;が&lt;c2&gt;nil&lt;/c2&gt;ならば、&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result is always exact.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result is always positive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果は常に正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of attempting to parse a &lt;c0&gt;T&lt;/c0&gt; from some input.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>なんらかの入力からの&lt;c0&gt;T&lt;/c0&gt;を構文解析を試みることの結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of one Unicode decoding step.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ひとつのユニコード復号化処理の結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたクロージャの結果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the initializer has the same magnitude as &lt;c0&gt;magnitude&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザの結果は、&lt;c0&gt;magnitude&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;と同じ規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the initializer has the same sign as &lt;c0&gt;sign&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イニシャライザの結果は、&lt;c0&gt;sign&lt;w1&gt;Of&lt;/w1&gt;&lt;/c0&gt;と同じ符号を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of the remainder operator (&lt;c0&gt;%&lt;/c0&gt;) has the same sign as &lt;c1&gt;lhs&lt;/c1&gt; and has a magnitude less than &lt;c2&gt;rhs&lt;w3&gt;.magnitude&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>剰余演算子（&lt;c0&gt;%&lt;/c0&gt;）の結果は、&lt;c1&gt;lhs&lt;/c1&gt;と同じ符号を持ち、&lt;c2&gt;rhs&lt;w3&gt;.magnitude&lt;/w3&gt;&lt;/c2&gt;より小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result to deliver to each subscriber.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各加入者に配達する結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting &lt;c3&gt;Lazy&lt;w4&gt;Scan&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; is itself lazy, too, so further sequence operations also defer computation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の&lt;c3&gt;Lazy&lt;w4&gt;Scan&lt;w5&gt;Sequence&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;はそれ自体また遅延です、なのでその先のシーケンス演算もまた計算を延期します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting array consists of at most &lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt; subsequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の配列は、多くとも&lt;c0&gt;max&lt;w1&gt;Splits + 1&lt;/w1&gt;&lt;/c0&gt;の下位シーケンスから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting buffer references a region of memory that is bound to &lt;c0&gt;Element&lt;/c0&gt; and is &lt;c1&gt;count * Memory&lt;w2&gt;Layout&lt;Element&gt;.stride&lt;/w2&gt;&lt;/c1&gt; bytes in size.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のバッファはあるメモリ領域を参照します、それは&lt;c0&gt;Element&lt;/c0&gt;に束縛されます、そして&lt;c1&gt;count * Memory&lt;w2&gt;Layout&lt;Element&gt;.stride&lt;/w2&gt;&lt;/c1&gt;バイトの大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting collection has the type of argument on the right-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるコレクションは、右手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting collection has the type of the argument on the left-hand side.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるコレクションは、左手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting flattened array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果として生じる平たくされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting instance may not have the same numeric value as &lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;—it is only guaranteed to use the same pattern of bits in its binary representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のインスタンスは、&lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;と同じ数値を持たないかもしれません — それは、同じパターンのビットをそれのバイナリ表現において使うことを保証されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting pointer references a region of memory that is bound to &lt;c0&gt;Pointee&lt;/c0&gt; and is &lt;c1&gt;count * Memory&lt;w2&gt;Layout&lt;Pointee&gt;.stride&lt;/w2&gt;&lt;/c1&gt; bytes in size.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のポインタはあるメモリ領域を参照します、それは&lt;c0&gt;Pointee&lt;/c0&gt;に束縛されます、そして&lt;c1&gt;count * Memory&lt;w2&gt;Layout&lt;Pointee&gt;.stride&lt;/w2&gt;&lt;/c1&gt;バイトの大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting quotient must be representable within the bounds of the type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の商は、この型の境界の内に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting subsequence &lt;e0&gt;does not include&lt;/e0&gt; the element at the position &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるシーケンスは、位置&lt;c1&gt;end&lt;/c1&gt;での要素を&lt;e0&gt;含みません&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting subsequence &lt;e0&gt;includes&lt;/e0&gt; the element at the position &lt;c1&gt;end&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるシーケンスは、位置&lt;c1&gt;end&lt;/c1&gt;での要素を&lt;e0&gt;含みます&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting value must be representable in the same type as the argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の値は、引数と同じ型で表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting value must be representable within the value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果の値は、その値の持つ型の内部に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of &lt;c0&gt;sequence(first:&lt;w1&gt;next:)&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;sequence(first:&lt;w1&gt;next:)&lt;/w1&gt;&lt;/c0&gt;の戻り型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of functions that do not return normally, that is, a type with no values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>普通に戻らない関数の戻り型、すなわち、値なしでの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return type of functions that don’t explicitly specify a return type, that is, an empty tuple &lt;c0&gt;()&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り型を明示的に指定されない関数の戻り型、すなわち、空のタプル&lt;c0&gt;()&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return types of the two methods are annotated as &lt;c2&gt;nullable&lt;/c2&gt;, because the methods return &lt;c3&gt;nil&lt;/c3&gt; if the list doesn't contain the given list item or name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのメソッドの戻り型は&lt;c2&gt;nullable&lt;/c2&gt;として注釈を付けられます、なぜならこれらメソッドは&lt;c3&gt;nil&lt;/c3&gt;を、そのリストが与えられたリスト項目または名前を含まないならば返すからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return value, if any, of the &lt;c0&gt;body&lt;/c0&gt; closure parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;クロージャパラメータの戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The return value, if any, of the &lt;c0&gt;body&lt;/c0&gt; closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;body&lt;/c0&gt;クロージャの、もしあれば、戻り値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned buffer references memory starting at the same base address as this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるバッファは、このバッファと同じ基底アドレスで始まるメモリを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned index is the position of the element in the buffer one past the last element written.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるインデックスは、書かれた最後の要素を１つすぎたバッファの中の要素の位置です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned instance is memory-managed and unassociated with the value in the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返されるインスタンスは、メモリ管理されて、このポインタによって参照されるメモリの中の値と無関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The returned range is &lt;e1&gt;not&lt;/e1&gt; guaranteed to be inside the bounds of &lt;c2&gt;collection&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>返される範囲は、&lt;c2&gt;collection&lt;/c2&gt;の境界内であると保証され&lt;e1&gt;ません&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The round rule to use when converting elements of &lt;c0&gt;other.&lt;/c0&gt; The default is &lt;c1&gt;.toward&lt;w2&gt;Zero&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;の要素を変換する時に使う丸め規則。省略時は&lt;c1&gt;.toward&lt;w2&gt;Zero&lt;/w2&gt;&lt;/c1&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The rounding rule to use.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この丸め規則を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second byte is a continuation byte.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目のバイトが継続バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second call to &lt;c0&gt;appending(path:)&lt;/c0&gt; returns &lt;c1&gt;nil&lt;/c1&gt; because the root type of &lt;c2&gt;array&lt;w3&gt;Description&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;Array&lt;Int&gt;&lt;/c4&gt;, does not match the value type of &lt;c5&gt;string&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;, &lt;c7&gt;Int&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の&lt;c0&gt;appending(path:)&lt;/c0&gt;への呼び出しは&lt;c1&gt;nil&lt;/c1&gt;を返します、なぜなら&lt;c2&gt;array&lt;w3&gt;Description&lt;/w3&gt;&lt;/c2&gt;のルート型、&lt;c4&gt;Array&lt;Int&gt;&lt;/c4&gt;は、&lt;c5&gt;string&lt;w6&gt;Length&lt;/w6&gt;&lt;/c5&gt;の値型、&lt;c7&gt;Int&lt;/c7&gt;と合致しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second call to &lt;c0&gt;appending(path:)&lt;/c0&gt; returns &lt;c1&gt;nil&lt;/c1&gt; because the root type of the &lt;c2&gt;path&lt;/c2&gt; parameter, &lt;c3&gt;Double&lt;/c3&gt;, does not match the value type of &lt;c4&gt;array&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;, &lt;c6&gt;String&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の&lt;c0&gt;appending(path:)&lt;/c0&gt;への呼び出しは&lt;c1&gt;nil&lt;/c1&gt;を返します、なぜなら&lt;c2&gt;path&lt;/c2&gt;パラメータのルート型、&lt;c3&gt;Double&lt;/c3&gt;は、&lt;c4&gt;array&lt;w5&gt;Description&lt;/w5&gt;&lt;/c4&gt;の値型、&lt;c6&gt;String&lt;/c6&gt;と合致しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second element of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの２番目の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second example passes &lt;c0&gt;1&lt;/c0&gt; for the &lt;c1&gt;max&lt;w2&gt;Splits&lt;/w2&gt;&lt;/c1&gt; parameter, so the original string is split just once, into two new strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の例は&lt;c0&gt;1&lt;/c0&gt;を&lt;c1&gt;max&lt;w2&gt;Splits&lt;/w2&gt;&lt;/c1&gt;パラメータに渡します、それで元の文字列は一度だけ分割されて、２つの新しい文字列になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second partition, &lt;c2&gt;numbers[p...]&lt;/c2&gt;, is made up of the elements that &lt;e3&gt;are&lt;/e3&gt; greater than 30.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２番目の区画、&lt;c2&gt;numbers[p...]&lt;/c2&gt;は、30より大きなもの&lt;e3&gt;である&lt;/e3&gt;要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to add.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加算する第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second value to multiply.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>掛け合わされる第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence must be finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence of elements for the new collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいコレクションのための要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequences whose contents to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それの内容をエンコードするシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s iterator is used directly to retrieve the initial value before looping over the rest of the sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスのもつイテレータが直に使われて、残りのシーケンスにループする前に初期値をとってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s maximum element if the sequence is not empty; otherwise, &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが空でないならばシーケンスの最大の要素；そうでなければ&lt;c0&gt;nil&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s maximum element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最大の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s minimum element, according to &lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最小の要素、&lt;c0&gt;are&lt;w1&gt;In&lt;w2&gt;Increasing&lt;w3&gt;Order&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;による。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sequence’s minimum element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスの最小の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set must not be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合は空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars &lt;c0&gt;[:&lt;w1&gt;XID&lt;w2&gt;_Continue:]&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closes the set &lt;c3&gt;[:&lt;w4&gt;ID&lt;w5&gt;_Continue:]&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; under NFKC normalization by removing any scalars whose normalized form is not of the form &lt;c6&gt;[:&lt;w7&gt;ID&lt;w8&gt;_Continue:]*&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの集合&lt;c0&gt;[:&lt;w1&gt;XID&lt;w2&gt;_Continue:]&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、集合&lt;c3&gt;[:&lt;w4&gt;ID&lt;w5&gt;_Continue:]&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に、NFKC正規化の下で、それの正規化形式が形式&lt;c6&gt;[:&lt;w7&gt;ID&lt;w8&gt;_Continue:]*&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;でないあらゆるスカラーを取り除くことによって、閉じています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars &lt;c0&gt;[:&lt;w1&gt;XID&lt;w2&gt;_Start:]&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; closes the set &lt;c3&gt;[:&lt;w4&gt;ID&lt;w5&gt;_Start:]&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; under NFKC normalization by removing any scalars whose normalized form is not of the form &lt;c6&gt;[:&lt;w7&gt;ID&lt;w8&gt;_Start:] [:&lt;w9&gt;ID&lt;w10&gt;_Continue:]*&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スカラーの集合&lt;c0&gt;[:&lt;w1&gt;XID&lt;w2&gt;_Start:]&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;は、集合&lt;c3&gt;[:&lt;w4&gt;ID&lt;w5&gt;_Start:]&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に、NFKC正規化の下で、それの正規化形式が形式&lt;c6&gt;[:&lt;w7&gt;ID&lt;w8&gt;_Start:] [:&lt;w9&gt;ID&lt;w10&gt;_Continue:]*&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;でないあらゆるスカラーを取り除くことによって、閉じています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which &lt;c0&gt;is&lt;w1&gt;Grapheme&lt;w2&gt;Base&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;true&lt;/c3&gt; is disjoint by definition from the set for which &lt;c4&gt;is&lt;w5&gt;Grapheme&lt;w6&gt;Extend&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;true&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対して&lt;c0&gt;is&lt;w1&gt;Grapheme&lt;w2&gt;Base&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;true&lt;/c3&gt;であるスカラーの集合は、それに対して&lt;c4&gt;is&lt;w5&gt;Grapheme&lt;w6&gt;Extend&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;が&lt;c7&gt;true&lt;/c7&gt;である集合からの定義と交わりを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which &lt;c0&gt;is&lt;w1&gt;Grapheme&lt;w2&gt;Extend&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is &lt;c3&gt;true&lt;/c3&gt; is disjoint by definition from the set for which &lt;c4&gt;is&lt;w5&gt;Grapheme&lt;w6&gt;Base&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; is &lt;c7&gt;true&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対して&lt;c0&gt;is&lt;w1&gt;Grapheme&lt;w2&gt;Extend&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が&lt;c3&gt;true&lt;/c3&gt;であるスカラーの集合は、それに対して&lt;c4&gt;is&lt;w5&gt;Grapheme&lt;w6&gt;Base&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;が&lt;c7&gt;true&lt;/c7&gt;である集合からの定義と交わりを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which &lt;c5&gt;is&lt;w6&gt;Cased&lt;/w6&gt;&lt;/c5&gt; is &lt;c7&gt;true&lt;/c7&gt; is a superset of those for which &lt;c8&gt;changes&lt;w9&gt;When&lt;w10&gt;Case&lt;w11&gt;Mapped&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; is &lt;c12&gt;true&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対して&lt;c5&gt;is&lt;w6&gt;Cased&lt;/w6&gt;&lt;/c5&gt;が&lt;c7&gt;true&lt;/c7&gt;であるスカラーの集合は、それに対して&lt;c8&gt;changes&lt;w9&gt;When&lt;w10&gt;Case&lt;w11&gt;Mapped&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;が&lt;c12&gt;true&lt;/c12&gt;であるもののスーパーセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The set of scalars for which this property is &lt;c0&gt;true&lt;/c0&gt; includes mathematical operators and symbols as well as specific Greek and Hebrew letter variants that are categorized as symbols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこのプロパティが&lt;c0&gt;true&lt;/c0&gt;であるスカラーの集合は、数学用の演算子と記号を含みます、記号として分類される特定のギリシャおよびベブライ文字異字体だけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shift is performed using this masked value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトは、このマスクされた値を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shortened form is preferred for ease of reading and writing code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この短縮された形式は、コードの読み書きの容易さのためにより好ましいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign for a negative value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign for a positive value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>正の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of a floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of the floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign of this number, expressed as an integer of the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数の符号、同じ型の整数として表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sign to use for the new value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい値に対して使うための符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand is frequently also called the &lt;e0&gt;mantissa&lt;/e0&gt;, but significand is the preferred terminology in the &lt;a1&gt;IEEE 754 specification&lt;/a1&gt;, to allay confusion with the use of mantissa for the fractional part of a logarithm.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>仮数（significand）はしばしば&lt;e0&gt;mantissa&lt;/e0&gt;とも呼ばれます、しかし仮数が&lt;a1&gt;IEEE 754仕様&lt;/a1&gt;において推奨される用語です、対数の小数部分に対する仮数（mantissa）の使用との混同を静めるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand may include a decimal point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>仮数は、小数点を含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand of &lt;c5&gt;y&lt;/c5&gt; is therefore 1.34375.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;y&lt;/c5&gt;の仮数はしたがって1.34375です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The significand of the floating-point value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>浮動小数点値の仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The size, in bytes, of the given value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値の持つ型の、バイトでの、大きさ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The size, stride, and alignment of the &lt;c0&gt;Point&lt;/c0&gt; type are accessible as static properties of &lt;c1&gt;Memory&lt;w2&gt;Layout&lt;Point&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Point&lt;/c0&gt;型のサイズ、ストライド、そしてアライメントは、&lt;c1&gt;Memory&lt;w2&gt;Layout&lt;Point&gt;&lt;/w2&gt;&lt;/c1&gt;の静的プロパティとしてアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sorting algorithm is not guaranteed to be stable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このソートアルゴリズムは、安定であることを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The square root of the value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の平方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stable identity of the entity associated with this instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスと結び付けられた登録項目の安定した同一性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library implements codecs for the UTF-8, UTF-16, and UTF-32 encoding schemes as the &lt;c2&gt;UTF8&lt;/c2&gt;, &lt;c3&gt;UTF16&lt;/c3&gt;, and &lt;c4&gt;UTF32&lt;/c4&gt; types, respectively.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリは、UTF-8、UTF-16、そしてUTF-32エンコードスキームに対するコーデックを&lt;c2&gt;UTF8&lt;/c2&gt;、&lt;c3&gt;UTF16&lt;/c3&gt;、そして&lt;c4&gt;UTF32&lt;/c4&gt;型としてそれぞれ実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library integer and floating-point types are all valid types for &lt;c0&gt;Integer&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>標準ライブラリの整数および浮動小数点型は、&lt;c0&gt;Integer&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対する有効な型のすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The starting position for iterating members of the set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合のメンバを反復するための開始位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The static members &lt;c7&gt;next&lt;w8&gt;Day&lt;/w8&gt;&lt;/c7&gt;, &lt;c9&gt;second&lt;w10&gt;Day&lt;/w10&gt;&lt;/c9&gt;, &lt;c11&gt;priority&lt;/c11&gt;, and &lt;c12&gt;standard&lt;/c12&gt; are unique, individual options.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>静的メンバ&lt;c7&gt;next&lt;w8&gt;Day&lt;/w8&gt;&lt;/c7&gt;, &lt;c9&gt;second&lt;w10&gt;Day&lt;/w10&gt;&lt;/c9&gt;、&lt;c11&gt;priority&lt;/c11&gt;、そして&lt;c12&gt;standard&lt;/c12&gt;は特有で、別個のオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The static type of the subject being reflected.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リフレクションされている主題の静的型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stored &lt;c0&gt;Header&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>格納された&lt;c0&gt;Header&lt;/c0&gt;インスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The stride, in bytes, of the given value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた値の持つ型の、バイトでの、ストライド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string is automatically converted to UTF8 in a zero-terminated buffer, and a pointer to that buffer is passed to the function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列は、自動的にゼロ終端バッファの中のUTF8に変換されます、そしてそのバッファに対するポインタが関数に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as &lt;c0&gt;description&lt;/c0&gt; may begin with a plus or minus sign character (&lt;c1&gt;+&lt;/c1&gt; or &lt;c2&gt;-&lt;/c2&gt;), followed by one or more numeric digits (&lt;c3&gt;0-9&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;description&lt;/c0&gt;として渡される文字列は、プラスまたはマイナス符号文字（&lt;c1&gt;+&lt;/c1&gt;または&lt;c2&gt;-&lt;/c2&gt;）で始まり、１つ以上の数値のアラビア数字（&lt;c3&gt;0-9&lt;/c3&gt;）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as &lt;c0&gt;text&lt;/c0&gt; can represent a real number in decimal or hexadecimal format or special floating-point values for infinity and NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt;として渡される文字列は、10進または16進数形式における実数、または無限大とNaN（「非数」）に対する特別な浮動小数点値を表せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string passed as &lt;c0&gt;text&lt;/c0&gt; may begin with a plus or minus sign character (&lt;c1&gt;+&lt;/c1&gt; or &lt;c2&gt;-&lt;/c2&gt;), followed by one or more numeric digits (&lt;c3&gt;0-9&lt;/c3&gt;) or letters (&lt;c4&gt;a-z&lt;/c4&gt; or &lt;c5&gt;A-Z&lt;/c5&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;text&lt;/c0&gt;として渡される文字列は、プラスまたはマイナス符号文字（&lt;c1&gt;+&lt;/c1&gt;または&lt;c2&gt;-&lt;/c2&gt;）で始まり、１つ以上の数値のアラビア数字（&lt;c3&gt;0-9&lt;/c3&gt;）または文字（&lt;c4&gt;a-z&lt;/c4&gt; or &lt;c5&gt;A-Z&lt;/c5&gt;）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string referenced by the resulting index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果となるインデックスによって参照される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to repeat.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>繰り返すことになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string to use for the index conversion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス変換に使う文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string value of the unique identifier wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる特有識別子の文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string wrapped in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>データ値の中にラップされる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The string’s value represented as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値のコレクションとして表される、文字列のもつ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The structure to use for the mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ミラーのために使う構造体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subrange of the collection to remove.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>削除することになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subrange of the collection to replace.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>置き換えることになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over &lt;c1&gt;prefix(through:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、&lt;c1&gt;prefix(through:)&lt;/c1&gt;よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over &lt;c1&gt;suffix(from:)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、&lt;c1&gt;suffix(from:)&lt;/c1&gt;よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subscript notation is preferred over &lt;c2&gt;prefix(up&lt;w3&gt;To:)&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字表記法は、&lt;c2&gt;prefix(up&lt;w3&gt;To:)&lt;/w3&gt;&lt;/c2&gt;よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The subtraction operator (&lt;c0&gt;-&lt;/c0&gt;) calculates the difference of its two arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>減算演算子（&lt;c0&gt;-&lt;/c0&gt;）は、それの２つの引数の差を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The success value, if the instance represents a success.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>成功値、もしインスタンスが成功を表すならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The successor of an index must be well defined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるインデックスの後に続くものは、よく定義されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sum of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数の合計は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The sum of types that can be used as a Quick Look representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「クイックルック」表現として使われることのできる型の総和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The system’s default source of random data.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システムの持つ省略時の無作為データのソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tables below list the operators declared in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の表は、Swiftにおいて宣言される演算子を一覧にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The third element of the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターの３番目の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The three cases of &lt;a3&gt;&lt;c4&gt;Comparison&lt;w5&gt;Result&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;—&lt;a6&gt;&lt;c7&gt;Comparison&lt;w8&gt;Result&lt;w9&gt;.ordered&lt;w10&gt;Ascending&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt;, &lt;a11&gt;&lt;c12&gt;Comparison&lt;w13&gt;Result&lt;w14&gt;.ordered&lt;w15&gt;Same&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;&lt;/a11&gt;, and &lt;a16&gt;&lt;c17&gt;Comparison&lt;w18&gt;Result&lt;w19&gt;.ordered&lt;w20&gt;Descending&lt;/w20&gt;&lt;/w19&gt;&lt;/w18&gt;&lt;/c17&gt;&lt;/a16&gt;—are an example of a finite set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;a3&gt;&lt;c4&gt;Comparison&lt;w5&gt;Result&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;の３つのケース節 —&lt;a6&gt;&lt;c7&gt;Comparison&lt;w8&gt;Result&lt;w9&gt;.ordered&lt;w10&gt;Ascending&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt;、&lt;a11&gt;&lt;c12&gt;Comparison&lt;w13&gt;Result&lt;w14&gt;.ordered&lt;w15&gt;Same&lt;/w15&gt;&lt;/w14&gt;&lt;/w13&gt;&lt;/c12&gt;&lt;/a11&gt;、そして&lt;a16&gt;&lt;c17&gt;Comparison&lt;w18&gt;Result&lt;w19&gt;.ordered&lt;w20&gt;Descending&lt;/w20&gt;&lt;/w19&gt;&lt;/w18&gt;&lt;/c17&gt;&lt;/a16&gt;— はある有限な集合の一例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The three states are captured by different combinations of the two variables.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>３つの状態は、２つの変数の異なる組み合わせによって捕えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The titlecase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのタイトルケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The total number of elements that the set can contain without allocating new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>その集合が新しいストレージを割り当てることなく含むことができる要素の総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The trailing surrogate code unit of &lt;c0&gt;x&lt;/c0&gt; when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16でエンコードされる時の&lt;c0&gt;x&lt;/c0&gt;の後続サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two arguments must have the same &lt;c0&gt;Element&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの引数は、同じ&lt;c0&gt;Element&lt;/c0&gt;型を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two loops in the following example produce the same output:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下の例における２つのループは、同じ出力を生み出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two must coexist, so it was renamed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この２つは共存しなければなりません、それでそれは改名されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two variables have an unused combination—it’s possible to set the &lt;c0&gt;user&lt;/c0&gt; to &lt;c1&gt;nil&lt;/c1&gt; and &lt;c2&gt;session&lt;w3&gt;Expired&lt;/w3&gt;&lt;/c2&gt; to &lt;c4&gt;true&lt;/c4&gt;, even though that doesn’t have a corresponding state.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの変数は使われない組み合わせを持ちます — &lt;c0&gt;user&lt;/c0&gt;を&lt;c1&gt;nil&lt;/c1&gt;にそして&lt;c2&gt;session&lt;w3&gt;Expired&lt;/w3&gt;&lt;/c2&gt;を&lt;c4&gt;true&lt;/c4&gt;に設定することは可能です、たとえそれが対応する状態を持たないとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;c0&gt;T&lt;/c0&gt; must be the same size and be layout compatible with the pointer’s &lt;c1&gt;Pointee&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型 &lt;c0&gt;T&lt;/c0&gt;は、ポインタのもつ&lt;c1&gt;Pointee&lt;/c1&gt;型と同じサイズで、互換性のあるレイアウトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;c0&gt;T&lt;/c0&gt; must have the same size and be layout compatible with the pointer’s &lt;c1&gt;Element&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型 &lt;c0&gt;T&lt;/c0&gt;は、ポインタのもつ&lt;c1&gt;Element&lt;/c1&gt;型と同じサイズで、互換性のあるレイアウトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;c0&gt;T&lt;/c0&gt; that the memory has already been bound to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリがすでに束縛されているところの型&lt;c0&gt;T&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;c0&gt;T&lt;/c0&gt; to be stored must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>格納されることになる型&lt;c0&gt;T&lt;/c0&gt;は、自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;c0&gt;T&lt;/c0&gt; to bind the memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型&lt;c0&gt;T&lt;/c0&gt;へとメモリを束縛することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type each segment of a string literal containing interpolations should be appended to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>加えられるべき補間を含んでいる文字列リテラルの各文節の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type for which the expression describes a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこの式が範囲を記述する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of &lt;c0&gt;value&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of an unbounded range operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限範囲演算子の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of data that a pointer can access is the pointer’s &lt;c2&gt;Pointee&lt;/c2&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタがアクセス可能なデータの型は、ポインタのもつ&lt;c2&gt;Pointee&lt;/c2&gt;型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of data that a pointer can access is the pointer’s &lt;c3&gt;Pointee&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタがアクセス可能なデータの型は、ポインタのもつ&lt;c3&gt;Pointee&lt;/c3&gt;型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element returned by &lt;c0&gt;next()&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next()&lt;/c0&gt;によって返される要素のもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of element traversed by the iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイテレータによって辿っていかれる要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of scalars in the vector space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このベクタースペースの中のスカラーそれらの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the elements of an array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>配列リテラルの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the elements to bind the buffer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バッファのもつメモリをそれへと束縛する幾らかの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of the instance to create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>作成されることになるインスタンスの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of value to decode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型の値にデコードする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type that should be used for literal segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラル文節に対して使われるべき型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to bind this buffer’s memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファのもつメモリをそれへと束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to bind this memory to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメモリに束縛することになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to decode as.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型としてデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to temporarily bind the memory referenced by this buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファによって参照されるメモリを一時的に束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to temporarily bind the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタによって参照されるメモリを一時的に束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type to use for the newly constructed instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新規に構築されるインスタンスのために使うことになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type used to represent substructure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下位構造体を表すために使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed buffer contains &lt;c0&gt;self&lt;w1&gt;.count / Memory&lt;w2&gt;Layout&lt;T&gt;.stride&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instances of &lt;c3&gt;T&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;T&lt;/c3&gt;の&lt;c0&gt;self&lt;w1&gt;.count / Memory&lt;w2&gt;Layout&lt;T&gt;.stride&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを含んでいる型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed buffer references &lt;c1&gt;self&lt;w2&gt;.count / Memory&lt;w3&gt;Layout&lt;T&gt;.stride&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; instances of &lt;c4&gt;T&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付バッファは、&lt;c4&gt;T&lt;/c4&gt;の&lt;c1&gt;self&lt;w2&gt;.count / Memory&lt;w3&gt;Layout&lt;T&gt;.stride&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;インスタンスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed buffer to convert to a raw buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいバッファへと変換されることになる型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typed pointer to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換されることになる型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The types of &lt;c0&gt;short&lt;w1&gt;Form&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;long&lt;w3&gt;Form&lt;/w3&gt;&lt;/c2&gt; in the following code sample are the same:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>以下のコード例における&lt;c0&gt;short&lt;w1&gt;Form&lt;/w1&gt;&lt;/c0&gt;と&lt;c2&gt;long&lt;w3&gt;Form&lt;/w3&gt;&lt;/c2&gt;の型は、同じです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unary minus operator (prefix &lt;c0&gt;-&lt;/c0&gt;) calculates the negation of its operand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単項マイナス演算子（前置&lt;c0&gt;-&lt;/c0&gt;）は、それの演算数の否定を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unbounded range operator (&lt;c0&gt;...&lt;/c0&gt;) is valid only within a collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無限範囲演算子（&lt;c0&gt;...&lt;/c0&gt;）は、あるコレクションの添字の内でのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying collection of the slice.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスライスの基礎をなすコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying iterator whose elements are being filtered.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすイテレータ、それの要素がフィルタされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying iterator’s sequence may be infinite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすイテレータのもつシーケンスは、無限であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type a 64-bit integer uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>64ビット整数が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type a string uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The underlying type an integer uses when it wraps itself in a data value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数が、それがそれ自身をあるデータ値の中にラップする時に使う、基礎をなす型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unit in the last place of 1.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>1.0の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unit in the last place of this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The universal hash function used by &lt;c0&gt;Set&lt;/c0&gt; and &lt;c1&gt;Dictionary&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;/c0&gt;と&lt;c1&gt;Dictionary&lt;/c1&gt;によって使われる普遍的なハッシュ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of &lt;c0&gt;bounds&lt;/c0&gt; must be valid indices of the string and not equal to the string’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bounds&lt;/c0&gt;範囲の上方および下方の境界はこの文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of &lt;c0&gt;bounds&lt;/c0&gt; must be valid indices of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bounds&lt;/c0&gt;の上方および下方の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of the &lt;c0&gt;bounds&lt;/c0&gt; range must be valid indices of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bounds&lt;/c0&gt;範囲の上方および下方の境界は、このコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper and lower bounds of the range must be in the range &lt;c0&gt;0...count&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この範囲の上方および下方の境界は、範囲&lt;c0&gt;0...count&lt;/c0&gt;の中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper bound for the randomly generated value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この無作為に生成される値に対する上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The upper bound for the range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲の上側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The uppercase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このスカラーのアッパーケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The valid indices for subscripting the vector.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ベクターに添え字での指定をするための有効なインデックスそれら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value associated with &lt;c0&gt;key&lt;/c0&gt; may be a null value as appropriate for the data format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;key&lt;/c0&gt;と結び付けられる値は、null値かもしれません、データ形式として適切であるので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value associated with the given key may be a null value as appropriate for the data format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられたキーと結び付けられる値は、そのデータ形式に適切であるnull値であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt; must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max&lt;w1&gt;Length&lt;/w1&gt;&lt;/c0&gt;の値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;other&lt;/c0&gt; is represented exactly by the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;の値は、新しいインスタンスによって正確に表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;other&lt;/c0&gt; is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;other&lt;/c0&gt;の値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c0&gt;value&lt;/c0&gt; is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;value&lt;/c0&gt;の値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of &lt;c5&gt;significand&lt;w6&gt;Width&lt;/w6&gt;&lt;/c5&gt; is always -1 or between zero and &lt;c7&gt;significand&lt;w8&gt;Bit&lt;w9&gt;Count&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;significand&lt;w6&gt;Width&lt;/w6&gt;&lt;/c5&gt;の値は、常に-1、もしくはゼロと&lt;c7&gt;significand&lt;w8&gt;Bit&lt;w9&gt;Count&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;の間です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of every element in this collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコレクションのすべての要素の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the &lt;c0&gt;member&lt;/c0&gt; parameter if it was a member of the set; otherwise, &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;member&lt;/c0&gt;パラメータの値、それが集合のメンバであったならば；そうでなければ、&lt;c1&gt;nil&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of the operand is copied bitwise into a temporary nonowning buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>演算数の値は、コピーされます。一時的な非所有バッファにビット単位でコピーされるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value of this string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文字列の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt; is interpreted in the binary interchange format defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bit&lt;w1&gt;Pattern&lt;/w1&gt;&lt;/c0&gt;として渡される値は、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;distance&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection, unless the index passed as &lt;c2&gt;limit&lt;/c2&gt; prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません、&lt;c2&gt;limit&lt;/c2&gt;として渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;distance&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;distance&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;n&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection, unless the index passed as &lt;c2&gt;limit&lt;/c2&gt; prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません、&lt;c2&gt;limit&lt;/c2&gt;として渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;n&lt;/c0&gt; must not offset &lt;c1&gt;i&lt;/c1&gt; beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;n&lt;/c0&gt;として渡される値は、このコレクションの境界を越えて&lt;c1&gt;i&lt;/c1&gt;を補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value passed as &lt;c0&gt;source&lt;/c0&gt; must be representable in this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;source&lt;/c0&gt;として渡される値は、この型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to add to this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to calculate the distance to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それへの隔たりを計算される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to compare with this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と比較するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to convert to a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列へ変換する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to create.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>作成されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide &lt;c0&gt;lhs&lt;/c0&gt; by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値で&lt;c0&gt;lhs&lt;/c0&gt;を除算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide this value by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を除算するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to divide.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>除算することになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to encode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコードする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to multiply by this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値と掛け合わせられることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to multiply this value by.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値に掛ける値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to negate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負にする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to shift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シフトする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to store as raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のメモリとして格納されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to subtract from &lt;c0&gt;lhs&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;lhs&lt;/c0&gt;から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to subtract from this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to test.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>テストする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use as the initial accumulating value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>初めから蓄積される値として使われる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use for the new instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しいインスタンスのために使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value to use when dividing this value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を除算するときに使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The value types in the table below have the same functionality as their corresponding reference types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>下の表の値型は、それらの対応する参照型と同じ機能性を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The values passed as &lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Pattern&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; are interpreted in the binary interchange format defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;exponent&lt;w1&gt;Bit&lt;w2&gt;Pattern&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c3&gt;significand&lt;w4&gt;Bit&lt;w5&gt;Pattern&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に渡される値は、&lt;a6&gt;IEEE 754 specification&lt;/a6&gt;で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The vector to convert.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>変換するベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The view to use for the index conversion.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インデックス変換に使うビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The width of &lt;c0&gt;x&lt;/c0&gt; when encoded in UTF-16, either &lt;c1&gt;1&lt;/c1&gt; or &lt;c2&gt;2&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16でエンコードされる時の&lt;c0&gt;x&lt;/c0&gt;の幅、&lt;c1&gt;1&lt;/c1&gt;または&lt;c2&gt;2&lt;/c2&gt;のどちらか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The width of &lt;c0&gt;x&lt;/c0&gt; when encoded in UTF-8, from &lt;c1&gt;1&lt;/c1&gt; to &lt;c2&gt;4&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8で符号化された時の&lt;c0&gt;x&lt;/c0&gt;の幅、&lt;c1&gt;1&lt;/c1&gt;から&lt;c2&gt;4&lt;/c2&gt;まで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The wrapped value of this instance, unwrapped without checking whether the instance is &lt;c0&gt;nil&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インスタンスのラップされた値、そのインスタンスが&lt;c0&gt;nil&lt;/c0&gt;かどうか確認せずにアンラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The zero value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The zero width joiner is also used to construct complex emoji from sequences of base emoji characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロ幅接合子はまた、複合絵文字を一連の基礎絵文字文字から組み立てるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” index of the resulting subsequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果のシーケンスの「終わりを過ぎた」インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” position for the set—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合に対する「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are some edge cases to be aware of:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>知られているいくつかの境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two scalars for which this property is &lt;c0&gt;true&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それに対してこのプロパティが&lt;c0&gt;true&lt;/c0&gt;である２つのスカラーがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is no notion of identity for structs, enums, functions, or tuples.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>構造体、列挙、関数、またはタプルに対して識別の観念はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There may be smaller positive numbers, but they are &lt;e0&gt;subnormal&lt;/e0&gt;, meaning that they are represented with less precision than normal numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>より小さい正の数があるでしょう、しかしそれらは&lt;e0&gt;サブノーマル&lt;/e0&gt;であり、それらがノーマル数よりより少ない精密さで表現されることを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There's no guarantee that the random guess will be correct, so important actions like paying bills—scheduled for after you win the lottery—might never happen.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ランダムな推測が正しくなる保証はありません、それで請求書を払うような — あなたが宝くじに当たった後に予定される — 重要な行為は決して起こらないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, &lt;c6&gt;x&lt;w7&gt;.binade&lt;/w7&gt;&lt;/c6&gt; is equal to &lt;c8&gt;1&lt;w9&gt;.0 * 2**4&lt;/w9&gt;&lt;/c8&gt;, or &lt;c10&gt;16&lt;w11&gt;.0&lt;/w11&gt;&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それゆえに、&lt;c6&gt;x&lt;w7&gt;.binade&lt;/w7&gt;&lt;/c6&gt;は&lt;c8&gt;1&lt;w9&gt;.0 * 2**4&lt;/w9&gt;&lt;/c8&gt;、または&lt;c10&gt;16&lt;w11&gt;.0&lt;/w11&gt;&lt;/c10&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, &lt;c7&gt;options&lt;/c7&gt; is emptied and the intersection between &lt;c8&gt;.express&lt;/c8&gt; and &lt;c9&gt;options&lt;/c9&gt; is returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>したがって、&lt;c7&gt;options&lt;/c7&gt;は空にされて&lt;c8&gt;.express&lt;/c8&gt;と&lt;c9&gt;options&lt;/c9&gt;の間の交叉が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, the class you migrate can't have any Objective-C subclasses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>したがって、あなたが移行するクラスは、いかなるObjective-Cサブクラスも持つことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, the first in any sequence of mutating operations may cost O(&lt;e0&gt;n&lt;/e0&gt;) time and space.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それゆえに、何らかの一連の変化を伴う演算において最初に、O(&lt;e0&gt;n&lt;/e0&gt;)時間と空間を要するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Therefore, the fundamental difference between random-access and bidirectional collections is that operations that depend on index movement or distance measurement offer significantly improved efficiency.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それゆえに、無作為アクセスと二方向性のコレクションの根本的な違いは、インデックス移動や間隔測定に依存する演算が、著しく改善される効率を提示することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These collections can store zero, one, or many of the same element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのコレクションは、ゼロ、１つ、または多くの同じ要素を格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as &lt;c0&gt;Array&lt;/c0&gt; and &lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのカウンタはインデックスとして使われることが、ゼロ基盤の、整数インデックスでのコレクション、例えば&lt;c0&gt;Array&lt;/c0&gt;そして&lt;c1&gt;Contiguous&lt;w2&gt;Array&lt;/w2&gt;&lt;/c1&gt;などのインスタンスにおいてのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These elements are computed lazily, each time they’re read, by calling the transform function on a base element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの要素は、それらが読み出されるたびに、基盤要素上で変換関数を呼び出すことによって遅延計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These elements match those accessed through indexed &lt;c1&gt;NSString&lt;/c1&gt; APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの要素は、インデックス付き&lt;c1&gt;NSString&lt;/c1&gt; APIを通してアクセスされるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These initializer overloads are available for any conforming type with a &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; that is a &lt;c2&gt;Decodable&lt;/c2&gt; standard library type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザオーバーロードは、&lt;c2&gt;Decodable&lt;/c2&gt;標準ライブラリ型である&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;を持つどんな準拠する型でも利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These initializers create an integer with the bit pattern of the memory address of a pointer or class instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザは、あるポインタまたはクラスインスタンスのメモリアドレスのビットパターンで整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These initializers result in &lt;c0&gt;nil&lt;/c0&gt; if the value passed can't be represented without any loss of precision.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザは、渡された値が何ら精度の損失なしに表現できないならば&lt;c0&gt;nil&lt;/c0&gt;という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These letters start with &lt;c0&gt;"A"&lt;/c0&gt; if &lt;c1&gt;uppercase&lt;/c1&gt; is &lt;c2&gt;true&lt;/c2&gt;; otherwise, with &lt;c3&gt;"a"&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;uppercase&lt;/c1&gt;が&lt;c2&gt;true&lt;/c2&gt;ならば、これらの文字は&lt;c0&gt;"A"&lt;/c0&gt;で始まります；そうでなければ、&lt;c3&gt;"a"&lt;/c3&gt;で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These methods all return typed pointers for further typed access to the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのメソッドは、この後で型付アクセスをこのメモリにするために型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These methods return the result of an operation, and a flag indicating whether the operation overflowed the bounds of the type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのメソッドは演算の結果、そしてその演算がその型の境界をオーバーフローしたかどうかを示すフラグを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These overloads are available for any conforming type with a &lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; that is an &lt;c2&gt;Encodable&lt;/c2&gt; standard library type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのイニシャライザオーバーロードは、&lt;c2&gt;Encodable&lt;/c2&gt;標準ライブラリ型である&lt;c0&gt;Raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;を持つどんな準拠する型でも利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These pointers are valid only for the duration of the call to &lt;c0&gt;body&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのポインタは、ただ&lt;c0&gt;body&lt;/c0&gt;への呼び出しの間にのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are the same ones used to test for equality in the &lt;c3&gt;==&lt;/c3&gt; operator function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらプロパティは、&lt;c3&gt;==&lt;/c3&gt;演算子関数において同等性についてテストするために使われるのと同じものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These scalar values are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift &lt;c1&gt;Character&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラー値は、ユニコード境界アルゴリズムによって拡張書記素クラスタへと、Swiftのもつ&lt;c1&gt;Character&lt;/c1&gt;型によって表されるものへと、組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These scalars are often the components of ideographic description sequences, as defined by the &lt;c0&gt;is&lt;w1&gt;IDSBinary&lt;w2&gt;Operator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;is&lt;w4&gt;IDSTrinary&lt;w5&gt;Operator&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; properties.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラーは、しばしば表意文字記述シーケンスの構成要素です、&lt;c0&gt;is&lt;w1&gt;IDSBinary&lt;w2&gt;Operator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c3&gt;is&lt;w4&gt;IDSTrinary&lt;w5&gt;Operator&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロパティによって定義されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These types and protocols drop their &lt;c1&gt;NS&lt;/c1&gt; prefix, with the following exceptions:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これら型およびプロトコルは、それらの&lt;c1&gt;NS&lt;/c1&gt;接頭辞を外します、以下の例外を除いては：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They have no visible glyph or advance width in and of themselves, although they may affect the display, positioning, or adornment of adjacent or surrounding characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらは、可視の字体または送り幅をそれら自体持ちません、とはいえそれらは、隣接または囲んでいる文字の表示、位置決定、もしくは装飾に影響を及ぼすかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They may be called once, many times, or never.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらが呼び出されるのは、一度だけ、何度も、または決してないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They're the only logical cases for performing an ordered comparison during tasks like sorting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらは、ソートのようなタスクの間に順序あり比較を実行するための論理的な場合にのみのものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This approach defines an &lt;c0&gt;App&lt;/c0&gt; class with a nested &lt;c1&gt;State&lt;/c1&gt; enumeration that includes only the specific states you need:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この取り組みは、&lt;c0&gt;App&lt;/c0&gt;クラスを、あなたが必要とする特定の状態のみを含む&lt;c1&gt;State&lt;/c1&gt;列挙とともに定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This assignment to the &lt;c0&gt;next&lt;w1&gt;Stop&lt;/w1&gt;&lt;/c0&gt; constant calls this string literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;next&lt;w1&gt;Stop&lt;/w1&gt;&lt;/c0&gt;定数への代入はこの文字列リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This associated type appears as a requirement in the &lt;c0&gt;Sequence&lt;/c0&gt; protocol, but it is restated here with stricter constraints.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関連型は、&lt;c0&gt;Sequence&lt;/c0&gt;プロトコルの中のある要件として現れます、しかしここでより厳格な制約で言い直されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer can then be shared by different copies of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファは、それからある文字列の異なるコピーによって共有されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer pointer’s &lt;c0&gt;base&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt; must be &lt;c2&gt;nil&lt;/c2&gt; or a pointer to a memory block previously returned by a Swift allocation method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタの&lt;c0&gt;base&lt;w1&gt;Address&lt;/w1&gt;&lt;/c0&gt;は、&lt;c2&gt;nil&lt;/c2&gt;または以前にSwiftアロケーションメソッドによって返されたメモリブロックへのポインタでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer pointer’s &lt;c7&gt;count&lt;/c7&gt; must be equal to the originally allocated size of the memory block.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのもつ&lt;c7&gt;count&lt;/c7&gt;は、もともとアロケートされたメモリブロックのサイズと等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This buffer pointer’s byte &lt;c7&gt;count&lt;/c7&gt; must be equal to the originally allocated size of the memory block.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このバッファポインタのもつ&lt;c7&gt;count&lt;/c7&gt;バイトは、もともとアロケートされたメモリブロックのサイズと等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This capability can be especially important when the order of elements in the literal is significant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この能力は、そのリテラル中の要素の順序が意味を持つ場合に特に重要となりえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This case is the default when initializing a &lt;c0&gt;Mirror&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この場合が、&lt;c0&gt;Mirror&lt;/c0&gt;インスタンスを初期化する時の省略時の方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This characteristic facilitates compatibility with C, which allows any value to be stored in an enumeration, including values used internally but not exposed in headers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この特徴は、Cとの互換性を容易にします、それはどんな値も列挙に格納されることを許します、内部的に使われるがヘッダに暴露されない値も含めて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This code shows a custom interpolation type’s declaration of an &lt;c3&gt;append&lt;w4&gt;Interpolation&lt;/w4&gt;&lt;/c3&gt; method that provides special validation for user input:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このコードは、あるあつらえの補間型のもつ&lt;c3&gt;append&lt;w4&gt;Interpolation&lt;/w4&gt;&lt;/c3&gt;の宣言を示します、それはユーザ入力に対する特別な検証を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Additive&lt;w1&gt;Arithmetic&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Binary&lt;w1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Binary&lt;w1&gt;Floating&lt;w2&gt;Point&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Collection&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Collection&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Comparable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Comparable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Custom&lt;w1&gt;Debug&lt;w2&gt;String&lt;w3&gt;Convertible&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Custom&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Decodable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Decodable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Encodable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Encodable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Equatable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Equatable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Array&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Extended&lt;w3&gt;Grapheme&lt;w4&gt;Cluster&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Extended&lt;w3&gt;Grapheme&lt;w4&gt;Cluster&lt;w5&gt;Literal&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Float&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Float&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Integer&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Integer&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Interpolation&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;String&lt;w3&gt;Literal&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Unicode&lt;w3&gt;Scalar&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Expressible&lt;w1&gt;By&lt;w2&gt;Unicode&lt;w3&gt;Scalar&lt;w4&gt;Literal&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Hashable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Hashable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Identifiable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Identifiable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Iterator&lt;w1&gt;Protocol&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Keyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Keyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;w3&gt;Protocol&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Lossless&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Lossless&lt;w1&gt;String&lt;w2&gt;Convertible&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Numeric&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Numeric&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Random&lt;w1&gt;Access&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Range&lt;w1&gt;Expression&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Range&lt;w1&gt;Expression&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;SIMD&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;SIMD&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;SIMDStorage&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;SIMDStorage&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Sequence&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Sequence&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Strideable&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Strideable&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Stream&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Stream&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;Unkeyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;Unkeyed&lt;w1&gt;Encoding&lt;w2&gt;Container&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;_Custom&lt;w1&gt;Playground&lt;w2&gt;Quick&lt;w3&gt;Lookable&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;_Custom&lt;w1&gt;Playground&lt;w2&gt;Quick&lt;w3&gt;Lookable&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;_Unicode&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;_Unicode&lt;w1&gt;Encoding&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This documentation comment was inherited from &lt;c0&gt;_Unicode&lt;w1&gt;Parser&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この文書化コメントは、&lt;c0&gt;_Unicode&lt;w1&gt;Parser&lt;/w1&gt;&lt;/c0&gt;から引き継がれました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example allocates uninitialized raw memory with space for four instances of &lt;c2&gt;Point&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、未初期化の生のメモリを&lt;c2&gt;Point&lt;/c2&gt;の４つのインスタンス用の空間でアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example appends the elements of a &lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt; instance to an array of integers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>例えば、あなたはある&lt;c1&gt;Range&lt;Int&gt;&lt;/c1&gt;インスタンスに属する複数要素を整数の配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example checks to see whether a favorite actor is in an array storing a movie’s cast.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、映画出演者を格納する配列の中にお気に入りの俳優がいるかどうか確認するために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example checks to see whether a particular insect is in an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある特定の昆虫が配列の中にあるかどうか見るために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Closed&lt;w3&gt;Range&lt;Character&gt;&lt;/w3&gt;&lt;/c2&gt; from “a” up to, and including, “z”.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、「a」から「z」までの、そしてそれを含む&lt;c2&gt;Closed&lt;w3&gt;Range&lt;Character&gt;&lt;/w3&gt;&lt;/c2&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;From&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance that includes any value greater than or equal to &lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;From&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスで&lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;より大きいか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Through&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance that includes any value less than or equal to &lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Through&lt;Double&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスで&lt;c5&gt;5&lt;w6&gt;.0&lt;/w6&gt;&lt;/c5&gt;より少ないか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Up&lt;w5&gt;To&lt;Double&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; instance that includes any value less than &lt;c6&gt;5&lt;w7&gt;.0&lt;/w7&gt;&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Partial&lt;w3&gt;Range&lt;w4&gt;Up&lt;w5&gt;To&lt;Double&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;インスタンスで&lt;c6&gt;5&lt;w7&gt;.0&lt;/w7&gt;&lt;/c6&gt;より少ない何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a &lt;c2&gt;Range&lt;Double&gt;&lt;/c2&gt; from zero up to, but not including, 5.0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ゼロから5.0までの、しかしそれを含めない&lt;c2&gt;Range&lt;Double&gt;&lt;/c2&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates a key path from &lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt; to &lt;c3&gt;String&lt;/c3&gt;, and then tries appending compatible and incompatible key paths:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt;から&lt;c3&gt;String&lt;/c3&gt;へのキーパスを作成して、それから互換および非互換のキーパスをくっつけることを試みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates an instance of &lt;c2&gt;Shipping&lt;w3&gt;Options&lt;/w3&gt;&lt;/c2&gt; with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Shipping&lt;w3&gt;Options&lt;/w3&gt;&lt;/c2&gt;のインスタンスを最も高い要素を越える生の値で、全ての宣言済み静的メンバを実質的に含むあるビットマスクで、作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates key paths from &lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt; to &lt;c3&gt;String&lt;/c3&gt; and from &lt;c4&gt;String&lt;/c4&gt; to &lt;c5&gt;Int&lt;/c5&gt;, and then tries appending each to the other:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c2&gt;Array&lt;Int&gt;&lt;/c2&gt;から&lt;c3&gt;String&lt;/c3&gt;までの、そして&lt;c4&gt;String&lt;/c4&gt;から&lt;c5&gt;Int&lt;/c5&gt;までのキーパスを作成して、それからそれぞれを他とくっつけることを試みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;1...100&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;1...100&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;1..&lt;100&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;1..&lt;100&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;10&lt;w1&gt;.0 ... 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;10&lt;w1&gt;.0 ... 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example creates three new values in the range &lt;c0&gt;10&lt;w1&gt;.0 ..&lt; 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、３つの新しい値を範囲&lt;c0&gt;10&lt;w1&gt;.0 ..&lt; 20&lt;w2&gt;.0&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example declares a constant with three currently allowed moves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は３つの現在許される動きを持つある定数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example declares the &lt;c0&gt;number&lt;w1&gt;Of&lt;w2&gt;Cookies&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; constant, using an integer literal to express its value:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;number&lt;w1&gt;Of&lt;w2&gt;Cookies&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;定数を宣言します、整数リテラルをそれの値を表すために使っています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example defines a &lt;c0&gt;raw&lt;w1&gt;Data&lt;/w1&gt;&lt;/c0&gt; string with some unstructured data, and then uses the string’s &lt;c2&gt;prefix(while:)&lt;/c2&gt; method to create a substring of the numeric prefix:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;raw&lt;w1&gt;Data&lt;/w1&gt;&lt;/c0&gt;文字列を何らかの構造化されていないデータで定義します、それからその文字列のもつ&lt;c2&gt;prefix(while:)&lt;/c2&gt;メソッドを使うことで数字接頭辞からなる下位文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example defines some simple macros in a C header:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、いくつかの単純なマクロをCヘッダにおいて定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example demonstrates getting a slice from a buffer of strings, finding the index of one of the strings in the slice, and then using that index in the original buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例はいくらかの文字列からなるバッファからスライスを取得する実演をします、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元のバッファにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は文字列からなる配列のあるスライスの取得を実演します、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は文字列「Swift」の文字を列挙します、そして各文字をその文字列でのそれの場所とともに出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the index of the last name that begins with the letter &lt;e1&gt;A:&lt;/e1&gt;</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、文字&lt;e1&gt;A:&lt;/e1&gt;で始まる、最後の名前のインデックスを見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the largest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、身長計測の配列の中で最も大きな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example finds the smallest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、身長計測の配列の中で最も小さな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of a space (UTF-16 code point &lt;c0&gt;32&lt;/c0&gt;) in a string’s &lt;c1&gt;utf16&lt;/c1&gt; view and then uses this method to find the same position in the string’s &lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある空白（UTF-16コード点&lt;c0&gt;32&lt;/c0&gt;）の位置を文字列のもつ&lt;c1&gt;utf16&lt;/c1&gt;ビューの中で見つけて、それからこのメソッドを使って文字列のもつ&lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of a space (UTF-8 code point &lt;c0&gt;32&lt;/c0&gt;) in a string’s &lt;c1&gt;utf8&lt;/c1&gt; view and then uses this method find the same position in the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある空白（UTF-8コード点&lt;c0&gt;32&lt;/c0&gt;）の位置を文字列のもつ&lt;c1&gt;utf8&lt;/c1&gt;ビューの中で見つけて、それからこのメソッドを使って文字列における同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of the character &lt;c0&gt;"é"&lt;/c0&gt; and then uses this method find the same position in the string’s &lt;c1&gt;utf16&lt;/c1&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、最初に文字&lt;c0&gt;"é"&lt;/c0&gt;の位置を見つけて、それからこのメソッドを使って文字列のもつ&lt;c1&gt;utf16&lt;/c1&gt;ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example first finds the position of the character &lt;c0&gt;"é"&lt;/c0&gt;, and then uses this method find the same position in the string’s &lt;c1&gt;utf8&lt;/c1&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、最初に文字&lt;c0&gt;"é"&lt;/c0&gt;の位置を見つけて、それからこのメソッドを使って文字列のもつ&lt;c1&gt;utf8&lt;/c1&gt;ビューにおける同じ位置を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある集合のインデックスと要素のすべてにわたって反復します、５つまたはより少ない文字を持つ名前のインデックスから成るリストを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes &lt;c5&gt;int&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/c5&gt;, a pointer to an &lt;c7&gt;Int&lt;/c7&gt; value, to &lt;c8&gt;print(address:)&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c5&gt;int&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/c5&gt;、&lt;c7&gt;Int&lt;/c7&gt;値へのポインタを&lt;c8&gt;print(address:)&lt;/c8&gt;に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes &lt;c5&gt;raw&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/c5&gt; as the initial parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c5&gt;raw&lt;w6&gt;Pointer&lt;/w6&gt;&lt;/c5&gt;を最初のパラメータとして渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes &lt;c6&gt;int&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/c6&gt;, a mutable pointer to an &lt;c8&gt;Int&lt;/c8&gt; value, to &lt;c9&gt;print(address:)&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c6&gt;int&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/c6&gt;、&lt;c8&gt;Int&lt;/c8&gt;値への可変ポインタを&lt;c9&gt;print(address:)&lt;/c9&gt;に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example passes &lt;c6&gt;raw&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/c6&gt; as the initial parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c6&gt;raw&lt;w7&gt;Pointer&lt;/w7&gt;&lt;/c6&gt;を最初のパラメータとして渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example performs an arithmetic operation on an optional integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、算術演算をあるオプショナル整数上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example performs an arithmetic operation with an optional result on an optional integer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、オプショナル結果をもつ算術演算をあるオプショナル整数上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example picks a name at random from an array:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある名前を無作為に配列から選出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example prints the characters of a string in reverse order:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列に属する文字を逆順で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes all the odd values from an array of numbers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、数値からなる配列から全ての奇数値を除去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes all the vowels from a string:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、全ての母音を文字列から除去します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes the element &lt;c0&gt;"sugar"&lt;/c0&gt; from a set of ingredients.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、要素&lt;c0&gt;"sugar"&lt;/c0&gt;を一揃いの材料から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes the hyphen from the middle of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列の真ん中からハイフンを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes the middle element from an array of measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、測定結果からなる配列から真ん中の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example removes three elements from the middle of an array of measurements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、測定結果からなる配列の真ん中から３つの要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example searches &lt;c0&gt;streets&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt; for one of the strings in the slice, and then uses that index in the original array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;streets&lt;w1&gt;Slice&lt;/w1&gt;&lt;/c0&gt;をスライスの中の文字列の１つについて検索して、それからそのインデックスを元々の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how a &lt;c8&gt;Collection&lt;w9&gt;Of&lt;w10&gt;Two&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; instance can be created holding the values of a point, and then iterated over using a &lt;c11&gt;for&lt;/c11&gt;-&lt;c12&gt;in&lt;/c12&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのように&lt;c8&gt;Collection&lt;w9&gt;Of&lt;w10&gt;Two&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;インスタンスがある地点の値を保持して作成されるか、そしてそれから&lt;c11&gt;for&lt;/c11&gt;-&lt;c12&gt;in&lt;/c12&gt;ループを使って全体にわたって繰り返されるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how an array of &lt;c0&gt;[Int]&lt;/c0&gt; instances can be joined, using another &lt;c1&gt;[Int]&lt;/c1&gt; instance as the separator:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのようにいくつかの&lt;c0&gt;[Int]&lt;/c0&gt;インスタンスからなる配列が別の&lt;c1&gt;[Int]&lt;/c1&gt;インスタンスを分離子として使ってつなぎ合わされるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how an iterator can be used explicitly to emulate a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、イテレータが明示的に使われて&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to build a dictionary of letter frequencies of a string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある文字列の文字頻度の辞書を作り上げる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to find the sum of an array of numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのように数からなる配列の合計を見出すかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to use the &lt;c0&gt;max(by:)&lt;/c0&gt; method on a dictionary to find the key-value pair with the highest value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;max(by:)&lt;/c0&gt;メソッドを辞書上で使って、最も高い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how to use the &lt;c0&gt;min(by:)&lt;/c0&gt; method on a dictionary to find the key-value pair with the lowest value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;min(by:)&lt;/c0&gt;メソッドを辞書上で使って、最も低い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how you can check an array for an expense greater than $100.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、どのようにあなたが$100より大きい出費についてある配列を調べるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows how you can modify one of the names in an array of students.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例が示すのは、どうやってあなたが学生らの配列の中の名前の１つを修正できるかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call a function that takes a constant raw pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが定数の生のポインタを取るある関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call a function that takes a mutable pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが可変ポインタを取る関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call a function that takes a mutable raw pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが変数の生のポインタを取るある関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows the different ways that you can call the a function that takes a constant pointer:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、あなたが定数ポインタを取る関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example shows two overlapping ranges:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は２つの重なった範囲を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example tests whether one countable range begins with the elements of another countable range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある可付番範囲が別の可付番範囲の要素で始まるかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example tests whether one countable range shares the same elements as another countable range and an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、ある可付番範囲が同じ要素を別の可付番範囲とそしてある配列と共有するかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses implicit bridging to pass a pointer to the elements of &lt;c0&gt;numbers&lt;/c0&gt; when calling &lt;c1&gt;print(address:&lt;w2&gt;as:)&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c1&gt;print(address:&lt;w2&gt;as:)&lt;/w2&gt;&lt;/c1&gt;を呼び出す時に、暗黙的ブリッジを使って&lt;c0&gt;numbers&lt;/c0&gt;の要素へのポインタを渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses implicit bridging to pass a pointer to the elements of &lt;c0&gt;numbers&lt;/c0&gt; when calling &lt;c1&gt;print&lt;w2&gt;Int(at&lt;w3&gt;Address:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、暗黙的ブリッジを使ってポインタを&lt;c0&gt;numbers&lt;/c0&gt;の要素へと、&lt;c1&gt;print&lt;w2&gt;Int(at&lt;w3&gt;Address:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;を呼び出す時に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;contains(_:)&lt;/c0&gt; method to check whether next-day shipping is in the &lt;c1&gt;available&lt;w2&gt;Options&lt;/w2&gt;&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;contains(_:)&lt;/c0&gt;メソッドを使って翌日出荷が&lt;c1&gt;available&lt;w2&gt;Options&lt;/w2&gt;&lt;/c1&gt;インスタンスの中のあるかどうか確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;contains(_:)&lt;/c0&gt; method to test whether an integer is a member of a set of prime numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;contains(_:)&lt;/c0&gt;メソッドを使ってある整数がある一揃いの素数のメンバであるかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;intersection(_:)&lt;/c0&gt; method to limit the available shipping options to what can be used with a PO Box destination.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;intersection(_:)&lt;/c0&gt;メソッドを使って、利用可能な出荷オプションを私書箱宛先で使われるものに制限します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;last(where:)&lt;/c0&gt; method to find the last negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;last(where:)&lt;/c0&gt;メソッドを使って、整数の配列において最後の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;lexicographically&lt;w1&gt;Precedes&lt;/w1&gt;&lt;/c0&gt; method to test which array of integers comes first in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c0&gt;lexicographically&lt;w1&gt;Precedes&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、どの整数配列がある語彙筆記的順序において最初に来るかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;negate()&lt;/c0&gt; method to negate the value of the variable &lt;c1&gt;x&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は&lt;c0&gt;negate()&lt;/c0&gt;メソッドを使って、変数&lt;c1&gt;x&lt;/c1&gt;の値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses the &lt;c0&gt;union(_:)&lt;/c0&gt; method to add two more shipping options to the default set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この例は、&lt;c0&gt;union(_:)&lt;/c0&gt;メソッドを使って２つのさらなる出荷オプションを省略時のセットに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This file is an Objective-C header that declares the Swift interfaces in your target, and you can think of it as an umbrella header for your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このファイルは、Swiftインターフェイスをあなたのターゲットにおいて宣言するObjective-Cヘッダです、そしてあなたはそれをあなたのSwiftコードのためのアンブレラファイルとみなせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function does not infer element moves.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、要素が移動することを推測しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function is suitable for exploring the structure of a mirror in a REPL or playground, but is not intended to be efficient.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、REPLまたはプレイグラウンドにおいてミラーの構造体を探索するのに適します、しかし効率を考慮されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function is the only requirement of the &lt;c0&gt;Comparable&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルのただ１つの要件です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function throws an error if any values are invalid for the given encoder’s format.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関数は、与えられたエンコーダの形式に対して何らかの値が無効であるならばエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This header may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このヘッダを計算するのは、些細なことではありません；通常良い考えであるのは、この情報をインスタンスが作成されるときに「ヘッダ」領域に格納することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This includes some scalars that are not typically considered to be emoji:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、概してemojiであると考えられない幾つかのスカラーを含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of &lt;c0&gt;String(unicode&lt;w1&gt;Scalars).utf16&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは&lt;c0&gt;String(unicode&lt;w1&gt;Scalars).utf16&lt;/w1&gt;&lt;/c0&gt;の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of &lt;c0&gt;characters&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、&lt;c0&gt;characters&lt;/c0&gt;の少なくとも１つのビューで有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of the string shared by &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of the string shared by &lt;c0&gt;utf16&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、&lt;c0&gt;utf16&lt;/c0&gt;によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This index must be a valid index of at least one view of the string shared by &lt;c0&gt;utf8&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインデックスは、&lt;c0&gt;utf8&lt;/c0&gt;によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer always succeeds, even if the value passed as &lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; exceeds the static properties declared as part of the option set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは常に成功します、&lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;として渡される値がオプションセットの部分として宣言される静的プロパティを上回るとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer can also be used to restore set methods after performing sequence operations such as &lt;c0&gt;filter(_:)&lt;/c0&gt; or &lt;c1&gt;map(_:)&lt;/c1&gt; on a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはまた、シーケンス演算、例えば&lt;c0&gt;filter(_:)&lt;/c0&gt;や&lt;c1&gt;map(_:)&lt;/c1&gt;などをある集合上で実行した後で集合に戻す手法として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer creates a new pointer to the same address as &lt;c4&gt;other&lt;/c4&gt; and performs no allocation or copying.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、新しいポインタを&lt;c4&gt;other&lt;/c4&gt;と同じアドレスに作成して、割り当てやコピーを実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer creates a new pointer to the same address as &lt;c5&gt;other&lt;/c5&gt; and performs no allocation or copying.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、新しいポインタを&lt;c5&gt;other&lt;/c5&gt;と同じアドレスに作成して、割り当てやコピーを実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer creates an option set with a raw value of zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、０個の生の値を持つオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer does not perform any range or overflow checking.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、全く範囲またはオーバーフロー検査を実行しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer does not try to repair ill-formed UTF-8 code unit sequences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、誤形式UTF-8コード単位シーケンスの修復を試みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer implements the &lt;c0&gt;scale&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt; operation defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;で定義される&lt;c0&gt;scale&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer implements the IEEE 754 &lt;c0&gt;copysign&lt;/c0&gt; operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、IEEE 754 &lt;c0&gt;copysign&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは空の配列リテラルで初期化するのと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is equivalent to the following calculation, where &lt;c0&gt;**&lt;/c0&gt; is exponentiation, computed as if by a single, correctly rounded, floating-point operation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは次の計算に相当し、そこで&lt;c0&gt;**&lt;/c0&gt;は乗算で、まるで単精度の、正しく丸められた、浮動小数点演算のように計算されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer is failable because although every case of the &lt;c5&gt;Counter&lt;/c5&gt; type has a corresponding &lt;c6&gt;Int&lt;/c6&gt; value, there are many &lt;c7&gt;Int&lt;/c7&gt; values that &lt;e8&gt;don’t&lt;/e8&gt; correspond to a case of &lt;c9&gt;Counter&lt;/c9&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは失敗可能です、なぜならすべての&lt;c5&gt;Counter&lt;/c5&gt;型のケース節は対応する&lt;c6&gt;Int&lt;/c6&gt;値を持つけれども、&lt;c7&gt;Counter&lt;/c7&gt;のケース節に対応&lt;e8&gt;しない&lt;/e8&gt;多くの&lt;c9&gt;Int&lt;/c9&gt;値が存在するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザは、デコーダからの読み出しが失敗するならば、または読み込んだデータが不正またはそうでなくとも無効ならば、エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer works with any type, and uses the custom &lt;c1&gt;debug&lt;w2&gt;Description&lt;/w2&gt;&lt;/c1&gt; property for types that conform to &lt;c3&gt;Custom&lt;w4&gt;Debug&lt;w5&gt;String&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえの&lt;c1&gt;debug&lt;w2&gt;Description&lt;/w2&gt;&lt;/c1&gt;プロパティを&lt;c3&gt;Custom&lt;w4&gt;Debug&lt;w5&gt;String&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This initializer works with any type, and uses the custom &lt;c1&gt;description&lt;/c1&gt; property for types that conform to &lt;c2&gt;Custom&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえの&lt;c1&gt;description&lt;/c1&gt;プロパティを&lt;c2&gt;Custom&lt;w3&gt;String&lt;w4&gt;Convertible&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;に準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a demonstration only—if you need the Unicode scalar representation of a string, use its &lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは単に１つの実演です—あなたがある文字列のユニコードスカラー表現を必要とするならば、それの&lt;c2&gt;unicode&lt;w3&gt;Scalars&lt;/w3&gt;&lt;/c2&gt;ビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは空の配列リテラルで初期化するのに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to the following conditional in Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Swiftでの以下の条件文に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to the inverse of a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはある集合の逆と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to using the &lt;c0&gt;@available&lt;/c0&gt; attribute on a declaration in Swift:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、&lt;c0&gt;@available&lt;/c0&gt;をSwiftにおける宣言上で使うことに相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is identical to &lt;c0&gt;init(c&lt;w1&gt;String: Unsafe&lt;w2&gt;Pointer&lt;CChar&gt;)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; but operates on an unsigned sequence of bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、&lt;c0&gt;init(c&lt;w1&gt;String: Unsafe&lt;w2&gt;Pointer&lt;CChar&gt;)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と同一です、しかし符号なしバイトシーケンス上で作動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is meant to be passed to &lt;c0&gt;String&lt;w1&gt;.reserve&lt;w2&gt;Capacity(_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;; it may be slightly larger or smaller than the sum of the counts of each literal segment.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは&lt;c0&gt;String&lt;w1&gt;.reserve&lt;w2&gt;Capacity(_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に渡されるよう意図されます；それは各リテラル文節を計算する合計より少しばかり大きいか小さいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the associated &lt;c0&gt;Iterator&lt;/c0&gt; of &lt;c1&gt;Lazy&lt;w2&gt;Filter&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;Lazy&lt;w5&gt;Filter&lt;w6&gt;Collection&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは&lt;c1&gt;Lazy&lt;w2&gt;Filter&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;と&lt;c4&gt;Lazy&lt;w5&gt;Filter&lt;w6&gt;Collection&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;に関連する&lt;c0&gt;Iterator&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the associated iterator for the &lt;c0&gt;Lazy&lt;w1&gt;Drop&lt;w2&gt;While&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, &lt;c4&gt;Lazy&lt;w5&gt;Drop&lt;w6&gt;While&lt;w7&gt;Collection&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, and &lt;c8&gt;Lazy&lt;w9&gt;Drop&lt;w10&gt;While&lt;w11&gt;Bidirectional&lt;w12&gt;Collection&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、&lt;c0&gt;Lazy&lt;w1&gt;Drop&lt;w2&gt;While&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;、&lt;c4&gt;Lazy&lt;w5&gt;Drop&lt;w6&gt;While&lt;w7&gt;Collection&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;、そして&lt;c8&gt;Lazy&lt;w9&gt;Drop&lt;w10&gt;While&lt;w11&gt;Bidirectional&lt;w12&gt;Collection&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;型に対する関連イテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the associated iterator for the &lt;c0&gt;Lazy&lt;w1&gt;Prefix&lt;w2&gt;While&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, &lt;c4&gt;Lazy&lt;w5&gt;Prefix&lt;w6&gt;While&lt;w7&gt;Collection&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, and &lt;c8&gt;Lazy&lt;w9&gt;Prefix&lt;w10&gt;While&lt;w11&gt;Bidirectional&lt;w12&gt;Collection&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、&lt;c0&gt;Lazy&lt;w1&gt;Prefix&lt;w2&gt;While&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;、&lt;c4&gt;Lazy&lt;w5&gt;Prefix&lt;w6&gt;While&lt;w7&gt;Collection&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;、そして&lt;c8&gt;Lazy&lt;w9&gt;Prefix&lt;w10&gt;While&lt;w11&gt;Bidirectional&lt;w12&gt;Collection&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;型に対する関連イテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the greater-than operator (&lt;c0&gt;&gt;&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して、より大きい演算子（&lt;c0&gt;&gt;&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the greater-than-or-equal-to operator (&lt;c0&gt;&gt;=&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して、より大きいか等しい演算子（&lt;c0&gt;&gt;=&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the less-than-or-equal-to operator (&lt;c0&gt;&lt;=&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Comparable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Comparable&lt;/c1&gt;に準拠するあらゆる型に対して、より少ないか等しい演算子（&lt;c0&gt;&lt;=&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the default implementation of the not-equal-to operator (&lt;c0&gt;!=&lt;/c0&gt;) for any type that conforms to &lt;c1&gt;Equatable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;Equatable&lt;/c1&gt;に準拠するあらゆる型に対して、不等演算子（&lt;c0&gt;!=&lt;/c0&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the same as the number of bytes moved when an &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;T&gt;&lt;/w1&gt;&lt;/c0&gt; instance is incremented.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;T&gt;&lt;/w1&gt;&lt;/c0&gt;が増大させられる時に動かされるバイト数と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the unit of the least significant digit in this value’s significand.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これはこの値の仮数の中の最下位数の単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re not responsible for releasing the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持たなくてよいことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re responsible for releasing the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持つことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when passing a reference to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +0.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Swiftがそれについての所有権規則を知らないAPIにある参照を渡す、しかしそのAPIはあなたがオブジェクトを+0で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful when passing an object to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +1.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、Swiftがそれについての所有権規則を知らないAPIにあるオブジェクトを渡す、しかしそのAPIはあなたがオブジェクトを+1で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This list describes how Swift imports types with different nullability annotations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このリストは、どのようにSwiftが異なるヌル可能性注釈で型をインポートするかを記述します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This magnitude calculation takes the following form for a floating-point value &lt;c5&gt;x&lt;/c5&gt; of type &lt;c6&gt;F&lt;/c6&gt;, where &lt;c7&gt;**&lt;/c7&gt; is exponentiation:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規模計算は、型&lt;c6&gt;F&lt;/c6&gt;の浮動小数点値&lt;c5&gt;x&lt;/c5&gt;に対して以下の形式をとります、そこで&lt;c7&gt;**&lt;/c7&gt;は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This makes creating mixed-language app and framework targets as straightforward as creating an app or framework target written in a single language.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、混合言語のアプリとフレームワーク・ターゲットを作成することを、単一の言語で書かれるアプリまたはフレームワーク・ターゲットをつくるのと同じくらいわかりやすいものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This may require resizing the buffer beyond its original capacity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、バッファの大きさ変更を要請するかもしれません、それの元の収容能力を越えて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method does not validate the encoding of a UTF-16 sequence beyond the specified code unit.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、指定されたコード単位を越えてUTF-16シーケンスのエンコードを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method ensures that the set has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、集合が、少なくとも要請された数の要素に割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、指定された範囲の要素をコレクションから取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、語彙筆記的順序の数学的概念を実装します、それはユニコードに関係はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method implements the remainder operation defined by the &lt;a4&gt;IEEE 754 specification&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;a4&gt;IEEE 754 仕様&lt;/a4&gt;によって定義される剰余演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method initializes the buffer with elements from &lt;c0&gt;source&lt;/c0&gt; until &lt;c1&gt;source&lt;/c1&gt; is exhausted or, if &lt;c2&gt;source&lt;/c2&gt; is a sequence but not a collection, the buffer has no more room for its elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは&lt;c0&gt;source&lt;/c0&gt;からの要素でバッファを初期化します、&lt;c1&gt;source&lt;/c1&gt;が使い尽くされるまでまたは、&lt;c2&gt;source&lt;/c2&gt;がシーケンスであるがコレクションではないならば、バッファがこれ以上それの要素のための部屋を持たなくなるまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;random(in:&lt;w1&gt;using:)&lt;/w1&gt;&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;random&lt;w1&gt;Element(using:)&lt;/w1&gt;&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;shuffle(using:)&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;shuffle(using:)&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling &lt;c0&gt;shuffled(using:)&lt;/c0&gt;, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;shuffled(using:)&lt;/c0&gt;を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to calling the version that takes a generator, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、ある生成子をとるバージョンを、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is equivalent to the C &lt;c0&gt;fma&lt;/c0&gt; function and implements the &lt;c1&gt;fused&lt;w2&gt;Multiply&lt;w3&gt;Add&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a4&gt;IEEE 754 specification&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、C &lt;c0&gt;fma&lt;/c0&gt;関数の等価物です、そして&lt;c1&gt;fused&lt;w2&gt;Multiply&lt;w3&gt;Add&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装し、それは&lt;a4&gt;IEEE 754仕様&lt;/a4&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is implemented as a &lt;c0&gt;&amp;&lt;/c0&gt; (bitwise AND) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの集合の持つ生の値に関する&lt;c0&gt;&amp;&lt;/c0&gt;（ビット単位AND）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is implemented as a &lt;c0&gt;^&lt;/c0&gt; (bitwise XOR) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの集合の持つ生の値に関する&lt;c0&gt;^&lt;/c0&gt;（ビット単位XOR）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is implemented as a &lt;c0&gt;|&lt;/c0&gt; (bitwise OR) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの集合の持つ生の値に関する&lt;c0&gt;|&lt;/c0&gt;（ビット単位OR）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method is preferred over &lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、効率のために&lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;より好まれます、その結果がコピーオンライト型である場合、例えばArrayまたは辞書に対しては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method replaces ill-formed UTF-8 sequences with the Unicode replacement character (&lt;c0&gt;"\u{FFFD}"&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、誤形式UTF-8シーケンスをユニコード代替文字（&lt;c0&gt;"\u{FFFD}"&lt;/c0&gt;）で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns &lt;c0&gt;nil&lt;/c0&gt; if the container does not have a value associated with &lt;c1&gt;key&lt;/c1&gt;, or if the value is null.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、&lt;c0&gt;nil&lt;/c0&gt;を、そのコンテナが&lt;c1&gt;key&lt;/c1&gt;と関連付けられる値を持たないならば、またはその値がnullならば、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns &lt;c0&gt;nil&lt;/c0&gt; if the container has no elements left to decode, or if the value is null.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは&lt;c0&gt;nil&lt;/c0&gt;を返します、もしコンテナがデコードするのに残る要素を持たないならば、またはもし値がnullならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns a typed pointer for further typed access to the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、この後で型付アクセスをこのメモリにするために型付ポインタを返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the maximum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの値のうち最大を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the minimum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの値のうち最小を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the value with greater magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの与えられた値のうちより大きい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method returns the value with lesser magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、２つの与えられた値のうちより小さい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method serves as the basis for the equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、浮動小数点値のための同等演算子（&lt;c0&gt;==&lt;/c0&gt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method serves as the basis for the less-than operator (&lt;c0&gt;&lt;&lt;/c0&gt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、浮動小数点値のためのより少ない演算子（&lt;c0&gt;&lt;&lt;/c0&gt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method serves as the basis for the less-than-or-equal-to operator (&lt;c0&gt;&lt;=&lt;/c0&gt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、浮動小数点値のためのより少ないか等しい演算子（&lt;c0&gt;&lt;=&lt;/c0&gt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This method works regardless of whether the static string stores a pointer or a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドは、静的文字列がポインタまたは単一ユニコードスカラー値のどちらを格納するかに関係なく働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This numeric type includes fractions such as “⅕” (U+2155 VULGAR FRACITON ONE FIFTH), numerical CJK ideographs like “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146), and other scalars that are not decimal digits used positionally in the writing of base-10 numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この数値型は、分数たとえば “⅕” (U+2155 VULGAR FRACITON ONE FIFTH)、数値CJK文字の “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146) のようなもの、そして底10の数を書くのに桁区切りに使われる10進桁でない他のスカラーを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This operation does not change reference counts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この操作は参照カウントを変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This pointer is valid only for the duration of the call to &lt;c0&gt;body&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタは、ただ&lt;c0&gt;body&lt;/c0&gt;への呼び出しの間にのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This pointer must be a pointer to the start of a previously allocated memory block.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このポインタは、以前にアロケートされたメモリブロックの始まりを指すポインタでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property applies to a small number of spacing vowel letters occurring in some Southeast Asian scripts like Thai and Lao, which use a visual order display model.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、タイ語およびラオ語のようないくつかの南東アジア書体に現れる少数の空白母音字に適用されます、それは視覚順序表示モデルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “ASCII_Hex_Digit” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “ASCII_Hex_Digit” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Age” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Age” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Alphabetic” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Alphabetic” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Bidi_Control” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Bidi_Control” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Bidi_Mirrored” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Bidi_Mirrored” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Canonical_Combining_Class” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Canonical_Combining_Class” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Case_Ignorable” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Case_Ignorable” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Cased” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Cased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Casefolded” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Changes_When_Casefolded” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Casemapped” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Changes_When_Casemapped” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Lowercased” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Changes_When_Lowercased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_NFKC_Casefolded” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Changes_When_NFKC_Casefolded” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Titlecased” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Changes_When_Titlecased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Changes_When_Uppercased” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Changes_When_Uppercased” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Dash” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Dash” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Default_Ignorable_Code_Point” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Default_Ignorable_Code_Point” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Deprecated” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Deprecated” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Diacritic” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Diacritic” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji_Modifier_Base” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Emoji_Modifier_Base” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji_Modifier” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Emoji_Modifier” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji_Presentation” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Emoji_Presentation” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Emoji” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Emoji” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Extender” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Extender” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Full_Composition_Exclusion” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Full_Composition_Exclusion” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “General_Category” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “General_Category” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Grapheme_Base” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Grapheme_Base” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Grapheme_Extend” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Grapheme_Extend” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Hex_Digit” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Hex_Digit” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “IDS_Binary_Operator” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “IDS_Binary_Operator” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “IDS_Trinary_Operator” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “IDS_Trinary_Operator” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “ID_Continue” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “ID_Continue” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “ID_Start” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “ID_Start” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Ideographic” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Ideographic” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Join_Control” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;Unicode Standard&lt;/a0&gt;における “Join_Control” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Logical_Order_Exception” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Logical_Order_Exception” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Lowercase_Mapping” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Lowercase_Mapping” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Lowercase” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Lowercase” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Math” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Math” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Name_Alias” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Name_Alias” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Name” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Name” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Noncharacter_Code_Point” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Noncharacter_Code_Point” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Numeric_Type” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Numeric_Type” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Numeric_Value” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Numeric_Value” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Pattern_Syntax” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Pattern_Syntax” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Pattern_White_Space” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Pattern_White_Space” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Quotation_Mark” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Quotation_Mark” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Radical” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Radical” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Sentence_Terminal” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Sentence_Terminal” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Soft_Dotted” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Soft_Dotted” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Terminal_Punctuation” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Terminal_Punctuation” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Titlecase_Mapping” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;Unicode Standard&lt;/a0&gt;における “Titlecase_Mapping” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Unified_Ideograph” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Unified_Ideograph” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Uppercase_Mapping” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Uppercase_Mapping” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Uppercase” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Uppercase” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “Variation_Selector” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “Variation_Selector” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “White_Space” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “White_Space” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “XID_Continue” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “XID_Continue” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property corresponds to the “XID_Start” property in the &lt;a0&gt;Unicode Standard&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a0&gt;ユニコード標準&lt;/a0&gt;における “XID_Start” に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property implements the &lt;c0&gt;log&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt; operation defined by the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;で定義される&lt;c0&gt;log&lt;w1&gt;B&lt;/w1&gt;&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is &lt;c0&gt;true&lt;/c0&gt; for all scalars for which &lt;c1&gt;is&lt;w2&gt;ASCIIHex&lt;w3&gt;Digit&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; is &lt;c4&gt;true&lt;/c4&gt; as well as for their CJK halfwidth and fullwidth variants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、それに対して&lt;c1&gt;is&lt;w2&gt;ASCIIHex&lt;w3&gt;Digit&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;が&lt;c4&gt;true&lt;/c4&gt;である全てのスカラーに対して、それだけでなくそれらのCJK半角および全角異字体に対しても、&lt;c0&gt;true&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is &lt;c0&gt;true&lt;/c0&gt; for both quiet and signaling NaNs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、クワイエットおよびシグナルNaNの両方に対して&lt;c0&gt;true&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is &lt;c0&gt;true&lt;/c0&gt; for scalars that are spaces, separator characters, and other control characters that should be treated as whitespace for the purposes of parsing text elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティが&lt;c0&gt;true&lt;/c0&gt;であるのは、空白、分離子文字、そして他の制御文字であるスカラーに対してです、それはテキスト要素を構文解析する目的のために空白として扱われるべきものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is &lt;c0&gt;true&lt;/c0&gt; whenever one or more of &lt;c1&gt;changes&lt;w2&gt;When&lt;w3&gt;Lowercased&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;, &lt;c4&gt;changes&lt;w5&gt;When&lt;w6&gt;Uppercased&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, or &lt;c7&gt;changes&lt;w8&gt;When&lt;w9&gt;Titlecased&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; are &lt;c10&gt;true&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは&lt;c0&gt;true&lt;/c0&gt;です、１つ以上の&lt;c1&gt;changes&lt;w2&gt;When&lt;w3&gt;Lowercased&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;、&lt;c4&gt;changes&lt;w5&gt;When&lt;w6&gt;Uppercased&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;、または&lt;c7&gt;changes&lt;w8&gt;When&lt;w9&gt;Titlecased&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;が&lt;c10&gt;true&lt;/c10&gt;である時はいつでも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is a &lt;c0&gt;String&lt;/c0&gt;, not a &lt;c1&gt;Unicode&lt;w2&gt;.Scalar&lt;/w2&gt;&lt;/c1&gt; or &lt;c3&gt;Character&lt;/c3&gt;, because some mappings may transform a scalar into multiple scalars or graphemes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、ある&lt;c0&gt;String&lt;/c0&gt;です、&lt;c1&gt;Unicode&lt;w2&gt;.Scalar&lt;/w2&gt;&lt;/c1&gt;または&lt;c3&gt;Character&lt;/c3&gt;ではなく、なぜならいくつかのマッピングはスカラーを複数のスカラーや書記素に分解するかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is always &lt;c0&gt;false&lt;/c0&gt; for unsigned integer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、符号なし整数型に対して常に&lt;c0&gt;false&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is always &lt;c0&gt;true&lt;/c0&gt; for signed integer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、符号付き整数型に対して常に&lt;c0&gt;true&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is false for CJK punctuation and symbols, as well as for compatibility ideographs (which canonically decompose to unified ideographs).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、CJK句読点およびシンボルに対してfalseです、互換表意文字だけでなく（それは統一表意文字に正準に分解されます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property is true for scalars that are rendered as emoji by default and also for scalars that have a non-default emoji rendering when followed by U+FE0F VARIATION SELECTOR-16.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティがtrueであるのは、emojiとして初期状態で描出されるスカラーに対して、そしてまたU+FE0F VARIATION SELECTOR-16が後に続く場合に描出する非初期状態emojiを持つスカラーに対してです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property roughly defines the class of “Chinese characters” and does not include characters of other logographic scripts such as Cuneiform or Egyptian Hieroglyphs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは、おおよそ “漢字” のクラスを定義します、そして他の表意文字書体の文字、たとえば楔形またはエジブト語ヒエログリフなどを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This property trades safety for performance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティは性能と安全を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This relation is a refinement of the less-than-or-equal-to operator (&lt;c0&gt;&lt;=&lt;/c0&gt;) that provides a total order on all values of the type, including signed zeros and NaNs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この関係は、より少ないか等しい演算子（&lt;c0&gt;&lt;=&lt;/c0&gt;の改良版です、それは、符号付きゼロとNaNを含む、その型のすべての値に関する全順序を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This representation matches the one used when &lt;c1&gt;String&lt;/c1&gt; instances are passed to C APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この表現は、&lt;c1&gt;String&lt;/c1&gt;インスタンスがC APIに渡される時に使われるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rounding rule is also known as “bankers rounding,” and is the default IEEE 754 rounding mode for arithmetic.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この丸め規則はまた「銀行家の丸め」としても知られます、そして算術に対する省略時のIEEE 754丸め方式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rounding rule is also known as “schoolbook rounding.” The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この丸め規則はまた「教科書丸め」としても知られます。以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule implements the &lt;c0&gt;round&lt;w1&gt;To&lt;w2&gt;Integral&lt;w3&gt;Ties&lt;w4&gt;To&lt;w5&gt;Even&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;で定義される&lt;c0&gt;round&lt;w1&gt;To&lt;w2&gt;Integral&lt;w3&gt;Ties&lt;w4&gt;To&lt;w5&gt;Even&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;ceil&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Positive&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;ceil&lt;/c0&gt;関数の等価物です、そして&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義される&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Positive&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;floor&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Negative&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;floor&lt;/c0&gt;関数の等価物です、そして&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Negative&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装し、それは&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;round&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Ties&lt;w5&gt;To&lt;w6&gt;Away&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a7&gt;IEEE 754 specification&lt;/a7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;round&lt;/c0&gt;関数の等価物です、そして&lt;a7&gt;IEEE 754仕様&lt;/a7&gt;によって定義される&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Ties&lt;w5&gt;To&lt;w6&gt;Away&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is equivalent to the C &lt;c0&gt;trunc&lt;/c0&gt; function and implements the &lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Zero&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; operation defined by the &lt;a6&gt;IEEE 754 specification&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この規則は、C &lt;c0&gt;trunc&lt;/c0&gt;関数の等価物です、そして&lt;c1&gt;round&lt;w2&gt;To&lt;w3&gt;Integral&lt;w4&gt;Toward&lt;w5&gt;Zero&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;演算を実装し、それは&lt;a6&gt;IEEE 754仕様&lt;/a6&gt;によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This setting has no effect on mirrors reflecting value type instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この設定は、値型インスタンスをリフレクションするミラー上では効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This should report all keys present which are convertible to the requested type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、要請された型に変換可能である、存在する全てのキーを報告するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type is the result of &lt;c0&gt;x&lt;w1&gt;.reversed()&lt;/w1&gt;&lt;/c0&gt; where &lt;c2&gt;x&lt;/c2&gt; is a collection having bidirectional indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、&lt;c0&gt;x&lt;w1&gt;.reversed()&lt;/w1&gt;&lt;/c0&gt;の結果です、ここで&lt;c2&gt;x&lt;/c2&gt;は双方向性のインデックスを持つコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type may differ from the subject’s dynamic type when this mirror is the &lt;c0&gt;superclass&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt; of another mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型は、このミラーが別のミラーの&lt;c0&gt;superclass&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;である時は、この主題のもつ動的型と異なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value compares greater than or equal to all finite numbers, but less than &lt;c0&gt;infinity&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、すべての有限数、しかし&lt;c0&gt;無限大&lt;/c0&gt;より少ないものに対してより大きいか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value compares less than or equal to all positive normal numbers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、すべての正のノーマル数に対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value compares less than or equal to all positive numbers, but greater than zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、すべての正の数、しかしゼロより大きいものに対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Close&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Pe&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における分類区分&lt;c0&gt;Close&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Pe&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Connector&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Pc&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Connector&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Pc&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Control&lt;/c0&gt; (abbreviated &lt;c1&gt;Cc&lt;/c1&gt;) in the &lt;a2&gt;Unicode Standard&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a2&gt;Unicode Standard&lt;/a2&gt;における&lt;c0&gt;Control&lt;/c0&gt;（簡略形式&lt;c1&gt;Cc&lt;/c1&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Currency&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Sc&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Currency&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Sc&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Dash&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Pd&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Dash&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Pd&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Decimal&lt;w1&gt;_Number&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Nd&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Decimal&lt;w1&gt;_Number&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Nd&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Enclosing&lt;w1&gt;_Mark&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Me&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Enclosing&lt;w1&gt;_Mark&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Me&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Final&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Pf&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Final&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Pf&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Format&lt;/c0&gt; (abbreviated &lt;c1&gt;Cf&lt;/c1&gt;) in the &lt;a2&gt;Unicode Standard&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a2&gt;Unicode Standard&lt;/a2&gt;における&lt;c0&gt;Format&lt;/c0&gt;（簡略形式&lt;c1&gt;Cf&lt;/c1&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Initial&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Pi&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Initial&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Pi&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Letter&lt;w1&gt;_Number&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Nl&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Letter&lt;w1&gt;_Number&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Nl&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Line&lt;w1&gt;_Separator&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Zl&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Line&lt;w1&gt;_Separator&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Zl&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Lowercase&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Ll&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Lowercase&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Ll&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Math&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Sm&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Math&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Sm&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Modifier&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Lm&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Modifier&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Lm&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Modifier&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Sk&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Modifier&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Sk&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Nonspacing&lt;w1&gt;_Mark&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Mn&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Nonspacing&lt;w1&gt;_Mark&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Mn&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Open&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Ps&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Open&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Ps&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Other&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Lo&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Other&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Lo&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Other&lt;w1&gt;_Number&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;No&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Other&lt;w1&gt;_Number&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;No&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Other&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Po&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Other&lt;w1&gt;_Punctuation&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Po&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Other&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;So&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Other&lt;w1&gt;_Symbol&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;So&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Paragraph&lt;w1&gt;_Separator&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Zp&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Paragraph&lt;w1&gt;_Separator&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Zp&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Private&lt;w1&gt;_Use&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Co&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Private&lt;w1&gt;_Use&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Co&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Space&lt;w1&gt;_Separator&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Zs&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Space&lt;w1&gt;_Separator&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Zs&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Spacing&lt;w1&gt;_Mark&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Mc&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Spacing&lt;w1&gt;_Mark&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Mc&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Surrogate&lt;/c0&gt; (abbreviated &lt;c1&gt;Cs&lt;/c1&gt;) in the &lt;a2&gt;Unicode Standard&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a2&gt;Unicode Standard&lt;/a2&gt;における&lt;c0&gt;Surrogate&lt;/c0&gt;（簡略形式&lt;c1&gt;Cs&lt;/c1&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Titlecase&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Lt&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Titlecase&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Lt&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Unassigned&lt;/c0&gt; (abbreviated &lt;c1&gt;Cn&lt;/c1&gt;) in the &lt;a2&gt;Unicode Standard&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a2&gt;Unicode Standard&lt;/a2&gt;における&lt;c0&gt;Unassigned&lt;/c0&gt;（簡略形式&lt;c1&gt;Cn&lt;/c1&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to the category &lt;c0&gt;Uppercase&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt; (abbreviated &lt;c2&gt;Lu&lt;/c2&gt;) in the &lt;a3&gt;Unicode Standard&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、&lt;a3&gt;ユニコード標準&lt;/a3&gt;における&lt;c0&gt;Uppercase&lt;w1&gt;_Letter&lt;/w1&gt;&lt;/c0&gt;（簡略形式&lt;c2&gt;Lu&lt;/c2&gt;）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to type-specific C macros such as &lt;c0&gt;FLT&lt;w1&gt;_MAX&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;DBL&lt;w3&gt;_MAX&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、型固有のCマクロ、例えば&lt;c0&gt;FLT&lt;w1&gt;_MAX&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;DBL&lt;w3&gt;_MAX&lt;/w3&gt;&lt;/c2&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value corresponds to type-specific C macros such as &lt;c0&gt;FLT&lt;w1&gt;_MIN&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;DBL&lt;w3&gt;_MIN&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、型固有のCマクロ、例えば&lt;c0&gt;FLT&lt;w1&gt;_MIN&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;DBL&lt;w3&gt;_MIN&lt;/w3&gt;&lt;/c2&gt;に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value is &lt;c0&gt;nil&lt;/c0&gt; for code points that have not yet been assigned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、まだ割り当てられていないコード点に対して&lt;c0&gt;nil&lt;/c0&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value is always positive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この結果は常に正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value is unadjusted by the type’s exponent bias.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これは、この型の持つ指数バイアスによって未調整のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を計算するのは、些細なことではありません；通常良い考えであるのは、この情報をインスタンスが作成されるときに「ヘッダ」領域に格納することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This value should be rounded toward zero to keep user computations with angles from inadvertently ending up in the wrong quadrant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値は、角度を伴うユーザ計算がうっかりして間違った象限に終わらないようにゼロへと丸められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Those annotations change how Swift imports your declarations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら注釈は、どのようにSwiftがあなたの宣言をインポートするかを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Those “pairs” of code units are called &lt;e1&gt;surrogate pairs&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら「ペア」のコード単位は、&lt;e1&gt;サロゲートペア&lt;/e1&gt;と呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Though similar in name, this property is &lt;e0&gt;not&lt;/e0&gt; equivalent to &lt;c1&gt;changes&lt;w2&gt;When&lt;w3&gt;Case&lt;w4&gt;Mapped&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>名前が似ているにもかかわらず、このプロパティは&lt;c1&gt;changes&lt;w2&gt;When&lt;w3&gt;Case&lt;w4&gt;Mapped&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;と等しく&lt;e0&gt;ありません&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, creating a slice has O(1) complexity.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>したがって、ある切り取り（スライス）の作成はO(1)の計算量を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access a slice of a collection using a range expression, use the collection’s generic subscript that uses a range expression as its parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲式を使ってコレクションのスライスにアクセスするには、そのコレクションの持つ総称体添え字で、範囲式をそれのパラメータとして使うものを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the underlying memory through typed operations, the memory must be bound to a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付演算を通して基礎をなすメモリにアクセスするには、メモリは自明型に束縛されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access the underlying memory, invoke &lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; on the array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>基礎をなすメモリにアクセスするには、&lt;c0&gt;with&lt;w1&gt;Unsafe&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を配列上で発動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Numeric&lt;/c0&gt; protocol conformance to your own custom type, implement the required initializer and operators, and provide a &lt;c1&gt;magnitude&lt;/c1&gt; property using a type that can represent the magnitude of any value of your custom type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Numeric&lt;/c0&gt;プロトコル準拠をあなた独自のカスタム型に加えるには、必須イニシャライザおよび演算子を実装してください、そしてあなたのあつらえの型のあらゆる値の規模を表現できる型を使って&lt;c1&gt;magnitude&lt;/c1&gt;プロパティを提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to your custom collection, add an empty initializer and the &lt;c3&gt;replace&lt;w4&gt;Subrange(_:&lt;w5&gt;with:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; method to your custom type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Range&lt;w1&gt;Replaceable&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあなたのあつらえのコレクションに加えるには、ひとつの空のイニシャライザおよび&lt;c3&gt;replace&lt;w4&gt;Subrange(_:&lt;w5&gt;with:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドをあなたのあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Strideable&lt;/c0&gt; conformance to a custom type, choose a &lt;c1&gt;Stride&lt;/c1&gt; type that can represent the distance between two instances and implement the &lt;c2&gt;advanced(by:)&lt;/c2&gt; and &lt;c3&gt;distance(to:)&lt;/c3&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Strideable&lt;/c0&gt;準拠をあつらえの型に加えるには、２つのインスタンスの間の隔たりを表現可能である&lt;c1&gt;Stride&lt;/c1&gt;型のひとつを選んで、&lt;c2&gt;advanced(by:)&lt;/c2&gt;と&lt;c3&gt;distance(to:)&lt;/c3&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; conformance to a custom type, implement the required &lt;c3&gt;write(to:)&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Streamable&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;準拠をあつらえの型に加えるには、必須&lt;c3&gt;write(to:)&lt;/c3&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c2&gt;Hashable&lt;/c2&gt; conformance, provide an &lt;c3&gt;==&lt;/c3&gt; operator function and implement the &lt;c4&gt;hash(into:)&lt;/c4&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c2&gt;Hashable&lt;/c2&gt;準拠を加えるには、&lt;c3&gt;==&lt;/c3&gt;演算子関数を提供して、&lt;c4&gt;hash(into:)&lt;/c4&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add &lt;c4&gt;Sequence&lt;/c4&gt; conformance to your own custom type, add a &lt;c5&gt;make&lt;w6&gt;Iterator()&lt;/w6&gt;&lt;/c5&gt; method that returns an iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;Sequence&lt;/c4&gt;準拠をあなた独自のあつらえの型に加えるには、あるイテレータを返す&lt;c5&gt;make&lt;w6&gt;Iterator()&lt;/w6&gt;&lt;/c5&gt;メソッドを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add a new lazy sequence operation, extend this protocol with a method that returns a lazy wrapper that itself conforms to &lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい遅延シーケンス演算を加えるには、このプロトコルをあるメソッドで拡張してください、それはそれ自身&lt;c0&gt;Lazy&lt;w1&gt;Sequence&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠するある遅延ラッパーを返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add conformance to the &lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; protocol to your own custom collection, upgrade your type’s subscript to support both read and write access.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Mutable&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;プロトコルへの準拠をあなた独自のあつらえのコレクションに加えるには、あなたの型の持つ添え字を更新して読み書きアクセス両方をサポートするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add new lazy collection operations, extend this protocol with methods that return lazy wrappers that are themselves &lt;c0&gt;Lazy&lt;w1&gt;Collection&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;s.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>新しい遅延コレクション操作を加えるために、このプロトコルを、それら自身が&lt;c0&gt;Lazy&lt;w1&gt;Collection&lt;w2&gt;Protocol&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;である遅延ラッパーを返すメソッドで拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を加算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid dropping the customization provided by ancestor classes, an override of &lt;c2&gt;custom&lt;w3&gt;Mirror&lt;/w3&gt;&lt;/c2&gt; should pass &lt;c4&gt;.customized({ super&lt;w5&gt;.custom&lt;w6&gt;Mirror })&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; as &lt;c7&gt;ancestor&lt;w8&gt;Representation&lt;/w8&gt;&lt;/c7&gt; when initializing its mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>先祖クラスのカスタマイズを失くすのを防ぐために、&lt;c2&gt;custom&lt;w3&gt;Mirror&lt;/w3&gt;&lt;/c2&gt;のオーバーライドは&lt;c4&gt;.customized({ super&lt;w5&gt;.custom&lt;w6&gt;Mirror })&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;を&lt;c7&gt;ancestor&lt;w8&gt;Representation&lt;/w8&gt;&lt;/c7&gt;としてそれのミラーを初期化する時に渡さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid the unexpected copy, use the &lt;c1&gt;index(after:)&lt;/c1&gt; method starting with &lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt; to produce indices instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>予期されないコピーを避けるために、代わりに&lt;c1&gt;index(after:)&lt;/c1&gt;メソッドを使って&lt;c2&gt;start&lt;w3&gt;Index&lt;/w3&gt;&lt;/c2&gt;で始めることで、インデックスを生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To avoid this, use a forward declaration of the Swift class or protocol to reference it in an Objective-C interface.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これを防ぐために、Swiftクラスまたはプロトコルの前方宣言を使うことで、それをObjective-Cインターフェイスにおいて参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind a region of memory to a type that is a different size, convert the buffer to a raw buffer and use the &lt;c1&gt;bind&lt;w2&gt;Memory(to:)&lt;/w2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるメモリ領域を異なるサイズの型に束縛するには、そのバッファを新しい生のバッファに変換して、&lt;c1&gt;bind&lt;w2&gt;Memory(to:)&lt;/w2&gt;&lt;/c1&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind a region of memory to a type that is a different size, convert the pointer to a raw pointer and use the &lt;c1&gt;bind&lt;w2&gt;Memory(to:&lt;w3&gt;capacity:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリのある領域を異なるサイズである型にバインドするには、ポインタを生のポインタに変換して、&lt;c1&gt;bind&lt;w2&gt;Memory(to:&lt;w3&gt;capacity:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind memory to &lt;c3&gt;T&lt;/c3&gt;, use &lt;c4&gt;bind&lt;w5&gt;Memory(to:&lt;w6&gt;capacity:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; instead of this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリを&lt;c3&gt;T&lt;/c3&gt;に束縛するには、&lt;c4&gt;bind&lt;w5&gt;Memory(to:&lt;w6&gt;capacity:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind uninitialized memory to a type without initializing it, use the &lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;count:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリをそれを初期化することなくある型に束縛するには、&lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;count:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To bind uninitialized memory to a type without initializing it, use the &lt;c8&gt;bind&lt;w9&gt;Memory(to:&lt;w10&gt;count:)&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリをそれを初期化することなくある型に束縛するには、&lt;c8&gt;bind&lt;w9&gt;Memory(to:&lt;w10&gt;count:)&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;メソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To call &lt;c0&gt;count&lt;w1&gt;Letter&lt;w2&gt;Changes(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; with two strings, use an unbounded range in each string’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;count&lt;w1&gt;Letter&lt;w2&gt;Changes(_:&lt;w3&gt;_:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を２つの文字列で呼び出すには、無境界範囲を各文字列の添え字において使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether &lt;c1&gt;x&lt;/c1&gt; is represented by a surrogate pair, use &lt;c2&gt;UTF16&lt;w3&gt;.width(x) == 2&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;x&lt;/c1&gt;があるサロゲートペアで表現されるかどうか調べるには、&lt;c2&gt;UTF16&lt;w3&gt;.width(x) == 2&lt;/w3&gt;&lt;/c2&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether a collection is empty, use its &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property instead of comparing &lt;c2&gt;count&lt;/c2&gt; to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションが空かどうか調べるには、それの&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、&lt;c2&gt;count&lt;/c2&gt;をゼロと比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether a string is empty, use its &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property instead of comparing the length of one of the views to &lt;c2&gt;0&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列が空かどうか調べるには、それの&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、ビューの内の１つの長さを&lt;c2&gt;0&lt;/c2&gt;と比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To check whether the collection is empty, use its &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property instead of comparing &lt;c2&gt;count&lt;/c2&gt; to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが空かどうか調べるには、それの&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、&lt;c2&gt;count&lt;/c2&gt;をゼロと比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To conditionally bind the wrapped value of an &lt;c0&gt;Optional&lt;/c0&gt; instance to a new variable, use one of the optional binding control structures, including &lt;c1&gt;if let&lt;/c1&gt;, &lt;c2&gt;guard let&lt;/c2&gt;, and &lt;c3&gt;switch&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Optional&lt;/c0&gt;インスタンスのラップされた値を新しい変数へ条件付きの束縛を行うには、&lt;c1&gt;if let&lt;/c1&gt;、&lt;c2&gt;guard let&lt;/c2&gt;、そして&lt;c3&gt;switch&lt;/c3&gt;を含む、オプショナル束縛制御構造の１つを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To conform to &lt;c3&gt;Hashable&lt;/c3&gt;, implement the &lt;c4&gt;hash(into:)&lt;/c4&gt; requirement instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Hashable&lt;/c3&gt;に準拠するには、&lt;c4&gt;hash(into:)&lt;/c4&gt;要件を代わりに実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To construct a selector for a property’s Objective-C getter or setter method, prefix the property name using the &lt;c6&gt;getter:&lt;/c6&gt; or &lt;c7&gt;setter:&lt;/c7&gt; label, like &lt;c8&gt;#selector(getter: My&lt;w9&gt;View&lt;w10&gt;Controller&lt;w11&gt;.my&lt;w12&gt;Button)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタをあるプロパティの持つObjective-Cゲッターまたはセッターメソッドに対して組み立てるには、プロパティ名に&lt;c6&gt;getter:&lt;/c6&gt;または&lt;c7&gt;setter:&lt;/c7&gt;ラベルを使って接頭辞を付けてください、&lt;c8&gt;#selector(getter: My&lt;w9&gt;View&lt;w10&gt;Controller&lt;w11&gt;.my&lt;w12&gt;Button)&lt;/w12&gt;&lt;/w11&gt;&lt;/w10&gt;&lt;/w9&gt;&lt;/c8&gt;のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To convert a &lt;c0&gt;String&lt;w1&gt;.UTF16View&lt;/w1&gt;&lt;/c0&gt; instance back into a string, use the &lt;c2&gt;String&lt;/c2&gt; type’s &lt;c3&gt;init(_:)&lt;/c3&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;w1&gt;.UTF16View&lt;/w1&gt;&lt;/c0&gt;インスタンスを逆に文字列へと変換するには、&lt;c2&gt;String&lt;/c2&gt;型のもつ&lt;c3&gt;init(_:)&lt;/c3&gt;イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To convert an &lt;c1&gt;NSRange&lt;/c1&gt; instance to a range of &lt;c2&gt;String&lt;w3&gt;.Index&lt;/w3&gt;&lt;/c2&gt;, use the &lt;c4&gt;Range(_:&lt;w5&gt;in:)&lt;/w5&gt;&lt;/c4&gt; initializer, which takes an &lt;c6&gt;NSRange&lt;/c6&gt; and a string as arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;NSRange&lt;/c1&gt;インスタンスを&lt;c2&gt;String&lt;w3&gt;.Index&lt;/w3&gt;&lt;/c2&gt;の範囲へ変換するには、&lt;c4&gt;Range(_:&lt;w5&gt;in:)&lt;/w5&gt;&lt;/c4&gt;イニシャライザを使ってください、それは&lt;c6&gt;NSRange&lt;/c6&gt;と文字列を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a &lt;c3&gt;Zip2Sequence&lt;/c3&gt; instance, use the &lt;c4&gt;zip(_:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/c4&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;Zip2Sequence&lt;/c3&gt;インスタンスを作成するには、&lt;c4&gt;zip(_:&lt;w5&gt;_:)&lt;/w5&gt;&lt;/c4&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create an empty instance, assign an empty array literal to your variable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空のインスタンスを作成するには、空の配列リテラルをあなたの変数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize the logging of your type in a playground, conform to the &lt;c3&gt;Custom&lt;w4&gt;Playground&lt;w5&gt;Display&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; protocol, which does not use the &lt;c7&gt;Playground&lt;w8&gt;Quick&lt;w9&gt;Look&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; enum.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のログ取りをプレイグラウンドにおいてカスタマイズするには、&lt;c3&gt;Custom&lt;w4&gt;Playground&lt;w5&gt;Display&lt;w6&gt;Convertible&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;プロトコルに準拠してください、それは&lt;c7&gt;Playground&lt;w8&gt;Quick&lt;w9&gt;Look&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; enumを使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize the mirror representation of a custom type, add conformance to the &lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの型のミラー表現をカスタマイズするには、&lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;プロトコルへの準拠を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize your type’s &lt;c0&gt;Hashable&lt;/c0&gt; conformance, to adopt &lt;c1&gt;Hashable&lt;/c1&gt; in a type that doesn’t meet the criteria listed above, or to extend an existing type to conform to &lt;c2&gt;Hashable&lt;/c2&gt;, implement the &lt;c3&gt;hash(into:)&lt;/c3&gt; method in your custom type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型の&lt;c0&gt;Hashable&lt;/c0&gt;準拠をカスタマイズするために、&lt;c1&gt;Hashable&lt;/c1&gt;を上でリストされる基準に沿わない型において採用するために、または既存の型を拡張して&lt;c2&gt;Hashable&lt;/c2&gt;に準拠するためには、&lt;c3&gt;hash(into:)&lt;/c3&gt;メソッドをあなたのあつらえの型において実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize your type’s implementation, provide your own mutating &lt;c2&gt;negate()&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型の実装をカスタマイズするには、あなた自身の変更&lt;c2&gt;negate()&lt;/c2&gt;メソッドを提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To decode a code unit sequence completely, call this method repeatedly until it returns &lt;c0&gt;Unicode&lt;w1&gt;Decoding&lt;w2&gt;Result&lt;w3&gt;.empty&lt;w4&gt;Input&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコード単位のシーケンスを完全にデコードするには、このメソッドを繰り返し、それが&lt;c0&gt;Unicode&lt;w1&gt;Decoding&lt;w2&gt;Result&lt;w3&gt;.empty&lt;w4&gt;Input&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To demonstrate the different views available for every string, the following examples use this &lt;c0&gt;String&lt;/c0&gt; instance:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あらゆる文字列で利用可能な異なるビューを実際に示すために、以降の例はこの&lt;c0&gt;String&lt;/c0&gt;インスタンスを使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To ensure that your type meets the semantic requirements of the &lt;c3&gt;Hashable&lt;/c3&gt; and &lt;c4&gt;Equatable&lt;/c4&gt; protocols, it’s a good idea to also customize your type’s &lt;c5&gt;Equatable&lt;/c5&gt; conformance to match.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型が&lt;c3&gt;Hashable&lt;/c3&gt;と&lt;c4&gt;Equatable&lt;/c4&gt;プロトコルの意味論的要件に沿うことを確実にするために、あなたの型の持つ&lt;c5&gt;Equatable&lt;/c5&gt;準拠が合致するように同様にカスタマイズすることは良い考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To establish that a type you’ve created supports nondestructive iteration, add conformance to the &lt;c0&gt;Collection&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが作成した型が非破壊反復をサポートすることを確立するには、&lt;c0&gt;Collection&lt;/c0&gt;プロトコルに対する準拠を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find individual elements of a string, use the appropriate view for your task.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の個々の要素を手に入れるには、あなたの作業に適切なビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the index of the day in question, follow these setps:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>当該の日付のインデックスを見つけるには、これらの手順を踏んでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find the position that corresponds with this index in the original, underlying collection, use that collection’s &lt;c0&gt;index(before:)&lt;/c0&gt; method with the &lt;c1&gt;base&lt;/c1&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オリジナル、基盤コレクションでのこのインデックスに相当する位置を見つけるには、そのコレクションの&lt;c0&gt;index(before:)&lt;/c0&gt;メソッドを&lt;c1&gt;base&lt;/c1&gt;プロパティとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To import a set of Objective-C files into Swift code within the same app target, you rely on an Objective-C bridging header file to expose those files to Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一揃いのObjective-CファイルをSwiftコードへと同じアプリターゲット内でインポートするには、あなたはObjective-Cブリッジヘッダファイルを頼ることで、それらファイルをSwiftへと露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To import a set of Swift files in the same framework target as your Objective-C code, import the Xcode-generated header for your Swift code into any Objective-C &lt;c0&gt;.m&lt;/c0&gt; file where you want to use your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>一揃いのSwiftファイルをあなたのObjective-Cコードと同じフレームワークターゲットの中でインポートするために、あなたのSwiftコードに対するXcode生成のヘッダを、そこにおいてあなたがあなたのSwiftコードを使うことを望む何らかのObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルの中へとインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To inherit all the default implementations from the &lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt; protocol, the &lt;c2&gt;Element&lt;/c2&gt; type must be &lt;c3&gt;Self&lt;/c3&gt;, the default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt;プロトコル由来のすべての省略時実装を継承するには、&lt;c2&gt;Element&lt;/c2&gt;型は&lt;c3&gt;Self&lt;/c3&gt;、初期状態、でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To iterate over the elements of a collection with its indices, use the &lt;c3&gt;zip(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるコレクションの要素すべてにわたってそれのインデックスで反復するには、&lt;c3&gt;zip(_:&lt;w4&gt;_:)&lt;/w4&gt;&lt;/c3&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make a Swift class available in Objective-C, make it a descendant of an Objective-C class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftクラスをObjective-Cで利用可能にするには、それをObjective-Cクラスの子孫にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make a custom type conform to the &lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol, implement the required &lt;c3&gt;next()&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえのクラスを&lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠させるには、必須&lt;c3&gt;next()&lt;/c3&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make an Objective-C declaration unavailable at compile time in both Swift and Objective-C, use the &lt;c0&gt;NS&lt;w1&gt;_UNAVAILABLE&lt;/w1&gt;&lt;/c0&gt; macro.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるObjective-C宣言をSwiftとObjective-Cの両方で利用できなくするには、&lt;c0&gt;NS&lt;w1&gt;_UNAVAILABLE&lt;/w1&gt;&lt;/c0&gt;マクロを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make your Swift class accessible and usable back in Objective-C, make it a descendant of an Objective-C class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのSwiftクラスを逆にObjective-Cにおいてアクセス可能および利用可能にするには、それをObjective-Cクラスの子孫にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make your custom type conform to the &lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Stream&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol, implement the required &lt;c3&gt;write(_:)&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえのクラスを&lt;c0&gt;Text&lt;w1&gt;Output&lt;w2&gt;Stream&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠させるには、必須&lt;c3&gt;write(_:)&lt;/c3&gt;メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make your own custom type conform to the &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol, declare the required initializers, properties, and methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの型を&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠させるには、必須イニシャライザ、プロパティ、そしてメソッドを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To multiply values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を乗算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To prevent a declaration in an Objective-C API from being imported, pass a single parameter to the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_UNAVAILABLE&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-C APIの中のある宣言がインポートされるのを防ぐには、ある単一のパラメータを&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_UNAVAILABLE&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To prevent bypassing customized ancestors, pass &lt;c7&gt;.customized({ super&lt;w8&gt;.custom&lt;w9&gt;Mirror })&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; as the &lt;c10&gt;ancestor&lt;w11&gt;Representation&lt;/w11&gt;&lt;/c10&gt; parameter when implementing your type’s &lt;c12&gt;custom&lt;w13&gt;Mirror&lt;/w13&gt;&lt;/c12&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえの先祖を迂回することを防ぐには、&lt;c7&gt;.customized({ super&lt;w8&gt;.custom&lt;w9&gt;Mirror })&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を&lt;c10&gt;ancestor&lt;w11&gt;Representation&lt;/w11&gt;&lt;/c10&gt;パラメータとして、あなたの型のもつ&lt;c12&gt;custom&lt;w13&gt;Mirror&lt;/w13&gt;&lt;/c12&gt;プロパティを実装する時に渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To remove the last element of a collection that might be empty, use the &lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>空であるかもしれないあるコレクションの最後の要素を削除するには、&lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt;関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To represent those scalar values using 8-bit integers, more than one UTF-8 code unit is often required.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらのスカラー値を8ビット整数で表すには、１つ以上のUTF-8コード単位がしばしば必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To restore efficient set operations, create a new set from the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>能率的な集合演算を取り戻すには、新しい集合を結果から作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter &lt;c4&gt;round()&lt;/c4&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短い&lt;c4&gt;round()&lt;/c4&gt;メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter &lt;c4&gt;rounded()&lt;/c4&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短い&lt;c4&gt;rounded()&lt;/c4&gt;メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To safely access the properties and methods of a wrapped instance, use the postfix optional chaining operator (postfix &lt;c0&gt;?&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラップされたインスタンスの持つプロパティおよびメソッドに安全にアクセスするには、後置オプショナル連鎖演算子（後置&lt;c0&gt;?&lt;/c0&gt;）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort the elements of your collection in descending order, pass the greater-than operator (&lt;c0&gt;&gt;&lt;/c0&gt;) to the &lt;c1&gt;sort(by:)&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコレクションの要素を降順にソートするには、より大きい演算子（&lt;c0&gt;&gt;&lt;/c0&gt;）を&lt;c1&gt;sort(by:)&lt;/c1&gt;メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort the elements of your sequence in descending order, pass the greater-than operator (&lt;c0&gt;&gt;&lt;/c0&gt;) to the &lt;c1&gt;sorted(by:)&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスの要素を降順にソートするには、より大きい演算子（&lt;c0&gt;&gt;&lt;/c0&gt;）を&lt;c1&gt;sorted(by:)&lt;/c1&gt;メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To sort your sequence in descending order, pass the greater-than operator (&lt;c1&gt;&gt;&lt;/c1&gt;) as the &lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのシーケンスを降順にソートするには、より大きい演算子（&lt;c1&gt;&gt;&lt;/c1&gt;）を&lt;c2&gt;are&lt;w3&gt;In&lt;w4&gt;Increasing&lt;w5&gt;Order&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;パラメータとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify a particular name for the class to use in Objective-C, mark it with &lt;c0&gt;@objc(&lt;/c0&gt;&lt;e1&gt;name&lt;/e1&gt;&lt;c2&gt;)&lt;/c2&gt;, where name is the name that your Objective-C code uses to reference the Swift class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特定の名前をクラスに対して指定してObjective-Cで使うには、それを&lt;c0&gt;@objc(&lt;/c0&gt;&lt;e1&gt;name&lt;/e1&gt;&lt;c2&gt;)&lt;/c2&gt;で印してください、ここでnameはあなたのObjective-CコードがSwiftクラスを参照するのに使う名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify an alternative rule for rounding, use the &lt;c0&gt;round(_:)&lt;/c0&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>丸めのための代替の規則を指定するには、&lt;c0&gt;round(_:)&lt;/c0&gt;メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify an alternative rule for rounding, use the &lt;c0&gt;rounded(_:)&lt;/c0&gt; method instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>丸めのための代替の規則を指定するには、&lt;c0&gt;rounded(_:)&lt;/c0&gt;メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To start using the object, you use the &lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのオブジェクトの使用を開始するには、あなたは&lt;c1&gt;take&lt;w2&gt;Unretained&lt;w3&gt;Value()&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To subtract values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なる型の値を減算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Objective-C declarations in files in the same framework target as your Swift code, you’ll need to import those files into the Objective-C umbrella header—the master header for your framework.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのSwiftコードと同じフレームワークターゲットの中のファイルそれらの中のObjective-C宣言を使うには、あなたはそれらファイルをObjective-Cアンブレラヘッダ — あなたのフレームワークのマスターヘッダにインポートする必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the default interpolation, conform a type to &lt;c7&gt;Expressible&lt;w8&gt;By&lt;w9&gt;String&lt;w10&gt;Interpolation&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; and implement &lt;c11&gt;init(string&lt;w12&gt;Literal: String)&lt;/w12&gt;&lt;/c11&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>省略時の補間を使うには、型を&lt;c7&gt;Expressible&lt;w8&gt;By&lt;w9&gt;String&lt;w10&gt;Interpolation&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;に準拠させて、そして&lt;c11&gt;init(string&lt;w12&gt;Literal: String)&lt;/w12&gt;&lt;/c11&gt;を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use this interpolation method, create a string literal with an interpolation using the &lt;c0&gt;validating&lt;/c0&gt; parameter label.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この補間メソッドを使うには、&lt;c0&gt;validating&lt;/c0&gt;パラメータラベルを使用するある補間で文字列リテラルを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use your own custom type in a set or as the key type of a dictionary, add &lt;c0&gt;Hashable&lt;/c0&gt; conformance to your type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの型を集合でまたは辞書のキー型として使うには、&lt;c0&gt;Hashable&lt;/c0&gt;準拠をあなたの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To write each line to the file, pass a closure to the &lt;a0&gt;&lt;c1&gt;for&lt;w2&gt;Each(_:)&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; method:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>各行をファイルに書き出すには、クロージャを&lt;a0&gt;&lt;c1&gt;for&lt;w2&gt;Each(_:)&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;メソッドに渡してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tools for Your Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの型のためのツール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Topics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Range's Elements</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲の持つ要素を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Result</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Sequence</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスを変形する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a Set</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合を変形する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming a String's Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつ文字を変形します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming an Optional Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプショナル値の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Translates the given input from one Unicode encoding to another by calling the given closure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>指定された入力をあるユニコード符号化から別のものへと指定されたクロージャを呼び出すことによって翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Translation Between Unicode Encodings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードエンコーディング間の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Troubleshooting Tips and Reminders</seg>
      </tuv>
      <tuv lang="ja">
        <seg>問題解決の秘訣と注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>True if any lane of mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスクのどんなレーンもtrueならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>True if every lane of mask is true.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスクのあらゆるレーンがtrueならば、true。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two edge cases are worth particular attention:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの境界事例は特別な注意を払う価値があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two elements are &lt;e0&gt;incomparable&lt;/e0&gt; if neither is ordered before the other according to the predicate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの要素は、述部によるとどちらもが他の前に並べられるならば&lt;e0&gt;比較できない&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two instances that are equal must feed the same values to &lt;c2&gt;Hasher&lt;/c2&gt; in &lt;c3&gt;hash(into:)&lt;/c3&gt;, in the same order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>等しい２つのインスタンスは、同じ値を&lt;c2&gt;Hasher&lt;/c2&gt;へと&lt;c3&gt;hash(into:)&lt;/c3&gt;において、同じ順序で与えなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two ranges are equal when they have the same lower and upper bounds.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの範囲は、それらが同じ下方および上方境界を持つとき等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two sequences are canonically equivalent if they are equal when sorting the scalars in ascending order by their combining class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つのシーケンスは、スカラーをそれらの結合クラスによって昇順でソートする場合にそれらが等しいならば、正準的に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Aliases</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Casting and Existential Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型キャストと存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Method</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type Property</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type aliases representing the concrete type that a literal takes when no other type information is provided.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>具体的な型を表している型エイリアスで、それをリテラルが取るのは他の型情報が提供されない時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type cast</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type check</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型チェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type-Erasing Wrappers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型消去ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typed Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付メモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typed Pointers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付ポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to &lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; should specifically document the thread safety and quality of the generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に準拠する型は、とりわけ生成子のスレッド安全と品質を文書化すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that conform to the &lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt; protocol provide most basic (clause 5) operations of the &lt;a2&gt;IEEE 754 specification&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Floating&lt;w1&gt;Point&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型は、&lt;a2&gt;IEEE 754仕様&lt;/a2&gt;の最も基本的な演算（５項）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that have an integer &lt;c0&gt;Stride&lt;/c0&gt; can be used as the boundaries of a countable range or as the lower bound of an iterable one-sided range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある整数&lt;c0&gt;Stride&lt;/c0&gt;を持つこれら型は、可付番範囲の境界としてまたは反復可能な片側範囲の下方境界として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types that implement alternative behaviors for a signaling NaN must document the departure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シグナルNaNに対する代替の挙動を実装する型は、その逸脱を文書化しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typical extenders are length and iteration marks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>典型的なエクステンダは、長さおよび反復マークです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typical usage stores a count and capacity in &lt;c5&gt;Header&lt;/c5&gt; and destroys any live elements in the &lt;c6&gt;deinit&lt;/c6&gt; of a subclass.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>典型的なやり方は、総数と容量を&lt;c5&gt;Header&lt;/c5&gt;に格納して、サブクラスの&lt;c6&gt;deinit&lt;/c6&gt;の中のあらゆる生きている要素を破壊します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typically, you use &lt;c0&gt;do-catch&lt;/c0&gt; statements to handle throwing expressions immediately, but sometimes you need to store the whole result of the operation for later processing during tasks like analyzing a batch of calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>概して、あなたは&lt;c0&gt;do-catch&lt;/c0&gt;文を使うことでスロー式を直接に取り扱います、しかし時にはあなたは演算の結果全体を保管しておく必要があります、もっと後で、一群の呼び出しを分析することのような作業の間に処理するために。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF-16 View</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-16ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF-8 View</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF-8ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF16View Elements Match NSString Characters</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF16View要素はNSString文字に一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UTF8View Elements Match Encoded C Strings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UTF8View要素は符号化C文字列と一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unannotated declarations within the audited region are treated as nonnullable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>監査された領域内部の注釈を付けられない宣言は、非ヌル可能性として取り扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unary minus</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単項マイナス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unary plus</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単項プラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unconditional Unwrapping</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無条件にアンラップする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unconditionally prints a given message and stops execution.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無条件に与えられたメッセージを出力して実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unconditionally unwrapping a &lt;c0&gt;nil&lt;/c0&gt; instance with &lt;c1&gt;!&lt;/c1&gt; triggers a runtime error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;nil&lt;/c0&gt;インスタンスを&lt;c1&gt;!&lt;/c1&gt;で無条件にアンラップすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Under Build Settings, in Packaging, make sure the Defines Module setting for that framework target is set to Yes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「Build Settings」の下、「Packaging」の中で、そのフレームワークターゲットのための「Defines Module」設定が「Yes」に設定されることを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Under Build Settings, in Packaging, make sure the Defines Module setting for the framework target is set to Yes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Build Settingsの下、Packagingにおいて、フレームワークターゲットに対するDefines Module設定がYesに設定されることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Under typical system conditions, it's usually printed last, but you shouldn't write code that relies on the order of an asychronous call relative to synchronous code without performing more careful synchronization between threads.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>典型的なシステム条件の下、それはふつうは最後に印字されます、しかしあなたは、スレッド間でより注意深い同期を実行することなく、同期コードに関連して非同期呼び出しの順番を頼るコードを書くべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand how different API calls to your closures can affect your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのクロージャに対する異なるAPI呼び出しがどのようにあなたのアプリに影響を与えられるかを理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand the Results of Synchronous and Asynchronous Calls</seg>
      </tuv>
      <tuv lang="ja">
        <seg>同期および非同期呼び出しの結果を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understand the constraints of imported Obj-C lightweight generic type declarations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたObj-C軽量総称体型宣言の制約を理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding a Pointer’s Memory State</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるポインタのメモリ状態を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode Codecs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードコーデック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode Scalar Classifications</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラークラス分け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode Scalar View</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラービュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode scalar values are the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラー値は21ビットコードです、それはユニコードの基本的な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode scalar values that make up a string’s contents can be up to 21 bits long.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列のもつ内容を構成するユニコードスカラー値は、21ビット長に至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uninitialized Memory</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uninitialized memory must be initialized before it can be accessed for reading.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリは、それが読み出しのためアクセスされる前に初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uninitialized memory must be initialized with values of a type before it can be used with any typed operations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>未初期化メモリは、それが何らかの型付き演算で使用される前にある型の値で初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>共用体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unique for the lifetime of a process (e.g. global incrementing integers).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるプロセスの存続期間に対して特有（たとえば、グローバルに漸増している整数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unique for the lifetime of an object (e.g. object identifiers).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオブジェクトの存続期間に対して特有（たとえば、オブジェクト識別子）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unique within the current collection (e.g. collection index).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>現在のコレクション内で特有（たとえば、コレクションインデックス）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uniqueness Checking</seg>
      </tuv>
      <tuv lang="ja">
        <seg>特有性の検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unkeyed&lt;w0&gt;Decoding&lt;w1&gt;Container Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーなし&lt;w0&gt;デコーディング&lt;w1&gt;コンテナの実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnkeyedDecodingContainer Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnkeyedDecodingContainer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnkeyedEncodingContainer Implementations</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnkeyedEncodingContainer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless the collection conforms to the &lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt; protocol, &lt;c2&gt;start&lt;/c2&gt; must be less than or equal to &lt;c3&gt;end&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>コレクションが&lt;c0&gt;Bidirectional&lt;w1&gt;Collection&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠しない場合は、&lt;c2&gt;start&lt;/c2&gt;は&lt;c3&gt;end&lt;/c3&gt;より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless the collection guarantees random-access performance, calculating &lt;c3&gt;count&lt;/c3&gt; can be an O(&lt;e4&gt;n&lt;/e4&gt;) operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのコレクションが無作為アクセス性能を保証しない限り、&lt;c3&gt;count&lt;/c3&gt;の算出は、O(&lt;e4&gt;n&lt;/e4&gt;)演算であるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike &lt;c0&gt;NSString&lt;/c0&gt;, however, &lt;c1&gt;String&lt;w2&gt;.UTF16View&lt;/w2&gt;&lt;/c1&gt; does not use integer indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>しかしながら、&lt;c0&gt;NSString&lt;/c0&gt;とは違い、&lt;c1&gt;String&lt;w2&gt;.UTF16View&lt;/w2&gt;&lt;/c1&gt;は整数インデックスを使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike enumerations, option sets provide a nonfailable &lt;c0&gt;init(raw&lt;w1&gt;Value:)&lt;/w1&gt;&lt;/c0&gt; initializer to convert from a raw value, because option sets don’t have an enumerated list of all possible cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙と異なり、オプションセットは生の値から変換するために失敗できない&lt;c0&gt;init(raw&lt;w1&gt;Value:)&lt;/w1&gt;&lt;/c0&gt;イニシャライザを提供します、なぜならオプションセットは可能な場合全てを列挙したリストを持たないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike key-value pairs in a true dictionary, neither the key nor the value of a &lt;c4&gt;Key&lt;w5&gt;Value&lt;w6&gt;Pairs&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; instance must conform to the &lt;c7&gt;Hashable&lt;/c7&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>本当の辞書におけるキー値ペアとは違い、&lt;c4&gt;Key&lt;w5&gt;Value&lt;w6&gt;Pairs&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;インスタンスのキーも値も&lt;c7&gt;Hashable&lt;/c7&gt;プロトコルに準拠する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike ordinary set types, the &lt;c0&gt;Element&lt;/c0&gt; type of an &lt;c1&gt;Option&lt;w2&gt;Set&lt;/w2&gt;&lt;/c1&gt; is identical to the &lt;c3&gt;Option&lt;w4&gt;Set&lt;/w4&gt;&lt;/c3&gt; type itself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>普通の集合型とは違い、ある&lt;c1&gt;Option&lt;w2&gt;Set&lt;/w2&gt;&lt;/c1&gt;の&lt;c0&gt;Element&lt;/c0&gt;型は、&lt;c3&gt;Option&lt;w4&gt;Set&lt;/w4&gt;&lt;/c3&gt;型自体と全く同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike traditional truncating multiplication, the &lt;c0&gt;multiplied&lt;w1&gt;Full&lt;w2&gt;Width(by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method returns a tuple containing both the &lt;c3&gt;high&lt;/c3&gt; and &lt;c4&gt;low&lt;/c4&gt; parts of the product of this value and &lt;c5&gt;other&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>従来的な切り詰め乗算と違って、&lt;c0&gt;multiplied&lt;w1&gt;Full&lt;w2&gt;Width(by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドは、この値と&lt;c3&gt;other&lt;/c3&gt;の積の&lt;c4&gt;high&lt;/c4&gt;および&lt;c5&gt;low&lt;/c5&gt;部分の両方を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike with &lt;c3&gt;is&lt;w4&gt;Empty&lt;/w4&gt;&lt;/c3&gt;, calculating a view’s &lt;c5&gt;count&lt;/c5&gt; property requires iterating through the elements of the string.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;is&lt;w4&gt;Empty&lt;/w4&gt;&lt;/c3&gt;とは違い、あるビューの&lt;c5&gt;count&lt;/c5&gt;プロパティを計算することはその文字列の要素を始めから終わりまで反復していく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike with other pointer types, you can't use an array as an implicitly bridged parameter.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>他のポインタ型とは違い、あなたは配列を暗黙的にブリッジされるパラメータとして使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unnamed Structure and Union Fields</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無名の構造体および共用体のフィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unnamed fields consist of a nested &lt;c2&gt;struct&lt;/c2&gt; or &lt;c3&gt;union&lt;/c3&gt; type with named fields.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無名フィールドは、入れ子にされた&lt;c2&gt;struct&lt;/c2&gt;または&lt;c3&gt;union&lt;/c3&gt;で名前付きフィールドを持つものから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeMutableBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeMutableRawBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeMutableRawBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>UnsafeRawBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="ja">
        <seg>UnsafeRawBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsafely converts an unmanaged class reference to a pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>管理されないクラス参照をポインタへと安全でない変換をする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsafely turns an opaque C pointer into an unmanaged class reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>不透明Cポインタの管理されないクラス参照への安全でない転換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsigned Integers</seg>
      </tuv>
      <tuv lang="ja">
        <seg>符号なし整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Update import statements in your Objective-C code (to &lt;c0&gt;#import "Product&lt;w1&gt;Module&lt;w2&gt;Name-Swift&lt;w3&gt;.h"&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;) to refer to your new Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのObjective-Cコードにおいてインポート文を更新して（&lt;c0&gt;#import "Product&lt;w1&gt;Module&lt;w2&gt;Name-Swift&lt;w3&gt;.h"&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;へと）、あなたの新しいSwiftコードを参照するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Update your code to use the Swift class name instead of the Objective-C name if you gave the Swift class a different name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがスウィフトクラスに異なる名前を与えるならば、Objective-C名でなくてスウィフトクラス名を使用するようにあなたのコードを更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;Never&lt;/c0&gt; as the return type when declaring a closure, function, or method that unconditionally throws an error, traps, or otherwise does not terminate.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無条件にエラーをスローする、トラップする、またはそうする以外終了しない、クロージャ、関数、またはメソッドを定義するときに、&lt;c0&gt;Never&lt;/c0&gt;を戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;Void&lt;/c0&gt; or an empty tuple as the return type when declaring a closure, function, or method that doesn’t return a value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値を返さないクロージャ、関数、またはメソッドを定義する場合は、&lt;c0&gt;Void&lt;/c0&gt;または空のタプルを戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;a&lt;/c0&gt; macro to denote the availability of an Objective-C API.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;a&lt;/c0&gt;マクロを使って、Objective-C APIの利用可能性を示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;unsafely&lt;w1&gt;Unwrapped&lt;/w1&gt;&lt;/c0&gt; only when you are confident that this instance will never be equal to &lt;c2&gt;nil&lt;/c2&gt; and only after you’ve tried using the postfix &lt;c3&gt;!&lt;/c3&gt; operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;unsafely&lt;w1&gt;Unwrapped&lt;/w1&gt;&lt;/c0&gt;は、あなたがこのインスタンスは決して&lt;c2&gt;nil&lt;/c2&gt;と等しくないことを確信している場合にのみ、そしてあなたが前置&lt;c3&gt;!&lt;/c3&gt;演算子を使うことを試みた後にのみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c3&gt;NS&lt;w4&gt;_TYPED&lt;w5&gt;_ENUM&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; for sets of constants that &lt;e6&gt;can't&lt;/e6&gt; logically have values added in a Swift extension, and use &lt;c7&gt;NS&lt;w8&gt;_TYPED&lt;w9&gt;_EXTENSIBLE&lt;w10&gt;_ENUM&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; for sets of constants that &lt;e11&gt;can&lt;/e11&gt; be expanded in an extension.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;NS&lt;w4&gt;_TYPED&lt;w5&gt;_ENUM&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;を、論理的にSwift拡張に加えられた値を持つことが&lt;e6&gt;できない&lt;/e6&gt;定数のセットに対して使ってください、そして&lt;c7&gt;NS&lt;w8&gt;_TYPED&lt;w9&gt;_EXTENSIBLE&lt;w10&gt;_ENUM&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;を、ある拡張において拡張されることが&lt;e11&gt;できる&lt;/e11&gt;定数のセットに対して使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c7&gt;NS&lt;w8&gt;_TYPED&lt;w9&gt;_ENUM&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; and &lt;c10&gt;NS&lt;w11&gt;_TYPED&lt;w12&gt;_EXTENSIBLE&lt;w13&gt;_ENUM&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt; when grouping related constants of any type, including string constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c7&gt;NS&lt;w8&gt;_TYPED&lt;w9&gt;_ENUM&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;および&lt;c10&gt;NS&lt;w11&gt;_TYPED&lt;w12&gt;_EXTENSIBLE&lt;w13&gt;_ENUM&lt;/w13&gt;&lt;/w12&gt;&lt;/w11&gt;&lt;/c10&gt;を、文字列定数を含む、任意の型の関連する定数をグループにする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use API names and parameter names along with documentation to determine whether an API is synchronous or asynchronous.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>API名とパラメータ名を、加えてAPIが同期的または非同期的かを明らかにする文書とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Functions and Generics Instead of Complex Macros</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数と総称体を複雑なマクロの代わりに使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Key Paths to Dynamically Access Objective-C Properties</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパスを使って動的にObjective-Cプロパティにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Memory Managed Objects</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ管理オブジェクトを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Selectors to Arrange Calls to Objective-C Methods</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタを使ってObjective-Cメソッドへの呼び出しを整える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use a &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance when you need an ordered collection of key-value pairs and don’t require the fast key lookup that the &lt;c3&gt;Dictionary&lt;/c3&gt; type provides.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを使うのは、あなたがキー値ペアの順序付きコレクションを必要とするそして&lt;c3&gt;Dictionary&lt;/c3&gt;型が提供する高速キー検索を要求しない場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use a CVaListPointer to Call Variadic Functions</seg>
      </tuv>
      <tuv lang="ja">
        <seg>CVaListPointerを使って可変長引数関数を呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use a type’s alignment when allocating memory using an unsafe pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型のアライメントを使うのは、安全でないポインタを使うメモリアロケートの場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use a variable or constant with an existential type to hold an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある変数または定数を存在型とともに使うことで、どんな型のインスタンスでも保持するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use an Enumeration to Capture State</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙を使って状態をキャプチャしてください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use bridged Foundation types in your Swift codebase to work with dates, times, and other values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジされたFoundation型をあなたのSwiftコード基盤において使って、日付、時刻、および他の値を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use bridged reference types when you need reference semantics or Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ブリッジされた参照型を、あなたが参照意味論またはFoundation特有の挙動を必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes and other declarations from your Objective-C code with the same Swift syntax you use for system classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスと他の宣言をあなたのObjective-Cコードからあなたがシステムクラスに使うのと同じSwift構文で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use classes and other declarations from your custom Objective-C code with the same Swift syntax you use for system classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>クラスと他の宣言をあなたのあつらえのObjective-Cコードからあなたがシステムクラスに使うのと同じSwift構文で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use enumerations to capture and track the state of your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>列挙を使ってあなたのアプリの状態をキャプチャおよび追跡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use implicit pointer casting or bridging when calling functions that takes pointers as parameters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>暗黙的なポインタキャストまたはブリッジを、ポインタをパラメータとして取る関数を呼び出す場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use imported C types or call C variadic functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC型を使ったり、C可変長引数関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use imported C-defined macros as constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC定義のマクロを定数として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use inout syntax to implicitly create a pointer to an instance of any type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インアウト構文を使って、任意の型のインスタンスへのポインタを暗黙的に作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use key-path expressions to access properties dynamically.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>キーパス式を使ってプロパティに動的にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use native Swift syntax to interoperate with types and functions in C and Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>本来のSwift構文を使ってCおよびObjective-Cでの型および関数と相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use nullability annotations or mark regions as annotated to control how Objective-C declarations are imported into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヌル可能性注釈を使うかまたは領域が注釈されると印することで、どのようにObjective-C宣言がSwiftへとインポートされるかを制御してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use raw pointers and buffers to access memory for loading and storing as raw bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>生のポインタとバッファを使って、ロードおよび格納のためにメモリに生のバイトとしてアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use selectors and key paths to interact with dynamic Objective-C APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セレクタとキーパスを使って動的Objective-C APIと相互作用してます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use set-related operations to check for membership and to add or remove members from an instance of your custom option set type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>セット関連演算を使って、帰属を確認したり、あなたのあつらえのオプションセット型のインスタンス由来のメンバの追加や削除を行ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use slices only for transient computation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スライスを一時的な計算のためだけに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;@available()&lt;/c0&gt; keyword to check availability information in a conditional statement in Objective-C:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;@available()&lt;/c0&gt;キーワードを使って、利用可能性情報をObjective-Cの条件文で確認してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;@objc(&lt;/c0&gt;&lt;e1&gt;name&lt;/e1&gt;&lt;c2&gt;)&lt;/c2&gt; attribute to provide Objective-C names for properties and methods when necessary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;@objc(&lt;/c0&gt;&lt;e1&gt;name&lt;/e1&gt;&lt;c2&gt;)&lt;/c2&gt;属性をObjective-C名をプロパティとメソッドに必要に応じて用意するために使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;API&lt;w1&gt;_AVAILABLE&lt;/w1&gt;&lt;/c0&gt; macro to add availability information in Objective-C:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;API&lt;w1&gt;_AVAILABLE&lt;/w1&gt;&lt;/c0&gt;マクロを使って、利用可能性情報をObjective-Cにおいて加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to group functions that have related behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って、関連する挙動を持つ関数をグループにまとめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol as a constraint or extension point when writing operations that depend on bit shifting, performing bitwise operations, catching overflows, or having access to the maximum or minimum representable value of a type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ビットシフト、ビット単位演算の実行、オーバーフローのキャッチ、またはある型の最大限または最小限表現可能な値へのアクセスに依存する演算を記述する場合に、&lt;c0&gt;Fixed&lt;w1&gt;Width&lt;w2&gt;Integer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルを制約または拡張ポイントとして使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;Identifiable&lt;/c0&gt; protocol to provide a stable notion of identity to a class or value type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Identifiable&lt;/c0&gt;プロトコルを使って、ある安定した同一性の概念をあるクラスまたは値型に提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;NS&lt;w1&gt;_CLOSED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro for a simple group of constants that you can never add new cases to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_CLOSED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを、あなたが決してそれに新しいケース節を加えることが出来ない、ある単純な定数グループに対して使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt; macro for simple groups of constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_ENUM&lt;/w1&gt;&lt;/c0&gt;マクロを、単純な定数のグループに対して使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to change how an API is imported into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_REFINED&lt;w2&gt;_FOR&lt;w3&gt;_SWIFT&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使って、あるAPIがSwiftへとインポートされる方法を変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to customize API names for Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って、API名をSwift用にカスタマイズしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_UNAVAILABLE&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to prevent an API from being used in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_UNAVAILABLE&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って、あるAPIがSwiftにおいて使われることを妨げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;advanced(by:)&lt;/c0&gt; method in generic code to offset a value by a specified distance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;advanced(by:)&lt;/c0&gt;メソッドを総称体コードにおいて使用して、ある値を指定された隔たりだけオフセットしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;alignment&lt;/c0&gt; property for a type when allocating memory using an unsafe pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある型に対して&lt;c0&gt;alignment&lt;/c0&gt;プロパティを使うのは、安全でないポインタを使うメモリアロケートの場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;bind&lt;w1&gt;Memory(to:)&lt;/w1&gt;&lt;/c0&gt; method to bind the memory referenced by this buffer to the type &lt;c2&gt;T&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bind&lt;w1&gt;Memory(to:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使用して、このバッファによって参照されるメモリを型&lt;c2&gt;T&lt;/c2&gt;へと束縛してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;capacity:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method to bind the memory referenced by this pointer to the type &lt;c3&gt;T&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;capacity:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを使用して、このポインタによって参照されるメモリを型&lt;c3&gt;T&lt;/c3&gt;へと束縛してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;contains(_:)&lt;/c0&gt; method to test whether a set contains a specific element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;contains(_:)&lt;/c0&gt;メソッドを使って、ある集合が特定の要素を含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;flat&lt;w1&gt;Map&lt;/w1&gt;&lt;/c0&gt; method with a closure that returns an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;flat&lt;w1&gt;Map&lt;/w1&gt;&lt;/c0&gt;メソッドをオプショナル値を返すクロージャとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;intersection(_:)&lt;/c0&gt; method to create a new set with only the elements common to a set and another set or sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;intersection(_:)&lt;/c0&gt;メソッドを使って、ある集合と別の集合またはシーケンスに共通の要素だけで新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;is&lt;w1&gt;Disjoint(with:)&lt;/w1&gt;&lt;/c0&gt; method to test whether a set has any elements in common with another set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Disjoint(with:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、ある集合が別の集合と共通の何らかの要素を持つかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;is&lt;w1&gt;Strict&lt;w2&gt;Subset(of:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;is&lt;w4&gt;Strict&lt;w5&gt;Superset(of:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; methods to test whether a set is a subset or superset of, but not equal to, another set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Strict&lt;w2&gt;Subset(of:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;および&lt;c3&gt;is&lt;w4&gt;Strict&lt;w5&gt;Superset(of:)&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドを使って、ある集合が別の集合の下位集合または上位集合である、しかし等しくはないものであるかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;is&lt;w1&gt;Subset(of:)&lt;/w1&gt;&lt;/c0&gt; method to test whether a set contains all the elements of another set or sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Subset(of:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、ある集合が別の集合またはシーケンスに属する要素すべてを含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;is&lt;w1&gt;Superset(of:)&lt;/w1&gt;&lt;/c0&gt; method to test whether all elements of a set are contained in another set or sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;is&lt;w1&gt;Superset(of:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、ある集合のすべての要素が別の集合またはシーケンスの中に含まれるかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;map&lt;/c0&gt; method with a closure that returns a non-optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この&lt;c0&gt;map&lt;/c0&gt;メソッドを、非オプショナル値を返すクロージャとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;max(by:)&lt;/c0&gt; method to determine the index of the day with the most absences.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;max(by:)&lt;/c0&gt;メソッドを使って最も欠席者の多い日付のインデックスを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reduce(_:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、あるシーケンス全体の中の要素から単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;reduce(into:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt; method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;reduce(into:&lt;w1&gt;_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、あるシーケンス全体の要素から単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;shuffle()&lt;/c0&gt; method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;shuffle()&lt;/c0&gt;メソッドを使って、配列の要素を無作為に再配列してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;stride(from:&lt;w1&gt;through:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function to create &lt;c3&gt;Stride&lt;w4&gt;Through&lt;/w4&gt;&lt;/c3&gt; instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;stride(from:&lt;w1&gt;through:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を使って&lt;c3&gt;Stride&lt;w4&gt;Through&lt;/w4&gt;&lt;/c3&gt;インスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;stride(from:&lt;w1&gt;to:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; function to create &lt;c3&gt;Stride&lt;w4&gt;To&lt;/w4&gt;&lt;/c3&gt; instances.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;stride(from:&lt;w1&gt;to:&lt;w2&gt;by:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;関数を使って&lt;c3&gt;Stride&lt;w4&gt;To&lt;/w4&gt;&lt;/c3&gt;インスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;subtracting(_:)&lt;/c0&gt; method to create a new set with the elements of a set that are not also in another set or sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;subtracting(_:)&lt;/c0&gt;メソッドを使って、別の集合またはシーケンスにはないある集合の要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;symmetric&lt;w1&gt;Difference(_:)&lt;/w1&gt;&lt;/c0&gt; method to create a new set with the elements that are in either a set or another set or sequence, but not in both.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;symmetric&lt;w1&gt;Difference(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使って、ある集合または別の集合かシーケンスのどちらかにある、しかし両方にではない要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c0&gt;union(_:)&lt;/c0&gt; method to create a new set with the elements of a set and another set or sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;union(_:)&lt;/c0&gt;メソッドを使って、ある集合と別の集合またはシーケンスに属する要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;c5&gt;Unicode&lt;w6&gt;.Scalar&lt;/w6&gt;&lt;/c5&gt; type to work with decoded Unicode scalar values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c5&gt;Unicode&lt;w6&gt;.Scalar&lt;/w6&gt;&lt;/c5&gt;型を使ってデコードされたユニコードスカラー値を扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the &lt;s0&gt;&lt;c1&gt;Result&lt;/c1&gt;&lt;/s0&gt; type in these scenarios to capture the result of a potentially failing operation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;s0&gt;&lt;c1&gt;Result&lt;/c1&gt;&lt;/s0&gt;型をそれらの状況において使用して、失敗する可能性のある演算の結果をキャプチャしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the closed range operator (&lt;c0&gt;...&lt;/c0&gt;) to create a closed range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>完結範囲演算子（&lt;c0&gt;...&lt;/c0&gt;）を使って&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the half-open range operator (&lt;c0&gt;..&lt;&lt;/c0&gt;) to create a range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半開範囲演算子（&lt;c0&gt;..&lt;&lt;/c0&gt;）を使って&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠する何らかの型の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the masking left shift operator (&lt;c0&gt;&amp;&lt;&lt;&lt;/c0&gt;) when you need to perform a shift and are sure that the shift amount is in the range &lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク左シフト演算子（&lt;c0&gt;&amp;&lt;&lt;&lt;/c0&gt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲&lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the masking right shift operator (&lt;c0&gt;&amp;&gt;&gt;&lt;/c0&gt;) when you need to perform a shift and are sure that the shift amount is in the range &lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>マスク右シフト演算子（&lt;c0&gt;&amp;&gt;&gt;&lt;/c0&gt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲&lt;c1&gt;0..&lt;lhs&lt;w2&gt;.bit&lt;w3&gt;Width&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;の中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the nil-coalescing operator (&lt;c0&gt;??&lt;/c0&gt;) to supply a default value in case the &lt;c1&gt;Optional&lt;/c1&gt; instance is &lt;c2&gt;nil&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算子（&lt;c0&gt;??&lt;/c0&gt;）を使って、省略時の値を&lt;c1&gt;Optional&lt;/c1&gt;インスタンスが&lt;c2&gt;nil&lt;/c2&gt;の場合に提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the postfix range operator (postfix &lt;c0&gt;...&lt;/c0&gt;) to create a partial range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>後置完結範囲演算子（後置&lt;c0&gt;...&lt;/c0&gt;）を使うことで何らかの型の部分的な範囲で&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the prefix closed range operator (prefix &lt;c0&gt;...&lt;/c0&gt;) to create a partial range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置完結範囲演算子（前置&lt;c0&gt;...&lt;/c0&gt;）を使うことで何らかの型の部分的な範囲で&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the prefix half-open range operator (prefix &lt;c0&gt;..&lt;&lt;/c0&gt;) to create a partial range of any type that conforms to the &lt;c1&gt;Comparable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置半開範囲演算子（前置&lt;c0&gt;..&lt;&lt;/c0&gt;）を使うことで何らかの型の部分的な範囲で&lt;c1&gt;Comparable&lt;/c1&gt;プロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use the “equal to” operator (&lt;c0&gt;==&lt;/c0&gt;) to test whether two sets contain the same elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>「同等」演算子（&lt;c0&gt;==&lt;/c0&gt;）を使って、２つの集合が同じ要素らを含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use these functions with numeric values and other comparable types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの関数を数値および他の比較可能な型で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use these lazy wrappers to defer any filtering or transformation of collection elements until elements are accessed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの遅延ラッパーを使うことで、コレクション要素の何らかの変換またはフィルタを要素がアクセスされるまで延期してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use these static properties to access a type's layout.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これらの静的プロパティを使ってある型の持つレイアウトにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this equal-to operator (&lt;c0&gt;==&lt;/c0&gt;) to compare any two optional instances of a type that conforms to the &lt;c1&gt;Equatable&lt;/c1&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この同等演算子（&lt;c0&gt;==&lt;/c0&gt;）を使って、&lt;c1&gt;Equatable&lt;/c1&gt;プロトコルに準拠するある型の何らかの２つのオプショナルインスタンスを比較してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this information to estimate the amount of storage you will need.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この情報を使って、あなたが必要とするストレージの総量を見積もってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to avoid intermediate reallocations of a set’s storage buffer when you know how many elements you’ll insert into the set after creation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがどのくらい多くの要素を作成後の集合に挿入するか知っているならば、このイニシャライザを使って集合の持つストレージバッファの中間的な再割り当てを回避してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert an instance of any type to its custom debugging representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのあつらえのデバッグ表現に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert an instance of any type to its preferred representation as a &lt;c0&gt;String&lt;/c0&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのより好まれる表現である&lt;c0&gt;String&lt;/c0&gt;に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to convert from another integer type when you know the value is within the bounds of this type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って別の整数型から変換してください、値がこの型の境界の内部であるのをあなたが知っている場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a 64-bit integer by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って64ビット整数を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a new set from an existing sequence, for example, an array or a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、新しい集合を既存のシーケンス、例えば、配列またはある範囲から作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a new set from an existing sequence, like an array or a range:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、新しい集合を既存のシーケンス、配列またはある範囲などから作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create a string by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;String&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って文字列を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;String&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to create an integer by converting an &lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt; with an underlying type of &lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って整数を作成してください、&lt;a0&gt;&lt;c1&gt;MLData&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;&lt;/a0&gt;をある基礎をなす型の&lt;a3&gt;&lt;c4&gt;Int&lt;/c4&gt;&lt;/a3&gt;で変換することによって</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to explicitly convert &lt;c0&gt;other&lt;/c0&gt; to an &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、&lt;c0&gt;other&lt;/c0&gt;を&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;インスタンスに明示的に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this initializer to explicitly convert &lt;c0&gt;other&lt;/c0&gt; to an &lt;c1&gt;Unsafe&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; instance.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使って、&lt;c0&gt;other&lt;/c0&gt;を&lt;c1&gt;Unsafe&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;インスタンスに明示的に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method only if you need the concrete range it produces.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それが生成する具体的な範囲をあなたが必要とする場合にのみ、このメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to calculate the full result of a product that would otherwise overflow.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、そうしなければオーバーフローするであろう積の完全な結果を計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to calculate the quotient and remainder of a division at the same time.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、除算の商と余りを同時に計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to extend this key path to the value type of another key path.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、このキーパスを別のキーパスの値型にまで広げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate a floating-point value within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある浮動小数点値を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate a floating-point value within a specific range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、特定の範囲の内のある浮動小数点値を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate an integer within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to generate an integer within a specific range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a sequence of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで非オプショナル値のシーケンスを受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準コレクションを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive a single-level sequence when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準シーケンスを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive an array of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで非オプショナル値の配列を受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to receive an array of nonoptional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの変換がオプショナル値を生成する場合に、このメソッドを使って非オプショナル値からなる配列を受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to remove every element in a collection that meets particular criteria.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使って、コレクションの中の、特定の基準に合うすべての要素を除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method to retrieve the value of this result if it represents a success, or to catch the value if it represents a failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うことで、この結果の値を回収してください、もしそれが成功を表すならば、またはそれが失敗を表すならばその値をキャッチしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you have a buffer of memory bound to one type and you need to access that memory as a buffer of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使うのは、あなたがある型に束縛されるメモリのバッファを持つ、そしてあなたがそのメモリに別の型のバッファとしてアクセスする必要がある場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you have a pointer to memory bound to one type and you need to access that memory as instances of another type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、あなたがある型に束縛されたメモリへのポインタを持つ、そしてあなたがそのメモリに別の型のインスタンスとしてアクセスする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you have a raw pointer to memory that has &lt;e0&gt;already&lt;/e0&gt; been bound to the specified type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;e0&gt;すでに&lt;/e0&gt;指定された型へ束縛されているメモリに対する生のポインタを持つ場合に、このメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you need random binary data to generate another value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを、あなたが無作為バイナリデータを別の値を生成するために必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you need to transform the value of a &lt;c0&gt;Result&lt;/c0&gt; instance when it represents a failure.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使ってください、あなたが&lt;c0&gt;Result&lt;/c0&gt;インスタンスの値をそれが失敗を表す場合に変換する必要がある時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this method when you need to transform the value of a &lt;c0&gt;Result&lt;/c0&gt; instance when it represents a success.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを使ってください、あなたが&lt;c0&gt;Result&lt;/c0&gt;インスタンスの値をそれが成功を表す場合に変換する必要がある時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this operator to append the elements of a sequence to the end of range-replaceable collection with same &lt;c0&gt;Element&lt;/c0&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この演算子を使って、あるシーケンスに属するいくらかの要素を同じ&lt;c0&gt;Element&lt;/c0&gt;型を持つ範囲置換可能なコレクションの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this property to access the Unicode properties of a Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを使って、あるユニコードスカラー値のユニコードプロパティにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use this value to estimate how much additional capacity will be needed for the interpolated segments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この値を使って、どのくらい多くそれ以上の容量が補間される文節に対して必要とされるか見積もってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use typed pointers and buffers to access memory as instances of a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付きのポインタとバッファを使って、メモリに特定の型のインスタンスとしてアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use wrappers, indices, and iterators in operations like slicing, flattening, and reversing a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ラッパー、インデックス、そしてイテレータを、コレクションのスライス（切出し）、平坦化、反転のような演算で使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use your custom types in operations that depend on testing for equality or order and as members of sets and dictionaries.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのあつらえの型を、同等性や順番を調べることに基づく演算の中で、そして集合および辞書のメンバとして使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Useful mostly to recover the ability to use &lt;c0&gt;for&lt;/c0&gt;…&lt;c1&gt;in&lt;/c1&gt;, given just an iterator &lt;c2&gt;i&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>主として有用なのは&lt;c0&gt;for&lt;/c0&gt;…&lt;c1&gt;in&lt;/c1&gt;を使う能力を、ただイテレータ&lt;c2&gt;i&lt;/c2&gt;を与えるだけで獲得することです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Users of your remote random number generator can decide how to handle both the success and failure cases:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたの遠隔無作為数生成子のユーザは、成功および失敗の場合の両方をどのように取り扱うか決定できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses the nearest ancestor’s implementation of &lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt; to create a mirror for that ancestor.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>最も近い先祖のもつ&lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;の実装を使って、その先祖に対するミラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported C Functions in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC関数をSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported C Macros in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたCマクロをSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported C Structs and Unions in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたC構造体と共用体をSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported Lightweight Generics in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされた軽量総称体をSwiftにおいて使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Imported Protocol-Qualified Classes in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>インポートされたプロトコル適格クラスをSwiftにおいて使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Iterators Directly</seg>
      </tuv>
      <tuv lang="ja">
        <seg>イテレータを直に使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Multiple Iterators</seg>
      </tuv>
      <tuv lang="ja">
        <seg>複数のイテレータを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Objective-C Runtime Features in Swift</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cランタイム機能をSwiftで使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a &lt;c0&gt;Slice&lt;/c0&gt; instance with a mutable collection requires that the base collection’s &lt;c1&gt;subscript(_: Index)&lt;/c1&gt; setter does not invalidate indices.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Slice&lt;/c0&gt;インスタンスを可変コレクションで使うことは、基底コレクションのもつ&lt;c1&gt;subscript(_: Index)&lt;/c1&gt;セッターがインデックスを無効にしないことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Partial Range as a Sequence</seg>
      </tuv>
      <tuv lang="ja">
        <seg>部分範囲をシーケンスとして使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a Range as a Collection of Consecutive Values</seg>
      </tuv>
      <tuv lang="ja">
        <seg>範囲を隣接値のコレクションとして使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a String as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value as &lt;c0&gt;rhs&lt;/c0&gt; is the same as performing a left shift using &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;として負の値を使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って左シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value as &lt;c0&gt;rhs&lt;/c0&gt; is the same as performing a right shift with &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>負の値を&lt;c0&gt;rhs&lt;/c0&gt;として使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って右シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value for &lt;c0&gt;rhs&lt;/c0&gt; performs a left shift using &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に負の値を使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って左シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a negative value for &lt;c0&gt;rhs&lt;/c0&gt; performs a right shift using &lt;c1&gt;abs(rhs)&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に負の値を使うことは、&lt;c1&gt;abs(rhs)&lt;/c1&gt;を使って右シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a sequence’s iterator directly gives you access to the same elements in the same order as iterating over that sequence using a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるシーケンスのもつイテレータを直に使うことは、あなたに&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループを使ってそのシーケンスに反復するのと同じ要素に同じ順序でアクセスすることを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a value for &lt;c0&gt;rhs&lt;/c0&gt; that is greater than or equal to the bit width of &lt;c1&gt;lhs&lt;/c1&gt; is an &lt;e2&gt;overshift&lt;/e2&gt;, resulting in zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に&lt;c1&gt;lhs&lt;/c1&gt;のビット幅より大きいか等しい値を使うことは、&lt;e2&gt;オーバーシフト&lt;/e2&gt;、ゼロという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a value for &lt;c0&gt;rhs&lt;/c0&gt; that is greater than or equal to the bit width of &lt;c1&gt;lhs&lt;/c1&gt; is an &lt;e2&gt;overshift&lt;/e2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に&lt;c1&gt;lhs&lt;/c1&gt;のビット幅より大きいか等しい値を使うことは、&lt;e2&gt;オーバーシフト&lt;/e2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using an Integer as a Data Value</seg>
      </tuv>
      <tuv lang="ja">
        <seg>整数をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using an Option Set Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>オプションセット型を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using any other value for &lt;c0&gt;rhs&lt;/c0&gt; performs a left shift on &lt;c1&gt;lhs&lt;/c1&gt; by that amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に何か他の値を使うことは、左シフトを&lt;c1&gt;lhs&lt;/c1&gt;上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using any other value for &lt;c0&gt;rhs&lt;/c0&gt; performs a right shift on &lt;c1&gt;lhs&lt;/c1&gt; by that amount.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;rhs&lt;/c0&gt;に何か他の値を使うことは、右シフトを&lt;c1&gt;lhs&lt;/c1&gt;上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;for&lt;w1&gt;Each&lt;/w1&gt;&lt;/c0&gt; method is distinct from a &lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt; loop in two important ways:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;for&lt;w1&gt;Each&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことは、&lt;c2&gt;for&lt;/c2&gt;-&lt;c3&gt;in&lt;/c3&gt;ループとは２つの重要なやり方においてまったく異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;prefix(through:)&lt;/c0&gt; method is equivalent to using a partial closed range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(through:)&lt;/c0&gt;メソッドを使うことは、部分的な完結範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;prefix(up&lt;w1&gt;To:)&lt;/w1&gt;&lt;/c0&gt; method is equivalent to using a partial half-open range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;prefix(up&lt;w1&gt;To:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことは、部分的な半開範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;return&lt;/c0&gt; statement in the &lt;c1&gt;body&lt;/c1&gt; closure will exit only from the current call to &lt;c2&gt;body&lt;/c2&gt;, not from any outer scope, and won’t skip subsequent calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;return&lt;/c0&gt;文を&lt;c1&gt;body&lt;/c1&gt;クロージャにおいて使うことは、ただ現在の&lt;c2&gt;body&lt;/c2&gt;への呼び出しから抜け出すだけです、全く外側のスコープからではなくて、そして続いて起こる呼び出しを飛ばしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;suffix(from:)&lt;/c0&gt; method is equivalent to using a partial range from the index as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;suffix(from:)&lt;/c0&gt;メソッドを使うことは、インデックスからの部分的範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Nil-Coalescing Operator</seg>
      </tuv>
      <tuv lang="ja">
        <seg>nil合体演算子を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the half-open range operator (&lt;c2&gt;..&lt;&lt;/c2&gt;) to form &lt;c3&gt;Range&lt;/c3&gt; instances is preferred.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>半開範囲演算子（&lt;c2&gt;..&lt;&lt;/c2&gt;）を使って&lt;c3&gt;Range&lt;/c3&gt;インスタンスを形成することが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the raw value of a conforming type streamlines interoperation with Objective-C and legacy APIs and simplifies conformance to other protocols, such as &lt;c6&gt;Equatable&lt;/c6&gt;, &lt;c7&gt;Comparable&lt;/c7&gt;, and &lt;c8&gt;Hashable&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>準拠する型の生の値を使うことは、Objective-CおよびレガシーAPIとの相互運用を能率的にします、そして他のプロトコル、例えば&lt;c6&gt;Equatable&lt;/c6&gt;、&lt;c7&gt;Comparable&lt;/c7&gt;、および&lt;c8&gt;Hashable&lt;/c8&gt;などへの準拠を簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this approach is prone to mistakes for a few reasons, in ways that can lead to bugs and make it harder to reason about your code:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この取り組みを使うことは、2、3の理由から間違いを起こす傾向があります、バグに至りうるそしてあなたのコードについて論じることをより困難にするやり方で：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this initializer is equivalent to initializing a string with an empty string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このイニシャライザを使うことは、ある文字列を空の文字列リテラルで初期化するのと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this method with types that have a noninteger &lt;c9&gt;Stride&lt;/c9&gt; may result in an approximation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このメソッドを非整数&lt;c9&gt;Stride&lt;/c9&gt;を持つ型とともに使うことは、近似値という結果になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このプロパティを直接に使うことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効なインデックスは、各要素の位置、および添え字引数として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>有効なインデックスは、各要素の位置、および添え字として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;Extended&lt;w1&gt;Grapheme&lt;w2&gt;Cluster&lt;w3&gt;Literal&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c5&gt;Character&lt;/c5&gt;, &lt;c6&gt;String&lt;/c6&gt;, and &lt;c7&gt;Static&lt;w8&gt;String&lt;/w8&gt;&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Extended&lt;w1&gt;Grapheme&lt;w2&gt;Cluster&lt;w3&gt;Literal&lt;w4&gt;Type&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対して有効な型は、&lt;c5&gt;Character&lt;/c5&gt;、&lt;c6&gt;String&lt;/c6&gt;、そして&lt;c7&gt;Static&lt;w8&gt;String&lt;/w8&gt;&lt;/c7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;Float&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c3&gt;Float&lt;/c3&gt;, &lt;c4&gt;Double&lt;/c4&gt;, and &lt;c5&gt;Float80&lt;/c5&gt; where available.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Float&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対して有効な型は、&lt;c3&gt;Float&lt;/c3&gt;、&lt;c4&gt;Double&lt;/c4&gt;、そして利用可能なところでは&lt;c5&gt;Float80&lt;/c5&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c3&gt;String&lt;/c3&gt; and &lt;c4&gt;Static&lt;w5&gt;String&lt;/w5&gt;&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;String&lt;w1&gt;Literal&lt;w2&gt;Type&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対する有効な型は、&lt;c3&gt;String&lt;/c3&gt;と&lt;c4&gt;Static&lt;w5&gt;String&lt;/w5&gt;&lt;/c4&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid types for &lt;c0&gt;Unicode&lt;w1&gt;Scalar&lt;w2&gt;Literal&lt;w3&gt;Type&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; are &lt;c4&gt;Unicode&lt;w5&gt;.Scalar&lt;/w5&gt;&lt;/c4&gt;, &lt;c6&gt;Character&lt;/c6&gt;, &lt;c7&gt;String&lt;/c7&gt;, and &lt;c8&gt;Static&lt;w9&gt;String&lt;/w9&gt;&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Unicode&lt;w1&gt;Scalar&lt;w2&gt;Literal&lt;w3&gt;Type&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;に対する有効な型は、&lt;c4&gt;Unicode&lt;w5&gt;.Scalar&lt;/w5&gt;&lt;/c4&gt;、&lt;c6&gt;Character&lt;/c6&gt;、&lt;c7&gt;String&lt;/c7&gt;、そして&lt;c8&gt;Static&lt;w9&gt;String&lt;/w9&gt;&lt;/c8&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Value Literals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Values and Collections</seg>
      </tuv>
      <tuv lang="ja">
        <seg>値とコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Values in interpolations are converted to strings, and then passed to that initializer just like any other string literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>補間の中の値は文字列に変換されます、そしてそれからそのイニシャライザに渡されます、ちょうど何か他の文字列リテラルのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Variation selectors allow rendering engines that support them to choose different glyphs to display for a particular code point.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異字体セレクタそれらは、レンダリングエンジンがそれらをサポートすることで種々の字体を選んで特定のコード点に対して表示することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Vend results as part of an API when you can’t return errors synchronously.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>結果をAPIの一部として提供します、あなたがエラーを同期的に返すことができない場合に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Void Type</seg>
      </tuv>
      <tuv lang="ja">
        <seg>void型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>WARNING: this initializer is not memory-safe!</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告：このイニシャライザはメモリ安全ではありません！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Warning</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Warning: All buffer elements must be initialized before calling this.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>警告：全てのバッファ要素はこれを呼び出す前に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What’s more, when implemented using specific criteria, adoption of this protocol requires no extra work on your part.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>おまけに、特定の基準を使って実装される時、このプロトコルの採用はあなたの方での余分な作業を必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;Lazy&lt;w1&gt;Prefix&lt;w2&gt;While&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; wraps a collection type, the performance of accessing &lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt; depends on how many elements satisfy the predicate at the start of the collection, and might not offer the usual performance given by the &lt;c6&gt;Collection&lt;/c6&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Lazy&lt;w1&gt;Prefix&lt;w2&gt;While&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;がコレクション型をラップする場合、&lt;c4&gt;end&lt;w5&gt;Index&lt;/w5&gt;&lt;/c4&gt;にアクセスする性能はどのくらい多くの要素がこの述部をコレクションの始まりで満たすかに依存します、そして&lt;c6&gt;Collection&lt;/c6&gt;プロトコルによって与えられる通常の性能を呈さないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;letters&lt;w1&gt;.reduce(into:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;letters&lt;w1&gt;.reduce(into:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;numbers&lt;w1&gt;.reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;numbers&lt;w1&gt;.reduce(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c1&gt;pointee&lt;/c1&gt; is used as the left side of an assignment, the instance must be initialized or this pointer’s &lt;c2&gt;Pointee&lt;/c2&gt; type must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c1&gt;pointee&lt;/c1&gt;が代入の左側として使われる場合、インスタンスは初期化されなければなりません、またポインタのもつ&lt;c2&gt;Pointee&lt;/c2&gt;型は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c4&gt;id&lt;/c4&gt; values are imported into Swift as &lt;c5&gt;Any&lt;/c5&gt;, the runtime automatically handles bridging back to either class references or value types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c4&gt;id&lt;/c4&gt;値がスウィフトへ&lt;c5&gt;Any&lt;/c5&gt;としてインポートされる時、ランタイムはクラス参照または値型のどちらかへの逆のブリッジを自動的に取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Swift code imports Objective-C APIs, the importer replaces Foundation reference types with their corresponding value types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>SwiftコードがObjective-C APIをインポートする場合、インポータはFoundation参照型をそれらの対応する値型で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Swift imports APIs that have not been annotated, the compiler cannot automatically memory-manage the returned Core Foundation objects.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>注釈をつけられなかったAPIをSwiftがインポートする場合、コンパイラは返されたCore Foundationオブジェクトを自動的にメモリ管理できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Swift imports Core Foundation types, the compiler remaps the names of these types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>スウィフトがCore Foundation型をインポートするとき、コンパイラはこれらの型の名前をリマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When U+200C ZERO WIDTH NON-JOINER is inserted between two characters, it directs the rendering engine to render them separately/disconnected when it might otherwise render them as a ligature.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>U+200C ZERO WIDTH NON-JOINER（ゼロ幅非接合子）が２つの文字の間に挿入される時、それはレンダリングエンジンにそれらを個別に／分離して描写するよう指図します、それがそうでなければそれらを合字として描出するかもしれない時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When U+200D ZERO WIDTH JOINER is inserted between two characters, it directs the rendering engine to render them as a connected glyph when it would otherwise render them independently.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>U+200D ZERO WIDTH JOINER（ゼロ幅接合子）が２つの文字の間に挿入される時、それはレンダリングエンジンにそれらをある結合される字体として描写するように指図します、それがそうでなければそれらを独立して描出するであろう時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a literal expression is written with no type information, Swift uses these type aliases to determine what type to use for the expression.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>リテラル表現が型情報なしで記述される時、Swiftはこれらの型エイリアスを使ってどの型をその式に使うか決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a partial range uses integers as its lower and upper bounds, or any other type that conforms to the &lt;c0&gt;Strideable&lt;/c0&gt; protocol with an integer stride, you can use that range in a &lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt; loop or with any sequence method that doesn’t require that the sequence is finite.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲がそれの下側および上側の境界として整数を使う、または整数歩幅を使う&lt;c0&gt;Strideable&lt;/c0&gt;プロトコルに準拠する何らかの他の型を使う場合、あなたはその範囲を&lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt;ループにおいて、またはシーケンスが有限であることを必要としない何らかのシーケンスのメソッドで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a range uses integers as its lower and upper bounds, or any other type that conforms to the &lt;c0&gt;Strideable&lt;/c0&gt; protocol with an integer stride, you can use that range in a &lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt; loop or with any sequence or collection method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある範囲がそれの下側および上側の境界として整数を使う、または整数歩幅を使う&lt;c0&gt;Strideable&lt;/c0&gt;プロトコルに準拠する何らかの他の型を使う場合、あなたはその範囲を&lt;c1&gt;for&lt;/c1&gt;-&lt;c2&gt;in&lt;/c2&gt;ループにおいて、または何らかのシーケンスまたはコレクションのメソッドで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある文字列の隣接ストレージがいっぱいになるとき、新しいストレージが割り当てられる必要があり、データは新しいストレージに移動される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When accessing a computed property corresponding to a bit field, Swift automatically converts the value to and from compatible Swift types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるビットフィールドに対応している計算プロパティにアクセスするとき、スウィフトはその値を自動的に互換性のあるスウィフト型へと、またはそれから、変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When allocating memory for multiple instances of &lt;c0&gt;T&lt;/c0&gt; using an unsafe pointer, use a multiple of the type’s stride instead of its size.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;の複数のインスタンスに対して安全でないポインタを使ってメモリをアロケートする場合、それの大きさではなく、その型の持つストライドの倍数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an existing element is inserted, the &lt;c4&gt;class&lt;w5&gt;Days&lt;/w5&gt;&lt;/c4&gt; set does not change.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>既存の要素が挿入される時、&lt;c4&gt;class&lt;w5&gt;Days&lt;/w5&gt;&lt;/c4&gt;集合は変化しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When building an app target, you can provide a custom name for the product module by changing the Product Module Name build setting.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリターゲットをビルドする場合、あなたはあつらえの名前を製品モジュールに提供することがProduct Module Name build設定を変更することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter, you can pass an instance of that specific pointer type or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドを&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡すか、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドを&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドを&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;パラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function or method with an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数やメソッドを&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function that takes a C function pointer argument, you can pass a top-level Swift function, a closure literal, a closure declared with the &lt;c0&gt;@convention(c)&lt;/c0&gt; attribute, or &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数ポインタ引数を取る関数を呼び出す場合、あなたはトップレベルスウィフト関数、クロージャリテラル、&lt;c0&gt;@convention(c)&lt;/c0&gt;属性で宣言されるクロージャ、または&lt;c1&gt;nil&lt;/c1&gt;を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function that takes a pointer as a parameter, you can use implicit casting to pass a compatible pointer type or implicit bridging to pass a pointer to a variable or the contents of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ポインタをパラメータとして取る関数を呼び出す場合、あなたは、暗黙的なキャストを使って互換性のあるポインタ型を渡すか、暗黙的なブリッジを使ってポインタを変数または配列の内容に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling a function with a &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; parameter, you can pass a Swift dictionary literal without causing a &lt;c3&gt;Dictionary&lt;/c3&gt; to be created.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数を&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;パラメータで呼び出す場合、あなたはSwift辞書リテラルを、ある&lt;c3&gt;Dictionary&lt;/c3&gt;が作成されることを生じさせないで渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling the &lt;c0&gt;initialize(from:)&lt;/c0&gt; method on a buffer &lt;c1&gt;b&lt;/c1&gt;, the memory referenced by &lt;c2&gt;b&lt;/c2&gt; must be uninitialized or the &lt;c3&gt;Element&lt;/c3&gt; type must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;initialize(from:)&lt;/c0&gt;メソッドをバッファ&lt;c1&gt;b&lt;/c1&gt;上で呼び出す場合、&lt;c2&gt;b&lt;/c2&gt;によって参照されるメモリは未初期化でなければなりません、または&lt;c3&gt;Element&lt;/c3&gt;型が自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When calling the &lt;c0&gt;initialize&lt;w1&gt;Memory(as:&lt;w2&gt;from:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method on a buffer &lt;c3&gt;b&lt;/c3&gt;, the memory referenced by &lt;c4&gt;b&lt;/c4&gt; must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing &lt;c5&gt;S&lt;w6&gt;.Element&lt;/w6&gt;&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;initialize&lt;w1&gt;Memory(as:&lt;w2&gt;from:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドをバッファ&lt;c3&gt;b&lt;/c3&gt;上で呼び出す場合、&lt;c4&gt;b&lt;/c4&gt;によって参照されるメモリは未初期化であるか自明型に初期化される必要があります、そして&lt;c5&gt;S&lt;w6&gt;.Element&lt;/w6&gt;&lt;/c5&gt;にアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When comparing two values with this method, &lt;c1&gt;-0&lt;/c1&gt; is equal to &lt;c2&gt;+0&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>２つの値をこのメソッドで比較する場合、&lt;c1&gt;-0&lt;/c1&gt;は&lt;c2&gt;+0&lt;/c2&gt;と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When creating a custom collection type, add the minimal requirements of the &lt;c4&gt;Collection&lt;/c4&gt; protocol: starting and ending indices and a subscript for accessing elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あつらえのコレクション型を作成する場合、&lt;c4&gt;Collection&lt;/c4&gt;プロトコルの最小限の要件：始まりと終わりのインデックスおよび要素にアクセスするための添え字、を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When creating an option set, include a &lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt; property in your type declaration.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオプションセットを作成する場合は、&lt;c0&gt;raw&lt;w1&gt;Value&lt;/w1&gt;&lt;/c0&gt;プロパティをあなたの型宣言に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When creating your own option set, implement this initializer with a fixed-width integer, like &lt;c0&gt;Int&lt;/c0&gt;, as the &lt;c1&gt;Raw&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のオプションセットを作成する時、このイニシャライザを固定長整数、&lt;c0&gt;Int&lt;/c0&gt;などを&lt;c1&gt;Raw&lt;w2&gt;Value&lt;/w2&gt;&lt;/c1&gt;型として使って実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declarations in an Objective-C header file refer to a Swift class or protocol that comes from the same target, importing the generated header creates a cyclical reference.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Objective-Cヘッダファイルの中の宣言がその同じターゲットからやってくるSwiftクラスまたはプロトコルを参照する場合、生成ヘッダのインポートは循環参照を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declaring a function or method, you don’t need to specify a return type if no value will be returned.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>関数またはメソッドを宣言するとき、値が返されることがないならばあなたは戻り型を指定する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When defining your own custom enumeration, you give it a raw type by specifying the raw type as the first item in the enumeration’s type inheritance list.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの列挙を定義している場合、あなたはそれに生の型を与えることを、その生の型を列挙の型継承リストの最初の項目として指定することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When implementing a custom type that conforms to the &lt;c0&gt;Set&lt;w1&gt;Algebra&lt;/w1&gt;&lt;/c0&gt; protocol, you must implement the required initializers and methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Set&lt;w1&gt;Algebra&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠するあつらえの型を実装する場合、あなたは必須イニシャライザとメソッドを実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When implementing lazy operations, wrapping &lt;c0&gt;elements&lt;/c0&gt; instead of &lt;c1&gt;self&lt;/c1&gt; can prevent result types from growing an extra &lt;c2&gt;Lazy&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/c2&gt; layer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>遅延に演算を実装するとき、&lt;c0&gt;elements&lt;/c0&gt;を&lt;c1&gt;self&lt;/c1&gt;の代わりにラップすることは、結果の型を余分の&lt;c2&gt;Lazy&lt;w3&gt;Sequence&lt;/w3&gt;&lt;/c2&gt;レイヤが増大することを防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When imported into Swift, the macros in the above example are equivalent to these constant declarations:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Swiftへとインポートされる場合、上の例でのマクロは、これら定数宣言に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When importing C function parameters, however, Swift maps pointer parameters to standard library pointer types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>C関数パラメータをインポートする場合、しかしながら、Swiftはポインタパラメータを標準ライブラリのポインタ型へとマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When importing the Foundation framework, the Swift overlay provides value types for many bridged reference types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundationフレームワークをインポートする場合、Swiftオーバーレイは値型を多くのブリッジされる参照型に対して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When importing these types, Swift moves them to be nested types of their related types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それらの型をインポートするとき、スウィフトはそれらを移動して、それらの関連型の入れ子にされた型にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When providing new APIs that use randomness, provide a version that accepts a generator conforming to the &lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; protocol as well as a version that uses the default system generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>無作為さを使う新しいAPIを提供する場合、&lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する生成子を受け取るバージョンを、それだけでなく省略時のシステム生成子を使うバージョンも提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When reading from memory as raw bytes when that memory is bound to a type, you must ensure that you satisfy any alignment requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリから読み出しをそのメモリがある型に束縛される時に生のバイトとして行う場合、あなたがあらゆるアライメント要件を満たすことを確実にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When reading from or writing to memory as raw bytes when that memory is bound to a type, you must ensure that you satisfy any alignment requirements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリから読み出しや書き込みをそのメモリがある型に束縛される時に生のバイトとして行う場合、あなたがあらゆるアライメント要件を満たすことを確実にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When reading from the &lt;c0&gt;pointee&lt;/c0&gt; property, the instance referenced by this pointer must already be initialized.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;pointee&lt;/c0&gt;プロパティから読み出している時、このポインタによって参照されるインスタンスは既に初期化されていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the &lt;c0&gt;force&lt;w1&gt;ASCII&lt;/w1&gt;&lt;/c0&gt; parameter is &lt;c2&gt;true&lt;/c2&gt;, a &lt;c3&gt;Unicode&lt;w4&gt;.Scalar&lt;/w4&gt;&lt;/c3&gt; instance with a value greater than 127 is represented using an escaped numeric value; otherwise, non-ASCII characters are represented using their typical string value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;force&lt;w1&gt;ASCII&lt;/w1&gt;&lt;/c0&gt;パラメータが&lt;c2&gt;true&lt;/c2&gt;である場合、127より大きい値をもつ&lt;c3&gt;Unicode&lt;w4&gt;.Scalar&lt;/w4&gt;&lt;/c3&gt;インスタンスはエスケープされた数的な値を使って表されます、そうでなければ、非ASCIIはそれらの典型的な文字列値を使って表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the &lt;c0&gt;label&lt;/c0&gt; component in not &lt;c1&gt;nil&lt;/c1&gt;, it may represent the name of a stored property or an active &lt;c2&gt;enum&lt;/c2&gt; case.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;label&lt;/c0&gt;コンポーネントが&lt;c1&gt;nil&lt;/c1&gt;でない場合、それは格納プロパティの名前またはアクティブな&lt;c2&gt;enum&lt;/c2&gt;ケース節の名前を表すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the additive inverse of a value is unrepresentable in a conforming type, the operation should either trap or return an exceptional value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ある値の加法の逆元が準拠する型において表現可能でない場合、演算は例外値をトラップまたは返すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the app is first opened, the user is unknown, so the state of the app could be called &lt;e0&gt;unregistered&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アプリが最初に開かれた時、ユーザは誰か分かりません、それでアプリの状態は&lt;e0&gt;無登録&lt;/e0&gt;と呼ぶことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the bit width of &lt;c0&gt;T&lt;/c0&gt; (the type of &lt;c1&gt;source&lt;/c1&gt;) is equal to or greater than this type’s bit width, the result is the truncated least-significant bits of &lt;c2&gt;source&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;（&lt;c1&gt;source&lt;/c1&gt;の型）のビット幅がこのかたのビット幅と等しいかより大きいならば、結果は&lt;c2&gt;source&lt;/c2&gt;の先端を切った最下位ビットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the bit width of &lt;c0&gt;T&lt;/c0&gt; is less than this type’s bit width, the result is &lt;e1&gt;sign-extended&lt;/e1&gt; to fill the remaining bits.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;T&lt;/c0&gt;のビット幅がこの型のビット幅より小さいならば、結果は残りのビットを満たすように&lt;e1&gt;符号拡張&lt;/e1&gt;されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the collection passed to &lt;c3&gt;relative(to:)&lt;/c3&gt; starts with a different index, that index is used as the lower bound instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c3&gt;relative(to:)&lt;/c3&gt;に渡されるコレクションが異なるインデックスで始まる場合、そのインデックスは代わりに下側の境界として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the publisher exhausts the elements in the sequence, the next request causes the publisher to finish.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パブリッシャーがシーケンスの中の要素を使い尽くす場合、次の要請はパブリッシャーを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the return value is &lt;c5&gt;false&lt;/c5&gt;, the value of &lt;c6&gt;i&lt;/c6&gt; is equal to &lt;c7&gt;limit&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>戻り値が&lt;c5&gt;false&lt;/c5&gt;の場合、&lt;c6&gt;i&lt;/c6&gt;の値は&lt;c7&gt;limit&lt;/c7&gt;に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence has been exhausted, the &lt;c3&gt;next()&lt;/c3&gt; method returns &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>そのシーケンスが使い尽くされたならば、&lt;c3&gt;next()&lt;/c3&gt;メソッドは&lt;c4&gt;nil&lt;/c4&gt;を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence is exhausted, the accumulating value is returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが使い尽くされる時、蓄積値が呼び出し側へ返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the sequence is exhausted, the last value returned from the closure is returned to the caller.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>シーケンスが使い尽くされる時、クロージャから返される最後の値が呼び出し側へ帰されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the set’s &lt;c2&gt;Element&lt;/c2&gt; type is neither a class nor an &lt;c3&gt;@objc&lt;/c3&gt; protocol, any required bridging of elements occurs at the first access of each element, so the first operation that uses the contents of the set (for example, a membership test) can take O(&lt;e4&gt;n&lt;/e4&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>集合の持つ&lt;c2&gt;Element&lt;/c2&gt;型がクラスでも&lt;c3&gt;@objc&lt;/c3&gt;プロトコルでもない場合、要素のブリッジに必要なあらゆることが要素それぞれの最初のアクセスで起こります、それで集合の内容を使う最初の演算（例えば、帰属テスト）は、O(&lt;e4&gt;n&lt;/e4&gt;)をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the subscript is used as the left side of an assignment, the memory at &lt;c2&gt;p + i&lt;/c2&gt; must be initialized or the pointer’s &lt;c3&gt;Pointee&lt;/c3&gt; type must be a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>添え字が代入の左側で使われる場合、&lt;c2&gt;p + i&lt;/c2&gt;でのメモリは初期化されなければなりません、またポインタのもつ&lt;c3&gt;Pointee&lt;/c3&gt;型は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When these invalid strings are parsed by the &lt;c2&gt;Double&lt;/c2&gt; failable initializer, the example uses the nil-coalescing operator (&lt;c3&gt;??&lt;/c3&gt;) to provide NaN as a fallback value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>それら無効な文字列が&lt;c2&gt;Double&lt;/c2&gt;の失敗できるイニシャライザによって解析される場合のため、この例はnil合体演算子（&lt;c3&gt;??&lt;/c3&gt;）を使ってNaNをフォールバック（頼みの綱の、予備の）値として提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When used to access the elements of the &lt;c0&gt;flag&lt;/c0&gt; string itself, however, the &lt;c1&gt;second&lt;w2&gt;Code&lt;w3&gt;Unit&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; index does not correspond to the position of a specific character.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;flag&lt;/c0&gt;文字列それ自身の要素へのアクセスに使われる場合は、しかしながら、&lt;c1&gt;second&lt;w2&gt;Code&lt;w3&gt;Unit&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;インデックスは特定の文字の位置に該当しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using &lt;c0&gt;offset(of:)&lt;/c0&gt; with a type imported from a library, don’t assume that future versions of the library will have the same behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;offset(of:)&lt;/c0&gt;をあるライブラリからインポートされる型で使う場合、そのライブラリの将来のバージョンが同じ挙動を持つと決めてかからないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When working with a mirror that reflects a bidirectional or random access collection, you may find it useful to “upgrade” instances of this type to &lt;c0&gt;Any&lt;w1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; or &lt;c3&gt;Any&lt;w4&gt;Random&lt;w5&gt;Access&lt;w6&gt;Collection&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>双方向性のまたはランダムなアクセスのコレクションをリフレクとするミラーを扱う場合、あなたはこの型のインスタンスを&lt;c0&gt;Any&lt;w1&gt;Bidirectional&lt;w2&gt;Collection&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;または&lt;c3&gt;Any&lt;w4&gt;Random&lt;w5&gt;Access&lt;w6&gt;Collection&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;に「アップグレード」することが役立つのを発見するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When writing a function, method, or other API that might fail, you use the &lt;c0&gt;throws&lt;/c0&gt; keyword on the declaration to indicate that the API call can throw an error.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>失敗するかもしれない関数、メソッド、または他のAPIを書いている時、あなたは&lt;c0&gt;throws&lt;/c0&gt;キーワードをその宣言上で使うことで、そのAPI呼び出しがエラーをスローできることを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you access memory through an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance, the &lt;c3&gt;Pointee&lt;/c3&gt; type must be consistent with the bound type of the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリに&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを通してアクセスする時、&lt;c3&gt;Pointee&lt;/c3&gt;型はそのメモリの束縛される型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you access memory through an &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; instance, the &lt;c2&gt;Pointee&lt;/c2&gt; type must be consistent with the bound type of the memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリに&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;インスタンスを通してアクセスする時、&lt;c2&gt;Pointee&lt;/c2&gt; 型はそのメモリの束縛される型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add to or subtract from a raw pointer, the result is a new raw pointer offset by that number of bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが生のポインタに加算または減算する時、結果はそのバイト数をオフセットした（補った、埋め合わせた）新しい生のポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add to or subtract from an &lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; instance, the result is a new pointer of the same type, offset by that number of instances of the &lt;c4&gt;Pointee&lt;/c4&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;インスタンスに加えたりそれから引いたりする場合、結果は同じ型の新しいポインタです、&lt;c4&gt;Pointee&lt;/c4&gt;型のインスタンスの数によってオフセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you add to or subtract from an &lt;c1&gt;Unsafe&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/c1&gt; instance, the result is a new pointer of the same type, offset by that number of instances of the &lt;c3&gt;Pointee&lt;/c3&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c1&gt;Unsafe&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/c1&gt;インスタンスに加えたりそれから引いたりする場合、結果は同じ型の新しいポインタです、&lt;c3&gt;Pointee&lt;/c3&gt;型のインスタンスの数によってオフセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you allocate memory, always remember to deallocate once you’re finished.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがメモリをアロケートする場合、あなたがやり終えるやいなやデアロケートするのを常に忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you are operating on many values, this behavior is valuable because operations on NaN simply forward the value and don’t cause runtime errors.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが沢山の値に演算を行っている時、この挙動は有益です、なぜならNaNに関する演算は単にその値を次に伝えて実行時エラーを起こさないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a C function using a &lt;c3&gt;String&lt;/c3&gt;, Swift automatically creates a buffer of UTF-8 code units and passes a pointer to that buffer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがC関数を&lt;c3&gt;String&lt;/c3&gt;を使って呼び出すとき、Swiftは自動的にUTF-8コード単位のバッファを作成してポインタをそのバッファへ渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an &lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;Type&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Autoreleasing&lt;w1&gt;Unsafe&lt;w2&gt;Mutable&lt;w3&gt;Pointer&lt;Type&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Type&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; argument, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;Type&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;引数をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; argument, you can pass the same operands as &lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;Type&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, but for any type as &lt;c7&gt;Type&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;引数を取ると宣言される関数を呼び出す場合、あなたは&lt;c4&gt;Unsafe&lt;w5&gt;Mutable&lt;w6&gt;Pointer&lt;Type&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;と同じ演算数を、しかし&lt;c7&gt;Type&lt;/c7&gt;であるあらゆる型に対して、渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that is declared as taking an &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;Type&gt;&lt;/w1&gt;&lt;/c0&gt; argument, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;Type&gt;&lt;/w1&gt;&lt;/c0&gt;引数をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call a function that takes an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; argument, you can pass the same operands as &lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;Type&gt;&lt;/w4&gt;&lt;/c3&gt;, but with any type as &lt;c5&gt;Type&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;引数を取る関数を呼び出す場合、あなたは&lt;c3&gt;Unsafe&lt;w4&gt;Pointer&lt;Type&gt;&lt;/w4&gt;&lt;/c3&gt;と同じ演算数を、しかし&lt;c5&gt;Type&lt;/c5&gt;であるあらゆる型で、渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you call methods that use random data, such as creating new random values or shuffling a collection, you can pass a &lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type to be used as the source for randomness.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが無作為データを使うメソッドを呼び出す場合、例えば新しい無作為値を作成するまたはコレクションをシャッフルするなど、あなたは&lt;c0&gt;Random&lt;w1&gt;Number&lt;w2&gt;Generator&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型を渡して、無作為さの出典として使われるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you create a slice of a string, a &lt;c0&gt;Substring&lt;/c0&gt; instance is the result.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列のスライスを作成している場合、&lt;c0&gt;Substring&lt;/c0&gt;インスタンスが結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you create an index into a reversed collection using &lt;c0&gt;base&lt;/c0&gt;, an index from the underlying collection, the resulting index is the position of the element &lt;e1&gt;before&lt;/e1&gt; the element referenced by &lt;c2&gt;base&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが逆にされたコレクションへのインデックスを、基礎をなすコレクションからのインデックス&lt;c0&gt;base&lt;/c0&gt;を使って作成する時、結果のインデックスは&lt;c2&gt;base&lt;/c2&gt;によって参照される要素の&lt;e1&gt;前&lt;/e1&gt;の要素の位置です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you define an enumeration without associated values, it gains &lt;c0&gt;Hashable&lt;/c0&gt; conformance automatically, and you can add &lt;c1&gt;Hashable&lt;/c1&gt; conformance to your other custom types by implementing the &lt;c2&gt;hash(into:)&lt;/c2&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが列挙を関連値なしで定義するとき、それは&lt;c0&gt;Hashable&lt;/c0&gt;準拠を自動的に手に入れます、そしてあなたは&lt;c1&gt;Hashable&lt;/c1&gt;準拠をあなたの他のあつらえの型に加えることが、&lt;c2&gt;hash(into:)&lt;/c2&gt;メソッドを実装することによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you don’t pass a generator, the default &lt;c3&gt;System&lt;w4&gt;Random&lt;w5&gt;Number&lt;w6&gt;Generator&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; type is used.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが生成子を渡さない場合、省略時の&lt;c3&gt;System&lt;w4&gt;Random&lt;w5&gt;Number&lt;w6&gt;Generator&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;型が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるコレクションを列挙するとき、各ペアの整数部分は列挙のためのカウンタです、しかし必ずしもペアにされた値のインデックスではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you generate random values, shuffle a collection, or perform another operation that depends on random data, this type is the generator used by default.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが無作為値を生成する、コレクションをシャッフルする、または無作為データに依存する他の操作を実行する場合、この型は省略時に使われる生成子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you have a type instead of an instance, use the &lt;c0&gt;Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt; static property instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがインスタンスではなくある型を持つ場合、代わりに&lt;c0&gt;Memory&lt;w1&gt;Layout&lt;T&gt;.size&lt;/w1&gt;&lt;/c0&gt;静的プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you have a type instead of an instance, use the &lt;c0&gt;Memory&lt;w1&gt;Layout&lt;T&gt;.stride&lt;/w1&gt;&lt;/c0&gt; static property instead.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがインスタンスではなくある型を持つ場合、代わりに&lt;c0&gt;Memory&lt;w1&gt;Layout&lt;T&gt;.stride&lt;/w1&gt;&lt;/c0&gt;静的プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import an Objective-C API into Swift, you can adopt Swift-only types such as tuples.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがObjective-C APIをSwiftへとインポートする場合、あなたはSwift専用の型、例えばタプルなどを採用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import it, here's the Swift interface:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそれをインポートする場合、ここにSwiftインターフェイスがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import the Color structure, the Swift version is equivalent to the following:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがColor構造体をインポートする場合、Swift版は以下に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import the Core Foundation framework, its types are imported as Swift classes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがCore Foundationフレームワークをインポートする場合、それの型は、Swiftクラスとしてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you import these declarations into Swift, the &lt;c0&gt;NSCopying&lt;/c0&gt; protocol qualification of the &lt;c1&gt;List&lt;/c1&gt; type and the &lt;c2&gt;NSValue&lt;/c2&gt; class qualification of the &lt;c3&gt;list&lt;w4&gt;Of&lt;w5&gt;Values&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; method are preserved.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがそれら宣言をSwiftへとインポートする場合、&lt;c0&gt;NSCopying&lt;/c0&gt;プロトコル適格が&lt;c1&gt;List&lt;/c1&gt;型に対して、そして&lt;c2&gt;NSValue&lt;/c2&gt;適格が&lt;c3&gt;list&lt;w4&gt;Of&lt;w5&gt;Values&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;メソッドに対して、保存されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need a range that includes the last element of a collection, use the half-open range operator (&lt;c0&gt;..&lt;&lt;/c0&gt;) with &lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがコレクションの最後の要素を含むある範囲を必要とする時は、半開範囲演算子（&lt;c0&gt;..&lt;&lt;/c0&gt;）を&lt;c1&gt;end&lt;w2&gt;Index&lt;/w2&gt;&lt;/c1&gt;とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to check whether your collection is empty, use the &lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt; property instead of checking that the &lt;c2&gt;count&lt;/c2&gt; property is equal to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのコレクションが空かどうか確認する必要がある場合、&lt;c0&gt;is&lt;w1&gt;Empty&lt;/w1&gt;&lt;/c0&gt;プロパティを使ってください、&lt;c2&gt;count&lt;/c2&gt;プロパティがゼロと等しいのを調べるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to create an instance of an option set, assign one of the type’s static members to your variable or constant.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがあるオプションセットのインスタンスを作成する必要がある場合は、その型のもつ静的メンバの１つをあなたの変数または定数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to indicate that a value is missing, you use the value &lt;c1&gt;nil&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはその値が見つからないことを指し示す必要がある場合、値&lt;c1&gt;nil&lt;/c1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to know the length of a string, you must first consider what you’ll use the length for.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある文字列の長さを知る必要がある場合、あなたが最初に考えなければならないのは、あなたが使う長さは何に対するものかということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to permanently rebind memory to a different type, first obtain a raw pointer to the memory and then call the &lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;capacity:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method on the raw pointer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが永続的にメモリを異なる型へ再束縛する必要があるならば、まずメモリに対する生のポインタを取得して、それから&lt;c0&gt;bind&lt;w1&gt;Memory(to:&lt;w2&gt;capacity:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを生のポインタ上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you need to store a substring or pass it to a function that requires a &lt;c0&gt;String&lt;/c0&gt; instance, you can convert it to a &lt;c1&gt;String&lt;/c1&gt; by using the &lt;c2&gt;String(_:)&lt;/c2&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが下位文字列を格納するまたは&lt;c0&gt;String&lt;/c0&gt;インスタンスを要求する関数にそれを渡す必要がある場合、あなたはそれを&lt;c1&gt;String&lt;/c1&gt;へと&lt;c2&gt;String(_:)&lt;/c2&gt;イニシャライザを使って変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you only need to temporarily access a pointer’s memory as a different type, use the &lt;c0&gt;with&lt;w1&gt;Memory&lt;w2&gt;Rebound(to:&lt;w3&gt;capacity:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがポインタのもつメモリに異なる型として一時的にアクセスする必要があるだけならば、&lt;c0&gt;with&lt;w1&gt;Memory&lt;w2&gt;Rebound(to:&lt;w3&gt;capacity:)&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you pass &lt;c0&gt;true&lt;/c0&gt; as &lt;c1&gt;is&lt;w2&gt;Repairing&lt;/w2&gt;&lt;/c1&gt;, this method replaces ill-formed sequences with the Unicode replacement character (&lt;c3&gt;"\u{FFFD}"&lt;/c3&gt;); otherwise, an ill-formed sequence causes this method to stop decoding and return &lt;c4&gt;nil&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;true&lt;/c0&gt;を&lt;c1&gt;is&lt;w2&gt;Repairing&lt;/w2&gt;&lt;/c1&gt;として渡すとき、このメソッドは誤形式シーケンスをユニコード代替文字（&lt;c3&gt;"\u{FFFD}"&lt;/c3&gt;）で置き換えます；そうでなければ、ある誤形式シーケンスはこのメソッドがエンコードを停止して&lt;c4&gt;nil&lt;/c4&gt;を返すことを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you pass a Swift instance to an Objective-C API, it's bridged as an &lt;c3&gt;id&lt;/c3&gt; parameter so that it's usable in the API as an Objective-C object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがSwiftインスタンスをあるObjective-C APIに渡す場合、それは&lt;c3&gt;id&lt;/c3&gt;パラメータとしてブリッジされます、それでそれはそのAPIにおいてObjective-Cオブジェクトとして利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you pass a closure to an API, consider &lt;e0&gt;when&lt;/e0&gt; that closure will be called relative to the other code in your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがクロージャをAPIに渡す場合、クロージャが呼び出されるのはあなたのアプリの他のコードと比較して&lt;e0&gt;いつか&lt;/e0&gt;を考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you provide just those methods, the standard library provides default implementations for all other arithmetic methods and operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが単にそれらのメソッドだけを提供する場合、標準ライブラリが省略時の実装をすべての他の算術演算メソッドと演算子に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you receive an unmanaged object from an unannotated API, immediately convert it to a memory-managed object before you work with it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが注釈をつけられないAPIから管理されないオブジェクトを受け取るとき、あなたがそれを扱う前に、直ちにそれをメモリ管理されたオブジェクトに変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you update your app's state, there's a single variable, &lt;c5&gt;state&lt;/c5&gt;, to modify, no matter what the transition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたのアプリの持つ状態をあなたが更新する場合、修正するただ１つの変数、&lt;c5&gt;state&lt;/c5&gt;があるだけです、推移が何であろうと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use the &lt;c2&gt;lazy&lt;/c2&gt; property, you give the standard library explicit permission to store the closure and the sequence in the result, and defer computation until it is needed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c2&gt;lazy&lt;/c2&gt;プロパティを使う場合、あなたは標準ライブラリに明示的な権限を与えて、クロージャとシーケンスを結果に格納します、そして計算をそれが必要とされるまで延期します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use this option, a subclass’s mirror generates default mirrors even for ancestor classes that conform to the &lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがこのオプションを使う場合、下位クラスの持つミラーは省略時のミラーを&lt;c0&gt;Custom&lt;w1&gt;Reflectable&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する先祖クラスにさえも生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you use this type, you become partially responsible for keeping the object alive.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがこの型を使う場合、あなたはオブジェクト存続を保っていることに対して部分的に責任を負うようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you want to sort a collection of elements that don’t conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol, pass a closure to this method that returns &lt;c1&gt;true&lt;/c1&gt; when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠しない要素からなるコレクションをソートしたい場合、最初の要素が２番目の前に並べられるべき場合は&lt;c1&gt;true&lt;/c1&gt;を返すクロージャをこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you want to sort a sequence of elements that don’t conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol, pass a predicate to this method that returns &lt;c1&gt;true&lt;/c1&gt; when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠しない要素からなるシーケンスをソートしたい場合、最初の要素が２番目の前に並べられるべき時は&lt;c1&gt;true&lt;/c1&gt;を返す述部をこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you work with objects of type &lt;c0&gt;Any&lt;/c0&gt; where you know the underlying type, it's often useful to downcast those objects to the underlying type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが基盤型を知っているところの型&lt;c0&gt;Any&lt;/c0&gt;のオブジェクトを扱う場合、しばしば役立つのはそれらオブジェクトを基盤型へとダウンキャストすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you're building an app target, you can import your Swift code into any Objective-C &lt;c0&gt;.m&lt;/c0&gt; file within that same target using this syntax and substituting the appropriate name:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがアプリターゲットをビルドしている場合、あなたはあなたのSwiftコードをインポートすることが、あらゆるObjective-C &lt;c0&gt;.m&lt;/c0&gt;ファイルへと、その同じターゲット内で、この構文を使ってそして適切な名前を代わりに使って、行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you're finished using a &lt;s0&gt;&lt;c1&gt;File&lt;w2&gt;Handle&lt;/w2&gt;&lt;/c1&gt;&lt;/s0&gt;, close it using &lt;a3&gt;&lt;c4&gt;close&lt;w5&gt;File()&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;s0&gt;&lt;c1&gt;File&lt;w2&gt;Handle&lt;/w2&gt;&lt;/c1&gt;&lt;/s0&gt;の使用を完了した場合、それを&lt;a3&gt;&lt;c4&gt;close&lt;w5&gt;File()&lt;/w5&gt;&lt;/c4&gt;&lt;/a3&gt;を使って閉じてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you’re certain that an instance of &lt;c0&gt;Optional&lt;/c0&gt; contains a value, you can unconditionally unwrap the value by using the forced unwrap operator (postfix &lt;c1&gt;!&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがある&lt;c0&gt;Optional&lt;/c0&gt;のインスタンスが値を含むことを確信している場合、あなたはその値を無条件にアンラップすることが強制アンラップ演算子（後置&lt;c1&gt;!&lt;/c1&gt;）を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you’re ready to create a new &lt;c0&gt;Int&lt;w1&gt;Pairs&lt;/w1&gt;&lt;/c0&gt; instance, use a dictionary literal as the parameter to the &lt;c2&gt;Int&lt;w3&gt;Pairs&lt;/w3&gt;&lt;/c2&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが新しい&lt;c0&gt;Int&lt;w1&gt;Pairs&lt;/w1&gt;&lt;/c0&gt;インスタンスを作成する準備ができたら、辞書リテラルをパラメータとして&lt;c2&gt;Int&lt;w3&gt;Pairs&lt;/w3&gt;&lt;/c2&gt;イニシャライザに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you’ve finished feeding the hasher, the hash value can be retrieved by calling &lt;c2&gt;finalize()&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたがハーシャーに入力を完了する時、ハッシュ値は&lt;c2&gt;finalize()&lt;/c2&gt;を呼び出すことで取り出せます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whenever possible, Swift avoids giving you direct access to pointers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>可能なときはいつでも、スウィフトはあなたにポインターへの直接のアクセスを与えることを避けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whenever you use a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop with an array, set, or any other collection or sequence, you’re using that type’s iterator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループを配列、集合、または何らかの他のコレクションやシーケンスとともに使うときはいつでも、あなたはこの型のイテレータを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whenever you use multiple iterators (or &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loops) over a single sequence, be sure you know that the specific sequence supports repeated iteration, either because you know its concrete type or because the sequence is also constrained to the &lt;c2&gt;Collection&lt;/c2&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが複数のイテレータ（または&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループ）をある単一のシーケンスに対して使うときはいつでも、その特定のシーケンスが繰り返される反復をサポートすると確実にあなたが知っているようにしてください、あなたがそれの具体的な型を知っているからかもしくはそのシーケンスもまた&lt;c2&gt;Collection&lt;/c2&gt;プロトコルに制約されるからかのどちらかで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wherever memory management annotations are provided, Swift automatically manages the memory of Core Foundation objects, including Core Foundation objects that you instantiate yourself.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ管理注釈が提供されるどこででも、あなた自身でインスタンス化するCore Foundationオブジェクトを含めて、スウィフトは自動的にCore Foundationオブジェクトのメモリを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whether the &lt;c0&gt;Decoder&lt;/c0&gt; has an entry for the given key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Decoder&lt;/c0&gt;が与えられたキーに対して登録項目を持つかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whether the encountered value was null.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>出くわした値がnullだったかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whether using an option set or creating your own, you use the raw value of an option set instance to store the instance’s bitfield.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるオプションセットを使用するかあなた自身で作成する場合、あなたはオプションセットインスタンスの生の値を使って、そのインスタンスの持つビットフィールドを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whichever of &lt;c0&gt;x&lt;/c0&gt; or &lt;c1&gt;y&lt;/c1&gt; has greater magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のどちらがより大きい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whichever of &lt;c0&gt;x&lt;/c0&gt; or &lt;c1&gt;y&lt;/c1&gt; has lesser magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;x&lt;/c0&gt;と&lt;c1&gt;y&lt;/c1&gt;のどちらがより小さい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>外見上は単純である一方、この能力はあなたにたくさんの演算へのアクセスを与え、それはあなたがあらゆるシーケンス上で実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While the system generator is automatically seeded and thread-safe on every platform, the cryptographic quality of the stream of random data produced by the generator may vary.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>システム生成子が全てのプラットホーム上で自動的にシードを決められてスレッド安全である一方で、生成子によって生み出される無作為データのストリームの暗号化品質は様々でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows uses &lt;c0&gt;BCrypt&lt;w1&gt;Gen&lt;w2&gt;Random&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Windowsは、&lt;c0&gt;BCrypt&lt;w1&gt;Gen&lt;w2&gt;Random&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With a &lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt; type, you can switch back and forth between a custom type and an associated &lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt; type without losing the value of the original &lt;c4&gt;Raw&lt;w5&gt;Representable&lt;/w5&gt;&lt;/c4&gt; type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;Raw&lt;w1&gt;Representable&lt;/w1&gt;&lt;/c0&gt;型で、あなたはあつらえの型と関連&lt;c2&gt;Raw&lt;w3&gt;Value&lt;/w3&gt;&lt;/c2&gt;型との間を行ったり戻ったり切り替えることが元の&lt;c4&gt;Raw&lt;w5&gt;Representable&lt;/w5&gt;&lt;/c4&gt;型の値の損失なしに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With a custom interpolation type, each interpolated segment is translated into a call to a special &lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるあつらえの補間型では、それぞれの補間される文節は特別な&lt;c0&gt;append&lt;w1&gt;Interpolation&lt;/w1&gt;&lt;/c0&gt;メソッドへの呼び出しに翻訳されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With either function, you pass the resulting &lt;c26&gt;CVa&lt;w27&gt;List&lt;w28&gt;Pointer&lt;/w28&gt;&lt;/w27&gt;&lt;/c26&gt; value as the &lt;c29&gt;va&lt;w30&gt;_list&lt;/w30&gt;&lt;/c29&gt; argument of the C variadic function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>どちらの関数でも、あなたは結果の&lt;c26&gt;CVa&lt;w27&gt;List&lt;w28&gt;Pointer&lt;/w28&gt;&lt;/w27&gt;&lt;/c26&gt;値を、C可変長引数関数の&lt;c29&gt;va&lt;w30&gt;_list&lt;/w30&gt;&lt;/c29&gt;引数として渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With these annotations, Swift imports the &lt;c0&gt;My&lt;w1&gt;List&lt;/w1&gt;&lt;/c0&gt; type without using any implicitly wrapped optionals:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>これら注釈で、Swiftは&lt;c0&gt;My&lt;w1&gt;List&lt;/w1&gt;&lt;/c0&gt;型を何らかの暗黙的にラップされるオプショナルを使うことなしにインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this extension, any sequence with elements that conform to &lt;c0&gt;Numeric&lt;/c0&gt; has the &lt;c1&gt;doubling&lt;w2&gt;All()&lt;/w2&gt;&lt;/c1&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この拡張で、&lt;c0&gt;Numeric&lt;/c0&gt;に準拠する要素をもつあらゆるシーケンスは、&lt;c1&gt;doubling&lt;w2&gt;All()&lt;/w2&gt;&lt;/c1&gt;メソッドを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this type and extension method, you can call &lt;c0&gt;.lazy&lt;w1&gt;.scan(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; on any sequence to create a lazily computed scan.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この型と拡張メソッドで、あなたは&lt;c0&gt;.lazy&lt;w1&gt;.scan(_:&lt;w2&gt;_:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;をあらゆるシーケンス上で呼び出して、遅延に計算される走査を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With those elements defined, the inherited &lt;c5&gt;make&lt;w6&gt;Iterator()&lt;/w6&gt;&lt;/c5&gt; method satisfies the requirements of the &lt;c7&gt;Sequence&lt;/c7&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>定義されるそれらの要素とともに、継承される&lt;c5&gt;make&lt;w6&gt;Iterator()&lt;/w6&gt;&lt;/c5&gt;メソッドが&lt;c7&gt;Sequence&lt;/c7&gt;プロトコルの要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Within a section of code demarcated by the &lt;c0&gt;NS&lt;w1&gt;_ASSUME&lt;w2&gt;_NONNULL&lt;w3&gt;_BEGIN&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c4&gt;NS&lt;w5&gt;_ASSUME&lt;w6&gt;_NONNULL&lt;w7&gt;_END&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; macros, you only need to annotate the nullable type declarations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>&lt;c0&gt;NS&lt;w1&gt;_ASSUME&lt;w2&gt;_NONNULL&lt;w3&gt;_BEGIN&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c4&gt;NS&lt;w5&gt;_ASSUME&lt;w6&gt;_NONNULL&lt;w7&gt;_END&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;マクロによって境界線を引かれるコード区画内で、あなたはヌル可能性宣言に注釈を付ける必要だけがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Within the execution of a Swift program, &lt;c0&gt;Hasher&lt;/c0&gt; guarantees that finalizing it will always produce the same hash value as long as it is fed the exact same sequence of bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あるSwiftプログラムの実行の範囲内で、&lt;c0&gt;Hasher&lt;/c0&gt;は、それをファイナライズすることは常に同じハッシュ値を生成することを、それが正確に同じバイト列を供給される限り保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Without a nullability annotation or with a null_resettable annotation—Imported as implicitly unwrapped optionals</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ヌル可能性注釈なしまたはnull_resettable注釈あり — 暗黙的にアンラップされるオプショナルとしてインポートされます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work directly with memory-managed Core Foundation types in your Swift code, and manually handle retains as needed.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリ管理されたCore Foundation型をあなたのSwiftコードにおいて直接に扱い、そして必要に応じて手動でリテインを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with fixed-width numeric types of different sizes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なるサイズの固定長数値型を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with fixed-width vectors of fixed-width numeric types of different sizes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>異なるサイズの固定幅数値型の固定幅ベクターを扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with prefix, postfix, and infix operators.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>前置、後置、および中置演算子を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Work with text using Unicode-safe strings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコード安全な文字列を使ってテキストを扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Binary Representation</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイナリ表現を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Byte Order</seg>
      </tuv>
      <tuv lang="ja">
        <seg>バイト順を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Core Foundation Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Core Foundation型を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Encodings</seg>
      </tuv>
      <tuv lang="ja">
        <seg>エンコーディングを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Foundation Ranges</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundation Rangeを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Foundation Types</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Foundation型を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Memory Addresses</seg>
      </tuv>
      <tuv lang="ja">
        <seg>メモリアドレスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>パスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with String Views</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列ビューを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>文字列補間の中の式それぞれを丸括弧で包んで、バックスラッシュを前においてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrappers for Algorithms</seg>
      </tuv>
      <tuv lang="ja">
        <seg>アルゴリズムに対するラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writable Key Paths</seg>
      </tuv>
      <tuv lang="ja">
        <seg>書き込み可能なキーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Write generic code that works with any collection, or build your own collection types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかのコレクションを使って作業する総括的なコードを記載します、またはあなた独自のコレクション型を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Write generic code that works with any numeric type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>何らかの数値型を使って作業する総括的なコードを記載します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes a textual representation of this instance into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>このインスタンスのテキスト表現を与えられた出力ストリームへ書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the string into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた出力ストリームへ文字列を書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representation of the Unicode scalar into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ユニコードスカラーのテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた要素のテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items into the standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目のテキスト表現を標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the given output stream.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Failable Asynchronous APIs</seg>
      </tuv>
      <tuv lang="ja">
        <seg>失敗できる非同期APIを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing code that depends on the completion handler being called is dangerous.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>呼び出される完了ハンドラに頼るコードを書くことは危険です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing to a File or URL</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ファイルまたはURLに書き込む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing to typed memory as raw bytes must only be performed when the bound type is a trivial type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>型付メモリに生のバイトとして書き込むことは、その束縛型が自明型である場合にのみ実行されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Xcode offers to create this header when you add a Swift file to an existing Objective-C app, or an Objective-C file to an existing Swift app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Xcodeは、このヘッダファイルを作成することをあなたがSwiftファイルを既存のObjective-Cアプリに、またはObjective-Cファイルを既存のSwiftアプリに加える場合に提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Xcode uses this name when naming the generated header file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>Xcodeは、生成ヘッダファイルに名前を付けるときにこの名前を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You also use this method to sort elements that conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol in descending order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、このメソッドを使って&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠する要素を降順でソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You apply the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to an individual type, method, or function declaration in Objective-C.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを個別の型、メソッド、または関数宣言にObjective-Cにおいて適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are expected to construct and—if necessary—destroy objects there yourself, using the APIs on &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;Element&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、オブジェクトの組み立てと—必要ならば—破壊をそこであなた自身で、&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;Element&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;上でAPIを使って行うことを当然期待されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are in charge of managing the allocated memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、アロケートされたメモリの管理を任されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are responsible for handling the life cycle of any memory you work with through unsafe pointers to avoid leaks or undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはリークや未定義挙動を避けるために、あなたが安全でないポインタを通して扱うあらゆるメモリの生涯の処理に責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are responsible for handling the life cycle of any memory you work with through unsafe pointers, to avoid leaks or undefined behavior.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、リークや未定義挙動を避けるために、あなたが安全でないポインタを通して扱うあらゆるメモリの生涯の処理に責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a string’s view of UTF-16 code units by using its &lt;c0&gt;utf16&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは文字列の持つビューのUTF-16コード単位にアクセスすることが、それの&lt;c0&gt;utf16&lt;/c0&gt;プロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a string’s view of UTF-8 code units by using its &lt;c0&gt;utf8&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、文字列のもつUTF-8コード単位ビューにそれの&lt;c0&gt;utf8&lt;/c0&gt;プロパティを使うことによってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a string’s view of Unicode scalar values by using its &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは文字列の持つビューのユニコードスカラー値にアクセスすることが、それの&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;プロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access and use pieces of code written in C and Objective-C from within your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、CおよびObjective-Cで書かれるコードの断片にアクセスおよび利用することがあなたのSwiftコード内部から可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add extensions to extensible enumerations later in your Swift code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは拡張をいくつか加えて、Swiftコードにおいて後で列挙を拡張できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also bridge some toll-free bridged Core Foundation types to Swift standard library types if you cast to a bridging Foundation type first.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、いくつかのトールフリーブリッジされたCore Foundation型をSwift標準ライブラリ型にブリッジすることが、ブリッジしているFoundation型にあなたが最初にキャストするならば、可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also combine, exclude, or subtract the elements of two sets:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、結合、排他、または差引を行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also create Unicode scalar values directly from their numeric representation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、ユニコードスカラー値を直接にそれらの数値表現から作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also invoke the &lt;c0&gt;retain()&lt;/c0&gt;, &lt;c1&gt;release()&lt;/c1&gt;, and &lt;c2&gt;autorelease()&lt;/c2&gt; methods on unmanaged objects, but this approach is not recommended.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、管理されないオブジェクト上で&lt;c0&gt;retain()&lt;/c0&gt;、&lt;c1&gt;release()&lt;/c1&gt;、そして&lt;c2&gt;autorelease()&lt;/c2&gt;メソッドを呼び出すことができます、しかしこの取り組みは勧められません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also pass a closure property of a generic type or a generic method as long as no generic type parameters are referenced in the closure’s argument list or body.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、ひとつの総称体型のクロージャプロパティまたは総称体メソッドを渡すことが、いくつかの総称体型パラメータがクロージャの引数リストまたは本文において参照されるのでない限りは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also perform unconditional optional chaining by using the postfix &lt;c0&gt;!&lt;/c0&gt; operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、無条件のオプショナル連鎖を実行することが、後置&lt;c0&gt;!&lt;/c0&gt;演算子を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also reorder, combine, and rename parameters so the API matches other Swift APIs.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、パラメータを再配列、結合、そして改名できます、それでそのAPIは他のSwift APIと調和します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use inout syntax to pass a mutable pointer to the elements of an array.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、インアウト構文を使って、可変ポインタを配列の要素へ渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use literals to specify values for one or more cases.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、リテラルを使うことで値を１つ以上のケース節に指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use subscript notation to access the value in memory at a specific offset.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、添え字表記法を使ってメモリ中の値に特定のオフセットでアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the &lt;c7&gt;CF&lt;w8&gt;_IMPLICIT&lt;w9&gt;_BRIDGING&lt;w10&gt;_ENABLED&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt; and &lt;c11&gt;CF&lt;w12&gt;_IMPLICIT&lt;w13&gt;_BRIDGING&lt;w14&gt;_DISABLED&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt; macros to enclose C function declarations that follow the policy for Core Foundation ownership naming, in order to infer memory management.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、メモリ管理を推論する目的で、&lt;c7&gt;CF&lt;w8&gt;_IMPLICIT&lt;w9&gt;_BRIDGING&lt;w10&gt;_ENABLED&lt;/w10&gt;&lt;/w9&gt;&lt;/w8&gt;&lt;/c7&gt;および&lt;c11&gt;CF&lt;w12&gt;_IMPLICIT&lt;w13&gt;_BRIDGING&lt;w14&gt;_DISABLED&lt;/w14&gt;&lt;/w13&gt;&lt;/w12&gt;&lt;/c11&gt;マクロを使って、Core Foundation所有者命名の方針に従うC関数宣言を囲むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use this operator to compare a non-optional value to an optional that wraps the same type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはまた、この演算子を使って非オプショナル値を、同じ型をラップするオプショナル値と比較することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can annotate declarations in your Objective-C code to indicate whether an instance can have a null or &lt;c0&gt;nil&lt;/c0&gt; value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのObjective-Cコードの中の宣言に注釈をつけることで、あるインスタンスがヌルまたは&lt;c0&gt;nil&lt;/c0&gt;値を持つことが可能かどうかを指し示せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can bridge between &lt;c0&gt;Set&lt;/c0&gt; and &lt;c1&gt;NSSet&lt;/c1&gt; using the &lt;c2&gt;as&lt;/c2&gt; operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Set&lt;/c0&gt;と&lt;c1&gt;NSSet&lt;/c1&gt;の間を&lt;c2&gt;as&lt;/c2&gt;演算子を使ってブリッジできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can build a sequence type that lazily computes the elements in the result of a scan:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ある走査の結果の中の要素それらを遅延に計算するシーケンス型を構築できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can call both functions the same way: with a trailing closure and no other arguments.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、両方の関数を同じ方法で呼び出せます：後付クロージャとともにそして他の引数なしで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can call this generic function with an instance of either &lt;c0&gt;String&lt;/c0&gt; or &lt;c1&gt;Substring&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、この総称体関数を&lt;c0&gt;String&lt;/c0&gt;または&lt;c1&gt;Substring&lt;/c1&gt;のどちらのインスタンスでも呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check the equality of instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the equal-to operator (&lt;c2&gt;==&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスの同等性を同等演算子（&lt;c2&gt;==&lt;/c2&gt;）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check the inequality of instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the not-equal-to operator (&lt;c2&gt;!=&lt;/c2&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスの不等性を不等演算子（&lt;c2&gt;!=&lt;/c2&gt;）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the greater-than operator (&lt;c2&gt;&gt;&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより大きい演算子（&lt;c2&gt;&gt;&lt;/c2&gt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the greater-than-or-equal-to operator (&lt;c2&gt;&gt;=&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより大きいか等しい演算子（&lt;c2&gt;&gt;=&lt;/c2&gt;）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the less-than operator (&lt;c2&gt;&lt;&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより小さい演算子（&lt;c2&gt;&lt;&lt;/c2&gt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compare instances of any &lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt; types using the less-than-or-equal-to operator (&lt;c2&gt;&lt;=&lt;/c2&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかの&lt;c0&gt;Binary&lt;w1&gt;Integer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスをより小さいか等しい演算子（&lt;c2&gt;&lt;=&lt;/c2&gt;）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-&lt;c5&gt;nil&lt;/c5&gt; value from &lt;a6&gt;&lt;c7&gt;int&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt; or by inspecting the &lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非&lt;c5&gt;nil&lt;/c5&gt;値を&lt;a6&gt;&lt;c7&gt;int&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt;から回収することによって、または&lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt;プロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can confirm the data value’s underlying type by retrieving a non-&lt;c5&gt;nil&lt;/c5&gt; value from &lt;a6&gt;&lt;c7&gt;string&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt; or by inspecting the &lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt; property.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データ値のもつ基礎をなす型を確認することが、非&lt;c5&gt;nil&lt;/c5&gt;値を&lt;a6&gt;&lt;c7&gt;string&lt;w8&gt;Value&lt;/w8&gt;&lt;/c7&gt;&lt;/a6&gt;から回収することによって、または&lt;a9&gt;&lt;c10&gt;type&lt;/c10&gt;&lt;/a9&gt;プロパティを調査することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can convert a &lt;c0&gt;String&lt;w1&gt;.Unicode&lt;w2&gt;Scalar&lt;w3&gt;View&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance back into a string using the &lt;c4&gt;String&lt;/c4&gt; type’s &lt;c5&gt;init(_:)&lt;/c5&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;String&lt;w1&gt;.Unicode&lt;w2&gt;Scalar&lt;w3&gt;View&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを逆にひとつの文字列へと変換することが、&lt;c4&gt;String&lt;/c4&gt;型の&lt;c5&gt;init(_:)&lt;/c5&gt;イニシャライザを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a &lt;c0&gt;Counter&lt;/c0&gt; instance from an integer value between 1 and 5 by using the &lt;c1&gt;init?(raw&lt;w2&gt;Value:)&lt;/w2&gt;&lt;/c1&gt; initializer declared in the &lt;c3&gt;Raw&lt;w4&gt;Representable&lt;/w4&gt;&lt;/c3&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Counter&lt;/c0&gt;インスタンスを１と５の間の整数値から作成することが、&lt;c1&gt;Raw&lt;w2&gt;Representable&lt;/w2&gt;&lt;/c1&gt;プロトコルにおいて宣言される&lt;c3&gt;init?(raw&lt;w4&gt;Value:)&lt;/w4&gt;&lt;/c3&gt;イニシャライザを使うことによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a &lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt; instance by using a string literal that contains a single character representing exactly one Unicode scalar value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unicode&lt;w1&gt;.Scalar&lt;/w1&gt;&lt;/c0&gt;インスタンスを、厳密に１つのユニコードスカラー値を表している単一の文字を含んでいる文字列リテラルを使うことによって作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a set with any element type that conforms to the &lt;c0&gt;Hashable&lt;/c0&gt; protocol.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Hashable&lt;/c0&gt;プロトコルに準拠するあらゆる要素型を使って集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create instances of the type by using the static members named after the symbolic names, or by using the &lt;c6&gt;init(raw&lt;w7&gt;Value:)&lt;/w7&gt;&lt;/c6&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、この型のインスタンスを、それら象徴名を付けられた静的メンバーを使うことによってまたは&lt;c6&gt;init(raw&lt;w7&gt;Value:)&lt;/w7&gt;&lt;/c6&gt;イニシャライザを使うことによって作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create new strings using string literals or string interpolations.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは新しい文字列を、文字列リテラルまたは文字列補間を使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can expect faster execution when the collections share many common elements, or if &lt;c6&gt;Element&lt;/c6&gt; conforms to &lt;c7&gt;Hashable&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはより速い遂行を予想できます、コレクションそれらが多くの普通の要素を共有する場合は、またはもし&lt;c6&gt;Element&lt;/c6&gt;が&lt;c7&gt;Hashable&lt;/c7&gt;に準拠するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can expect faster execution when the collections share many common elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはより速い遂行を予想できます、コレクションそれらが多くの普通の要素を共有する場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can feed data to the hasher using a series of calls to mutating &lt;c1&gt;combine&lt;/c1&gt; methods.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、データをハーシャーに送り込むのに、一連の変更&lt;c1&gt;combine&lt;/c1&gt;メソッド呼び出しを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can improve the architecture, logic, and performance of one of your Objective-C apps by replacing pieces of it in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのObjective-Cアプリのうちの１つのアーキテクチャ、論理、そして性能を、それの幾つかの区画を置き換えることによって改善できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can initialize the &lt;c1&gt;Countdown&lt;/c1&gt; sequence with a starting integer and then iterate over the count down to zero.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c1&gt;Countdown&lt;/c1&gt;シーケンスをある開始点整数で初期化してそれからカウントダウンをゼロまでずっと反復することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can iterate through a set’s unordered elements with a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、集合の持つ順序付けられない要素を始めから終わりまで反復することが&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;で可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can modify a set in place by using these methods’ mutating counterparts: &lt;c0&gt;form&lt;w1&gt;Union(_:)&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;form&lt;w3&gt;Intersection(_:)&lt;/w3&gt;&lt;/c2&gt;, &lt;c4&gt;form&lt;w5&gt;Symmetric&lt;w6&gt;Difference(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;, and &lt;c7&gt;subtract(_:)&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはある集合をその場で修正することがこれらのメソッドの変更を行う相当物：&lt;c0&gt;form&lt;w1&gt;Union(_:)&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;form&lt;w3&gt;Intersection(_:)&lt;/w3&gt;&lt;/c2&gt;、&lt;c4&gt;form&lt;w5&gt;Symmetric&lt;w6&gt;Difference(_:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;、そして&lt;c7&gt;subtract(_:)&lt;/c7&gt;を使うことで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can override any of the protocol’s required methods to provide your own custom implementation.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、何らかのこのプロトコルの持つ必須メソッドをオーバーライドして、あなた独自のあつらえの実装を提供することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can perform many string operations on a substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、多くの文字列演算を買い文字列上で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can reverse a collection without allocating new space for its elements by calling this &lt;c0&gt;reversed()&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションを逆順にすることがそれの要素に対して新しい空間を割り当てることなく&lt;c0&gt;reversed()&lt;/c0&gt;メソッドによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can send the output of the standard library’s &lt;c0&gt;print(_:&lt;w1&gt;to:)&lt;/w1&gt;&lt;/c0&gt; and &lt;c2&gt;dump(_:&lt;w3&gt;to:)&lt;/w3&gt;&lt;/c2&gt; functions to an instance of a type that conforms to the &lt;c4&gt;Text&lt;w5&gt;Output&lt;w6&gt;Stream&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; protocol instead of to standard output.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、標準ライブラリの&lt;c0&gt;print(_:&lt;w1&gt;to:)&lt;/w1&gt;&lt;/c0&gt;および&lt;c2&gt;dump(_:&lt;w3&gt;to:)&lt;/w3&gt;&lt;/c2&gt;関数の出力を&lt;c4&gt;Text&lt;w5&gt;Output&lt;w6&gt;Stream&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;プロトコルに準拠する型のインスタンスに送ることが、標準出力に送る代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can set up your Swift class to integrate Objective-C behavior by subclassing Objective-C classes, adopting Objective-C protocols, and more.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのスウィフトクラスをObjective-Cクラスのサブクラスにすること、Objective-Cプロトコルを採用すること、そしてもっと多くのことによって、Objective-C挙動に溶け込むように準備することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can simplify the process of annotating your Objective-C code by marking entire regions as audited for nullability.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのObjective-Cコードに注釈を付ける行程を領域全体をヌル可能性について監査されると印することによって簡素化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can sort any mutable collection of elements that conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol by calling this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠する要素からなるあらゆる可変の配列をこのメソッドを呼び出すことによってソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can sort any sequence of elements that conform to the &lt;c0&gt;Comparable&lt;/c0&gt; protocol by calling this method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはいくらかの要素からなる何らかのシーケンスで&lt;c0&gt;Comparable&lt;/c0&gt;プロトコルに準拠するものをこのメソッドを呼び出すことによってソートする（並び替える）ことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can subscript a collection with any valid index other than the collection’s end index.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、そのコレクションの末尾インデックスの以外のあらゆる有効なインデックスで、コレクションに対して添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can think of additional cases you might add later</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが後で加えるかもしれない追加のケース節を考える可能性があるならば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c0&gt;Memory&lt;w1&gt;Layout&lt;/w1&gt;&lt;/c0&gt; as a source of information about a type when allocating or binding memory using raw pointers.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Memory&lt;w1&gt;Layout&lt;/w1&gt;&lt;/c0&gt;をある型についての情報源として使うことが、生のポインタを使ってメモリをアロケートまたはバインドする時に可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt; to remove the last element of a collection that might be empty.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;pop&lt;w1&gt;Last()&lt;/w1&gt;&lt;/c0&gt;を使って、空であるかもしれないコレクションの最後の要素を削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use Objective-C and Swift files together in a single project, no matter which language the project used originally.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはObjective-CおよびSwiftファイルを一緒にしてある単一のプロジェクトの中で使うことができます、どちらの言語をそのプロジェクトが最初に使用しようとも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Through&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Through&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを使うことで、コレクションの始まりからこの部分範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Through&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Through&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Up&lt;w3&gt;To&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Up&lt;w3&gt;To&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを使うことで、コレクションの始まりからこの部分範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Up&lt;w3&gt;To&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Up&lt;w3&gt;To&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a &lt;c0&gt;Range&lt;/c0&gt; instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Range&lt;/c0&gt;インスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのもつインデックスからなる部分範囲を使うことで、その部分範囲の下側の境界からそのコレクションの終わりまでの範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a partial range to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、部分範囲を使って、ある値がいくつの値からなる部分範囲に含まれるかどうかを素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a slice’s &lt;c0&gt;base&lt;/c0&gt; property to access its base collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはスライスのもつ&lt;c0&gt;base&lt;/c0&gt;プロパティを使って、それの基盤コレクションにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a type that conforms to the &lt;c0&gt;Strideable&lt;/c0&gt; protocol with the &lt;c1&gt;stride(from:&lt;w2&gt;to:&lt;w3&gt;by:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; and &lt;c4&gt;stride(from:&lt;w5&gt;through:&lt;w6&gt;by:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; functions.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Strideable&lt;/c0&gt;プロトコルに準拠する型を&lt;c1&gt;stride(from:&lt;w2&gt;to:&lt;w3&gt;by:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;および&lt;c4&gt;stride(from:&lt;w5&gt;through:&lt;w6&gt;by:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;関数で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an &lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance in low level operations to eliminate uniqueness checks and, in release mode, bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unsafe&lt;w1&gt;Buffer&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを低レベル演算において使うことで、特有性検査をそして、リリースモードでは、境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance in low level operations to eliminate uniqueness checks and, in release mode, bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを低レベル演算において使うことで、特有性検査をそして、リリースモードでは、境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance in low-level operations to eliminate uniqueness checks and release mode bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Raw&lt;w3&gt;Buffer&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを低水準演算において使用することで、固有性検査とリリースモード境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an &lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance in low-level operations to eliminate uniqueness checks and release mode bounds checks.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unsafe&lt;w1&gt;Raw&lt;w2&gt;Buffer&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを低水準演算において使用することで、固有性検査とリリースモード境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an array literal anywhere a set is expected by the type context.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、型コンテキストによって集合が予期される何処ででも配列リテラルを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an enumeration to specify the exact states needed for your app.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは列挙を使って、あなたのアプリに必要とされる正確な状態を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use any type that conforms to the &lt;c0&gt;Hashable&lt;/c0&gt; protocol in a set or as a dictionary key.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Hashable&lt;/c0&gt;プロトコルに準拠するあらゆる型を集合においてまたは辞書キーとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use methods like &lt;c0&gt;initialize(to:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt;, &lt;c2&gt;initialize(from:&lt;w3&gt;count:)&lt;/w3&gt;&lt;/c2&gt;, and &lt;c4&gt;move&lt;w5&gt;Initialize(from:&lt;w6&gt;count:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt; to initialize the memory referenced by a pointer with a value or series of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;initialize(to:&lt;w1&gt;count:)&lt;/w1&gt;&lt;/c0&gt;、&lt;c2&gt;initialize(from:&lt;w3&gt;count:)&lt;/w3&gt;&lt;/c2&gt;、そして&lt;c4&gt;move&lt;w5&gt;Initialize(from:&lt;w6&gt;count:)&lt;/w6&gt;&lt;/w5&gt;&lt;/c4&gt;のようなメソッドを使うことで、ポインタによって参照されるメモリをある値または一連の値で初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use methods like &lt;c0&gt;initialize&lt;w1&gt;Memory(as:&lt;w2&gt;from:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;move&lt;w4&gt;Initialize&lt;w5&gt;Memory(as:&lt;w6&gt;from:&lt;w7&gt;count:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; to bind raw memory to a type and initialize it with a value or series of values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;initialize&lt;w1&gt;Memory(as:&lt;w2&gt;from:)&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;と&lt;c3&gt;move&lt;w4&gt;Initialize&lt;w5&gt;Memory(as:&lt;w6&gt;from:&lt;w7&gt;count:)&lt;/w7&gt;&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;のようなメソッドを使うことで、生のメモリをある型に束縛して、それをある値または一連の値で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use nullability annotations in your Objective-C code to designate whether a parameter type, property type, or return type is nullable.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ヌル可能性注釈をあなたのObjective-Cコードにおいて使用して、パラメータ型、プロパティ型、または戻り値がヌル可能性であるかどうかを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;relative(to:)&lt;/c0&gt; method to convert a range expression, which could be missing one or both of its endpoints, into a concrete range that is bounded on both sides.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;relative(to:)&lt;/c0&gt;メソッドを使うことによって、それの端点の両方または１つを抜かすことができる範囲式を、両方の側で閉ざされた具体的な範囲へと変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;with&lt;w1&gt;UTF8Buffer(_:)&lt;/w1&gt;&lt;/c0&gt; method to access a static string’s contents, regardless of which representation the static string uses.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;with&lt;w1&gt;UTF8Buffer(_:)&lt;/w1&gt;&lt;/c0&gt;メソッドを使うことで、静的文字列のもつ内容にアクセスできます、その静的文字列が使うのはどの表現かに関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c4&gt;magnitude&lt;/c4&gt; property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c4&gt;magnitude&lt;/c4&gt;プロパティを、ずっと単純に符号なしの値に関して実装する演算において使用できます、例えば整数の値を印字することなど、それはちょっと「-」文字を絶対値の前に印字しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the conditional type cast operator (&lt;c0&gt;as?&lt;/c0&gt;), which returns an optional value of the type you are trying to downcast to:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、条件付き型キャスト演算子（&lt;c0&gt;as?&lt;/c0&gt;）を使うことができます、それはあなたがそれへとダウンキャストを試みる型のオプショナル値を返します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the pattern-matching operator (&lt;c0&gt;~=&lt;/c0&gt;) to test whether a value is included in a range.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このパターンマッチング演算子（&lt;c0&gt;~=&lt;/c0&gt;）を使うことで、ある値がある範囲に含まれるかどうか検査できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the &lt;c0&gt;Equatable&lt;/c0&gt; protocol, such as the &lt;c1&gt;HTTPResponse&lt;/c1&gt; enumeration in this example.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使って、&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルに準拠しない型、例えばこの例での&lt;c1&gt;HTTPResponse&lt;/c1&gt;列挙などの要素に対して調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the predicate to find an element of a type that doesn’t conform to the &lt;c0&gt;Equatable&lt;/c0&gt; protocol or to find an element that matches particular criteria.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは述部を使って、&lt;c0&gt;Equatable&lt;/c0&gt;プロトコルに準拠しない型の要素を見つける、または特定の基準に合致する要素を見つけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the same indices for subscripting a string and its substring.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、文字列とそれの下位文字列での添え字の使用に対して同じインデックスを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the same or a different name than your Objective-C class.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのObjective-Cクラスと同じまたは異なる名前を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the unary plus operator (&lt;c0&gt;+&lt;/c0&gt;) to provide symmetry in your code for positive numbers when also using the unary minus operator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、単行プラス演算子（&lt;c0&gt;+&lt;/c0&gt;）を使うことで、均整美をあなたのコードにおいて正の数に対して単行マイナス演算子もまた使う場合に提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the unbounded range operator (&lt;c0&gt;...&lt;/c0&gt;) to create a slice of a collection that contains all of the collection’s elements.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、無境界範囲演算子（&lt;c0&gt;...&lt;/c0&gt;）を使って、あるコレクションのスライスでそのコレクションのもつ要素すべてを含んでいるものを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this initializer to create a new string from a slice of another string’s &lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt; view.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイニシャライザを使って新しい文字列を別の文字列のもつ&lt;c0&gt;unicode&lt;w1&gt;Scalars&lt;/w1&gt;&lt;/c0&gt;ビューのスライスから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this initializer to create a new string from the result of one or more collection operations on a string’s characters.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイニシャライザを使って新しい文字列を、ある文字列のもつ幾らかの文字上での１つ以上のコレクション演算の結果から作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this method to create new values from the buffer pointer’s underlying bytes.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このメソッドを使って新しい値をバッファポインタのもつ基盤バイトから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this method to find the distance in bytes that can be added to a pointer of type &lt;c0&gt;T&lt;/c0&gt; to get a pointer to the property referenced by &lt;c1&gt;key&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使ってバイトでの隔たりを見つけることができます、それは型&lt;c0&gt;T&lt;/c0&gt;のポインタに加えることで、&lt;c1&gt;key&lt;/c1&gt;によって参照されるプロパティへのポインタを得ることができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、その部分的な範囲の下側の境界からそのコレクションの終わりまでの範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、しかしそれを含んでいない範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can work with types declared in Swift from within the Objective-C code in your project by importing an Xcode-generated header file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Swiftにおいて宣言される型をあなたのプロジェクトの中のObjective-Cコード内から扱うことが、Xcode生成のヘッダファイルをインポートすることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can write generic methods that operate on any numeric type in the standard library by using the &lt;c1&gt;Numeric&lt;/c1&gt; protocol as a generic constraint.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c1&gt;Numeric&lt;/c1&gt;プロトコルを総称体制約として使うことで、標準ライブラリのあらゆる数値型上で作用する総称体メソッドを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can't reorder or change the number of arguments for type members imported using the &lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使ってインポートされる型メンバーに対する引数の数を再配列または変更できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use &lt;c0&gt;*&lt;/c0&gt; with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;*&lt;/c0&gt;をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use &lt;c0&gt;+&lt;/c0&gt; with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;+&lt;/c0&gt;をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use &lt;c0&gt;-&lt;/c0&gt; with arguments of different types.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;-&lt;/c0&gt;をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You cannot use a &lt;c0&gt;break&lt;/c0&gt; or &lt;c1&gt;continue&lt;/c1&gt; statement to exit the current call of the &lt;c2&gt;body&lt;/c2&gt; closure or skip subsequent calls.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;break&lt;/c0&gt;または&lt;c1&gt;continue&lt;/c1&gt;文を使って、&lt;c2&gt;body&lt;/c2&gt;クロージャの現在の呼び出しを抜け出したり、または続いて起こる呼び出しを飛ばしたりできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You choose which method to use based on whether the API you are invoking returns an unretained or a retained object.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはどちらかのメソッドを、あなたが呼んでいるAPIが、リテイン（保有）されないまたはリテインされるオブジェクトを返すのかに基づき選択して使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You could use the &lt;c3&gt;id&lt;/c3&gt; property to identify a particular user even if other data fields change, such as the user’s name.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、その&lt;c3&gt;id&lt;/c3&gt;プロパティを使って、特定のユーザを識別できます、たとえ他のデータフィールド、たとえばそのユーザのもつ名前などが変わるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instances by using the postfix range operator (postfix &lt;c3&gt;...&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;From&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを後置範囲演算子（&lt;c3&gt;...&lt;/c3&gt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Through&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instances by using the prefix closed range operator (prefix &lt;c3&gt;...&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Through&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを後置範囲演算子（&lt;c3&gt;...&lt;/c3&gt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create &lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Up&lt;w3&gt;To&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instances by using the prefix half-open range operator (prefix &lt;c4&gt;..&lt;&lt;/c4&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Partial&lt;w1&gt;Range&lt;w2&gt;Up&lt;w3&gt;To&lt;/w3&gt;&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスを後置範囲演算子（&lt;c4&gt;..&lt;&lt;/c4&gt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create a &lt;c0&gt;Range&lt;/c0&gt; instance by using the half-open range operator (&lt;c1&gt;..&lt;&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Range&lt;/c0&gt;インスタンスを、半開範囲演算子（&lt;c1&gt;..&lt;&lt;/c1&gt;）を使うことで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You create an instance of the &lt;c0&gt;Repeated&lt;/c0&gt; collection by calling the &lt;c1&gt;repeat&lt;w2&gt;Element(_:&lt;w3&gt;count:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt; function.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Repeated&lt;/c0&gt;コレクションのインスタンスを&lt;c1&gt;repeat&lt;w2&gt;Element(_:&lt;w3&gt;count:)&lt;/w3&gt;&lt;/w2&gt;&lt;/c1&gt;関数を呼び出すことによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You don't need to rewrite your entire app in Swift at once.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたのアプリ全体を一度にSwiftに書き直す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You don’t need to do anything special to create the generated header—just import it to use its contents in your Objective-C code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、生成ヘッダを作成するために特に何もする必要はありません ― あなたは、ただ単にそれをインポートしてそれの内容をあなたのObjective-Cコードにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You initialize a &lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; instance using a Swift dictionary literal.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Key&lt;w1&gt;Value&lt;w2&gt;Pairs&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;インスタンスをSwift辞書リテラルを使って初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You make part of an API unavailable in Swift as part of introducing new Swift APIs that supersede parts of the existing Objective-C API.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、Swiftで利用可能でないAPIの部分を、既存のObjective-C APIの部分に取って代わる新しいSwift APIを導入する部分とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You might encounter Objective-C code that uses the older &lt;c0&gt;NS&lt;w1&gt;_STRING&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; and &lt;c3&gt;NS&lt;w4&gt;_EXTENSIBLE&lt;w5&gt;_STRING&lt;w6&gt;_ENUM&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt; macros, which were used to group string constants.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、より古い&lt;c0&gt;NS&lt;w1&gt;_STRING&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;および&lt;c3&gt;NS&lt;w4&gt;_EXTENSIBLE&lt;w5&gt;_STRING&lt;w6&gt;_ENUM&lt;/w6&gt;&lt;/w5&gt;&lt;/w4&gt;&lt;/c3&gt;マクロを使うObjective-Cコードに直面するかもしれません、それは文字列定数をグループにするために使われました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must not call this method if any other copy of this iterator has been advanced with a call to its &lt;c0&gt;next()&lt;/c0&gt; method.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイテレータの何か他のコピーがそれの&lt;c0&gt;next()&lt;/c0&gt;メソッドを呼び出すことで前に進められるならば、このメソッドを呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You must unwrap the value of an &lt;c0&gt;Optional&lt;/c0&gt; instance before you can use it in many contexts.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、あなたがそれを多くの文脈において使う前に、&lt;c0&gt;Optional&lt;/c0&gt;インスタンスの値をアンラップしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You need to know how each function calls its closure if you write code that relies on a specific execution order.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、各関数がそれのクロージャを呼び出す方法を知る必要があります、もしあなたがある明確な実行順序を当てにするコードを書くならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You preserve the return value or thrown error from a throwing expression using the &lt;a0&gt;&lt;c1&gt;Result&lt;/c1&gt;&lt;/a0&gt; enumeration’s &lt;a2&gt;&lt;c3&gt;init(catching:)&lt;/c3&gt;&lt;/a2&gt; initializer.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはスローする式から戻り値またはスローされたエラーを、&lt;a0&gt;&lt;c1&gt;Result&lt;/c1&gt;&lt;/a0&gt;列挙の持つ&lt;a2&gt;&lt;c3&gt;init(catching:)&lt;/c3&gt;&lt;/a2&gt;イニシャライザを使って保全します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You rarely need to use iterators directly, because a &lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt; loop is the more idiomatic approach to traversing a sequence in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは滅多にイテレータを直に使う必要はありません、なぜなら&lt;c0&gt;for&lt;/c0&gt;-&lt;c1&gt;in&lt;/c1&gt;ループはSwiftにおいてシーケンスを辿っていくずっと慣用語法にかなった取り組みだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You reuse an API by using its new name to call it in the implementation of a new API in Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはあるAPIを、それの新しい名前を使ってそれをSwiftでの新しいAPIの実装において呼び出すことによって再利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use &lt;c4&gt;self&lt;/c4&gt; in a &lt;c5&gt;CF&lt;w6&gt;_SWIFT&lt;w7&gt;_NAME&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt; argument to refer to the instance that the method belongs to.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c4&gt;self&lt;/c4&gt;を&lt;c5&gt;CF&lt;w6&gt;_SWIFT&lt;w7&gt;_NAME&lt;/w7&gt;&lt;/w6&gt;&lt;/c5&gt;引数において使って、メソッドが属するインスタンスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use a set instead of an array when you need to test efficiently for membership and you aren’t concerned with the order of the elements in the collection, or when you need to ensure that each element appears only once in a collection.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが集合を配列の代わりに使うのは、あなたが帰属について能率的にテストする必要がありそしてあなたがコレクションの要素の順番に関心がない場合、または各要素がただ一度だけコレクション中に現れることをあなたが確実にする必要がある場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use complex macros in C and Objective-C to avoid type-checking constraints or to avoid retyping large amounts of boilerplate code.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、複雑なマクロをCとObjective-Cにおいて型チェック制約を避けたり、常用文コードの大きな塊を繰り返しタイピングすることを避けるために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use instances of the &lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; type to access data of a specific type in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unsafe&lt;w1&gt;Mutable&lt;w2&gt;Pointer&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;型のインスタンスを使うことで、メモリにおいて特定の型のデータにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use instances of the &lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt; type to access data of a specific type in memory.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Unsafe&lt;w1&gt;Pointer&lt;/w1&gt;&lt;/c0&gt;型のインスタンスを使うことで、メモリにおいて特定の型のデータにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use one of the following macros to declare that several Objective-C constants are related to each other:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、以下のマクロの１つを使って、いくつかのObjective-C定数が互いに関連することを宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;#key&lt;w1&gt;Path&lt;/w1&gt;&lt;/c0&gt; string expression to create compiler-checked keys and key paths that can be used by KVC methods like &lt;a2&gt;&lt;c3&gt;value(for&lt;w4&gt;Key:)&lt;/w4&gt;&lt;/c3&gt;&lt;/a2&gt; and &lt;a5&gt;&lt;c6&gt;value(for&lt;w7&gt;Key&lt;w8&gt;Path:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;&lt;/a5&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;#key&lt;w1&gt;Path&lt;/w1&gt;&lt;/c0&gt;文字列式を使って、コンパイラチェック済みのキーおよびキーパスを作成します、それはKVCメソッド&lt;a2&gt;&lt;c3&gt;value(for&lt;w4&gt;Key:)&lt;/w4&gt;&lt;/c3&gt;&lt;/a2&gt;や&lt;a5&gt;&lt;c6&gt;value(for&lt;w7&gt;Key&lt;w8&gt;Path:)&lt;/w8&gt;&lt;/w7&gt;&lt;/c6&gt;&lt;/a5&gt;によって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro to group together related global functions into a single structure type that's imported into Swift.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;CF&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロを使って、関連するグローバル関数を一緒にして、Swiftにインポートされるある単一の構造体型へとグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;NS&lt;w1&gt;_OPTIONS&lt;/w1&gt;&lt;/c0&gt; macro when two or more constants in a grouping of constants can be combined.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;NS&lt;w1&gt;_OPTIONS&lt;/w1&gt;&lt;/c0&gt;マクロを、ある定数グループの中の２つ以上の定数が結合可能である場合に使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; macro as a prefix for classes and protocols.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;NS&lt;w1&gt;_SWIFT&lt;w2&gt;_NAME&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;マクロをクラスとプロパティのための接頭辞として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt; to group constants with a raw value type that you specify.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;NS&lt;w1&gt;_TYPED&lt;w2&gt;_ENUM&lt;/w2&gt;&lt;/w1&gt;&lt;/c0&gt;を使って、あなたが指定する生の値型を持つ定数をグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt; protocol to represent bitset types, where individual bits represent members of a set.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c0&gt;Option&lt;w1&gt;Set&lt;/w1&gt;&lt;/c0&gt;プロトコルを使ってビットセット型を表すことができます、そこにおいて個々のビットはセットのメンバを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c0&gt;Optional&lt;/c0&gt; type whenever you use optional values, even if you never type the word &lt;c1&gt;Optional&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは&lt;c0&gt;Optional&lt;/c0&gt;型を、あなたがオプショナル値を使う時はいつでも使います、たとえあなたが単語&lt;c1&gt;Optional&lt;/c1&gt;を決してタイプしないとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; type to access and manage memory that has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;型を使うことで、特定の型に束縛されているメモリへのアクセスおよび管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; type to access and manage raw bytes in memory, whether or not that memory has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c2&gt;Unsafe&lt;w3&gt;Mutable&lt;w4&gt;Raw&lt;w5&gt;Pointer&lt;/w5&gt;&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;型を使ってメモリ中の生のバイトにアクセスおよび管理を、そのメモリが特定の型に束縛されているかどうかにかかわらず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c2&gt;Unsafe&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/c2&gt; type to access and manage memory that has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c2&gt;Unsafe&lt;w3&gt;Pointer&lt;/w3&gt;&lt;/c2&gt;型を使うことで、特定の型に束縛されているメモリへのアクセスおよび管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use the &lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt; type to access and manage raw bytes in memory, whether or not that memory has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、&lt;c2&gt;Unsafe&lt;w3&gt;Raw&lt;w4&gt;Pointer&lt;/w4&gt;&lt;/w3&gt;&lt;/c2&gt;型を使ってメモリ中の生のバイトにアクセスおよび管理を、そのメモリが特定の型に束縛されているかどうかにかかわらず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this initializer from within your type’s &lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt; implementation to create a customized mirror, particularly for custom types that are collections.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイニシャライザをあなたの型の持つ&lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;実装内部から使うことで、あつらえのミラーを作成できます、とりわけコレクションであるあつらえの型に対して。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this initializer from within your type’s &lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt; implementation to create a customized mirror.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、このイニシャライザをあなたの型の持つ&lt;c0&gt;custom&lt;w1&gt;Mirror&lt;/w1&gt;&lt;/c0&gt;実装内部から使うことで、あつらえのミラーを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this method to randomize the elements of a collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるコレクションの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use this method to randomize the elements of a sequence when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるシーケンスの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use types that conform to the &lt;c0&gt;Set&lt;w1&gt;Algebra&lt;/w1&gt;&lt;/c0&gt; protocol when you need efficient membership tests or mathematical set operations such as intersection, union, and subtraction.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが&lt;c0&gt;Set&lt;w1&gt;Algebra&lt;/w1&gt;&lt;/c0&gt;プロトコルに準拠する型を使うのは、あなたが帰属について能率的にテストするか、数学的集合演算たとえば交叉、合併、そして差分を必要とする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You won’t create a header file; Xcode generates a header automatically in case you need to reference it.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはヘッダ・ファイルを作成しません；あなたがそれに参照をつける必要がある場合に備えて、Xcodeが自動的にヘッダを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You'll need to consider this kind of time-based execution problem frequently when using APIs that take closures.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、クロージャを取るAPIを使う場合に、この種の時間基盤の実行問題をしばしば考える必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You've ever added cases to an enumeration after its initial declaration</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたが決してケース節を、ある列挙に対してそれの最初の宣言の後に加えないならば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Your own custom types can be hashable as well.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなた独自のあつらえの型も同様にハッシュ化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You’d like to create a set of the grid points where a user has already tapped.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、ユーザがすでにタップしたところの格子点ひとそろいを作成したいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You’ll replace the &lt;c0&gt;.m&lt;/c0&gt; and &lt;c1&gt;.h&lt;/c1&gt; files for that class with a single &lt;c2&gt;.swift&lt;/c2&gt; file.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたは、そのクラスのための&lt;c0&gt;.m&lt;/c0&gt;と&lt;c1&gt;.h&lt;/c1&gt;ファイルを単一の&lt;c2&gt;.swift&lt;/c2&gt;ファイルで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You’re tasked with finding the day with the most absences in the second half of the session.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>あなたはこの学期の後半において最も多く欠席者がいる日付を見つける任務を負います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is a multiple of everything because &lt;e9&gt;0 = 0*x&lt;/e9&gt; for any integer &lt;e10&gt;x&lt;/e10&gt;.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロはあらゆるものの倍数です、なぜなら&lt;e9&gt;0 = 0*x&lt;/e9&gt;なので、どんな整数&lt;e10&gt;x&lt;/e10&gt;に対してもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is neither a normal nor a subnormal number.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロは、ノーマルでもサブノーマル数でもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zero is the identity element for addition.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>ゼロは加算に対する単位元です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>_TtCs11_AnyKeyPath is the mangled name for Swift._AnyKeyPath.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>_TtCs11_AnyKeyPath は、Swift._AnyKeyPath をめちゃめちゃにした名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a pointer to a null-terminated sequence of UTF-8 code units:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>null終端された一連のUTF-8コード単位へのあるポインタ：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a single Unicode scalar value, under very limited circumstances:</seg>
      </tuv>
      <tuv lang="ja">
        <seg>単一のユニコードスカラー値、非常に制限された状況のもとで：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>if this set and &lt;c0&gt;other&lt;/c0&gt; contain elements that are equal but distinguishable (e.g. via &lt;c1&gt;===&lt;/c1&gt;), which of these elements is present in the result is unspecified.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>この集合と&lt;c0&gt;other&lt;/c0&gt;が等しいけれども区別可能な要素を含むならば（たとえば&lt;c1&gt;===&lt;/c1&gt;によって）、それらの要素のどれが結果の存在するのかは不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Pseudo-NaNs”, “pseudo-infinities”, and “unnormals” are interpreted as non-canonical NaN encodings.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>“Pseudo-NaN”、“pseudo-infinitie”、そして“unnormal”は、非正準NaNエンコーディングとして解釈されます。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Pseudo-denormals” are interpreted as non-canonical encodings of subnormal values.</seg>
      </tuv>
      <tuv lang="ja">
        <seg>“Pseudo-denormal”は、非正規化数値の非正準エンコーディングとして解釈されます。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
