<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.1.5_0_10419" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>(An enum without associated values has Equatable conformance even without the declaration.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（関連値なしでのenumは、Equatable準拠をたとえ宣言なしでも持ちます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(An enum without associated values has Hashable conformance even without the declaration.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（関連値なしでのenumは、Hashable準拠をたとえ宣言なしでも持ちます。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Enumerations without associated values have Equatable and Hashable conformance even without declaring adoption.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（関連値なしの列挙は、EquatableおよびHashable準拠を持ちます、たとえ採用を宣言することなしでも。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Irreflexivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Reflexivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（反射性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Symmetry)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（対称性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(These may become compile-time errors in the future.)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（それらはコンパイル時エラーに将来はなるかもしれません。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Transitive comparability)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（推移的比較性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Transitive incomparability)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（推移的比較不能性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Transitivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>（推移性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>*</seg>
      </tuv>
      <tuv lang="JA">
        <seg>*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/   than or equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/   ゼロより大きいか等しくなければならない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'firstCopy' と 'secondCopy' は [1, 2, 3, 4, 5] です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'intPointer' points to memory initialized with [10, 20, 30, 40]</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'intPointer' は [10, 20, 30, 40] で初期化されるメモリを指し示します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'numbers' is [100, 200, 300, 4, 5]</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'numbers' は [100, 200, 300, 4, 5] です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'p' has a binary representation of 11111110_00001100</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'p' はバイナリ表現 11111110_00001100 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'q' has a binary representation of 00001100</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'q' はバイナリ表現 00001100 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'rawPointer' points to memory initialized with `Int` values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'rawPointer' は `Int` 値で初期化されるメモリを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'u' has a binary representation of 00010101</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'u' はバイナリ表現の 00010101 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'v' has a binary representation of 00000000_00010101</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'v' はバイナリ表現の 00000000_00010101 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'w' has a binary representation of 11101011</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'w' はバイナリ表現の 11101011 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'x' has a binary representation of 11111111_11101011</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'x' はバイナリ表現の 11111111_11101011 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ 'y' has a binary representation of 11111111_11101011</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'y' はバイナリ表現の 11111111_11101011 を持ちます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ - Complexity: O(n)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ - 計算量: O(n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ - Parameter element: The element to set the new count on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ - パラメータ element: 新しく数えることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ - Parameter n: The new count for `element`. `n` must be greater</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ - パラメータ n: `element`に対する新しい総数。`n`は</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ -500 is not representable as a 'UInt32' instance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ -500 は、 'UInt32' インスタンスとして表現可能ではありません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ A floating-point value initialized using an integer literal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 整数リテラルを使って初期化される浮動小数点値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ A for-in loop over 'ranges' accesses each range:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 「ranges」に対するfor-inループは、各範囲にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ A point in an x-y coordinate system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ x-y座標システムでのある点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ A position in an x-y coordinate system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ xy座標系におけるある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ A set is never a strict subset of itself:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ A集合は決してそれ自身の狭義の下位集合ではありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ A set is never a strict superset of itself:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ A集合は決してそれ自身の狭義の上位集合ではありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Accessing 'numberPointer' is undefined behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'numberPointer' へのアクセスは未定義挙動となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ All properties are *computed* based on members of the Header</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ すべてのプロパティは「ヘッダ」のメンバに基づいて*計算*されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ All successes are equivalent, so none is before any other</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ すべての成功は等しい、なので何か他の前に来るものはありません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Alternative code for earlier versions of iOS.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 以前のバージョンのiOSに対する代替コード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ An array of 'Double'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 「Double」の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ An array of 'Int'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'Int' の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ An array of 'Int' elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'Int' 要素の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ An array of 'String' elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'String' 要素の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ An integer type with reference semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 参照意味論を持つ整数型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Ben's family is moving to another state</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ベンの家族は別の州に引っ越そうとしています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Can only ship standard or priority to PO Boxes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 標準または優先のみが私書箱に出荷できるなら</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Chained operations on self are lazy, too</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ さらに、self に鎖状に繋がれた演算も遅延です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Characters out of bounds</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 文字列が範囲外</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Code placed below this line runs only if the lottery was won.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ この行より下に置かれるコードは、宝くじが当たった後にのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Comparing with the equal-to operator never returns 'true'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 同等演算子で比較することは決して'true'を返しません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Creates a key path from `Array&lt;Int&gt;` to `Int`</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ `Array&lt;Int&gt;` から `Int` へのキーパスを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Do something else</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 何か他のことをする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Don't use 'reserveCapacity(_:)' like this</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/  'reserveCapacity(_:)' をこのように使わないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Equivalent to the C 'ceil' function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ C 'ceil'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Equivalent to the C 'floor' function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ C 'floor'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Equivalent to the C 'round' function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ C 'round'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Equivalent to the C 'trunc' function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ C 'trunc'関数の等価物：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Error: ...outside the representable range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: ...表現可能な範囲の外側</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Error: ...the result would be less than UInt.min</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: ... 結果がUInt.minより少なくなっている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Error: Double value cannot be converted...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: Double値が変換できない...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Error: Not enough bits to represent the given value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: 与えられた値を表すのに十分なビットがない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Error: Not enough bits to represent...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: 表すのにビットが足りない...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Eventually prints "A"</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ そのうち "A" を印字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Finding the alignment of a type directly</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ある型のアラインメントを直接に見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Finding the alignment of a value's type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ある値の持つ型のアラインメントを見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Finding the size of a type directly</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ある型のサイズを直接に見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Finding the size of a value's type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ある値の持つ型のサイズを見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Finding the stride of a type directly</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ある型のストライドを直接に見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Finding the stride of a value's type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 値の持つ型のストライドを見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Immedately prints "D"</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ すぐに "D" を印字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Immediately prints "B"</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ すぐに "B" を印字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Immediately prints "C"</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ すぐに "C" を印字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Includes whitespace</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 空白を含む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Incorrect exponent format</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 不正な指数形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Interleave two sequences that yield the same element type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 同じ要素型を生み出す２つのシーケンスを交互に重ねます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Invalid character</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 無効な文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Invalid format</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 無効な形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Iterate over all powers of two (ignoring overflow)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ２の階乗すべてにわたって繰り返します（オーバーフローは無視します）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Keeping existing value for key "a":</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 既存の値をキー"a"に対して持ち続ける:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Load a value from the last two allocated bytes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 最後の２つのアロケート済みバイトから値をロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Load a value from the memory referenced by 'bytesPointer'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'bytesPointer' によって参照されるメモリから値をロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Load the first value in memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ メモリ中の最初の値をロードします</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Load the third value in memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ メモリ中の第３の値をロードします</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Modifications to an instance are visible from either array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ あるインスタンスへの修正はどちらの配列からも見ることができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Mutation through the key path</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ キーパスを通した変化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Mutation through the offset pointer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ オフセットポインタを通した変化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Order errors before successes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 成功の前にエラーを並べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Order errors by code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラーをコードによって並べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Out of range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 範囲外</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Overflow error</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ オーバーフローエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Performs an intersection with an Array&lt;Int&gt;</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ あるArray&lt;Int&gt;との共通部分を求める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Prevent the program from exiting immediately if you're running this code in Terminal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ あなたがこのコードをTerminalで実行するならば、プログラムがすぐに終了するのを防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Prints "The two groups start the same."</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 「２つのグループは同じものから始まります」を出力します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Prints "false" because `Int` and `UInt8` are different types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 「false」を出力します、`Int` と `UInt8` は異なる型であるから</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Replacements, additions, and removals are still visible</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 取替、追加、そして削除もやはり見えますが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Returns a sequence containing the results of</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 次の結果を含んでいるシーケンスを返してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Returns an array containing the results of</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 以下の結果を含んでいる配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Shortened forms are preferred</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 短縮形式が好まれます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Store the three traffic light color options as 0, 1, and 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ３つの信号機色オブションを 0, 1, そして 2 として格納する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Taking the new value for key "a":</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 新しい値をキー"a"に対してとる:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Test with the 'isNaN' property instead</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 代わりに'isNaN'プロパティでテストしてください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Tests whether primes is a subset of a Range&lt;Int&gt;</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ primesが、あるRange&lt;Int&gt;の下位集合かどうかテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ The full type name is also allowed</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 完全な型名も受け入れられます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ The next result of next().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ next() の次の結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ The storage for 'numbers' is copied here</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'numbers' のストレージはここでコピーされます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ The underlying iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 基底イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ This might be an invalid value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ これは無効な値かもしれません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ This might be an invalid value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ これは無効な値かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Triggers runtime error: Index out of range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 実行時エラーの引き金となります：範囲外インデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Triggers the observer's change handler.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ オブザーバの変更ハンドラを作動させる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Type inferred as 'Double'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 型は「Double」と推論される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Type inferred as 'Int'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'Int' と型推論されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Updates the count stored in the set for the given element,</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 与えられた要素に対して集合の中に格納された総数を更新しながら、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Use 'abs(_:)' instead of 'magnitude'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'abs(_:)' を 'magnitude' の代わりに使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Use 'joined()' to access each element of each range:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 「joined()」を使うことで、各範囲の各要素にアクセスしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Use iOS 11 APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ iOS 11 APIを利用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ Walk the elements of a tree from a node up to the root</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ あるツリーの要素をあるノードからルートへとさかのぼって移動します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ William is signing up for a different class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ウィリアムは違うクラスを受講します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ You get 10 chances at winning.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ あなたは当選する10回の機会があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ adding the element if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 必要なら要素を追加する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ addressable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ アドレス指定可能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ blue is 0, green is 1, and new favorite colors could follow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 青は 0、緑は 1、そして新しいお気に入りの色を続けられます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ error: cannot convert value of type '[String?]' to type 'NSArray'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー：型 '[String?]' の値を型 'NSArray' に変換することはできません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ error: cannot convert value of type '[String]' to specified type 'Set'</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー：型 '[String]' の値を型 'Set' に変換することはできません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ error: closure use of non-escaping parameter 'predicate'...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: 非脱出パラメータ 'predicate' のクロージャ使用 ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ error: passing non-escaping parameter 'f'...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: 非脱出パラメータ 'f' を渡している...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ error: passing non-escaping parameter 'g'...</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ エラー: 非脱出パラメータ 'g' を渡している...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ extend 'r' to fill 16 bits</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'r' を 16ビットを満たすように拡張します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ for each prefix `p` of `self`, in order from shortest to</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ これは「self」の各接頭辞「p」に対して、順番を最短から</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ fractional value, representable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 小数値、表現可能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ implementation details</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 実装詳細</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ integral value, nonrepresentable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 整数値、表現不可能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ integral value, representable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 整数値、表現可能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ longest.  For example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 最長へです。例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ node is leaf, then leaf.parent, then leaf.parent.parent, etc.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ nodeはleafです、それからleaf.parent、その次にleaf.parent.parent、等々。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ not addressable: computed property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ アドレス指定可能でない：計算プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ not addressable: didSet handler</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ アドレス指定可能でない：didSetハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ number == -3, perhaps</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ number == -3、たぶん</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ only in the modified array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ ただ修正された配列においてのみです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ truncate 'q' to fit in 8 bits</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ 'q' を 8ビットに合うように切り詰めます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/ value is 1, then 2, then 4, then 8, etc.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/ valueは１です、それから２、その次に８、等々。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table 1 lists the prefix operators, Table 2 lists the postfix operators, and Table 3 lists the infix operators, including their associativity and precedence group.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表 1は、前置演算子を一覧にします、表 2は後置演算子を一覧にします、そして表 3は中置演算子を一覧にします、それらの結合性と優先順位グループを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(true, newMember) if newMember was not contained in self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>(true, newMember)、もしnewMemberがselfに含まれなかったならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(true, newMember) if newMember was not contained in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>(true, newMember)、もしnewMemberがこの集合の中に含まれなかったならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-infinity compares less than all values except for itself and NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-infinityは、それ自身とNaNを除くすべての値より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-infinity compares less than or equal to all values except NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-infinityは、NaNを除くすべての値より少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AnyObject can also be used as the concrete type for an instance of a type that bridges to an Objective-C class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyObjectはまた、Objective-Cクラスへとブリッジするある型のインスタンスに対する具象型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ArraySlice instances are not always indexed from zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArraySliceインスタンスは、常にゼロからインデックスをつけられるわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bool represents Boolean values in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Boolはブール値をSwiftにおいて表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CGPoint, CGSize, and CGRect</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CGPoint、CGSize、およびCGRect</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Codable is a type alias for the Encodable and Decodable protocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Codableは、EncodableとDecodableプロトコルに対する型エイリアスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Date and NSDate</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DateおよびNSDate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DefaultStringInterpolation extensions should add only mutating members and should not copy self or capture it in an escaping closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DefaultStringInterpolation拡張は、mutatingメンバだけを加えるべきです、そして脱出クロージャにおいてselfをコピーまたはそれをキャプチャすべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EmptyCollection does not have any element indices, so it is not possible to advance indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>EmptyCollectionは、全く要素インデックスを持ちません、それでインデックスを進めることは可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EnumeratedSequence is a sequence of pairs (n, x), where ns are consecutive Int values starting at zero, and xs are the elements of a base sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>EnumeratedSequenceは、ペア (n, x) からなるシーケンスです、ここでnはゼロで始まる連続したIntです、そしてxは基盤シーケンスの要素です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float80.significandBitCount is 63, even though 64 bits are used to store the significand in the memory representation of a Float80 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Float80.significandBitCountは63です、たとえ64ビットが使用されて仮数をFloat80インスタンスのメモリ表現に格納するとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float and Double</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatおよびDouble</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hashable conformance means that you can store positions in a set and quickly check whether you've visited a position before, as shown in the following example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hashable準拠は、あなたが集合の中の位置を格納して前にあなたが訪れた位置かどうかを素早く確認できることを意味します、以下の例で示すように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hasher can be used to map an arbitrary sequence of bytes to an integer hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hasherは、随意のバイト列を整数ハッシュ値へとマップするのに使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hasher is usually randomly seeded, which means it will return different values on every new execution of your program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hasherは、ふつうは無作為にシードを決められます、それはあなたのプログラムの新規の実行ごとに異なる値が返されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int, UInt, and the other standard library integer types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int、UInt、そして他の標準ライブラリの整数型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IteratorOverOne is the iterator for the CollectionOfOne type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IteratorOverOneは、CollectionOfOne型のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NS_CLOSED_ENUM for simple enumerations that can never gain new cases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_CLOSED_ENUMを決して新しいケース節が増えることが出来ない単純な列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NS_ENUM for simple enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_ENUMを単純な列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NS_OPTIONS for enumerations whose cases can be grouped into sets of options</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_OPTIONSを、それのケース節がひとそろいのオプションへとグループにできる列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NS_TYPED_ENUM for enumerations with a raw value type that you specify</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_TYPED_ENUMを、あなたが指定する生の値型を使う列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NS_TYPED_EXTENSIBLE_ENUM for enumerations that you expect might gain more cases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_TYPED_EXTENSIBLE_ENUMを、もっとケース節が増えることをあなたが予想する列挙に対して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSBezierPath and UIBezierPath</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSBezierPathおよびUIBezierPath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSColor, UIColor, CGColor, and CIColor</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSColor、UIColor、CGColor、およびCIColor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSImage, UIImage, CGImage, and CIImage</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSImage、UIImage、CGImage、およびCIImage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSObject subclasses inherit conformance to the Equatable and Hashable protocols, with equality based on instance identity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectサブクラスは、EquatableとHashableプロトコルへの準拠を継承します、インスタンス同一性に基づく同等性を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NSView and UIView</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSViewおよびUIView</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range instances can represent an empty interval, unlike ClosedRange.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Rangeインスタンスは、空の間隔を表すことができます、ClosedRangeとは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String and NSString</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringおよびNSString</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SystemRandomNumberGenerator is automatically seeded, is safe to use in multiple threads, and uses a cryptographically secure algorithm whenever possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SystemRandomNumberGeneratorは、自動的にシードをえらびます、複数のスレッドにおける使用を安全にします、そして可能な時はいつでも暗号化保安アルゴリズムを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T.min.isMultiple(of: -1) is true for signed integer T, even though the quotient T.min / -1 is not representable in type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>T.min.isMultiple(of: -1)はtrueです、符号付き整数Tに対して、たとえ商T.min / -1が型Tで表現可能でなくてさえ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>URL and NSURL</seg>
      </tuv>
      <tuv lang="JA">
        <seg>URLおよびNSURL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt; a is always false (Irreflexivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>a &lt; aは常にfalse（非反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt; b and b &lt; c implies a &lt; c (Transitivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>a &lt; bかつb &lt; cはa &lt; cを意味する（推移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a &lt; b implies !(b &lt; a) (Asymmetry)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>a &lt; bは!(b &lt; a)を意味する（非対称）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a == a is always true (Reflexivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>a == aは、常にtrue（反射）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a == b and b == c implies a == c (Transitivity)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>a == bかつb == cは、a == cを意味する（推移）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a == b implies b == a (Symmetry)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>a == bは、b == aを意味する（対称）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ancestorRepresentation is ignored if subject is not a class instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ancestorRepresentationは、subjectがクラスインスタンスでないならば無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>appendInterpolation methods should return Void and should not be static.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>appendInterpolationメソッドは、Voidを返すべきです、そしてstaticであるべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>areEquivalent(a, a) is always true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areEquivalent(a, a)は常にtrueである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>areEquivalent(a, b) implies areEquivalent(b, a).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areEquivalent(a, b)はareEquivalent(b, a)を意味する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>areInIncreasingOrder(a, a) is always false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areInIncreasingOrder(a, a)は常にfalseである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>areInIncreasingOrder must be a strict weak ordering over the elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areInIncreasingOrderは、それら要素に対して厳密弱順序でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>as, as?, and as!</seg>
      </tuv>
      <tuv lang="JA">
        <seg>as, as?, および as!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>body is executed each time the next() method is called on the resulting iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyは、結果として生じるイテレータでnext()メソッドが呼び出されるたびに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>byteCount must not be negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>byteCountは、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c.lazy.reversed().map(f) maps lazily and returns a LazyMapCollection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>c.lazy.reversed().map(f)は遅延にマップしてLazyMapCollectionを返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c.reversed().map(f) maps eagerly and returns a new array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>c.reversed().map(f)は、先行にマップして新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c.reversed() does not create new storage</seg>
      </tuv>
      <tuv lang="JA">
        <seg>c.reversed()は、新しいストレージを作成しません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>condition is not evaluated in -Ounchecked builds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>conditionは、-Ouncheckedビルドにおいては評価されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>condition is only evaluated in playgrounds and -Onone builds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>conditionはただプレイグラウンドと-Ononeにおいて評価されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>count must not be negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countは、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>defaultValue and optional have the same type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>defaultValueとoptionalは同じ型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>defaultValue is the same type as the Wrapped type of optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>defaultValueは、optionalのWrapped型と同じ型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>elements must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementsは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end is an element of the resulting sequence if and only if it can be produced from start using steps of stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endは、それがstartからstrideの間隔を使って生成可能であるときかつその場合に限り、結果のシーケンスの要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end is never an element of the resulting sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endは、決して結果シーケンスの要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end must be a valid index of the collection that is not equal to the endIndex property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endはコレクションの有効なインデックスで、endIndexプロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endはコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>endIndex is always reachable from startIndex by zero or more applications of index(after:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endIndexは、常にstartIndexからindex(after:)のゼロまたはそれ以上の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>endIndex is not a valid argument to subscript, and is always reachable from startIndex by zero or more applications of index(after:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endIndexはsubscriptに対する有効な引数ではありません、そして常にstartIndexからゼロまたはそれ以上のindex(after:)の適用によって到達可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greatestFiniteMagnitude.ulp is a finite number, even though the next greater representable value is infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>greatestFiniteMagnitude.ulpは有限数です、たとえ次のより大きい表現可能な値がinfinityであるとしても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hashValue is deprecated as a Hashable requirement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hashValueは、Hashable要件として非推奨にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iは0でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iは1でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be a valid index of the string that is not equal to the string’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iは、この文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be greater than startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iはstartIndexより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be in the range 0..&lt;count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iは、範囲0..&lt;countの中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be less than endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iはendIndexより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i must be less than the string’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iは文字列の末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be a valid index into the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexはコレクションに対する有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be a valid index of the array or equal to its endIndex property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexは、配列の有効なインデックスまたはそれのendIndexプロパティでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be a valid index of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexは配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexは、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexはコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be a valid index of the dictionary, and must not equal the dictionary’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexは辞書の有効なインデックスでなければなりません、そして辞書の末尾インデックスと同じではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>index must be greater than or equal to startIndex and less than endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexは、startIndexより大きいか等しくそしてendIndexより小さくなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>initialResult is passed to nextPartialResult the first time the closure is executed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initialResultはnextPartialResultに、クロージャが実行される最初の時に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>input must be the same iterator instance in repeated calls to this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>inputは、このメソッドに対して繰り返される呼び出しにおいて同じイテレータでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>isKnownUniquelyReferenced(_:) checks only for strong references to the given object—if object has additional weak or unowned references, the result may still be true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isKnownUniquelyReferenced(_:)は与えられたオブジェクトに対する強い参照に対してのみ確認します — objectがさらに弱いまたは非所有参照を持つ場合、結果は依然としてtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>k must be greater than or equal to zero and must not exceed the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>kは、ゼロより大きいか等しくなければなりません、そしてコレクションの中の要素の数を越えてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>kは、ゼロより大きいか等しくなければなりません、そしてコレクションの要素数より少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>k must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>kは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>length is the number of underlying code units consumed by this error, guaranteed to be greater than 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>lengthは、このエラーによって消費される、基礎をなすコード単位の数です、０より大きいことを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>maxLength must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maxLengthは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>n may be positive, negative, or zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nは整数、負数、またはゼロであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>n must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil has a specific meaning in Swift—the absence of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilはSwiftでは特別な意味を持ちます—値の不在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil, which gets passed as a null pointer,</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil、それはヌルポインターとして渡されます、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>offset must be nonnegative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>offsetは、非負でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>position must be a valid index of the collection that is not equal to the endIndex property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionはコレクションの有効なインデックスで、endIndexプロパティと等しくないものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>position must be a valid index of the collection that is not equal to the collection’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionは、このコレクションの有効なインデックスでなければなりません、そしてこのコレクションの持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>position must be a valid index of the dictionary and not equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionは、この辞書の有効なインデックスで、endIndexと等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>position must be a valid index of the range, and must not equal the range’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionは、この範囲の有効なインデックスでなければなりません、そしてこの範囲の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>position must be a valid index of the set, and must not be equal to the set’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionは、この集合の有効なインデックスでなければなりません、そしてこの集合の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>position must be less than the view’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionはこのビューの末尾インデックスより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>possibleStrictSubset must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>possibleStrictSubsetは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>possibleStrictSuperset must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>possibleStrictSupersetは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>possibleSuperset must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>possibleSupersetは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>radix must be at least 2 and at most 36.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>radix基数は少なくとも２そして多くて36でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range must be finite and non-empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rangeは有限でそして空でない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>range must not be empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rangeは空であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s.joined().map(f) maps eagerly and returns a new array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>s.joined().map(f)は先行にマップを行い、新しい配列を返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s.joined() does not create new storage</seg>
      </tuv>
      <tuv lang="JA">
        <seg>s.joined()は新しいストレージを作りません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s.lazy.filter { ... }, for an arbitrary sequence s, is a LazyFilterSequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>s.lazy.filter { ... }は、随意のシーケンスsのための、ひとつのLazyFilterSequenceです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s.lazy.joined().map(f) maps lazily and returns a LazyMapSequence</seg>
      </tuv>
      <tuv lang="JA">
        <seg>s.lazy.joined().map(f)は遅延にマップして、LazyMapSequenceを返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>source must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceは、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>source must be representable in this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceは、この型で表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>source.count must be less than or equal to this buffer’s count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>source.countは、このバッファのcountと等しいかより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>start must be a valid index of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startはコレクションのひとつの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>transformはこのシーケンスのひとつの要素をそれのパラメータとして受け取り、同じもしくは異なる型の変換された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>transform accepts each value of the dictionary as its parameter and returns a transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>transformは、辞書の各値をそれのパラメータとして受け取って、同じまたは異なる型の変換した値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>transform accepts each value of the dictionary as its parameter and returns an optional transformed value of the same or of a different type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>transformは辞書の各値をそれのパラメータとして受け取ります、そして同じまたは異なる型のあるオプショナルの変換済みの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if byte is a continuation byte; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>byteが継続バイトならばtrue；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if element is contained in the range expression; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしelementがこの範囲式に含まれるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if element is contained in the range; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしelementがこの範囲に含まれるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if i has been offset by exactly distance steps without going beyond limit; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしiが正確にdistance幅だけlimitを越えていくことなく補われたならば；そうでなければ、falseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if lhs is greater than or equal to rhs; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを、lhsがrhsより大きいか等しいならば返します；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if member exists in the set; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしmemberがこの集合に含まれるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if object is known to have a single strong reference; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objectが強い参照をただ１つだけ持つものと知られているならばtrue；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if other has the same value as this instance; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしotherがこのインスタンスと同じ値を持つならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if other is greater than this value; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしotherがこの値より大きいならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if other is less than this value; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしotherがこの値より小さいならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if x is a high-surrogate code unit; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが高位サロゲートコード単位ならばtrue；そうでなけれぱfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if x is a low-surrogate code unit; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが低位サロゲートコード単位ならばtrue；そうでなけれぱfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if both t0 and t1 are nil or if they represent the same type; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしt0とt1がnilならば、またはそれらが同じ型を表すならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if one, but not both, of t0 and t1 are nil, or if they represent different types; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしt0とt1の１つが、しかし両方でなくnilならば、またそれらが異なる型を表すならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the lhs and rhs have the same elements; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、lhsとrhsが同じ要素を持つならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the element was found in the sequence; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素がシーケンスにおいて見つけられなかったならば、true；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしシーケンスの冒頭の要素がpossiblePrefixの要素と等しいならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしシーケンスの冒頭の要素がpossiblePrefixの要素と同じならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the option set contains member; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしオプションセットがmemberを含むならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the sequence contains an element that satisfies predicate; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスがpredicateを満たす要素を含むならばtrue；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the sequence contains only elements that satisfy predicate; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしシーケンスがpredicateを満たす要素のみを含むならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set has no elements in common with other; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、この集合がotherと共通の要素を持たないならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a strict subset of other; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこの集合がotherの狭義の部分集合ならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a strict superset of other; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、この集合がotherの狭義の上位集合であるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a strict superset of possibleStrictSubset; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこの集合がpossibleStrictSubsetの狭義の上位集合であるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a subset of other; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、この集合がotherの部分集合ならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a subset of possibleSuperset; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこの集合がpossibleSupersetの部分集合ならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a superset of other; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、この集合がotherの上位集合であるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the set is a superset of possibleSubset; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、この集合がpossibleSubsetの上位集合であるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the string begins with prefix; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、文字列がprefixで始まるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the string ends with suffix; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もし文字列がsuffixで終わるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if the translation detected encoding errors in input; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もし翻訳がinputにおいてエンコーディングエラーを検出したならば；そうでなければfalse。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this range and other have at least one element in common; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこの範囲とotherが少なくとも１つの共通の要素を持つならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、このシーケンスとotherがareEquivalentを同等性テストとして使って同じ要素らを含むならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this sequence and other contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこのシーケンスとotherが同じ要素を同じ順序で含んでいるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこのシーケンスがotherに、areInIncreasingOrderによって並べられる通りの字典順序において先行するならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this sequence precedes other in a dictionary ordering; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこのシーケンスがotherに、ある字典順序において先行するならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this value is less than other; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、もしこの値がotherより少ないならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>true、この値が浮動小数点型の全順序においてotherと同じまたは下に順序付けられるならば；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true is the set is strict subset of possibleStrictSuperset; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueならばこの集合はpossibleStrictSupersetの狭義の部分集合です；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v must be a valid Unicode scalar value, in the ranges 0...0xD7FF or 0xE000...0x10FFFF.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>vは、有効なユニコードスカラー値、0...0xD7FFおよび0xE000...0x10FFFFの範囲でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value must be representable in this type after rounding toward zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueは、ゼロへの丸め後にこの型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>withoutActuallyEscaping(_:do:) provides a temporarily escapable copy of predicate that can be used in a call to the lazy view’s filter(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>withoutActuallyEscaping(_:do:)は、predicateの一時的な脱出可能コピーを提供します、それは遅延ビューのもつfilter(_:)メソッドに対する呼び出しにおいて使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x must be represented by a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xは、UTF-16でエンコードされる時あるサロゲートペアで表現されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.contains(e) &amp;&amp; y.contains(e) if and only if x.intersection(y).contains(e)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.contains(e) &amp;&amp; y.contains(e) は次の場合に限ります x.intersection(y).contains(e)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.contains(e) implies x.union(y).contains(e)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.contains(e) は暗黙的に x.union(y).contains(e)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isMultiple(of: 0) is true if x is zero and false otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isMultiple(of: 0)はtrueです、もしxがゼロであるならば、そしてそうでなければfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isStrictSubset(of: y) if and only if x.isSubset(of: y) &amp;&amp; x != y</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isStrictSubset(of: y) は次の場合に限ります x.isSubset(of: y) &amp;&amp; x != y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isStrictSuperset(of: y) if and only if x.isSuperset(of: y) &amp;&amp; x != y</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isStrictSuperset(of: y) は次の場合に限ります x.isSuperset(of: y) &amp;&amp; x != y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isSubset(of: y) if and only if y.isSuperset(of: x)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isSubset(of: y) は次の場合に限ります y.isSuperset(of: x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isSubset(of: y) implies x.union(y) == y</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isSubset(of: y) は暗黙的に x.union(y) == y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isSuperset(of: y) implies x.union(y) == x</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isSuperset(of: y) は暗黙的に x.union(y) == x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.union(y).contains(e) implies x.contains(e) || y.contains(e)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.union(y).contains(e) は暗黙的に x.contains(e) || y.contains(e)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>appendInterpolation methods can also throw; when a user uses one of these, they must mark the string literal with try or one of its variants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>appendInterpolationメソドはまたスローできます；ユーザがそれらの１つを使う場合、それらは文字列リテラルをtryまたはその変種の１つで印しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.isZero is equivalent to the following comparison: x == 0.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.isZeroは次の比較に相当するものです：x == 0.0。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Double is a binary floating-point type that has a radix of 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Doubleはバイナリ浮動小数点型で2の基数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equatable is also the base protocol for the Hashable and Comparable protocols, which allow more uses of your custom type, such as constructing sets or sorting the elements of a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatableはまた、HashableとComparableプロトコルのための基盤プロトコルです、それらはあなたのあつらえの型のさらなる利用を可能します、例えば集合の組み立てやコレクション要素のソートなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optional.none is equivalent to the nil literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Optional.noneは、nilリテラルに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>count must be zero or greater.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countは、ゼロまたはより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>count must not be negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countは負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceは、そのコレクションがBidirectionalCollectionプロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>n must not be negative unless the collection conforms to the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nは、そのコレクションがBidirectionalCollectionプロトコルに準拠するのでない限り、負であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>radix must be in the range 2...36.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>radixは、範囲2...36の中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rhs must not be zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsは、ゼロではなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s must contain exactly one extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sは、厳密に１つの拡張書記素クラスタを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>source.count must be less than or equal to this buffer’s count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>source.countは、このバッファのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sourcePosition must be a valid index of at least one of the views of target.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourcePositionは、targetの少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sum would be better implemented using reduce].</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sumは、reduceを使ってもっとよく実装されるでしょう。］</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type and the type of x must have the same size of memory representation and compatible memory layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>typeとxの型は、同じ大きさのメモリ表現を持ち、互換メモリレイアウトを持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>utf16Index must be an element of String(unicodeScalars).utf16.indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>utf16Indexは、String(unicodeScalars).utf16.indicesの要素でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AnyObject can be used as the concrete type for an instance of any class, class type, or class-only protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyObjectは、あらゆるクラス、クラス型、またはクラス専用プロパティのインスタンスに対する具象型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DefaultPrecedence has no associativity and a precedence immediately higher than TernaryPrecedence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DefaultPrecedenceは、TernaryPrecedenceのすぐ上の結合性と優先順位を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ShippingOptions includes a rawValue property of type Int that stores the bit mask of available shipping options.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ShippingOptionsは、型IntのrawValueプロパティを含みます、それは可能な出荷オプションのビットマスクを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>StaticString provides limited, pointer-based access to its contents, unlike Swift’s more commonly used String type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StaticStringは、制限された、ポインタに基づくアクセスをそれの内容に提供します、Swiftのより一般的なString 型とは違って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T may have a lower minimal alignment that trades runtime performance for space efficiency.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tは、空間能率に対する実行時性能と引き換えに、より低い極小のアラインメントを持ってもかまいません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>count must not be negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countは負数であってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>element is contained in the range if it is between the two bounds or equal to either bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementは、それが２つの境界の間またはどちらかの境界と等しいならば、その範囲に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>init(stringInterpolation:) should use these properties to initialize the instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init(stringInterpolation:)は、それらのプロパティを使ってインスタンスを初期化すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>maxSplits must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maxSplitsは、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>element is contained in the range if it is greater than or equal to the lower bound and less than the upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementが範囲の中のに含まれるのは、それが下方境界より大きいか等しく上方境界より少ない場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafePointer provides no automated memory management or alignment guarantees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafePointerは、自動メモリ管理またはアラインメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>for-in loops are safe in this regard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>for-inループはこの点に関して安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafeMutablePointer provides no automated memory management or alignment guarantees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutablePointerは、自動メモリ管理またはアラインメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>128.25 is rounded to 128, which is not representable as an Int8 instance, triggering a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>128.25は、128へ丸められます、それはInt8インスタンスによって表現可能ではなく、実行時エラーを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optional.some(Wrapped) stores a wrapped value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Optional.some(Wrapped)は、あるラップされた値を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BinaryFloatingPoint is implemented in the standard library by Float, Double, and Float80 where available.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BinaryFloatingPointは、標準ライブラリにおいてFloat、Double、そして利用可能なところではFloat80によって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RangeReplaceableCollection provides default implementations of all its other methods using this initializer and method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RangeReplaceableCollectionは、それの他のメソッドすべての省略時の実装をこのイニシャライザとメソッドを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ExpressibleByNilLiteral conformance for types that use nil for other purposes is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilを他の目的に使う型のためのExpressibleByNilLiteral準拠は、 推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initialized memory has a value that can be read using a pointer’s pointee property or through subscript notation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化済メモリは、pointeeプロパティまたは添え字表記法を使って読み出し可能な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signed integer types can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数型は、正および負の値の両方を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String interpolations are string literals that evaluate any included expressions and convert the results to string form.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列補間は文字列リテラルです、それは、何らかの含まれた式を評価して、その結果を文字列形式へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsigned integer types can represent only nonnegative values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なし整数型は、非負数のみ表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required. Default implementation provided.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必須。 省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required. Default implementations provided.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必須。 いくつかの省略時の実装の提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A  nonowning collection interface to the bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリのいち領域中のバイトに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 16-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>16ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 16-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>16ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 32-bit floating point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>32ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 32-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>32ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 32-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>32ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 64-bit floating point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>64ビット浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 64-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>64ビット符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A 64-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>64ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A ClosedRange instance contains both its lower and upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ClosedRangeインスタンスは、それの下方および上方境界の両方を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A ClosedRange instance contains both its lower bound and its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ClosedRangeインスタンスは、それの下側の境界とそれの上側の境界の両方を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Collection whose elements consist of those in a Base Collection passed through a transform function returning Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるCollection、その要素はBase Collectionの中のものから成り、Elementを返す変換関数を通して渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Range to convert to a ClosedRange instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるRange、ClosedRangeインスタンスへと変換することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Result instance with the result of evaluating transform as the new failure value if this instance represents a failure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるResultインスタンス、transformを評価する結果をもつ、もしこのインスタンスが失敗を表すならば新しい失敗値として。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Result instance with the result of evaluating transform as the new success value if this instance represents a success.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるResultインスタンス、transformを評価する結果をもつ、もしこのインスタンスが成功を表すならば新しい成功値として。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Result instance, either from the closure or the previous .success.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Resultインスタンス、クロージャまたは前の.successのどちらかから。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Sequence that can contain the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含むSequence。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Sequence whose elements consist of those in a Base Sequence passed through a transform function returning Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるSequence、それの要素はElementを返すある変換関数を通したBase Sequenceの中のものから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A String value, if Type is Int8 or UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String値、もしTypeがInt8またはUInt8ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A T was parsed successfully</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tがうまく構文解析された</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A UnicodeDecodingResult instance, representing the next Unicode scalar, an indication of an error, or an indication that the UTF sequence has been fully decoded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のユニコードスカラー、エラーの症状、またはUTFシーケンスが完全にデコードされた徴を表している、あるUnicodeDecodingResultインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Type] value, which is passed as a pointer to the start of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>[Type]値、それは配列の始まりへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ReversedCollectionインスタンスは、基礎をなすコレクションをラップして、それの要素へのアクセスを逆順で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Range instance does not contain its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Rangeインスタンスはそれの上方の境界を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A binade is a set of binary floating-point values that all have the same sign and exponent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>binadeは、バイナリ浮動小数点値の一揃いです、それは全てが同じ符号と指数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A decimal value contains the significand, a sequence of decimal digits that may include a decimal point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>10進の値は仮数、小数点を含んでも良い一連の10進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hexadecimal value contains the significand, either 0X or 0x, followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>16進数値は、仮数、0Xまたは0xのどちらかに続く16進の桁を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A normal value is a finite number that uses the full precision available to values of a type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ノーマル値は、有限数で、ある型の値に利用可能な完全な精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string literal is a series of characters enclosed in quotes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列リテラルは、引用符に囲まれた一連の文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subnormal value is a nonzero number that has a lesser magnitude than the smallest normal number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブノーマル値は、非ゼロ数で、最も小さいノーマル数よりも少ない規模を持つものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A trivial type can be copied bit for bit with no indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明な型は、ビット対ビットでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar has a “soft dot” that disappears when a diacritic is placed over the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>区別的発音符がスカラーにかぶせて置かれる時に姿を消す “ソフトドット” を、このスカラーが持つかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar has an emoji presentation, whether or not it is the default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがemoji提示物を持つかどうか、それが初期設定であるかそうでないか、を指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a default-ignorable code point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがある省略時無視可能なコード点かどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a diacritic.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが区別的発音符であるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a format control character that has a specific function in controlling cursive joining and ligation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのスカラーが特定の機能を筆記体の結合と合字の制御において持つ書式制御文字かどうかを指し示しているあるブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a format control character that has a specific function in the Unicode Bidrectional Algorithm.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがある特定の機能を「ユニコード双方向アルゴリズム」において持つ書式制御文字であるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a grapheme base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが書記素基底であるかどうかを指し示すあるブールのプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a grapheme extender.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが書記素拡張かどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a punctuation mark that generally marks the end of a sentence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが一般的に文の終わりを印する句読点符号であるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a punctuation symbol explicitly called out as a dash in the Unicode Standard or a compatibility equivalent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがユニコード標準またはある互換相当物においてダッシュとして明示的に召集される句読点シンボルであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a punctuation symbol that typically marks the end of a textual unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが概してテキスト単位の終わりを印する句読点シンボルであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a radical component of CJK characters, Tangut characters, or Yi syllables.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがCJK文字、西夏（タングート）文字、またはイ文字音節の根本的な構成要素かどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a variation selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが異体字セレクタであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is a whitespace character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが空白文字であるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is alphabetic.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがアルファベットであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is an ASCII character commonly used for the representation of hexadecimal numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが16進数の表現に一般に使われるASCII文字であるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is an ideographic description character that determines how the three ideographic characters or ideographic description sequences that follow it are to be combined to form a single character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが３つの表意文字またはそれに続く表意文字記述シーケンスが結び付けられて単一の文字を形成する方法を決定する表意文字記述文字かどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is an ideographic description character that determines how the two ideographic characters or ideographic description sequences that follow it are to be combined to form a single character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが２つの表意文字またはそれに続く表意文字記述シーケンスが結び付けられて単一の文字を形成する方法を決定する表意文字記述文字かどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is considered to be a CJKV (Chinese, Japanese, Korean, and Vietnamese) or other siniform (Chinese writing-related) ideograph.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのスカラーが、CJKV（中国語、日本語、朝鮮語、そしてベトナム語）または他のスィーニー体（中国語筆記関連）表意文字であると考えられるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is considered to be either lowercase, uppercase, or titlecase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがローワーケース、アッパーケース、またはタイトルケースのどれかであると考えられるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is deprecated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが非推奨であるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is excluded from composition when performing Unicode normalization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがユニコード正規化を実行する時に構成から除外されるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is ignored for casing purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがケーシング意図に対して無視されるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is mirrored in bidirectional text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが双方向テキストにおいて正確に映し出されるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one of the unified CJK ideographs in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがユニコード標準における統一CJK表意文字の１つであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one that can modify a base emoji that precedes it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがそれに先行するある基底emojiを修正できるものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one that is commonly used for the representation of hexadecimal numbers or a compatibility equivalent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが16進数の表現またはある互換相当物に一般に使われるものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one that is not identical to its NFKC case-fold mapping.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのスカラーが、それのNFKCケースフォルド・マッピングと同一ではないものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one that is used in writing to surround quoted text.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが引用テキストを囲むために筆記において使われるものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one that naturally appears in mathematical contexts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが数学的文脈において自然に現れるものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one that should be rendered with an emoji presentation, rather than a text presentation, by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが初期状態で、テキスト提示物ではなく、emoji提示物で描出されるべきものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one which is recommended to be allowed to appear in a non-starting position in a programming language identifier, with adjustments made for NFKC normalized form.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがプログラム言語識別子において始まりでない位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブールプロパティ、NFKC正規化形式に対する調整がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one which is recommended to be allowed to appear in a non-starting position in a programming language identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがプログラム言語識別子において始まりでない位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one which is recommended to be allowed to appear in a starting position in a programming language identifier, with adjustments made for NFKC normalized form.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがプログラム言語識別子において始まりの位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブールプロパティ、NFKC正規化形式に対する調整がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one which is recommended to be allowed to appear in a starting position in a programming language identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがプログラム言語識別子において始まりの位置で現れるのを許可されることを推奨されるものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is one whose appearance can be changed by an emoji modifier that follows it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがそれに続くあるemoji修飾子によってそれの外観が変更可能なものであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is permanently reserved for internal use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーが内部的な利用に対して永続的に予約されるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is recommended to be treated as whitespace when parsing patterns represented in source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがソースコードにおいて表されるパターンを構文解析する時に空白として扱われることを推奨されるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar is recommended to have syntactic usage in patterns represented in source code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがソースコードにおいて表されるパターンで統語論的な利用法を持つことを推奨されるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar may change when it undergoes case mapping.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがケースマッピングを受ける時に変化するかもしれないかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar requires special handling for operations involving ordering, such as sorting and searching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーがソートおよび検索のような順序付けを発動する演算に対して特別な取り扱いを要求するかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s letterform is considered lowercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ字形がローワーケースと考えられるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s letterform is considered uppercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ字形がアップケースと考えられるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s normalized form differs from the lowercaseMapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーのlowercaseMappingと異なるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s normalized form differs from the titlecaseMapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーのtitlecaseMappingと異なるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s normalized form differs from the uppercaseMapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ正規化形式が、各構成スカラーのuppercaseMappingと異なるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s normalized form differs from the case-fold mapping of each constituent scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ正規化形式が各構成スカラーのケースフォルド・マッビングと異なるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean property indicating whether the scalar’s principal function is to extend the value or shape of a preceding alphabetic scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのもつ主要機能が先行するアルファベットのスカラーの値や形状を拡張することであるかどうかを指し示すブールプロパティ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether a string has no characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列が文字をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the Unicode scalar is an ASCII character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このユニコードスカラーがあるASCII文字であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the collection is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the instance is NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがNaN（非数）であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the instance is a signaling NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがsignaling NaNであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the instance is equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがゼロと等しいかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the instance is infinite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスが無限大であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the instance is subnormal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがサブノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the instance’s representation is in the canonical form.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスの表現が正準形式であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the range contains no elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲が何の要素も含まないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether the static string stores a pointer to ASCII or UTF-8 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列がASCIIまたはUTF-8コードユニットへのポインタを格納しているかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether there are no more elements left to be decoded in the container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンテナの中にデコードされるための要素がこれ以上残ってないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether this instance is finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスが有限であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether this instance is normal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがノーマルであるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value indicating whether this type is a signed integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型が符号付き整数型であるかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value that indicates whether the dictionary is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書が空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value that indicates whether the set has no elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合が要素をひとつも持たないかどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value that indicates whether the set is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合が空かどうかを指し示すブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Boolean value that is true if the static string stores a pointer to ASCII code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列がASCIIコードユニットへのポインタを格納するならばtrueであるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C0 or C1 control code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C0 または C1 制御コード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A NaN compares not equal, not greater than, and not less than every value, including itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNは、それ自身を含めてあらゆる値に対して等しくない、大きくない、少なくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A NaN passed as other results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherとして渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A NaN passed as value results in another NaN, with a signaling NaN value converted to quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueとして渡されるNaNは、シグナルNaN値はクワイエットNaNに変換されて、別のNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A NaN value may also include a payload in parentheses following the "nan" keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるNaN値はまた、"nan"キーワードに続けて丸括弧の中にペイロードを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A SIMD vector type that may not have any computational operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるSIMDベクター型、それは何ら計算関係の演算を持たないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A UTF-16 code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのUTF-16コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A UTF-16 encoding of self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfのUTF-16符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのUTF-8コード単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A UTF-8 encoding of self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfのUTF-8符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Unicode encoding form that translates between Unicode scalar values and form-specific code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユニコード符号化形式、それはユニコードスカラー値と形式特有のコード単位の間で翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Unicode string value that is a collection of characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユニコード文字列値、それは、いくらかの文字からなる１つのコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A binary floating-point type’s exponentBitCount imposes a limit on the range of the exponent for normal, finite values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイナリ浮動小数点型のもつexponentBitCountは、正規化数の、有限の値に対する指数の範囲に限界を課します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bitwise AND operation results in a value that has each bit set to 1 where both of its arguments have that bit set to 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位AND演算は、ある値という結果になります、それが各ビットを1に設定するのは、両方のそれの引数が、そのビットを1に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位OR演算は、ある値という結果になります、それが各ビットを1に設定するのは、一方または両方のそれの引数が、そのビットを1に設定するところです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位XOR演算、または排他的OR演算として知られるものは、１つの値という結果になり、それは各ビットが1に設定されます、そこにおいて一方または他方しかし両方でなくそれの引数がそのビットを1に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A buffer of raw bytes from which to copy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のバイトのバッファで、それからコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A buffer pointer to a newly allocated region of memory aligned to alignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>alignmentにアラインされた新規割り当てのメモリ領域へのバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that conforms to the CustomReflectable protocol can control how its mirror represents ancestor classes by initializing the mirror with an AncestorRepresentation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomReflectableプロトコルに準拠するクラスは、どのようにそれのミラーが先祖クラスを表すかを、ミラーをAncestorRepresentationで初期化することで制御できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class whose instances contain a property of type Header and raw storage for an array of Element, whose size is determined at instance creation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラス、そのインスタンスは型Headerの１つのプロパティと、そのサイズがインスタンス作成時に決められ、Elementからなる１つの配列のための生のストレージを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closed range to convert to a Range instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Rangeインスタンスへ変換することになるある完結範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closing punctuation mark of a pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある対のある閉じ句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that accepts an inout state and returns the next element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>inout状態を受け取り、そしてそのシーケンスの次の要素を返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns a sequence or collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、あるシーケンスまたはコレクションを返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that accepts an element of this sequence as its argument and returns an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはこのシーケンスのひとつの要素をそれの引数として受け取って、ひとつのオプショナルの値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that accepts the previous sequence element and returns the next element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは前のシーケンス要素を受け取り、次の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは蓄積値をシーケンスのいち要素と結合して新しい蓄積値へとし、nextPartialResultクロージャの次の呼び出しにおいて使われるか、呼び出し側に返されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that is called with the values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャで、出くわす何らかの重複キーに対するそれら値とともに呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that is executed immediately with an escapable copy of closure as its argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>closureの脱出可能コピーをそれの引数として使い直ちに実行されるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that processes one outputEncoding code unit at a time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは１度に１つのoutputEncodingコードユニットを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that processes one code unit argument at a time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは１度に１つのコードユニット引数を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that returns true if its argument should be used to split the sequence; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのクロージャ、それはそれの引数が使われてシーケンスを分割するならばtrueを；そうでなければ、falseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that returns a key for each element in values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valuesの中の各要素に対するキーを返すクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that returns an optional element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはあるオプショナルの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a  typed buffer to the same memory as this buffer, only bound to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このバッファと同じメモリに対する型付バッファをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a  typed pointer to the same memory as this pointer, only bound to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このポインタと同じメモリへの型付ポインタをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a buffer pointer to the static string’s UTF-8 code unit sequence as its sole argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは静的文字列のもつUTF-8コード単位シーケンスへのバッファポインタをそれの唯一の引数として取るものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a key-value pair as its argument and returns a Boolean value indicating whether the pair should be included in the returned dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアをそれの引数として取り、返される辞書にそのペアが含まれるべきかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a mutable pointer to value as its sole argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueへの可変ポインタをそれの唯一の引数として取るクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a mutable typed buffer to the same memory as this buffer, only bound to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このバッファと同じメモリに対する可変の型付バッファをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a mutable typed pointer to the same memory as this pointer, only bound to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは、型Tに束縛しただけの、このポインタと同じメモリへの可変の型付ポインタをとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a pointer to value as its sole argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueへのポインタをそれの唯一の引数として取るクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes a raw buffer pointer to the bytes of value as its sole argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueのバイトへの生のバッファポインタをそれの唯一の引数として取るクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは１つの要素を引数として取り、コレクションがその要素で分割されるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value indicating whether the element should be included in the returned set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはある要素をそれの引数として取り、その要素が返される集合に含まれるべきかどうかを示すブール値を返すものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それは１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as a parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１要素を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が含まれるべきならばtrueをまたはそれが除外されるべきならばfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns true if the element should be included or false otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が含まれるべきならばtrueを、またはそうでなければfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が省かれるべきならばtrueをまたはそれが含まれるべきならばfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が省かれるべきならばtrueを、またはそうでなければfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が合致するものかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が結果に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返される配列に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素が返されるコレクションに含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの１つの要素をそれの引数として取り、その要素がコレクションから除去されるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素が合致するものであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはこのシーケンスの１つの要素をそれの引数として取り、渡された要素がある条件を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes each element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャ、それはシーケンスの各要素をそれの引数として取り、その要素が総数に含まれるべきかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes the current and new values for any duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャで、何らかの重複キーに対する現在および新しい値それぞれをとるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes the failure value of the instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスの失敗値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes the success value of the instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのインスタンスの成功した値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes the success value of this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスの成功した値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that takes the unwrapped value of the instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスのアンラップされた値をとるクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that transforms a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を変換するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure that updates the accumulating value with an element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>蓄積される値をこのシーケンスのある要素を使って更新するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure to execute that depends on the lifetime of x being extended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>延長されているxの生涯に依存して実行するクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with a CVaListPointer parameter that references the arguments passed as args.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>argsとして渡される引数を参照するCVaListPointerパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-8コード単位のnull終端シーケンスを指し示すポインタパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with a pointer parameter that points to a null-terminated sequence of code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード単位からなるnull終端シーケンスを指し示すポインタパラメータを持つクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with an UnsafeBufferPointer parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャでUnsafeBufferPointerパラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with an UnsafeMutableBufferPointer parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャでUnsafeMutableBufferPointerパラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with an UnsafeMutableRawBufferPointer parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャでUnsafeMutableRawBufferPointerパラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A closure with an UnsafeRawBufferPointer parameter that points to the contiguous storage for the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャでUnsafeRawBufferPointerパラメータを持ち、それはその配列のための隣接ストレージを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection and its slices share the same indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションとそれのスイラスは同じインデックスを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection containing a single element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一の要素を含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection containing just the keys of the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のキーだけを含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection containing just the values of the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の値だけを含んでいるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection containing the same elements as a Base collection, but on which some operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Baseコレクションと同じ要素を含んでいるあるコレクション、しかしそれの上で何らかの演算、例えばmapやfilterが遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection containing the words of this value’s binary representation, in order from the least significant to most significant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の持つバイナリ表現の単語いくらかを含んでいるコレクション、最下位から最上位への順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of Character elements to insert into the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列へ挿入されることになるCharacter要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of Child elements describing the structure of the reflected subject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Child要素のコレクションで、リフレクションされる主題の構造体を記述しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of UInt8 elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt8要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラー値のコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of all values of this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の全ての値からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of code units encoded in the encoding specified in sourceEncoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceEncodingにおいて指定されたエンコーディングでエンコードされたコード単位からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of indices for an arbitrary collection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不定なコレクションのためのインデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection of the elements that isIncluded allowed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isIncludedを認められた要素それらからなるあるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection on which normally-eager operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクション、それにおいては通常は先行な演算、例えばmapやfilterは、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection or finite sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションまたは有限のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that contains count elements that are all element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>count個の要素を含んでいるコレクション、それはすべてがelementです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that presents the elements of its base collection in reverse order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクション、それは、それの基盤コレクションの要素を逆順で提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのもつ要素の隣接下位範囲を表すコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that supports backward as well as forward traversal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前方にだけでなく後方へ辿っていくこともサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that supports efficient random-access index traversal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>効率のよい無作為アクセスのインデックス探査をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that supports replacement of an arbitrary subrange of elements with the elements of another collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>随意の下位範囲の要素を別のコレクションの要素で置き換えることをサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection that supports subscript assignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>添え字を使った代入をサポートするコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection whose element type is Element but that is always empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの要素型はElementである、しかし常に空であるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection whose elements are all identical.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクション、その要素は全て同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection whose elements are key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの要素がキー値ペアであるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションのindicesプロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが非特有に参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションのindicesプロパティは、そのコレクション自身に対する強い参照を保持でき、そのコレクションが非特有に参照されるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common timing mistake is expecting the results of an asynchronous call to be available within the calling synchronous code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>よくあるタイミング間違いは、非同期呼び出しの結果が、呼び出している同期的コード内部で利用可能であると予想することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A concrete container that provides a view into a decoder’s storage, making the encoded properties of a decodable type accessible by keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある具体的なコンテナで、あるデコーダの持つストレージへのビューを提供します、デコーダ可能型のエンコードされたプロパティをキーによってアクセス可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A concrete container that provides a view into an encoder’s storage, making the encoded properties of an encodable type accessible by keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある具体的なコンテナで、あるエンコーダの持つストレージへのビューを提供します、エンコード可能型のエンコードされたプロパティをキーによってアクセス可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠しているシーケンスでコレクションではないものは、２番目のfor-inループにおいて幾つかの要素からなる随意のシーケンスを生み出すことを許可されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A conforming type may contain a subset of values which are treated as exceptional—that is, values that are outside the domain of meaningful arguments for the purposes of the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠している型は、普通でないものとして扱われる値の下位集合を含むでしょう — すなわち、Comparableプロトコルの用途のための意味のある引数の領域の外側である値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A conforming type may use any integer radix, but values other than 2 (for binary floating-point types) or 10 (for decimal floating-point types) are extraordinarily rare in practice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する型は、あらゆる整数基数を使うことができます、しかし２（バイナリ浮動小数点型に対して）または10（10進浮動小数点型に対して）より他の値は、実際には非常に稀です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A connecting punctuation mark, like a tie.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>連結句読点符号、tieのような。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container that can support the storage and direct decoding of a single nonkeyed value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一非キー値のストレージおよび直接デコーディングをサポートできるコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A container that can support the storage and direct encoding of a single non-keyed value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一非キー値のストレージおよび直接エンコーディングをサポートできるコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A contiguously stored array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>隣接保管の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A contiguously stored null-terminated UTF-8 representation of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>隣接格納されるヌル終端UTF-8表現のこの文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A currency sign.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>通貨符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom RandomNumberGenerator type can have different characteristics than the default SystemRandomNumberGenerator type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえのRandomNumberGenerator型は、省略時のSystemRandomNumberGenerator型とは異なる特徴を持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Bool instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Boolインスタンスのためのあつらえのプレイグラウンドクイックルック。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Character instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Characterインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Double instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Doubleインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Float instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Floatインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Int16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int16インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Int32 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int32インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Int64 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int64インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Int8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int8インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Int instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the String instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Stringインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the UInt16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt16インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the UInt32 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt32インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the UInt64 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt64インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the UInt8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt8インスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the UInt instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIntインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground Quick Look for the Unicode.Scalar instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Unicode.Scalarインスタンスのためのあつらえのプレイグラウンド「クイックルック」。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A custom playground description for this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスに対するあつらえのplayground記述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dash or hyphen punctuation mark.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ダッシュまたはハイフン句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A decimal digit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある10進法数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A decimal value may also include an exponent following the significand, indicating the power of 10 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>10進の値はまた、それによって仮数が乗算されるべき10の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A decoded Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコードされたユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要求された型にデコード済みの値、またはnil、もしDecoderが与えられたキーに関連する登録項目を持たない場合は、またはその値がnull値の場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要求された型にデコード済みの値、またはnil、もしその値がnull値ならば、またはもしデコードする要素がそれ以上ないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A description of what went wrong, for debugging purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何がうまくいかなかったかの記述、デバッグ目的のため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary containing the keys and non-nil transformed values of this dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この辞書のキーと非nilの変換済値を含んでいるある辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary containing the keys and transformed values of this dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この辞書のキーと変換された値を含んでいる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary is a type of hash table, providing fast access to the entries it contains.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書はある種のハッシュテーブルであり、それが含んでいる登録項目への高速なアクセスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary literal is not the same as an instance of Dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルは、Dictionaryのインスタンスと同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary literal is a comma-separated list of key-value pairs, in which a colon separates each key from its associated value, surrounded by square brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルは、「キーと値」の組（キー値ペア）のコンマ区切りのリストで角括弧で囲まれています、このキー値ペアではコロンが各キーをそれの関連値から切り離します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary literal is a simple way of writing a list of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルは、「キー値」ペアのリストを書く簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary literal to use as the structure for the mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ミラーのための構造体として使うことになる辞書リテラル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary of the key-value pairs that isIncluded allows.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isIncludedが認めるキー値ペアからなる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary to merge.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結合することになる辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dictionary’s indices stay valid across additions to the dictionary as long as the dictionary has enough capacity to store the added values without allocating more buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のインデックスは、その辞書への追加をまたいで有効なままです、加えられた値をもっとバッファを割り当てることなく格納するために辞書が十分な容量を持つ限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A digraph character whose first part is uppercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの最初の部分が大文字である連字文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A double-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dynamic plain-text Unicode string object, for use instead of a String variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的なプレーンテキストユニコード文字列オブジェクト、参照意味論を必要とする場合にString変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A failure, storing a Failure value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある失敗、Failure値を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A final quotation mark.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の引用符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A flattened view of the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数のシーケンスからなるこのシーケンスの要素のある平坦なビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating-point numeric type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating-point value to be converted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating-point value to compare to this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値と比較される浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating-point value to convert to an integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数へと変換する浮動小数点値．</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A format control character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書式制御文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A function that produces the initial Header instance stored in the buffer, given the buffer object and a function that can be called on it to get the actual number of allocated elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファに格納される初期Headerインスタンスを生成する関数、bufferオブジェクトおよびそれの上で呼び出されて割り当てられた要素の実際の数を得る関数を与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A grapheme base can be thought of as a space-occupying glyph above or below which other non-spacing modifying glyphs can be applied.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書記素基底は、それの上または下に他の無間隔修飾字体が適用できる場所取り字体として考えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A grapheme extender can be thought of primarily as a non-spacing glyph that is applied above or below another glyph.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期素拡張は概ね別の字体の上または下に適用される無間隔字体として考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A half-open interval from a lower bound up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下側の境界から、上側の境界まで、しかしそれを含んでいない、半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hashable value to wrap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラップすることになるハッシュ化値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A hexadecimal value may also include an exponent following the significand, indicating the power of 2 by which the significand should be multiplied.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>16進数値はまた、それによって仮数が乗算されるべき２の冪を指し示す指数を、仮数に続けて含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path from a specific root type to a specific resulting value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特定の根本の型から特定の結果値の型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path from the root of this key path and the value type of path, if path can be appended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーパスのルートからのキーパスとpathの値型、もしpathが追加されるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path from the root of this key path to the value type of path, if path can be appended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーパスのルートからpathの値型へのキーパス、もしpathが追加できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path from the root of this key path to the value type of path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーパスのルートから、pathの値型へのキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path is a string of dot-separated keys that specifies a sequence of object properties to traverse.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパスは、辿っていく一連のオブジェクトプロパティを指定する、ドット区切りのキーの文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path referring to storage that can be accessed through a value of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Tの値を通してアクセス可能なストレージを参照しているキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path that supports reading from and writing to the resulting value with reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果値からのよみ出し及びそれへの書き込みを参照意味論でサポートするキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A key path that supports reading from and writing to the resulting value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果値からのよみ出し及びそれへの書き込みをサポートするキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A keyed decoding container view into self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfへのキー付きデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A keyed decoding container view into this decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このデコーダへのキー付きデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A label to use when writing the contents of value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueの内容を書き込むときに使うラベル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lazy ${Collection} wrapper that includes the initial consecutive elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延な${Collection}ラッパー、それは根底にあるコレクションのうち、ある述部を満足させる、最初の連続した要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lazy Collection wrapper that includes the elements of an underlying collection that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延なCollectionラッパー、それは根底にあるコレクションの要素のうち、ある述部を満足させるものを含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lazy wrapper that includes the elements of an underlying collection after any initial consecutive elements that satisfy a predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延なラッパー、それは根底にあるコレクションのうち、ある述部を満足させる何らかの最初の連続した要素の後ろの要素らを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A letter-like numeric character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字のような数字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lightweight collection of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアの軽量コレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A line separator, which is specifically (and only) U+2028 LINE SEPARATOR.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行区切り子、それは具体的には（そして唯一）U+2028 LINE SEPARATOR です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A list of elements of the new set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい集合の要素のリスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lowercase copy of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の小文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A lowercase letter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>小文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A machine learning data value representation of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この配列の機械学習データ値表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mapping closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マップを行うクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A member of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の中のひとつのメンバ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメモリ位置は１度に１つの型へとバインド（束縛）されるだけでしょう、なので同じメモリに関連のない型として最初にメモリ再バインドすることなしにアクセスすることは、未定義となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A memory location may only be bound to one type at a time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメモリ位置は、一度に１つの型に束縛されるだけでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror describes the parts that make up a particular instance, such as the instance’s stored properties, collection or tuple elements, or its active enumeration case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ミラーは様々な部分を叙述します、それらはある特定のインスタンスを作り上げるものです、例えばそのインスタンスのもつ格納プロパティ、コレクションまたはタプルの要素、またはそれの動的列挙ケース節など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror of the subject’s superclass, if one exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>主題の持つスーパークラスのミラー、もしそれが存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Bool instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Boolインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Character instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Characterインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Double instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Doubleインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Float instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Floatインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Int16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int16インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Int32 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int32インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Int64 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int64インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Int8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int8インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Int instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the String instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Stringインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the UInt16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt16インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the UInt32 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt32インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the UInt64 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt64インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the UInt8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt8インスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the UInt instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIntインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Unicode.Scalar instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Unicode.Scalarインスタンスを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the Float80 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Float80インスタンスを反映するあるミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その辞書を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのイテレータを反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mirror that reflects the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その集合を反映するミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A modifier letter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>修飾文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mutable nonowning collection interface to the bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリのいち領域中のバイトに対する可変の非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mutable pointer to the elements of an array is implicitly created when you pass the array using inout syntax.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の要素への可変ポインタは、あなたが配列をinout構文を使って渡す時に暗黙的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mutable pointer-to-ObjC-pointer argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変のpointer-to-ObjC-pointer引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A namespace for Unicode utilities.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードユーティリティのための名前空間。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A negative value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A negative, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new .dataCorrupted error with the given information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>を与えられた情報を持つ新しい.dataCorruptedエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new Decoder to pass to super.init(from:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.init(from:)に渡すための新しいDecoder。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new dictionary initialized with the elements of keysAndValues.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keysAndValuesの要素で初期化された新しい辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new dictionary with the combined keys and values of this dictionary and other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この辞書とotherのキーと値を組み合わせた新しい辞書。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new empty single value container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい空の単一値コンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new empty unkeyed container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい空のキー付けされないコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new encoder to pass to super.encode(to:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>super.encode(to:)に渡すための新しいエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new instance initialized with rawValue will be equivalent to this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rawValueで初期化された新しいインスタンスは、このインスタンスに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new instance of type T, copied from the buffer pointer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Tの新しいインスタンス、バッファポインタのもつメモリからコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new instance of type T, read from the raw bytes at offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Tの新しいインスタンス、offsetで生のバイトから読み込んだもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new instance of type U, cast from x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Uの新しいインスタンス、xからキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new keyed encoding container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいキー付けされるエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new option set made up of the elements contained in this set, in other, or in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合の中に、otherの中に、または両方の中に含まれる要素から作り上げられるオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new option set with only the elements contained in both this set and other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合とotherの両方に含まれる要素のみをもつ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new option set with only the elements contained in either this set or other, but not in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合またはotherのどちらかに、しかし両方にではなく含まれる要素のみをもつ新しいオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new range clamped to the bounds of limits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>limitsの境界内に制限された、新しい範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new set with the unique elements of this set and other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合とotherとの特有な要素を持つ新しい集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new unkeyed encoding container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいキー付けされないエンコーディングコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A new value that is amount added to this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値にamountが加えられる新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A nil-coalescing operation unwraps the left-hand side if it has a value, or it returns the right-hand side as a default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算は、左手側をそれが値を持つならばアンラップします、またはそれは右手側を省略時のものとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A nil-coalescing operation unwraps the left-hand side if it has a value, or returns the right-hand side as a default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算は、左手側をそれが値を持つならばアンラップします、または右手側を省略時のものとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A non-letterlike modifier symbol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字でないような修飾記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A non-spacing combining mark with zero advance width (abbreviated Mn).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロ送り幅をもつ非空白結合記号（省略してMn）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A nonescaping closure value that is made escapable for the duration of the execution of the body closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非脱出クロージャ値で、bodyクロージャの実行の間に脱出可能にされるもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A nonowning collection interface to a buffer of elements stored contiguously in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ中に隣接して格納された、いくらかの要素からなるあるバッファに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A nonowning collection interface to a buffer of mutable elements stored contiguously in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ中に隣接して格納された、いくらかの可変の要素からなるあるバッファに対する非所有コレクションインターフェイス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A numeric character of another type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の型の数字文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A numeric representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーの数値表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A numeric value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A paragraph separator, which is specifically (and only) U+2029 PARAGRAPH SEPARATOR.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>段落区切り子、それは具体的には（そして唯一）U+2029 PARAGRAPH SEPARATOR です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A parameterized class written in Objective-C is imported into Swift as a generic class with the same number of type parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cにおいて書かれたパラメータ化されたクラスは、同じ数の型パラメータを持つ総称体クラスとしスウィフトにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A partial half-open interval up to, but not including, an upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上側の境界までの、しかしそれを含まない部分的半開間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A partial interval extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある下側の境界から上向きに拡張する部分的な間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A partial interval up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある上側の境界までの、そしてそれを含んでいる部分的な間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A partially type-erased key path, from a concrete root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある部分的な型消去キーパス、具体的な根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer for accessing  data of a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある特定の型のデータにアクセスするためのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer for accessing and manipulating data of a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある特定の型のデータにアクセスおよび操作するためのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer offset from this pointer by n bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタからnバイトをオフセットしたポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer that can be used with C functions that take a va_list argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>va_list引数を取るC関数で使用できるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to a newly allocated region of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しくアロケートされたメモリ領域へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to a null-terminated UTF-8 code sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to a null-terminated code sequence encoded in encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>encodingでエンコードされたヌル終端のコードシーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to a sequence of contiguous code units in the encoding specified in sourceEncoding, ending just before the first zero code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceEncodingで指定のエンコーディングでの、最初のゼロコード単位の直前で終わっている隣接コード単位シーケンスへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to a sequence of contiguous, UTF-8 encoded bytes ending just before the first zero byte.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のゼロバイト直前で終わっている、隣接の、UTF-8エンコードされた幾らかのバイトに対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to at least count initialized instances of type Pointee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少なくともcount個の初期化された型Pointeeのインスタンスに対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to the beginning of the string’s UTF-8 encoded representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列のUTF-8符号化表現の最初の部分へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to the first byte of the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファへの最初のバイトへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to the first element of the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファの最初の要素へのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to the memory to copy bytes from.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこからバイトをコピーすることになるメモリへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to the start of the buffer, or nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの始まりへのポインタ、またはnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A pointer to the values to copy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされる値に対するポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position in a LazyPrefixWhileCollection or LazyPrefixWhileBidirectionalCollection instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>LazyPrefixWhileCollectionまたはLazyPrefixWhileBidirectionalCollectionインスタンスの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position in a String or one of its views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるStringまたはそれのビューの１つの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position in a FlattenCollection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FlattenCollectionの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position in a view of the target parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>targetパラメータのあるビューの中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position in at least one of the views of the string shared by target.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>targetによって共有される文字列のいくつかのビューのうち少なくとも１つにおけるある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position in the utf16 view of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のutf16の中のある位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A position of a character or code unit in a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の中のある文字またはコード単位の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A positive stride iterates upward; a negative stride iterates downward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正のstrideは上向きに反復していきます；負のstrideは下向きに反復していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A positive value that uses the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の値、それは浮動小数点型の最大精度を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A positive, nonzero number that does not use the full precision of the floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の、非ゼロの数、それは浮動小数点型の最大精度を使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A possible prefix to test against this string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列に対してテストすることになる可能性のある接頭辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A possible suffix to test against this string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列に対してテストすることになる可能性のある接尾辞。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある述部、それはそれの最初の引数がそれの２番目の引数の前に並べられるべきならばtrueを返します；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A predicate that returns true if its two arguments are equivalent; otherwise, false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある述部、それはそれの２つの引数が等しいならばtrueを返します；そうでなければ、false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A predicate used to partition the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションに仕切りをするのに使われる述部。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A private-use character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>私用面の文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A property has inline, directly addressable storage when it is a stored property for which no additional work is required to extract or set the value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるプロパティは、インラインに、直接にアドレス指定可能なストレージを持ちます、それが値を抽出または設定するのに追加的な仕事が要求されない格納プロパティである場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A protocol for legitimate arguments to Mirror’s descendant method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Mirrorのもつdescendantメソッドへの合法的な引数に対するプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A protocol that enables an object to be encoded and decoded for archiving and distribution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオブジェクトにアーカイブと配布のためにエンコードおよびデコードされることを可能にするプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A protocol that enables encoding and decoding in a manner that is robust against object substitution attacks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングとデコーディングを、オブジェクト置き換え攻撃に対して強固であるある流儀で可能にするプロトコル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A punctuation mark of another type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の型の句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A quiet NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クワイエットNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A radix-2 (binary) floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるradix-2（バイナリ）浮動小数点型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A random element from the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションからのある無作為の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A random value of T in the range 0..&lt;upperBound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある無作為なTの値で範囲0..&lt;upperBoundの中のもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A random value of T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある無作為なTの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A random value within the bounds of range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rangeの境界内のある無作為な値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range expression that represents the entire range of a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションの全体の範囲を表す範囲式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range of integers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数からなる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range of the buffer’s indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファのもつインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range of the collection’s indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのもつインデックスのある範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range of the range’s indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲のインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range suitable for slicing collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスするcollectionに対して適している範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range to check for elements in common.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>共通の要素を調べる範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range-replaceable collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A raw memory buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のメモリバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A raw pointer for accessing and manipulating untyped data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付けされないデータにアクセスおよび操作するための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A raw pointer for accessing untyped data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付けされないデータにアクセスするための生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A raw pointer to the same address as this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタと同じアドレスに対する生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A raw-representable instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の表現が可能なインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reference to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reimagined Swift computed property that expresses the same functionality—getting the components of a color—can be written as a four-element tuple:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再度考えられたSwift計算プロパティで同じ機能性を表現するもの — ある色の構成要素の取得 — は、４要素のタプルとして記述されることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A representation of the string that is suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その文字列のひとつの表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A representation of the substructure and display style of an instance of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位構造体の表現と何らかの型のインスタンスの表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A representation of this integer with the byte order swapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この整数のバイト順交換した表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A reserved unassigned code point or a non-character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>予約済み未割り当てコード点または非文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A rule for rounding a floating-point number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点数を丸める為のある規則。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A second raw-representable instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>第２の生の表現が可能なインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence built around an iterator of type Base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Baseのイテレータに基づいて構築されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence consisting of all the elements contained in each segment contained in some Base sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかのBaseシーケンスに含まれる各断片の中に含まれる要素全てから成るシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence containing the same elements as a Base sequence, but on which some operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Baseシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えばmapやfilterが遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence containing the same elements as this one, possibly with a simpler type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このものと同じ要素を、できる限りより簡単な型で、含むシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスと同じ要素を含んでいるシーケンス、しかしそれの上で何らかの演算、例えばmapやfilterが遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence from start toward, and possibly including, end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startから、そして可能なら含めて、endへ向かってのシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence from start toward, but not including, end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startから、そして含めずに、endへ向かってのシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence is a list of values that you can step through one at a time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスは値のリストで、あなたが１度に１つずつ段階処理していくことができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence leaving off the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素を取り除いたあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラー値のシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of elements with which to initialize the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幾らかの要素からなるシーケンス、それに対してバッファを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of elements with which to initializer the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかの要素からなるシーケンス、それを使ってバッファを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of key-value pairs to use for the new dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアからなるシーケンス、新しい辞書に使うためのもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかのキー値ペアからなるシーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of pairs enumerating the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスを列挙している、ペアからなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of the initial, consecutive elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateを満たす冒頭の、隣接する要素からなるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of tuple pairs, where the elements of each pair are corresponding elements of sequence1 and sequence2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>対のタプルからなるシーケンス、そこにおいて各対の要素らは、sequence1とsequence2の要素に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of values formed by striding over a closed interval.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある完結間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of values formed by striding over a half-open interval.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある半開間隔の全体をまたぐことで形成されるいくつかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence of values to group into a dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書へとグループにする幾つかの値からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence on which normally-eager operations such as map and filter are implemented lazily.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それにおいては通常は先行な演算、例えばmapやfilterは、遅延に実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence should provide its iterator in O(1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスはそれのイテレータをO(1)で提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence starting after the initial, consecutive elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateを満たす冒頭の、隣接する要素の後で始まるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素の後で始まるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence starting at the beginning of this sequence with at most maxLength elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの先端で始まる多くともmaxLength要素のあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that can represent a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素の隣接下位範囲を表すことのできるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that lazily consumes and drops n elements from an underlying Base iterator before possibly returning the first available element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>おそらくは最初の利用可能な要素が返る前にn個の要素をある基礎をなすBaseイテレータから遅延に消費して落とすあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that only consumes up to n elements from an underlying Base iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最大でn個の要素まで基礎をなすBaseイテレータからただ消費しきるあるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that presents the elements of a base sequence of sequences concatenated using a given separator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それはいくらかのシーケンスからなるある基盤となるシーケンスの要素らを、与えられたセパレータを使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that represents a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素の隣接下位範囲を表すシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that starts with first and continues with every value returned by passing the previous element to next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それはfirstで始まり、そして前の要素をnextに渡すことによって返される値どれもが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence that yields each successive value from next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それはnextから連続した値各々をもたらします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence to compare to this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、このシーケンスと比べることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence to insert between each of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素それぞれの間に挿入されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence whose elements are produced via repeated applications of a closure to some mutable state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャをある何らかの可変の状態へ繰り返し適用することでその要素が生み出されるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それの要素は複数回探査されることが非破壊的に可能です、そしてある添え字で指し示すことによってアクセスされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence whose elements consist of the elements of some base sequence that also satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それは何らかの基盤シーケンスの要素でさらにまた与えられた述部を満足させるものから成る要素たちです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence whose elements consist of the elements that follow the initial consecutive elements of some base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それの要素は何らかの基盤シーケンスの、ある与えられた述部を満足させる最初の隣接要素の後に続く要素それらから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sequence whose elements consist of the initial consecutive elements of some base sequence that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それの要素は何かの基盤シーケンスのもので、与えられた述部を満足させる最初の連続した要素から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of Unicode character values for use in search operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>検索操作において使うための一揃いのユニコード文字値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of the elements that isIncluded allows.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isIncludedが許可する要素からなる集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of the same type as the current set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在の集合と同じ型の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set of the same type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じ型の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A shuffled array of this sequence’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの持つ要素からなる、あるシャッフルされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A signaling NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シグナルNaN（非数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A signaling NaN sets the floating-point exception status when used in many floating-point operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シグナルNaNは、多くの浮動小数点演算において使われる時に、浮動小数点例外状態を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A signed integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A signed number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付きの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A signed, fixed-width integer type can represent values from -(2 ** (bitWidth - 1)) through (2 ** (bitWidth - 1)) - 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付きの、固定長整数型は、-(2 ** (bitWidth - 1))から(2 ** (bitWidth - 1)) - 1までの値を表せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A silent NaN (“not a number”) value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>silent NaN（非数）値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A single extended grapheme cluster that approximates a user-perceived character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある単一の拡張書記素クラスタで、１つのユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A single string can have greatly differing lengths when measured by its different views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある単一の文字列は、それの異なるビューによって測られる時に大きく違っていることがありえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A single value container view into this decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このデコーダへの単一コンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A single, concatenated string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一の、連結された文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A single-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice holds a reference to the entire storage of a larger array, not just to the portion it presents, even after the original array’s lifetime ends.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きな配列のストレージ全体への参照を保持します、元の配列の寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice inherits the value or reference semantics of its base collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスは、それの基盤コレクションのもつ値意味論もしくは参照意味論を継承します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice may hold a reference to the entire storage of a larger collection, not just to the portion it presents, even after the base collection’s lifetime ends.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライスは、単にそれが提示する一部分に対してではなく、より大きなコレクションのストレージ全体への参照を保持します、元のコレクションの寿命が終わった後でさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのスライスは、ゼロまたはそれ以上の元のコレクションの要素を含み、元のコレクションのもつ意味論を共有できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice of an Array, ContiguousArray, or ArraySlice instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるArray、ContiguousArray、またはArraySliceインスタンスの断片。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slice stores a base collection and the start and end indices of the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライス（切り取り）は、基盤コレクションおよびビューの始まりと終わりのインデックスを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A sorted array of the sequence’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンス要素のソート済み配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A source of text-streaming operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキストストリーミング操作のソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A space character of non-zero width.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非ゼロ幅の空白文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A spacing combining mark with positive advance width.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の送り幅をもつ空白結合記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized error that may be recoverable by presenting several potential recovery options to the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの可能性のある回復選択肢をユーザに提示することによって回復されるかもしれないある特殊化されたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized error that provides a domain, error code, and user-info dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある領域、エラーコード、そしてユーザ情報辞書を提供する特殊化されたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A specialized error that provides localized messages describing the error and why it occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーとなぜそれが起こったかを記述しているローカライズされたメッセージを提供する特殊化されたエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>安定ソートは、それに対してareInIncreasingOrderが順序を確立しない要素らの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stable sort preserves the relative order of elements that compare equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>安定ソートは、等しいと比較される要素それらの相対順序を保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A static string can store its value as a pointer to an ASCII code unit sequence, as a pointer to a UTF-8 code unit sequence, or as a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列は、それの値をASCIIコード単位シーケンスへのポインタとして、UTF-8コード単位シーケンスへのポインタとして、または単一のユニコードスカラー値として格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A static, plain-text Unicode string object that bridges to String; use NSString when you need reference semantics or other Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的な、プレーンテキストのユニコード文字列オブジェクト、それはStringにブリッジされます；あなたが参照意味論または他のFoundation特有の挙動を必要とする時はNSStringを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string instance or another sequence of characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列インスタンスまたは別のいくらかの文字からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string is a collection of extended grapheme clusters, which approximate human-readable characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列は、拡張書記素クラスタのコレクションです、それらはだいたいは人間が読むことができる文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string is a series of characters, such as "Swift", that forms a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列は一続きの文字です、例えば"Swift"など、それはあるコレクションを形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string literal containing the characters that appear next in the string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次にこの文字列リテラルにおいて現れる文字を含んでいる文字列リテラル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string representation of the Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブール値の文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string representation of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーの文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string representation of the static string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列の文字列表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string that represents the contents of the dictionary, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の内容を表す文字列、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string that represents the contents of the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の内容を表す文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string that represents the contents of the set, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の内容を表す文字列、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string that represents the contents of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の内容を表す文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string to append.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string to insert between each of the elements in this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素のそれぞれの間に挿入されることになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string to print between each item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各項目の間に出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string to print if condition is evaluated to false in a playground or -Onone build.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>conditionがプレイグラウンドまたは-Ononeビルドにおいてfalseに評価されるならば出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string to print if condition is evaluated to false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>conditionがfalseに評価されるならば出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string to print in a playground or -Onone build.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドまたは-Ononeビルドにおいて出力される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string type designed to represent text that is known at compile time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイル時に知られるテキストを表現するために設計される文字列型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s unicodeScalars property is a collection of Unicode scalar values, the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のもつunicodeScalarsプロパティは、ユニコードの基本単位である21ビットコード、ユニコードスカラー値いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s utf16 property is a collection of UTF-16 code units, the 16-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のもつutf16プロパティは、その文字列のもつユニコードスカラー値の16ビット符号化形式、UTF-16コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s utf8 property is a collection of UTF-8 code units, the 8-bit encoding form of the string’s Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のもつutf8プロパティは、その文字列のもつユニコードスカラー値の８ビット符号化形式、UTF-８コード単位いくつかからなるコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s UTF-16 view encodes the string’s Unicode scalar values as 16-bit integers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列のもつUTF-16ビューは、文字列のもつユニコードスカラー値を16ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s UTF-8 view encodes the string’s Unicode scalar values as 8-bit integers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の持つUTF-8ビューは、文字列の持つユニコードスカラー値を8ビット整数として符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s Unicode scalar values can be up to 21 bits in length.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の持つユニコードスカラー値は、長さが21ビットに至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s data is only copied lazily, upon mutation, when more than one string instance is using the same buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つ以上の文字列インスタンスが同じバッファを使っている時、変化において、ある文字列の持つデータは遅延にのみコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subscript that provides at least read-only access to your type’s elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少なくとも読み出し専用のアクセスをあなたの型の要素に提供する添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence starting after the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素の後から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence starting at the start position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>start位置から始まる下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence starting at the beginning of this collection with at most maxLength elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの先端で始まる多くともmaxLength要素の下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence terminating at the end of the collection with at most maxLength elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの末端で終わっていて多くともmaxLengthの要素を持つ下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence that leaves off k elements from the end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>k個の要素を終わりから取り除いた下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence that leaves off the specified number of elements at the end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素が末尾から無くなっているシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence up to, and including, the end position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>end位置に至るまでの、そしてそれを含む、下位シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A subsequence up to, but not including, the end position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>end位置に至るまでの、しかしそれを含まないシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A substring holds a reference to the entire storage of the string it comes from, not just to the portion it presents, even when there is no other reference to the original string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列はそれが由来する文字列のストレージ全体への参照を保持します、それが存在する部分に対してだけではなく、たとえ本来の文字列への他の参照が存在しないときでさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A substring to convert to a standalone String instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある下位文字列を独立したStringインスタンスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A success, storing a Success value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある成功、Success値を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A suggested display style for the reflected subject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リフレクションされる主題のための１つの提案の表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A suggestion of how a mirror’s subject is to be interpreted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにMirrorの持つsubjectが解釈されるようになるかの提案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A surrogate code point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるサロケートコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A symbol of another type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の型のシンボル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A symbol of mathematical use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数学的利用の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブール値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the array and its elements, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列とそれの要素のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the array and its elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列とそれの要素のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the buffer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのバッファのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the character, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その文字のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the collection, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the identifier, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その識別子のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the pointer, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのポインタのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the range, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the static string, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the value, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その値のテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of the value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of this instance, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのインスタンスのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of this key, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーのテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of this key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーのテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A textual representation of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値のテキスト表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A third value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する３番目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A throwing closure to evaluate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>評価することになるスローするクロージャ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A timing scenario you should avoid is calling the dataTask(with:completionHandler:) method within your app's viewDidLoad() method and attempting to use the results outside of the closure you pass as the completion handler.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが避けるべきタイミングシナリオは、dataTask(with:completionHandler:)メソッドをあなたのアプリのviewDidLoad()メソッド内部で呼び出す、そして結果をあなたが完了ハンドラとして渡したクロージャの外部で使うのを試みることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A trivial type can be copied bit for bit with no indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明な型は、ビット対ビットでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A trivial type can be copied with just a bit-for-bit copy without any indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明な型は、単にビット対ビットコピーでコピーされることが、何らかの間接的または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the high and low parts of a double-width integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２倍幅整数の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the high and low parts of the result of multiplying this value and other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値とotherを乗算する結果の高および低部分を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the number of UTF-16 code units required to encode input and a Boolean value that indicates whether the input contained only ASCII characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>inputをエンコードするのに必要とされるUTF-16コード単位の数とinputがASCII文字だけを含んでいるかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the quotient and remainder obtained by dividing dividend by this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>dividendをこの値で除算することによって入手される商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the quotient and remainder of dividend divided by this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>dividendをこの値で除算した商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the quotient and remainder of this value divided by rhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsによって除算されたこの値の商と余りを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>除算の結果とそれだけでなくオーバーフローがその演算において起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>乗算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>減算の結果とそれだけでなくオーバーフローが起こったかどうかを示すブール値を含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple of Comparable elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparable要素からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple of Equatable elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatable要素のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple of the lower and upper bounds of the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲の下方および上方境界からなるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tuple with the new string and a Boolean value that indicates whether any repairs were made.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい文字列と、あらゆる修復がなされたかどうかを指し示すブール値を持つタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A two-element tuple with the key and value corresponding to position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionに該当するキーと値を持つ２要素タプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type for propagating an unmanaged object reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある管理されないオブジェクト参照を伝達するための型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type for which the conforming type provides a containment test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型、それに対して準拠しているが格納テストを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type is eligible for automatic conformance to Equatable and Hashable when it's a structure or an enumeration that meets these criteria:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型がEquatableおよびHashableへの自動式準拠に適格であるのは、それが構造体または列挙であり、これらの基準に合う場合です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type representing an error value that can be thrown.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スローされることが可能なあるエラー値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type representing continuous, one-dimensional values that can be offset and measured.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オフセットできて計測できる、連続的な、一次元の値を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type representing the sequence’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの持つ要素を表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be compared for value equality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の同等性について比較されることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be compared using the relational operators &lt;, &lt;=, &gt;=, and &gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関係演算子&lt;、&lt;=、&gt;=、そして&gt;を使って比較されるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be converted to and from an associated raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある関連値型へおよびそれから変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be hashed into a Hasher to produce an integer hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hasherへとハッシュ化されることで整数ハッシュ値を生成することが可能な型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized by string interpolation with a string literal that includes expressions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかの式を含むある文字列リテラルを使う文字列補間によって初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized using a dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある辞書リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized using an array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized using the nil literal, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilリテラル、nilを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized with a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある浮動小数点リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized with a string literal containing a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一のユニコードスカラー値を含んでいるある文字列リテラルで初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized with a string literal containing a single extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ただ１つの拡張書記素クラスタを含んでいるある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized with a string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列リテラルを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized with an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数リテラルで初期化できるある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be initialized with the Boolean literals true and false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブールリテラルtrueとfalseを使って初期化できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be represented as a string in a lossless, unambiguous way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるロスレスの、曖昧さのない方法で、文字列として表できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be the target of text-streaming operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキストストリーミング操作のターゲットであることができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be used as a key for encoding and decoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングとデコーディングのためのキーとして使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can be used to slice a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションをスライスするために使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can convert itself into and out of an external representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ自身を外部表現へとそしてそれをもとに変換できる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can decode itself from an external representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ自身が外部表現からデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can decode values from a native format into in-memory representations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値をネイティブ形式からインメモリ表現へとデコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can encode itself to an external representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ自身を外部表現へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can encode values into a native format for external representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を外部表現のためにネイティブ形式へとエンコードできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can represent a collection of all values of this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の全ての値からなるコレクションを表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can represent a string as a collection of characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を文字のコレクションとして表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can represent any written exponent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの書かれた指数を表すことができる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正と負の値の両方を表せる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can represent the absolute value of any possible value of the conforming type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that can represent the absolute value of any possible value of this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の何らかの可能な値の絶対値を表すことのできる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that conforms to RangeExpression can convert itself to a Range&lt;Bound&gt; of indices within a given collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RangeExpressionに準拠する型は、それ自身を指定コレクション内のインデックスのRange&lt;Bound&gt;に変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that conforms to RangeReplaceableCollection can choose how to respond when this method is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RangeReplaceableCollectionに準拠する型は、このメソッドが呼ばれた時どのような応答をするか選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that conforms to the FloatingPoint protocol provides the value for pi at its best possible precision.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatingPointプロトコルに準拠する型は、piに対する値をそれの最もよい可能な精度で提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that explicitly supplies its own mirror, but whose descendant classes are not represented in the mirror unless they also override customMirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>明示的にそれ独自のMirrorを提供するある型、しかしそれの子孫クラスはそれらがまたcustomMirrorをオーバーライドしない限りはMirrorで表現されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that explicitly supplies its own mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>明示的にそれ自身のMirrorを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that iterates over a collection using its indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクション全体に渡ってそれのインデックスを使って繰り返し処理する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that presents a mathematical set interface to a bit set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数学的なセットインターフェイスをビットセットに与える型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides a collection of all of its values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの値の全てからなるコレクションを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides a view into a decoder’s storage and is used to hold the encoded properties of a decodable type in a keyed manner.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型で、あるデコーダの持つストレージへのビューを提供し、そしてデコーダ可能型のエンコードされたプロパティをキー流儀で保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides a view into a decoder’s storage and is used to hold the encoded properties of a decodable type sequentially, without keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型で、あるデコーダの持つストレージへのビューを提供し、そしてデコーダ可能型のエンコードされたプロパティを順次的に、キーなしで保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides a view into an encoder’s storage and is used to hold the encoded properties of an encodable type in a keyed manner.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型で、あるエンコーダの持つストレージへのビューを提供し、そしてエンコード可能型のエンコードされたプロパティをキー流儀で保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides a view into an encoder’s storage and is used to hold the encoded properties of an encodable type sequentially, without keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型で、あるエンコーダの持つストレージへのビューを提供し、そしてエンコード可能型のエンコードされたプロパティを順次的に、キーなしで保持するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides mathematical set operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数学的な集合演算を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides sequential, iterated access to its elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>順次的な、繰り返されるアクセスをそれの要素に提供するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides the collection’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのコレクションの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides the sequence’s iteration interface and encapsulates its iteration state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのシーケンスの持つ反復インターフェイスを提供してそれの反復状態をカプセル化するある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that provides uniformly distributed random data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一様分布無作為データを提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a Boolean literal, such as Bool.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブールリテラルを表すある型、例えばBool。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a Unicode scalar literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点リテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a position in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a position in the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の中のある位置を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents a valid position in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有効な位置をそのコレクションにおいて表している型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents an extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張書記素クラスタリテラルを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数リテラルを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents either a wrapped value or nil, the absence of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラップされた値または、値の不在であるnil、どちらかを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the distance between two pointers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのポインタの間の隔たりを表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the distance between two values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値の間の隔たりを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the encoded exponent of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のエンコードされた指数を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the encoded significand of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のエンコードされた仮数を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>昇順での、コレクションの添え字として有効なインデックスを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the number of steps between two String.Index values, where one value is reachable from the other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一方の値が他方から到達可能であるところの２つのString.Index値の間の段階数を表すある型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the words of a binary integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるバイナリ整数の単語を表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that represents the words of this integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この整数のワードを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that supplies a custom description for playground logging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドログのためにあつらえの記述を提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type that supplies the values of a sequence one at a time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスに属する値を１度に１つ提供する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type whose instances can be encoded, and appropriately passed, as elements of a C va_list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのインスタンスが、符号化されること、そして適切に渡されることが、C va_listの要素として可能である型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type with a customized textual representation suitable for debugging purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグ目的に都合がよいようにカスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type with a customized textual representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタマイズされた原文の表現を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type with values that support addition and subtraction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算と減算をサポートする値を持つ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased hashable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型消去ハッシュ化値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased iterator of Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Elementの型消去イテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased key path, from any root type to any resulting value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型消去キーパス、何らかの根本の型から何らかの結果値の型への。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型消去シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased wrapper over any collection with indices that support bidirectional traversal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２方向に辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased wrapper over any collection with indices that support forward traversal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前へ辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type-erased wrapper over any collection with indices that support random access traversal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為アクセスで辿っていくことをサポートするインデックスを持つあらゆるコレクションを覆う型消去ラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typed buffer of the memory referenced by this raw buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この生のバッファによって参照されるメモリの型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typed buffer of the newly bound memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しく束縛されたメモリの型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typed pointer to the memory referenced by this raw pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この生のポインタによって参照されるメモリへの型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typed pointer to the newly bound memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しく束縛されたメモリへの型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A typed pointer to the same memory as this raw pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この生のポインタと同じメモリに対する型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A type’s size does not include any dynamically allocated or out of line storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型の大きさは、あらゆる動的にアロケートされるおよびアウトオブラインのストレージを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A unique identifier for a class instance or metatype.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスインスタンスまたはメタタイプのための固有な識別子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A user-defined key for providing context during encoding and decoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングおよびデコーディングの間にコンテキストを提供するためのユーザ定義のキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid buffer class is non-@objc, with no declared stored properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有効なバッファクラスは、非@objcで、宣言された格納プロパティを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid index of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この配列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid index of the character view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字ビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid index of the collection to use as a limit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>限度として使うためのそのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid index of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのコレクションの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid index of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A valid index of the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューの有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value equal to +infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>+infinityに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value equal to -infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-infinityに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value equal to zero with a negative sign.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value equal to zero with a positive sign.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の符号を持つゼロに等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value from which to use the magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこからの値が規模に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value from which to use the sign.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それからの値が符号に使われることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value less than or equal to the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの中の要素の数より少ないか等しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value less than or equal to the number of elements in the sequence, calculated nondestructively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの要素数より少ないか等しい値、非破壊的に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of NaN contains the string "nan", case insensitive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNの値は、文字列"nan"を含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of infinity contains one of the strings "inf" or "infinity", case insensitive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限大の値は、文字列"inf"または"infinity"のうちの１つを含みます、大文字小文字に影響されずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of the requested type, if present for the given key and convertible to the requested type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要請された型の値、もし与えられたキーに対して存在して要請された型に変換可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of the requested type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要請された型の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value representative of the type to describe.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>描写することになる型の典型であるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value stored into a subscript of a MutableCollection instance must subsequently be accessible at that same position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MutableCollectionインスタンスのある添え字へと格納される値は、その後にその同じ位置でアクセス可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that is NaN (“not a number”) cannot be represented exactly if its payload cannot be encoded exactly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaN（非数）である値は、それのペイロードが正確にエンコードされないならば、正確に表現できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that is offset from this value by n.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値からnをオフセットされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that provides access to properties of a Unicode scalar that are defined by the Unicode standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコード標準によって定義されるユニコードスカラーのプロパティに対するアクセスを提供する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that provides access to properties of the Unicode scalar that are defined by the Unicode standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコード標準によって定義されるユニコードスカラーのプロパティに対するアクセスを提供する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value that represents either a success or a failure, including an associated value in each case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>成功または失敗のどちらかを表すある値、それぞれの場合での関連値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to add to the hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハーシャーに加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to calculate the distance to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それへの隔たりを計算されるある値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to convert to this type of integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の整数へと変換される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to convert to this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型へと変換される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to match against lhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>lhsとマッチさせることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to use as a default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時のものとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to use as the big-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい整数のビッグエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to use as the little-endian representation of the new integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい整数のリトルエンディアン表現として使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value to use as the source of the new instance’s binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスの持つバイナリ表現のソースとして使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value type whose instances are either true or false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値型、そのインスタンスはtrueかfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value’s floatingPointClass property describes its “class” as described by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のfloatingPointClassプロパティは、それの“class”をIEEE 754仕様で記述される通りに記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A variadic list of elements of the new array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい配列の要素からなる可変長引数リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A variadic list of elements of the new set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい集合の要素からなる可変長引数リスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A vector with value in all lanes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全てのレーンにおける値を持つあるベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A vector with zero in all lanes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全てのレーンにおいてゼロをもつあるベクター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A version of the Unicode Standard represented by its major.minor components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのmajor.minor部分によって表されるユニコード標準のあるバージョン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view into a subsequence of elements of another collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある見方、別のコレクションのいくらかの要素からなる下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view of a dictionary’s keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のもつキーのあるビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view of a dictionary’s values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のもつ値のあるビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view of a string’s contents as a collection of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-16コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view of a string’s contents as a collection of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかのUTF-8コード単位のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A view of a string’s contents as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列の内容のひとつの見方、いくらかのユニコードスカラー値のコレクションとして。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wrapper around a C va_list pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C va_listポインタの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wrapper around an opaque C pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不透明Cポインターの周りのラッパー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wrapper over an underlying index that hides the specific underlying type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>根底にあるインデックスを覆うラッパー、根底にある特定の型を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ASCII characters have a scalar value between 0 and 127, inclusive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ASCII文字は、０と127の間の、それらを含む、スカラー値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>About Imported Cocoa Error Parameters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされるCocoaエラーパラメータについて</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access Swift types and declarations from within your Objective-C codebase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift型と宣言にあなたのObjective-Cコードベース内からアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access a pointer to a variable in memory for explicit passing to C functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ中のある変数へのポインタに明示的にC関数を渡すためにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access classes and other declarations from your Objective-C code in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftにおいてあなたのObjective-Cコード由来のクラスおよび他の宣言にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access must only occur through the pointer argument to body until body returns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスは、bodyに対するポインタ引数を通して、bodyが返るまでに、発生するだけでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access the Pointee instance referenced by self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfにより参照されるPointeeインスタンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access the ith element of the raw array pointed to by self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfによって指し示される生の配列のi番目の要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access to the raw argc value from C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cからの生のargc値にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access to the raw argv value from C. Accessing the argument vector through this pointer is unsafe.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のargv値にCからアクセスします。引数ベクトルにこのポインタを通してアクセスすることは安全ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access to the swift arguments, also use lazy initialization of static properties to safely initialize the swift arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>swift引数にアクセスします、また静的プロパティの遅延初期化を使って安全にswift引数を初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Access your Swift code from within your Objective-C codebase, and your Objective-C code from Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのSwiftコードにあなたのObjective-Cコードベース内からアクセスします、そしてあなたのObjective-CコードにSwiftからアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses a contiguous subrange of the array’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列のもつ要素らの中のある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses a contiguous subrange of the buffer’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの持つ要素の隣接下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses a contiguous subrange of the collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのもついくらかの要素からなるある連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the Unicode scalar value at the given position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置でユニコードスカラーにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the byte at the given offset in the memory region as a UInt8 value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオフセットでメモリ領域においてUInt8値としてバイトにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the bytes in the specified memory region.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたメモリ領域においてバイトにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the character at the given position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた位置で文字にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the code unit at the given position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the code unit at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置でのコード単位にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the contiguous subrange of the collection’s elements specified by a range expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲式によって指定される、コレクションの要素からなる連続した下位範囲にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the element at position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionでの要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the element at specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the element at the given position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた位置での要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the element at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置で要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the element indicated by position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>positionによって指し示される要素にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the instance referenced by this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるインスタンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the key-value pair at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置でキー値ペアにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the member at the given position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた位置でのメンバにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the pointee at the specified offset from this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタから指定されたオフセットでPointeeにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the subsequence bounded by the given range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた範囲によって仕切られた下位シーケンスにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the value associated with the given key for reading and writing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに結び付けられる値に読出しと書き込みのためにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accesses the value with the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値にこの与えられたキーでアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Arguments</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Array Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Buffer Contents</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファ内容にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Cases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ケース節にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Individual Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個々の要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Keys and Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーと値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Numeric Constants</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数に関する定数にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Objective-C Methods and Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cのメソッドやプロパティへのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Raw Argument Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の引数データにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Slices of a Collection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションのスライスにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing String Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing String View Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列ビュー要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing Underlying Storage</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基礎をなすストレージにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing a Collection's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのもつ要素にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing a Pointer's Memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタの持つメモリにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing a Pointer’s Memory as a Different Type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタのもつメモリに異なる型としてアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing a String’s Unicode Representation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列のユニコード表現にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing a type’s description property directly or using CustomStringConvertible as a generic constraint is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型のdescriptionプロパティに直にアクセスすることやCustomStringConvertibleを総称体制約として使うことは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing memory as a type T requires that the memory be bound to that type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリにある型Tとしてアクセスすることは、メモリがその型に束縛されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing memory as type T requires that the memory be bound to that type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリに型Tとしてアクセスすることは、メモリがその型に束縛されることを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing memory through the returned pointer is undefined if the memory has not been bound to T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるポインタによってメモリにアクセスすることは、メモリがTに束縛されていないならば未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing the utf8 view with these indices yields the first and second code UTF-8 units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>utf8ビューにそれらのインデックスでアクセスすることは、１番目と２番目のUTF-8コード単位を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing the Layout of a Type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型のレイアウトにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing the Layout of a Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のレイアウトにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing the Raw Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の値にアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing this collection’s bytes does not bind the underlying memory to UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションのもつバイトにアクセスすることは、基礎をなすメモリをUInt8へとバインドしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing this property in the case of a nil value is a serious programming error and could lead to undefined behavior or a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil値の場合にこのプロパティにアクセスすることは、重大なプログラミングエラーです、そして未定義挙動または実行時エラーに至らせるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing this property when hasPointerRepresentation is false triggers a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hasPointerRepresentationがfalseである時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Accessing this property when hasPointerRepresentation is true triggers a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hasPointerRepresentationがtrueである時にこのプロパティにアクセスすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add CustomDebugStringConvertible conformance to your custom types by defining a debugDescription property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomDebugStringConvertible準拠をあなたのあつらえの型にdebugDescriptionプロパティを定義することによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add CustomStringConvertible conformance to your custom types by defining a description property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomStringConvertible準拠をあなたのあつらえの型にdescriptionプロパティを定義することによって加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Equatable and Hashable to the list of adopted protocols when declaring the type, and the compiler automatically fills in the requirements for the two protocols:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>EquatableおよびHashableを型を宣言する時に採用するプロトコルのリストに加えてください、するとコンパイラは自動的に２つのプロトコルに対する要件を満たします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add Comparable conformance to your own custom types when you want to be able to compare instances using relational operators or use standard library methods that are designed for Comparable types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが関係演算子を使ってインスタンスの比較ができることやComparable型のために設計される標準ライブラリメソッドを使うことを望む場合は、Comparable準拠をあなた独自のあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add macros to your Objective-C types to group their values in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マクロをあなたのObjective-C型に加えて、それらの値をSwiftにおいてグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add multiple elements at the same time by passing another array or a sequence of any kind to the append(contentsOf:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>append(contentsOf:)メソッドに別の配列や何らかの種類のシーケンスを渡すことによって、複数の要素を同時に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the capability to be initialized with an array literal to your own custom types by declaring an init(arrayLiteral:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init(arrayLiteral:)イニシャライザを宣言することによって、配列リテラルで初期化される能力をあなた独自のあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add with overflow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー加算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding Equatable conformance to your custom types means that you can use more convenient APIs when searching for particular instances in a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatable準拠をあなたのあつらえの型に追加することが意味するのは、あなたがより便利なAPIを特定のインスタンスをあるコレクションの中で探す時に使用できるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の追加</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding IteratorProtocol Conformance to Your Type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IteratorProtocol準拠をあなたの型に加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding Keys and Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーと値を追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を加える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding and Removing Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の追加と削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additional Considerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加の考慮すべきこと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>AdditiveArithmetic Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AdditiveArithmetic実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a new element at the end of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds an element to the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある要素をコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the contents of the given buffer to this hasher, mixing it into the hasher state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたバッファの内容をこのハーシャーに加えます、それをハーシャー状態へと混ぜ入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the elements of a sequence or collection to the end of this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスまたコレクションに属するいくつかの要素をこのコレクションの終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the elements of a sequence to the end of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスに属する要素を配列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the elements of the given set to the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた集合の要素をこの集合に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the given element to the option set if it is not already a member.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素を、それがすでにメンバでないならばオプションセットに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the given value to this hasher, mixing its essential parts into the hasher state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値をこのハーシャーに加えます、それの本質的部分それらをハーシャー状態に混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds the product of the two given values to this value in place, computed without intermediate rounding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値の積をこの値にその場で加えます、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two values and produces their sum, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を加算してそれらの合計を生成します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two values and produces their sum.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を加算してそれらの合計を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を加算して、結果を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を加算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を加算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adopt a Delegate Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先プロトコルを採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adopt and interoperate with Cocoa design patterns in your Swift apps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CocoaデザインパターンをあなたのSwiftアプリにおいて採用および相互運用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adopting Common Protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的なプロトコルを採用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adopting this protocol in your custom types lets you perform set-related operations such as membership tests, unions, and intersections on those types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型をあなたのあつらえの型において採用することは、あなたにセット関連演算を行わせます、例えば、それらの型上での帰属テスト、合併、そして交叉など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Advanced Collection Topics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>先進のコレクション話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Advanced Numerics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>先進の数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Advances to the next byte and returns it, or nil if no next byte exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のバイトへ進んでそれを返します、または次のバイトが存在しないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Advances to the next element and returns it, or nil if no next element exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の要素へ進んでそれを返します、または次の要素が存在しないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After You Finish</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがやり終えたあと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After a call to initialize(repeating:), the entire region of memory referenced by this buffer is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initialize(repeating:)の呼び出しの後、このバッファによって参照されるメモリの全領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After a call to initialize(repeating:count:), the memory referenced by this pointer is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initialize(repeating:count:)の呼び出しの後、このポインタによって参照されるメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After a call to initialize(to:), the memory referenced by this pointer is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initialize(to:)の呼び出しの後、このポインタによって参照されるメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After adding CustomDebugStringConvertible conformance by implementing the debugDescription property, Point provides its own custom debugging representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomDebugStringConvertible準拠をdebugDescriptionプロパティを実装することによって追加後は、Pointはそれ独自のあつらえのデバッグ表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After adding CustomStringConvertible conformance by implementing the description property, Point provides its own custom representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomStringConvertible準拠をdescriptionプロパティの実装によって加えた後、Pointはそれ独自のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After applying the macro, the name you use in your Swift code will be what you've chosen by using the macro.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このマクロを適用後、あなたのSwiftコードにおいてあなたが使う名前は、あなたがマクロを使うことにで選択したものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After assigning the new value ("Butler") at a specific position, that value is immediately available at that same position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値（"Butler"）を指定された位置で割り当てた後、その値はすぐにその同じ位置で利用可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling bindMemory(to:capacity:), the first four bytes of the memory referenced by bytesPointer are bound to the Int8 type, though they remain uninitialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bindMemory(to:capacity:)を呼んだ後、bytesPointerによって参照されるメモリの最初の４バイトはInt8型に束縛されます、もっともそれらは未初期化のままであるけれども。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling copyBytes(from:), the source.count bytes of memory referenced by this buffer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>copyBytes(from:)を呼び出した後、このバッファによって参照されるメモリのsource.countバイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling copyMemory(from:), the first source.count bytes of memory referenced by this buffer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>copyMemory(from:)を呼び出した後、このバッファによって参照されるメモリの最初のsource.countバイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling copyMemory(from:byteCount:), the byteCount bytes of memory referenced by this pointer are initialized to raw bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>copyMemory(from:byteCount:)を呼び出した後、このポインタによって参照されるメモリのbyteCountバイトは生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling move(), the memory is uninitialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>move()の呼び出しの後、メモリは初期化されない状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling storeBytes(of:toByteOffset:as:), the memory is initialized to the raw bytes of value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>storeBytes(of:toByteOffset:as:)を呼び出した後、メモリはvalueの生のバイトに初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling deinitialize(count:), the memory is uninitialized, but still bound to the Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>deinitialize(count:)の呼び出しの後、メモリは初期化されない状態です、しかし依然としてPointeeへの境界です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling assign(from:count:), the region is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>assign(from:count:)の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling assign(repeating:count:), the region is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>assign(repeating:count:)の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling initialize(from:count:), the region is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initialize(from:count:)の呼び出し後、この領域は初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling initializeMemory(as:from:), the memory referenced by the returned UnsafeMutableBufferPointer instance is bound and initialized to type S.Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initializeMemory(as:from:)呼び出しの後、UnsafeMutableBufferPointerインスタンスによって参照されるメモリは、型S.Elementに束縛され初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling moveAssign(from:count:), the region is initialized and the memory region source..&lt;(source + count) is uninitialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>moveAssign(from:count:)の呼び出し後、この領域は初期化されます、そしてメモリ領域source..&lt;(source + count)は未初期化状態にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling moveInitialize(from:count:), the region is initialized and the memory region source..&lt;(source + count) is uninitialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>moveInitialize(from:count:)の呼び出し後、この領域は初期化されます、そしてメモリ領域source..&lt;(source + count)は未初期化状態にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling this method on a raw buffer with non-nil baseAddress b, the region starting at b and continuing up to b + self.count - self.count % MemoryLayout&lt;T&gt;.stride is bound to type T and initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを生のバッファ上で非nilのbaseAddress bを使って呼び出した後、bで始まってb + self.count - self.count % MemoryLayout&lt;T&gt;.strideまで続く領域は、型Tに束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling this method on a raw pointer p, the region starting at p and continuing up to p + count * MemoryLayout&lt;T&gt;.stride is bound to type T and initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを生のボインタp上で呼び出した後、pで始まってp + count * MemoryLayout&lt;T&gt;.strideまで続く領域は、型Tに束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After calling this method on a raw pointer p, the region starting at self and continuing up to p + count * MemoryLayout&lt;T&gt;.stride is bound to type T and initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを生のボインタp上で呼び出した後、selfで始まってp + count * MemoryLayout&lt;T&gt;.strideまで続く領域は、型Tに束縛されて初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing body, this method rebinds memory back to the original Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyの実行の後、このメソッドはメモリを元々のElement型に再束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing body, this method rebinds memory back to the original Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>body実行の後、このメソッドは、オリジナルのPointee型へとメモリを再束縛し戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After implementing the description property and declaring CustomStringConvertible conformance, the Point type provides its own custom representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>descriptionプロパティの実装とCustomStringConvertible準拠の宣言の後は、Point型はそれ自身のあつらえの表現を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションを仕切った後、あるピボットインデックスpがあります、そこでpの前の要素は１つもbelongsInSecondPartition述部を満たさず、そしてpでのまたは後のあらゆる要素はbelongsInSecondPartitionを満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After rebasing slice as the rebased buffer, the following are true:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sliceをrebasedバッファとして再構築した後、以下のことが当てはまります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After rebinding the memory referenced by uint8Pointer to UInt64, accessing that pointer’s referenced memory as a UInt8 instance is undefined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>uint8Pointerによって参照されるメモリをUInt64に再束縛する後、そのポインタの参照したメモリにUInt8インスタンスとしてアクセスすることは未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After some time of inactivity, the user’s session may expire, leaving the app in a session expired state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しばらく活動がない後に、ユーザのセッションは期限切れになるかもしれません、アプリを期限切れセッションの状態のままにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the Cake structure has been imported, you can use the default initializer to create an instance and use it as follows:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cake構造体がインポートされた後、あなたは省略時のイニシャライザを使うことでインスタンスを作成してそれを以下のように使用できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the call, the memory referenced by this buffer up to, but not including, the returned index is initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この呼び出しの後、返されるインデックスまでの、しかしそれを含んでいない、このバッファによって参照されるメモリは、初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the user has registered or logged into an account, the state is logged in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがアカウントに登録またはログインした後は、状態はログイン済みです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After this code has executed, the following are true:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコードが実行された後、以下は真です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstIndex(of:)を使って特定の要素の位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>lastIndex(of:)を使って特定の要素の最後のインスタンスの位置をあるコレクションの中で見つけた後、あなたは添え字によって要素にアクセスするのにそれを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After you import an Objective-C framework, a C library, or a header file, you can work with Objective-C classes and protocols, as well as common C constructs, functions, and patterns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがObjective-Cフレームワーク、Cライブラリ、またはあるヘッダファイルをインポートした後、あなたはObjective-Cのクラスとプロトコル、それだけでなく一般的なC構造体、関数、そしてパターンを扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Algebraic Sets</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代数的集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Aliases for Imported C Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたC型に対するエイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All 100 bytes of memory must eventually be deallocated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリの100バイトすべては、そのうち割り当てられなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All Objective-C generic type parameters imported by Swift have a type constraint that requires that type to be a class (T: AnyObject).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトによってインポートされる全てのObjective-C総称体型パラメータは、ある型制約を持ちます、それはあるクラス（T: AnyObject）であることをその型に要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All arity zero tuples are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>項数ゼロのタプルはすべて等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All binary floating-point types have a radix of 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイナリ浮動小数点型は、２の基数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All elements satisfying this predicate are ordered after all elements not satisfying it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この述部を満たす全ての要素は、それを満たさない全ての要素の後に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All indirectly returned Core Foundation objects are unmanaged as well.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての間接的に返されたコアファウンデーション・オブジェクトは、同様に管理されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of the standard library’s integer types, such as Int and UInt32, conform to BinaryInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの持つ整数型の全て、例えばIntとUInt32などは、BinaryIntegerに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All other object instances are annotated as nonnull.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての他のオブジェクトインスタンスは、nonnullであると注釈を付けられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All other values of the Index type, such as the startIndex property of a different collection, are invalid indices for this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Index型の他の値すべて、例えば異なるコレクションのstartIndexプロパティなどは、このコレクションに対する無効なインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the elements following i are moved to close the gap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iに続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the elements following the specified position are moved to close the gap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置に続く要素すべては、隙間を埋めるように移動されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the elements following the specified position are moved up to close the gap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置に続く要素すべては、隔たりを埋めるように繰り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the keys the Decoder has for this container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Decoderがこのコンテナに対して持っている全てのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the keys the decoder has for this container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコーダがこのコンテナに対して持っている全てのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All they must do is conform to ExpressibleByStringInterpolation and implement init(stringLiteral: String); interpolated string literals will then go through that initializer just as any other string literal would.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらがしなければならない全ては、ExpressibleByStringInterpolationへの準拠とinit(stringLiteral: String)の実装です；保管される文字列リテラルは、それからそのイニシャライザを通り抜けます、ちょうど何か他の文字列リテラルするように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All values other than NaN and infinity are considered finite, whether normal or subnormal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNと無限大の他の全ての値は、ノーマルまたはサブノーマルかにかかわらず、有限と見なされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocate and manage memory manually.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリを手動でアロケートして管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates uninitialized memory for the specified number of instances of type Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の型Elementのインスタンスに対して未初期化メモリを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates uninitialized memory for the specified number of instances of type Pointee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Pointeeの指定された数のインスタンスに対して初期化されないメモリをアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allocates uninitialized memory with the specified size and alignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未初期化メモリを指定された大きさとアライメントでアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allow values of your type to be expressed using different kinds of literals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型の値に異なる種類のリテラルを使って表されることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allow your custom types to be used with simple collection operations, such as contains(_:), and standard comparison operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのあつらえの型を、単純なコレクション演算、例えばcontains(_:)など、そして標準比較演算子とともに使われるようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allows a nonescaping closure to temporarily be used as if it were allowed to escape.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非脱出クロージャに、一時的にそれが脱出することを許可されたかのように使われることを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alphabetic scalars are the primary units of alphabets and/or syllabaries.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アルファベットのスカラーは、アルファベットおよび／または音節文字の主要な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいは、述部は、Equatable要素のある範囲またはある一般的条件によって満たされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, if you need to test whether obj.getIntegerValue() exists, use optional binding before calling the method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいは、あなたがobj.getIntegerValue()が存在するかテストする必要があるならば、オプショナル束縛をそのメソッドを呼び出す前に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, if your type can act as its own iterator, implementing the requirements of the IteratorProtocol protocol and declaring conformance to both Sequence and IteratorProtocol are sufficient.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいはまた、あなたの型がそれ自身イテレータとして振る舞うならば、IteratorProtocolプロトコルの要件を実装することとSequenceおよびIteratorProtocolの両方に対する準拠を宣言することで十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, to create an option set instance with multiple members, assign an array literal with multiple static members of the option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいはまた、複数のメンバをもつ１つのオプションセットインスタンスを作成するには、オプションセットの複数の静的メンバをもつ配列リテラルを割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうではなくて、あなたが昇順ではなく降順でソートしたい場合は、このメソッドを使ってComparableに準拠する要素からなるコレクションをソートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can access the same memory as a different type without rebinding through untyped memory access, so long as the bound type and the destination type are trivial types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、あなたは同じメモリに異なる型として再束縛することなしにアクセスすることが型なしメモリアクセスを通して可能です、束縛される型と行き先の型が自明型である限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can convert the function that takes a String to one that is generic over the StringProtocol protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいは、あなたはStringをとる関数をStringProtocolプロトコルを越えて総称体であるものに変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can create a bridging header yourself by choosing File &gt; New &gt; File &gt; [operating system] &gt; Source &gt; Header File.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいはまた、あなたはブリッジヘッダを、File &gt; New &gt; File &gt; [オペレーションシステム] &gt; Source &gt; Header File を選択することであなた自身で作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you can use Swift’s implicit bridging to pass a pointer to an instance or to the elements of an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるいはまた、あなたはSwiftの暗黙的ブリッジを使ってポインタをインスタンスへまたは配列の要素へと渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although .express is not a member of options, .express subsumes the remaining .secondDay element of the option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とは言え.expressはoptionsのメンバではありません、しかし.expressはこのオプションセットの残りの要素.secondDayを包含します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although Swift doesn’t support natively declared unions, a C union imported as a Swift structure still behaves like a C union.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは生得的に宣言された共用体をサポートしないにもかかわらず、Swift構造体としてインポートされたC共用体は依然としてC共用体のように振る舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be multipass: Any element can be repeatedly accessed by saving its index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスはそれが辿って行かれるとき消費されることが可能な一方、コレクションはマルチパスであることを保証されます：どんな要素もそれのインデックスを保存することによって繰り返しアクセスされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although an actual dictionary is arbitrarily-ordered, when you create a mirror with a dictionary literal, the ordering of the mirror’s children will exactly match that of the literal you pass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>actual辞書は気まぐれに順番付けられますが、あなたがミラーを辞書リテラルで作成する時、ミラーの持つchildrenの順番付けは正確にあなたが渡すリテラルのそれと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although strings in Swift have value semantics, strings use a copy-on-write strategy to store their data in a buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおける文字列は値意味論を持ちますが、文字列はコピーオンライト戦略を使ってそれらのデータをバッファに格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although the Swift overlay updates many Objective-C methods to return native Swift indices and index ranges, some still return instances of NSRange.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftオーバーレイが多くのObjective-Cメソッドを更新してSwift生来のインデックスおよびインデックス範囲を返すとはいえ、いくつかはまだNSRangeインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always remember to deallocate any memory that you allocate yourself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなた自身でアロケートするメモリは何であれデアロケートするのを必ず忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always traps.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always use a multiple of a type’s stride instead of its size when allocating memory or accounting for the distance between instances in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリをアロケートするまたはメモリ中のインスタンス間の隔たりを計上する場合には、常にある型の持つstrideの倍数を使ってください、それのsizeではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always use the same properties in both your == and hash(into:) methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常に同じプロパティをあなたの==およびhash(into:)メソッドの両方において使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にスライスのstartIndexプロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always use the slice’s startIndex and endIndex properties instead of assuming that its indices start or end at a particular value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にスライスのstartIndexとendIndexプロパティを使ってください、それのインデックスが特定の値で始まると決めてかかるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always zero, just like endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にゼロ、ちょうどendIndexのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always zero, just like startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にゼロ、ちょうどstartIndexのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always zero, which is the index of the first byte in a nonempty buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>常にゼロ、それはある「空でない」バッファにおける最初のバイトのインデックスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An 8-bit signed integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>8ビット符号つき整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An 8-bit unsigned integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>8ビット符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An AnyBidirectionalCollection instance forwards its operations to a base collection having the same Element type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyBidirectionalCollectionインスタンスは、それの操作を同じElement型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An AnyCollection instance forwards its operations to a base collection having the same Element type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyCollectionインスタンスは、それの操作を同じElement型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An AnyRandomAccessCollection instance forwards its operations to a base collection having the same Element type, hiding the specifics of the underlying collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyRandomAccessCollectionインスタンスは、それの操作を同じElement型を持っている基盤コレクションへと転送して、基礎をなすコレクションの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An AutoreleasingUnsafeMutablePointer&lt;Type&gt; value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AutoreleasingUnsafeMutablePointer&lt;Type&gt;値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeBufferPointerインスタンスは、メモリに対するあるビューであり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeMutableBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableBufferPointerインスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeMutablePointer&lt;Type&gt; value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutablePointer&lt;Type&gt;値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeMutablePointer instance allocated with eight bytes of memory, uint8Pointer, will be used for the examples below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>8バイトのメモリデアロケートされるUnsafeMutablePointerインスタンス、uint8Pointerは、下の例で使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeMutableRawBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawBufferPointerインスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeMutableRawBufferPointer instance is a view of the raw bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawBufferPointerインスタンスは、メモリのある領域の中の生のバイトのある見方（ビュー）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafePointer&lt;Type&gt;, UnsafeMutablePointer&lt;Type&gt;, or AutoreleasingUnsafeMutablePointer&lt;Type&gt; value, which is implicitly cast to UnsafePointer&lt;Type&gt; as necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafePointer&lt;Type&gt;, UnsafeMutablePointer&lt;Type&gt;, または AutoreleasingUnsafeMutablePointer&lt;Type&gt;値、それは暗黙的にUnsafePointer&lt;Type&gt;へと必要に応じてキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafePointer instance allocated with eight bytes of memory, uint8Pointer, will be used for the examples below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>8バイトのメモリデアロケートされるUnsafePointerインスタンス、uint8Pointerは、下の例で使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeRawBufferPointer instance is a view into memory and does not own the memory that it references.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeRawBufferPointerインスタンスは、メモリに対するある見方（ビュー）であり、それが参照するメモリ自体ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An UnsafeRawBufferPointer instance is a view of the raw bytes in a region of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeRawBufferPointerインスタンスは、メモリのある領域の中の生のバイトのある見方（ビュー）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An extended grapheme cluster is a group of one or more Unicode scalar values that approximates a single user-perceived character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張書記素クラスタは、ひとまとめにした１つ以上のユニコードスカラー値です、それは単一のユーザ知覚文字におおよそ相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Objective-C protocol-qualified metaclass is imported by Swift as a protocol metatype, which is a type that represents the type of a protocol itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cプロトコル適格メタクラスは、Swiftによってプロトコルメタタイプとしてインポートされます、それはプロトコルそれ自体の型を表す型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An all-zeros exponent is reserved for subnormals and zeros, and an all-ones exponent is reserved for infinity and NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全てゼロの指数は非正規化数とゼロのために予約されます、そして全て１の指数は無限大とNaNのために予約されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An arity zero tuple is always after or the same as another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>項数ゼロのタプルは、常に語彙筆記的順序において別の項数ゼロのタプルの後またはそれと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An arity zero tuple is always before or the same as another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>項数ゼロのタプルは、常に語彙筆記的順序において別の項数ゼロのタプルの前またはそれと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An arity zero tuple is never strictly after another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>項数ゼロのタプルは、厳密に決して語彙筆記的順序において別の項数ゼロのタプルの後ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An arity zero tuple is never strictly before another arity zero tuple in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>項数ゼロのタプルは、厳密に決して語彙筆記的順序において別の項数ゼロのタプルの前ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array can store any kind of elements—from integers to strings to classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある配列は、整数から文字列まで、あるクラスであるどんなものであることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素を逆順に含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array containing the transformed elements of this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの変換済み要素を含んでいる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array literal is a simple way of expressing a list of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルは、値のリストを表す簡単な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array literal is not the same as an Array instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルは、Arrayインスタンスと同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of arguments to convert to a C va_list pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるC va_listポインタに変換することになる、いくつかの引数からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of subsequences, split from this collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of subsequences, split from this sequence’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素を分割した、下位シーケンスいくらかからなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of the elements that isIncluded allowed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isIncludedが許可する要素からなる配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of the non-nil results of calling transform with each element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの各要素でtransformを呼ぶことの非nilの結果の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array of this sequence’s elements in a shuffled order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの持つ要素からなる配列、シャッフルされた順番で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array that is the sole owner of its storage can perform mutating operations in place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのストレージのただ一人のオーナーである配列は、変化を伴う操作をそこで実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An array to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element equal to newMember if the set already contained such a member; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合がすでにそのようなメンバを含んでいるならば、newMemberに等しい要素；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのある要素は、基盤となるコレクションの中と同じスライスの中のインデックスのもとに位置を突き止められます、コレクションもスライスもスライスが作成された時からずっと変化していない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element of a slice is located under the same index in the slice and in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスの要素は、スライスにおいてそして基盤コレクションにおいて同じインデックス下に位置します、コレクションもスライスもスライスが作成されてから変化させられない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element of the reflected instance’s structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リフレクションされる（自己言及、自己参照の対象の）インスタンスの持つ構造体の中のある要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element to insert into the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合に挿入されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element to look for in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合において捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element to search for in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An element to search for in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合において捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An empty Range instance has equal lower and upper bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のRangeインスタンスは、等しい下方および上方境界を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An empty array literal alone doesn’t provide enough information for the compiler to infer the intended type of the Array instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の配列リテラルそれだけでは、コンパイラがArrayインスタンスの意図される型を推論するのに十分な情報を提供していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An empty tuple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enclosing combining mark.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>囲み結合符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An encoding error was detected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングエラーが検知された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An end value to limit the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスに限界を設けるための終了値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enumeration of the elements of a sequence or collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスまたはコレクションの要素の列挙。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An equivalent range must be representable as a closed range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等の範囲が、完結範囲として表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An equivalent range must be representable as an instance of Range&lt;Bound&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等の範囲が、Range&lt;Bound&gt;のインスタンスとして表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An error that occurs during the decoding of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のデコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An error that occurs during the encoding of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のエンコーディングの間に起こるエラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An escaped textual representation of the Unicode scalar, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーのエスケープされたテキスト表現、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of scalars that only have isCased as true are the Latin small capitals that are used by the International Phonetic Alphabet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isCasedを true として持つだけであるスカラーの例は、国際音声記号によって使われるラテンスモールキャピタルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An extended-precision, floating-point value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張倍精度、浮動小数点値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An immutable pointer to the elements of an array is implicitly created when you pass the array as an argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の要素への不変ポインタは、あなたが配列を引数として渡す時に暗黙的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An implementation detail of key path expressions; do not use this protocol directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパス式の実装詳細；このプロトコルを直接に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An in-out expression of type Type that contains a mutable variable, property, or subscript reference, which is passed as a pointer to the address of the mutable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの可変変数、プロパティ、または添え字参照を含んでいる、型Typeのin-out式、それはその可変値のアドレスに対するボインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An in-out expression of type [Type] that contains a mutable variable, property, or subscript reference, which is passed as a pointer to the start of the array, and is lifetime-extended for the duration of the call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変の変数、プロパティ、または添え字参照を含んでいる、型[Type]のin-out式、それはその配列の始まりへのポインタとして渡されます、そして呼び出しの間は寿命延長されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An in-out expression that contains a mutable variable, property, or subscript reference of type Type, which is passed as a pointer to the address of the left-hand side identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Typeの可変変数、プロパティ、または添え字参照を含むインアウト式、それは左手側識別子のアドレスへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An in-out expression that contains a mutable variable, property, or subscript reference of type Type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Typeの可変変数、プロパティ、または添え字参照を含むインアウト式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceだけインデックスiから補われたインデックス、そのインデックスがlimitを移動方向において越える場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index offset by distance from the index i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceだけインデックスiから補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index offset by n from the index i, unless that index would be beyond limit in the direction of movement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nだけインデックスiから補われたインデックス、そのインデックスがlimitを移動方向において越える場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index offset by n from the index i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nだけインデックスiから補われるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index that traverses the same positions as an underlying index, with inverted traversal direction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある基礎をなすインデックスが指すのと同じ幾つかの位置を、逆の走査順で辿っていくインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An index to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication of a decoding error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコードエラーのしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication that a keyed decoding container was asked for an entry for the given key, but did not contain one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付きデコーディングコンテナが与えられたキーに対する登録項目について尋ねられた、しかし含んでいるものがなかったことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication that a non-optional value of the given type was expected, but a null value was found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型のある非オプショナル値が期待された、しかしnull値が見つけられたことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication that a value of the given type could not be decoded because it did not match the type of what was found in the encoded payload.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の値がデコードできなかった、なぜならエンコードされたペイロードの中に見つけられた何かの型とそれが合致しなかったことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication that an encoder or its containers could not encode the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーダまたはそれのコンテナが与えられた値をエンコードできなかったことを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication that no more Unicode scalars are available in the input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この入力の中にこれ以上利用可能なユニコードスカラーがないしるし。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An indication that the data is corrupted or otherwise invalid.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データが不正またはそうでなくとも無効であることを指し示すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An initial quotation mark.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の引用符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of AnySequence forwards its operations to an underlying base sequence having the same Element type, hiding the specifics of the underlying sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnySequenceのインスタンスは、同じElement型を持つある基礎をなす基盤シーケンスへと操作を転送します、基礎をなすシーケンスの特殊化を隠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of StringInterpolation which has had each segment of the string literal appended to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringInterpolationのインスタンス、それはそれへと加えられた文字列リテラルの各文節を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of a hashable type can reduce its value mathematically to a single integer, which is used internally by sets and dictionaries to make lookups consistently fast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hashable型のインスタンスは、それの値を単一の整数へと数学的に還元できます、それは検索を常に高速なものにするために集合と辞書によって内部的に使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクラスのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of an observer class manages information about changes made to one or more properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブザーバクラスのあるインスタンスは、ひとつ以上のプロパティに対してなされる変更についての情報を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance of this iterator wraps a base iterator and yields successive Int values, starting at zero, along with the elements of the underlying base iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイテレータのインスタンスは、基盤イテレータをラップして、連続するInt値を、ゼロで開始して、基礎をなす基盤イテレータの要素と一緒に生じます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance that is expressed as a literal can also be used with this operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リテラルとして表されるインスタンスはまた、この演算子とともに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance to cast to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tにキャストすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance to preserve until the execution of body is completed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyの実行が完了するまで保護するインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance to temporarily access through a mutable raw buffer pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変の生のバッファポインタを通して一時的にアクセスされることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance to temporarily access through a raw buffer pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のバッファポインタを通して一時的にアクセスされることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An instance to temporarily use via pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタ経由で一時的に使われることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer to convert to this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型へと変換する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換する整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer type that can represent both positive and negative values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正および負の値の両方を表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer type that can represent only nonnegative values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非負値だけを表すことができる整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer type that uses a fixed size for every instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆるインスタンスに対して固定された大きさを使う整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer type with a binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイナリ表現での整数型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An interval from a lower bound up to, and including, an upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下側の境界から、上側の境界までの、そしてそれを含む、間隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator for Zip2Sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Zip2Sequenceのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator for a StrideThrough instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StrideThroughインスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator for a StrideTo instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StrideToインスタンスのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator for the elements in the buffer referenced by an UnsafeBufferPointer or UnsafeMutableBufferPointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeBufferPointerまたはUnsafeMutableBufferPointerによって参照されるバッファの中の要素のためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator of code units to be decoded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコードされることになるいくらかのコード単位のイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator of code units to be translated, encoded as inputEncoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>翻訳されることになるいくらかのコードユニットからなるあるイテレータ、inputEncodingとしてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator of code units to be translated, encoded as sourceEncoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>翻訳されることになるいくらかのコード単位からなるあるイテレータ、sourceEncodingとしてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the Unicode scalars that make up a UnicodeScalarView collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるUnicodeScalarViewコレクションを作り上げているユニコードスカラーのすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the bytes viewed by a raw buffer pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある生のバッファポインタによるビューでのバイトすべてに対するイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the dictionary with elements of type (key: Key, value: Value).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型(key: Key, value: Value)の要素を持つ辞書のすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the elements of this buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパッファの要素すべてを対象としたイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the elements traversed by a base iterator that follow the initial consecutive elements that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある基盤イテレータによって辿られる要素で、与えられた述部を満足させる最初の連続した要素に続くものすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the elements traversed by some base iterator that also satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの基盤イテレータによって辿られるいくらかの要素でさらにまた与えられた述部を満足させるものを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the initial elements traversed by a base iterator that satisfy a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある基盤イテレータによって辿られるもので、与えられた述部を満足させる最初の要素らを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the members of a Dictionary&lt;Key, Value&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Dictionary&lt;Key, Value&gt;のメンバーすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over the members of a Set&lt;Element&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Set&lt;Element&gt;のメンバーすべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator over this collection’s Unicode.Scalar elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションのもつUnicode.Scalar要素すべてを対象とするイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator that never produces an element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>決して要素を生成しないイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator that presents the elements of the sequences traversed by a base iterator, concatenated using a given separator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるイテレータ、それは基盤イテレータによって辿っていかれるいくらかのシーケンスに属する要素らを、与えられたセパレータを使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator that produces one or zero instances of an element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある要素のインスタンスを１つまたは０個生み出すイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator to any elements of source that didn’t fit in the buffer, and a typed buffer of the written elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファに収まらないsourceの何らかの要素に対するイテレータ、そして書き出される要素の型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator to any elements of source that didn’t fit in the buffer, and an index to the point in the buffer one past the last element written.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceの何らかの要素で、バッファの中にぴったり合わないものに対するイテレータ、そして書かれた最後の要素を１つすぎたバッファの中の地点に対するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An iterator to type-erase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型消去することになるイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object representing a dynamic collection of key-value pairs, for use instead of a Dictionary variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアからなる動的なコレクションを表しているオブジェクト、参照意味論を必要とする場合にDictionary変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object representing a dynamic ordered collection, for use instead of an Array variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的な順序付きコレクションを表しているオブジェクト、参照意味論を必要とする場合にArray変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object representing a dynamic, unordered, uniquing collection, for use instead of a Set variable in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的な、順序なしの、特有なコレクションを表しているオブジェクト、参照意味論を必要とする場合にSet変数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object representing a static collection of key-value pairs, for use instead of a Dictionary constant in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアからなる静的なコレクションを表しているオブジェクト、参照意味論を必要とする場合にDictionary定数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object representing a static ordered collection, for use instead of an Array constant in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的な順序付きコレクションを表しているオブジェクト、参照意味論を必要とする場合にArray定数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object representing a static, unordered, uniquing collection, for use instead of a Set constant in cases that require reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的な、順序なしの、特有なコレクションを表しているオブジェクト、参照意味論を必要とする場合にSet定数の代わりに使うため。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An offset in code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード単位でのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An opaque C pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不透明Cポインター。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An opaque pointer to the value of this unmanaged reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この管理されない参照の値への不透明ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An opening punctuation mark of a pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある対のある開き句読点符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプションセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較することになるオプショナル値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An ordered, random-access collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>順序付けられた、無作為アクセスのコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An output stream to receive the text representation of each item.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各項目のテキスト表現を受け取る出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある出力ストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An overshift results in -1 for a negative value of lhs or 0 for a nonnegative value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーシフトは、負の値のlhsに対して-1または非負値に対して0という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unkeyed container view into this decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このデコーダへのキー無しコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unkeyed decoding container view into self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfへのキー無しデコーディングコンテナビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unmanaged class reference to value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueへの管理されないクラス参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unmanaged reference to the object passed as value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueとして渡されるオブジェクトへの管理されない参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unordered collection of unique elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>順番付けられない特有な要素からなるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unsigned 64-bit random value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なし64ビット無作為値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unsigned integer value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なし整数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unsigned, fixed-width integer type can represent values from 0 through (2 ** bitWidth) - 1, where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なしの、固定長整数型は、０から(2 ** bitWidth) - 1までの値を表せます、そこで**は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An unspecified result is supplied automatically by the Swift standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未指定の結果はSwift標準ライブラリによって自動的に提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An uppercase copy of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列の大文字でのコピー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An uppercase letter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>大文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And because ArraySlice presents the same interface as Array, you can generally perform the same operations on a slice as you could on the original array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてArraySliceはArrayと同じインターフェイスを提供するので、あなたは一般的にあなたが元の配列上でできるのと同じ操作をスライス上で実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And here’s how Swift imports it:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そしてここにスウィフトがそれをインポートする方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotate Nullability of Individual Declarations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個々の宣言のヌル可能性に注釈を付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotate a Property for Key-Value Observing</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値監視のためのプロパティに注釈をつける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annotate property declarations, parameter types, and return types that are simple objects or block pointers using the nullable, nonnull, and null_resettable property attributes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティ宣言、パラメータ型、そして戻り値で、nullable、nonnull、そしてnull_resettableプロパティ属性を使っている単純なオブジェクトまたはブロックパラメータであるものに注釈を付けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Annototate Regions as Nonnullable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域に非ヌル可能性として注釈を付ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another array to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較するもう一方の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう１つの浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another index to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の比較するインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another integer to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較するもう一方の整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう１つの整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another optional value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の比較するオプショナル値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another range to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の比較する範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another range-replaceable collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の範囲置換可能なコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another reference to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の比較する参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another tuple of elements of the same type as lhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>lhsと同じ型の要素からなる別のタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another type to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較するもう一方の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another type-erased hashable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の型消去ハッシュ化値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another valid index of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの別の有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another value to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう一方の比較する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any String instance can be bridged to NSString using the type-cast operator (as), and any String instance that originates in Objective-C may use an NSString instance as its storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかのStringインスタンスは、NSStringへブリッジされることが型キャスト演算子（as）を使って行えます、そして何らかのStringインスタンスでObjective-C起源のものはNSStringインスタンスをそれのストレージとして使っても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any contextual information set by the user for decoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコーディングに対するユーザによって設定される何らかの前後関係情報。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any contextual information set by the user for encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングのためのユーザによって設定される何らかの前後関係情報。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any fractional part of value is removed, rounding the resulting value toward zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueの小数部分は何であれ取り除かれます、結果となる値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any fractional part of the value passed as source is removed, rounding the value toward zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceとして渡される値の小数部分は何であれ取り除かれます、値はゼロへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any fractional part of the value passed as source is removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceとして渡される値の小数部分は何であれ取り除かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any memory in the region source..&lt;(source + count) that does not overlap with the destination region is returned to an uninitialized state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域source..&lt;(source + count)の中の何らかのメモリで行き先の領域と重ならないものは、未初期化状態に戻されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any padding is performed by sign-extending the passed value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆる詰め物は、渡された値を符号拡張することによって実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any public Objective-C headers listed in the bridging header are visible to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジヘッダにおいて列記されるあらゆるパブリックObjective-Cヘッダは、Swiftにとって見ることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any remaining mirror path components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆる残りのミラーパス構成要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any type that conforms to the Hashable protocol can be used as a dictionary’s Key type, including all of Swift’s basic types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftの基本的な型のすべてを含めて、Hashableプロトコルに準拠するあらゆる型は、辞書のKey型として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any type that declares conformance to the Error protocol can be used to represent an error in Swift’s error handling system.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Errorプロトコルへの準拠を宣言するあらゆる型は、エラーをSwiftのエラー処理システムにおいて表すために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any value whose magnitude is so great that it would round to a value outside the range of representable numbers is rounded to infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの規模が大きすぎるので表現可能な数の範囲外の値に丸められるであろう何らかの値は、無限大に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再割り当ての引き金となる追加操作はある性能コストを持ちます、しかしそれらは配列がより大きく成長するにつれて大抵ますます少ない頻度でしか生じません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appending Strings and Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列と文字を追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appending the key path passed as path is successful only if the root type for path matches this key path’s value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pathとして渡されるキーパスの追加は、pathのルート型がこのキーパスの持つ値型と合致する場合にのみ成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends a literal segment of a string interpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列補間のリテラル断片を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends a literal segment to the interpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるリテラル文節をその補間に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the Unicode scalar values in the given sequence to the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの中のユニコードスカラー値をビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the characters in the given sequence to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの中の文字を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the elements of a sequence to a range-replaceable collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスの要素を範囲置換コレクションに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the given Unicode scalar to the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコードスカラーをビューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the given character to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字を文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the given string to the stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列をストリームへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends the given string to this string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列をこの文字列へ加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apple platforms use arc4random_buf(3).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Appleプラットホームは、arc4random_buf(3)を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applications that store identifiers in NFKC normalized form should instead use isXIDContinue to check whether a scalar is a valid identifier character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NFKC正規化形式で識別子を格納するアプリケーションは、代わりにisXIDContinueを使って、あるスカラーが有効な識別子文字であるかどうかを調べるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applications that store identifiers in NFKC normalized form should instead use isXIDStart to check whether a scalar is a valid identifier character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NFKC正規化形式で識別子を格納するアプリケーションは、代わりにisXIDStartを使って、あるスカラーが有効な識別子文字であるかどうかを調べるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apply CF_SWIFT_NAME to Related Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CF_SWIFT_NAMEを関連した関数に適用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apply macros to your Objective-C APIs to customize how they're imported into Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マクロをあなたのObjective-C APIに適用して、それらがSwiftにインポートされる方法をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Applying the NS_REFINED_FOR_SWIFT macro exposes the existing Objective-C API for reuse in your refined API.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_REFINED_FOR_SWIFTマクロを適用することは、既存のObjective-C APIを、あなたの改良されたAPIにおいて再利用するために公開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Archives and Serialization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アーカイブとシリアライゼーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Are you measuring the number of characters that will be displayed on the screen, or are you measuring the amount of storage needed for the string in a particular encoding?</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが画面上に表示される文字の数を数えているのか、またはあなたはある特定の符号化での文字列に必要とされるストレージの量を測っているのか？。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arithmetic</seg>
      </tuv>
      <tuv lang="JA">
        <seg>算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arithmetic with Assignment</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代入での算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays and Dictionaries</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays are one of the most commonly used data types in an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列は、アプリにおいて最も一般的に使われるデータ型の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays need to follow a geometric allocation pattern for appending elements to achieve amortized constant-time performance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ならし定数時間性能を達成するために、配列は要素を追加するのにある幾何数級的なアロケートパターンに従う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays, like all variable-size collections in the standard library, use copy-on-write optimization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列は、標準ライブラリにおける可変サイズコレクションのすべてと同じく、コピーオンライト最適化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays, sets, and option sets all conform to ExpressibleByArrayLiteral, and your own custom types can as well.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列、集合、またはオプションセットは、すべてExpressibleByArrayLiteralに準拠します、そしてあなた独自のあつらえの型もまたそうできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As You Work</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが作業するとき</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a consequence, don’t assume that multiple for-in loops on a sequence will either resume iteration or restart from the beginning:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、あるシーケンス上での複数のfor-inループが反復を途中から再開するかまたは初めから再度着手するか、どちらかを決めてかからないでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, type(of:) can only produce the concrete metatype P.Protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、type(of:)は具象メタタイプP.Protocolを生成することだけが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, changing the value of a property on an instance of the imported structure changes the value of all other properties defined by that structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、インポートされた構造体上でプロパティを変更することは、その構造体によって定義される全ての他のプロパティの値を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、ある文字列の異なる表現は等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, each view of the string "🇵🇷" reports a different length.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、文字列"🇵🇷"の各ビューは異なる長さを報告します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, requests to the database won't accidentally change the wrong record.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、データベースに対する要請は誤って相応しくないレコードを変更することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, you can chain multiple ?? operators together.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、あなたは複数の??を一緒に鎖状につなげることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a result, you can look at a section of code and be more confident that changes to instances in that section will be made explicitly, rather than being made invisibly from a tangentially related function call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として、あなたはコードのある区画を調べて、その区画のインスタンスに対する変更が明確だということを、ほとんど無関係な関連する関数呼び出しから不可視に行われるよりむしろずっと自信を持てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an associated value, this case contains the context for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある関連値として、この場合はデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, consider a GridPoint type that describes a location in a grid of buttons.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの例として、GridPoint型を考えてみてください、それはある格子状配列のボタンにおけるある場所を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, consider a StreetAddress class that holds the parts of a street address: a house or building number, the street name, and an optional unit number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例として、StreetAddressクラスを考えてください、それは通り住所の部分；家またはビル番地、通りの名、そして随意に戸番号を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, here’s an implementation of a Date structure that stores the year, month, and day of a date:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例として、ある日付の年、月、そして日を格納するあるDate構造体の実装がここにあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, here’s an implementation of an output stream that converts any input to its plain ASCII representation before sending it to standard output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一例として、ここに出力ストリームの実装があります、それは何らかの入力を標準出力に送る前にそれの標準ASCII表現に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの例として、あるシーケンスが特定の値を含むかどうか確認するために、あなたは各値を順次テストすることが、あなたが一致するものを見つけるかそのシーケンスの終わりに達するまで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As associated values, this case contains the attempted key and context for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連値いくつかとして、この場合は試みられたキーとデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As associated values, this case contains the attempted type and context for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連値いくつかとして、この場合は試みられた型とデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As associated values, this case contains the attempted value and context for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連値いくつかとして、この場合は試みられた値とデバッグのための前後関係を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As is typical in Swift, you can call the print(address:as:) function with an UnsafeMutableRawPointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは普通であるように、あなたはprint(address:as:)関数をUnsafeMutableRawPointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As is typical in Swift, you can call the print(address:as:) function with an UnsafeRawPointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは普通であるように、あなたはprint(address:as:)関数をUnsafeRawPointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As is typical in Swift, you can call the printInt(atAddress:) function with an UnsafeMutablePointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは普通であるように、あなたはprintInt(atAddress:)関数をUnsafeMutablePointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As is typical in Swift, you can call the printInt(atAddress:) function with an UnsafePointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは普通であるように、あなたはprintInt(atAddress:)関数をUnsafePointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As noted in the previous section, two instances that are considered equal must have the same hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前の節で注記されるように、等しいとみなされる２つのインスタンスは、同じハッシュ値を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As of Unicode 6.3, any new scalars that represent numbers but do not meet the requirements of decimal will have numeric type numeric, and programs can treat digit and numeric equivalently.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコード6.3現在、数を表す何らかの新しいスカラー、しかしdecimalの要件を満たさないものは、数値型numericを持ちます、そしてプログラムはdigitとnumericを同等にみなすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As soon as the sequence has run out of elements, all subsequent calls return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが要素を使い果たすやいなや、全てのその後の呼び出しはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, it should be possible to re-create an instance from its string representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それなので、それはそれの文字列表現からインスタンスの再度作成が可能であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the dictionary is built, the initializer calls the combine closure with the current and new values for any duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書が組み立てられるとき、このイニシャライザはcombineクロージャを何らかの重複キーに対してその現在および新規の値とともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the key-value pairs are merged with the dictionary, the combine closure is called with the current and new values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらキー値ペアが辞書に結合されるときに、出くわした全ての重複キーに対してその現在および新規の値とともにcombineクロージャが呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the key-value pairs in other are merged with this dictionary, the combine closure is called with the current and new values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherの中のキー値ペアがこの辞書と結合される時、combineクロージャは、遭遇される何らかの重複キーに対して現在および新規の値とともに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As the key-values pairs in other are merged with this dictionary, the combine closure is called with the current and new values for any duplicate keys that are encountered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherの中のキー値ペアがこの辞書と結合されるとき、combineクロージャは、遭遇される何らかの重複キーに対して現在および新規の値とともに呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with any basic operation, if this value is outside the representable range of the type, overflow or underflow occurs, and zero, a subnormal value, or infinity may result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆる基本的演算でのように、この値がその型の表現可能な範囲の外側ならば、オーバーフローまたはアンダーフローが起こります、そしてゼロ、サブノーマル値、または無限大が結果となるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you work with Objective-C APIs, you’ll need to know how Swift translates certain Objective-C language features.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがObjective-C APIを扱うとき、あなたはスウィフトがどのように特定のObjective-C言語機能を翻訳するか知っている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning into a ranged subscript of an UnsafeMutableRawBufferPointer instance copies bytes into the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawBufferPointerインスタンスの範囲指定された添え字に対してアサインすることは、それらバイトをメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigning to part of the buffer must be done using the assign(repeating:count:)``  method on the buffer’s baseAddress`.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの一部に対するアサインは、assign(repeating:count:)`` メソッドをバッファのもつbaseAddress` 上で使って終わっていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assigns every element in this buffer’s memory to a copy of the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファのもつメモリの中の全ての要素をこの与えられた値のあるコピーに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associate the Observer with the Property to Observe</seg>
      </tuv>
      <tuv lang="JA">
        <seg>監視するプロパティとオブザーバを結びつける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associated Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまな関連型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Associativity</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結合性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assume that S is a custom type that conforms to the SetAlgebra protocol, x and y are instances of S, and e is of type S.Element—the type that the set holds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SはSetAlgebraプロトコルに準拠するあつらえの型、xとyはSのインスタンス、そしてeは型S.Element — 集合が保持する型、と仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Asynchronous calls are another type of API that typically escape their closure arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非同期呼び出しは別の種類のAPIで、それは一般的にそれらのクロージャ引数を脱出させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At least one of the sequences must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>少なくともシーケンスのうちの一方は有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある要素にスライスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある要素にスライスのもつインデックスの境界外のインデックスを使ってアクセスを試みることは、実行時エラーという結果になるでしょう、たとえそのインデックスが元々のコレクションに対して有効であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to call the collectionWithValues:forKeys: method in Swift results in a compiler error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>collectionWithValues:forKeys:メソッドをスウィフトにおいて呼び出す試みは、コンパイラエラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to remove more elements than exist in the collection triggers a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの中に存在するより多くの要素の削除を試みることは実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attempting to remove the same shipping option a second time results in nil, because options no longer contains .priority as a member.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じ出荷オプションの削除を２回目に試みることはnilという結果になります、optionsはもはや.priorityをメンバとして含まないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when ArrayLiteralElement is Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArrayLiteralElementがElementである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to BidirectionalCollection and Base.Element conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionに準拠するそしてBase.ElementがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to BidirectionalCollection and Base.Index conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionに準拠するそしてBase.IndexがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionとRangeReplaceableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to Collection and Base.Element conforms to Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠するそしてBase.ElementがCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to Collection and Base.Index conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠するそしてBase.IndexがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to Collection, Base.Element conforms to Collection, Base.Index conforms to Hashable, and Base.Element.Index conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠する、Base.ElementがCollectionに準拠する、Base.IndexがHashableに準拠する、そしてBase.Element.IndexがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to ContiguousBytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがContiguousBytesに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to DataProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがDataProtocolに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to MutableCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがMutableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Base conforms to RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがRangeReplaceableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Bound conforms to BinaryInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがBinaryIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Bound conforms to Hashable, Bound conforms to Strideable, and Bound.Stride conforms to SignedInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがHashableに準拠する、BoundがStrideableに準拠する、そしてBound.StrideがSignedIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Bound conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがStrideableに準拠するそしてBound.StrideがSignedIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Bound is Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがIntである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Bound is String.Index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがString.Indexである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがComparableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to Decodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがDecodableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to Encodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがEncodableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがEquatableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to MLDataValueConvertible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがMLDataValueConvertibleに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to Sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがSequenceに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element conforms to StringProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがStringProtocolに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element is (CGRect, NSColor).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Elementが(CGRect, NSColor)である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element is (CGRect, gray: CGFloat).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Elementが(CGRect, gray: CGFloat)である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element is MLDataValue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがMLDataValueである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element is NSRect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがNSRectである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element is String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがStringである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Element is UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがUInt8である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Elements conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementsがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Elements conforms to LazyCollectionProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementsがLazyCollectionProtocolに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Elements conforms to LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementsがLazySequenceProtocolに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when ExtendedGraphemeClusterLiteralType is StringLiteralType.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExtendedGraphemeClusterLiteralTypeがStringLiteralTypeである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when ExtendedGraphemeClusterLiteralType is UnicodeScalarLiteralType.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExtendedGraphemeClusterLiteralTypeがUnicodeScalarLiteralTypeである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Index conforms to Strideable, Indices is Range&lt;Self.Index&gt;, and Index.Stride is Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IndexがStrideableに準拠する、IndicesがRange&lt;Self.Index&gt;である、そしてIndex.StrideがIntである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Indices is DefaultIndices&lt;Self&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IndicesがDefaultIndices&lt;Self&gt;に準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Iterator is IndexingIterator&lt;Self&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IteratorがIndexingIterator&lt;Self&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Key conforms to Decodable and Value conforms to Decodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyがDecodableに準拠するそしてValueがDecodableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Key conforms to Encodable and Value conforms to Encodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyがEncodableに準拠するそしてValueがEncodableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Key conforms to MLDataValueConvertible and Value conforms to MLDataValueConvertible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyがMLDataValueConvertibleに準拠するそしてValueがMLDataValueConvertibleに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when RawSignificand conforms to FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RawSignificandがFixedWidthIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when RawValue conforms to FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RawValueがFixedWidthIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar conforms to BinaryFloatingPoint and Scalar.RawSignificand conforms to FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがBinaryFloatingPointに準拠するそしてScalar.RawSignificandがFixedWidthIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar conforms to BinaryFloatingPoint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがBinaryFloatingPointに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがComparableに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar conforms to FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがFixedWidthIntegerに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar conforms to FloatingPoint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがFloatingPointに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar is Double.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがDoubleである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Scalar is Float.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ScalarがFloatである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to BidirectionalCollection and Self is SubSequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがBidirectionalCollectionに準拠するそしてSelfがSubSequenceである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがBidirectionalCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Bool.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがBoolである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Double.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがDoubleである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Float.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがFloatである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Int16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがInt16である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Int32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがInt32である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Int64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがInt64である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Int8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがInt8である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがIntである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがStringである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is UInt16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがUInt16である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is UInt32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがUInt32である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is UInt64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがUInt64である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがUInt8である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Decodable and RawValue is UInt.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがDecodableに準拠してRawValueがUIntである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Bool.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがBoolである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Double.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがDoubleである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Float.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがFloatである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Int16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがInt16である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Int32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがInt32である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Int64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがInt64である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Int8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがInt8である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがIntである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがStringである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is UInt16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがUInt16である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is UInt32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがUInt32である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is UInt64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがUInt64である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがUInt8である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Encodable and RawValue is UInt.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがEncodableに準拠してRawValueがUIntである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to ExpressibleByIntegerLiteral.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがExpressibleByIntegerLiteralに準拠する場合に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to FixedWidthInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがFixedWidthIntegerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to Hashable and RawValue conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがHashableに準拠するそしてRawValueがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to MutableCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがMutableCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to RandomAccessCollection and Element conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがRandomAccessCollectionに準拠するそしてElementがComparableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to RandomAccessCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがRandomAccessCollectionに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to _ExpressibleByBuiltinIntegerLiteral.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Selfが_ExpressibleByBuiltinIntegerLiteralに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self conforms to _Pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Selfが_Pointerに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self is AnyKeyPath.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがAnyKeyPathである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self is Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがElementである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self is Elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがElementsである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self is Iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがIteratorである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Self is SubSequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SelfがSubSequenceである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when StringInterpolation is DefaultStringInterpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringInterpolationがDefaultStringInterpolationである時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when SubSequence is Slice&lt;Self&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SubSequenceがSlice&lt;Self&gt;である時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Value conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ValueがEquatableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Value conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ValueがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Wrapped conforms to Decodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがDecodableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Wrapped conforms to Encodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがEncodableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Wrapped conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがEquatableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available when Wrapped conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがHashableに準拠する時に利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Base glyphs that occupy their own space and do not combine with others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら独自の空間を占有するそして他のものと結合していない基底字体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic Arithmetic</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic Behaviors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本の挙動</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic Collections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本コレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basic string operations are not sensitive to locale settings, ensuring that string comparisons and other operations always have a single, stable result, allowing strings to be used as keys in Dictionary instances and for other purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的な文字列演算はロケール設定に影響を受けず、文字列比較および他の演算が常にある単一の、安定した結果を持つことを保証して、文字列がDictionaryインスタンスにおけるキーとしておよび他の目的のために使われることを可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be aware, therefore, that general operations on ${Self} instances may not have the documented complexity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自覚すべきは、したがって、${Self}インスタンス上での全体的な演算が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be aware, therefore, that general operations on LazyFilterCollection instances may not have the documented complexity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自覚すべきは、したがって、LazyFilterCollectionインスタンス上での全体的な演算が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be aware, therefore, that general operations on lazy collections may not have the documented complexity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自覚すべきは、したがって、遅延コレクション上での一般的な演算が複雑に記述されるものを持たないようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be sure to deallocate any memory that you manually allocate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが手動でアロケートしてあらゆるメモリをデアロケートするのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Array is the default type for an array literal, without writing any other code, you can declare an array with a particular element type by providing one or more values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Arrayは配列リテラルのための省略時の型なので、なんら他のコードを書くことなく、あなたはひとつ以上の値を提供することによって特定の要素型を持つ配列を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because CollectionOfTwo doesn’t define its own makeIterator() method or Iterator associated type, it uses the default iterator type, IndexingIterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CollectionOfTwoは独自のmakeIterator()メソッドまたはIterator関連型を定義しないことから、それは省略時のイテレータ型、IndexingIteratorを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because IntegerRef is a class, its instances can be compared using the identical-to operator (===).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IntegerRefがクラスであるので、それのインスタンスは同一性演算子（===）を使って比較されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Range represents a half-open range, a Range instance does not contain its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Rangeは半開範囲を表すことから、Rangeインスタンスはそれの上方の境界を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because print(address:as:) requires an immutable pointer, although this is syntactically valid, it isn’t necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print(address:as:)が不変ポインタを要求することから、これは構文的には有効ですが、必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because printInt(atAddress:) requires an immutable pointer, although this is syntactically valid, it isn’t necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>printInt(atAddress:)が不変ポインタを要求することから、これは構文的には有効ですが、必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because NSString is immutable, it is just as though the storage was shared by a copy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSStringは不変であることから、まるでまさにストレージがコピーによって共有されたかのようです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Cocoa methods with errors parameters are imported as throwing methods, you handle them using Swift's do-catch statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーパラメータを持つCocoaメソッドはスローメソッドとしてインポートされることから、あなたはそれらをSwiftのdo-catch文で処理できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because NaN compares not less than nor greater than any value, this method returns false when called on NaN or when NaN is passed as other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNはあらゆる値より少なくもないし大きくもないと比較されるので、このメソッドがfalseを返すのは、NaN上で呼ばれた時またはNaNがotherとして渡された場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because NaN is incomparable with any value, this method returns false when called on NaN or when NaN is passed as other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNはあらゆる値と比較不可能なので、このメソッドがfalseを返すのは、NaN上で呼ばれた時またはNaNがotherとして渡された場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because NaN is not equal to any value, including NaN, use this property instead of the equal-to operator (==) or not-equal-to operator (!=) to test whether a value is or is not NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNは、NaNを含めてあらゆる値と等しくないので、同等演算子（==）または不等演算子（!=）の代わりにこのプロパティを使うことで、ある値がNaNであるのかまたはないのかをテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Swift can’t guarantee at compile time that these methods and properties are actually available on an AnyObject instance’s underlying type, these @objc symbols are available as implicitly unwrapped optional methods and properties, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftはそれらのメソッドやプロパティがAnyObjectインスタンスの下に横たわる型で実際に利用可能であるとコンパイル時に保証しないため、これら@objcシンボルは暗黙的にアンラップされるオプショナルのメソッドやプロパティとしてそれぞれ利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because Swift provides several ways to safely unwrap optional values, you can choose the one that helps you write clear, concise code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは安全にオプショナル値をアンラップするために複数の方法を提供するので、あなたは明快な、簡潔なコードを記述する助けとしてその１つを選ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a PartialRangeFrom sequence counts upward indefinitely, do not use one with methods that read the entire sequence before returning, such as map(_:), filter(_:), or suffix(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>PartialRangeFromシーケンスが上向きに無限に数えることから、返す前にシーケンス全体を読み出すメソッド、例えばmap(_:)、filter(_:)、またはsuffix(_:)などを持つものと一緒に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a NaN always compares not equal to itself, to test whether a floating-point value is NaN, use its isNaN property instead of the equal-to operator (==).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNは常にそれ自身に対して等しくないと比較されることから、浮動小数点値がNaNかどうかテストするには、それのisNaNプロパティを同等演算子（==）の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a Unicode scalar value can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding to a Unicode scalar view after a call to reserveCapacity(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユニコードスカラー値が単一ASCII文字相当のストレージより多く要求する可能性があることから、reserveCapacity(_:)への呼び出しの後に文字ビューにあるユニコードスカラー値を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユニコードスカラー値はそれの値を格納するのに21ビットに至るまで要求できるので、いくつかのユニコードスカラーはUTF-16ではペア（一対）の16ビットコード単位によって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a closed range cannot represent an empty range, this property is always false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲は空の範囲を表すことができないので、このプロパティは常にfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a closed range includes its upper bound, a closed range whose lower bound is equal to the upper bound contains that value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲はそれの上側の境界を含むことから、それの下側の境界が上側の境界と等しい完結範囲はその値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a closed range includes its upper bound, the ranges in the following example also overlap:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲はそれの上方の境界を含むことから、以下の例の範囲もまた重なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a half-open range does not include its upper bound, the ranges in the following example do not overlap:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半壊範囲はそれの上方の範囲を含まないことから、以下の例の範囲は重なりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a mutable typed pointer can be implicitly cast to an immutable pointer with the same Pointee type when passed as a parameter, you can also call printInt(atAddress:) with an UnsafeMutablePointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変の型付ポインタは同じPointee型を持つ不変のポインタに暗黙的にキャストされることがパラメータとして渡される時に可能なことから、あなたはまたprintInt(atAddress:)をUnsafeMutablePointerインスタンスとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a set is not an ordered collection, the “first” element may not be the first element that was added to the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合は順序付けられたコレクションではないことから、「最初」の要素は集合に加えられた最初の要素ではないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because any arbitrary subclass of NSString can become a String instance, there are no guarantees about representation or efficiency when a String instance is backed by NSString storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSStringの随意のサブクラスは何であれStringインスタンスになれるので、StringインスタンスがNSStringストレージによって裏打ちされる場合、表現または効率についての保証はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because any arbitrary subclass of NSArray can become an Array, there are no guarantees about representation or efficiency in this case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何であれ随意のNSArrayのサブクラスがArrayになることが可能であるので、表現や効率についてはこの場合保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because arrays increase their allocated capacity using an exponential strategy, appending a single element to an array is an O(1) operation when averaged over many calls to the append(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列はそれらの割り当てられた容量を指数戦略で増やすので、ある単一の要素を配列に加えることは、append(_:)メソッドへの多くの呼び出しにわたって平均した場合は、O(1)演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because calculating the average of the observations involves combining every value of the tempsFahrenheit array, any NaN values cause the result to also be NaN, as seen in this example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>観測の平均の算出はtempsFahrenheit配列のすべての値を足し合わせることを必然的に含むことから、何らかのNaN値はまたNaNになるという結果を引き起こします、この例で見られるように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because calling a closure can change the local and global state of your app, the code you write on the lines after passing a closure needs to be written with a careful consideration of when that closure is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャ呼び出しはあなたのアプリのローカルおよびグローバルな状態を変える可能性があることから、クロージャを渡す後の行であなたが書くコードは、いつそのクロージャが呼び出されるか注意深く考えて書かれる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because closures can contain code that interacts with multiple parts of an app, it's important to understand the different ways closures can be called by the APIs you pass them to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャはアプリの複数の部分と相互作用するコードを含むことが可能なため、クロージャが、あなたがそれを渡す相手であるAPIによって呼び出される様々に異なる方法を理解するのは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because default implementations of the remainder of the relational operators are provided by the standard library, you’ll be able to use !=, &gt;, &lt;=, and &gt;= with instances of your type without any further code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関係演算子の残りの省略時の実装は標準ライブラリによって提供されることから、あなたは!=、&gt;、&lt;=、そして&gt;=をあなたの型のインスタンスにおいてなんらこれ以上のコード無しに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because each character in a string can be made up of one or more Unicode scalar values, the number of characters in a string may not match the length of the Unicode scalar value representation or the length of the string in a particular binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列中の各文字はひとつ以上のユニコードスカラー値から成り立つので、ある文字列の文字数はユニコードスカラー値表現の長さ、または特定のバイナリ表現での文字列の長さと一致しないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because each character in a string can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding characters to a string after a call to reserveCapacity(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列中の各文字が単一ASCII文字相当のストレージより多く要求する可能性があることから、reserveCapacity(_:)への呼び出しの後に文字列に文字を追加する場合は、追加割り当てが必要かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because enumerations define a finite number of states, and can bundle associated values with each individual state, you can use them to model the state of your app and its internal processes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙がある有限の数の状態を定義する、そして個々の状態それぞれに関連値を束ねることから、あなたはそれらを使ってあなたのアプリの状態とそれの内部処理をモデル化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because floating-point types such as Float and Double are their own Stride types, they cannot be used as the bounds of a countable range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点型、例えばFloatおよびDoubleは、それら独自のStride型であるので、それらは可付番範囲の境界として使われることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because many functions and initializers fully specify the types of their parameters, you can often use an array literal with or without elements as a parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの関数とイニシャライザはそれらのパラメータの型を完全に指定することから、あなたはしばしば要素のあるまたはない配列リテラルをパラメータとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of buffering, it is impossible to find the corresponding position in the iterator for a given returned Unicode.Scalar or an error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パッファを行うことのため、ある指定の戻り値Unicode.Scalarやエラーに対して対応する位置をイテレータにおいて見つけることは不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of this behavior, testing isEmoji alone on a single scalar is insufficient to determine if a unit of text is rendered as an emoji; a correct test requires inspecting multiple scalars in a Character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この挙動のために、isEmoji単独で単一のスカラー上でテストすることは、あるテキスト単位がemojiとして描出されるかを判定するには不十分です；正確なテストはあるCharacterの中の複数のスカラーを検査することを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because structures are value types—unlike classes—local changes to a structure aren't visible to the rest of your app unless you intentionally communicate those changes as part of the flow of your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体が値型であることから — クラスとは違い — 構造体への局所的変更はあなたのアプリの残りには不可視です、あなたが意図的にそれら変更をあなたのアプリのフローの一部として伝達しない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because structures in C can't have methods, property accessors, or custom initializers, you often need to write such functionality using global functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cでの構造体はメソッド、プロパティアクセッサ、またはあつらえのイニシャライザを持つことができないことから、あなたはしばしばそのような機能性をグローバル関数を使って書く必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because testing whether one NaN is equal to another NaN results in false, use the isNaN property to test whether a value is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるNaNが別のNaNと等しいかどうかテストすることはfalseの結果になることから、isNaNプロパティを使うことである値がNaNかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the GridPoint type is not hashable yet, it can’t be used in a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>GridPoint型はまだハッシュ化可能でないことから、それは集合において使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the SignedNumeric protocol provides default implementations of both of its required methods, you don’t need to do anything beyond declaring conformance to the protocol and ensuring that the values of your type support negation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SignedNumericプロトコルはそれの必須メソッドの両方の省略時の実装を提供することから、あなたは、プロトコルへの準拠を宣言することおよびあなたの型の値が負をサポートするのを確実にすること以上に何もする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the String(reflecting:) initializer works for instances of any type, returning an instance’s debugDescription if the value passed conforms to CustomDebugStringConvertible, accessing a type’s debugDescription property directly or using CustomDebugStringConvertible as a generic constraint is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String(reflecting:)イニシャライザがあらゆる型のインスタンスに対して働いて、渡される値がdebugDescriptionに準拠するならばインスタンスのCustomDebugStringConvertibleを返すので、ある型のdebugDescriptionプロパティに直にアクセスすることや、総称体制約としてCustomDebugStringConvertibleを使うことは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the Cake structure has fields with unnamed types, you use the .init initializers (allowed due to Swift's type inference) to set the initial value for each of the structure’s unnamed fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cake構造体は無名型でのフィールドを持つことから、あなたは.initイニシャライザ（Swiftの持つ型推論によって与えられるもの）を使用して、初期値をその構造体の持つ無名フィールドの各々に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the Error protocol has no requirements of its own, you can declare conformance on any custom type you create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Errorプロトコルはそれ自身の要件を持たないので、あなたは準拠を宣言することがあなたが作成するあらゆるあつらえの型で可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the hypotenuse(_:_:) function uses a generic parameter constrained to the FloatingPoint protocol, you can call it using any floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hypotenuse(_:_:)関数はFloatingPointプロトコルに制約された総称体パラメータを使うので、あなたはそれを呼び出すことがあらゆる浮動小数点型を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the myID property is declared as a constant, it can't change locally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>なぜならmyIDプロパティは定数として宣言されるからです、それはローカルに変更できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the PenPalRecord structure doesn't control the identity of the underlying database records, there's no risk that the changes made to local PenPalRecord instances accidentally change values in the database.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>PenPalRecord構造体が基礎をなすデータベースレコードの同一性を制御しないことから、ローカルのPenPalRecordインスタンスになされる変更が誤って値をデータベースにおいて変更する危険はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the Int8 type can represent 127 at maximum, the attempt to create z with a value of 1000 results in a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int8型は、最大で127を表せることから、zを1000の値で作成する試みは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the first field of the Cake structure is unnamed, its initializer’s first parameter doesn't have a label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cake構造体の最初のフィールドが無名であるため、それのイニシャライザの持つ最初のパラメータはラベルを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the generated header is part of the framework’s public interface, only declarations marked with the public or open modifier appear in the generated header for a framework target.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生成されたヘッダがフレームワークのパブリックインターフェイスの一部であることから、publicまたはopen修飾子で印された宣言だけがフレームワークターゲットに対する生成ヘッダに現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the quotient is representable as an Int, the division succeeds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>商がIntとして表現可能であることから、除算は成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the result of this nil-coalescing operation is itself an optional value, you can chain default values by using ?? multiple times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このnil合体演算の結果がそれ自体オプショナル値であることから、あなたは幾らかの省略時の値を??を複数回使うことで連鎖することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the strings are identical up to the 14th character, comparing only those characters results in a return value of 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これら文字列が14番目の文字に至るまで全く同じなので、それらの文字だけ比較することは0の値を返す結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because the underlying types of x and y are different, the two variables do not compare as equal despite having equal underlying values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyの基礎をなす型は異なることから、２つの変数は等しい基礎をなす値を持つにもかかわらず等しいと比較されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because this buffer’s memory is no longer bound to its Element type while the body closure executes, do not access memory using the original buffer from within body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファのもつメモリがそれのElement型にはbodyクロージャの実行の間はもはや束縛されないことから、メモリにオリジナルのバッファを使ってbody内からアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because this initializer does not perform any checks, it should be used as an optimization only when you are absolutely certain that lower is less than or equal to upper.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは何ら確認を行わないので、それは、あなたがlowerがupperより少ないか等しいことを絶対に確信している場合にのみ１つの最適化として使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because this pointer’s memory is no longer bound to its Pointee type while the body closure executes, do not access memory using the original pointer from within body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタのメモリがそれのPointee型にはbodyクロージャの実行の間はもはや束縛されないことから、メモリにオリジナルのポインタを使ってbody内からアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because typed pointers can be implicitly cast to raw pointers when passed as a parameter, you can also call print(address:as:) with any mutable or immutable typed pointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付ポインタは暗黙的に生のポインタにキャストされることがパラメータとして渡される時に可能なことから、あなたはまたprint(address:as:)を何らかの可変または不変の型付ポインタとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because typed pointers can be implicitly cast to raw pointers when passed as a parameter, you can also call print(address:as:) with any mutable typed pointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付ポインタは暗黙的に生のポインタにキャストされることがパラメータとして渡される時に可能なことから、あなたはまたprint(address:as:)を何らかの可変の型付ポインタとともに呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because unions in C use the same base memory address for all of their fields, all of the computed properties in a union imported by Swift use the same underlying memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cでの共用体は同じ基盤メモリアドレスをすべてのそれのフィールドに対して使うことから、スウィフトによってインポートされる共用体の中の計算プロパティのすべては同じ基礎をなすメモリを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because weak and unowned references cannot be the only reference to an object, passing a weak or unowned reference as object always results in false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>弱いおよび非所有の参照は、あるオブジェクトに対する唯一の参照ではありえないので、弱いまたは非所有参照をobjectとして渡すことは常にfalseという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because you can’t subclass Swift classes in Objective-C, it’s best to choose a class in your app that doesn’t have any subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがスウィフトクラスをObjective-Cにおいてサブクラス化できないので、あなたのアプリにおいて全くサブクラスを持たないクラスを選択するのは最も良いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before appending, the array allocates new storage that is large enough store the resulting elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加の前に、この配列は新しいストレージを割り当てます、それは結果として生じる要素らを格納するのに十分に大きいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before shifting, the masking left shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シフトする前に、マスク左シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before shifting, the masking right shift operator masks the shift to this range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シフトする前に、マスク右シフト演算子は、シフトをマスクしてこの範囲にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before you call a method on an object's delegate, make sure that the delegate isn't nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがメソッドをオブジェクトの持つ委任先で呼び出す前に、委任先がnilでないことを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Behind the scenes, Swift uses the animals array’s iterator to loop over the contents of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>舞台裏で、Swiftはanimals配列のもつイテレータを使って、その配列の要素のすべてにわたって繰り返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides maintaining the order of the original dictionary literal, KeyValuePairs also allows duplicates keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>元の辞書リテラルの順番を保守するのと並んで、KeyValuePairsはまた重複キーを許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bidirectional collections can therefore offer additional operations, such as a last property that provides efficient access to the last element and a reversed() method that presents the elements in reverse order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>二方向性のコレクションは、従って追加の演算を提案します、例えば最後の要素への手際のよいアクセスを提供するlastプロパティ、そして要素を逆順で提示するreversed()メソッドなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bidirectional collections offer traversal backward from any valid index, not including a collection’s startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>二方向性のコレクションは、あらゆる有効な、しかしコレクションのstartIndexを含まないインデックスから後方へ辿っていくことを提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BidirectionalCollection Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BidirectionalCollection実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BinaryFloatingPoint Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BinaryFloatingPoint 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BinaryInteger Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BinaryInteger実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binds the memory to the specified type and returns a typed pointer to the bound memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリを指定された型へ束縛して、束縛されたメモリに対する型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binds this buffer’s memory to the specified type and returns a typed buffer of the bound memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファの持つメモリを指定された型へ束縛して、束縛されたメモリに対する型付バッファを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bit Fields</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビットフィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bit Pattern Conversion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビットパターン変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bit Shift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビットシフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bits are randomly distributed so that every value of T is equally likely to be returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらビットは無作為に分布します、それでTの全ての値は等しく返される可能性をもちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise AND</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise AND and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の論理積と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise NOT</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise OR</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise OR and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の論理和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise Operations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise XOR</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の排他的論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise XOR and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の排他的論理和と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise conversion from one integer type to another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数型から別のものへのビット単位変換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise left shift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の左シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitwise right shift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位の右シフト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both now(_:) and later(_:) accept a closure and call it, but later(_:) waits a couple seconds before calling its closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>now(_:)とlater(_:)の両方ともクロージャを受け取りそれを呼び出します、しかしlater(_:)はそれのクロージャを呼び出す前に２秒ほど待ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both kinds of availability specifier are also available in Objective-C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方の種類の利用可能性指定子はまた、Objective-Cにおいても役立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both of these methods return the original, unwrapped type of the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドの両方とも、元の、オブジェクトのアンラップされた型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both parameters must be valid indices of the buffer, and not equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方のパラメータは、バッファの有効なインデックスであり、そしてendIndexと等しくてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both parameters must be valid indices of the collection and not equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方のパラメータは、このコレクションの有効なインデックスであり、endIndexと等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both parameters must be valid indices of the collection that are not equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方のパラメータは、このコレクションの有効なインデックスで、endIndexと等しくない必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both processes are described below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>双方の行程は下で記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bounds checks are always performed in debug mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>境界検査は、デバッグモードにおいて常に実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bounds checks for bounds are performed only in debug mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bounに対する境界検査は、デバッグモードでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bounds checks for i are performed only in debug mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iに対する境界検査は、デバッグモードでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging Between Array and NSArray</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArrayとNSArrayの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging Between Dictionary and NSDictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DictionaryとNSDictionaryの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging Between Set and NSSet</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetとNSSetの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging Between String and NSString</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringとNSStringの間のブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging from Array to NSArray takes O(1) time and O(1) space if the array’s elements are already instances of a class or an @objc protocol; otherwise, it takes O(n) time and space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArrayからNSArrayへのブリッジは、配列のもつ要素がすでにあるクラスまたは@objcプロトコルのインスタンスであるならば、O(1)時間とO(1)空間をとります；そうでなければ、それはO(n)の時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging from Dictionary to NSDictionary always takes O(1) time and space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DictionaryからNSDictionaryへのブリッジは、常にO(1)時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging from NSDictionary to Dictionary first calls the copy(with:) method (- copyWithZone: in Objective-C) on the dictionary to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSDictionaryからDictionaryへのブリッジは、最初にcopy(with:)メソッド（Objective-Cでの- copyWithZone:）をその辞書上で呼び出して可変のコピーを取得して、それからO(1)時間を取る追加的なSwift簿記作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging from NSSet to Set first calls the copy(with:) method (- copyWithZone: in Objective-C) on the set to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSSetからSetへのブリッジは、最初にcopy(with:)メソッド（Objective-Cにおける- copyWithZone:）を集合上で呼び出すことで可変のコピーを取得して、それからO(1)時間をとる追加的なSwift簿記作業を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bridging from Set to NSSet always takes O(1) time and space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetからNSSetへのブリッジは、常にO(1)の時間と空間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Buffer Implementation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Buffer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build apps using a powerful open language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>強力でオープンな言語を使ってアプリを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Build your own buffer-backed collection types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなた独自のバッファ裏付けのコレクション型を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態で、あるコレクションはSequenceプロトコルに、IndexingIteratorをそれの関連Iterator型として提供することによって準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, any custom collection type you create will inherit a makeIterator() method that returns an IndexingIterator instance, making it unnecessary to declare your own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態で、あなたが作成するあらゆるあつらえのコレクション型は、IndexingIteratorインスタンスを返すmakeIterator()メソッドを継承していて、それをあなた自身で宣言する必要がないようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, most types in the standard library are hashable, including strings, numeric and Boolean types, enumeration cases without associated values, and even sets themselves.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態で、標準ライブラリの中のほとんどの型はハッシュ化されています、文字列、数のおよびブールの型、関連値なしの列挙ケース節、そして集合それら自身さえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the customMirror implementation of any ancestors is ignored.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、あらゆる先祖のcustomMirror実装は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the generated header contains interfaces for Swift declarations marked with the public or open modifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に何もしなければ、生成されたヘッダはpublicまたはopen修飾子で印されたSwift宣言を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, this name is the same as your product name, with any nonalphanumeric characters replaced with an underscore (_).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時には、この名前は、あらゆる非アルファベット文字がアンダースコア（_）で置き換えられたあなたの製品名と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By sending the output of the print(_:to:) function to an instance of ASCIILogger, you invoke its write(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print(_:to:)関数の出力をASCIILoggerのインスタンスに送ることによって、あなたはそれのwrite(_:)メソッドを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C struct and union types can define fields that have no name or that are of an unnamed type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cのstructとunion型は、名前を持たないまたは無名型であるフィールドを定義できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C Interoperability</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C Syntax</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C Variadic Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C可変長引数関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C and Objective-C Pointers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CおよびObjective-Cポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C function pointers are imported into Swift as closures with the C function pointer calling convention, denoted by the @convention(c) attribute.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C関数ポインターは、@convention(c)属性によって示される、C関数呼出規約を持つクロージャとしてSwiftにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C functions that use the ... syntax for variadic arguments are not imported, and therefore can’t be called using CVarArg arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>...構文を可変長引数に使うC関数はインポートされません、そしてそれゆえCVarArg引数を使って呼び出されることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C macros that are more complex than simple constant definitions have no counterpart in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単純な定数宣言よりもっと複雑なCマクロは、相当するものをSwiftにおいて持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calculates the additive inverse of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の加法の逆元を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を計算します、シフト量をその型の持つビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calculating count can be an O(n) operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countの算出は、O(n)演算であるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call body(p), where p is a pointer to the collection’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>body(p)を呼び出します、ここでpはコレクションのもつ可変の隣接ストレージへのポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call body with UnsafeMutablePointers to the stored Header and raw Element storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格納HeaderおよびElement生ストレージそれぞれへのUnsafeMutablePointerを使ってbodyを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call body with an UnsafeMutablePointer to the Element storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementストレージへのUnsafeMutablePointerを使ってbodyを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call body with an UnsafeMutablePointer to the stored Header.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この格納HeaderへのUnsafeMutablePointerを使ってbodyを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call firstIndex(where:) again, this time on the slice created in step 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstIndex(where:)もう一度呼び出します、今回は手順にで作成したスライス上で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call firstIndex(where:) to find the index of the first element in the absences array that is greater than zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstIndex(where:)を呼んでabsences配列の中の、ゼロより大きい最初の要素がもつインデックスを手に入れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call randomElement() to select a random element from an array or another collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>randomElement()を呼び出して、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>randomElement(using:)を呼び出して、あなたがあつらえの無作為数生成子を使っている場合に、ある無作為な要素を配列または別のコレクションから選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call hasher.combine(_:) with each of these components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hasher.combine(_:)をそれら構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call Functions with Pointer Parameters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数をポインタパラメータを使って呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Call the given output stream’s write(_:) method in your implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた出力ストリームのもつwrite(_:)メソッドをあなたの実装において呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Callers should apply the same preconditions to the return value as they would to a range provided directly by the user.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>呼び出し側は、同じ前提条件を戻り値に適用すべきです、それらがユーザによって直接に提供される範囲にするように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling appending(path:) results in the same key path as if the given key path had been specified using dot notation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>appending(path:)を呼び出すことは、与えられたキーパスがドット表記法を使って指定された場合と同じキーパスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling flatMap(_:) on a sequence s is equivalent to calling s.map(transform).joined().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>flatMap(_:)をあるシーケンスs上で呼び出すことは、s.map(transform).joined()を呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling storeBytes(of:toByteOffset:as:) does not change the bound type of the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>storeBytes(of:toByteOffset:as:)を呼び出すことは、そのメモリの束縛される型を変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling swapAt(_:_:) with the same index as both i and j has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>swapAt(_:_:)をiとj両方で同じインデックスで呼び出すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling Functions With Pointer Parameters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数をポインタパラメータで呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the dump(_:_:_:_:) function and printing in the debugger uses both String(reflecting:) and Mirror(reflecting:) to collect information about an instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>dump(_:_:_:_:)関数を呼び出してデバッガに出力することは、String(reflecting:)とMirror(reflecting:)の両方を使ってインスタンスの情報を収集します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the getRed(red:green:blue:alpha:) method in Swift requires passing four in-out parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>getRed(red:green:blue:alpha:)メソッドをSwiftにおいて呼び出すことは、インアウトパラメータを渡すことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the move() method on a pointer p that references memory of type T is equivalent to the following code, aside from any cost and incidental side effects of copying and destroying the value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>move()メソッドを、型Tのメモリを参照するポインタp上で呼び出すことは、その値のコピーおよび破棄のあらゆるコストと付随する副作用を除いて、以下のコードと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the reserveCapacity(_:) method on a dictionary with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store minimumCapacity key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reserveCapacity(_:)メソッドをブリッジされたストレージを持つ辞書で呼び出すことは、隣接ストレージへのコピーを引き起こします、たとえ既存のストレージにminimumCapacityキー値ペアを格納する余地があるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the reserveCapacity(_:) method on a set with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store minimumCapacity elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reserveCapacity(_:)メソッドをブリッジされたストレージを持つ集合で呼び出すことは、隣接ストレージへのコピーを引き起こします、たとえ既存のストレージにminimumCapacity要素を格納する余地があるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the reserveCapacity(_:) method on an array with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store minimumCapacity elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reserveCapacity(_:)メソッドをブリッジされたストレージを持つ配列で呼び出すことは、隣接ストレージへのコピーを引き起こします、たとえ既存のストレージにminimumCapacity要素を格納する余地があるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the removeSubrange(_:) method instead is preferred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>removeSubrange(_:)メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the insert(contentsOf:at:) method instead is preferred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>insert(contentsOf:at:)メソッドを代わりに呼ぶことが好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the function with different class types shows how the getDefaultValue() class method is only conditionally available.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数を異なるクラス型で呼び出すことは、どのようにgetDefaultValue()クラスメソッドが条件付きでのみ利用可能であるのかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (&lt;) as the predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連したsorted()メソッドを呼び出すことは、このメソッドを呼び出して、より小さい演算子（&lt;）を述部として渡すことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this function breaks the guarantees of the Swift type system; use with extreme care.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数を呼ぶことは、Swift型システムの保証を壊します；最大限の注意を払ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this initializer copies the contents of the substring to a new string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを呼ぶことは、下位文字列の内容を新しい文字列にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method invalidates all indices with respect to the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを呼び出すことは、この辞書に関するすべてのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method invalidates any existing indices for use with this dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを呼び出すことは、この辞書で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method invalidates any existing indices for use with this string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを呼び出すことは、この文字列で使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method is roughly equivalent to calling initialize(repeating:count:) with a count of 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを呼び出すことは、おおよそinitialize(repeating:count:)を１のcountで呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method may invalidate all saved indices of this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを呼び出すことは、このコレクションの全ての保存されたインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this method may invalidate any existing indices for use with this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを呼び出すことは、このコレクションで使うためのあらゆる既存のインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calling this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティを直接に呼び出すことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls a closure with a pointer to the array’s contiguous storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャを配列のもつ隣接ストレージへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure on each element in the sequence in the same order as a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたクロージャをそのシーケンスの各要素上でfor-inループと同じ順番で呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure with a mutable pointer to the given argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを与えられた引数に対する可変ポインタを使って呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure with a pointer to the array’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを配列のもつ可変の隣接ストレージへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>null終端のUTF-8コード単位シーケンスとして表される、文字列の内容へのポインタとともに与えられたクロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure with a pointer to the contents of the string, represented as a null-terminated sequence of code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>null終端のコード単位シーケンスとして表される、文字列の内容へのポインタとともに与えられたクロージャを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure with a pointer to the underlying bytes of the array’s contiguous storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを、配列の隣接ストレージの基礎をなすバイトへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls the given closure with a pointer to the underlying bytes of the array’s mutable contiguous storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを、配列の可変の隣接ストレージの基礎をなすバイトへのポインタとともに呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Canonical combining classes are defined in the Unicode Standard as integers in the range 0...254.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正準結合クラスは、「ユニコード標準」において整数として範囲0...254の中で定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Canonical combining classes are used by the ordering algorithm to determine if two sequences of combining marks should be considered canonically equivalent (that is, identical in interpretation).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正準結合クラスは、順序アルゴリズムによって使われて、２つの結合記号シーケンスが正準的に等しい（すなわち、解釈において同一）と考えられるべきかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cast between a Swift value type and its corresponding reference type by using the as keyword.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift値型とそれの対応する参照型の間でasキーワードを使ってキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cast instances of the Objective-C id type to a specific Swift type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C idのインスタンスをSwift型にキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Casting AnyObject Instances to a Known Type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyObjectインスタンスを既知の型へキャストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Casting Between Integer Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数型の間でキャストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Casting an instance of a reference type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照型のインスタンスのキャスト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Casting is always safe in the context of a switch statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャストはswitch文の文脈においては常に安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Catch Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーをキャッチする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changing Case</seg>
      </tuv>
      <tuv lang="JA">
        <seg>大文字小文字の変更</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまな文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Check Availability</seg>
      </tuv>
      <tuv lang="JA">
        <seg>利用可能性を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Check That Delegates Exist</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その委任先が存在するか確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checking a Character’s Case</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字のケースを確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checking a Character’s Numeric Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字の数値プロパティを確認する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checking for Containment</seg>
      </tuv>
      <tuv lang="JA">
        <seg>制約を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checking that the iterator was exhausted is not sufficient, because the decoder can store buffered data from the input iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イテレータが使い尽くされてしまったことの確認は十分とは言えません、デコーダが入力イテレータからのバッファ済みデータを格納できるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checks a necessary condition for making forward progress.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは進捗を前へ進めるために必要な条件を確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose Structures by Default</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体を通常は使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choose a New Name and Declaration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい名前と宣言を選択する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choosing Between Structures and Classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体かクラスのいずれかを選ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choosing the Smallest and Largest Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最小および最大値を選ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clamping Conversion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>固定変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clamping a Range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲を固定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class clusters that include immutable and mutable subclasses, like NSArray and NSMutableArray, are bridged to a single value type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSArrayおよびNSMutableArrayのような、不変および可変のサブクラスを含むクラスクラスタは、単一の値型にブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class instance identity, on the other hand, is compared using the triple-equals identical-to operator (===).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一方、クラスインスタンス同一性は、３つの等号の同一性演算子（===）を使って比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class prefixes are optional in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス接頭辞は、スウィフトでは随意です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes in Swift come with a built-in notion of identity because they're reference types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでのクラスそれらは、組み込みの同一性の概念を備えています、なぜならそれらが参照型だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes specific to Objective-C or inherently tied to the Objective-C runtime, like NSObject, NSAutoreleasePool, NSException, and NSProxy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C特有の、またはObjective-Cランタイムに本質的に結びつけられ切り離せないクラス、NSObject、NSAutoreleasePool、NSException、そしてNSProxyのような</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clean Up Your Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコードを掃除する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clients which want to add new interpolation behavior to existing types should extend DefaultStringInterpolation, the type which implements interpolation for types like String and Substring, to add an overload of appendInterpolation(_:) with their new behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい補間挙動を既存の型に加えることを望むクライアントは、補間をStringとSubstringのような型に対して実装する型、DefaultStringInterpolationを拡張することで、それらの新しい挙動をもつappendInterpolation(_:)のオーバーロードを加えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clients which want to create new types supporting string literals and interpolation, but which do not need any custom behavior, should conform their type to ExpressibleByStringInterpolation and implement an init(stringLiteral: String) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列リテラルと補間をサポートする新しい型を作成することを望む、しかしまったくあつらえの挙動を必要としないクライアントは、それらの型をExpressibleByStringInterpolationに準拠させてinit(stringLiteral: String)メソッドを実装すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closed enumerations are useful for representing a finite set of states that you expect people to switch over using a switch statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結列挙は、人々がスイッチ文を使って切り替えることをあなたが期待する、ある有限な一揃いの状態を表すのに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closed range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closure Casting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Closures you pass to APIs can be called synchronously (immediately) or asynchronously (sometime later).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがAPIに渡すクロージャは、同期的に（直ちに）または非同期的に（いつか後で）呼び出されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Coalescing Nil Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil値の合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cocoa APIs often provide protocols that include delegate methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoa APIは、しばしば委任先メソッドを含むプロトコルを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cocoa Design Patterns</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoaデザインパターン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cocoa Frameworks</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoaフレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code outside the standard library can extend string interpolation on String and many other common types by extending DefaultStringInterpolation and adding an appendInterpolation(...) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの外側のコードは、文字列補間をStringおよび多くの他の一般の型の上で拡張することが、DefaultStringInterpolationを拡張することそしてappendInterpolation(...)メソッドを加えることで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CodingKey Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CodingKey実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collection Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクション実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collection Literals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collection Mutability</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの可変性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collection Traversal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクション横断</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまなコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collections are used extensively throughout the standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションは標準ライブラリの至る所で広範囲にわたって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collections of Indices</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インデックスのコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Collections that conform to MutableCollection gain the ability to change the value of their elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MutableCollectionに準拠するコレクションは、それらの要素の値を変更する能力を獲得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combine strings using the concatenation operator (+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>連結演算子（+）を使って文字列を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combining Arrays</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列を結合する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combining Sets</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合を結合する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combining Unicode scalars do not have their own position in a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結合ユニコードスカラーは、それら自身の位置を文字列において持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Combining marks that are attached to hiragana and katakana to indicate voicing changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひらがなとカタカナに付けられて発声変化を指し示す結合記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command Line Input</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コマンドライン入力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command-click a Swift class name to see its generated header.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトクラス名をコマンド-クリックして、その生成ヘッダを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command-line arguments for the current process.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在のプロセスに対するコマンドライン引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common Patterns</seg>
      </tuv>
      <tuv lang="JA">
        <seg>共通パターン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common conversions supported by the Swift standard library include the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリによってサポートされる一般的な変換は、以下を含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common data structures such as Array, Dictionary, and Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的なデータ構造体、Array、Dictionary、そしてSetなど</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common use cases are file handles, network connections, and shared hardware intermediaries like CBCentralManager.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的な利用事例は、ファイルハンドル、ネットワーク通信、そしてCBCentralManagerのような共有ハードウェア仲介です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparable Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparable 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparable Requirements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparable 要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compare each significant property for equality in your == method's implementation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要なプロパティそれぞれを同等性についてあなたの==メソッドの実装において比較してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compare tuples of between two and six Comparable elements using these comparative operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つと６つの間のComparable要素のタプルをそれらの比較演算を使って比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compare tuples of between two and six Equatable elements for equality or inequality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つと６つの間のEquatable要素のタプルを同等性または不等性について比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Across Integer Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまな整数型を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Arrays</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Boolean Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブール値を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Buffers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Dictionaries</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Identity</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Optional Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Pointers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Ranges</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Ranges as Collections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲をコレクションとして比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Results</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Scalars</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Sequences</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスを比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Sets</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合を比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Strings Using Operators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を演算子を使って比較する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing strings for equality using the equal-to operator (==) or a relational operator (like &lt; or &gt;=) is always performed using Unicode canonical representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等演算子（==）または関係演算子（&lt;や&gt;=のような）を使って同等性について文字列を比較することは、常にユニコード正準表現を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing strings using the equal-to operator (==) or a relational operator (like &lt; and &gt;=) is always performed using the Unicode canonical representation, so that different representations of a string compare as being equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を同等演算子（==）または関係演算子（&lt;および&gt;=）を使って比較することは、常にユニコード正準表現を使って実行されます、そのためある文字列の異なる表現は同等であると比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparison</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compile-Time Strings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイル時文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complex pointer types, such as id *, must be explicitly annotated using these annotations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複雑なポインタ型、例えばid *などは、これら注釈を使って、明示的に注釈を付けられなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: Amortized O(1) if the dictionary does not wrap a bridged NSDictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：この辞書が、ブリッジされたNSDictionaryをラップしないならば均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: Amortized O(1) if the dictionary does not wrap a bridged NSDictionary; otherwise, the performance is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：この辞書が、ブリッジされたNSDictionaryをラップしないならば均してO(1)；それ以外では、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: Amortized O(1) if the set does not wrap a bridged NSSet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：この集合がブリッジされたNSSetをラップしないならば、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: Averages to O(1) over many calls to popFirst().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：多くのpopFirst()に対する呼び出しにわたって均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if Index conforms to RandomAccessIndex; O(n) otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：IndexがRandomAccessIndexに準拠するならばO(1)；そうでないならばO(n)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if Self conforms to RandomAccessCollection; O(n) otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：SelfがRandomAccessCollectionに準拠するならばO(1)；そうでないならばO(n)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはmaxLengthに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：もしコレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはdistanceの値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはコレクションの冒頭から除外する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkは除外される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(k)、そこでkは除去される要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：コレクションがRandomAccessCollectionに準拠するならば、O(1)；そうでなければ、O(k)、そこでkはコレクションの冒頭から選択する要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(k)、そこでkは結果の隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(k)、そこでkは指定した要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the absolute value of n.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(n)、そこでnはnの値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(n)、そこでnはコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the resulting distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、もしコレクションがRandomAccessCollectionに準拠するならば；そうでなければ、O(n)、そこでnは結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) on average, over many calls to append(_:) on the same array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：同じ配列上でのappend(_:)への多くの呼び出しに対して、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1) on average, over many calls to append(_:) on the same collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：同じコレクション上でのappend(_:)への多くの呼び出しに対して、均してO(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1), except if the sequence also conforms to Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、例外としてシーケンスが同様にCollectionに準拠する場合を除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)、結果の各反復に対してO(k)延期されて、ここでkはシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(1)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(separator.count).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(separator.count)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(k), where k is the length of the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(k)、ここでkは結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(k), where k is the number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(k)、ここでkはシーケンスの冒頭から除かれる要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(k), where k is the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(k)、ここでkは指定された要素の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m + n), where m is the length of this sequence and n is the length of the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m + n)、ここでmはこのシーケンスの長さで、nは結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m + n), where n is the length of the original dictionary and m is the length of the resulting dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m + n)、ここでnは元の辞書の長さで、mは結果の辞書の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m + n), where n is the length of this sequence and m is the length of the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m + n)、ここでnはこのシーケンスの長さで、mは結果の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m) on average, where m is the length of newElements, over many calls to append(contentsOf:) on the same array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここでmはnewElementsの長さで、同じ配列上でのappend(contentsOf:)への多くの呼び出しに対してで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m), where m is the combined length of the string and newElements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここでmは文字列とnewElementsを合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m), where m is the combined length of the view and newElements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここでmはビューとnewElementsを合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m), where m is the length of newElements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここでmはnewElementsの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m), where m is the length of the right-hand-side argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここでmは右手側の引数の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m), where m is the lesser of the length of the sequence and the length of other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここで&lt;mはシーケンスの長さとotherの長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(m)、ここでmはシーケスの長さとpossiblePrefixの長さのより短い方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n + m), where n is length of the array and m is the length of newElements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n + m)、ここでnは配列の長さです、そしてmはnewElementsの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n + m), where n is length of this collection and m is the length of newElements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n + m)、ここでnは配列の長さです、そしてmはnewElementsの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n log n), where n is the length of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n log n)、ここでnはコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n log n), where n is the length of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n log n)、ここでnはシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the absolute value of n.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、そこでnはnの値の絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the capacity being reserved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは確保されている容量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the combined length of the string and newElements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは文字列とnewElementsを合わせた長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of substring.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnはsubstringの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnはコレクションの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは辞書の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of the resulting view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは結果となるビューの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnはシーケンスの長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the length of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは文字列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the number of elements in the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは配列の中の要素数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the number of elements in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnはコレクションの中の要素数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the number of key-value pairs in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは辞書の中のキー値ペアの数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the ratio between unfiltered and filtered collection counts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnはコレクションのフィルタされないものとフィルタされたもの数の比率です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(n), where n is the resulting distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(n)、ここでnは結果となる隔たりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: O(N), where N is the length of the resulting String’s UTF-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：O(N)、ここでNは結果となるStringの持つUTF-16の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Complexity: Reading an element from an array is O(1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算量：ある要素を配列から読み出すことはO(1)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Computational operations are defined on SIMDVector, which refines this protocol, or on the concrete types that conform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算関係演算は、SIMDVector上で定義されます、それはこのプロトコルを洗練させたものです、または準拠する具象型上で。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conform Automatically to Equatable and Hashable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自動的にequatableとhashableに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conform Manually to Equatable and Hashable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>手動でequatableとhashableに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conformance to CustomStringConvertible</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomStringConvertible への準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conformance to Equatable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatableへの準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conformance to Hashable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hashable への準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの型が準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to ExpressibleByArrayLiteral</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByArrayLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to ExpressibleByExtendedGraphemeClusterLiteral</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByExtendedGraphemeClusterLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to ExpressibleByFloatLiteral</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByFloatLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to ExpressibleByIntegerLiteral</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByIntegerLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to ExpressibleByStringLiteral</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByStringLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to ExpressibleByUnicodeScalarLiteral</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByUnicodeScalarLiteralに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Equatable and Hashable protocols is straightforward and makes it easier to use your own types in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>EquatableとHashableプロトコルに準拠することは、あなた独自の型をSwiftで使うのをわかりやすいそしてより容易なものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the AdditiveArithmetic Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AdditiveArithmeticプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the BidirectionalCollection Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BidirectionalCollectionプロトコルへの準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the CaseIterable Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CaseIterableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Collection Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Collectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Comparable Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the CustomDebugStringConvertible Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomDebugStringConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the CustomPlaygroundDisplayConvertible Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomPlaygroundDisplayConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the CustomStringConvertible Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomStringConvertibleプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Equatable Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the ExpressibleByDictionaryLiteral Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByDictionaryLiteralプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the FixedWidthInteger Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FixedWidthIntegerプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Hashable Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hashableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the MutableCollection Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MutableCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Numeric Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Numericプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the RandomAccessCollection Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomAccessCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the RandomNumberGenerator Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomNumberGeneratorプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the RangeReplaceableCollection Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RangeReplaceableCollectionプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Sequence Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sequenceプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the SetAlgebra Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetAlgebraプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the SignedNumeric Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SignedNumericプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the Strideable Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Strideableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the TextOutputStream Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>TextOutputStreamプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforming to the TextOutputStreamable Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>TextOutputStreamableプロトコルに準拠する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms To</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に準拠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to BidirectionalCollection and Base.Element conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionに準拠するそしてBase.ElementがBidirectionalCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to BidirectionalCollection and Base.Index conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionに準拠するそしてBase.IndexがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがBidirectionalCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to Collection and Base.Element conforms to Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠するそしてBase.ElementがCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to Collection and Base.Index conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠するそしてBase.IndexがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to Collection, Base.Element conforms to Collection, Base.Index conforms to Hashable, and Base.Element.Index conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠する、Base.ElementがCollectionに準拠する、Base.IndexがHashableに準拠する、そしてBase.Element.IndexがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがLazySequenceProtocolに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to MutableCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがMutableCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Base conforms to RangeReplaceableCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BaseがRangeReplaceableCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Bound conforms to Hashable, Bound conforms to Strideable, and Bound.Stride conforms to SignedInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがHashableに準拠する、BoundがStrideableに準拠する、そしてBound.StrideがSignedIntegerに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Bound conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BoundがStrideableに準拠するそしてBound.StrideがSignedIntegerに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Element conforms to CKRecordValueProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがCKRecordValueProtocolに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Element conforms to Decodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがDecodableに準拠している時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Element conforms to Encodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがEncodableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Element conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがEquatableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Element conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Element conforms to MLDataValueConvertible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementがMLDataValueConvertibleに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Elements conforms to BidirectionalCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ElementsがBidirectionalCollectionに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Key conforms to Decodable and Value conforms to Decodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyがDecodableに準拠するそしてValueがDecodableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Key conforms to Encodable and Value conforms to Encodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyがEncodableに準拠するそしてValueがEncodableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Key conforms to MLDataValueConvertible and Value conforms to MLDataValueConvertible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyがMLDataValueConvertibleに準拠するそしてValueがMLDataValueConvertibleに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Success conforms to Equatable and Failure conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SuccessがEquatableに準拠するそしてFailureがEquatableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Success conforms to Hashable and Failure conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SuccessがHashableに準拠するそしてFailureがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Value conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ValueがEquatableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Value conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ValueがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Wrapped conforms to Decodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがDecodableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Wrapped conforms to Encodable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがEncodableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Wrapped conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがEquatableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conforms when Wrapped conforms to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>WrappedがHashableに準拠する時に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider a class called IntegerRef that wraps an integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IntegerRefと呼ばれるクラスを考えてください、それはある整数値をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider an app that requires a user to log into an account.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザがアカウントにログインするように要求するアプリを考えください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the following recommendations to help choose which option makes sense when adding a new data type to your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の忠告を考慮して、どちらの選択が道理にかなっているか、新しいデータ型をあなたのアプリに追加する時に選択する助けにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Construct with value v.value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値v.valueを使って組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Contains a buffer object, and provides access to an instance of Header and contiguous storage for an arbitrary number of Element instances stored in that buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファオブジェクトを収容します、そしてHeaderのインスタンスへのアクセスおよびそのバッファに格納される随意の数のElementインスタンスの隣接保管を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Continuation bytes take the form 0b10xxxxxx.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継続バイトは、形式0b10xxxxxxを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its count property is an O(n) operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>反対に、前方または双方向性のコレクションはコレクション全体を辿っていくことで含まれる要素の数を数えるので、それのcountプロパティにアクセスすることはO(n)演算になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversely, the comparison returns false if only one of the arguments is nil or if the two arguments wrap values that are not equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>反対に、この比較がfalseを返すのは、引数のうち１つだけがnilであるか、２つの引数が等しくない値をラップする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversion from a pointer to an integer value with the bit pattern of the pointer’s address in memory, or vice versa.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるポインタからそのポインタのもつメモリでのアドレスのビットパターンをもつ整数値への変換、またはその逆。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convert Unmanaged Objects to Memory-Managed Objects</seg>
      </tuv>
      <tuv lang="JA">
        <seg>管理されないオブジェクトをメモリ管理オブジェクトに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convert your pointer to an UnsafeMutableRawPointer instance and then use the raw pointer’s load(fromByteOffset:as:) and storeBytes(of:toByteOffset:as:) methods to read and write values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのポインタをUnsafeMutableRawPointerインスタンスに変換して、それから生のポインタのもつload(fromByteOffset:as:)とstoreBytes(of:toByteOffset:as:)メソッドを使って値を読み書きしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Convert your pointer to an UnsafeRawPointer instance and then use the raw pointer’s load(fromByteOffset:as:) method to read values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのポインタをUnsafeRawPointerインスタンスに変換して、それから生のポインタのもつload(fromByteOffset:as:)メソッドを使って値を読みだしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Between Arrays and Create ML Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列間で変換するそしてML型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Between Dictionaries and Create ML Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の間で変換してML型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Between Numeric Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数値型の間で変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Floating-Point Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Integers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Numeric Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数値を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Other Types to Strings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他の型を文字列に変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Ranges</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting Strings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting a C String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C文字列を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting a Result to a Throwing Expression</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果をスローする式へ変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting a Substring to a String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SubstringをStringに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting a Throwing Expression to a Result</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スローする式を結果へ変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converting with No Loss of Precision</seg>
      </tuv>
      <tuv lang="JA">
        <seg>精度の損失なしに変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts a typed UnsafeMutablePointer to an opaque C pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付けされたUnsafeMutablePointerを不透明Cポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts a typed UnsafePointer to an opaque C pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付けされたUnsafePointerを不透明Cポインタへと変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies from a collection of UInt8 into this buffer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt8からなるコレクションからこのバッファのメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies the bytes from the given buffer to this buffer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたバッファからバイトをこのバッファの持つメモリにコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copies the specified number of bytes from the given raw pointer’s memory into this pointer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた生のポインタの持つメモリからこのポインタの持つメモリに指定されたバイト数をコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying a value of type UnsafeBufferPointer does not copy the instances stored in the underlying memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型UnsafeBufferPointerの値をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying a value of type UnsafeMutableBufferPointer does not copy the instances stored in the underlying memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型UnsafeMutableBufferPointerの値をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying a variable or constant of type UnsafeRawBufferPointer does not copy the underlying memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型UnsafeRawBufferPointerの変数や定数をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying a variable or constant of type UnsafeMutableRawBufferPointer does not copy the underlying memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型UnsafeMutableRawBufferPointerの変数や定数をコピーすることは、基礎をなすメモリをコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying an iterator is safe, but advancing one copy of an iterator by calling its next() method may invalidate other copies of that iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるイテレータをコピーすることは安全です、しかしあるインスタンスの１つのコピーをそれのメソッドnext()メソッドを呼び出すことによって前に進めることは、そのイテレータの他のコピーを無価値にするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying bytes directly from nontrivial, in-memory values does not produce valid copies and can only be done by calling a C API, such as memmove().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明でない、メモリ中の値から直接にバイトをコピーすることは、有効なコピーを生成しません、そしてmemmove()のようなC APIを呼び出すことでのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copying memory that contains values of nontrivial types can only be done safely with a typed pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明でない型の値を含むメモリをコピーすることは、型付ポインタでのみ安全になされることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Core Foundation objects returned from annotated APIs are automatically memory-managed in Swift—you don't need to invoke the CFRetain, CFRelease, or CFAutorelease functions yourself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注釈をつけられたAPIから返されるCore Foundationオブジェクトは、自動的にSwiftにおいてメモリ管理されます ― あなたは、CFRetain、CFRelease、またはCFAutorelease関数をあなた自身で呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Singleton</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シングルトンの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a Swift class for your corresponding Objective-C .m and .h files by choosing File &gt; New &gt; File &gt; (iOS, watchOS, tvOS, or macOS) &gt; Source &gt; Swift File.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるSwiftクラスをあなたの対応するObjective-C .m と .h ファイルに対して、「File &gt; New &gt; File &gt; (iOS、watchOS、tvOS、またはmacOS) &gt; Source &gt; Swift File」を選択することによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a collection of all the values in a range by using the half-open (..&lt;) and closed (...) range operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲の中のすべての値からなる１つのコレクションを半開（..&lt;）および完結（...）範囲演算子を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a new dictionary by using a dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書を辞書リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a new instance of the most-derived class, calling factory on the partially-constructed object to generate an initial Header.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も派生したクラスの新しいインスンタスを作成します、部分的に組み立てられたオブジェクト上でfactoryを呼び出して初期Valueを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a new range using the closed range operator (...).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい範囲を完結範囲演算子（...）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a new range using the half-open range operator (..&lt;).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい範囲を半開範囲演算子（..&lt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a slice of the absences array starting after the index found in step 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>absences配列のスライスを、手順１で見つけたインデックスの後から開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a slice of the absences array that holds the second half of the days.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>学期後半の日付を保持する、absences配列のスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a stride that steps over values between two boundaries using the stride(from:to:by:) and stride(from:through:by:) functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの境界の間の値をまたぐストライドをstride(from:to:by:)およびstride(from:through:by:)関数を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create an enumeration that conforms to the Error protocol with a case for each possible error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Errorプロトコルに準拠する列挙を、各ありうるエラーに対して１つのケース節で作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create instances of Bool by using one of the Boolean literals true or false, or by assigning the result of a Boolean method or operation to a variable or constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Boolのインスタンスをブールリテラルのtrueまたはfalseのうち１つを使うことによって、またはブールのメソッドや演算の結果を変数や定数に代入することによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create new instances of floating-point types using integer or floating-point literals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点型の新しいインスタンスを、整数または浮動小数点リテラルを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create with new storage containing an initial Header and space for at least minimumCapacity elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある初期Headerと少なくともminimumCapacity elementに対する空間を格納している新しいストレージを使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a NaN (“not a number”) value with the specified payload.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたペイロードをもつNaN（「非数」）値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a String having the given content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた内容を持っているあるStringを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a Substring having the given content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた内容を持っているSubstringを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a Unicode scalar with the specified numeric value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a Unicode scalar with the specified value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された値を使ってユニコードスカラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a buffer over the same memory as the given buffer slice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたバッファスライスと同じメモリのすべてを覆うバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a buffer over the specified number of contiguous bytes starting at the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の隣接バイトすべてを覆うバッファを、与えられたポインタで開始して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a character containing the given Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコードスカラー値を含んでいるひとつの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a character from a single-character string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある単一文字の文字列から１つの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a character with the specified value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された値でひとつの文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a collection containing the specified number of the given element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の与えられた要素を含んでいるコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a dictionary by merging key-value pairs in a sequence into the dictionary, using a combining closure to determine the value for duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある辞書を作成します、あるシーケンスの中のキー値ペアをその辞書に合併させることによってです、結合用のクロージャを使って重複キーに対する値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a dictionary by merging the given dictionary into this dictionary, using a combining closure to determine the value for duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた辞書をこの辞書へと結合することによって１つの辞書を作成します、結び付けられているクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a dictionary initialized with a dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルで初期化される辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a duplicate of the given Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコードスカラーの複製を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a mirror representing the given subject using a dictionary literal for the structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた主題を表すミラーを、その構造体のための辞書リテラルを使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a mirror representing the given subject with a specified structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた主題を表すミラーを指定の構造体で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a mirror representing the given subject with unlabeled children.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた主題を表すミラーを幾つかのラベルを付けられない子で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a mirror that reflects on the given instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインスタンスを反映するミラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a mutable typed buffer pointer referencing the same memory as the given immutable buffer pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変の型付バッファポインタを作成します、与えられた不変バッファポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a mutable typed pointer referencing the same memory as the given immutable pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変の型付ポインタを作成します、与えられた不変ポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new KeyValuePairs instance from the given dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyValuePairsインスタンスを与えられた辞書リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new Boolean value from the given string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列から新しいブール値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new array by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい配列を指定のエンコーダからエンコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new array containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しい配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new buffer over the same memory as the given buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたバッファと同じメモリのすべてを覆う新しいバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new buffer pointer over the specified number of contiguous instances beginning at the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたポインタで始まっている指定された数の隣接インスタンスすべてを覆う新しいバッファポインタを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new canonical combining class with the given raw integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい正準結合クラスをこの与えられた生の整数値で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new collection by concatenating the elements of a collection and a sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションとあるシーケンスの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new collection by concatenating the elements of a sequence and a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスとあるコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new collection by concatenating the elements of two collections.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのコレクションの要素を連結することによって新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new collection containing the specified number of a single, repeated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の、ある単一の値の繰り返しを含んでいる新しいコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new context with the given path of coding keys and a description of what went wrong.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたコーディングキーのパスと何がうまくいかなかったかの説明で新しいコンテキストを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new dictionary by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書を、指定のデコーダからデコードすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new dictionary from the key-value pairs in the given sequence, using a combining closure to determine the value for any duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書を、与えられたシーケンスの中のキー値ペアから作成します、結合用のクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new dictionary from the key-value pairs in the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書を、与えられたシーケンスの中のキー値ペアから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new dictionary whose keys are the groupings returned by the given closure and whose values are arrays of the elements that returned each key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書を作成します、それのキーは与えられたクロージャによって返されるグループ分けです、そしてそれの値はいくらかの要素からなる配列で、それが各キーで返されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new floating-point value using the sign of one value and the magnitude of another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の符号ともう一方の規模とを使って新しい浮動小数点値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいハーシャーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new index at the specified code unit offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインデックスをこの指定されたコード単位オフセットで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new index into a reversed collection for the position before the specified index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>逆にされたコレクションへのある新しいインデックスを、指定されたインデックスの前の位置に対して、作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new index wrapping base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>baseをラップしている新しいインデックスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Bool.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがBoolである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Double.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがDoubleである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Float.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがFloatである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがInt16である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがInt32である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがInt64である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがInt8である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがIntである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがStringである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがUInt16である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがUInt32である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがUInt64である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがUInt8である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられたデコーダからデコードすることによって作成します、型の持つRawValueがUIntである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたデコーダからデコードすることで新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from an interpolated string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスを補間文字列リテラルから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the bit pattern of the given instance by sign-extending or truncating to fit this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型に適合するように符号拡張または切り詰めることによって、指定インスタンスのビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もしこの型に適合するのに必要ならば切り詰めるか符号拡張によって、指定インスタンスのビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the given integer, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数から新しいインスタンスを作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the given integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the given string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the given value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスをこの与えられた値から作成します、もしそれが正確に表現できるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the given value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値から新しいインスタンスを作成します、最も近い可能な表現に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the specified integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された整数から新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance from the specified sign and bit patterns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された符号とビットパターンから新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance initialized to the given value, if it can be represented without rounding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが丸めなしに表されるならば、与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値に初期化される新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance of a collection containing the elements of a sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスの要素を含んでいるあるコレクションの新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance of the system’s default random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムの持つ省略時の無作為数生成子の新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance that approximates the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値におおよそ相当する新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance with the given container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたコンテナで新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance with the given raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた生の値で新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance with the representable value that’s closest to the given integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数に最も近い表現可能な値を使って新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance with the same memory representation as the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値と同じメモリ表現で新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new instance with the specified raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された生の値を持つ新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new integer value from the given string and radix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列と基数から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new integer value from the given string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列から新しい整数値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new mutable buffer over the same memory as the given buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたバッファと同じメモリを覆う新しい可変バッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new mutable raw pointer from the given immutable raw pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい可変の生のポインタを与えられた不変の生のポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new option set from the given raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた生の値から新しいオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new raw pointer from an AutoreleasingUnsafeMutablePointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい生のポインタをAutoreleasingUnsafeMutablePointerインスタンスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new raw pointer from the given mutable raw pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい生のポインタを与えられた可変の生のポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new raw pointer from the given typed pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい生のポインタを与えられた型付ポインタから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new result by evaluating a throwing closure, capturing the returned value as a success, or any thrown error as a failure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい結果を、あるスローするクロージャを評価することによって作成します、返される値をある成功としてキャプチャしています、または何からのスローされたエラーをある失敗として。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new sequence that wraps and forwards operations to base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>baseをラップしてそれへと演算を転送する新規シーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new set by decoding from the given decoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたデコーダからデコードすることで新しい集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new set from a finite sequence of items.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの要素からなる有限のシーケンスから集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new string by copying and validating the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーして検証することによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のUTF-8データをコピーすることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new string by copying the null-terminated data referenced by the given pointer using the specified encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい文字列を、与えられたポインタによって参照されるヌル終端のデータをコピーすることによって作成します、指定された符号化を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new string containing the characters in the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの中のそれら文字を含んでいるある新しい文字を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new string from the given substring.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい文字列を与えられた下位文字列から作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new string representing the given string repeated the specified number of times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された回数繰り返された与えられた文字列を表している新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロに等しい新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value from the given floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた不動小数点リテラルから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value from the given integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数リテラルから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value from the given sign, exponent, and significand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた符号、指数、そして仮数から新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value with the bit pattern of the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたポインタのビットパターンで新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value with the given bit pattern.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたビットパターンから新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value, if the given integer can be represented exactly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数が正確に表現できるならば、新しい値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new value, rounded to the closest possible representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値を作成します、最も近い可能な表現へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new, empty array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい、空の配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a new, empty collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい、空のコレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a raw buffer over the contiguous bytes in the given typed buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された型付バッファの中の隣接バイトすべてを覆う生のバッファを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a raw buffer over the same memory as the given raw buffer slice, with the indices rebased to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた生のバッファスライスと同じメモリのすべてを覆う生のバッファを作成します、ゼロに再配置されたインデックスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a sequence of pairs built out of two underlying sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの根底にあるシーケンスから組み立てられるペアからなるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a sequence that presents the elements of base sequences concatenated using separator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンス、それはbaseシーケンスたちの要素を、与えられたseparatorを使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a sequence whose makeIterator() method forwards to makeUnderlyingIterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのmakeIterator()メソッドをmakeUnderlyingIteratorへと転送するあるシーケンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a set containing the elements of the given array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた配列リテラルの要素を含んでいる集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string containing the given character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字を含んでいる文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string corresponding to the given collection of Unicode scalars.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたユニコードスカラーのコレクションに対応する文字列を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string corresponding to the given sequence of UTF-16 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたUTF-16コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string corresponding to the given sequence of UTF-8 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたUTF-8コード単位の連続に対応する文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string from the given Unicode code units in the specified encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコード単位から指定されたエンコーディングで文字列を作成する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string from the null-terminated sequence of bytes at the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたポインタでのnull終端のバイトシーケンスから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string from the null-terminated, UTF-8 encoded sequence of bytes at the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたポインタでの、null終端の、UTF-8エンコードされたバイトシーケンスから文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string interpolation with storage pre-sized for a literal with the indicated attributes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるリテラルに対してあらかじめサイズ指定されるストレージで、指し示される属性で、文字列補間を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string representing the given character repeated the specified number of times.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された回数繰り返された与えられた文字を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string representing the given value in base 10, or some other specified base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値を底10、または何か他の指定の底で表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string representing the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値を表している文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a string with a detailed representation of the given value, suitable for debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値の詳細な表現での文字列を作成します、デバッグに適するもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a type-erased collection that wraps the given collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたコレクションをラップする型消去コレクションを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a type-erased hashable value that wraps the given instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型消去ハッシュ化値を作成します、それは与えられたインスタンスをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a value initialized to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロに初期化される値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a view into the given collection that allows access to elements within the specified range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたコレクションに関するあるビューを作成します、それは指定された範囲の内の要素にアクセスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an AnyBidirectionalCollection having the same underlying collection as other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyBidirectionalCollectionを作成します、otherと同じ基礎をなすコレクションを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an AnyCollection having the same underlying collection as other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyCollectionを作成します、otherと同じ基礎をなすコレクションを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an AnyRandomAccessCollection having the same underlying collection as other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyRandomAccessCollectionを作成します、otherと同じ基盤コレクションを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an OpaquePointer from a given address in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ中の与えられたアドレスからOpaquePointerを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an array containing the elements of a sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスの要素を含んでいる配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an array from a column in a machine learning data table.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機械学習データテーブルの縦列から配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an array from a machine learning data value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機械学習データ値から配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an array from an untyped column in a machine learning data table.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機械学習データテーブルの型無し縦列から配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an array from the given array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された配列リテラルから配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an dictionary from a machine learning data value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>機械学習データ値から辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty dictionary with preallocated space for at least the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の辞書を、あらかじめアロケートされたスペースで少なくとも指定された要素数に対して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty instance ready to be filled with string literal content.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列リテラル内容で満たされる準備ができている空のインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty set with preallocated space for at least the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の集合を、あらかじめアロケートされたスペースで少なくとも指定された要素数に対して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の集合を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty static string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の静的文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty substring.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の下位文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an empty view instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のビューインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an immutable typed buffer pointer referencing the same memory as the given mutable buffer pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不変の型付バッファポインタを作成します、与えられた可変バッファポインタと同じメモリを参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an index in the given UTF-16 view that corresponds exactly to the specified string position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたUTF-16ビューの中のあるインデックスを作成します、それは指定された文字列位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an index in the given UTF-8 view that corresponds exactly to the specified UTF16View position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたUTF-8ビューの中のあるインデックスを作成します、それは指定されたUTF16View位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an index in the given Unicode scalars view that corresponds exactly to the specified UTF16View position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコードスカラービューの中のあるインデックスを作成します、それは指定されたUTF16View位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an index in the given string that corresponds exactly to the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列の中のあるインデックスを作成します、それは指定された位置に正確に対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance containing just the given element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素だけを含んでいるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance equal to the given Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたブール値と同じインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance equivalent to the given ClosedRange.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたClosedRangeと等しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance equivalent to the given Range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたRangeと等しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance from a string interpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列補間からインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance from the description of a given LosslessStringConvertible instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたLosslessStringConvertibleインスタンスの叙述からインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseに初期化されるインスタクスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to a single Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある単一のユニコードスカラーへと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to a single character that is made up of one or more Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとつ以上のユニコードスカラー値でできているある単一の文字へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the given Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたブール値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the given string value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列値へ初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the specified Boolean literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたブールリテラルに初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the specified floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された浮動小数点値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the specified integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された整数値に初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized to the value of a string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列リテラルの値へと初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized with nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilで初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized with the given elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素で初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance initialized with the given key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた「キー値」ペアで初期化されるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance of the UTF-16 codec.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-16コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance of the UTF-32 codec.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-32コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance of the UTF-8 codec.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-8コーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance of the codec.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコーデックのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance that stores the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値を格納するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance that uniquely identifies the given class instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクラスインスタンスを固有に識別するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance that uniquely identifies the given metatype.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたメタタイプを固有に識別するインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance whose iterator is a copy of base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのイテレータがbaseのコピーであるインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance with the given bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた境界を使ってインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つのインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an integer from its big-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのビッグエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an integer from its little-endian representation, changing the byte order if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのリトルエンディアン表現から整数を作成します、必要ならばバイト順を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an integer from the given floating-point value, if it can be represented exactly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた浮動小数点値から整数を作成します、もしそれが正確に表現可能ならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an integer from the given floating-point value, rounding toward zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた浮動小数点値から整数を作成します、ゼロへの丸めを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an integer that captures the full value of the given object identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクト識別子の完全な値を捕獲する整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an iterator that presents the elements of the sequences traversed by base, concatenated using separator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるイテレータ、それはBaseによって辿っていかれるいくらかのシーケンスに属するいくらかの要素を、separatorを使って連結して提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an iterator that wraps a base iterator but whose type depends only on the base iterator’s element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基盤イテレータをラップするイテレータを作成します、しかしそれの型は基盤イテレータのもつ要素型にのみ影響を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an iterator that wraps the given closure in its next() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャをそれのnext()の中にラップするイテレータを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an unbounded range expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限範囲式を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an unmanaged reference with an unbalanced retain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>管理されない参照を不均衡なリテイン（保持）で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates an unmanaged reference without performing an unbalanced retain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>管理されない参照を不均衡なリテイン（保持）を実行することなしに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates the closest representable value to the given integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数に最も近い表現可能な値を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating Ranges of Scalars</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーの範囲を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Boolean From Another Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の値からあるブールを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Buffer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Character</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Dictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Generator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生成子を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Hasher</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハーシャーを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a New Collection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいコレクションの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Nil Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil値の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Random Integer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為な整数を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Random Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為な値を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Range Expression</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲式を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Scalar</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a String Using Formats</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を様々な形式を使って作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a String from Unicode Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列をユニコードデータから作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a type which supports custom string interpolation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえの文字列補間をサポートする型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a type which supports default string interpolation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の文字列補間をサポートする型を作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an Array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an Iterator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イテレータを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an Optional Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an Unbounded Range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限範囲の作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating and iterating over a Countdown sequence uses a CountdownIterator to handle the iteration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Countdownシーケンス全体にわたっての作成や反復は、その反復を取り扱うCountdownIteratorを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom Encoding and Decoding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>カスタムエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Customize NSObject Subclass Behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSObjectサブクラス挙動をカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Customizing C APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C APIのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Customizing Objective-C APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C APIをカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Customizing Your C Code for Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのCコードをSwift用にカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Customizing Your Type's Reflection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のリフレクションのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data Flow and Control Flow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データの流れと制御の流れ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data Modeling</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データモデリング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deallocates the memory block previously allocated at this buffer pointer’s base address.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファポインタのもつベースアドレスで以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deallocates the memory block previously allocated at this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタで以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deallocates the previously allocated memory block referenced by this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照された以前に割り当てられたメモリブロックを割り当て解除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Debugging and Reflection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグとリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decide how to store data and model behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにデータを格納して挙動をモデル化するか決定を下します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decimal digits that otherwise do not meet the requirements of numeric type decimal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>10進法桁、それは一方で数値型decimalの要件を満たしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declaration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declarations marked with the private or fileprivate modifier don't appear in the generated header, and aren't exposed to the Objective-C runtime unless they are explicitly marked with a @IBAction, @IBOutlet, or @objc attribute.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>privateまたはfileprivate修飾子で印された宣言は生成されたヘッダに現れません、そしてObjective-Cランタイムに露出されません、それらが明示的に@IBAction、@IBOutlet、または@objc属性で印されない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare Closed Enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare Option Sets</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセットを宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare Simple Enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単純な列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare Typed Enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付き列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare Typed Extensible Enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付き拡張可能列挙を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare a next() method that advances one step in the related sequence and returns the current element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>next()メソッドを宣言してください、それは関連シーケンスにおいて一歩前へ進みます、そして現在の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare additional preconfigured option set values as static properties initialized with an array literal containing other option values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加のあらかじめ構成されるオプションセット値を、他のオプション値を含んでいる配列リテラルで初期化される静的プロパティとして宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declare simple macros as global constants, and translate complex macros into functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単純なマクロをグローバルな定数として宣言してください、そして複雑なマクロを関数へと翻訳してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declares methods backing binary arithmetic operators–such as +, - and *–and their mutating counterparts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイナリ算術演算 – 例えば+、-そして* – そしてそれらの変更を行う相当物などを裏打ちするメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declaring conformance to the CVarArg protocol for types defined outside the standard library is not supported.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリ外で定義される型に対してCVarArgプロトコルへの準拠を宣言することは、サポートされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decoders should provide types conforming to UnkeyedDecodingContainer for their format.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらデコーダーは、それらの形式に対してUnkeyedDecodingContainerに準拠する型を提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a nested container and returns a Decoder instance for decoding super from that container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入れ子にされたコンテナをデコードして、デコードするsuperに対するDecoderインスタンスをそのコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a nested container keyed by the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型によってキー付けされる入れ子にされたコンテナをデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a null value for the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対してnull値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a null value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>null値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a single value of the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の単一の値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a value of the given type for the given key, if present.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された型の値を与えられたキーに対してデコードします、もし存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a value of the given type for the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された型の値を与えられたキーに対してデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a value of the given type, if present.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の値をデコードします、もし存在するならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes a value of the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の値をデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decodes an unkeyed nested container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付けされない入れ子にされたコンテナをデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decoding Containers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコーディングコンテナ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Decoding a Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値をデコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default Literal Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時のリテラル型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default Types for Literals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リラテルのための省略時の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default-ignorable code points are those that should be ignored by default in rendering (unless explicitly supported).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時無視可能なコード点は、初期状態では描画において無視されるべきです（明示的にサポートされる場合を除いて）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define an Observer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブザーバを定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deinitializes the specified number of values starting at this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタで開始して、指定された数の値をデイニシャライズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deinitializing typed memory does not unbind that memory’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付メモリのデイニシャライズは、そのメモリの型を束縛解除しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Delegate methods can customize how an app responds to an event.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先メソッドは、どのようにアプリがイベントに応答するかをカスタマイズできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Denote instance (-) and class (+) methods with func and class func, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス（-）およびクラス（+）メソッドであることを、それぞれfuncおよびclass funcで示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on the size and span of range, some concrete values may be represented more frequently than others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rangeの大きさと幅に依存して、いくつかの具体的な値は他のものよりずっと頻繁に表現されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on the size and span of range, some concrete values may be represented more frequently than others.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rangeの大きさと幅に依存して、いくつかの具体的な値は他のものよりずっと頻繁に表現されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てるまたは全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on the type, it may make sense to allocate more or less storage than requested, or to take no action at all.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型によって、要請されたよりも多くまたは少なく割り当てること、または全く行動を起こさないことが道理にかなっているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deprecated</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非推奨</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Boolean</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブールを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Character</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字の説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Dictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある辞書の記述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Double</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるDoubleの記述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Float</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Floatを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるSetの記述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing a String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing an Array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing an Error</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーを記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Describing an Integer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数を記述する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="JA">
        <seg>説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Designating Nullability in Objective-C APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C APIにおいてヌル可能性を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Diacritic nukta marks in Brahmi-derived scripts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブラーフミー派生書体における発音区別ヌクタ記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Diacritic virama marks in Brahmi-derived scripts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブラーフミー派生書体における発音区別ヴィラーマ記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Diacritics are scalars that linguistically modify the meaning of another scalar to which they apply.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら区別的発音符は、それに対してそれらが適用される、別のスカラーの意味を言語学的に修正するスカラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dictionaries are empty when created with an initializer or an empty dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書は、イニシャライザまたは空の辞書リテラルで作成した場合は空です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dictionary has two subscripting interfaces:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書は２つの添え字インターフェイスを持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Different keyed containers from the same Decoder may return different keys here; it is possible to encode with multiple key types which are not convertible to one another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じDecoderからの異なるキー付けコンテナは、異なるキーをここで返すかもしれません；互いに変換できないところの複数のキー型を使ってエンコードすることは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Different keyed containers from the same decoder may return different keys here, because it is possible to encode with multiple key types which are not convertible to one another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じデコーダからの異なるキー付けコンテナは、異なるキーをここで返すかもしれません、なぜなら互いに変換できないところの複数のキー型を使ってエンコードすることは可能だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Digits that are commonly understood to form base-10 numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般に底10の数の形式に理解される桁それら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Discussion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>解説</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks at the bottom left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左下での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks at the bottom right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右下での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks at the top left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左上での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks at the top right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右上での別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks directly above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>直上の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks directly below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>直下の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks extending above two bases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの基盤の上に延びる別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks subtending two bases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの基盤に対する別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks to the left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Distinct marks to the right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右の別個の記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Divide</seg>
      </tuv>
      <tuv lang="JA">
        <seg>除算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Divide and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>除算と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Divides the first value by the second and stores the quotient in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の値を２番目の値で除算して、商を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Divides the first value by the second and stores the remainder in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の値を２番目の値で除算して、余りを左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dividing by zero is not an error when using this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロによる除算は、このメソッドを使う場合はエラーではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not advance the iterator or any copies of the iterator outside this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イテレータやなんらかのイテレータのなんらかのコピーをこのメソッドの外側で前進させないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not assign an instance of a nontrivial type through pointee to uninitialized memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明でない型のインスタンスを、未初期化メモリへのpointeeを通してアサインしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not assign an instance of a nontrivial type through the subscript to uninitialized memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>自明でない型のインスタンスを未初期化メモリへの添え字を通してアサインしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not call this initalizer directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザーを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not call this initializer directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not call this method directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを直接に呼ばないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not create an instance of this type directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型のインスタンスを直接に作成しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not declare new conformances to StringProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい準拠事項をStringProtocolに宣言しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not declare new conformances to this protocol; they will not work as expected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい準拠事項をこのプロトコルに宣言しないでください；
それは期待するようには機能しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not escape it from the closure for later use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それを後で使うためにクロージャから脱出させないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not persist the pointer and access it after the function has returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのポインタに固執すること、そして関数が帰った後でそれにアクセスしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not rely on a previously stored index value after altering a collection with any operation that can change its length.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションをそれの長さを変える何らかの演算で手直し後に、以前に格納されたインデックス値を当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not rely on anything about the array that is the target of this method during execution of the body closure; it might not appear to have its correct value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドのターゲットである配列についてbodyクロージャの実行の間に何であれ依存しないでください：それは、それの正しい値を持つように見えないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not save hash values to use during a future execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>将来の実行の間に使うためにハッシュ値を保存しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not save or otherwise reuse hash values across executions of your program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのプログラムの実行それらにまたがってハッシュ値を保存または別なふうに再利用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not store or return the pointer for later use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後で使うためにポインタを格納したり返したりしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use unsafeBitCast(_:to:) with class or pointer types; doing so may introduce undefined behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unsafeBitCast(_:to:)をクラスまたはポインタ型で使わないでください；そうすることは未定義挙動を導きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use this property to check whether a floating point value is negative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティを使って、ある浮動小数点値が負かどうか調べないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not use this subscript to modify dictionary values if the dictionary’s Value type is a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この添え字を使って、辞書値を修正しないでください、もしその辞書の持つValue型がクラスであるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doing so crashes your app:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうすることはあなたのアプリをクラッシュさせます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doing so may become a compile-time error in the future.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうすることは、コンパイル時エラーに将来はなるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't Put Critical Code in a Closure That Might Not Be Called</seg>
      </tuv>
      <tuv lang="JA">
        <seg>呼び出されないかもしれないクロージャの中に重大なコードを置かないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't Spread State Across Multiple Variables</seg>
      </tuv>
      <tuv lang="JA">
        <seg>状態を複数の変数に渡って広げないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't Write Code That Makes a One-Time Change in a Closure That's Called Multiple Times</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一回限りの変更をするコードを複数回呼び出されるクロージャの中に書かないでください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't use the NS_CLOSED_ENUM macro if:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_CLOSED_ENUMを使わないでください、もし：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t delete the .m and .h files immediately; use them to troubleshoot.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>.mと.hファイルを直ぐに削除しないでください；それらを不具合対処のために使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t expect any particular ordering of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの特定のキー値ペア順番付けを当てにしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t store substrings longer than you need them to perform a specific operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列を、あなたが特定の演算の実行にそれらを必要とするより長く、貯蔵しておかないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don’t use the equal-to operator (==) to test whether a value is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等演算子（==を使ってある値がNaNかどうかをテストしないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Downcast Objects to Call Methods and Access Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトをダウンキャストしてメソッドの呼び出しおよびプロパティにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the playground below to get started.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドを下でダウンロードして始めましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dumps the given object’s contents using its mirror to standard output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って標準出力にダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dumps the given object’s contents using its mirror to the specified output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトの内容をそれのミラーを使って指定出力ストリームにダンプします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During instance creation, in particular during ManagedBuffer.create’s call to initialize, ManagedBuffer’s header property is as-yet uninitialized, and therefore reading the header property during ManagedBuffer.create is undefined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス作成の間、特にManagedBuffer.createでのイニシャライザ呼び出しの間、ManagedBufferのheaderプロパティは今の所まだイニシャライズされていません、そしてそれゆえheaderプロパティを読み出すことはManagedBuffer.createの間は未定義です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During the registration period, you need to add and remove names as students add and drop the class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>履修期間の間、あなたはそのクラスに生徒を加えたり落としたりするたびに名前を加えたり取り除いたりする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamic Sequences</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的なシーケンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each ExpressibleByStringInterpolation type has an associated StringInterpolation type which conforms to StringInterpolationProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それぞれのExpressibleByStringInterpolation型は、ある結び付けられたStringInterpolation型を持ちそれはStringInterpolationProtocolに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each UnicodeDecodingResult instance can represent a Unicode scalar value, an indication that no more Unicode scalars are available, or an indication of a decoding error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各UnicodeDecodingResultインスタンスは、ユニコードスカラー値、これ以上利用可能なユニコードスカラーがないしるし、またはデコードエラーのしるしとして表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each array has an independent value that includes the values of all of its elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各配列はひとつの独立した値を持ち、それはそれのいくらかある要素の値すべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each bit of rawValue potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the OptionSet type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rawValueの各ビットは、潜在的にオプションセットの１つの要素を表します、けれども生の値は他とまったく異なったOptionSet型の値として定義されないビットを含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each byte in memory is viewed as a UInt8 value independent of the type of values held in that memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ中の各バイトは、そのメモリ中に保持される値の型に影響を受けないUInt8値として眺められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each byte in memory is viewed as a UInt8 value independent of the type of values held in that memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ中の各バイトは、そのメモリ中に保持される値の型に影響を受けないUInt8値として眺められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each call to next() must produce a uniform and independent random value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>next()への各呼び出しは、一様で独立した無作為値を生成しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each code unit is stored as a UInt16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各コード単位はUInt16インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each code unit is stored as a UInt8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各コード単位はUInt8インスタンスとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each element of a string is represented by a Character instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の各要素は、あるCharacterインスタンスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each entry in the table is identified using its key, which is a hashable type such as a string or number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのテーブル（表）の中の登録項目はそれのキーを使って特定され、そのキーはハッシュ化型、例えば文字列や数などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each floating-point type has its own possible range and precision.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各浮動小数点型は、それ独自の可能な範囲と精度を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each ill-formed sequence is replaced with a Unicode replacement character ("\u{FFFD}") and is measured as such.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各誤形式シーケンスは、ユニコード代替文字（"\u{FFFD}"）で置き換えられます、そしてそういったものとして測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each integer argument selects the child at that offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各整数引数は、子をそのオフセットで選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each interpolated segment is translated into a call to a StringInterpolationProtocol.appendInterpolation(...) method, with the contents of the interpolation’s parentheses treated as the call’s argument list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各補間文節は、StringInterpolationProtocol.appendInterpolation(...)メソッドへの呼び出しに変換されます、その補間のもつ括弧の内容を呼び出しの引数リストとして扱って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each key in elements must be unique.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各キーはelementsにおいて特有でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each key in the keys collection has a unique value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーコレクションの中の各キーは、特有な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of these scalar values, in turn, is too large to fit into a single UTF-16 or UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらスカラー値のそれぞれは、今度は、ある単一のUTF-16またはUTF-8コード単位にぴったり合うには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each property provides access to a view of the string as a series of code units, each encoded in a different Unicode encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各プロパティは、文字列のあるビューへのアクセスを一続きのコード単位として提供し、それぞれが異なるユニコードエンコーディングにおいてエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each scalar value is represented by a Unicode.Scalar instance and is equivalent to a UTF-32 code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各スカラー値は、Unicode.Scalarインスタンスによって表されて、ひとつのUTF-32コード単位と同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each string argument requires a linear search, and unless the underlying collection supports random-access traversal, each integer argument also requires a linear operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各文字列引数は線形探索を要求します、そして基底コレクションがランダムアクセス走査をサポートしない限り、各整数引数もまた線形演算を要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each string argument selects the first child with a matching label.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各文字列引数は、合致するラベルを持つ最初の子を選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each time an element of the lazy sequence is accessed, an element of the underlying array is accessed and transformed by the closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延シーケンスの中のある要素がアクセスされるたびに、基礎をなす配列の中のある要素がアクセスされてクロージャによって変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each time the next() method is called on a CountdownIterator instance, it calculates the new next value, checks to see whether it has reached zero, and then returns either the number, or nil if the iterator is finished returning elements of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>next()メソッドがCountdownIteratorインスタンス上で呼ばれるたびに、それは新しい次の値を計算し、それがゼロに届いたか見るために調べ、そしてそれからその数、またはそのイテレータがシーケンスの要素を返すことを完了するならばnilのどちらかを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each value in the sequence is separated by stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの各値は、strideによって隔てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each value in the sequence steps by stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの各値は、strideだけまたいで越えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Edit the bridging header to expose your Objective-C code to your Swift code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジヘッダを編集して、あなたのObjective-CコードをあなたのSwiftコードに露出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Effectively managing state, the bits of data that keep track of how the app is being used at the moment, is an important part of a developing your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>効果的に状態、どのようにその時アプリが使われるかの情報を得る少量のデータ、を管理することは、あなたのアプリの開発の重要な部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Either true or false, randomly chosen with equal probability.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueまたはfalseのどちらか、等しい確率で無作為に選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Element access to the vector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ベクターに対する要素アクセス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elements are sorted in ascending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素は昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elements that are in only one or the other are left out of the result of the intersection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どちらか一方にだけある要素は、交叉の結果から除外されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elements that are used to split the collection are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Elements that are used to split the sequence are not returned as part of any subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスを分割するのに使われる要素らは、どれかの下位シーケンスの一部として返されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoders and Decoders</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーダとデコーダ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoders should provide types conforming to KeyedEncodingContainerProtocol for their format.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらエンコーダは、それらの形式に対してKeyedEncodingContainerProtocolに準拠する型を提供すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoders should provide types conforming to UnkeyedEncodingContainer for their format.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーダは、それらの形式に対してUnkeyedEncodingContainerに準拠する型を提供するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a Unicode scalar as a UTF-32 code unit by calling the given closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-32コード単位としてのユニコードスカラーを与えられたクロージャを呼び出すことによってエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a Unicode scalar as a series of code units by calling the given closure on each code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを各コード単位上で呼び出すことによって、ユニコードスカラーを一連のコード単位としてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a nested container and returns an Encoder instance for encoding super into that container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入れ子にされたコンテナをエンコードして、エンコードするsuperに対するEncoderインスタンスをそのコンテナに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a nested container keyed by the given type and returns it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型によってキー付けされる入れ子にされたコンテナをエンコードしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a null value for the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対してnull値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a null value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>null値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a reference to the given object only if it is encoded unconditionally elsewhere in the payload (previously, or in the future).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたオブジェクトへの参照をエンコードします、それがそのペイロードの中のどこか他の所で無条件にエンコードをされる（以前に、またはこの先に）場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes a single value of the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の単一の値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes an unkeyed encoding container and returns it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付けされないエンコーディングコンテナをエンコードしてそれを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the contents of this dictionary into the given encoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この辞書の内容を指定のエンコーダへとエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the elements of the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスに属する要素をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the elements of this array into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この配列の要素を指定されたエンコーダへとあるキー付けされないコンテナにおいてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the elements of this set into the given encoder in an unkeyed container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合の要素を指定されたエンコーダへとあるキー付けされないコンテナにおいてエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the given value for the given key if it is not nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対して与えられた値をエンコードします、それがnilでないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the given value for the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対して与えられた値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値をエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this optional value into the given encoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオプショナル値を与えられたエンコーダにエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Bool.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがBoolである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Double.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがDoubleである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Float.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがFloatである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Int16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがInt16である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Int32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがInt32である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Int64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがInt64である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Int8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがInt8である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがIntである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがStringである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is UInt16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがUInt16である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is UInt32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがUInt32である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is UInt64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがUInt64である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがUInt8である場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder, when the type’s RawValue is UInt.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をその与えられたデコーダへとデコードします、RawValueがUIntである場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encodes this value into the given encoder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を与えられたエンコーダにエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding Containers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングコンテナ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding a Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値をエンコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding and Decoding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding and Decoding Custom Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえの型のエンコーディングとデコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding and Decoding Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値をエンコードおよびデコードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding and Storage</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコードとストレージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Encoding, Decoding, and Serialization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコード、デコード、そしてシリアライズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumeration Case</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumeration Cases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙ケース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations imported using the NS_ENUM macro won't fail when you initialize one with a raw value that does not correspond to an enumeration case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_ENUMマクロを使ってインポートされる列挙は、あなたが列挙ケース節に一致しない生の値を持つものを初期化する場合に、失敗しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enumerations with Raw Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の値を持つ列挙</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equality and Ordering</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等性と順序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equality implies substitutability—any two instances that compare equally can be used interchangeably in any code that depends on their values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等性は代替可能性を暗黙的に意味します—同等性を比較されるあらゆる２つのインスタンスは、それらの値に影響を受けるあらゆるコードにおいて入れ替えて使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equality is Separate From Identity</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等性は同一性と別個のものです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equality is the inverse of inequality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同等性は、不等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equatable Requirements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatable 要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equivalent to calling superDecoder(forKey:) with Key(stringValue: "super", intValue: 0).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>superDecoder(forKey:) with Key(stringValue: "super", intValue: 0)を呼び出すことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equivalent to calling superEncoder(forKey:) with Key(stringValue: "super", intValue: 0).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>superEncoder(forKey:) with Key(stringValue: "super", intValue: 0)を呼び出すことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Errors and Exceptions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーと例外</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Escaping the pointer to use after the execution of the function is undefined behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数の実行の後に使うためにポインタを脱出させることは、未定義の挙動となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Essential components are those that contribute to the type’s implementation of Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>本質的な構成要素は、その型の持つEquatableの実装に寄与するそれらです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluates a closure while ensuring that the given instance is not destroyed before the closure returns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャを評価する一方で与えられたインスタンスがそのクロージャが返る前に破棄されないことを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluates the given closure when this Optional instance is not nil, passing the unwrapped value as a parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャをこのOptionalインスタンスがnilでない場合に評価します、アンラップされた値をパラメータとして渡しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluation of the || operator is one of the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>||演算子の評価は、次のうちの１つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Evaluation of the &amp;&amp; operator is one of the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>&amp;&amp;演算子の評価は、次のうちの１つです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even something as simple as printing a sequence of letters can be affected by the timing of a closure call:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一連の文字を印字するような単純なことでさえ、クロージャ呼び出しの時機によって影響される可能性があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though the barrier guarantees that neither closure will escape the function, the async(execute:) method still requires that the closures passed be marked as @escaping, so the first version of the function does not compile.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たとえこの障壁がどちらのクロージャも関数を脱出しないことを保証するとしても、async(execute:)メソッドは依然としてこれらの渡されるクロージャが@escapingとして印されることを要求します、それで最初のバージョンの関数はコンパイルしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though the line that prints A is first in the code, it's ordered later in the output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たとえAを印字する行がコードにおいて最初であっても、それは出力においてもっと後の順番にされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every Character instance is composed of one or more Unicode scalar values that are grouped together as an extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのCharacterインスタンスは、１つの拡張書記素クラスタとして一緒にまとめられる１つの以上のユニコードスカラー値から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every Float or Double value is canonical, but noncanonical values of the Float80 type exist, and noncanonical values may exist for other types that conform to the FloatingPoint protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのFloatまたはDouble値は正準です、しかしFloat80型の非正準値も存在します、そしてFloatingPointプロトコルに準拠する他の型に対して非正準値が存在するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every array reserves a specific amount of memory to hold its contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての配列はある特定の量のメモリを確保することでその内容を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every dictionary is an unordered collection of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての辞書は、キー値ペアの順番付けられないコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する型のすべての個々の値は、RawValue型の対応する特有な値を持ちます、しかし準拠する型の値に対応しないRawValue型の値があっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every element of numbers up to, but not including, the first negative value is included in the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の負の値までの、しかしそれを含まない、numbersのすべての要素は、この結果の中に含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every key in keysAndValues must be unique.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keysAndValuesの中のすべてのキーは特有でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every unsigned integer is its own magnitude, so for any value x, x == x.magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての符号なし整数は、それ自身が規模（magnitude）です、それで何らかの値xにとって、x == x.magnitudeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every value except NaN compares less than or equal to +infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNを除くあらゆる値は、+infinityより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every value except for NaN and +infinity compares less than +infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNと+infinityを除くあらゆる値は、+infinityより少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every value in the range 0..&lt;upperBound is equally likely to be returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲0..&lt;upperBoundの中の全ての値は、等しく返される可能性をもちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything from your implementation and interface goes directly into this single Swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの実装とインタフェースからのすべては、直接この単一のスウィフトファイルに入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exact Conversion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>厳密変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example Buffer Class</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファクラスの例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exceptional values need not take part in the strict total order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら普通でない値は、全順序において役割を果たすには及びません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exchanges the byte values at the specified indices in this buffer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファの持つメモリの中の指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exchanges the values at the specified indices of the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのバッファの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exchanges the values at the specified indices of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのコレクションの指定インデックスでの値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exchanges the values of the two arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数の値を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Excluding Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素を排除する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given closure while temporarily binding the memory referenced by this buffer to the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを実行します、その間はこのバッファによって参照されるメモリを与えられた型に一時的に束縛しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Executes the given closure while temporarily binding the specified number of instances to the given type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを実行します、その間は指定された数のインスタンスを与えられた型に一時的に束縛しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Existential Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exiting a Program</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プログラムの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expanding this set to include types that represent more than simple Boolean values is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単純なブール値より多く表現する型を含めるためにこの集合を拡大することは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expected Performance</seg>
      </tuv>
      <tuv lang="JA">
        <seg>期待される性能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Experiment with Swift standard library types and learn high-level concepts using visualizations and practical examples.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いろいろなSwift標準ライブラリ型を試したり、視覚化や実践例を使うことで高水準概念を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explore the Standard Library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリ探索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exponent</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expose the Existing Implementation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の実装を公開する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exposing nonvalue aspects of Equatable types other than class identity is discouraged, and any that are exposed should be explicitly pointed out in documentation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatable型の非値の面を露出することはクラス識別子を除いて推奨されません、そして露出されるものは何でも、明白に文書において指摘されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ExpressibleByExtendedGraphemeClusterLiteral Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByExtendedGraphemeClusterLiteral 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ExpressibleByIntegerLiteral Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByIntegerLiteral 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ExpressibleByStringInterpolation Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByStringInterpolation実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ExpressibleByStringLiteral Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByStringLiteral 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extended Precision Floating-Point Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張精度浮動小数点値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extending default interpolation behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の補間挙動を拡張する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extending default string interpolation behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の文字列補間挙動を拡張する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extending the compared character count to 15 includes the differing characters, so a nonzero result is returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較する文字を15を数えるまで広げることは異なる文字を含みます、それで非ゼロの結果が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extensible enumerations are imported in a similar fashion to nonextensible ones, except that they receive an additional initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張可能列挙は、それらが追加的なイニシャライザを受け取ることを除いては、同じようなやり方で拡張可能でないものにインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extensions to Numeric provide default implementations for the protocol’s nonmutating methods based on the mutating variants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Numericへの拡張は、そのプロトコルの非変更メソッドに対する省略時実装を変更実行版に基づいて提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Failure to satisfy that assumption is a serious programming error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>了解事項を満たすことの失敗は、重大なプログラミングエラーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fill out an Objective-C bridging header if you need to access Objective-C code from the same app target in your Swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cブリッジヘッダを記入してください、もしあなたがObjective-CコードにあなたのSwiftファイルにおいて同じアプリターゲットからアクセスする必要があるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finalizes the hasher state and returns the hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハーシャー状態をファイナライズしてハッシュ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finalizing a Hasher</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハーシャーをファイナライズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finalizing consumes the hasher: it is illegal to finalize a hasher you don’t own, or to perform operations on a finalized hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイナライズすることは、ハーシャーを消費します：あなたが所有者でないハーシャーをファイナライズすること、またはファイナライズされたハーシャー上で演算を実行することは不正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, memory that was allocated previously may have been deallocated, leaving existing pointers referencing unallocated memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結局、以前にアロケートされたメモリはデアロケートされるかもしれません、アロケートされないメモリを参照している既存のポインタはそのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, report the average temperature and observation counts:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、平均温度と観測数を報告します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finding Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finding Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finding Substrings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finding the Absolute Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>絶対値を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finding the Dynamic Type in a Generic Context</seg>
      </tuv>
      <tuv lang="JA">
        <seg>総称体の文脈において動的型を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finding the Sign and Magnitude</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号と規模を見つける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First Steps</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初歩</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, a set of observations in Celsius is parsed from strings to Double values:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まず、摂氏での観測の一揃いは、文字列からDouble値へ解析されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>まず、あるシーケンスのもつイテレータを見つけて取ってきてください、そしてそのイテレータの持つnext()メソッドを、それがnilを返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, the function finds the position of the last even number as a ReversedIndex in a reversed view of the array of numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初に、この関数は最後の偶数の位置を、数からなる配列の逆にされたビューにおけるReversedIndexとして捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FixedWidthInteger Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FixedWidthInteger実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating Point</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-Point Operators for Double</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Double用の浮動小数点演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-Point Operators for Float</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Float用の浮動小数点演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-Point Type Aliases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point types are used to represent fractional numbers, like 5.5, 100.0, or 3.14159274.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点型は、5.5、100.0、または3.14159274のような、小数を表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point types represent values that are neither finite numbers nor infinity as NaN, an abbreviation for “not a number.” Comparing a NaN with any value, including another NaN, results in false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点型は、有限数でも無限大でもない値を「not a number」の略語、NaNで表します。NaNを別のNaNを含む何らかの値と比較することは、falseの結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floating-point values are represented as a sign and a magnitude, where the magnitude is calculated using the type’s radix and the instance’s significand and exponent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値は、符号と規模として表されます、そこにおいて規模はその型の基数とインスタンスの仮数と指数を使って計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FloatingPoint Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatingPoint 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For nan or -infinity, x.nextDown is x itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nanまたは-infinityに対して、x.nextDownはxそれ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For nan or infinity, x.nextUp is x itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nanまたはinfinityに対して、x.nextUpはxそれ自身です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For Foundation types that aren't bridged to value types, the Swift overlay renames classes and protocols, as well as related enumerations and constants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値型にブリッジされないFoundation型に対して、Swiftオーバーレイはクラスとプロトコルを改名します、それだけでなく関連する列挙と定数も。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a struct, all its stored properties must conform to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>structに対して、すべてのそれの格納プロパティはEquatableに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a struct, all its stored properties must conform to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>structに対して、すべてのそれの格納プロパティはHashableに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a pointer p, the memory at p + i must be initialized when reading the value by using the subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるポインタpに対して、p + iでのメモリは、添え字を使うことで値を読み出すとき初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a pointer p, the memory at p + i must be initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるポインタpに対して、p + iでのメモリは、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a structure, all its stored properties must conform to Equatable and Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体に対して、全てのそれの格納プロパティは、EquatableおよびHashableに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a type F, positive and negative infinity are represented as F.infinity and -F.infinity, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Fに対して、正と負の無限大はそれぞれF.infinityと-F.infinityのように表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a type T, the resulting value is in the range T.min...T.max.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Tに対して、結果となる値は範囲T.min...T.maxの中です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a value x, a distance n, and a value y = x.advanced(by: n), x.distance(to: y) == n.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値x、隔たりn、および値y = x.advanced(by: n)に対して、x.distance(to: y) == n。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a value x, the comparison x.sign == .minus is not necessarily the same as x &lt; 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値xに対して、比較x.sign == .minusは必ずしもx &lt; 0と同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値xに対して、x.dividedReportingOverflow(by: 0)の結果は(x, true)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値xに対して、x.remainderReportingOverflow(dividingBy: 0)の結果は(x, true)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a value x of a floating-point type F, the magnitude can be calculated as the following, where ** is exponentiation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点型Fの値xに対して、規模は次のように計算されることができます、ここで**は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For all other kinds of declaration—such as properties, enumeration cases, and type aliases—you use the macro as a suffix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての他の種類の宣言に対して — 例えばプロパティ、列挙ケース節、そして型エイリアスなど — あなたはこのマクロを接尾辞として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an enum, all its associated values must conform to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>enumに対して、すべてのそれの関連値はEquatableに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an enum, all its associated values must conform to Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>enumに対して、すべてのそれの関連値はHashableに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an enumeration, all its associated values must conform to Equatable and Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙に対して、全てのそれの関連値は、EquatableおよびHashableに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an example of how Swift imports unannotated declarations, consider the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにSwiftが注釈を付けられない宣言をインポートするかの例として、以下のコードを考慮してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an index i into a collection c, calling c.index(after: i) returns the same index every time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションcへのインデックスiに対して、c.index(after: i)を呼び出すことはいつでも同じインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an instance of Array, startIndex is always zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Arrayのインスタンスに対して、startIndexは常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an instance of ContiguousArray, startIndex is always zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ContiguousArrayのインスタンスに対して、startIndexは常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an unspecialized Objective-C type, Swift infers the generic parameterization for the imported class type constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特殊化されないObjective-C型に対して、スウィフトは総称体パラメータ化をインポートされたクラス型制約に対して推測します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any enumeration with a string, integer, or floating-point raw type, the Swift compiler automatically adds RawRepresentable conformance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列、整数、または浮動小数点の生の型を持つ何らかの列挙に対して、Swiftコンパイラは自動的にRawRepresentable準拠を加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any finite value x, x.nextDown is less than x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの有限の値xに対して、x.nextDownはxより小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any finite value x, x.nextUp is greater than x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの有限値xに対して、x.nextUpはxより大きいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any floating-point value x of type F, the result of the following is equal to x, with the distinction that the result is canonicalized if x is in a noncanonical encoding:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Fの何らかの浮動小数点値xに対して、以下の結果はxと等しいです、その違いはxが非正準符号化になるならば結果は正準化されることです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any numeric value x, x.magnitude is the absolute value of x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの数値xに対して、x.magnitudeはxの絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any representable power of two, significandWidth is zero, because significand is 1.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆる表現可能な２の冪に対して、significandWidthはゼロです、なぜならsignificandが1.0だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any scalar s, it holds by definition that</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかのスカラーsに対して、それは以下の定義によって保持します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any two integers a and b, their quotient q, and their remainder r, a == b * q + r.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの２つの整数aとb、それらの商q、そしてそれらの余りrに対して、a == b * q + r。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any value x, x.magnitude.sign is .plus.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの値xに対して、x.magnitude.signは.plusです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any values a and b, a != b implies that a == b is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかのaとbに対して、a != bはa == bがfalseであることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For any values a and b, a == b implies that a != b is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの値aとbに対して、a == bはa != bがfalseであることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For arrays of most Element types, this storage is a contiguous block of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ほとんどのElement型の配列に対して、このストレージは隣接メモリブロックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For arrays with an Element type that is a class or @objc protocol type, this storage can be a contiguous block of memory or an instance of NSArray.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列でElement型がクラスや@objcプロトコル型であるものに対して、このストレージは隣接メモリブロックまたはNSArrayのインスタンスであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For bridging to be possible, the Element type of a set must be a class, an @objc protocol (a protocol imported from Objective-C or marked with the @objc attribute), or a type that bridges to a Foundation type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジが可能にされるには、集合のElement型は、クラス、@objcプロトコル（Objective-Cからインポートされるまたは@objc属性で印されるプロトコル）、またはあるFoundation型にブリッジする型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For bridging to be possible, the Element type of your array must be a class, an @objc protocol (a protocol imported from Objective-C or marked with the @objc attribute), or a type that bridges to a Foundation type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジが可能にされるには、あなたの配列のElement型は、あるクラス、@objcプロトコル（Objective-Cからインポートされるまたは@objc属性で印されるプロトコル）、またはあるFoundation型にブリッジされる型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For bridging to be possible, the Key and Value types of a dictionary must be classes, @objc protocols, or types that bridge to Foundation types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジが可能にされるには、辞書のKeyとValue型がクラス、@objcプロトコル、またはFoundation型にブリッジする型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For class types, the following mappings apply:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラス型のために、以下のマッピングが適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For clearer, more concise code, the example above could use the array’s contains(_:) method, which every sequence inherits from Sequence, instead of iterating manually:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より明確な、もっと簡潔なコードのために、上のコードは、すべてのシーケンスがSequenceから継承する、配列のもつcontains(_:)メソッドを使うことが、労力を要する反復の代わりに可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomAccessCollectionに準拠しないコレクションに対して、countプロパティにアクセスすることはコレクションの要素を始めから終わりまで反復します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For convenience, the standard assigns symbolic names to a subset of these combining classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>利便性のため、この標準は象徴名をそれら結合クラスのサブセットに割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For detailed information about specifying platform availability, see Declaration Attributes in The Swift Programming Language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プラットホーム利用可能性の指定についての詳細な情報として、宣言属性をThe Swift Programming Languageで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For encoders which don’t support this feature, the default implementation encodes the given object unconditionally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この機能をサポートしないエンコーダに対して、省略時の実装は与えられたオブジェクトを無条件にエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For every change in state, you need to provides updates for both user and sessionExpired in tandem.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>状態におけるすべての変化に対して、あなたはuserとsessionExpiredの両方に対して相前後して更新を提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, 6 is a multiple of 3, because 6 = 23, and zero is a multiple of everything, because 0 = 0*x, for any integer x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、6 は 3 の倍数です、なぜなら 6 = 23なので、そしてゼロはあらゆるものの倍数です、なぜなら 0 = 0*xなので、どんな整数 x に対してもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a country’s Unicode flag character is made up of two regional indicator scalar values that correspond to that country’s ISO 3166-1 alpha-2 code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある国のユニコードの国旗文字は、その国のISO 3166-1 alpha-2コードに対応する２つの地域指定スカラー値から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a function pointer that has the type int (*)(void) in C is imported into Swift as @convention(c) () -&gt; Int32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Cにおけるint (*)(void)型をもつ関数ポインターは、スウィフトに@convention(c) () -&gt; Int32としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a lowercase “e” with an acute accent above it ("é") uses 2 bytes for its UTF-8 representation: 0b11000011 (195) and 0b10101001 (169).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、それの上に鋭アクセントを持つ小文字の“e”（"é"）は、それのUTF-8表現のために２バイト使います：0b11000011（195）と0b10101001（169）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a program can import a C API like the one defined here:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるプログラムはC APIをここで定義されるもののようにインポートできます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its count property in O(1) time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ランダムアクセスのコレクションは、２つのインデックス間の隔たりをO(1)時間で測ることが可能で、それのcountプロパティをO(1)時間で計算できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a random-access collection’s count property is calculated in O(1) instead of requiring iteration of an entire collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、無作為アクセスコレクションのもつcountプロパティは、コレクション全体の反復を要求したりせずにO(1)で計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a rendering engine might display “fl” in English as a connected glyph; inserting the zero width non-joiner would force them to be rendered as disconnected glyphs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるレンダリングエンジンは “fl” を英語において１つの結合される字体として表示するかもしれません；ゼロ幅非接合子を挿入することは、それらを分離した字体それらとして描出される様に強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a seedable generator can be used to generate a repeatable sequence of random values for testing purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、シード可能生成子は、繰り返し可能な一連の無作為値を、テスト目的で生成するために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a type might cache an expensive computed value so that it only needs to calculate it once.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある型は高くつく計算値をキャッシュするかもしれません、それを計算する必要がただ一度だけであるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, after filtering a set of prime numbers to remove any below 10, you can create a new set by using this initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ひとそろいの素数をフィルタして10の前のどんなものも削除した後で、あなたは新しい集合をこのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an ASCII character like the capital letter A is represented by a single element in each of its four views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、大文字のAのようなあるひとつのASCII文字は、それの４つのビューのそれぞれにおいて単一の要素で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an app might recommend multiple different penpals in response to user feedback.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるアプリはユーザのフィードバックに答えて複数の異なる文通友達を勧めるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、UTF-16の後続サロゲートの位置を変換する試みはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte results in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、UTF-8継続バイトの位置を変換しようとする試みは、nilという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an attempt to convert the position of a UTF-8 continuation byte returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、UTF-8の継続バイトの位置を変換する試みはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an attempt to convert the position of the combining acute accent ("\u{0301}") fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、結合文字のアキュートアクセント（"\u{0301}"）の位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair results in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みはnilという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an instance of Int16 can represent the value 500, so the first conversion in the code sample below succeeds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Int16のインスタンスは値500を表せます、それで下のコード例の最初の変換は成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, because UTF-8 and UTF-16 represent high Unicode code points differently, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、UTF-8とUTF-16は高位ユニコードコード点を異なって表すので、UTF-16のサロゲートペアの後続サロゲートの位置を変換する試みは失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, bridging from NSArray to Array&lt;Int&gt; performs such a copy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、NSArrayからArray&lt;Int&gt;へのブリッジは、そのようなコピーを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider Core Foundation’s CFArrayCreateMutable(_:_:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Core FoundationのCFArrayCreateMutable(_:_:_:)関数を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider a C structure named Cake that contains the fields layers and height nested within an unnamed union type, and a field toppings of an unnamed struct type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Cakeと名前を付けられるC構造体を考えてください、それはフィールドlayersおよびheightを無名のunion型内部に入れ子にされて、そしてフィールドtoppingsを無名struct型で含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider a C union named SchroedingersCat that has an isAlive and an isDead field:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、SchroedingersCatと名前を付けられるC共用体を考えてください、それはisAliveとisDeadフィールドを持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider a custom Countdown sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるあつらえのCountdownシーケンスを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider a custom type called ShippingOptions that is an option set of the possible ways to ship a customer’s purchase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ShippingOptionsと呼ばれるあつらえの型を考えてください、それは顧客の購入品を出荷する可能な方法のオプションセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider the removeItem(at:) method from FileManager.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、removeItem(at:)メソッドでFileManagerからのものを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider the following C function declarations:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のC関数定義を考えてみてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider the following Objective-C class and category declarations:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、次のObjective-Cクラスおよびカテゴリ宣言を考えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, consider the sequence "\u{0041}\u{0301}\u{0316}" (LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT, COMBINING GRAVE ACCENT BELOW).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このシーケンス"\u{0041}\u{0301}\u{0316}" (LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT, COMBINING GRAVE ACCENT BELOW) を考えてみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, for a variable root of type T, a key path key of type WritableKeyPath&lt;T, U&gt;, and a value of type U:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、変数rootで型T、キーパスkeyで型WritableKeyPath&lt;T, U&gt;、そしてvalueで型Uに対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, given an eager scan method defined as follows</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のように定義される即時scanメソッドを与えられて</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, given the following C structure:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のC構造体を与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, given the following Objective-C method that performs an operation on the specified class:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、指定されたクラス上である演算を実行する以下のObjective-Cメソッドを与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, given the following Objective-C property declarations:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のObjective-Cプロパティを与えられて：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, here’s an unannotated C function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここに注釈をつけられなかったC関数があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, here’s how to call the vasprintf(_:_:_:) function in Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここにvasprintf(_:_:_:)関数をSwiftにおいて呼び出す方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if a variable has the type Int?, that’s just another way of writing Optional&lt;Int&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある変数が型Int?を持つとすれば、それはOptional&lt;Int&gt;を記述することのありきたりのやり方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if the two year properties are equal but the two month properties are not, the date with the lesser value for month is the lesser of the two dates.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、２つのyearプロパティは等しいけれども２つのmonthプロパティは異なるならば、monthに対してより少ない値を持つ日付は２つの日付のうちより少ないものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if there are parts of your codebase to which you haven't added nullability annotations, now's the time to add them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ヌル可能性注釈を加えてないなあなたのコード基盤の部分があるならば、今こそそれらを加える時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you have a type that represents a local database connection, the code that manages access to that database needs full control over the state of the database as viewed from your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたがローカルデータベース接続を表す型を持つならば、そのデータベースへのアクセスを管理するコードは、データベースの状態すべてわたって完全な制御をあなたのアプリから眺められる際に必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you update the last element of the absences array from 0 to 2, the secondHalf slice is unchanged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたがabsences配列の最後の要素を0から2に更新する場合、secondHalfスライスは変化していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたがある文字列の最初の単語のみを出力したいならば、最初の空白のインデックスを捜して、それからその位置までの下位文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if your array’s elements conform to Comparable, you can call the sort() method without using arguments to sort the elements of your array in ascending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたの配列のもつ要素がComparableに準拠するならば、あなたはsort()メソッドを引数を使うことなく呼び出して、あなたの配列の要素を昇順にソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, in a fixed-width integer type with a bitWidth value of 8, the number -8 has three trailing zeros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、8のbitWidth値を持つ固定長整数型において、数-8は後に続くゼロを３つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has five bits equal to 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、８のbitWidth値を持つ固定長整数型において、数31は1に等しいビットを５つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has three leading zeros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、８のbitWidth値を持つ固定長整数型において、数31は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, in an integer type with a bitWidth value of 8, the number 31 has three leading zeros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、８のbitWidth値を持つ整数型において、数31は３つの先頭のゼロを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, in the ProductCategory type defined here, only \.updateCounter, \.identifier, and \.identifier.name refer to properties with inline, directly addressable storage:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここで定義されるProductCategory型において、\.updateCounter, \.identifier、そして\.identifier.nameだけがインラインに、直接にアドレス指定可能なストレージでのプロパティを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it would be reasonable to implement alternative operations in which operating on a signaling NaN triggers a runtime error or results in a diagnostic for debugging purposes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、それらにおいてはシグナルNaNに関する演算が実行時エラーを引き起こすまたはデバッグ目的の診断という結果になるといった、代替の演算を実装するのが妥当であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, iterating over an instance of PartialRangeFrom&lt;Int&gt; traps when the sequence’s next value would be above Int.max.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、PartialRangeFrom&lt;Int&gt;のインスタンスの全体にわたって反復することは、そのシーケンスの次の値がInt.maxより上となる場合にトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, like every Unicode scalar, the musical fermata symbol (“𝄐”) can be represented in UTF-32 as a single code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、すべてのユニコードスカラーのように、音楽のフェルマータ符号（“𝄐”）はUTF-32において単一のコード単位として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, many Objective-C frameworks expose classes that you are expected to subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、多くのObjective-Cフレームワークは、あなたがサブクラスを作るべき様々なクラスを公開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, passing 1, "two", 3 as arguments to myMirror.descendant(_:_:) is equivalent to:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、1, "two", 3を引数としてmyMirror.descendant(_:_:)に渡すことは、次と同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, passing a closed range with an upper bound of Int.max triggers a runtime error, because the resulting half-open range would require an upper bound of Int.max + 1, which is not representable as</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、完結範囲をInt.maxの上方境界で渡すことは実行時エラーの引き金となります、なぜなら結果の半開範囲はInt.max + 1の上方境界を要求するからです。それはのように表されることができません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, passing an empty range as other triggers a runtime error, because an empty range cannot be represented by a closed range instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、空の範囲をotherとして渡すことは実行時エラーの引き金となります、空の範囲は完結範囲インスタンスによって表現されることができないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose the C function above doesn't retain the CFString object before returning it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、上のC関数がCFStringオブジェクトを、それを返す前にリテインしないと思ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose you have an array holding the number of absences from each class during a session.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたがある学期（２学期制）の各クラスの欠席者数が入った配列を持つと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the CompassDirection enumeration declared in this example conforms to CaseIterable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、この例で定義されるCompassDirection列挙はCaseIterableに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the Counter enumeration defined here has an Int raw value type and gives the first case a raw value of 1:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここで定義されるCounter列挙は、Intの生の値型を持ち、そして最初のケース節に生の値の1を与えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the Float type has an exponentBitCount of 8, which gives an exponent bias of 127 by the calculation above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Float型は、８のexponentBitCountを持ちます、それは127の指数バイアスを上記の計算によって与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the NSJSONReadingOptions option set is imported as JSONSerialization.ReadingOptions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、NSJSONReadingOptionsオプションセットはJSONSerialization.ReadingOptionsとしてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the contains() method on allowedMoves performs a bitwise AND operation to check whether the option set contains an element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、contains()メソドはallowedMoves上で、ビット単位AND演算を実行して、オプションセットがある要素を含むかどうか調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the flag string declared above comprises a single character, but is composed of eight code units when encoded as UTF-8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、上で宣言されるflag文字列はある単一の文字で構成されます、しかしUTF-8としてエンコードされる時は８つのコード単位から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the keys property of a dictionary isn’t an array with its own storage, it’s a collection that maps its elements from the dictionary only when they’re accessed, saving the time and space needed to allocate an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、辞書のkeysプロパティはそれ自身のストレージを持つことになる配列ではありません、それはコレクションです、それはそれの要素らをそれらがアクセスされた時に限り辞書からマップします、そして配列を割り当てるのに必要とされる時間と空間を節約しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the later(_:) method above is comparable to the URLSession class's dataTask(with:completionHandler:) method, which is also asynchronous.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、上のlater(_:)メソッドは、URLSessionクラスのdataTask(with:completionHandler:)メソッドと似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the print(address:as:) function in the following code sample takes an UnsafeMutableRawPointer instance as its first parameter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、print(address:as:)関数は以下のコード例において、UnsafeMutableRawPointerインスタンスをそれの最初のパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the print(address:as:) function in the following code sample takes an UnsafeRawPointer instance as its first parameter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、print(address:as:)関数は以下のコード例において、UnsafeRawPointerインスタンスをそれの最初のパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the printInt(atAddress:) function in the following code sample expects an UnsafeMutablePointer&lt;Int&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、printInt(atAddress:)関数は以下のコード例において、UnsafeMutablePointer&lt;Int&gt;インスタンスをそれの最初のパラメータとして期待します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the printInt(atAddress:) function in the following code sample expects an UnsafePointer&lt;Int&gt; instance as its first parameter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、printInt(atAddress:)関数は以下のコード例において、UnsafePointer&lt;Int&gt;インスタンスをそれの最初のパラメータとして期待します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the sum(_:) function shown here takes an Int array as a parameter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここで示すsum(_:)関数は、Intリテラルをパラメータとしてとります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the Int8 type has a bitWidth value of 8 and can store any integer in the range -128...127.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Int8型は、８のbitWidth値を持ち、範囲-128...127の中の何らかの整数を格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the removeSubrange(_:) method is implemented by calling replaceSubrange(_:with:) with an empty collection for the newElements parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、removeSubrange(_:)メソッドは、replaceSubrange(_:with:)をnewElementsパラメータに対して空のコレクションで呼び出すことによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the Direction type defines an option set for the four directions you can move in a game.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Direction型はオプションセットをあるゲームにおいてあなたが動かせる４つの方向のために定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the log(name:value:) function shown here has an unconstrained generic value parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ここで示すlog(name:value:)関数は、制約のない総称体のvalueパラメータを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the digits() function in the following example creates an iterator over a collection that lazily maps the elements of a Range&lt;Int&gt; instance to strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下の例のdigits()関数は、あるコレクションを覆うイテレータを作成します、それはRange&lt;Int&gt;インスタンスの要素を文字列へと遅延にマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the name of U+FE18 is “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET” (note that “BRACKET” is misspelled).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たとえば、U+FE18 のnameは “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET” です（ “BRACKET” に綴り間違いがあるのに注意してください）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the German letter “ß” (U+00DF LATIN SMALL LETTER SHARP S) becomes “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) when converted to uppercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ドイツ語文字 “ß” (U+00DF LATIN SMALL LETTER SHARP S) は、アッパーケースに変換される場合は “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the character “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) becomes two scalars (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) when converted to lowercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、文字 “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) は、ローワーケースに変換される場合は２つのスカラー (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the code sample below creates a dictionary with string keys and values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、下のコード見本はある辞書を文字列のキーと値で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the contents of a String are logged, as are the components of an NSColor or UIColor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるStringのそれら内容が記録されます、あるNSColorまたはUIColorの構成要素それらのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code declares countLetterChanges(_:_:), a function that finds the number of changes required to change one word or phrase into another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のコードはcountLetterChanges(_:_:)、ある単語または語句を別のものへ変更するのに必要とされる変更の数を見つける関数、を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code provides a binaryString property on every fixed-width integer that represents the number’s binary representation, split into 8-bit chunks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のコードはbinaryStringプロパティをあらゆる固定長整数に関して提供します、それは数のバイナリ表現を、８ビットの塊へと分割して表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code sample creates a Unicode.Scalar instance with a value of "7":</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のコード見本はUnicode.Scalarインスタンスを"7"の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code sample creates a Unicode.Scalar instance with a value of "밥", the Korean word for rice:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のコード見本はUnicode.Scalarインスタンスをコリアン単語での米、"밥"の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code sample creates a Unicode.Scalar instance with a value of an emoji character:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のコード見本はUnicode.Scalarインスタンスをあるemoji文字の値で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following code sample does not compile, because it attempts to use the integer i in a logical context:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下のコードサンプルはコンパイルしません、なぜならそれが整数iを論理的文脈において使おうとするからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following conversions result in nil:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、次の変換はnilという結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the following conversions result in nil:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、以下の変換はnilという結果になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the integer value 1050 can be represented in its entirety as the string “1050”.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、整数値1050はそっくりそのまま文字列「1050」として表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the ligature “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) becomes “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) when converted to titlecase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、合字 “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) は、タイトルケースに変換される場合は “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (\u{1D110}) but requires four code units for its UTF-8 representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（\u{1D110}）ですが４つのコード単位をそれのUTF-8表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the musical fermata symbol (“𝄐”) is a single Unicode scalar value (\u{1D110}) but requires two code units for its UTF-16 representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、音楽のフェルマータ符号（“𝄐”）は単一のユニコードスカラー値（\u{1D110}）ですが２つのコード単位をそれのUTF-16表現のために必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the number -8 has three trailing zeros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、数-8は後に続くゼロを３つ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the output formatting for a JSONEncoder instance can be sorted and can use ample white space at the same time, so it's valid to specify both options in an option set: [.sorted, .prettyPrinted].</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、JSONEncoderインスタンスに対する出力書式設定は、ソート可能です、そして同時に豊富な空白を使用可能です、それでそれは両方のオプションをあるオプションセットにおいて指定することは有効です：[.sorted, .prettyPrinted]。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the parameter passed as value to the printSmileyInfo(_:) function in the example below is an instance of the Smiley class or one of its subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、下の例においてvalueとしてprintSmileyInfo(_:)関数に渡されるパラメータは、Smileyクラスまたはそれのサブクラスの１つのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the result of the failable Int initializer is unconditionally unwrapped in the example below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、この失敗できるIntイニシャライザの結果は、下の例において無条件にアンラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the size of a Double instance is MemoryLayout&lt;Double&gt;.size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、Doubleインスタンスのサイズは、MemoryLayout&lt;Double&gt;.sizeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the special “not a number” value for floating-point types (FloatingPoint.nan) compares as neither less than, greater than, nor equal to any normal floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、浮動小数点型のための特別な「数でない」値（FloatingPoint.nan）は、何らかの通常の浮動小数点値とより少ないでも、より大きいでも、等しいでもないような比較をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the two method calls in this example are equivalent:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、この例での２つのメソッド呼び出しは同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the various “family” emoji are encoded as sequences of man, woman, or child emoji that are interleaved with zero width joiners.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、様々な「家族」絵文字は、一連の男の人、女の人、または子供の絵文字として符号化されます、それらはゼロ幅接合子で綴じられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this Weekday enumeration provides static methods that return a random day of the week:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このWeekday列挙は、無作為な曜日を返す静的メソッドを提供します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this code finds the first letter after the first space:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このコードは最初の空白の後で最初の文字を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this code finds the number of names that are fewer than five characters long:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このコードは長さ５文字より少ない名前の数を見つけ出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this custom Point struct uses the default representation supplied by the standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このあつらえのPoint structは、標準ライブラリによって提供される省略時の表現を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this custom Point struct uses the default representation supplied by the standard library:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このあつらえのPoint structは、標準ライブラリによって提供される省略時の表現を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this hypothetical Date type stores its value as the number of days before or after January 1, 2000:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、この仮説上のDate型は、それの値を2000年１月１日の前または後の日数として格納します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this version of the update(withValue) method will re-copy myStorage on every call:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このバージョンのupdate(withValue)メソッドはmyStorageを全ての呼び出しで再コピーします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to check whether an array contains a particular value, you can pass the value itself to the contains(_:) method when the array’s element conforms to Equatable instead of providing a closure that determines equivalence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある配列がある特定の値を含むかどうか調べるには、あなたはその値自体をcontains(_:)メソッドに渡すことが、その配列の要素がEquatableに準拠する場合には、同等を判定するクロージャを提供する代わりに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to display the last twenty children of a mirror if they can be accessed efficiently, you write the following code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あるミラーの最後の20個の子を表示するにはそれらが効率的にアクセスされるならば、あなたは以下のコードを書きます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to find the key for a particular value in a dictionary, use the firstIndex(where:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、辞書において特定の値に対するキーを見つけるには、firstIndex(where:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある文字列の逆版を得るには、それの文字を逆にして、新しいStringインスタンスをその結果から初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to replace a value stored in a raw pointer p, where U is the current type and T is the new type, use a typed pointer to access and deinitialize the current value before initializing the memory with a new value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、生のポインタpに格納される値を置き換えるには、そこでUは現在の型でTは新しい型です、型付ポインタを使ってアクセスして現在の値をデイニシャライズしてください、新しい値でメモリを初期化する前にです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to retrieve the first word of a longer string, you can search for a space and then create a substring from a prefix of the string up to that point:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたは空白を捜してから、その文字列の前の部分からその地点までの下位文字列を作成できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to retrieve the first word of a longer string, you can search the string for a space and then create a new string from a prefix of the string up to that point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ある長い文字列の最初の単語を取り出すには、あなたはその文字列を空白について調査して、それからその文字列の前の部分からその地点までの新しい文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, to specify a nonnullable pointer to a nullable object reference, use _Nullable id * _Nonnull.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、ヌル可能性オブジェクト参照への非ヌル可能性ポインタを指定するには、_Nullable id * _Nonnullを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, use this initializer to create a string with ten "0" characters in a row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、このイニシャライザを使うことで、10個の"0"文字を１行に持つ文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、PartialRangeFrom範囲式をある配列で使うことは、その下位範囲に範囲式の始まりから配列の終わりまでにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, using the negation operator (prefix -) with Int.min results in a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、否定演算子（-）をInt.minと使うことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when converting a 16-bit value to an 8-bit type, only the lower 8 bits of source are used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、16bit値を8bit型へ変換する場合、sourceの最も下位の8ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when the character é is represented in NFD form, the grapheme base is “e” (U+0065 LATIN SMALL LETTER E) and it is followed by a single grapheme extender, U+0301 COMBINING ACUTE ACCENT.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、文字éがNFD形式で表現されるならば、書記素基底は “e” (U+0065 LATIN SMALL LETTER E) です、そしてそれは後に単一の書記素拡張、U+0301 COMBINING ACUTE ACCENTが続きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, when you pass an instance to the dump(_:_:_:_:) function, a mirror is used to render that instance’s runtime contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたがあるインスタンスをdump(_:_:_:_:)関数に渡す場合、あるミラーがそのインスタンスのもつ実行時の内容を描画するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can add a single element to an array by using a CollectionOfOne instance with the concatenation operator (+):</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは単一の要素を配列へと追加することが、CollectionOfOneインスタンスを連結演算子（+）とともに使うことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can add elements to an array of strings by calling any of the inserting or appending operations that the RangeReplaceableCollection protocol defines.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはいくつかの要素をある配列に加えることが、RangeReplaceableCollectionプロトコルが定義する何らかの挿入または追加を行う演算を呼び出すことによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can also access the first character of text using the first property, which has the value of the first element of the collection, or nil if the collection is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはまたtextの最初の文字にアクセスすることがfirstプロパティを使って行えます、それはコレクションの最初の要素の値、またはコレクションが空ならばnilを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can concatenate the elements of a Range&lt;Int&gt; instance and an integer array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはあるRange&lt;Int&gt;インスタンスとある整数配列とに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can concatenate the elements of an integer array and a Range&lt;Int&gt; instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはある整数配列とあるRange&lt;Int&gt;インスタンスとに属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can concatenate the elements of two integer arrays.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは２つの整数配列に属する要素を連結することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can efficiently test a set for membership of an element or check its intersection with another set:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはある要素の帰属について能率的にテストすること、またはそれの別の集合との交差を調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can iterate over a range of Int and use sequence and collection methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはある範囲のIntのすべてに反復してシーケンスおよびコレクションのメソッドを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can replace an element of an array by using its subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは配列の中のある要素をそれの添え字を使うことによって置き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは0と9の間の数をシャッフルすることが、shuffled()メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは0と9の間の数をシャッフルすることが、shuffled(using:)メソッドをその範囲上で呼び出すことによって可能です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can sort part of a mutable collection by calling the mutable sort() method on a subscripted subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはある可変コレクションの一部分をソートすることが可変sort()メソッドを添え字で指定した下位シーケンス上で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can test whether the first UInt8 value in a string’s UTF-8 encoding is equal to the first UInt32 value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初のUInt8値が、それのユニコードスカラー値での最初のUInt32と等しいかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can test whether the first UInt8 value in a string’s UTF-8 encoding is not equal to the first UInt32 value in its Unicode scalar view:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはある文字列のUTF-8符号化の中の最初のUInt8値が、それのユニコードスカラー値での最初のUInt32と等しくないかどうかを試験できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can use stride(from:to:by:) to iterate over an interval of floating-point values:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはstride(from:to:by:)を使って浮動小数点値のある間隔のすべてにわたって反復できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはshuffle(using:)メソッドを使って、配列の要素を無作為に再配列することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can use this initializer to create a string with ten "ab" strings in a row.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはこのイニシャライザを使うことで、10個の"ab"文字列をひとつの行に持つ文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはこのメソッドを整数からなる配列で使うことで、隣接する同等の項目をフィルタしたり頻度を数えたりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can use this method on an array of numbers to find their sum or product.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはこのメソッドを数値からなる配列で使うことで、それらの合計を見つけるまたは生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you can use this method to call an API that expects a pointer to a different type that is layout compatible with your pointer’s Pointee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはこのメソッドを使うことで、異なる型へのポインタを期待するもので、あなたのポインタのもつPointeeと互換のレイアウトである、あるAPIを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you could create an IntPairs structure that holds a list of two-integer tuples and use an initializer that accepts a KeyValuePairs instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはIntPairs構造体を作成することができます、それは２整数のタプルのリストを保持して、KeyValuePairsインスタンスを受け入れるイニシャライザを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you create an empty Set instance with either this initializer or with an empty array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは空のSetインスタンスを、このイニシャライザでまたは空の配列リテラルでのどちらかで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might replace an Objective-C constant with a Swift constant that's nested inside a containing Swift type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはObjective-C定数を、含んでいるSwift型の内部に入れ子にされるSwift定数と置き換えるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might typically use a for-in loop to print each of the elements in an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは概してfor-inループを使って、ある配列の中の各要素を出力するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might want to create an array with the integers from 1 through 7.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたは配列を１から７までの整数で作成したいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, “i” is soft dotted because the dot disappears when adding an accent mark, as in “í”.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>たとえば、 “i” は、ソフトドットを持ちます、なぜならそのドットはアクセント符号を、“í” でのように、加えられる時に見えなくなるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, “ϰ” (U+03F0 GREEK KAPPA SYMBOL) is considered a both mathematical symbol and a letter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、 “ϰ” (U+03F0 GREEK KAPPA SYMBOL) は、数学シンボルと表音文字の両方にみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For extensible floating-point types, significandBitCount should be the maximum allowed significand width (without counting any leading integral bit of the significand).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>拡張可能な浮動小数点型に対して、significandBitCountは許される最大仮数幅であるべきです（全く仮数の先頭整数ビットを数えることなく）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For fixed-width floating-point types, this is the actual number of fractional significand bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>固定長浮動小数点型に対して、これは小数部仮数ビットの実際の数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For formats which don’t support this feature, the default implementation encodes the given object unconditionally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この機能性をサポートしない形式に対して、省略時の実装は与えられたオブジェクトを無条件にエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For information about key-path expressions, see Key-Path Expression in The Swift Programming Language (Swift 4.1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパス式についての情報として、キーパス式をSwiftプログラミング言語 (Swift 4.1)で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instances of NSDictionary that are already immutable, copy(with:) usually returns the same dictionary in O(1) time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すでに可変のNSDictionaryのインスタンスに対しては、copy(with:)は通常同じ辞書をO(1)時間で返します；そうでなければ、このコピー性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instances of NSSet that are already immutable, copy(with:) returns the same set in constant time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>元から不変であるNSSetのインスタンスに対しては、copy(with:)は同じ集合を定数時間で返します；そうでなければ、コピーすることの性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instances of NSArray that are already immutable, copy(with:) usually returns the same array in O(1) time; otherwise, the copying performance is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>元から不変であるNSArrayのインスタンスに対しては、copy(with:)は大抵は同じ配列をO(1)時間で返します；そうでなければ、コピーする性能は不定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For integer types, any remainder of the division is discarded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数型に対して、除算の余りは何であれ破棄されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー演算子を使う算術についてさらには、オーバーフロー演算子をSwiftプログラミング言語で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more detail, see the documentation for the APIs used by each platform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細として、各プラットホームで使われるAPIの文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about index invalidation in mutable collections, see the reference for the MutableCollection and RangeReplaceableCollection protocols, as well as for the specific type you’re using.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変コレクションにおけるインデックス無効化についてのさらなる情報は、MutableCollectionおよびRangeReplaceableCollectionプロトコルに対してのリファレンスを見てください、もちろんあなたが使っている特定の型に対しても。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about operation declarations, see Operator Declaration in The Swift Programming Language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子宣言についての更なる情報として、演算子宣言をSwiftプログラミング言語で見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about the Unicode terms used in this discussion, see the Unicode.org glossary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この解説において使われるユニコード用語についてのさらなる情報は、Unicode.org用語集を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about the available rounding rules, see the FloatingPointRoundingRule enumeration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>利用可能な丸め規則についてのさらなる情報として、FloatingPointRoundingRule列挙を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about using arrays, see Array and ArraySlice, with which ContiguousArray shares most properties and methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の使用についてのさらなる情報は、ArrayとArraySliceを見てください、それらとContiguousArrayはほとんどのプロパティとメソッドを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about using arrays, see Array and ContiguousArray, with which ArraySlice shares most properties and methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の使用についてのさらなる情報として、ArrayとContiguousArrayを見てください、それらとArraySliceはほとんどのプロパティとメソッドを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Objective-C and C Code Customization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細は、Objective-CとCコードのカスタム化を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, see Ownership Policy in Memory Management Programming Guide for Core Foundation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>更なる情報のために、Ownership PolicyをMemory Management Programming Guide for Core Foundationで見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For most numbers x, this is the difference between x and the next greater (in magnitude) representable number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ほとんどの数xに対して、これはxと次の（規模における）より大きい表現可能な数との間の差異です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For most purposes, the ManagedBuffer class works fine for this purpose, and can simply be used on its own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ほとんどの用途に対して、ManagedBufferクラスはこの目的のためにすぐれて機能します、そして簡単に単独で使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For operations that require adding or removing elements, see the RangeReplaceableCollection protocol instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の追加や削除を要求する演算に対しては、RangeReplaceableCollectionプロトコルを代わりに見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For ordinary sets, an element equal to member if member is contained in the set; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>普通の集合に対して、memberに等しい要素、もしmemberが集合に含まれているならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For ordinary sets, an element equal to newMember if the set already contained such a member; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>普通の集合に対して、集合がすでにそのようなメンバを含んでいるならば、newMemberに等しい要素；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For other collections the counters may be out of range or of the wrong type to use as an index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のコレクションに対してこれらのカウンタは、インデックスとして使うのには範囲外または間違った型になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For other values of x, x.significand is defined as follows:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別の値xに対して、x.significandは次のように定義されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For performance reasons, the size of the newly allocated storage might be greater than the requested capacity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>性能上の理由から、新しく割り当てられたストレージは要請された容量より大きいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For pointers to untyped, raw memory, the following mappings apply:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型無しの、生のメモリへのポインタに対して、以下のマッピングを適用します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For return types, variables, and arguments, the following mappings apply:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り型、変数、そして引数のために、以下のマッピングが適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For sets where the set type and element type are the same, like OptionSet types, this method returns any intersection between the set and [member], or nil if the intersection is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>OptionSet型など、集合型と要素型が同じであるところの集合に対して、このメソッドは集合と[member]の間の何らかの交叉、または交叉が空ならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For sets where the set type and element type are the same, like OptionSet types, this method returns any intersection between the set and [newMember], or nil if the intersection is empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>OptionSet型など、集合型と要素型が同じであるところの集合に対して、このメソッドは集合と[newMember]の間の何らかの交叉、または交叉が空ならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For signed integer types, this value is (2 ** (bitWidth - 1)) - 1, where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数型に対して、この値は(2 ** (bitWidth - 1)) - 1です、そこで**は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For signed integer types, this value is -(2 ** (bitWidth - 1)), where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数型に対して、この値は-(2 ** (bitWidth - 1))です、そこで**は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For signed integer types, this value is -(2 ** (bitWidth - 1)), where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数型に対して、この値は-(2 ** (bitWidth - 1))です、そこで**は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For signed integer types, this value is (2 ** (bitWidth - 1)) - 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数型に対して、この値は(2 ** (bitWidth - 1)) - 1です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば整数および他の構造体のような単純な型にとって、これは、あなたがある配列の中のある値を変更する場合、その要素の値はその配列の何らかのコピーにおいては変化しないことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For structs whose stored properties are all Hashable, and for enum types that have all-Hashable associated values, the compiler is able to provide an implementation of hash(into:) automatically.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの格納プロパティが全てHashableであるstructに対して、そして全てHashable関連値を持つenum型に対して、コンパイラはhash(into:)の実装を自動的に提供可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For such scalars, this property will be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようなスカラーに対して、このプロパティは nil です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the ShippingOptions declaration, see the OptionSet protocol discussion.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ShippingOptions宣言については、OptionSetプロトコル解説を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the inherited methods to work properly, conforming types must meet the following axioms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承されたメソッドを適切に働かせるためには、準拠する型は以下の原則に応じる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, imported Objective-C types frequently use AnyObject as the type for properties, method parameters, and return values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この理由から、インポートされたObjective-C型はしばしばAnyObjectをプロパティ、メソッドパラメータ、そして戻り値の型として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, the first operation that uses the contents of the dictionary may take O(n).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この理由のために、辞書の内容を使う最初の演算はO(n)をとるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this reason, you should almost never need to use a bridged reference type directly in your own code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この理由のために、あなたはブリッジ参照型を直接にあなた自身のコードにおいて使う必要はほとんどないはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two finite values x and y, the remainder r of dividing x by y satisfies x == y * q + r, where q is the integer nearest to x / y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの有限値xとyに対して、xをyで割った余りrはx == y * q + rを満足させます、ここでqはx / yに最も近い整数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two integers a and b, a is a multiple of b if there exists a third integer q such that a = qb.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの整数aとbに対して、aはbの倍数です、もし第３の整数qが存在して、 a = qbであるようなところでは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two tuples to compare as equal, each corresponding pair of components must be equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプルが等しいと比較されるには、対応する構成要素同士がそれぞれ等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and d, the result of a x.advanced(by: d) is equal to x + d—a new value y such that x.distance(to: y) approximates d.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとdに対して、x.advanced(by: d)の結果はx + dに等しいです—新しい値yは、x.distance(to: y)がdの近似です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and y, and a distance n = x.distance(to: y), x.advanced(by: n) == y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとy、そして隔たりn = x.distance(to: y)に対して、x.advanced(by: n) == y。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and y, the result of maximum(x, y) is x if x &gt; y, y if x &lt;= y, or whichever of x or y is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとyに対して、maximum(x, y)の結果はx &gt; yならばx、x &lt;= yならばy、または他のものがクワイエットNaNならばxかyどちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and y, the result of maximumMagnitude(x, y) is x if x.magnitude &gt; y.magnitude, y if x.magnitude &lt;= y.magnitude, or whichever of x or y is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとyに対して、maximumMagnitude(x, y)の結果は、x.magnitude &gt; y.magnitudeならばx、x.magnitude &lt;= y.magnitudeならばy、または他のものがクワイエットNaNならばxかyどちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and y, the result of minimum(x, y) is x if x &lt;= y, y if y &lt; x, or whichever of x or y is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとyに対して、minimum(x, y)の結果はx &lt;= yならばx、y &lt; xならばy、または他のものがクワイエットNaNならばxかyどちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and y, the result of minimumMagnitude(x, y) is x if x.magnitude &lt;= y.magnitude, y if y.magnitude &lt; x.magnitude, or whichever of x or y is a number if the other is a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとyに対して、minimumMagnitude(x, y)の結果はx.magnitude &lt;= y.magnitudeならばx、y.magnitude &lt; x.magnitudeならばy、または他のものがクワイエットNaNならばxかyどちらか数である方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For two values x and y, the result of x.distance(to: y) is equal to y - x—a distance d such that x.advanced(by: d) approximates y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値xとyに対して、x.distance(to: y)の結果はy - xに等しいです—隔たりdは、x.advanced(by: d)がyの近似です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For unsigned integer types, this value is (2 ** bitWidth) - 1, where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なし整数型に対して、この値は(2 ** bitWidth) - 1です、そこで**は冪演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For unsigned integer types, this value is always 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なし整数型に対して、この値は常に0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For value equality, see the equal-to operator (==) and the Equatable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の同等性については、同等演算子（==）そしてEquatableプロトコルを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For value inequality, see the not-equal-to operator (!=) and the Equatable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の不等性については、不等演算子（!=）そしてEquatableプロトコルを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For values x and y and their truncated integer quotient q, the remainder r satisfies x == y * q + r.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値xとyおよび切り捨てられる整数指数qに対して、余りrはx == y * q + rを満足させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For your type to automatically receive default implementations for set-related operations, the rawValue property must be of a type that conforms to the FixedWidthInteger protocol, such as Int or UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型が自動的に省略時の実装をセット関連の演算に対して受け取るようにするには、rawValueプロパティは、FixedWidthIntegerプロトコルに準拠する型の１つでなければなりません、例えばIntまたはUInt8など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fortify your code with runtime checks, and examine your values' runtime representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコードを実行時チェックで強化し、そしてあなたの値の実行時表現を検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Forward declarations of Swift classes and protocols can be used only as types for method and property declarations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftのクラスとプロトコルの前方宣言は、メソッドおよびプロパティ宣言に対する型としてのみ使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foundation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファウンデーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foundation classes often declare enumeration or constant types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Foundationクラスは、しばしば列挙や定数型を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Framework</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フレームワーク</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From Protocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>由来プロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Function</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions that use a TextOutputStream target may call write(_:) multiple times per writing operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>TextOutputStreamターゲットを使う関数は、write(_:)を書き込み操作のたびに複数回呼び出すでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fundamental data types such as Int, Double, and String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基本的なデータ型、Int、Double、そしてStringなど</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further modifications to numbers are made in place, while the two copies continue to share the original storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>numbersへの以降の修正は、そこでなされます、一方２つのコピーは元々のストレージの共有を続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally, a Character instance matches what the reader of a string will perceive as a single character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般的に、あるCharacterインスタンスがマッチするのは、ある文字列の読み手が単一の文字と知覚するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally, native Swift types that do not contain strong or weak references are trivial, as are imported C structs and enums.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照を含まないものは自明です、インポートされたCのstructとenumのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enumerations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接参照を含まないものは自明です、インポートされたCの構造体と列挙のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enums.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一般に、生粋のSwift型で強いまたは弱い参照または他形式の間接参照を含まないものは自明です、インポートされたCのstructとenumのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generates a default mirror for all ancestor classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての先祖クラスに対して省略時のミラーを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generating Random Binary Data</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為なバイナリデータを生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic Instance Method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>総称体インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic Type Alias</seg>
      </tuv>
      <tuv lang="JA">
        <seg>総称体型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of this unmanaged reference as a managed reference and consumes an unbalanced retain of it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この管理されない参照の値を管理された参照として取得します、そしてそれのある不均衡なリテイン（保持）を使い果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gets the value of this unmanaged reference as a managed reference without consuming an unbalanced retain of it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この管理されない参照の値を管理された参照として取得します、それのある不均衡なリテイン（保持）を使い果たすことなしにです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting C Strings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C文字列を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Characters and Bytes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字とバイトを取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting Substrings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列を取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting a dictionary’s value using a key returns an optional value, so imagePaths["star"] has type Optional&lt;String&gt; or, written in the preferred manner, String?.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の持つ値をあるキーを使って取得することはあるオプショナル値を返します、それでimagePaths["star"]は型Optional&lt;String&gt;または、より好ましい流儀で書かれて、String?を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting an Offset Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オフセット値の取得</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting and Setting Dictionary Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の値の取得と設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given two tuples (a1, a2, ..., aN) and (b1, b2, ..., bN), the first tuple is after or the same as the second tuple if and only if a1 &gt; b1 or (a1 == b1 and (a2, ..., aN) &gt;= (b2, ..., bN)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプル(a1, a2, ..., aN)と(b1, b2, ..., bN)を与えられて、最初のタプルが２番目のタブルより後かそれと同じであるのは、a1 &gt; b1または(a1 == b1および(a2, ..., aN) &gt;= (b2, ..., bN))である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given two tuples (a1, a2, ..., aN) and (b1, b2, ..., bN), the first tuple is after the second tuple if and only if a1 &gt; b1 or (a1 == b1 and (a2, ..., aN) &gt; (b2, ..., bN)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプル(a1, a2, ..., aN)と(b1, b2, ..., bN)を与えられて、最初のタプルが２番目のタブルより後であるのは、a1 &gt; b1または(a1 == b1および(a2, ..., aN) &gt; (b2, ..., bN))である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given two tuples (a1, a2, ..., aN) and (b1, b2, ..., bN), the first tuple is before or the same as the second tuple if and only if a1 &lt; b1 or (a1 == b1 and (a2, ..., aN) &lt;= (b2, ..., bN)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプル(a1, a2, ..., aN)と(b1, b2, ..., bN)を与えられて、最初のタプルが２番目のタブルより前かそれと同じであるのは、a1 &lt; b1または(a1 == b1および(a2, ..., aN) &lt;= (b2, ..., bN))である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given two tuples (a1, a2, ..., aN) and (b1, b2, ..., bN), the first tuple is before the second tuple if and only if a1 &lt; b1 or (a1 == b1 and (a2, ..., aN) &lt; (b2, ..., bN)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプル(a1, a2, ..., aN)と(b1, b2, ..., bN)を与えられて、最初のタプルが２番目のタブルより後であるのは、a1 &lt; b1または(a1 == b1 and (a2, ..., aN) &lt; (b2, ..., bN))である場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global Numeric Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>グローバルな数値関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global functions such as print(_:separator:terminator:) and abs(_:)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>グローバル関数、例えばprint(_:separator:terminator:)およびabs(_:)など</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Greater than</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より大きい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Greater than or equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より大きいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Greek iota subscript only (U+0345 COMBINING GREEK YPOGEGRAMMENI).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ギリシャ語下付き文字イオタのみ (U+0345 COMBINING GREEK YPOGEGRAMMENI)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Grouping Related Objective-C Constants</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連するObjective-C定数をグループにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Growing the Size of an Array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の大きさの増大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Half-open range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handle Exceptions in Objective-C Only</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cにだけしかない例外を処理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handling Cocoa Errors in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CocoaエラーをSwiftにおいて処理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Handling Dynamically Typed Methods and Objects in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的に型付メソッドとオブジェクトをSwiftにおいて取り扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash values are not guaranteed to be equal across different executions of your program.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハッシュ値は、あなたのプログラムの異なる実行をまたいで等しいことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hashes the essential components of this value by feeding them into the given hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の本質的な構成要素を、それらをその与えられたhasherへと与える事によって、ハッシュ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hashing a value means feeding its essential components into a hash function, represented by the Hasher type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値をハッシュ化することは、それの本質的な構成要素を、Hasher型によって表される、ハッシュ関数へと投入することを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here a default path is supplied for an image that is missing from imagePaths.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで省略時のパスは、imagePathsから見つからない画像に対して提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how Swift imports the related functions above into a single type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、Swiftが上での関連した関数をある単一の型へとインポートする方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how the TrafficLightColor type is imported to Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、TrafficLightColor型がSwiftへとインポートされる方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how the UIViewAutoresizing type is imported to Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、UIViewAutoresizing型がSwiftへとインポートされる方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how you handle the same error in Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、あなたが同じエラーをSwiftで処理する方法があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, a set of strings is created from an array literal holding only strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、文字列の集合が文字列のみを保持する配列リテラルから作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, a set of strings is created from an array literal holding only strings:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、文字列の集合が文字列のみを保持する配列リテラルから作成されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, an array of strings is created from an array literal holding only strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、文字列からなる配列が、文字列だけを保持している配列リテラルから作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, an array of strings is created from an array literal holding only strings:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、文字列の配列が、文字列だけを保持する配列リテラルから作成されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the assignment to destBytes creates a new, nonowning buffer pointer covering the first n bytes of the memory that someBytes references—nothing is copied:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、destBytesへの割り当ては、someBytesが参照するメモリの最初のnバイトを変換して、新しい、非所有のバッファポインタを作成します — コピーされるものは何もありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the assignment to destBytes creates a new, nonowning buffer pointer covering the first n bytes of the memory that someBytes references—nothing is copied:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、destBytesへの割り当ては、someBytesが参照するメモリの最初のnバイトを変換して、新しい、非所有のバッファポインタを作成します — コピーされるものは何もありません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the value for the key "Coral" is updated from 16 to 18 and a new key-value pair is added for the key "Cerise".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、キー"Coral"に対する値が16から18に更新され、そして新しいキー値ペアがキー"Cerise"に対して加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, three elements in the middle of an array of integers are replaced by the five elements of a Repeated&lt;Int&gt; instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここでは、整数からなるある配列の真ん中の３つの要素がRepeated&lt;Int&gt;インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, we find the length of the first sentence and create an uppercase version.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここで、私たちは最初の文の長さを見つけます、そして大文字バージョンを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s a definition of a Countdown sequence that serves as its own iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにCountdownシーケンスの定義があります、それはそれ自身イテレータとしての務めを果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of a type that declares the minimal requirements for a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにある型の例があります、それはあるコレクションのための最小限の要件を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of accessing the first character in a string through its subscript:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにあるのはある文字列の最初の文字にそれの添え字を通してアクセスする例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of checking whether each code unit in a string’s utf16 view is a lead surrogate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、ある文字列のもつutf16ビューの中の各コード単位が先頭サロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of checking whether each code unit in a string’s utf16 view is a trailing surrogate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、ある文字列のもつutf16ビューの中の各コード単位が後続サロゲートを持つかどうか調べる例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of creating a set and an array using array literals:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに配列リテラルを使って集合と配列を作成する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of creating an array initialized with five strings containing the letter Z.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、字Zを含んでいる５つの文字列で初期化される配列を作成する例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of how you handle an error when calling a method in Objective-C:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、メソッドをObejctive-Cにおいて呼び出す時に、あなたがエラーを処理する方法の例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of inserting a range of integers into an array of the same type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに整数の範囲を同じ型の配列へ挿入する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of sorting a list of students’ names.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、生徒名のリストをソートする例があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of the number -8.5 represented as an instance of the Double type, which defines a radix of 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにDouble型のあるインスタンスとして表される数-8.5の例があります、それは２の基数を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example of transforming a string to all lowercase letters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、ある文字列を小文字の文字に変換する例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example that finds a student name that begins with the letter “A”:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、文字「A」で始まる生徒名を見つける例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an example that sorts the first half of an array of integers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにある例があります、それは整数からなるある配列の前半分をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an implementation of the reduce1(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにreduce1(_:)メソッドの実装があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s an implementation of those steps:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにこれらの手順の実装があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s how Swift imports them:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにどのようにスウィフトがそれらをインポートするかがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s how to find the longest string in a sequence, using the animals array introduced earlier as an example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに最も長い文字列をあるシーケンスの中で見つける方法があります、前に導入されたanimals配列を例として使っています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s how you can catch any XMLParsingError errors thrown by the parse(_:) function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにあるのは、あなたがparse(_:)関数によってスローされる何らかのXMLParsingErrorエラーを捕まえる方法です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s how you would create a dictionary of HTTP response codes and their related messages:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにあるのは、あなたがHTTP応答コードとそれらの関連メッセージの辞書を作成する方法です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the Swift version of those declarations when you import them:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここに、あなたがそれらをインポートする場合のSwiftバージョンのそれら宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the definition for IntegerRef and the == function that makes it conform to Equatable:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにIntegerRefとそれをEquatableに準拠させる==関数の定義があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the initial declaration of the GridPoint type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにGridPoint型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the initial declaration of the StreetAddress type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ここにStreetAddress型の初期宣言があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal digits include 0-9, Latin letters a-f and A-F, and their fullwidth compatibility forms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>16進法桁は、0-9、Latin文字 a-f および A-F、そしてそれらの全角互換形式を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, count may be zero even for a non-nil start.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、countは非nil startに対してでさえもゼロでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, count may be zero even for a non-nil start.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、countは非nilのstartに対してもゼロであるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, a buffer can have a count of zero even with a non-nil base address.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、バッファはゼロのcountを非nilに基づくアドレスでも持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, because the Any type can refer to any type, a downcast to a more specific type isn't guaranteed by the compiler to succeed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、Any型がどんな型でも参照できることから、より具体的な型へのダウンキャストはコンパイラによって成功することが保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if a forced downcast fails, a runtime error is triggered:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、強制型キャストが失敗するならば、実行時エラーが引き起こされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、２つの配列が同じオブジェクトへの参照を含むならば、あなたは両方の配列からそのオブジェクトの持つプロパティへの変更を観察するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたが19をrhsとして渡すならば、このメソッドは最初にrhsを3にビットマスクして、それからそのマスクされた値をビット数として使うことでlhsをシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if you use 19 as rhs, the operation first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたが19をrhsとして使うならば、この演算は最初にrhsを3にビットマスクして、それからそのマスクされた値をビット数として使うことでlhsをシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if you use 8 as the shift amount, the method first masks the shift amount to zero, and then performs the shift, resulting in no change to the original value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたが8をシフト量として使うならば、メソッドは最初にそのシフト量をマスクしてゼロにして、それからシフトを実行して、元の値に対して変更しないという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in cases where objects of various different classes must serve as storage, ManagedBufferPointer is needed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、種々の異なるクラスのオブジェクトがストレージとして供されなければならない場合には、ManagedBufferPointerが必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in optimized builds (-O), no check is performed to ensure that the current instance actually has a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、最適化ビルド（-O）において、現在のインスタンスが実際に値を持つか確かめる確認は全く実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in order to meet the complexity guarantees of a random-access collection, either the index for your custom type must conform to the Strideable protocol or you must implement the index(_:offsetBy:) and distance(from:to:) methods with O(1) efficiency.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、無作為アクセスコレクションの計算量（複雑さ）保証を達成する手段として、あなたのあつらえの型に対するインデックスがStrideableプロトコルに準拠する、またはあなたがindex(_:offsetBy:)とdistance(from:to:)メソッドをO(1)の効率で実装する、いずれかをしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, initializing another collection with an UnsafeMutableBufferPointer instance copies the instances out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、別のコレクションをUnsafeMutableBufferPointerインスタンスで初期化することは、インスタンスを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, initializing another collection with an UnsafeRawBufferPointer instance copies bytes out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、別のコレクションをUnsafeRawBufferPointerインスタンスで初期化することは、バイトを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, initializing another collection with an UnsafeMutableRawBufferPointer instance copies bytes out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、別のコレクションをUnsafeMutableRawBufferPointerインスタンスで初期化することは、バイトを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, initializing another collection with an UnsafeBufferPointer instance copies the instances out of the referenced memory and into the new collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、別のコレクションをUnsafeBufferPointerインスタンスで初期化することは、インスタンスを参照されたメモリから外へそして新しいコレクションへとコピーします、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, macros can make debugging and refactoring difficult.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかし、マクロはデバッグやリファクタリングを難しくすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたがクラス継承で構築できる種類の継承階層はまた、プロトコル継承と構造体を使ってモデル化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the type of a function, method, or closure always includes a return type, which is Void if otherwise unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、関数、メソッド、またはクロージャは、常に戻り型を含みます、それは指定されないならばVoidです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the underlying hash algorithm is designed to exhibit avalanche effects: slight changes to the seed or the input byte sequence will typically produce drastic changes in the generated hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、基礎をなすハッシュアルゴリズムは、雪崩効果を示すように設計されます：そのシードまたは入力バイト列に対するわずかな変更は、概して生成されたハッシュ値に徹底的な変化を生じさせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, there’s no safe way to recover from Objective-C exceptions in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、スウィフトにはObjective-C例外から回復する安全な方法はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, they're inaccessible at compile time and don't appear in the generated header for a framework target.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、それらはコンパイル時にはアクセス不可能です、そしてフレームワークターゲットに対する生成ヘッダの中に現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identical</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identical to self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfと同一。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ideographic description characters are technically printable characters, but advanced rendering engines may use them to approximate ideographs that are otherwise unrepresentable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表意文字記述文字は技術的には印刷に適した文字です、しかし先進のレンダリングエンジンは、それを使うことでそうしなければ表現できない表意文字の近似を得るかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areEquivalent(a, b)とareEquivalent(b, c)が両方ともtrueならば、そのときareEquivalent(a, c)もまたtrueである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areInIncreasingOrder(a, b)とareInIncreasingOrder(b, c)が両方ともtrueならば、そのときareInIncreasingOrder(a, c)もまたtrueである。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withCString(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithCString(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withCString(encodedAs:_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithCString(encodedAs:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If cString contains ill-formed UTF-8 code unit sequences, this initializer replaces them with the Unicode replacement character ("\u{FFFD}").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cStringが文法的に正しくないUTF-8コードユニットシーケンスを含むならば、それらをある代替文字（"\u{FFFD}"）で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If codeUnits is an ill-formed code unit sequence, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>codeUnitsが文法的に正しくないコード単位シーケンスを含むならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If description is in an invalid format, or if the value it denotes in base 10 is not representable, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>descriptionが無効な形式になっているならば、またはそれが底10で示す値が表現可能でないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If distance &gt; 0, limit has no effect if it is less than i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distance &gt; 0ならば、limitはそれがiより少ないならば効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If distance &gt; 0, limit should be greater than i to have any effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distance &gt; 0ならば、limitが何らかの効果を持つにはiより大きくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If distance &gt; 0, a limit that is less than i has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distance &gt; 0ならば、iより少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If end is equal to start, the result is zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endがstartに等しいならば、結果はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseならば、このコレクション中の連続するseparator要素の対それぞれに、そしてコレクションの始めと終わりのseparatorインスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseならば、このシーケンス中の連続するseparator要素の対それぞれに、そしてシーケンスの始めと終わりのseparatorインスタンスそれぞれに、１つの空の下位シーケンスが結果において返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseならば、結果においてisSeparator述部を満たす隣接する要素のペアそれぞれに対しておよびisSeparator述部を満たすコレクションの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseならば、結果においてisSeparator述部を満たす隣接する要素のペアそれぞれに対しておよびisSeparator述部を満たすシーケンスの始まりまたは終わりでの要素それぞれに対して１つの空の下位シーケンスが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If i &gt; c.startIndex &amp;&amp; i &lt;= c.endIndex c.index(after: c.index(before: i)) == i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>i &gt; c.startIndex &amp;&amp; i &lt;= c.endIndexならばc.index(after: c.index(before: i)) == i。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If i &gt;= c.startIndex &amp;&amp; i &lt; c.endIndex, c.index(before: c.index(after: i)) == i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>i &gt;= c.startIndex &amp;&amp; i &lt; c.endIndexならば、c.index(before: c.index(after: i)) == i。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If i is equal to the string’s end index, this methods appends newElement to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iが文字列の末尾インデックスと等しいならば、このメソッドはnewElementを文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If i is equal to the string’s end index, this methods appends the contents of newElements to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iが文字列の末尾インデックスと等しいならば、このメソッドはnewElementsの内容を文字列へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If instance conforms to the CustomDebugStringConvertible protocol, the result is instance.debugDescription.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>instanceが準拠するのがCustomDebugStringConvertibleプロトコルならば、結果はinstance.debugDescriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If instance conforms to the CustomStringConvertible protocol, the result is instance.description.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>instanceが準拠するのがCustomStringConvertibleプロトコルならば、結果はinstance.descriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If instance conforms to the TextOutputStreamable protocol, the result is obtained by calling instance.write(to: s) on an empty string s.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>instanceが準拠するのがTextOutputStreamableプロトコルならば、結果はinstance.write(to: s)を空の文字列s上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If isRepairing is false and an ill-formed sequence is detected, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isRepairingがfalseで誤形式シーケンスが検出されるならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maxSplits + 1の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元コレクションの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maxSplits + 1の下位シーケンスが返されるならば、最後のものは、残りの要素を含んでいる元シーケンスの後ろ部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If n &gt; 0, a limit that is less than i has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>n &gt; 0ならば、iより少ない限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If newMember is not contained in the set but subsumes current members of the set, the subsumed members are returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>newMemberがこの集合の中に含まれないしかしこの集合の現在の要素を包含するならば、包含されたメンバが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If other can’t be represented as an instance of Double without rounding, the result of this initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherがDoubleのインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If other can’t be represented as an instance of Float80 without rounding, the result of this initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherがFloat80のインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If other can’t be represented as an instance of Float without rounding, the result of this initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherがFloatのインスタンスとして表されることが丸めることなしには可能でないならば、このイニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If other is nil, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherがnilならば、結果は、nilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If predicate matches every element in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateがシーケンスの中のすべての要素に合致するならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If predicate matches every element in the sequence, the resulting sequence contains every element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateがシーケンスの中のすべての要素に合致するならば、結果のシーケンスはそのシーケンスのすべての要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If source contains no elements, the returned index is equal to the buffer’s startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceが全く要素を含まないならば、返されるインデックスはバッファの持つstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If source is outside the bounds of this type after rounding toward zero, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceがゼロへの丸め後にこの型の境界の外側ならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If starts is nil, count must be zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startsがnilならば、countはゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If subject conforms to the CustomDebugStringConvertible protocol, the result is subject.debugDescription.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subjectが準拠するのがCustomDebugStringConvertibleプロトコルならば、結果はsubject.debugDescriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If subject conforms to the CustomStringConvertible protocol, the result is subject.description.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subjectが準拠するのがCustomStringConvertibleプロトコルならば、結果はsubject.descriptionです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If subject conforms to the TextOutputStreamable protocol, the result is obtained by calling subject.write(to: s) on an empty string s.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subjectが準拠するのがTextOutputStreamableプロトコルならば、結果はsubject.write(to: s)を空の文字列s上で呼び出すことによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If subject is a class instance, ancestorRepresentation determines whether ancestor classes will be represented and whether their customMirror implementations will be used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subjectがクラスインスタンスであるならば、ancestorRepresentationは、先祖クラスが表現されるかどうかをそしてcustomMirror実装が使われるかどうかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If text is in an invalid format or contains characters that are out of bounds for the given radix, or if the value it denotes in the given radix is not representable, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>text が無効な形式になっているか指定radixの領域外の文字列を含むならば、または指定radixにおいてそれが意味する値が表現可能でないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If true, newline characters and character combinations are stripped from the result; otherwise, newline characters or character combinations are preserved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueならば、改行文字および文字組み合わせは結果から剥ぎ取られます；そうでなければ、改行文字および文字組み合わせは保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If true, the set’s buffer capacity is preserved; if false, the underlying buffer is released.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueならば、集合が持つバッファ容量を維持します；falseならば基盤をなすバッファは解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If userPrefs[greetingKey] has a value, that value is assigned to greeting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>userPrefs[greetingKey]が値を持つならば、その値はgreetingに割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is +/-infinity or NaN, then x.exponent is Int.max</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが+/-infinityまたはNaNならば、そのときx.exponentはInt.maxです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is 10, x.significand is 1.01 in binary, so x.significandWidth is 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが10ならば、x.significandは２進数で1.01です、それでx.significandWidthは２です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is -greatestFiniteMagnitude, then x.nextDown is -infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが-greatestFiniteMagnitudeならば、そのときx.nextDownは-infinityです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is -infinity, then x.nextUp is -greatestFiniteMagnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが-infinityならば、そのときx.nextUpは-greatestFiniteMagnitudeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is -leastNonzeroMagnitude, then x.nextUp is -0.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが-leastNonzeroMagnitudeならば、そのときx.nextUpは-0.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is greatestFiniteMagnitude, then x.nextUp is infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがgreatestFiniteMagnitudeならば、そのときx.nextUpはinfinityです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is infinity, then x.nextDown is greatestFiniteMagnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがinfinityならば、そのときx.nextDownはgreatestFiniteMagnitudeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is leastNonzeroMagnitude, then x.nextDown is 0.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがleastNonzeroMagnitudeならば、そのときx.nextDownは0.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is Float.pi, x.significand is 1.10010010000111111011011 in binary, and x.significandWidth is 23.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがFloat.piならば、x.significandは２進数で1.10010010000111111011011です、それでx.significandWidthは23です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is NaN, then x.significand is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがNaNならば、そのときx.significandはNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is infinity, then x.significand is 1.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが無限大ならば、そのときx.significandは1.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is not a finite number, then x.ulp is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが有限数でないならば、そのときx.ulpはNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is very small in magnitude, then x.ulp may be a subnormal number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xが規模において非常に小さいならば、x.ulpはサブノーマル数かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is zero, then x.exponent is Int.min.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがゼロならば、そのときx.exponentはInt.minです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is zero, then x.nextDown is -leastNonzeroMagnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがゼロならば、そのときx.nextDownは-leastNonzeroMagnitudeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is zero, then x.nextUp is leastNonzeroMagnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがゼロならば、そのときx.nextUpはleastNonzeroMagnitudeです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is zero, then x.significand is 0.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがゼロならば、そのときx.significandは0.0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceが負ならば、これはabs(distance)でindex(before:)を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If n is negative, this is the same value as the result of -n calls to index(before:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nが負ならば、これは-nがindex(before:)を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If v is an invalid Unicode scalar value, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>vが無効なユニコードスカラー値であるならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If T is a nontrivial type, you must eventually deinitialize or move the values in this region to avoid leaks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tが非自明型ならば、あなたはゆくゆくはデイニシャライズするかまたはこの領域の値を移動してリークを防がなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If baseAddress is nil, this function does nothing and returns an empty buffer pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>baseAddressがnilならば、この関数は何もしません、そして空のバッファポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If copy(with:) returns the same array, the instances of NSArray and Array share storage using the same copy-on-write optimization that is used when two instances of Array share storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>copy(with:)が同じ配列を返すならば、NSArrayとArrayのインスタンスは同じコピーオンライト最適化を使ってストレージを共有します、それはArrayの２つのインスタンスがストレージを共有するとき使う最適化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x / y is exactly halfway between two integers, q is chosen to be even.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x / yが正確に２つの整数の間の中ほどならば、qは偶数である方を選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>aとbが比較できないならば、そしてbとcが比較できないならば、そのときaとcもまた比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withExtendedLifetime(_:_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithExtendedLifetime(_:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withMemoryRebound(to:capacity:_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithMemoryRebound(to:capacity:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withoutActuallyEscaping(_:do:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithoutActuallyEscaping(_:do:)関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If element is not found in the collection, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementがコレクションの中に見つけられないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If element is not found in the collection, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementがコレクションの中に見つけられないならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If i == endIndex, this method is equivalent to append(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>i == endIndexならば、このメソッドはappend(_:)に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If key already exists in the dictionary, value replaces the existing associated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyが既に辞書の中に存在するならば、valueが既存の結び付けられる値に取って代わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If other contains multiple instances of equivalent elements, only the first instance is kept.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherが同等の要素を複数含むならば、最初の要素だけが残されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If pointer is nil, the result is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pointerがnilならば、結果は0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If rhs is outside the range 0..&lt;lhs.bitWidth, it is masked to produce a value within that range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsが範囲0..&lt;lhs.bitWidthの外側ならば、それはマスクされてその範囲内の値を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If start is nil, count must be zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startがnilならば、countはゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If text has invalid characters or is in an invalid format, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textが無効な文字を持つまたは無効な形式であるならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If repairingIllFormedSequences is true, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>repairingIllFormedSequencesがtrueならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If sourcePosition does not have an exact corresponding position in target, then the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourcePositionがtargetの中に正確に対応する位置を持たないならば、そのとき結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If stopOnError is false, the entire iterator will be exhausted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>stopOnErrorがfalseならば、イテレータ全体が使い尽くされることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>areInIncreasingOrderがエラーをソートの間にスローするならば、要素は異なる順番になるかもしれません、しかし何１つとしてなくさないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withUnsafeBufferPointer(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithUnsafeBufferPointer(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If distance is positive, this is the same value as the result of distance calls to index(after:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceが正ならば、これはdistanceでindex(after:)を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If n is positive, this is the same value as the result of n calls to index(after:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nが正ならば、これはnでindex(after:)を呼び出す結果と同じ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If path can’t be appended, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pathが追加できないならば、nilが返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If repairingIllFormedSequences is false and an ill-formed sequence is detected, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>repairingIllFormedSequencesがfalseで誤形式シーケンスが検出されるならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If rhs is zero, the result of the division is infinity, with the sign of the result matching the sign of lhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsがゼロならば、除算の結果は無限大です、結果の符号はlhsの符号と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If source is less than the smallest representable value in this type, the result is the type’s min value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceがこの型の最も小さい表現可能な値より小さいならば、結果はこの型のmin値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is equal to y, returns x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがyと等しいならば、xを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is equal to y, returns y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがyと等しいならば、yを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If baseAddress is nil, this function does nothing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>baseAddressがnilならば、この関数は何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withUnsafeBytes(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithUnsafeBytes(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withUnsafeMutableBufferPointer(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithUnsafeMutableBufferPointer(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If source contains an equal or greater number of elements than the buffer can hold, the returned index is equal to the buffer’s endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceがバッファが保持できるのと同じまたはより多い数の要素を含むならば、返されるインデックスはバッファの持つendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withMemoryRebound(to:_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithMemoryRebound(to:_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withUnsafeMutableBytes(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithUnsafeMutableBytes(_:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If body has a return value, that value is also used as the return value for the withVaList(_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyが戻り値を持つならば、その値はまたwithVaList(_:)関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If key isn’t already a key of the dictionary, the (key, value) pair is added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyがまだこの辞書のキーでないならば、(key, value)ペアが加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If object is nil, the return value is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objectがnilならば、戻り値はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If true, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If i == endIndex, this method is equivalent to append(contentsOf:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>i == endIndexならば、このメソッドはappend(contentsOf:)に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If possiblePrefix has no elements, the return value is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>possiblePrefixが１つも要素を持たないならば、戻り値はtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If next never returns nil, the sequence is infinite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nextが決してnilを返さないならば、 このシーケンスは果てがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If true, only nonempty subsequences are returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueならば、空でない下位シーケンスだけが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If v is an invalid unicode scalar value, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>vが無効なユニコードスカラー値であるならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If x is not NaN, x.magnitude is the absolute value of x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがNaNでないならば、x.magnitudeはxの絶対値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If T is a nontrivial type, you must eventually deinitialize or move from the values in this region to avoid leaks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tが非自明型ならば、あなたはゆくゆくはデイニシャライズするかまたはこの領域の値から移動してリークを防がなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If EOF has already been reached when readLine() is called, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>readLine()が呼ばれるときEOFがすでに到達されているならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If Objective-C code calls a Swift method that throws an error, the error is automatically propagated to the error pointer argument of the bridged Objective-C method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cコードがエラーをスローするスウィフトメソッドを呼ぶならば、そのエラーはブリッジされたObjective-Cメソッドのエラーポインタ引数に自動的に伝達されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a conforming type wants to differentiate between literal and interpolated segments, restrict the types which can be interpolated into it, support different interpolators from the ones on String, or avoid constructing a String containing the data, it must specify a custom StringInterpolation associated type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある準拠している型がリテラルと補間された文節を区別することを望むならば、補間されることができる型それらをそれへと制約して、String上のものとは異なる補間をサポートしてください、またはデータを含んでいるStringを組み立てることを防止してください、それはあつらえのStringInterpolation関連型を指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a future change to the app requires an additional state, you need to update an additional variable at every existing change in state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリに対する将来の変更が追加の状態を要求するならば、あなたは、状態において起こっているすべての変化で、追加の変数を更新する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a property is converted from a stored property to a computed property, the result of offset(of:) changes to nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティが格納プロパティから計算プロパティに変換されるならば、offset(of:)の結果はnilに変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type conforming to Strideable is its own Stride type, it must provide concrete implementations of the two operators to avoid infinite recursion.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Strideableに準拠する型は独自のStride型です、それは２つの演算子の具体的な実装を提供して無限再帰を防止しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type does not support subnormals, x.ulp may be rounded to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型がサブノーマルをサポートしないならば、x.ulpはゼロに丸められるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type’s radix is 2, then for finite nonzero numbers, the significand is in the range 1.0 ..&lt; 2.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型の基数が２であるならば、そのとき有限の非ゼロの数に対して、仮数は範囲1.0 ..&lt; 2.0の中になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If all imported members have default values, Swift also provides a default initializer that takes no arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのインポートされたメンバが省略時の値を持つならば、スウィフトもまた引数を取らない省略時のイニシャライザをひとつ提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an element equal to newMember is already contained in the set, newMember replaces the existing element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>newMemberに等しい要素が既にこの集合に含まれるならば、newMemberは既存の要素と置き換わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an element equal to newMember is already contained in the set, this method has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>newMemberに等しい要素が既にこの集合に含まれるならば、このメソッドは効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an element equal to newMember was already contained in the set, the method returns (false, oldMember), where oldMember is the element that was equal to newMember.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>newMemberに等しい要素が既に集合に含まれたならば、メソッドは(false, oldMember)を返します、ここでoldMemberはnewMemberに等しかった要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an error producing Objective-C method returns a BOOL value to indicate the success or failure of a method call, Swift changes the return type of the function to Void.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーを生成しているObjective-CメソッドがBOOL値を返して、メソッド呼び出しの成功または失敗を指し示すならば、スウィフトは関数の戻り型をVoidに変えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If another method is declared with the resulting selector, the method name is not changed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として生じるセレクタで別のメソッドが宣言されるならば、メソッド名は変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If another part of the app changes myNickname and submits a change request back to the server, the most recently rejected penpal recommendation won't be mistakenly picked up by the change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリの別の部分がmyNicknameを変更するそして変更要請をサーバに提出するとしても、最近拒否した文通友達推薦が、その変更によって間違って拾い上げられることはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any are found, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何か見つけられるならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If both x and y are NaN, or either x or y is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyの両方がNaN、またはxまたはyのどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If both x and y are NaN, or either x or y is a signaling NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyの両方がNaN、またはxまたはyのどちらかがシグナルNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If both values are false, the operator returns false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>両方の値がfalseならば、演算子はfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If either of the values is false, the operator returns false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値のどちらかがfalseならば、演算子はfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If either this value or other is NaN, the result of this method is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値またはotherのどちらかがNaNならば、このメソッドの結果はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If included, the exponent is separated by a single character, e or E, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もし含むならば、指数は１つの文字eもしくはEによって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If included, the exponent is separated by a single character, p or P, and consists of an optional plus or minus sign character and a sequence of decimal digits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もし含むならば、指数は１つの文字pもしくはPによって区切られます、そして随意のプラスまたはマイナス符号文字と一連の10進の桁から成り立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If mutations need to invalidate indices in your custom collection type, don’t use Slice as its subsequence type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変異体がインデックスを無効にすることがあなたのあつらえのコレクション型において必要ならば、Sliceをそれの下位シーケンス型として使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary, the byte order of this value is reversed from the typical byte order of this integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必要ならば、この値のバイト順はこの整数型の典型的なバイト順からひっくり返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの中の要素が１つもbelongsInSecondPartitionに一致しないならば、返されるインデックスはコレクションのendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no elements in the collection satisfy the given predicate, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素が与えられた述部を満たすことがないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no nullability information is provided for a type, Swift doesn't distinguish between optional and nonoptional references, and imports the type as an implicitly unwrapped optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ヌル可能性情報がある型に提供されないならば、Swiftはオプショナルと非オプショナル参照の間の区別をしません、そしてその型をある暗黙的にアンラップされるオプショナルとしてインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no such storage exists, it is created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようなストレージが存在しないならば、それは作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no such storage exists, it is first created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのようなストレージが存在しないならば、それが最初に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not, any value in defaults[greetingKey] will succeed, and if not that, greeting will be set to the non-optional default value, "Greetings!".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでないならば、defaults[greetingKey]の中の何らかの値が後を継ぎます、そしてそれもないならば、greetingは非オプショナルの省略時の値、"Greetings!"に設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If parts of an Objective-C API aren't suitable for Swift, you can make those parts unavailable in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C APIの一部がSwiftに適さないならば、あなたそれらの部分をSwiftで利用可能できなくできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If stepping from start by stride does not produce end, the last value in the sequence will be one step before going beyond end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startからstrideだけまたいで越えるならば、endを生成せず、シーケンスの最後の値はendを越える前に一またぎあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the KeyValuePairs instance is empty, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyValuePairsインスタンスが空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the KeyValuePairs instance is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyValuePairsインスタンスが空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the baseAddress of this buffer is nil, the count is zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファのbaseAddressがnilならば、総数はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the byteCount bytes of memory referenced by this pointer are bound to a type T, then T must be a trivial type, this pointer and source must be properly aligned for accessing T, and byteCount must be a multiple of MemoryLayout&lt;T&gt;.stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリのbyteCountバイトが型Tに束縛されるならば、そのときTは自明型でなければならず、このポインタとsourceはTにアクセスするために適切にアラインされなければならず、そしてbyteCountはMemoryLayout&lt;T&gt;.strideの倍数でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the description value is any string other than "true" or "false", the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このdescription値が"true"または"false"と違う何らかの文字列ならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is false, the partialValue component contains the entire difference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は差そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is false, the partialValue component contains the entire product.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は積そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is false, the partialValue component contains the entire quotient.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は全体の商を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is false, the partialValue component contains the entire remainder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は余りそのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is false, the partialValue component contains the entire sum.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がfalseならば、partialValue構成部分は合計そのままを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the source.count bytes of memory referenced by this buffer are bound to a type T, then T must be a trivial type, the underlying pointer must be properly aligned for accessing T, and source.count must be a multiple of MemoryLayout&lt;T&gt;.stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファによって参照されるメモリのsource.countバイトが型Tに束縛されるならば、そのときTは自明型でなければならず、基盤となるポインタはTにアクセスするために適切にアラインされなければならず、そしてsource.countはMemoryLayout&lt;T&gt;.strideの倍数でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こった、そしてpartialValue構成部分は切り詰められた商または、商が未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こるとpartialValue構成部分はこの値とrhsの積の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こるとpartialValue構成部分はこの値からrhsを減算した結果の切り詰められたもの含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がtrueであるならば、オーバーフローが起こるとpartialValue構成部分はこの値とrhsの合計の切り詰められたものを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>overflow構成部分がtrueであるならば、除算の間にオーバーフローが起こった、そしてpartialValue構成部分は余りそのまままたは、余りが未定義ならば、被除数のどちらかを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the Objective-C generic parameterization specifies class or protocols qualifications, the imported Swift declaration has a constraint that requires that type to be a subclass of the specified class or to conform to the specified protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C総称体パラメータ化がクラスまたはプロトコル適格を指定するならば、インポートされたスウィフト宣言はある制約を持ちます、それがその型に要求するのは、指定されたクラスのサブクラスであることまたは指定されたプロトコルに準拠することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the Objective-C method’s error parameter is also its first parameter, Swift attempts to simplify the method name further, by removing the WithError or AndReturnError suffix, if present, from the first part of the selector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cメソッドのerrorパラメーターがまたそれの最初のパラメーターでもあるならば、スウィフトはメソッド名をいっそう単純化することをWithErrorまたはAndReturnError接尾辞を、もしあるならば、セレクタの最初の部分から取り除くことによって試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the UTF-8 view is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-8ビューが空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the array is empty, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列が空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the array is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列が空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the array is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列が空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the array is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列が空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the array is empty, these properties are nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列が空であるならば、これらのプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the array’s Element type is a struct or enumeration, Array and ContiguousArray should have similar efficiency.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列のElement型が構造体または列挙であるならば、ArrayとContiguousArrayは同じような効率を持つはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the bit width of the shifted integer type is a power of two, masking is performed using a bitmask; otherwise, masking is performed using a modulo operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シフトされる整数型のビット幅が２の冪ならば、マスクはビットマスクを使って実行されます；そうでなければ、マスクはモジュロ演算を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the call to replaceSubrange(_:with:) simply removes elements at the end of the string, the complexity is O(n), where n is equal to bounds.count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>replaceSubrange(_:with:)への呼び出しが単に要素を文字列の終わりから削除するだけならば、計算量はO(n)です、ここでnはbounds.countと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the call to replaceSubrange(_:with:) simply removes text at the end of the string, the complexity is O(n), where n is equal to bounds.count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>replaceSubrange(_:with:)への呼び出しが単にテキストを文字列の終わりから削除するだけならば、計算量はO(n)です、ここでnはbounds.countと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the call to this method simply appends the contents of newElements to the array, this method is equivalent to append(contentsOf:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドへの呼び出しが単にnewElementsの内容を配列に追加するだけならば、このメソッドはappend(contentsOf:)と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the call to this method simply appends the contents of newElements to the collection, the complexity is O(m).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドへの呼び出しが単にnewElementsの内容をコレクションに追加するだけならば、計算量はO(m)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドへの呼び出しが単にnewElementsの内容をコレクションに追加するだけならば、このメソッドはappend(contentsOf:)と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the closure has a return value, that value is also used as the return value of the withUTF8Buffer(invoke:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャが戻り値を持つならば、その値はまたwithUTF8Buffer(invoke:)メソッドの戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the closure has a return value, that value is also used as the return value of the withUnsafeBytes(of:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャが戻り値を持つならば、その値はまたwithUnsafeBytes(of:_:)関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the closure has a return value, that value is also used as the return value of the withUnsafeMutableBytes(of:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャが戻り値を持つならば、その値はまたwithUnsafeMutableBytes(of:_:)関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the closure has a return value, that value is also used as the return value of the withUnsafeMutablePointer(to:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャが戻り値を持つならば、その値はまたwithUnsafeMutablePointer(to:_:)関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the closure has a return value, that value is also used as the return value of the withUnsafePointer(to:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャが戻り値を持つならば、その値はまたwithUnsafePointer(to:_:)関数の戻り値としても使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection does not have sufficient capacity for another element, additional storage is allocated before appending newElement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが別の要素に対して十分な容量を持たないならば、追加のストレージがnewElementを追加する前に割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection does not support an internal representation in a form of mutable contiguous storage, body is not called and nil is returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションがある内部表現を可変の隣接ストレージの形式でサポートしないならば、bodyは呼び出されません、そしてnilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection is empty, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection is empty, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection is empty, the method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空ならば、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the collection is empty, the value of this property is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空であるならば、このプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the consistency of an app's models is stored on a server, you can model records as structures with identifiers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるアプリの持つモデルの一貫性がサーバ上に格納されるならば、あなたはレコードを、識別子を使って構造体としてモデル化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dictionary doesn’t contain the given key, accesses the provided default value as if the key and default value existed in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書がこの与えられたキーを含まないならば、提供された省略時のキーにアクセスします、まるでキーと省略時の値がその辞書の中に存在したかのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dictionary doesn’t contain the key, the key and value are added as a new key-value pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書がそのキーを含まないならば、キーと値は新しいキー値ペアとして加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dictionary uses String or Int keys, the contents are encoded in a keyed container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書がStringまたはIntキーを使うならば、内容はキー付けされるコンテナの中にエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dictionary wraps a bridged NSDictionary, the performance is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書が、ブリッジされたNSDictionaryをラップするならば、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dynamic type of obj doesn’t implement a getIntegerValue() method, the system returns a runtime error when you initialize certainValue.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objの動的型がgetIntegerValue()メソッドを実装しないならば、システムは実行時エラーをあなたがcertainValueを初期化する時に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dynamic type of subject conforms to CustomReflectable, the resulting mirror is determined by its customMirror property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subjectの動的型がCustomReflectableに準拠するならば、結果として生じるミラーは、それのcustomMirrorプロパティによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dynamic type of subject has value semantics, subsequent mutations of subject will not observable in Mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subjectの動的型が値意味論を持つならば、subjectの続いて起こる変異体たちはMirrorにおいて見分けがつかないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列に属する要素らがクラスのインスタンスらであるならば、意味論は同じです、にもかかわらずそれらは最初は異なっているように思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the given floating-point value cannot be represented exactly, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた浮動小数点値が正確に表現できないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the given integer cannot be represented exactly, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数が正確に表現できないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the given key is found in the dictionary, this method returns an index into the dictionary that corresponds with the key-value pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーがこの辞書の中に見つかるならば、このメソッドは辞書の中へのあるインデックスを返し、それがそのキー値ペアに対応するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the given key is not present in the dictionary, this method adds the key-value pair and returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーがこの辞書の中に存在しないならば、このメソッドはそのキー値ペアを加えてnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the index passed as sourcePosition doesn’t have an exact corresponding position in target, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourcePositionとして渡されたインデックスがまさにその対応する位置をtargetにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the index passed as sourcePosition doesn’t have an exact corresponding position in unicodeScalars, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourcePositionとして渡されたインデックスがまさにその対応する位置をunicodeScalarsにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the index passed as sourcePosition represents either the start of a Unicode scalar value or the position of a UTF-16 trailing surrogate, then the initializer succeeds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourcePositionとして渡されるインデックスがユニコードスカラー値の始まりまたはUTF-16後続サロゲートの位置のどちらかを表すならば、イニシャライザはうまくいきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the index passed as sourcePosition represents the start of an extended grapheme cluster—the element type of a string—then the initializer succeeds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourcePositionとして渡されるインデックスが拡張書記素クラスタ — ある文字列の要素型 — の始まりを表すならば、そのときイニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the instance passed as object is being accessed by multiple threads simultaneously, this function may still return true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>objectとして渡されるインスタンスが複数のスレッドによって同時にアクセスされる場合、この関数は依然としてtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the key is found in the dictionary, this method returns the key’s associated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーが辞書の中に見つけられるならば、このメソッドはそのキーの結び付けられる値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the key isn’t found in the dictionary, removeValue(forKey:) returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーが辞書の中に見つけられないならば、removeValue(forKey:)はnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the last non-block parameter of an Objective-C method is of type NSError **, Swift replaces it with the throws keyword, to indicate that the method can throw an error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cメソッドの最後の非ブロックパラメーターが型NSError **ならば、スウィフトはそれをthrowsキーワードで置き換えて、そのメソッドがエラーをスローできることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクションの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最大長がコレクションの要素の数を越えるならば、結果はコレクション全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最大長がシーケンスの要素の数を越えるならば、結果はシーケンスの要素すべてを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is bound to a type U that is layout compatible with T, then it contains a value of type U.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリが型UでTとレイアウト互換であるものに束縛されるならば、そのときそれは型Uの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is bound to type T, then it contains values of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリが型Tに束縛されるならば、そのときそれは型Tの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is bound to type T, then it contains values of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリが型Tに束縛されるならば、そのときそれは型Tの値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is uninitialized, it is still uninitialized after being bound to T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリが未初期化であるならば、それはTに束縛された後も依然として未初期化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the memory is uninitialized, it is still uninitialized after being bound to T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリが未初期化であるならば、それはTに束縛された後も依然として未初期化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the name begins with a number, the first digit is replaced with an underscore.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>名前が数字で始まるならば、最初の数字はアンダースコアで置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the number of elements is unknown, the value is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の数が未知ならば、値はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省かれることになる要素の数がコレクションの要素の数を越えるならば、結果は空の下位シーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>取り除く要素の数がシーケンスの要素数を越えるならば、結果は空のシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the passed instance conforms to CustomStringConvertible, the String(describing:) initializer and the print(_:) function use the instance’s custom description property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>渡されたインスタンスがCustomStringConvertibleに準拠するならば、String(describing:)イニシャライザとprint(_:)関数はそのインスタンスのあつらえのdescriptionプロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the payload contains any other characters, it is ignored.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ペイロードが何か他の文字を含むならば、それは無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the position passed in utf16Index doesn’t have an exact corresponding position in utf8, the result of the initializer is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>utf16Indexに渡された位置がまさにその対応する位置をutf8において持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the quotient is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>商がこの型において表すのに大きすぎるならば、実行時エラーが起こるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the quotient of dividing dividend by this value is too large to represent in the type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>dividendをこの値で除算した商がこの型で表すのに大きすぎるならば、実行時エラーが起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the return value of this method is non-nil, then accessing the value by key path or by an offset pointer are equivalent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドの戻り値が非nilならば、その時その値にキーパスによってまたはあるオフセットポインタによってアクセスすることは、等価です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence contains any values, the first one is start.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが何らかの値を含むならば、最初のものはstartです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが１つも要素を持たないならば、nextPartialResultは決して実行されません、そしてinitialResultはreduce(_:_:)への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが１つも要素を持たないならば、updateAccumulatingResultは決して実行されません、そしてinitialResultはreduce(into:_:)への呼び出しの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence has no elements, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが要素を持たないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence has no elements, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが要素を持たないならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the sequence has no elements, the result is initialResult.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが１つも要素を持たないならば、結果はinitialResultです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the set already contains one or more elements that are also in other, the existing members are kept.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherの中にもある１つ以上の要素をこの集合がすでに含むならば、既存のメンバはそのままにしておかれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the set is empty, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合が空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the set is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合が空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the set is empty, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合が空ならば、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the set wraps a bridged NSSet, the performance is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合が、ブリッジされたNSSetをラップするならば、性能は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the static string stores a single Unicode scalar value, the value of isASCII is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列が単一のユニコードスカラー値を格納するならば、isASCIIの値は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the static string stores a single Unicode scalar value, the value of utf8CodeUnitCount is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列が単一のユニコードスカラー値を格納するならば、utf8CodeUnitCountの値は不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the string is empty, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列が空ならば、startIndexはendIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the string passed as stringValue does not correspond to any instance of this type, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>stringValueとして渡される値がこの型の何らかのインスタンスと一致しないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the two ranges do not overlap, the result is a single-element range at the upper or lower bound of limits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの範囲が重ならないならば、結果はlimitsの上方または下方での単一要素範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the two ranges do not overlap, the result is an empty range within the bounds of limits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの範囲が重ならないならば、結果はlimitsの境界内の空の範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the two sequences passed to zip(_:_:) are different lengths, the resulting sequence is the same length as the shorter sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>zip(_:_:)に渡された２つのシーケンスが異なる長さであるならは、結果のシーケンスはより短いシーケンスと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the type of the value pointed to by a C pointer cannot be represented by Swift, as is the case with an incomplete struct type, the pointer is imported as an OpaquePointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cポインタによって指し示される値の型がSwiftによって表現できないならば、不完全なstruct型を持つケース節であるなど、そのポインタはOpaquePointerとしてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the type supports subnormal values, leastNonzeroMagnitude is smaller than leastNormalMagnitude; otherwise they are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その型がサブノーマル値をサポートするならば、leastNonzeroMagnitudeはleastNormalMagnitudeより小さいです；そうでなければそれらは等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the underlying collection stored by other does not satisfy BidirectionalCollection, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherによって格納される基礎をなすコレクションがBidirectionalCollectionの条件を満たさないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the underlying collection stored by other does not satisfy RandomAccessCollection, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherによって格納される基礎をなすコレクションがRandomAccessCollectionの条件を満たさないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value fails to encode anything, encoder will encode an empty keyed container in its place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値が何かをエンコードに失敗するならば、encoderは空のキー付きコンテナをその場でエンコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value is true, the result of the operation is false; if the value is false, the result is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値がtrueならば、この演算の結果はfalseです；値がfalseならば、結果はtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value is nil, it can be because key is computed, has observers, requires reabstraction, or overlaps storage with other properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値がnilの場合、それが可能なのはkeyが計算される、オブザーバを持つ、再抽象化を要求する、またはストレージを他のプロパティでオーバーラップするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value is not null, does not increment currentIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値がnullでないならば、currentIndexは増加しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value of an existing key is updated, updateValue(_:forKey:) returns the original value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のキーの値が更新されるならば、updateValue(_:forKey:)は元の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a Double.nan, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ペイロードの値がDouble.nanのペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a Float80.nan, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ペイロードの値がFloat80.nanのペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value of the payload is larger than can be stored as the payload of a Float.nan, the least significant bits are used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ペイロードの値がFloat.nanのペイロードとして格納可能であるより大きいならば、最下位ビットが使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value passed as intValue does not correspond to any instance of this type, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>intValueとして渡される値がこの型の何らかのインスタンスと一致しないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value passed as source is greater than the maximum representable value in this type, the result is the type’s max value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceとして渡された値がこの型において最大限の表現可能な値より大きいならば、結果はこの型のmax値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value passed as source is not representable exactly, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceとして渡された値が正確に表現可能でないならば、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value passed as source is not representable in this type, a runtime error may occur.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceとして渡された値がこの型で表現可能でないならば、実行時エラーが起こるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value you pass to significand is NaN, the result is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがsignificandに渡す値がNaNならば、結果はNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the value you pass to significand is zero or infinite, the result is zero or infinite, regardless of the value of exponent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがsignificandに渡す値がゼロまたは無限大ならば、結果はゼロまたは無限大です、exponentの値に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>復旧の助けになりうるそのエラーについての追加の詳細があるならば、関連値を使ってその情報を含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are multiple equal greatest arguments, the result is the last one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>等しい最大の引数が複数あるならば、結果は最後のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are multiple equal least arguments, the result is the first one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数の最も少ない引数があるならば、結果は最初の１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is no upper limit, then significandBitCount should be Int.max.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上限がないならば、そのときsignificandBitCountはInt.maxです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there is no value of the type that corresponds with the specified raw value, this initializer returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された生の値に対応する型の値が１つもないならば、このイニシャライザはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there's a chance that a closure you pass to an API won't be called, don't put code that's critical to continuing your app in the closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがAPIに渡すクロージャが呼び出されない可能性があるならば、あなたのアプリを継続するのに重要なコードをクロージャの中に置かないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this Character is a hexadecimal digit, returns the value it represents, else nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が16進法桁ならば、それが表す値を返します、でなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this Character is a whole number, return the value it represents, else nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が整数ならば、それが表す値を返します、でなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this index does not have an exact corresponding position in characters, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスがまさにその対応する位置をcharactersにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this index does not have an exact corresponding position in utf16, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスがまさにその対応する位置をutf16において持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this index does not have an exact corresponding position in utf8, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスがまさにその対応する位置をutf8において持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this index does not have an exact corresponding position in unicodeScalars, this method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスがまさにその対応する位置をunicodeScalarsにおいて持たないならば、イニシャライザの結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this instance is nil, returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがnilならば、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型が値意味論を持つならば、ミラーはインスタンスのその後の変化によって影響を受けないべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this type’s Stride type conforms to BinaryInteger, then for a value x, a distance n, and a value y = x.advanced(by: n), x.distance(to: y) == n.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型のもつStride型がBinaryIntegerに準拠するならば、そのとき値x、隔たりn、そして値y = x.advanced(by: n)に対して、x.distance(to: y) == n。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this type’s Stride type conforms to BinaryInteger, then for two values x and y, and a distance n = x.distance(to: y), x.advanced(by: n) == y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の持つStride型がBinaryIntegerに準拠するならば、そのとき２つの値xとy、そして隔たりn = x.distance(to: y)に対して、x.advanced(by: n) == y。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this value and other are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値とotherが両方とも有限の数ならば、切り捨てられる余りはこの値と同じ符号を持ち、そして厳密にotherより小さい規模になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this value and other are finite numbers, the remainder is in the closed range -abs(other / 2)...abs(other / 2).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値とotherが有限数ならば、余りは完結範囲-abs(other / 2)...abs(other / 2)の中に入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this value is a finite nonzero number, significandWidth is the number of fractional bits required to represent the value of significand; otherwise, significandWidth is -1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値が有限の非ゼロ数ならば、significandWidthはsignificandの値を表すのに必要とされる小数部ビットの数です；そうでなければ、significandWidthは-1です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの表現可能な値が同等であるくらい近いならば、結果はその仮数ビットパターンにおいてより多く後ろに続くゼロを持つ値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you accept, Xcode creates the bridging header file along with the file you were creating, and names it by using your product module name followed by "-Bridging-Header.h".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが承諾するならば、Xcodeはブリッジヘッダファイルをあなたが作成していたファイルに加えて作成します、そしてあなたのプロダクトモジュール名に"-Bridging-Header.h"を続けることでそれに名前をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが数のわかった要素をコレクションに加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are adding a known number of elements to a set, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが数のわかった要素を集合に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are adding a known number of elements to an array, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが数のわかった要素を配列に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are adding a known number of key-value pairs to a dictionary, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが数のわかったキー値ペアを辞書に加えているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、代わりにString APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are sorting strings to present to the end user, use String APIs that perform localized comparison.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが文字列をソートしてエンドユーザに提供するならば、String APIを使うべきです、それはローカライズされた比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are using the memory for a specific type, allocate memory using the UnsafeMutablePointer.allocate(capacity:) static method instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがメモリを特定の型に対して使っているならば、メモリを代わりにUnsafeMutablePointer.allocate(capacity:)静的メソッドを使ってアロケートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you assign nil as the value for the given key, the dictionary removes that key and its associated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが与えられたキーに値としてnilを割り当てるならば、辞書はそのキーとそれの結び付けられた値を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you assign nil to an existing key, the key and its associated value are removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがnilを既存のキーに割り当てるならば、そのキーとそれの関連値は削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you change a reference to an object in one array, only that array has a reference to the new object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある配列におけるあるオブジェクトへの参照を変更するならば、単にその配列が新しいオブジェクトへの参照を持つだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compare two instances of that type, whether or not the computed value has been cached shouldn't affect their equality, so the cached value should be excluded from comparison and hashing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがその型の２つのインスタンスを比較するならば、計算値がキャッシュされるかどうかが、それらの同等性に影響すべきではありません、なのでキャッシュされた値は比較およびハッシュ化から排除されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the Collection protocol in order to give a more useful and more efficient interface for sequence and collection operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれの要素に繰り返しアクセスを提供できるあつらえのシーケンスを作成しているならば、より実用的でより効率的なインターフェイスをシーケンスおよびコレクション演算に与えるために、それの型がCollectionプロトコルに準拠するのを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you declare a new operator without specifying a precedence group, it is a member of the DefaultPrecedence precedence group.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが新しい演算子を優先順位グループを指定せずに宣言するならば、それはDefaultPrecedence優先順位グループのメンバです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you do need to access memory that is bound to one type as a different type, Swift’s pointer types provide type-safe ways to temporarily or permanently change the bound type of the memory, or to load typed instances directly from raw memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある型に束縛されるメモリに異なる型としてアクセスする必要があるならば、Swiftのポインタ型は型安全な方法を提供することで、一時的にまたは永続的にメモリの束縛される型を変更します、または型付インスタンスを直接に生のメモリからロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't need to know how a property has changed, omit the options parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがどのようにプロパティが変更されたか知る必要がないならば、optionsパラメータを省略します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't need to respond to events, you don't need to create a delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがイベントに応答することを必要としないならば、あなたは委任先を作成する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don’t want the default behavior or don’t want to construct a String, use a custom type conforming to StringInterpolationProtocol instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが初期状態の挙動を望まないまたはStringを組み立てることを望まないならば、代わりにStringInterpolationProtocolに準拠するあるあつらえの型を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you have prior knowledge that an AnyObject instance has a particular type, you can use the unconditional downcast operator (as!).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがAnyObjectインスタンスがある特定の型を持つという事前の知識を持つならば、無条件のダウンキャスト演算子（as!）を使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you implement CustomDebugStringConvertible conformance for your custom type, you may want to consider providing a custom mirror by implementing CustomReflectable conformance, as well.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがCustomDebugStringConvertible準拠をあなたのあつらえの型に実装するならば、さらにまたあなたはあつらえのミラーをCustomReflectable準拠によって提供することを考慮したいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you implement a custom data structure backed by an array that grows dynamically, naively calling the reserveCapacity(_:) method can lead to worse than expected performance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが動的に増大する配列によって裏打ちされる誂えのデータ構造を実装するならば、無邪気にreserveCapacity(_:)メソッドを呼び出すと予想される性能よりずっと悪くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you know approximately how many elements you will need to store, use the reserveCapacity(_:) method before appending to the array to avoid intermediate reallocations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのくらい多くの要素をあなたが格納する必要があるかをあなたがおおよそ知っているならば、配列に追加する前にreserveCapacity(_:)メソッドを使って中間的な再割り当てを回避するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you misunderstand the requirements of closeFile(), you might place the call inside the closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがcloseFile()の必要条件を取り違えるならば、あなたは呼び出しをクロージャの内側に置くかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期されない複製の原因となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがコレクションをそれのインデックス全体に反復している間に変化させるならば、ある強い参照はそのコレクションの予期しない複製という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが同じ型での逆にされたコレクションを必要とするならば、あなたはコレクションのもつシーケンス基盤のまたはコレクション基盤のイニシャライザを使うことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need an array that is preinitialized with a fixed number of default values, use the Array(repeating:count:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある固定された数の省略時の値であらかじめ初期化される配列を必要とするならば、Array(repeating:count:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need an integer value within a specific range, use the static random(in:using:) method on that integer type instead of this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある整数を指定範囲内で必要とするならば、静的random(in:using:)メソッドをその整数型の上で使ってください、このメソッドの代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need an ordered collection of key-value pairs and don’t need the fast key lookup that Dictionary provides, see the KeyValuePairs type for an alternative.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが順番付けられたキー値ペアのコレクションを必要とするそしてDictionaryが提供する高速な検索を必要としないならば、代わりのものとしてKeyValuePairs型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need more control over the capacity of your array, implement your own geometric growth strategy, passing the size you compute to reserveCapacity(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたの配列の容量に関してより制御を必要とするならば、あなた独自の幾何数級的戦略を実装して、あなたが算出する大きさをreserveCapacity(_:)に渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need the reference semantics that come with the Foundation reference type, you can access it with its original NS class name prefix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがFoundation参照型に付属する参照意味論を必要とするならば、あなたはそれに、それの元のNSクラス名接頭辞でアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to access a specific position in a UTF-16 view, use Swift’s index manipulation methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUTF-16ビューにおいて特定の位置にアクセスする必要があるならば、Swiftのインデックス操作メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to access the contents of a string as encoded in different Unicode encodings, use one of the string’s unicodeScalars, utf16, or utf8 properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある文字列の内容に異なるユニコードエンコーディングでエンコードされたようにアクセスする必要があるならば、その文字列のもつunicodeScalars、utf16、またはutf8プロパティの１つを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to customize this behavior, override the isEqual(_:) method and hash property instead of the == operator method and hashValue property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこの挙動をカスタマイズする必要があるならば、isEqual(_:)メソッドとhashプロトコルをオーバーライドしてください、==演算子メソッドとhashValueプロパティではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to disambiguate between overloaded functions, use parenthesized expressions along with the as operator to make the #selector expression refer unambiguously to a specific overload.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオーバーロードされた関数の間の違いを明らかにする必要があるならば、括弧に囲まれた式をas演算子と一緒に使って、#selector式を明白に特定のオーバーロードを参照するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to iterate over consecutive floating-point values, see the stride(from:through:by:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが連続した不動小数点値にわたって反復適用していく必要があるならば、stride(from:through:by:)関数を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to iterate over consecutive floating-point values, see the stride(from:to:by:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが隣接浮動小数点値のすべてにわたって反復する必要があるならば、stride(from:to:by:)関数を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to mutate the argument through the pointer, use withUnsafeMutablePointer(to:_:) instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがポインタを通して引数を変化させる必要があるならば、代わりにwithUnsafeMutablePointer(to:_:)を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to pass an optional pointer as a CVarArg argument, use the Int(bitPattern:) initializer to interpret the optional pointer as an Int value, which has the same C variadic calling conventions as a pointer on all supported platforms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオプショナル値をCVarArg引数として渡す必要があるならば、Int(bitPattern:)イニシャライザを使って、オプショナルポインタをInt値として解釈してください、それは全てのサポートされるプラットホーム上のポインタと同じC可変長引数呼出規約を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to pass those keys to a method that takes an array, however, use this initializer to convert that list from its type of LazyMapCollection&lt;Dictionary&lt;String, Int&gt;, Int&gt; to a simple [String].</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、あなたが配列を取るメソッドにそれらキーを渡す必要があるならば、このイニシャライザを使ってそのリストをそれの型のLazyMapCollection&lt;Dictionary&lt;String, Int&gt;, Int&gt;から単純な[String]へ変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to perform additional setup beyond initialization, you can assign the result of the invocation of a closure to the global constant:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが追加的な準備を初期化が済んだら実行する必要があるならば、あなたはあるクロージャの発動の結果をグローバル定数に割り当てることができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to provide a customized playground representation in Swift 4.0 or Swift 3.2 or earlier, use a conditional compilation block:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがカスタマイズされたプレイグラウンド表現をSwift 4.0またはSwift 3.2以前において提供する必要があるならば、条件コンパイルブロックを使ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to store a copy of a nontrivial value into memory, or to store a value into memory that contains a nontrivial value, you cannot use the storeBytes(of:toByteOffset:as:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが非自明の値のコピーをメモリに格納する、またはある値を非自明の値を含むメモリに格納する必要がある場合、あなたはstoreBytes(of:toByteOffset:as:)メソッドを使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to validate that an index from one string’s view corresponds with an exact position in another view, use the index’s samePosition(in:) method or the init(_:within:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある文字列の持つビューからのインデックスが別のビューでの正確な位置と対応することを有効にする必要があるならば、そのインデックスのsamePosition(in:)メソッドまたはinit(_:within:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you override one of these declarations, you must also override the other to maintain that guarantee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれら宣言の一方をオーバーライドするならば、あなたはまた他方もオーバーライドしてその保証を維持してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass true, the operation preserves the buffer capacity that the collection has, otherwise the underlying buffer is released.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがtrueを渡すならば、演算はそのコレクションが持つバッファ容量を保全します、そうでなければ基礎をなすバッファは解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass a value as stride that moves away from end, the sequence contains no values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある値をstrideとして渡してそれがendから離れていくならば、シーケンスは全く値を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがゼロ長範囲をsubrangeパラメータとして渡すならば、このメソッドはnewElementsの要素をsubrange.startIndexで挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass strings to the descendant(_:_:) method, labels are used for lookup.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが幾つか文字列をdescendant(_:_:)メソッドに渡すならば、それらラベルは検索に使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass the array’s endIndex property as the index parameter, the new element is appended to the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが配列のendIndexプロパティをindexパラメータとして渡すならば、新しい要素が配列に追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass the collection’s endIndex property as the index parameter, the new element is appended to the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがコレクションのendIndexプロパティをindexパラメータとして渡すならば、新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass the collection’s endIndex property as the index parameter, the new elements are appended to the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがコレクションのendIndexプロパティをindexパラメータとして渡すならば、いくらかの新しい要素がコレクションに追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you provide your own implementation, make sure to compute the value nondestructively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなた独自の実装を提供するならば、値を非破壊的に計算することを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you return Core Foundation objects from your own C functions and Objective-C methods, you can annotate them with either the CF_RETURNS_RETAINED or CF_RETURNS_NOT_RETAINED macro to automatically insert memory management calls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがCore Foundationオブジェクトをあなた独自のC関数およびObjective-Cメソッドから返すならば、あなたはそれらにCF_RETURNS_RETAINEDまたはCF_RETURNS_NOT_RETAINEDマクロのどちらかで注釈をつけて、自動的にメモリ管理呼び出しを差し込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you return any other type, a structured description is generated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが何か他の型を返すならば、構造化された記述が生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use 11 as rhs, x is overshifted such that all of its bits are set to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが11をrhsとして使うならば、xは、それのビットのすべてがゼロに設定されるような、オーバーシフトをされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが2を右手側の値としてxに関する演算において使うならば、シフト量はマスクを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use 2 as the right-hand-side value in an operation on x, the value is shifted left by two bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが2をx上での演算の右手側の値として使うならば、値は2ビットだけ左にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use 2 as the right-hand-side value in an operation on x, the value is shifted right by two bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが2をx上での演算の右手側の値として使うならば、値は2ビットだけ右にシフトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use an Objective-C API that needs to process your data, or you need to fit your data model into an existing class hierarchy defined in an Objective-C framework, you might need to use classes and class inheritance to model your data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータを処理するのに必要であるObjective-C APIをあなたが使う、またはあなたのデータモデルをObjective-Cフレームワークにおいて定義される既存のクラス階層へと適合させる必要があるならば、あなたはクラスとクラス階層を使ってあなたのデータをモデル化する必要があるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to expose an Objective-C API to Swift with a different declaration, but a similar underlying implementation, use the NS_REFINED_FOR_SWIFT macro.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがObjective-C APIをSwiftに異なる宣言で、しかしよく似た基盤実装で公開したいならば、NS_REFINED_FOR_SWIFTマクロを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to import an Objective-C API into Swift with a different name, use the NS_SWIFT_NAME macro.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるObjective-C APIをSwiftへ異なる名前でインポートしたいならば、NS_SWIFT_NAMEマクロを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to mutate a value by writing through a pointer, use withUnsafeMutableBytes(of:_:) instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある値をポインタを通して書き込むことで変化させたいならば、withUnsafeMutableBytes(of:_:)を代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow addition operator (&amp;+).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー加算演算子（&amp;+）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow multiplication operator (&amp;*).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオーバーフロー検査を取りやめて、あらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー乗算演算子（&amp;*）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to opt out of overflow checking and wrap the result in case of any overflow, use the overflow subtraction operator (&amp;-).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオーバーフロー検査を取りやめてあらゆるオーバーフローの場合に結果をラップしたいならば、オーバーフロー減算演算子（&amp;-）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to provide a custom description of your type to be logged in place of the default description, conform to the CustomPlaygroundDisplayConvertible protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のあつらえの記述を提供して省略時の記述の代わりに記録されるようにしたいならば、CustomPlaygroundDisplayConvertibleプロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが数のわかった要素をコレクションに加えることになっているならば、このメソッドを使って複数の再割り当てを避けてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're building an inheritance relationship from scratch, prefer protocol inheritance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが継承関係をゼロから構築するならば、プロトコル継承を選んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're completely certain about the type of the object, you can use the forced downcast operator (as!) instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオブジェクトの型について完全に確信しているならば、あなたは強制ダウンキャスト演算子（as!）を代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're going to pass a closure to an API that might call it multiple times, omit code that's intended to make a one-time change to external state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるクロージャをそれを複数回呼び出すかもしれないAPIに渡そうとしているならば、一度限りの変更を外部状態に対してするように意図されるコードを省いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're new to Swift, read The Swift Programming Language for a quick tour, a comprehensive language guide, and a full reference manual.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSwiftに慣れていないならば、Swiftプログラミング言語を素早い見学、包括的な言語案内、そして完全な参照手引書として読んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're new to programming, check out Swift Playgrounds on iPad.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがプログラミング初心者ならば、Swift PlaygroundsをiPadでチェックしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your app target has an Objective-C bridging header, the generated header also includes interfaces marked with the internal modifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリターゲットがObjective-Cブリッジヘッダを含むならば、生成されたヘッダもまたinternal修飾子で印されたインターフェイスを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your array’s Element type is a class or @objc protocol and you do not need to bridge the array to NSArray or pass the array to Objective-C APIs, using ContiguousArray may be more efficient and have more predictable performance than Array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの配列のElement型がクラスまたは@objcプロトコルで、あなたがその配列をNSArrayにブリッジしたりその配列をObjective-C APIに渡したりする必要がないならば、ContiguousArrayを使うことはArrayよりもより効率的でありそしてより予測どおりの性能を持つでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your implementation returns an instance of one of the types above, that type’s specialized description is used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの実装が上の型の１つのインスタンスを返すならば、その型の持つ特殊化された記述が使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your sequence might have duplicate keys, use the Dictionary(_:uniquingKeysWith:) initializer instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーケンスが重複するキーを持つかもしれないならば、Dictionary(_:uniquingKeysWith:)イニシャライザを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your type contains properties that don't affect whether two instances are considered equal, exclude those properties from comparison in the == method and from hashing in hash(into:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのインスタンスが等しいと考えられるかどうかに影響しないプロパティをあなたの型が含むならば、それらプロパティを==メソッドでの比較から、そしてhash(into:)でのハッシュ化から除外してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your type has value semantics, the playgroundDescription should be unaffected by subsequent mutations, if possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型が値意味論を持つならば、playgroundDescriptionはその後の変化によって影響を受けないべきです、できれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your type’s playgroundDescription returns an instance which itself conforms to CustomPlaygroundDisplayConvertible, then that type’s playgroundDescription will be used, and so on.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型の持つplaygroundDescriptionがそれ自体がCustomPlaygroundDisplayConvertibleに準拠するインスタンスを返すならば、そのときその型の持つplaygroundDescriptionが使われます、などなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re passing a generator that results in the same sequence of Boolean values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じブール値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ要素からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ浮動小数点値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re passing a generator that results in the same sequence of integer values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じ整数値からなるシーケンスという結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあなたのプログラムを実行するたびごとに同じシャッフルされた順番という結果になる生成子を渡すならば、そのシーケンスは、あなたのプログラムが異なるSwiftバージョンを使ってコンパイルされる時に変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re sure of the dynamic type of obj, you can call getIntegerValue() directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがobjの動的型に確信を持つならば、あなたはgetIntegerValue()を直接に呼び出すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you’re working directly with numeric values, use the addition operator (+) instead of this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが直接に数値を扱っているならば、加算演算子（+）をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ill-formed sequences are replaced with the Unicode replacement character ("\u{FFFD}").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>誤形式シーケンスは、ユニコード代替文字（"\u{FFFD}"）で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Imagine you have a set of temperature data for which you need to report some general statistics: the total number of observations, the number of valid observations, and the average temperature.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが幾つかの一般統計：観測総数、有効観測数、そして平均温度を報告しなければならない一揃いの温度データを持つと想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implement this method to conform to the Hashable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを実装して、Hashableプロトコルに準拠してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implementing an iterator that conforms to IteratorProtocol is simple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IteratorProtocolに準拠するイテレータを実装するのは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicit Casting and Bridging</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的なキャストとブリッジ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import Code Within a Framework Target</seg>
      </tuv>
      <tuv lang="JA">
        <seg>フレームワークターゲット内部でコードをインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import Code Within an App Target</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリターゲット内部でコードをインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import Related Functions into Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連する関数をSwiftにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import Swift code into Objective-C within the same framework:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftコードをObjective-Cへと同じフレームワーク内部でインポートする：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import relevant system frameworks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連のあるシステムフレームワークをインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import the Swift code from that framework target into any Objective-C .m file within that target using this syntax and substituting the appropriate names:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのフレームワークターゲットからのSwiftコードを何らかのObjective-C .mファイルにそのターゲット内部で、この構文を使ってそして適切な名前で置き換えて、インポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Import your Objective-C files by configuring the umbrella header:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのObjective-Cファイルをアンプレラヘッダを構成設定することによってインポートしてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Important</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Imported C and Objective-C APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたCおよびObjective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Importing Objective-C into Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-CをSwiftにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Importing Swift into Objective-C</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftをObjective-Cにインポートする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Improving Objective-C API Declarations for Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C API宣言をSwift用に改める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -O builds, has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Oビルドでは、影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -O builds, no test is performed to ensure that x actually has the dynamic type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Oビルドにおいて、全くテストは実行されずxが実際に動的型Tを持つことを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -Ounchecked builds, the optimizer may assume that this function is never called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Ouncheckedビルドでは、最適化はこの関数が決して呼ばれないと決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -O builds (the default for Xcode’s Release configuration), condition is not evaluated, and there are no effects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Oビルド（省略時のXcodeのRelease構成）では、conditionは評価されません、そして影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -O builds (the default for Xcode’s Release configuration), stops program execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Oビルド（XcodeのRelease構成の初期設定）では、プログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -O builds (the default for Xcode’s Release configuration): If condition evaluates to false, stop program execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Oビルド（省略時のXcodeのRelease構成）では：conditionがfalseに評価されるならば、プログラム実行を止めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -Ounchecked builds, condition is not evaluated, but the optimizer may assume that it always evaluates to true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Ouncheckedビルドにおいて、conditionは評価されません、しかし最適化は、それが常にtrueに評価されると決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In -Ounchecked builds, the optimizer may assume that this function is never called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-Ouncheckedビルドでは、最適化はこの関数が決して呼ばれないと決めてかかります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Build Settings, in Swift Compiler - Code Generation, make sure the Objective-C Bridging Header build setting has a path to the bridging header file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Build Settingsにおいて、Swift Compiler - Code Generationで、Objective-C Bridging Header ビルド設定がブリッジヘッダファイルに対するパスを持つことを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Cocoa, methods that produce errors take an NSError pointer parameter as their last parameter, which populates its argument with an NSError object if an error occurs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoaでは、エラーを生成するメソッドはNSErrorポインタパラメータをそれらの最後のパラメータとして取ります、エラーが発生するならばその引数にNSErrorオブジェクトが入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Objective-C, a key is a string that identifies a specific property of an object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cでは、キーはオブジェクトの特定のプロパティを識別する文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Objective-C, a selector is a type that refers to the name of an Objective-C method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Ojbective-Cでは、セレクタはObjective-Cメソッドの名前を参照するある型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Objective-C, exceptions are distinct from errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cにおいて、例外はエラーとは別個のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Objective-C, it's declared like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cでは、それはこのように宣言されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Objective-C, the id type represents objects that are instances of any Objective-C class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cでは、id型は、何らかのObjective-Cクラスのインスタンスであるオブジェクトを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Objective-C, you work with references to objects by using pointers that can be null, called nil in Objective-C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cでは、あなたはオブジェクトへの参照をヌル、Objective-Cにおいてnilと呼ばれるもの、であることが可能なポインタを使用して扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, reachability refers to the ability to produce one value from the other through zero or more applications of index(after:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、到達可能性 reachabilityは、ゼロ以上のindex(after:)の適用を通して、ある値を別のものから生み出す能力のことを言います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, Objective-C selectors are represented by the Selector structure, and you create them using the #selector expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、Objective-CセレクタはSelector構造体によって表されます、そしてあなたはそれらを#selector式を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, all values — including object instances — are guaranteed to be non-null.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、すべての値は — オブジェクトインスタンスを含めて — 非ヌルであることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, calling a method that throws requires explicit error handling.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトでは、スローするメソッドを呼び出すことは明確にエラー処理することを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, it’s imported like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトでは、それはこのようにインポートされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, only class instances and metatypes have unique identities.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、クラスインスタンスとメタタイプだけが固有な識別子を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, the UITableViewCellStyle enumeration is imported like this:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、UITableViewCellStyle列挙はこのようにインポートされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you can call C variadic functions, such as vasprintf(_:_:_:), using the Swift getVaList(_:) or withVaList(_:_:) functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたはC可変長引数関数、例えばvasprintf(_:_:_:)などを呼び出すことが、SwiftのgetVaList(_:)またはwithVaList(_:_:)関数を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you can recover from errors passed using Cocoa’s error pattern, as described above in Catch Errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたはCocoaのエラーパターンを使って渡されるエラーから復旧できます、上のエラーをキャッチするで記述されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you can use each pair of toll-free bridged Foundation and Core Foundation types interchangeably.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトにおいて、あなたは、トールフリーブリッジ（無料の橋渡し）されたFoundationとCore Foundation型の各対を入れ替えて使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you can use functions and generics to achieve the same results without any compromises.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトでは、あなたはどんな妥協もなしで同じ結果を成し遂げるために、関数と総称体を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you create a selector for an Objective-C method by placing the name of the method within the #selector expression: #selector(MyViewController.tappedButton(_:)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたはセレクタをObjective-Cメソッドに対して、そのメソッドの名前を#selector式の内部に置くことによって作成します：#selector(MyViewController.tappedButton(_:))。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you use the #selector and #keyPath expressions to represent those method or property names as selectors or key paths, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたは#selectorと#keyPath式を使って、それらメソッドまたはプロパティ名をセレクタまたはキーパスとして表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Swift, you use the @available attribute to control whether a declaration is available to use when building an app for a particular target platform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでは、あなたは@available属性を使うことで、あるアプリを特定の対象プラットホーム用にビルドする時に、ある宣言が利用に応じられるかを制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a CollectionOfOne instance, endIndex is always 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CollectionOfOneインスタンスにおいて、endIndexは常に1です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a CollectionOfOne instance, startIndex is always 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるCollectionOfOneインスタンスにおいて、startIndexは常に0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a Repeated collection, endIndex is always equal to count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Repeatedコレクションにおいて、endIndexは常にcountと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a Repeated collection, startIndex is always equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Repeatedコレクションにおいて、startIndexは常にゼロと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a Zip2Sequence instance, the elements of the ith pair are the ith elements of each underlying sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Zip2Sequenceインスタンスにおいて、i番目の対に属する要素らは、基盤となるシーケンスそれぞれのi番目の要素です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a case like this, where a generic parameter T is bound to a protocol P, the type parameter is not statically known to be a protocol type in the body of the generic function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このような場合において、総称体パラメータTがプロトコルPに束縛されるところでは、その型パラメータは、プロトコル型であることを総称体関数の本文において静的に知られません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a collection, the subsequence should also conform to Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションにおいて、下位シーケンスはまたCollectionに準拠すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a mirror created with this ancestor representation, the superclassMirror property is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この先祖表現で作成されるミラーにおいて、superclassMirrorプロパティはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a mutable Dictionary instance, you can modify in place a value that you’ve accessed through a keyed subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変のDictionaryインスタンスでは、あなたがキーによる添え字を通してアクセスしたある値をその場で修正できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to changing the value of an individual element, you can also change the values of a slice of elements in a mutable collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある一個の要素の値を変えることに加えて、あなたはまた可変コレクションの要素のスライスに属するいくらかの値を変更することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to checking whether the base scalar has isEmoji == true, you must also check its default presentation (see isEmojiPresentation) and determine whether it is followed by a variation selector that would modify the presentation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基底スカラーがisEmoji == trueであるかどうかを調べることに加えて、あなたはまたそれの省略時の表現を調べて（isEmojiPresentationを見てください）そしてその表現を修正する異字体セレクタがそれの後に続くかどうかを判定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to creating a character from a single-character string literal, you can also convert a unicode scalar value or single-character string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字を単一文字文字列リテラルから作成することに加えて、あなたはまた、あるユニコードスカラー値や単一文字文字列を変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to creating a string from a single string literal, you can also create an empty string, a string containing an existing group of characters, or a string repeating the contents of another string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単独の文字列リテラルから文字列を作成することに加えて、あなたはまた、空の文字列、既存のいくつかの文字からなるグループを含んでいる文字列、または別の文字列の内容を繰り返している文字列を作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to its collection interface, an UnsafeMutableRawBufferPointer instance also supports the following methods provided by UnsafeMutableRawPointer, including bounds checks in debug mode:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのコレクションインターフェイスに加えて、UnsafeMutableRawBufferPointerインスタンスはまた、UnsafeMutableRawPointerによって提供される以下のメソッドをサポートし、デバッグモードにおける境界検査を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to its collection interface, an UnsafeRawBufferPointer instance also supports the load(fromByteOffset:as:) method provided by UnsafeRawPointer, including bounds checks in debug mode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのコレクションインターフェイスに加えて、UnsafeRawBufferPointerインスタンスはまた、load(fromByteOffset:as:)メソッドをUnsafeRawPointerによって提供されてサポートし、デバッグモードにおける境界検査を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to representing specific numbers, floating-point types also have special values for working with overflow and nonnumeric results of calculation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特定の数を表すことに加えて、浮動小数点型はまた、オーバーフローおよび非数の計算結果で使うための特別な値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to simplifying your code, this automatic conformance reduces errors, because any new properties you add to your custom types are automatically included when hashing and testing for equality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコードを単純にすることに加えて、この自動式の準拠はエラーを減らします、なぜならあなたのあつらえの型にあなたが加える何らかの新しいプロパティは、ハッシュ化および同等性テストをする場合に自動的に含まれるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to the Set type’s set operations, you can use any nonmutating sequence or collection methods with a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Set型の持つ集合演算に加えて、あなたはあらゆる非可変のシーケンスまたはコレクションメソッドを集合で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to the operations that collections inherit from the Sequence protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションがSequenceプロトコルから継承するメソッドに加えて、あなたは、コレクションの特定の位置で要素にアクセスすることを当てにするメソッドへの利用権を手に入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to using a dictionary literal, you can also create a dictionary using these initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルを使うことに加えて、あなたはまた辞書をこれらのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to using an array literal, you can also create a set using these initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルを使うことに加えて、あなたはまた集合をこれらのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to using an array literal, you can also create an array using these initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルを使うことに加えて、あなたはまた配列をこれらのイニシャライザを使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, because abs(_:) always returns a value of the same type, even in a generic context, using the function instead of the magnitude property is encouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて、abs(_:)は常に同じ型の値を返すことから、総称体の文脈においてさえも、この関数をmagnitudeプロパティの代わりに使うことは推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, because IntegerRef conforms to the Equatable protocol, instances can also be compared using the equal-to operator (==).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて、IntegerRefはEquatableプロトコルに準拠することから、インスタンスはまた同等性演算子（==）を使って比較されることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, because class instance properties are always stored out-of-line, their positions are not accessible using offset(of:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その上、クラスインスタンスプロパティは常にアウトオブラインに格納されることから、それらの位置はoffset(of:)によってアクセス可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as suffix(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらに加えて、二方向性のコレクションはいくらかのシーケンスおよびコレクションメソッドのもっと手際の良い実装を持ちます、例えばsuffix(_:)など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, the unqualified listOfObjects method uses the NSCopying generic constraint inferred from the List type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて、不適格listOfObjectsメソッドは、NSCopying総称体制約をList型から推論されて使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, there are two other edge cases:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えて、２つの別の境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an app that consults a remote database, for example, an instance's identity may be fully owned by an external entity and communicated by an identifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、リモートデータベースに助言を求めるアプリでは、あるインスタンスの持つ同一性は、外部存在によって完全に所有され、そしてある識別子によって伝えられるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty UTF-16 view, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のUTF-16ビューにおいて、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty UTF-8 view, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のUTF-8ビューにおいて、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty Unicode scalars view, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のユニコードスカラービューにおいて、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty collection, startIndex == endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のコレクションでは、startIndex == endIndex。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty range, lowerBound is equal to upperBound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の範囲では、lowerBoundはupperBoundに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty range, upperBound is equal to lowerBound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の範囲では、upperBoundはlowerBoundに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty string, endIndex is equal to startIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列が空ならば、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In an empty string, startIndex is equal to endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の文字列において、endIndexはstartIndexと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In asynchronous APIs, the result won't be available until sometime later; this difference affects how you write code both in your closure as well as the code following your closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非同期APIでは、結果はいつか後まで利用可能でないでしょう；この違いは、あなたがコードを書く方法に、あなたのクロージャにおいてそれだけでなくあなたのクロージャの後のコードの両方で影響します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case of an invalid input value, nil is returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無効な入力値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case of an invalid input value, the result is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無効な入力値の場合には、結果はnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case of an invalid unicode scalar value, nil is returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無効なユニコードスカラー値の場合には、nilが返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In cases like this, the simplest fix is often to simply remove the call to reserveCapacity(_:), and let the append(_:) method grow the array for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このような場合に、最も簡単な修正はしばしば単純にreserveCapacity(_:)の呼出しを取り除いて、そしてappend(_:)メソッドがあなたの代わりの配列を成長させるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In code, the absence of a value is typically written using the nil literal rather than the explicit .none enumeration case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コードにおいて、ある値の不在は一般的にnilリテラルを使って書かれます、明示的な.none列挙ケース節ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In debug builds (-Onone), the unsafelyUnwrapped property has the same behavior as using the postfix ! operator and triggers a runtime error if the instance is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグビルド（-Onone）において、unsafelyUnwrappedプロパティは後置!演算子を使うのと同じ挙動を持ち、そしてインスタンスがnilならば実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In debug builds, an instance in the left-hand side of a &amp;&amp; or || expression may still be referenced when evaluating the right-hand side, inflating the instance’s reference count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッグビルドにおいて、&amp;&amp;または||式の左手側でのインスタンスは、右手側を評価している時に依然として参照されるかもしれません、インスタンスのもつ参照カウントを上昇させながら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, s.flatMap(transform)  is equivalent to Array(s.map(transform).joined()).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際のところ、s.flatMap(transform)はArray(s.map(transform).joined())に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, though, the observability of mutations is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もっとも、一般的に変異体の観察性は未規定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In many cases, only one sequence of calls is correct for your app, so it's important to think through what the state of your app will be, given the APIs you're using.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの場合に、ただ１つの呼び出し順番だけがあなたのアプリにとって正しいです、それで重要なのは、あなたが使うAPIを与えられて、あなたのアプリの状態がどうなるのか考え抜くことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In most cases, you should use the equal-to operator (==) to test whether two instances are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ほとんどの場合、あなたは同等演算子（==）を使って２つのインスタンスが等しいかどうかをテストするべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In most cases, you won't need to modify this setting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ほとんどの場合では、あなたはこの設定を修正する必要はないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to use recursion without making copies of the strings at each step, countLetterChanges(_:_:) uses Substring, a string’s slice type, for its parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各段階で文字列のコピーを作ることなく反復を使う手段として、countLetterChanges(_:_:)はSubstring、文字列の持つスライス型、をそれのパラメータに対して使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other languages, similar data types are known as hashes or associated arrays.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他の言語では、同じようなデータ型はハッシュまたは連想配列として知られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, for ordinary collections c having bidirectional indices:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えると、二方向性のインデックスを持つ通常のコレクションcは：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other words, for ordinary sequences s:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言い換えれば、よくあるシーケンス sに対して：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, MemoryLayout&lt;T&gt;.size, when T is a class type, is the same regardless of how many stored properties T has.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に、MemoryLayout&lt;T&gt;.sizeは、Tがクラス型の時、Tがどのくらい多くの格納プロパティを持つかに関係なく同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, x.sign == .minus if x is -0, and while x &lt; 0 is always false if x is NaN, x.sign could be either .plus or .minus.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、xが-0ならばx.sign == .minus、一方でxがNaNならば、x.signが.plusまたは.minusのどちらでも、x &lt; 0は常にfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, because cafe was declared using the decomposed form of the "é" character, unicodeScalars contains the scalar values for both the letter "e" (101) and the accent character "´" (769).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、cafeは分解形式の"é"文字を使って宣言されたことから、unicodeScalarsは字"e"（101）とアクセント文字"´"（769）両方のスカラー値を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafeMutablePointer initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、暗黙的ブリッジをUnsafeMutablePointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafeMutableRawPointer initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、暗黙的ブリッジをUnsafeMutableRawPointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafePointer initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、暗黙的ブリッジをUnsafePointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, do not use implicit bridging when calling an UnsafeRawPointer initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、暗黙的ブリッジをUnsafeRawPointerイニシャライザを呼ぶ時に使わないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, negating a signed, fixed-width integer type’s minimum results in a value that cannot be represented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、符号付きの、固定長整数型の最小値を負にすることは、表現できない値という結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, note that j, the index of the second day with absences, was found in a slice of the original array and then used to access a value in the original absences array itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に、欠席者のいる第２の日付のインデックス、jが、オリジナル配列のひとつのスライス上で捜されて、それから値のアクセスのためにオリジナルのabsences配列自身において使われる点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, passing NaN as other always results in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、NaNをotherとして渡すことは常にnilの結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, pointers and class instances all have the same contiguous memory footprint, regardless of the size of the referenced data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に、ポインタおよびクラスインスタンスは、すべて同じ隣接メモリフットプリントを持ちます、参照されたデータの大きさに関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, that slice, unlike an array, may have a nonzero startIndex and an endIndex that is not equal to count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に、そのスライスは、配列と違い、非ゼロのstartIndexとcountに等しくないendIndexを持つかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the absolute value of a signed, fixed-width integer type’s minimum cannot be represented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、符号付きの、固定長整数型の最小数の絶対値は、表現することは可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the names "Alicia", "Chris", and "Diana" are removed from employees while the names "Forlani" and "Greta" are added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個別的には、名前"Alicia"、"Chris"、そして"Diana"は、employeesから削除される一方で名前"Forlani"と"Greta"は加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the names "Bethany" and "Eric" are removed from employees while the name "Forlani" is added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個別的には、名前"Bethany"と"Eric"はemployeesから削除される一方、名前"Forlani"は加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the names "Bethany" and "Eric" do not appear in eitherNeighborsOrEmployees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個別的には、名前"Bethany"と"Eric"は、eitherNeighborsOrEmployeesの中に現れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the names "Alicia", "Chris", and "Diana" are removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個別的には、名前"Alicia"、"Chris"、そして"Diana"は、削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the names "Bethany" and "Eric" are removed from employees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個別的には、"Bethany"と"Eric"がemployeesから削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, this discussion mentions extended grapheme clusters and Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、この解説は拡張書記素クラスタとユニコードスカラー値について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, this discussion mentions extended grapheme clusters, Unicode scalar values, and canonical equivalence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、この解説は拡張書記素クラスタ、ユニコードスカラー値、そして正準等価について言及します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, to find the value matching a key, you must search through every element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に、あるキーに合った値を見つけるには、あなたはコレクションのすべての要素を通して検索しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stop program execution in a debuggable state after printing message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドおよび-Ononeビルド（省略時のXcodeのDebug構成）では、messageを出力した後にデバッグ可能状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stops program execution in a debuggable state after printing message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドおよび-Ononeビルド（XcodeのDebug構成の初期設定）では、messageを出力した後デバッグ可能な状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In playgrounds and -Onone builds (the default for Xcode’s Debug configuration): If condition evaluates to false, stop program execution in a debuggable state after printing message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドおよび-Ononeビルド（省略時のXcodeのDebug構成）において：conditionがfalseに評価されるならば、messageを出力した後にデバッグ可能状態でプログラム実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In practice, the distinction between digit and numeric has not proven to be valuable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実際には、digitとnumericの区別は、有益であると証明されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In simple cases, types conforming to ExpressibleByStringInterpolation can use DefaultStringInterpolation instead of writing their own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単純な場合には、ExpressibleByStringInterpolationに準拠する型それらは、DefaultStringInterpolationを使用できます、それら自身で書く代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some cases, oldMember may be distinguishable from newMember by identity comparison or some other means.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの場合には、oldMemberは同一性比較または何らかの他の意味でnewMemberから区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some cases, a returned element may be distinguishable from newMember by identity comparison or some other means.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの場合には、ある返される要素は、同一性比較または何らかの他の意味でnewMemberから区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some cases, the returned element may be distinguishable from newMember by identity comparison or some other means.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの場合には、返される要素は、同一性比較または何らかの他の意味でnewMemberから区別可能であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some uses, such as in a class initializer, you may find that the language rules do not allow you to use withVaList(_:_:) as intended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらの利用では、例えばclassでのように、あなたは言語規則があなたにwithVaList(_:_:)を意図したように利用させないのを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In synchronous APIs, the result of calling the closure will be available immediately after you pass the closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同期APIでは、クロージャ呼び出しの結果は、あなたがクロージャを渡した直後に利用可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case, a string’s unicodeScalars view contains more elements than the string itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その場合には、文字列のもつunicodeScalarsビューは、その文字列それ自体より多くの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case, the default value and key are not written back to the dictionary after an operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その場合には、省略時の値とキーは、演算の後に辞書へと書き戻されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case, the method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その場合には、このメソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Zip2Sequence instance returned by this function, the elements of the ith pair are the ith elements of each underlying sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数によって返されるZip2Sequenceインスタンスにおいて、i番目の対の要素らは、基盤となる各シーケンスのi番目の要素らです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the hash(into:) method, call the combine(_:) method on the provided hasher with each significant property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hash(into:)メソッドにおいて、combine(_:)メソッドをその提供されたhasher上で各重要プロパティとともに呼び出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case of secondCodeUnit, that character is still the flag itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>secondCodeUnitの場合では、その文字は依然として旗それ自体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case of the Directions option set, an instance can contain zero, one, or more of the four defined directions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Directionsオプションセットの場合では、あるインスタンスは４つ定義された方向のうちゼロ、１つ、またはそれ以上を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the encoded representation of a Unicode scalar value, each UTF-8 code unit after the first is called a continuation byte.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるユニコードスカラー値の符号化された表現において、最初のものの後の各UTF-8コード単位は、継続バイトと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example above, moreNumbers has the same type as numbers, which is [Int].</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の例において、moreNumbersはnumbersと同じ型を持ちます、それは[Int]です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example above, firstSpace is used to extract the prefix that contains elements up to that index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の例において、firstSpaceは、そのインデックスまでの要素を含んでいる前の部分を抜き取るために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example below, jsonResponse contains an encoded PenPalRecord instance from a server:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例において、jsonResponseは、あるサーバからのエンコード済みPenPalRecordインスタンスを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example below, a numbers array is created along with two copies that share the same storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例において、numbers配列は２つのコピーと連れだって作成されます、それは同じストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example below, changing the value of the isAlive computed property on an instance of the SchroedingersCat structure also changes the value of the instance’s isDead computed property:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例において、isAlive計算プロパティの値をSchroedingersCat構造体のインスタンス上で変更することは、またそのインスタンスのisDead計算プロパティの値も変更します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example below, the \.objectToObserve.myDate key path refers to the myDate property of MyObjectToObserve:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例において、\.objectToObserve.myDateキーパスは、MyObjectToObserveのmyDateプロパティを参照します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example, obj has a static type of AnyObject and a dynamic type of IntegerRef.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例において、objはAnyObjectの静的型とIntegerRefの動的型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the example, because the express static property is assigned an array literal with the nextDay and secondDay options, it will contain those two elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例において、express静的プロパティはnextDayとsecondDayオプションを持つ配列リテラルを割り当てられるので、それはそれら２つの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following code, the count variable has the same static and dynamic type: Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードにおいて、count変数は同じ静的および動的型：Intを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, keyPath1 and keyPath2 are equivalent:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、keyPath1とkeyPath2は同等です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, ptr is a pointer to memory initialized with a value of 23:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、ptrは23の値で初期化されるメモリに対するポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, y is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、yはNaNです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, a new element is inserted into classDays, a set of days of the week.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、新しい要素が、一揃いの曜日classDaysへ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、数からなる配列は、30より大きな要素に合致するという述部によって仕切られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the .priority shipping option is removed from the options option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、.priority出荷オプションは、optionsオプションセットから削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the .secondDay shipping option is added to the freeOptions option set if purchasePrice is greater than 50.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、.secondDay出荷オプションは、purchasePriceが50.0より大きいならば、freeOptionsオプションセットを加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the asciiTable sequence is made by zipping together the characters in the alphabet string with a partial range starting at 65, the ASCII value of the capital letter A. Iterating over two zipped sequences continues only as long as the shorter of the two sequences, so the iteration stops at the end of alphabet.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、asciiTableシーケンスは、alphabet文字列中の文字を65で始まるある部分範囲と一緒に閉じ合わせることによって作られます。２つの閉じ合わされたシーケンスそれらに反復することは、より短いほうと同じだけ続きます、それでこの反復はalphabetの終わりで停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the attendeesAndVisitors set is made up of the elements of the attendees and visitors sets:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、attendeesAndVisitors集合はattendeesとvisitors集合の要素から作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the attendeesAndVisitors set is made up of the elements of the attendees set and the visitors array:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、attendeesAndVisitors集合はattendees集合とvisitors配列の要素から作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the bothNeighborsAndEmployees set is made up of the elements that are in both the employees and neighbors sets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、bothNeighborsAndEmployees集合はemployeesとneighbors集合の両方にある要素から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the eitherNeighborsOrEmployees set is made up of the elements of the employees and neighbors sets that are not in both employees and neighbors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、eitherNeighborsOrEmployees集合はemployeesとneighbors集合の要素で、employeesおよびneighborsの両方の中にはないものから作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the employees set is disjoint with the visitors set because no name appears in both sets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、employees集合はvisitors集合と交わりを持ちません、両方に現れる名前がないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the employees set is disjoint with the elements of the visitors array because no name appears in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、employees集合はvisitors配列の要素と交わりを持ちません、両方に現れる名前がないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the nonNeighbors set is made up of the elements of the employees set that are not elements of neighbors:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、nonNeighbors集合はemployees集合の要素でneighborsの要素でないものから作り上げられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the numberToMatch constant is wrapped as an optional before comparing to the optional numberFromString:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>続く例において、numberToMatch定数は、オプショナルnumberFromStringとの比較の前にオプショナル値としてラップされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the random(in:) function uses numericCast(_:) twice to convert the argument and return value of the arc4random_uniform(_:) function to the appropriate type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、random(in:)関数はnumericCast(_:)を２度使うことで、引数とarc4random_uniform(_:)関数の戻り値を適切な型へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例では、そのクロージャは、あるHTTP応答を記述するあつらえ列挙の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the constant y is successfully created from x, an Int instance with a value of 100.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、定数yは、Intインスタンスで100の値を持つxからうまく作成されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the constant x is successfully created from a value of 100, while the attempt to initialize the constant y from 1_000 fails because the Int8 type can represent 127 at maximum:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、定数xは100の値から首尾よく作り上げられます、一方で定数yを1_000から初期化する試みは失敗します、なぜならInt8型は最大で127を表現可能だからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>続く例において、定数xは21.0の値から首尾よく作成されます、一方で定数yを21.5から初期化する試みは失敗します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the difference of 10 and 21 is less than zero, the minimum representable UInt value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、10と21の差はゼロ、最小限表現可能なUInt値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the difference of 10 and 21 is less than zero, the minimum representable UInt value, so the result is the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、10と21の差はゼロ、最小限表現可能なUInt値、よりも少ないです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the elements of the employees set that are also elements of the neighbors array are removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、employees集合の要素でまたneighbors配列の要素でもあるものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the elements of the employees set that are also members of neighbors are removed from employees, while the elements of neighbors that are not members of employees are added to employees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、employees集合の要素でまたneighborsのメンバであるものはemployeesから削除されます、一方でneighborsの要素でemployeesの要素でないものはemployeesに加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the elements of the employees set that are also members of the neighbors set are removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、employees集合の要素でまたneighbors集合のメンバでもあるものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the elements of the employees set that are not also members of the neighbors set are removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、employees集合の要素でまたneighbors集合のメンバではないものは削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the elements of the visitors set are added to the attendees set:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、visitors集合の要素はattendees集合に加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the key-value pair for the key "Aquamarine" is removed from the dictionary by assigning nil to the key-based subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、"Aquamarine"に対するキー値ペアは、nilをキー基盤の添え字に割り当てることによって辞書から削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例では、その述部はあつらえのHTTPResponse型の配列に対してある順序付けを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the product of 10 and 50 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、10と50の積は、最大限表現可能なInt8値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the result of 21 * 21 is greater than the maximum representable Int8 value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、21 * 21の結果は、最大限表現可能なInt8値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the result of 21 + 120 is greater than the maximum representable Int8 value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、21 + 120の結果は、最大限表現可能なInt8値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the result of 21 - 50 is less than zero, the minimum representable UInt8 value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、21 - 50の結果は、最大限表現可能なUInt8値より大きいです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the sum of 100 and 121 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例において、100と121の合計は、最大限表現可能なInt8値より大きいです、それで結果はオーバーフローするビットを廃棄後の部分的な値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the following example, the value 127.75 is rounded to 127, which is representable by the Int8 type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>続く例において、値127.75は127へ丸められます、それはInt8型によって表現可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the implementations above, the Player type uses name and position in both methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の実装において、Player型はnameとpositionを両方のメソッドにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next example, y has a value of 21.5, which is encoded as 1.34375 * 2 ** 4.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例において、yは21.5の値を持ちます、それは1.34375 * 2 ** 4のようにエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next example, an integer literal is compared with the optional integer numberFromString.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例では、整数リテラルがオプショナル整数numberFromStringと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next example, the .express element is passed to remove(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例では、.express要素がremove(_:)に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the standard library, you can use the Set type with elements of any hashable type, or you can easily create bit masks with SetAlgebra conformance using the OptionSet protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリにおいて、あなたはSet型を何らかのハッシュ型の要素で使うことができます、またはあなたはSetAlgebra準拠を持つビットマスクをOptionSetプロトコルを使って簡単に作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the umbrella header, import every Objective-C header you want to expose to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アンブレラヘッダにおいて、あなたが望むあらゆるObjective-CヘッダをインポートすることでSwiftに露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these scenarios, use the NS_ENUM macro instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの予想される事態には、NS_ENUMマクロを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, see the documentation of Collection.underestimatedCount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合には、Collection.underestimatedCountの文書を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the numberOfCookies constant has the default type for an integer literal, Int, as designated by the IntegerLiteralType type alias.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合では、numberOfCookies定数は整数リテラルに対する省略時型、Intを持ちます、IntegerLiteralType型エイリアスによって設計されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the newly created set drops the duplicate value (“Dave”) and doesn’t maintain the order of the array literal’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合において、新たに作成された集合は、重複した値（「Dave」）を落とします、そして配列リテラルのもつ要素の順番を維持しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the values stored in the array are references to objects that live outside the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、配列に格納される値らは、その配列の外側で生活しているオブジェクトらへの参照です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合、あるシーケンスが消耗可能になっているそして反復を再開することになるか、またはあるシーケンスがコレクションであるそして最初の要素から反復を再度着手することになるか、あなたはどちらか決めてかかることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, 100 bytes of raw memory are allocated for the pointer bytesPointer, and then the first four bytes are bound to the Int8 type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例では、100バイトの生のメモリがポインタbytesPointerに対して割り当てられて、それから最初の４バイトがInt8型に束縛されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, filter(_:) is used to include only names shorter than five characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、filter(_:)は５つの文字より短い名前のみ含めるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, goodNumber is assigned a value of 100 because Int("100") succeeded in returning a non-nil result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、goodNumberは100の値を割り当てられます、なぜならInt("100")が非nilの結果を返すことに成功したからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, goodNumber is assigned a value of 100 because Int("100") succeeds in returning a non-nil result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、goodNumberは100の値を割り当てられます、なぜならInt("100")が非nilの結果を返すことに成功するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, lhs tests whether error is an empty string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、lhsはerrorが空の文字列かどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, lhs tests whether measurements.count is greater than zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、lhsはmeasurements.countがゼロより大きいかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例では、mapは最初に配列中の名前を小文字文字列に変換するために、それからそれらの文字を数えるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, x has a value of 21.5, which is stored as 1.34375 * 2**4, where ** is exponentiation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、xは21.5の値を持ちます、それは1.34375 * 2**4として格納されます、ここで**は冪です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, x is initialized as an Int8 instance by clamping 500 to the range -128...127, and y is initialized as a UInt instance by clamping -500 to the range 0...UInt.max.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、xはInt8インスタンスとして、500を範囲-128...127に制限すること（クランピング）によって初期化されます、そしてyはUIntインスタンスとして、-500を範囲0...UInt.maxに制限することによって初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, a new element is inserted into classDays, a set of days of the week.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、新しい要素が、一揃いの曜日classDaysへ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, accessing the text property of the smileyType metatype retrieves the overridden value from the EmojiSmiley subclass, instead of the Smiley class’s original definition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、smileyTypeメタタイプのtextプロパティにアクセスすることは、EmojiSmileyサブクラスからオーバーライドされた値を取って来ます、Smileyクラスのオリジナル定義ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, an Objective-C class that provides a convenience initializer that takes variadic arguments for key-value pairs suggests using a dictionary literal instead:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、可変長引数をキー値ペアに対して取る便宜イニシャライザを提供するあるObjective-Cクラスは、代わりに辞書リテラルを使うことを提案します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、３つの範囲からなる配列は平坦化されます、それで各範囲の要素は順に反復されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, an existing element is inserted into classDays, a set of days of the week.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、既存の要素が、一揃いの曜日classDaysへ挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, both assignments to the printedMessage variable call this Boolean literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、printedMessage変数への代入は両方ともこのブールリテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、mapとcompactMapを、オプショナルInt値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, note the difference in the result of using map and flatMap with a transformation that returns an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、mapとflatMapをある配列を返す変換とともに使うことの結果における違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, note the difference in the result of using map and flatMap with a transformation that returns an optional Int value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、mapとflatMapを、オプショナルInt値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, note the difference in the result of using mapValues and compactMapValues with a transformation that returns an optional Int value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、mapValuesとcompactMapValuesを、オプショナルInt値を返す変換とともに使う結果の違いに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the CFArrayCallBacks initializer uses nil values as arguments for the retain and release parameters, the customCopyDescription(_:) function as the argument for the customCopyDescription parameter, and a closure literal as the argument for the equal parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、CFArrayCallBacksイニシャライザはnil値をretainとreleaseパラメーターに対する引数として、customCopyDescription(_:)関数をcustomCopyDescriptionパラメーターに対する引数として、そしてクロージャリテラルをequalパラメーターに対する引数として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the case 3 expression uses this pattern-matching operator to test whether weekday is equal to the value 3.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例では、case 3式はこのパターンマッチング演算子を使ってweekdayが値3と等しいかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the colors array can be bridged to NSArray because the colors array’s String elements bridge to NSString.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例では、colors配列はNSArrayにブリッジできます、なぜならそれのcolors配列のもつString要素がNSStringにブリッジするからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the assignment to the i variable calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、i定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the assignment to the letterK constant is handled by this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、letterK定数への代入は、このイニシャライザによって舞台裏で取り扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the assignment to the twasBrillig constant calls this Boolean literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、twasBrillig定数への代入は、このブールリテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the assignment to the x constant calls this floating-point literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、x定数への代入は、この浮動小数点リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the assignment to the x constant calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、x定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the assignment to the x constant calls this integer literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、x定数への代入は、この整数リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the compiler infers the full type of each array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例では、コンパイラは各配列の完全な型を推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the expression singleDigits.dropFirst(5)) is equivalent to calling this initializer with singleDigits and a range covering the last five items of singleDigits.indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、式singleDigits.dropFirst(5))は、このイニシャライザをsingleDigitsおよびsingleDigits.indicesの終わり５項目を対象とする範囲とともに呼び出すことに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, the resulting array is the same length as words:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、結果の配列はwordsと同じ長さです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated&lt;Int&gt; instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例では、整数からなる配列の真ん中の３つの要素が、Repeated&lt;Int&gt;インスタンスの５つの要素によって置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this model, each state is represented by a case with a matching name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このモデルにおいて、各状態は合致する名前を持つケース節によって表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this model, the app defines two variables: an optional user that stores user information, and a Boolean value named sessionExpired.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このモデルでは、アプリは２つの変数を定義します：ユーザ情報を格納するオプショナルのuser、そしてsessionExpiredと名前をつけられるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your hash(into:) implementation, call combine(_:) on the provided Hasher instance with the essential components of your type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのhash(into:)実装において、combine(_:)をその提供されたHasherインスタンス上で、あなたの型の本質的な構成要素とともに呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your Objective-C bridging header, import every Objective-C header you want to expose to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのObjective-Cブリッジヘッダにおいて、あなたが露出したいあらゆるObjective-CヘッダをSwiftにインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Include Swift Classes in Objective-C Headers Using Forward Declarations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftクラスをObjective-Cヘッダの中に前方宣言を使ってインクルードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Including More Data in Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなるデータをエラーに含める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indentation is stripped from each line of a multiline string literal to match the indentation of the closing delimiter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>字下げは、複数行文字列リテラルの各行から剥ぎ取られて、閉じ区切り記号の字下げに合わせられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Index and iterator types for other sequence and collection types in the standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの中の他のシーケンスとコレクション型のためのインデックスとイテレータ型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that a precondition was violated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは前提条件が破られたことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates that an internal sanity check failed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはある内部的な正常性確認が失敗したことを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indices and Iterators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インデックスとイテレータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indices of a slice can be used interchangeably with indices of the base collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライスのインデックスは、基盤コレクションのインデックスと交換可能に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>二方向性のコレクションにおいて前方および後方に移動されるインデックス値は、各方向で同じ量だけ移動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Individual Unicode Scalar Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>個々のユニコードスカラー値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inequality is the inverse of equality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不等性は、同等性の裏返しです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Infinite values with the same sign are equal to each other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じ符号を持つ無限大値は互いに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Infinity</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Infinity compares greater than all finite numbers and equal to other infinite values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限大は、すべての有限の数より大きい、そして他の無限大の値と等しいと比較されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Infix operators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>中置演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Information about an error condition including a domain, a domain-specific error code, and application-specific information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある領域、ある領域特有のエラーコード、そしてアプリケーション特有の情報を含んでいるエラー条件についての情報。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Infrequently Used Functionality</seg>
      </tuv>
      <tuv lang="JA">
        <seg>滅多に使われない機能性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Infrequently Used Intializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>滅多に使われないイニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inherited By</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承される先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inherits From</seg>
      </tuv>
      <tuv lang="JA">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initialization with Literals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リテラルを使った初期化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initialization, assignment, and deinitialization can be performed using UnsafeMutablePointer methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化、代入、そしてデイニシャライズは、UnsafeMutablePointerメソッドを使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initialized Memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化済みメモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializer methods are imported by Swift with double underscores (__) prepended to their first argument labels.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザメソッドそれらは、Swiftによって、それらの最初の引数ラベルの前に付けられる二重アンダースコア（__）を使ってインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes every element in this buffer’s memory to a copy of the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファのもつメモリの中の全ての要素を与えられた値のコピーへと初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the buffer’s memory with the given elements, binding the initialized memory to the elements’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファのもつメモリを与えられた要素で初期化します、初期化されたメモリを要素のもつ型に束縛します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the buffer’s memory with the given elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたいくらかの要素を使ってバッファの持つメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the memory referenced by this buffer with the given value, binds the memory to the value’s type, and returns a typed buffer of the initialized memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファによって参照されるメモリを与えられた値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリの型付バッファを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the memory referenced by this pointer with the given value, binds the memory to the value’s type, and returns a typed pointer to the initialized memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリを与えられた値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer, binds the memory to the values’ type, and returns a typed pointer to the initialized memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まる値で初期化して、そのメモリを値の型に束縛し、そして初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer, binds the memory to the values’ type, deinitializes the source memory, and returns a typed pointer to the newly initialized memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まる値で初期化して、そのメモリを値の型に束縛し、元となるメモリをデイニシャライズして、そして新しく初期化されたメモリへの型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes the memory referenced by this pointer with the values starting at the given pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリを、与えられたポインタで始まるいくらかの値で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes this pointer’s memory with a single instance of the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタのもつメモリを、与えられた値の単一のインスタンスで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes this pointer’s memory with the specified number of consecutive copies of the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタのもつメモリを、指定された数の与えられた値の連続コピーで初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Input and Output</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入力と出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserting Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字の挿入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts a collection of characters at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列からなるコレクションを指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts a new character at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい文字を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts a new element at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある新しい要素を指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts a new element into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある新しい要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the elements of a sequence into the collection at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスに属する複数の要素をコレクションへ指定された位置で挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the elements of another set into this option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別のセットの要素をこのオブションセットへと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the elements of the given sequence into the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの要素を集合に挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the given element in the set if it is not already present.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが既に存在するのでないならば、与えられた要素を集合へと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the given element into the set unconditionally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素を集合へと無条件に挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inserts the given element into the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素をセットへと挿入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside unit test targets, you can access imported internal declarations as if they were public by prepending @testable to the product module import statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニットテスト内部で、あなたはインポートされたinternal宣言に、まるでそれらがパブリックだったかのようにアクセスすることが、製品モジュールインポート文に@testableを前に付けることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Boolean</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブールを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Buffer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Character</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表意文字を調べる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Dictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Range</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Scalar</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting a String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting an Array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列を調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspecting an Optional</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナルを調査する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Casting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスのキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスメソッド </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>様々なインスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance Property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of UnfoldSequence are created with the functions sequence(first:next:) and sequence(state:next:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnfoldSequenceのインスタンスは、関数sequence(first:next:)およびsequence(state:next:)で作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of the StaticString type are immutable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StaticString型のインスタンスは、不変です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of the type can be created from the actual numeric value using the init(rawValue:) initializer, and combining classes with symbolic names can also be referenced using the static members that share those names.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その型のインスタンスは、実際の数値からinit(rawValue:)イニシャライザを使って作成できます、そしてクラスをシンボリック名それらと結合することはまた、それらの名前を共有する静的メンバを使って参照されることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instances of types that conform to the TextOutputStreamable protocol can write their value to instances of any type that conforms to the TextOutputStream protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>TextOutputStreamableプロトコルに準拠する型のインスタンスは、それらの値をTextOutputStreamプロトコルに準拠するあらゆる型のインスタンスへ書き出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instantiates an instance of the conforming type from a string representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する型のインスタンスを文字列表現から初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of copying over the elements of a slice to new storage, an ArraySlice instance presents a view onto the storage of a larger array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある断片部分（スライス）の要素をすっかり新しいストレージにコピーする代わりに、ArraySliceインスタンスはある大きな配列に関するある見方（ビュー）を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of having constant time when averaged over many calls, the function may decay to performance that is linear in values.count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの呼出しの全体を平均したとき定数時を持つのではなく、values.countにおいて線形である性能を関数が衰えさせるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of only accessing the specific UTF-8 code unit, that index is treated as the position of the character at the index’s encoded offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特定のUTF-8コード単位にアクセスすることだけではなく、そのインデックスは、インデックスの持つエンコードされたオフセットでの文字の位置として扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of returning an iterator with a type that encapsulates the implementation of the collection, the digits() function first wraps the iterator in an AnyIterator instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの実装をカプセル化するある型をもつイテレータを返すのではなく、digits()関数はイテレータをAnyIteratorインスタンスの中にまずラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of trapping on out-of-range values, using the failable init?(exactly:) initializer results in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲外の値に関してトラップするのではなく、失敗できるinit?(exactly:)イニシャライザはnilという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, convert an instance of any type to a string by using the String(describing:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、String(describing:)イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, convert an instance of any type to a string by using the String(reflecting:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、どんな型のインスタンスでも文字列へと、String(reflecting:)イニシャライザを使って変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, create a new Bool instance by using one of the Boolean literals true or false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、新しいBoolインスタンスをブールリテラルのtrueまたはfalseのうち１つを使って作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, create a new array by using an array literal as its value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、配列リテラルをその値として使うことで新しい配列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, create a new set using an array literal as its value by enclosing a comma-separated list of values in square brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、新しい集合を配列リテラルをそれの値として、コンマ区切りの値のリストを角カッコで囲むことによって、作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, create a new value by using a literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、新しい値をリテラルを使うことによって作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, create a slice of a collection by using the collection’s range-based subscript or by using methods that return a subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、そのコレクションのもつ範囲に基づく添え字によって、または下位シーケンスを返すメソッドを使うことによって、コレクションのスライスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, define your own subsequence type that takes your index invalidation requirements into account.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、あなたのインデックス無効化要件を考慮に入れるあなた自身の下位シーケンス型を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, each presents a view onto the storage of the absences array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、absences配列のストレージ上でのひとつのビューをそれぞれが提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, initialize a variable or constant using a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、浮動小数点リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, initialize a variable or constant using a string literal with interpolated expressions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、補間式いくらかを持つある文字列リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, initialize a variable or constant using an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、整数リテラルを使って変数や定数を初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, initialize a variable or constant using one of the Boolean literals true and false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、変数や定数をブールリテラルtrueとfalseのうちの１つを使って初期化してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use an initializing method, such as initialize(to:count:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、初期化するメソッド、initialize(to:count:)などを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use an initializing method, such as initialize(to:count:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、初期化するメソッド、initialize(to:count:)などを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use only the UnsafeMutableBufferPointer argument to body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、UnsafeMutableBufferPointer引数だけをbodyに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use only the UnsafeMutableRawBufferPointer argument to body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その代わりに、UnsafeMutableRawBufferPointer引数だけをbodyに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use simple assignment to create a new constant or variable equal to this string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、単純な代入を使ってこの文字列と等しい新しい定数または変数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (\(…)).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、文字列補間を使って、バックスラッシュ\(…)を前に置いた丸括弧に囲まれた値、リテラル、変数、または式を含めることで、新しい文字列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use the body closure’s buffer argument to access the values in memory as instances of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、bodyクロージャの持つバッファ引数を使ってメモリ中の値に型Tのインスタンスとしてアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use the body closure’s pointer argument to access the values in memory as instances of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、bodyクロージャのもつポインタ引数を使うことで、メモリの中の値に型Tのインスタンスとしてアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use the Boolean literal false to create a new Bool instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、ブールリテラルfalseを使って新しいBoolインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, use the value’s isNaN property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、その値のisNaNプロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, when you need an operation to have a specific numeric result, filter out any NaN values using the isNaN property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうではなく、あなたがある特定の数値結果を持つ演算を必要とする場合、あらゆるNaN値をisNaN特性を使って除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, you can perform set operations with another set, an array, or any other sequence type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それどころか、あなたは集合演算を他の集合、配列、またはあらゆる他のシーケンス型とで実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, you must know the type of value previously in memory and initialize or assign the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、あなたは前もってメモリ中の値の型を知っていて、メモリを初期化またはアサインする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, you represent a value that could be missing as wrapped in an optional type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代わりに、あなたは見つからないかもしれない値をオプショナル型でラップすることで表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer Operators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integer Value Casting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数値のキャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interoperability makes it possible to integrate features migrated to Swift into Objective-C code with no hassle.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>相互運用性は、Swiftに移される特徴を、面倒なしでObjective-Cコードに統合することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolated expressions do not pass through this method; instead, Swift selects an overload of appendInterpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>補間式はこのメソッドを通り抜けません；代わりに、SwiftはappendInterpolationのオーバーロードを選択します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolates the given value’s textual representation into the string literal being created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値のもつテキスト表現を、その作成されている文字列リテラルへと補間します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invalid bytes are replaced by Unicode replacement characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無効なバイトは、ユニコード代替文字で置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes the given closure with a C va_list argument derived from the given array of arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを、その与えられた引数の配列から引き出されたC va_list引数で発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes the given closure with a buffer containing the static string’s UTF-8 code unit sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列のUTF-8コード単位シーケンスを含んでいるバッファとともに与えられたクロージャを発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes the given closure with a buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換しているバッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes the given closure with a mutable buffer pointer covering the raw bytes of the given argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを、与えられた引数の生のバイトを変換している可変バッファポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invokes the given closure with a pointer to the given argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを、与えられた引数に対するポインタとともに発動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It acts as an iterator by using a collection’s indices to step over each value in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、コレクションのインデックスを使ってコレクションの中の各値のすべてを渡っていくあるイテレータとしての役割を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also means that when you share a class instance across your app, changes you make to that instance are visible to every part of your code that holds a reference to that instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはまた、あなたがあるクラスインスタンスをあなたのアプリの至る所で共有する場合、あなたがそのインスタンスになす変更は、そのインスタンスに対する参照を保持するあなたのコードのあらゆる部分で見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also supports chaining through optional values within a chain, such as #keyPath(Person.bestFriend.name).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはまた、連鎖内でオプショナル値を通した連鎖をサポートします、例えば#keyPath(Person.bestFriend.name)など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does not attempt to cover multiple uses of some scalars, such as the use of letters to represent Roman numerals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、いくつかのスカラーの複数の使用を対象とすること、たとえばローマ数字を表すための複数の表音文字の使用など、を試みようとしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does not copy the elements from the collection into separate storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、要素をそのコレクションから別個のストレージへとコピーしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is called by the compiler to handle dictionary literals.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、辞書リテラルを取り扱うためにコンパイラによって呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is safe to use operations that put an upper limit on the number of elements they access, such as prefix(_:) or dropFirst(_:), and operations that you can guarantee will terminate, such as passing a closure you know will eventually return true to first(where:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>安全なのは、上側の限界をそれらがアクセスする要素数に置く演算、例えばprefix(_:)またはdropFirst(_:)など、そしてあなたが終わらせることができる演算、例えばあなたが結局はtrueをfirst(where:)に返すと知っているクロージャを渡すことなどの使用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is undefined behavior for the escapable closure to be stored, referenced, or executed after the function returns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数が返った後に格納、参照、または実行されることは、脱出可能クロージャにとって未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is undefined behavior to attempt to mutate through the pointer by conversion to UnsafeMutableRawBufferPointer or any other mutable pointer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタを通してUnsafeMutableRawBufferPointerまたは何か他の可変ポインタ型への変換によって変化させようと試みることは、未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is undefined behavior to try to mutate through the pointer argument by converting it to UnsafeMutablePointer or any other mutable pointer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタ引数を通して変化させることを、それをUnsafeMutablePointerまたは何か他の可変ポインタ型へ変換することによって、試みるのは未定義挙動です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is unusual to need to call this method directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを直接呼び出す必要は通常ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when interpreting string interpolations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは文字列補間を解釈する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a new Double instance by using a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが新しいDoubleインスタンスを浮動小数点リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a new Double instance by using an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが新しいDoubleインスタンスを整数リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a new Float80 instance by using a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが新しいFloat80インスタンスを浮動小数点リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a new Float80 instance by using an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが新しいFloat80インスタンスを整数リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a new Float instance by using a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが新しいFloatインスタンスを浮動小数点リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a new Float instance by using an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが新しいFloatインスタンスを整数リテラルを使うことによって作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you create a string using string interpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはあなたが文字列補間を使って文字列を作成する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you initialize a string using a string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが文字列リテラルを使って文字列を初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you initialize an Optional instance with a nil literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたがOptionalインスタンスをnilリテラルで初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you use a Boolean literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたがブールリテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you use a string literal to initialize a Character instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが文字列リテラルを使ってCharacterインスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used by the compiler when you use an array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが配列リテラルを使う時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be used by the compiler when you initialize a static string using a string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが文字列リテラルを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be used by the compiler when you initialize a static string using an extended grapheme cluster.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが拡張初期素クラスタを使って静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be used by the compiler when you initialize a static string with a Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたがユニコードスカラーで静的文字列を初期化する時にコンパイラによって使われるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be used by the compiler when you use a string literal to initialize a Unicode.Scalar instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたが文字列リテラルを使ってUnicode.Scalarインスタンスを初期化する時にコンパイラによって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's a good idea for all your custom model types to conform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのあつらえのモデル型すべてにとって準拠することは良い考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's also possible to model an app’s state by using individual variables in combination to hold the state and the required data, which is not recommended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリの持つ状態を、状態と必要データを保持するよう組み合わせた独立した幾つかの変数を使ってモデル化することもまた可能です、それは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's appropriate to use a class in this case, but be sure to limit which parts of your app get access to the shared database object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合にはクラスを使うのが適切です、しかしあなたのアプリのどの部分が共有データベースオブジェクトに対するアクセスを手に入れるかに限界を設けることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's useful for communicating changes between logically separated parts of your app—such as between models and views.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それは、あなたのアプリの論理的に分離された部分の間で変更を伝えるために役立ちます — 例えばモデルとビューの間など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating Over a Collection's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素すべてに反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating Over a Range's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲の持つ要素すべてに反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating Over a Sequence's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスの要素のすべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating Over an Array's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の要素すべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating Over the Contents of a Dictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の内容すべてにわたって反復していく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating over Keys and Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーと値のすべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating over a Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合のすべてに反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating over a String's Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の持つ文字のすべてにわたって反復する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating over a dictionary yields the key-value pairs as two-element tuples.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある辞書すべてを対象として反復することは、キー値ペアを２要素タプルとして生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションの要素すべてにそれの位置によって反復していくことは、そのコレクションすべてにそれのイテレータを使って反復していくのと同じ要素を同じ順序で生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its StringLiteralType should match the StringLiteralType of this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのStringLiteralTypeは、この型のStringLiteralTypeに適合すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its deinit must destroy its stored Header and any constructed Elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それのdeinitは、それの格納されたHeaderとあらゆる構成されたElementを破棄しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Joint Iteration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>接合反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key Paths</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key paths created using the #keyPath string expression don’t pass type information about the properties or methods they reference to the APIs that accept key paths.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>#keyPath文字列式を使って作成されるキーパスは、それらが参照するプロパティまたはメソッドについての型情報を、キーパスを受け入れるAPIに渡しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key-Path Expressions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパス式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key-Value Pairs as a Function Parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数パラメータとしてのキー値ペア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Key-value observing is a Cocoa programming pattern you use to notify objects about changes to properties of other objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値監視は、他のオブジェクトのプロパティに対する変更を通知するためにあなたが使うCocoaプログラミングパターンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>KeyedDecodingContainerProtocol Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyedDecodingContainerProtocol 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>KeyedEncodingContainerProtocol Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyedEncodingContainerProtocol 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Keys and key paths are frequently used for key-value coding (KVC), a mechanism for indirectly accessing an object’s attributes and relationships using string identifiers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーとキーパスは、文字列識別子を使ってオブジェクトの属性および関連付け（リレーションシップ）に間接的にアクセスするための仕組み、キー値コーディング（KVC）のためにしばしば使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Language Interoperability</seg>
      </tuv>
      <tuv lang="JA">
        <seg>言語互換性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lastly, use the eponymous replaceSubrange(_:with:) method to replace a subrange of elements with the contents of another collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後に、名前の元となったreplaceSubrange(_:with:)メソッドを使って、いくつかの要素からなる下位範囲を別のコレクションの内容で置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lazy Collections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延コレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lazy Wrappers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lazy sequences can be used to avoid needless storage allocation and computation, because they use an underlying sequence for storage and compute their elements on demand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延シーケンスは、不必要なストレージの割り当てと計算を防止するために使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LazySequenceProtocol Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>LazySequenceProtocol 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftを学ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how Cocoa error parameters are converted to Swift throwing methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CocoaエラーパラメータがSwiftスローメソッドに変換される方法を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how Swift represents imported C structures and unions, including types with bitfields and unnamed fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftがインポートされたC構造体と共用体を表す方法を、ビットフィールドおよび無名フィールドを持つ型を含めて、学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how imported Objective-C protocol-qualified classes and metaclasses are represented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたObjective-Cプロトコル適応のクラスおよびメタクラスが表される方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how the Swift standard library uses protocols and generics to express powerful constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにSwift標準ライブラリがプロトコルや総称体を使ってパワフルな制約を表すかを学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how to call imported functions that are declared in a C header.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cヘッダにおいて宣言されるインポートされた関数を呼び出す方法を学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn the recommended steps to migrate your code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコードを移行するための推奨される段階を学んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Left associative</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Left bit shift and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Less than</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より小さい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Less than or equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より小さいか、等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like a C function pointer, a Swift function type with the @convention(c) attribute does not capture the context of its surrounding scope.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C関数ポインタのように、@convention(c)属性を持つスウィフト関数型は、それを取り囲んでいるスコープのコンテキストをキャプチャしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, RangeReplaceableCollection types can remove one or more elements using a single operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、RangeReplaceableCollection型は、１つ以上の要素の削除をただ１つの演算を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, if distance &lt; 0, a limit that is greater than i has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、distance &lt; 0ならば、iより大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, if n &lt; 0, a limit that is greater than i has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、n &lt; 0ならば、iより大きい限度は効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, if distance &lt; 0, limit has no effect if it is greater than i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、distance &lt; 0ならば、limitはそれがiより大きいならば効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, if distance &lt; 0, limit should be less than i to have any effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、distance &lt; 0ならば、limitが何らかの効果を持つにはiより少なくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、あなたがゼロ長コレクションをnewElementsパラメータとして渡すならば、このメソッドは与えられた下位範囲の中の要素を置き換えることなく削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, scalars that default to text presentation can be followed by U+FE0F VARIATION SELECTOR-16 to request the emoji presentation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じように、テキスト表現が初期状態のスカラーは、U+FE0F VARIATION SELECTOR-16が後に続くことで、emoji表現を要請できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Linux platforms use getrandom(2) when available; otherwise, they read from /dev/urandom.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Linuxぷらっとホームは、getrandom(2)を利用可能な場合は使います；そうでなければ、それらは/dev/urandomから読み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Local changes to model types like PenPalRecord are useful.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>PenPalRecordのようなモデル型に対するローカルな変更は、役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical AND</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理積</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical NOT</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理否定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical OR</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理和</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logical Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Long-term storage of ArraySlice instances is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArraySliceインスタンスの長期ストレージは推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can appear to be memory and object leakage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリとオブジェクトの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Long-term storage of a slice may therefore prolong the lifetime of elements that are no longer otherwise accessible, which can erroneously appear to be memory leakage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライスの長期ストレージは、もはやそれ以外ではアクセス可能ではない要素の寿命を延長し、それはメモリの漏洩であるように見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lowercase Characters vary under case-conversion to uppercase, but not when converted to lowercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ローワーケース文字は、アッパーケースへのケース変換のもとでは変動します、しかしローワーケースに変換される時はそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros are imported when they use literals for string, floating-point, or integer values, or use operators like +, -, &gt;, and == between literals or previously defined macros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マクロは、それらがリテラルを文字列に対して使う、または+、-、&gt;、そして==のような演算子をリテラルや以前に定義されたマクロの間で使う場合にインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maintaining State in Your Apps</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリの状態を管理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make an API Unavailable in Both Languages</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるAPIを両方の言語で利用できなくする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure that your Objective-C code and Swift code have optimal compatibility by tidying up and modernizing your existing Objective-C codebase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのObjective-CコードとSwiftコードが最善の互換性を持つことを、あなたの既存のObjective-Cコード基盤を整頓および近代化することによって確かにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure your code follows modern coding practices so that it interacts more effectively with Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコードが近代的コード慣行に従うことを確かにしてください、それでそれはより効果的にSwiftと相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make your custom types easier to use by ensuring that they conform to Swift protocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのカスタム型を、それらがSwiftプロトコルに準拠するのを確実にすることで、より簡単に使えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make your data types encodable and decodable for compatibility with external representations such as JSON.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータ型のエンコーディングとデコーディングを外部表現、例えばJSONなどとの互換性のために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Making Objective-C APIs Unavailable in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C APIをSwiftにおいて利用できなくする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Making false assumptions about when a closure is called can lead to data inconsistency and app crashes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いつクロージャが呼び出されるかについてfalseを仮定することは、データの矛盾そしてアプリクラッシュに至る可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Making your own custom types conform to Sequence enables many useful operations, like for-in looping and the contains method, without much effort.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのあつらえの型をSequenceに準拠させることは、多くの有用な演算能力を与えます、for-inループおよびcontainsメソッドのように、あまり苦労せずに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Manage the given buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたbufferを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Managed Buffers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Managing a Shared Resource Using a Singleton</seg>
      </tuv>
      <tuv lang="JA">
        <seg>共有されるリソースをシングルトンを使って管理する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Manipulating Indices</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インデックスを操る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Manual Iteration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>手動反復</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Manual Memory Management</seg>
      </tuv>
      <tuv lang="JA">
        <seg>手動メモリ管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many collection operations are performed by wrapping a collection in another type, instead of copying the collection's contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くのコレクション演算は、コレクションを別の型の中にラップすることによって実行されます、コレクションの内容をコピーするのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many individual characters, such as “é”, “김”, and “🇮🇳”, can be made up of multiple Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの単一の文字、例えば「é」、「김」、そして「🇮🇳」などが、複数のユニコードスカラー値から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many of the APIs you use in Swift take a closure—or a function passed as an instance—as a parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSwiftで使うAPIの多くは、クロージャ — またはインスタンスとして渡される関数 — をパラメータとして取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many other types are renamed or nested to clarify relationships.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの他の型は、改名または入れ子にされて、関係がはっきりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many pointer operations must only be applied to pointers with memory in a specific state—you must keep track of the state of the memory you are working with and understand the changes to that state that different operations perform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くのポインタ演算はある特定の状態のメモリを持つポインタに適用されるだけであるべきです — あなたは、あなたが作業しているメモリの状態を見失わないようにして、異なる演算が実行するその状態の変更を理解していなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many sequence and collection operations return an array or a type-erasing collection wrapper instead of a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くのシーケンスおよびコレクション演算は、集合ではなく、ある配列またはある型消去コレクションラッパーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many standard library types are both equatable and hashable, including strings, integers, floating-point values, Boolean values, and collections of equatable and hashable types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>多くの標準ライブラリ型は、文字列、整数、浮動点小数値、ブール値、そしてequatableとhashable型のコレクション型を含めて、equatableとhashableの両方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many types in the standard library already conform to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの多くの型はすでにComparableプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many types in the standard library conform to Hashable: Strings, integers, floating-point and Boolean values, and even sets are hashable by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの中の多くの型はHashableに準拠します：様々な文字列、整数、浮動小数点およびブール値、そして様々な集合さえも、初期状態でハッシュ化可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many value types in Swift bridge to Objective-C counterparts, like String and Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでの多くの値型は、Objective-Cの相当物へとブリッジします、StringやIntのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mark Availability</seg>
      </tuv>
      <tuv lang="JA">
        <seg>利用可能性を印する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mark properties that you want to observe through key-value observing with both the @objc attribute and the dynamic modifier.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがキー値監視を通して監視したいプロパティを@objc属性とdynamic修飾子の両方で印してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking API Availability in Objective-C</seg>
      </tuv>
      <tuv lang="JA">
        <seg>API利用可能性をObjective-Cにおいて印する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking the MyList declaration as audited for nullability reduces the number of annotations that are required.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MyList宣言をヌル可能性について監査済みと印することは、必要とされる注釈の数を減らします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks attached at the bottom left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>左下で付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks attached at the top right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右上で付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks attached directly above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>直上に付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks attached directly below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>直下に付けられる記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks that overlay a base letter or symbol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基底表音文字またはシンボルを覆う記号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Masked Arithmetic</seg>
      </tuv>
      <tuv lang="JA">
        <seg>隠された算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Measuring the Length of a String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の長さを計測する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory Access</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory Layout</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリレイアウト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory can be untyped and uninitialized, bound to a type and uninitialized, or bound to a type and initialized to a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリは、型無しで未初期化、ある型に束縛されて未初期化、またはある型に束縛されてある値に初期化される可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory that has been bound to a type can be rebound to a different type only after it has been deinitialized or if the bound type is a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型に束縛されているメモリは、それがデイニシャライズされた後にまたは束縛型がtrivial typeである場合にのみ、異なる型に再束縛が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory that has been bound to a type, whether it is initialized or uninitialized, is typically accessed using typed pointers—instances of UnsafePointer and UnsafeMutablePointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型に束縛されているメモリは、それが初期化済みか未初期化かにかかわらず、一般的に型付ポインタを使ってアクセスされます — UnsafePointerおよびUnsafeMutablePointerではなくて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory that has just been allocated through a typed pointer or has been deinitialized is in an uninitialized state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付ポインタを通して今しがたアロケートされる、または未初期化状態にデイニシャライズされるメモリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Memory that you manually manage can be either untyped or bound to a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが手動で管理するメモリは、特定の型に対して型付けされないまたは束縛されるのいずれかが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Merges the given dictionary into this dictionary, using a combining closure to determine the value for any duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた辞書をこの辞書へと結合します、結合用のクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Merges the key-value pairs in the given sequence into the dictionary, using a combining closure to determine the value for any duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの中のキー値ペアをこの辞書へと結合します、結合用のクロージャを使って何らかの重複キーに対して値を決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods and properties that are marked with the internal modifier and declared within a class that inherits from an Objective-C class are accessible to the Objective-C runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>internal修飾子で印されたそしてObjective-Cクラスから継承するクラス内部で宣言されたメソッドとプロパティは、Objective-Cランタイムからアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Migrate Your Code</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコードを移行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Migrating Your Objective-C Code to Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのObjective-Cコードのスウィフトへの移行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Migration experiences differ depending on your existing codebase, but here are some general steps and tools to help you troubleshoot the process:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以降体験はあなたの既存のコード基盤に依存して異なります、しかしここにその過程の問題をあなたが解決する助けとなるいくつかの一般的な段階とツールがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mirrors also provide a “display style” property that suggests how this mirror might be rendered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ミラーはまた、「display style」プロパティを提供します、それはどのようにこのミラーが描画されるかを提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Model data with numbers, Boolean values, and other fundamental types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数、ブール値、および他の基本的な型に関してデータをモデル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifying Copies of Arrays</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列のコピーを修正する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifying a copy of a string leaves the original unaffected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のコピーを修正しても、元のものはそのままで影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifying and Comparing Strings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の修正と比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, Swift structures can adopt protocols to gain behavior through default implementations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その上さらに、Swift構造体はプロトコルを採用することで、省略時の実装を通して挙動を獲得できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, a collection’s indices form a finite range of the positions of the collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その上、コレクションのインデックスは、コレクションの要素の位置からなる有限の範囲を形成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, inequality is the inverse of equality, so any custom implementation of the != operator must guarantee that a != b implies !(a == b).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その上に、不等性は同等性の逆です、それで!=演算子のあらゆるあつらえの実装は、a != bが!(a == b)を意味することを保証しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ほとんどのStringInterpolation型は、それらに加えられたリテラルと補間についての情報を１つ以上のプロパティにおいて格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most basic types in the Swift standard library conform to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリの基本的な型のほとんどはEquatableに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most collections in the standard library use IndexingIterator as their iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの中のほとんどのコレクションは、IndexingIteratorをそれらのイテレータとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most importantly, they can be overloaded, so a StringInterpolationProtocol-conforming type can provide several different appendInterpolation methods with different behaviors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も重要なことは、それらはオーパーロードされることができます、それでStringInterpolationProtocolに準拠する型は、いくつかの異なるappendInterpolationメソッドを異なる挙動で提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most operations with a NaN operand produce a NaN result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaN演算数を使うほとんどの演算は、結果NaNを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moves instances from initialized source memory into the uninitialized memory referenced by this pointer, leaving the source memory uninitialized and the memory referenced by this pointer initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかのインスタンスを初期化されたソースメモリからこのポインタによって参照される未初期化メモリに移動します、残っている未初期化ソースメモリは未初期化で、このポインタによって参照されたメモリは初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiline string literals are enclosed in three double quotation marks ("""), with each delimiter on its own line.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数行文字列リテラルは、３つの二重引用符記号（"""）に囲まれ、各区切り記号をそれの独自の行上に持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple copies of an array share the same storage until you modify one of the copies.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある配列の複数のコピーは、あなたがコピーの１つを修正するまでは、同じストレージを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplies two values and produces their product, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を乗算してそれらの積を生成します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplies two values and produces their product.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を乗算してそれらの積を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を乗算して結果を左手側の変数に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiplies two values and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値を乗算して、結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiply</seg>
      </tuv>
      <tuv lang="JA">
        <seg>乗算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiply and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>乗算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiply, ignoring overflow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>乗算、オーバーフローを無視</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Must be non-zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非ゼロでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Must never be called, since this collection is always empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>決して呼ばないでください、このコレクションは常に空であるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MutableCollection Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MutableCollection 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE: older runtimes had Swift.AnyKeyPath as the ObjC name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：より古いランタイムは、Swift.AnyKeyPath を ObjC名として持ちました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN (“not a number”)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaN（「非数」）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN is not equal to any value, including itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNは、それ自身を含めてあらゆる値と等しくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN propagates through many arithmetic operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNは、いくつもの算術演算をずっと伝播していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NaN values compare not equal to every value, including themselves.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNは、それら自身を含めてあらゆる値に対して等しくないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Named and Unnamed Combining Classes</seg>
      </tuv>
      <tuv lang="JA">
        <seg>名前付きおよび名無しの結合クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Negation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Negative values are returned in two’s complement representation, regardless of the type’s underlying implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の値が、２の補数表現において返されます、その型の持つ基礎となる実装に関係なく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Neither the firstHalf nor secondHalf slices allocate any new storage of their own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstHalfおよびsecondHalfスライスのどちらも、なんらそれら独自の新規ストレージを割り当てません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Never call finalize() on hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>finalize()をhasher上で決して呼び出さないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, create unique options as static properties of your custom type using unique powers of two (1, 2, 4, 8, 16, and so forth) for each individual property’s raw value so that each property can be represented by a single bit of the type’s raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、それぞれが特有なオプションをあなたのあつらえの型の静的プロパティとして作成してください、特有な２の冪（1、2、4、8、16、およびそれ以降）を各個別プロパティの生の値に対して使います、それで各プロパティはその型の持つ生の値からなるある単一ビットによって表されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, implement the == operator function, the requirement inherited from the Equatable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、==演算子関数、Equatableプロトコルから継承される要件を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, the while loop calls the iterator’s next() method repeatedly, binding each element that is returned to animal and exiting when the next() method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、whileループは、そのイテレータのもつnext()メソッドを繰り返し呼び出して、返される各要素をanimalに束縛して、そしてnext()メソッドがnilを返すとき退出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, the bytes referenced by destBytes are copied into byteArray, a new [UInt] array, and then the remainder of someBytes is appended to byteArray:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、destBytesによって参照されるバイトはbyteArray、新しい[UInt]配列へとコピーされます、そしてそれからsomeBytesの残りはbyteArrayに加えられます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, the function calls the array’s index(before:) method to return the correct position in the passed array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、関数は配列のindex(before:)メソッドを呼び出すことで渡された配列での正しい位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, the observations in Celsius are converted to Fahrenheit:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次に、摂氏での観測は華氏に変換されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nil coalescing</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No buffering storage is allocated and each traversal step invokes predicate on one or more underlying elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファするストレージが割り当てられること、そしてひとつひとつ見ていく各処理が１つまたはそれ以上の基盤となる要素上でpredicateを呼び出すことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No further bridging is required when accessing elements of the Array instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなるブリッジはArrayインスタンスの要素にアクセスするとき全く必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No matter which way you call printInt(atAddress:), Swift’s type safety guarantees that you can only pass a pointer to the type required by the function—in this case, a pointer to an Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがprintInt(atAddress:)を呼び出す方法は問題ではありません、Swiftの型安全は、あなたが関数によって要求される型へのポインタを渡すことだけが可能であるのを保証します — この場合、Intへのポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>None</seg>
      </tuv>
      <tuv lang="JA">
        <seg>なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nonnullable—Imported as nonoptionals, whether annotated directly or by inclusion in an annotated region</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非ヌル可能性 — 非オプショナルとしてインポートされます、直接に注釈を付けられようとまたは注釈を付けられた領域の中に包含されようと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, you don’t need to be aware of the difference between concrete and existential metatypes, but calling type(of:) can yield unexpected results in a generic context with a type parameter bound to a protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>通常、あなたは具象と存在のメタタイプの間の違いを意識する必要はありません、しかしtype(of:)を呼び出すことは、あるプロトコルに束縛された型パラメータを伴うある総称体の文脈において予期しない結果を生み出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>等しくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not identical</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一でない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notably, it does not contain the standard digits or Latin/Greek letter blocks; instead, it contains the mathematical Latin, Greek, and Arabic letters and numbers defined in the Supplemental Multilingual Plane.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特に、それは標準の桁またはラテン／ギリシャ文字ブロックを含みません；代わりに、それは補助多言語面で定義される数学用のラテン、ギリシャ、そしてアラビア文字と数字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note Renamed Reference Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>改名される参照型に注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that Float80.significandBitCount is 63, even though 64 bits are used to store the significand in the memory representation of a Float80 (unlike other floating-point types, Float80 explicitly stores the leading integral significand bit, but the BinaryFloatingPoint APIs provide an abstraction so that users don’t need to be aware of this detail).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Float80.significandBitCountは63であることに注意してください、64ビットが使用されて仮数をFloat80メモリ表現に格納するとしてもです（他の浮動小数点型と違い、Float80は明示的に先頭整数仮数ビットを格納します、しかしBinaryFloatingPointAPIはある抽象化を提供します、それでユーザはこの詳細に通じている必要はありません）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that isFinite and isInfinite do not form a dichotomy, because they are not total: If x is NaN, then both properties are false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isFiniteとisInfiniteは二項対立を形作らないことに注意してください、なぜならそれらが全てではないからです：xがNaNならば、そのとき両方のプロパティともfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that typedef types aren't assumed to be nonnull, even within audited regions, because they aren't inherently nullable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>typedef型は非ヌルであると仮定されません、監査済み領域内でさえもです、なぜならそれらはそもそもヌル可能でないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that q is not x / y computed in floating-point arithmetic, and that q may not be representable in any available integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>qが浮動小数点算術で計算されるx / yではないこと、そしてqは何らかの利用可能な整数型において表現可能でないかもしれないことに注意してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that an index into one view may not have an exact corresponding position in another view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビューに対するインデックスが別のビューにおいて正確に対応する位置を持たないかもしれないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in this example, imagePaths is subscripted using a dictionary index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例において、imagePathsが辞書インデックスを使って添え字をすることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that some elements in the temperatureData  array are not valid numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>temperatureData 配列の幾つかの要素は有効な数字ではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the &gt; operator provided by the standard library is used in this example, not the &lt; operator implemented above.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリによって提供される&gt;演算子がこの例で使われることに注意してください、上で実装される&lt;演算子ではなしに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the Element array is suitably-aligned raw memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Element配列は、生のメモリに適切に並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the inout exclusivity rules mean that, like any other inout argument, value cannot be directly accessed by other code for the duration of body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>inout排他規則が意味することに注意してください、何か他のinoutと同様に、valueはbodyの継続期間には他のコードによって直接にアクセス可能ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the value may not be preserved, particularly when converting between signed to unsigned integer types or when the destination type has a smaller bit width than the source type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意すべきはその値が保たれないかもしれないことです、とりわけ符号付きから符号なし整数型への間の変換の場合、または行先の型が元の型より小さなビット幅を持つ場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: Returns a String as case conversion can result in multiple Characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：ケース変換が複数のCharacterという結果になりえるのでStringを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: Returns nil on 32-bit platforms if the result would overflow Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：nil を 32ビットプラットホーム上では返します、もし結果がIntをオーバーフローするならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: This is not a strict subset of isSymbol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：これは isSymbol の狭義の下位集合ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: this property need not be implemented by conforming types, it has a default implementation in a protocol extension that just returns self.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：このプロパティは準拠する型で実装される必要はありません、それはプロトコル拡張において初期実装、単にselfを返すものを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: “\r\n” (CR-LF) is normalized to “\n” (LF), which will return 0x0A</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注意：“\r\n” (CR-LF) は “\n” (LF) に正規化され、それは 0x0A を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the removeItem(at:) method is imported by Swift with a Void return type, no error parameter, and a throws declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>removeItem(at:)メソッドが、スウィフトによってVoidの戻り型で、errorパラメーターなしで、そしてthrows宣言でインポートされることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notify objects about changes to the properties of other objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のオブジェクトのプロパティに対する変更についてオブジェクトに通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now suppose you have an array of addresses that you need to check for a particular address.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今あなたがいくらかの住所からなる配列、あなたがある特定の住所を確認する必要があるものを持つと仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that Date conforms to Comparable, you can compare instances of the type with any of the relational operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>今やDateはComparableに準拠します、あなたはこの型のインスタンスを関係演算子のどれででも比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that GridPoint conforms to the Hashable protocol, you can create a set of previously tapped grid points.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>GridPointがHashableプロトコルに準拠する今、あなたは以前にタップされた格子点の集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在、shorterIndices配列はnames集合の中のより短い名前のインデックスを保持します、あなたはそれらのインデックスを使ってこの集合の要素にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nullable—Imported as optionals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ヌル可能性 — オプショナルとしてインポートされます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numbers and Basic Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数と基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numbers that are not decimal digits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>10進法桁でない数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numbers, Data, and Basic Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数、データ、そして基本的な値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numerals greater than 9 are represented as Roman letters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>９より大きい数詞はローマ字で表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numeric Protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数に関するプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Numeric Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Object subscripting methods are imported by Swift as methods with double underscores (__) prepended to their base names, rather than as a Swift subscript, if either the getter or setter method is marked as NS_REFINED_FOR_SWIFT.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクト添え字メソッドは、スウィフトによってメソッドとして二重アンダースコア（__）をそれのベース名の前に付けられてインポートされます、スウィフト添え字としてではなく、もしゲッターとセッターメソッドの両方がNS_REFINED_FOR_SWIFTと印付けされるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C and C Code Customization</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-CとCコードのカスタム化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C classes qualified by one or more protocols, like the one in the example below, are imported by Swift as protocol composition types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例でのもののような、１つ以上のプロトコルによる基準を満たすObjective-Cクラスは、スウィフトによってプロトコル合成型としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C exception handling uses the @try, @catch, and @throw syntax to indicate unrecoverable programmer errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C例外処理は、@try、@catch、そして@throw構文を使って回復不可能なプログラマエラーを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C key paths are distinct from, but related to, key-path expressions in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cキーパスは、Swiftでのキーパス式とは違います、しかしそれと関連します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C reference type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objective-C type declarations that use lightweight generic parameterization are imported by Swift with information about the type of their contents preserved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>軽量総称体パラメーター化を使うObjective-C宣言は、それらの保管される内容についての情報を使ってスウィフトによってインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objects that are set up to use key-value observing—such as observed above—notify their observers about property changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値監視を使うように設定されるそれらオブジェクト — 例えば上のobserved — は、それらのオブザーバにプロパティの変化について通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Objects with a concrete type of AnyObject maintain a specific dynamic type and can be cast to that type using one of the type-cast operators (as, as?, or as!).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具象型としてAnyObjectを持つオブジェクトは、特定の動的型を保守して、その型へと型キャスト演算子（as、as?。またはas!）の１つを使ってキャストされることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Obtain each separate iterator from separate calls to the sequence’s makeIterator() method rather than by copying.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのシーケンスのもつmakeIterator()メソッドへの独立した呼び出しから独立したイテレータを取得してください、コピーによってではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Offsets the given index by the specified distance, or so that it equals the given limiting index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスをこの指定された隔たりで補います、またはそれでそれは与えられた限界インデックスと等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Offsets the given index by the specified distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスを指定された間隔で補います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often, the optimizer can eliminate bounds checks within an array algorithm, but when that fails, invoking the same algorithm on the buffer pointer passed into your closure lets you trade safety for speed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しばしば、最適化機能は配列アルゴリズム内部で境界検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムをあなたのクロージャへ渡されるパッファポインタ上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often, the optimizer can eliminate bounds- and uniqueness-checks within an algorithm, but when that fails, invoking the same algorithm on body\ ’s argument lets you trade safety for speed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しばしば、最適化機能はアルゴリズム内部で境界および固有さ検査を省くことができます、しかしそれが失敗する時、同じアルゴリズムをbodyの引数上で発動することは、あなたに安全をスピードと交換させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Omitting the options parameter forgoes storing the new and old property values, which causes the oldValue and newValue properties to be nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>optionsパラメータを省略することは、新しいそして古いプロパティ値を格納することをやめます、それはoldValueとnewValueプロパティがnilになる原因となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On 32-bit platforms, Int is the same size as Int32, and on 64-bit platforms, Int is the same size as Int64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>32ビットプラットホーム上では、IntはInt32と同じ大きさです、そして64ビットプラットホーム上では、IntはInt64と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On 32-bit platforms, UInt is the same size as UInt32, and on 64-bit platforms, UInt is the same size as UInt64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>32ビットプラットホーム上では、UIntはUInt32と同じ大きさです、そして64ビットプラットホーム上では、UIntはUInt64と同じ大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On This Page</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この項には</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On a big-endian platform, for any integer x, x == x.bigEndian.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビッグエンディアンプラットホーム上で、何らかの整数xに対して、x == x.bigEndian。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On a little-endian platform, for any integer x, x == x.littleEndian.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リトルエンディアンプラットホーム上で、何らかの整数xに対して、x == x.littleEndian。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On removal, this method invalidates all indices with respect to the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>除去において、このメソッドはこの辞書に関するすべてのインデックスを無効にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, an emoji flag character is constructed from a pair of Unicode scalar values, like "\u{1F1F5}" and "\u{1F1F7}".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一方で、あるemoji国旗文字は一対のユニコードスカラー値から構築されます、"\u{1F1F5}"と"\u{1F1F7}"のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once nil has been returned, all subsequent calls return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦nilが返されるならば、すべての続いて起こる呼び出しはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once predicate returns false it will not be called again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いったんpredicateがfalseを返すならそれは再び呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once again, use pattern matching to conditionally catch errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再び、パターンマッチを条件付きでエラーを捕まえるのに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once all of the segments have been appended, the interpolation will be passed to an init(stringInterpolation:) initializer on the type being created, which must extract the accumulated data from the StringInterpolation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦すべての文節が追加されてしまったならば、その補間はその作成されている型上でのinit(stringInterpolation:)イニシャライザに渡されます、それは蓄積されたデータをStringInterpolationから抽出しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the predicate returns false it will not be called again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いったん述部がfalseを返すならそれは再び呼び出されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you migrate a class to Swift, you must remove the corresponding .m file from the target before building to avoid a duplicate symbol error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一旦あなたがあるクラスをスウィフトに移行したならば、あなたは、ビルドの前にそのターゲットから対応する.mファイルを取り除いて重複シンボル・エラーを避けなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One example is the reduce1(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの例はreduce1(_:)メソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the values to multiply before adding to this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値に加えられる前に掛け合わされる値のうちの１つ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only Swift function types with C function reference calling convention may be used for function pointer arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C関数参照呼出手法を持つスウィフト関数型だけが、関数ポインタ引数のために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only the Optional type conforms to ExpressibleByNilLiteral.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Optional型だけがExpressibleByNilLiteralに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only the String and Substring types in the standard library are valid conforming types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringとSubstring型だけが標準ライブラリにおいて有効な準拠する型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only three types provided by Swift—Bool, DarwinBoolean, and ObjCBool—are treated as Boolean values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftによって提供される３つの型—Bool、DarwinBoolean、そしてObjCBool—だけがブール値とみなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only use this method to rebind the buffer’s memory to a type with the same size and stride as the currently bound Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファのもつメモリを現在バインドされるElement型と同じサイズおよびストライドを持つある型に再バインドするためにだけこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only use this method to rebind the pointer’s memory to a type with the same size and stride as the currently bound Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタのもつメモリを現在バインドされるPointee型と同じサイズおよびストライドを持つある型に再バインドするためにだけこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Opaque pointers are used to represent C pointers to types that cannot be represented in Swift, such as incomplete struct types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不透明ポインタは、Swiftでは表されることができない型、例えば不完全なstruct型などへのCポインタを表すために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operating on substrings is fast and efficient because a substring shares its storage with the original string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列での演算は高速で効率的です、なぜなら下位文字列はそれのストレージを本来の文字列と共有するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operations on types conforming to the FloatingPoint protocol should support this behavior, but they might also support other options.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatingPointプロトコルに準拠する型での演算はこの挙動をサポートします、しかしそれらはまた他の選択肢もサポートするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operations with infinite values follow real arithmetic as much as possible: Adding or subtracting a finite value, or multiplying or dividing infinity by a nonzero finite value, results in infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限大値を伴う演算は、実数算術にできうる限り従います：ある無限大値を加算や減算すること、または非ゼロの有限値によって無限に乗算や除算することは、無限大の結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator Declarations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operator Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optimizations are sometimes applied that can reduce the amount of copying.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最適化は時折適用されて、コピー回数を減らすことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Option Sets</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Option set values have a one-to-one correspondence with their associated raw values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセット値それらは、それらの関連する生の値と一対一の対応を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Option sets all conform to RawRepresentable by inheritance using the OptionSet protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセットすべては、RawRepresentableへの準拠をOptionSetプロトコルを使って継承することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Option sets use bitwise operations on their associated raw values to implement their mathematical set operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセットは、ビット単位演算をそれらの関連する生の値上で使うことで、それらの数学的集合演算を実施します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Option-click a symbol to see implicit information about it, like its type, attributes, and documentation comments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シンボルをオプション-クリックして、それに関する暗黙表示の情報、その型、属性、そして注釈文書などを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OptionSet Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>OptionSet 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optional Binding</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル束縛</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optional Chaining</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル連鎖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Optionals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Order Dependent Operations on Dictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書での順序依存演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Order Dependent Operations on Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合での順序依存演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other classes derived from such an ancestor are given a default mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのような先祖から派生する別のクラスは、省略時のミラーを与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other letters, including syllables and ideographs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他の文字、音節と表意文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other methods are imported with double underscores (__) prepended to their base names.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のメソッドは、二重アンダースコア（__）をそれのベース名の前に付けられてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other than these signaling operations, a signaling NaN behaves in the same manner as a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのシグナル演算の他は、シグナルNaNはクワイエットNaNと同じ流儀で振舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, a Unicode replacement character ("\u{FFFD}") is inserted for each detected error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、ユニコード代用文字（"\u{FFFD}"）が各検出エラーに対して挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, if no convention can be inferred, the method is left intact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ以外では、推論されることができる慣行がないならば、メソッドは元のままにしておかれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, iteration will stop if an encoding error is detected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、反復はエンコーディングエラーが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, iteration will stop if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、反復は誤形式シーケンスが検出されるならば停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, returns (false, oldMember), where oldMember is the member of the set equal to newMember.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、(false, oldMember)を返します、そこでoldMemberはnewMemberに等しいこの集合のメンバです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the contents are encoded as alternating key-value pairs in an unkeyed container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、内容は交互キー値ペアとしてキー付けされないコンテナの中にエンコードされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the memory must not be initialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、メモリは初期化されてはなりません、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, the result is generated by the language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そうでなければ、結果は言語によって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overflow checking is not performed in -Ounchecked builds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー検査は、-Ouncheckedビルドでは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="JA">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameter: A metatype.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パラメータ：あるメタタイプ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パラメータ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parses a single Unicode scalar value from input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>inputからの単一ユニコードスカラー値を構文解析します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parsing of the string is case insensitive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列の構文解析は、大文字小文字に影響されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true if you need the result to use only ASCII characters; otherwise, pass false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが結果にASCII文字のみ使うことを必要とするならばtrue；そうでなければ、falseを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to create a new string, even when the data referenced by cString contains ill-formed sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡すと、cStringによって参照されるデータが誤形式シーケンスを含む時であっても新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to create a signaling NaN or false to create a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シグナルNaNを作成するためにtrueを、またはクワイエットNaNを作成するためにfalseを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to keep the existing capacity of the array after removing its elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡すと、この配列の既存の容量をそれの要素の削除後に保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to measure the length of input even when input contains ill-formed sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡すと、inputが誤形式シーケンスを含む時であってもinputの長さを測ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to prevent the release of the string’s allocated storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡して文字列のもつ割り当てストレージの解放を防止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to request that the collection avoid releasing its storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡して、コレクションがそのストレージを解放するのを回避するよう要求してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to stop translation when an encoding error is detected in input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡すと、翻訳はエンコーディングエラーがinputにおいて検出されるときに停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass true to use uppercase letters to represent numerals greater than 9, or false to use lowercase letters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>trueを渡すことで大文字を使って９より大きい数詞を表します、またはfalseでは小文字を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass false to interrupt the creation of the new string if an ill-formed sequence is detected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseを渡すと新しい文字列の作成は、誤形式シーケンスが検出されるならば中断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass false to immediately stop measuring input when an ill-formed sequence is encountered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>falseを渡すと、誤形式シーケンスと出くわす場合にinputの計測を直ちに中止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a Constant Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定数ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a Function Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a Mutable Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可変ポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a closure as combine that returns the value to use in the resulting dictionary: The closure can choose between the two values, combine them to produce a new value, or even throw an error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるクロージャをcombineとして渡してください、それは結果の辞書において使う値を返します：そのクロージャは２つの値のどちらかを選ぶこと、それらを結合して新しい値を生成すること、またはエラーをスローすることさえ出来ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a dictionary literal with string keys as children.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列キーを持つ辞書リテラルをchildrenとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a negative value as stride to create a sequence from a higher start to a lower end:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の値をstrideとして渡して、上方から開始して下方に終わるシーケンスを作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a variadic list of string and integer arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列および整数の引数からなる可変長リストを渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass an Autoreleasing Pointer as a Parameter</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オートリリースポインタをパラメータとして渡す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass an instance to these static methods to acess the layout for that instance's type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるインスタンスをこれら静的メソッドに渡すことで、そのインスタンスの持つ型に対するレイアウトにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass the greater-than operator (&gt;) operator as the predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より大きい（&gt;）演算子を述部として渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing a NaN to an operation generally results in NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NaNをある演算に渡すことは、一般的にNaNという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing a sequence with duplicate keys to this initializer results in a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>重複するキーを持つシーケンスをこのイニシャライザに渡すことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing a sequence with no elements or an empty collection as possiblePrefix always results in true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの要素もないシーケンスまたは空のコレクションをpossiblePrefixとして渡すことは、常にtrueという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing a value that can’t be represented in this type results in a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型において表せない値を渡すことは、実行時エラーという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing any other format or any additional characters as text results in nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何か他の形式または追加文字をtextとして渡すことは、nilの結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing pointers to mutable arrays of ObjC class pointers is not directly supported.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ObjCクラスポインタの可変配列へポインタを渡すことは、直接にサポートされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing the collection’s endIndex as the start parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのendIndexをstartパラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing the collection’s starting index as the end parameter results in an empty subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの開始インデックスをendパラメータとして渡すことは、空のシーケンスという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Passing the same index as both i and j has no effect.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iとjの両方と同じアンデックスを渡すことは、効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pattern Matching</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パターンマッチング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pattern match</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パターン・マッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform arithmetic and bitwise operations or compare values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>算術およびビット単位の演算を実行します、または値を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform case conversion to lowercase</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ローワーケースへのケース変換を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform case conversion to uppercase</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アッパーケースへのケース変換を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform casts between types or represent values of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型の間でキャストを実行したり、任意型の値を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform order-dependent operations common to all collections, as implemented for Dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのコレクションに共通の順序依存演算を、Dictionaryに対して実装されたように実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Perform order-dependent operations common to all collections, as implemented for Set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのコレクションに共通の順序依存演算を、Setに対して実装されたように実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performance Optimizations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>性能最適化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing Calculations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing Calculations with Overflow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフローを伴う計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing Collection Operations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクション演算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing Double-Width Calculations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２倍幅計算の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing Typed Pointer Arithmetic</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付ポインタ算術を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing a bitwise NOT operation on 0 returns a value with every bit set to 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位のNOT演算を0に関して実行することは、すべてのビットが1に設定された値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing an invalid cast triggers a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不正なキャストを行うことは実行時エラーの引き金になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performing truncating division with floating-point values results in a truncated integer quotient and a remainder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不動小数点値で切り捨て除算を実行することは、切り捨てられる整数指数と余りという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs a logical AND operation on two Boolean values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理AND（積）演算を２つのブール値で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs a logical NOT operation on a Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理否定演算をあるブール値上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs a logical OR operation on two Boolean values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理OR（和）演算を２つのブール値で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an Optional instance or a default Optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算を実行します、ラップされた値のOptionalインスタンスまたは省略時のOptional値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs a nil-coalescing operation, returning the wrapped value of an Optional instance or a default value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算を実行します、ラップされた値のOptionalインスタンスまたは省略時の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs a traditional C-style assert with an optional message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>随意のメッセージを持つ伝統的なC形式アサートを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs an unbalanced autorelease of the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトのある不均衡なオートリリース（自動解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs an unbalanced release of the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトのある不均衡なリリース（解放）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs an unbalanced retain of the object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトのある不均衡なリテイン（保持）を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Platform Implementation of SystemRandomNumberGenerator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SystemRandomNumberGeneratorのプラットホーム実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Platform-specific classes, like NSBackgroundActivity, NSUserNotification, and NSXPCConnection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プラットホーム特有のクラス、NSBackgroundActivity、NSUserNotification、そしてNSXPCConnectionのような</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Playground logging can generate, at a minimum, a structured description of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドログは、最低でも、あらゆる型の構造化された記述を生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Playground logging generates a richer, more specialized description of core types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドログは、中心的な型のより豊かな、さらに特殊化された記述を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Playground logging may also be able to support specialized descriptions of other types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドログはまた、他の型の特殊化された記述のサポートが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Playgrounds and the debugger use the Mirror type to display representations of values of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンド及びデバッガは、Mirror型を使ってあらゆる型の値の表現を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Playgrounds and the debugger will show a representation similar to the one used for instances of the kind indicated by the DisplayStyle case name when the mirror is used for display.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プレイグラウンドとデバッガは、DisplayStyleケース節名によって指し示される種類のインスタンスに対して使われるものに似た表現をミラーが表示用に使われる時に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see LazySequenceProtocol for background; LazyCollectionProtocol is an analogous component, but for collections.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>予備知識としてLazySequenceProtocolをぜひ見てください；LazyCollectionProtocolは、類似した、しかしコレクションのためのコンポーネントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointer arithmetic with a typed pointer is counted in strides of the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付ポインタでのポインタ算術は、ポインタのもつPointee型のストライドで勘定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointer arithmetic with raw pointers is performed at the byte level.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のポインタを使うポインタ算術は、バイト水準で実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointers to Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値へのポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise equality</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連の同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise greater than</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連大なり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise greater than or equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連大なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise less than</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連の小なり</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise less than or equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連小なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise less than or equal to</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連の小なり同等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pointwise not equal</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポイント関連不等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positive infinity compares greater than every finite value and negative infinity, while negative infinity compares less than every finite value and positive infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の無限大はすべての有限値と負の無限大より大きいと比較されます、一方負の無限大はすべての有限値と正の無限大より小さいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Positive infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の無限大</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Postfix operators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後置演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precedence group</seg>
      </tuv>
      <tuv lang="JA">
        <seg>優先順位グループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: buffer is an instance of a non-@objc class whose deinit destroys its stored Header and any constructed Elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：bufferは非@objcクラスのインスタンスです、それのdeinitはそれの格納されたHeaderとあらゆる構成されたElementを破棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: minimumCapacity &gt;= 0, and the type indicated by bufferClass is a non-@objc class with no declared stored properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：minimumCapacity &gt;= 0、そしてbufferClassによって示される型が非@objcクラスで宣言された格納プロパティを持たないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: next() has not been applied to a copy of self since the copy was made.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：next()がselfのコピーに、そのコピーが作成されて以来まったく適用されていないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: position indicates a valid position in self and position != endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：positionがselfの中の有効な位置を指し示してposition != endIndexであること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: position is a valid position in self and position != endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：positionがselfの中の有効な位置でありposition != endIndexであること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: self != nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：self != nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: v.value can be represented as ASCII (0..&lt;128).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：v.valueがASCII（0..&lt;128）として表現できること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: May not be called after a previous self.encode(_:) call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：前のself.encode(_:)呼び出しの後に呼び出されないこと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: The next location exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：次の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: The next position is representable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：次の位置が表現可能であること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: The previous location exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：前の場所が存在すること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: The sequence must not have duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：シーケンスは重複するキーを持ってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Precondition: the pointee has been initialized with an instance of type Pointee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件：pointeeが型Pointeeのインスタンスを使って初期化されていること。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prefer Swift Value Types to Bridged Objective-C Reference Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift値型はブリッジされたObjective-C参照型より好ましい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prefix operators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前置演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素を格納するようにコレクションを準備します、そうすることが基礎をなす型に対して適切である場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preserving an Array’s Geometric Growth Strategy</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の幾何数級的増大戦略を守る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prevent an Objective-C API from Being Imported</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるObjective-C APIがインポートされるのを妨げる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preventing Timing Problems When Using Closures</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャを使う場合のタイミング問題を防ぐ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Print the result using the index found in step 2 on the original absences array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>手順２で見つけたインデックスをオリジナルabsences配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Print the results using the indices found in steps 1 and 3 on the original absences array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>手順１と手順３で見つけたインデックスをオリジナルabsences配列上で使って結果を出力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Print values to the console, read from and write to text streams, and use command line arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値をコンソールに出力し、テキストストリームから読み込みおよびそれへと書き出し、そしてコマンドライン引数を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Printing and Displaying a Scalar</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーをプリントおよび表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Printing and Dumping</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プリントとダンプ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Produces a string containing the bytes in a given C array, interpreted according to a given encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた符号化によって解釈される、与えられたC配列の中のバイトを含んでいる文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Produces a string created by copying the data from a given C array of UTF8-encoded bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF8符号化されたバイトからなる与えられたC配列からコピーするデータによって作成される文字列を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Produces an initialized String object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化されたStringオブジェクトを作成します、それは与えられた符号化での与えられたバイト解釈のバッファ由来の与えられた数のバイトを含んでいます、そして随意にそのバッファを解放します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming Tasks</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プログラミング作業</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Properties are not directly accessible if they trigger any didSet or willSet accessors, perform any representation changes such as bridging or closure reabstraction, or mask the value out of overlapping storage as for packed bitfields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティは直接にアクセス可能ではありません、もしそれらが何らかのdidSetまたはwillSetアクセッサの引き金になる、何らかの表現変更の実行たとえばブリッジまたはクロージャ再抽象化など、またはオーバーラップしているストレージの外の値をパックされたビットフィールドとしてマスクするならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols permit classes, structures, and enumerations to participate in inheritance, while class inheritance is only compatible with other classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコルは、クラス、構造体、そして列挙に対して継承に参加することを許可します、一方でクラス継承は他のクラスと互換性があるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols, such as Collection and Equatable, that describe common abstractions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル、たとえばCollectionそしてEquatableなど、それは共通の抽象化を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols, such as CustomDebugStringConvertible and CustomReflectable, that you use to customize operations that are available to all types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル、たとえばCustomDebugStringConvertibleそしてCustomReflectableなど、あなたはそれを使って全ての型で利用可能である演算をカスタマイズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Protocols, such as OptionSet, that you use to provide implementations that would otherwise require boilerplate code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロトコル、たとえばOptionSetなど、あなたはそれを使用してそうしなければ定型文コードを必要としただろう実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provide a custom reflection for your types using these protocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえのリフレクションをあなたの型に対してこれらのプロトコルを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Provide access to a shared resource using a single, shared class instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>共有リソースへのアクセスを単一の、共有クラスインスタンスを使って提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Providing a Hash Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハッシュ値の提供</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying Descendants</seg>
      </tuv>
      <tuv lang="JA">
        <seg>子孫について問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying Runtime Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>実行時値の問い合わせ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying Type Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型プロパティに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying a Double</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Doubleに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying a Double's State</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Doubleの状態を問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying a Float</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Floatに問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Querying a Float's State</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Floatの状態を問い合わせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Random Number Generators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為数生成子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Random-access collections can move indices any distance and measure the distance between indices in O(1) time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為アクセスのコレクションは、任意の隔たりのインデックスを移動できます、そしてインデックス間の隔たりの測定をO(1)時間で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RandomAccessCollection Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomAccessCollection実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RandomNumberGenerator Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomNumberGenerator実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range Expressions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range-Checked Conversion</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲確認変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range-replaceable collections provide operations that insert and remove elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲交換可能なコレクションは、いくつかの要素の挿入や削除を行う演算を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RangeReplaceableCollection Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RangeReplaceableCollection 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまな範囲</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raw Pointer Arithmetic</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のポインタ算術</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raw Pointers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raw Representation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raw memory that has just been allocated is in an uninitialized, untyped state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アロケートされてすぐの生のメモリは、uninitialized, untyped状態にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raw, Uninitialized Memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の、初期化されないメモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reading from and writing to memory through a raw buffer are untyped operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある生のバッファを通してメモリから読み込むそしてそれへ書き込むことは、型無し演算です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reading from memory through a raw buffer is an untyped operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある生のバッファを通してメモリから読み込むことは、型無し演算のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reference Counting</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照カウント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reference Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related Array Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連した配列型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related String Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連した文字列型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関連する型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Relationships</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関係</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remainder</seg>
      </tuv>
      <tuv lang="JA">
        <seg>剰余</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remainder and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>剰余と代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remember that you can't subclass a Swift class in Objective-C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがObjective-CにおいてSwiftクラスをサブクラス化できないことを忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Remove the original Objective-C .m file from the target by deselecting the target membership checkbox.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ターゲットから本来のObjective-C .mファイルを、ターゲットメンバーシップ・チェックボックスの選択を外すことによって取り除いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all elements from the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列からすべての要素を取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all elements from the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all elements of this option set that are not also present in the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオプションセットに属し、また与えられたセットの中に含まれない、すべての要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all key-value pairs from the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのキー値ペアを辞書から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all members from the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合からすべてのメンバを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes all the elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす要素すべてを除去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the character at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置での文字を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the element at the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置での要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the first element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the first element of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の最初の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the first key-value pair of the dictionary if the dictionary isn’t empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その辞書が空でないならば、辞書の中の最初のキー値ペアを削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the key-value pair at the specified index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアを指定されたインデックスで削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes and returns the last element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの最後の要素を削除して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the characters in the given range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた範囲の中の文字を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the element at the given index of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスでの集合の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements in the specified subrange from the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された下位範囲の中の要素をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements of the given sequence from the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの要素を集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements of the given set from this set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた集合の要素をこの集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements of the set that are also in the given sequence and adds the members of the sequence that are not already in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合の要素で与えられたシーケンスの中にもあるものを削除します、そしてシーケンスのメンバで集合の中にはまだないものを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた集合の中にもあるこの集合の要素を削除します、そして与えられた集合のメンバでこの集合の中にはまだないものを加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements of the set that aren’t also in the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの中にはない、この集合の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the elements of this set that aren’t also in the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた集合の中にはない、この集合の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the first element of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の最初の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the given element and all elements subsumed by it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素とそれによって包括されるすべての要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the given element and any elements subsumed by the given element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素と、与えられた要素によって包括されるあらゆる要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the given key and its associated value from the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたキーと関連値を辞書から取り除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the given number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the specified element from the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された要素を集合から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the specified number of elements from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素をコレクションの始まりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the specified number of elements from the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素をコレクションの終わりから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes the specified subrange of elements from the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかの要素からなる指定された下位範囲をコレクションから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removing Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removing Keys and Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーと値の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removing Substrings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rename APIs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>APIを改名する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Renaming Objective-C APIs for Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C APIをSwift用に改名する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reordering Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素を再配列する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reordering a String's Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の持つ文字を並び替えます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reordering an Array's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の要素を再配列します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素を再配列します、例えば、与えられた述部にマッチする要素すべてが、合致しない要素すべての後になるなど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeated Access</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返してアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeatedly calling this method returns all the elements of the underlying sequence in order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Repeatedly calling this method returns, in order, all the elements of the underlying sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返しこのメソッドを呼び出すことは、基礎をなすシーケンスのすべての要素を、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replace this set with the elements contained in this set or the given set, but not both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合を、この集合または与えられた集合の中に含まれる、しかし両方にではない要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces a range of elements with the elements in the specified collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲の要素を指定されたコレクションの要素で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces elements of this vector with other in the lanes where mask is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このベクターの要素を、maskがtrueであるところの、レーンの中のotherで置き換えます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the elements within the specified bounds with the given Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された領域内の要素を与えられたユニコードスカラー値で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the given index with its predecessor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスをそれの前のものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the given index with its successor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスをそれの後に続くものと取り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the memory referenced by this pointer with the values starting at the given pointer, leaving the source memory uninitialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリを与えられたポインタで始まるいくらかの値と置き換えます、ソースメモリは未初期化のままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the specified subrange of elements with the given collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくらかの要素からなる指定された下位範囲を与えられたコレクションで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the text within the specified bounds with the given characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された領域内のテキストを与えられた幾らかの文字で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this pointer’s initialized memory with the specified number of instances from the given pointer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタのもつ初期化されたメモリを、指定されたポインタのもつメモリからの指定された数のインスタンスで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this pointer’s memory with the specified number of consecutive copies of the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタのもつメモリを、指定された数の指定された値の連続コピーで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセットを、このセットか与えられたセットのどちらかの中に、しかし両方ではなく、含まれるすべての要素を含んでいる新しいセットで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this string with the empty string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列を空の文字列で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this value with its additive inverse.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をそれの加法の逆元で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this value with its square root, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値をそれの平方根で置き換えます、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this value with the remainder of itself divided by the given value using truncating division.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>切り捨て除算を使ってそれ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces this value with the remainder of itself divided by the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それ自身を与えられた値で除算した余りでこの値を置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replacing Substrings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列の置換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents a string literal with interpolations while it is being built up.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列リテラルでいくらかの補間をもつものを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Represents the contents of a string literal with interpolations while it is being built up.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列リテラルで幾つかの補間をもつものの内容それらを、それが作り上げられている間に表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required Initializer</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必須イニシャライザ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Required.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必須。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reserves enough space in the string’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数のASCII文字を格納するのに十分な空間を文字列のもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reserves enough space in the view’s underlying storage to store the specified number of ASCII characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数のASCII文字を格納するのに十分な空間をビューのもつ基礎をなすストレージの中に確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reserves enough space to store the specified number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の要素を格納するのに十分な空間を確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reserves enough space to store the specified number of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数のキー値ペアを格納するのに十分な空間を確保します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リソース</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Respond to a Property Change</seg>
      </tuv>
      <tuv lang="JA">
        <seg>プロパティの変更に応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Respond to events on behalf of a delegator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任元に代わってイベントに応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Respresenting a Result</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果を表す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのストレージを保持することは、あなたがコレクションをもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Retaining the storage can be a useful optimization when you’re planning to grow the string again.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストレージを保持することは、あなたが文字列をもう一度増大しようと計画している時に、ひとつの有益な最適化であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Retrieve the localized description for this error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このエラーの現地語化された説明を取ってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Retrieves and returns the referenced instance, returning the pointer’s memory to an uninitialized state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照されたインスタンスを取ってきて返します、ポインタのメモリを初期化されない状態へ戻します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素すべてに対するあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns -1 if this value is negative and 1 if it’s positive; otherwise, 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値が負ならば-1そしてそれが正ならば1；それ以外では0を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns nil, indicating that there are no more elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もう要素は無いことを指し示す、nilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true iff self holds the only strong reference to its buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfがそれのバッファへの強い参照を保持する場合に限りtrueを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a CVaListPointer that is backed by autoreleased storage, built from the given array of arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オートリリースされるストレージによって裏付けられるCVaListPointerを返します、いくらかの引数からなる与えられた配列から組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Decoder instance for decoding super from the container associated with the default super key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Decoderインスタンスを、superをデコードするために、省略時superキーと結び付けられるコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Decoder instance for decoding super from the container associated with the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>superをデコードするためのDecoderインスタンスを、指定のキーと結び付けられるコンテナから返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a LazyMapSequence over this Sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このSequenceを覆うLazyMapSequenceを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether a value is included in a range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値が範囲に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether any corresponding components of the two tuples are not equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプルの対応する構成要素いずれかが等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスのすべての要素がある与えられた述部を満たすかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the corresponding components of two tuples are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのタプルの対応する構成要素らが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the decoder contains a value associated with the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーと結び付けられた値をデコーダが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first argument represents a position before the second argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の引数が２番目の引数の前の位置を表すかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の後ろまたはそれと同じ順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の後ろの順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の前またはそれと同じ順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>語彙筆記的順序において最初のタプルが２番目の前の順序かかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the given element is contained within the range expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素がこの範囲式内に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the given element is contained within the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素がこの範囲内に含まれるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the given keys are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the given object is known to have a single strong reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返して、与えられたオブジェクトが１つだけ強い参照を持つことを知られるかどうかを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同等かどうかを、与えられた述部を同等性テストとして使って指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの最初の要素らが別のシーケンスの中の要素らと同じかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された述部を満足させるある要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence contains the given element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された要素をシーケンスが含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが別のシーケンスの前に来るかどうかをある語彙筆記的順序（字典）順序において、与えられた述部を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (&lt;) to compare elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのシーケンスが別のシーケンスの前に来るかどうかを、ある語彙筆記的順序（字典）順序において、より小さい演算子（&lt;）を使って要素を比較して、指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a UTF-8 continuation byte.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたコード単位がUTF-8継続バイトかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a high-surrogate code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたコード単位が上位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the specified code unit is a low-surrogate code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたコード単位が下位サロゲートコード単位かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the string begins with the specified prefix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列が指定された接頭辞で始まるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the string ends with the specified suffix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列が指定された接尾辞で終わるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the two arguments are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the two arguments are not equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the two given values are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the two given values are not equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより大きいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより大きいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより少ないまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の引数の値が２番目の引数のそれより少ないかどうかを指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance is equal to the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスが与えられた値と等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance is less than or equal to the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスが与えられた値より小さいまたは等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance is less than the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスが与えられた値より小さいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスがある昇順ソートにおいて、与えられた値より前にくるまたは同じ位置かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this range and the given range contain an element in common.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲と与えられた範囲がある要素を共通に含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスともう一方のシーケンスが同等の要素を同じ順序で含むかどうかを、与えられた述部を同等テストとして使って、指し示しているブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスともう一方のシーケンスが同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two arguments match by value equality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるブール値を返します、２つの引数が値等式によって一致するかどうかを指し示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two arrays contain the same elements in the same order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの配列が同じ要素を同じ順序で含むかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two indices wrap equal underlying indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのインデックスが等しい基礎をなすインデックスをラップするかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two optional instances are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのオプショナルインスタンスが等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two ranges are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの範囲が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two references point to different object instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの参照が異なるオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two references point to the same object instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの参照が同じオブジェクトインスタンスを指しているかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two sets have equal elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの集合がまったく等しい要素らを持つかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two type-erased hashable instances wrap the same type and value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの型消去ハッシュ化インスタンスが同じ型および値をラップするかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two types are identical.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの型が同一かどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two types are not identical.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの型が同一でないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two values are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値が等しいかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value indicating whether two values are not equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値が等しくないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether a given element is a member of the option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素がオプションセットのメンバであるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the given element exists in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素が集合の中の存在するかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set has no members in common with the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられたシーケンスと共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set has no members in common with the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合が、与えられた集合と共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a strict subset of the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられたシーケンスの狭義の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a strict superset of the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられたシーケンスの狭義の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a subset of another set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は別の集合の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a subset of the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられたシーケンスの下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a superset of the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられたシーケンスの上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether the set is a superset of the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合が、与えられた集合の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set has no members in common with the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられた集合と共通のメンバを１つも持たないかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a strict subset of the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられた集合の狭義の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a strict superset of the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられた集合の狭義の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a subset of the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられた集合の下位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a Boolean value that indicates whether this set is a superset of the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合は与えられた集合の上位集合であるかどうかを指し示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a closed range that contains both of its bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの境界の両方を含む完結範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a copy of this range clamped to the given limiting range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた限界範囲に締め金具で留められる（制限を課される）、この範囲のコピーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a half-open range that contains its lower bound but not its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの下側の境界は含むがそれの上側の境界はそうしない半開範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a human-readable string giving the name of a given encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた符号化の名前を与えている、人間が読む文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a lazy sequence of the initial consecutive elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateを満足させる、冒頭の隣接要素からなるある遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a lazy sequence that concatenates the elements of this sequence of sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスに属する複数のシーケンスの要素を鎖状に連結する遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a lazy sequence that skips any initial elements that satisfy predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateを満足させる、あらゆる冒頭の要素を省くある遅延シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a lowercase version of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の小文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a mirror that reflects the UTF-16 view of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のUTF-16ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a mirror that reflects the UTF-8 view of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のUTF-8ビューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a mirror that reflects the Unicode scalars view of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のユニコードスカラービューを反映するミラーを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new .dataCorrupted error using a constructed coding path and the given debug description.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい.dataCorruptedエラーを返します、組み立てられたコーディングパスと与えられたデバッグ説明を使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オリジナルのコレクションの要素で与えられた述部を満たすものを、順序正しく、含んでいる同じ型の新しいコレクションを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new dictionary containing only the key-value pairs that have non-nil values as the result from the transform by the given closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャによる変換からの結果として非nilを持つキー値ペアだけを含んでいる新しい辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new dictionary containing the key-value pairs of the dictionary that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この辞書のキー値ペアで与えられた述部を満たすものを含んでいる新しい辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new dictionary containing the keys of this dictionary with the values transformed by the given closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャによって変形された値とともに、この辞書のキーを含んでいる新しい辞書を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new instance of the given type, constructed from the raw memory at the specified offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の新しいインスタンスを返します、生のメモリから指定されたオフセットで構築されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new instance of the given type, read from the buffer pointer’s raw memory at the specified byte offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた型の新しいインスタンスを返します、バッファポインタの生のメモリから指定されたバイトオフセットで読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new key path created by appending the given key path to this one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーパスをこのものに加えることによって作成された新しいキーパスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new option set of the elements contained in this set, in the given set, or in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセットの中に、与えられたセットの中に、または両方の中に、含まれる要素からなる新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new option set with only the elements contained in both this set and the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセットと与えられたセットの両方の中に含まれる要素だけを持つ新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new option set with the elements contained in this set or in the given set, but not in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このセットの中にまたは与えられたセットの中に、しかし両方の中にではなく、含まれる要素からなる新しいオプションセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new result, mapping any failure value using the given transformation and unwrapping the produced result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい結果を返します、あらゆる失敗値をこの与えられた変換を使ってマッピングします、そして生成された結果をアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new result, mapping any failure value using the given transformation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい結果を返します、あらゆる失敗値をこの与えられた変換を使ってマッピングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new result, mapping any success value using the given transformation and unwrapping the produced result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい結果を返します、あらゆる成功値をこの与えられた変換を使ってマッピングします、そして生成された結果をアンラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new result, mapping any success value using the given transformation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい結果を返します、あらゆる成功値をこの与えられた変換を使ってマッピングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set containing the elements of the set that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合の要素で与えられた述部を満たすものを含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set containing the elements of this set that do not occur in the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたシーケンスの中の現れないこの集合の要素を含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set containing the elements of this set that do not occur in the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた集合の中の現れないこの集合の要素を含んでいる新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set with the elements of both this and the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これと与えられた集合の両方の要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set with the elements of both this set and the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合と与えられたシーケンスの両方の要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set with the elements that are common to both this set and the given sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合と与えられたシーケンスの両方に共通である要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set with the elements that are common to both this set and the given set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合と与えられた集合の両方に共通である要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set with the elements that are either in this set or in the given sequence, but not in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合の中か与えられたシーケンスの中かどちらかの、しかし両方の中にではない要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new set with the elements that are either in this set or in the given set, but not in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合の中か与えられた集合の中かどちらかの、しかし両方の中にではない要素を持つ新しい集合を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各要素の間に与えられたセパレータを加えて、シーケンスの要素を連結することによる新しい文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a new value advanced by the given distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインスタンスによって引き上げられる新しい値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a newly allocated buffer with the given size, in bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた大きさで新しくアロケートされたバッファを、バイトで返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a partial range extending upward from a lower bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下側の境界から上方に拡張している部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a partial range up to, and including, its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの上側の境界までの、そしてそれを含む部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a partial range up to, but not including, its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの上側の境界までの、しかしそれを含んでいない、部分的な範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a pointer offset from this pointer by the specified number of bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタから指定されたバイト数をオフセットしたポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random Boolean value, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為なブール値を返します、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為なブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random element of the collection, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのある無作為な要素を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションのある無作為の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random value that is less than the given upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた上側の境界より小さい無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random value within the specified range, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された範囲内のある無作為な値を返します、与えられた生成子を無作為さの出典として使って使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a random value within the specified range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された範囲内のある無作為の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を飛ばすことによるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence containing all but the given number of final elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた数の末尾要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の冒頭要素以外すべてを含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence containing the initial, consecutive elements that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす、冒頭の、隣接する要素を含んでいるあるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence formed from first and repeated lazy applications of next.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstからそして繰り返しnextを遅延適用して形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence formed from repeated lazy applications of next to a mutable state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返しnextを可変のstateに遅延適用することから形成されたシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence from a starting value to, but not including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値まで、しかしそれは含めないシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence from a starting value toward, and possibly including, an end value, stepping by the specified amount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定の量だけ歩を進めて、始まりの値から終わりの値の方へ、そしてもしかするとそれを含めるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ベア (n, x) のシーケンスを返します、そこでnはゼロで開始する連続した数を表して、xはシーケンスの要素を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された最大長まで、そのシーケンスの冒頭の要素を含んでいる、あるシーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a specific descendant of the reflected subject, or nil if no such descendant exists.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リフレクションされている主題の特定の子孫を返します、またはそのような子孫が存在しないならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた書式設定文字列をテンプレートとして使ってユーザの省略時のロケールに従って残りの引数値がそれに対する代用とされることによって作成される文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string read from standard input through the end of the current line or until EOF is reached.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準入力から現在の行の終わりまでまたはEOFが到達されるまで読み込んだ文字列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a string representation of the Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーの文字列表現を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateがtrueを返す間は要素を飛ばして残りの要素を返すことによって、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence containing all but the given number of initial elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の冒頭要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence containing all but the specified number of final elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された数の末尾要素以外すべてを含んでいる下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateがfalseを返すまで冒頭の要素を含んでいて残りの要素を飛ばしている、ある下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence from the specified position to the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された位置からコレクションの終わりまでの下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence from the start of the collection through the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの始まりから指定された位置までも含む下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence from the start of the collection up to, but not including, the specified position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの始まりから指定された位置まで、しかしそれは含めない下位シーケンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、シーケンスの末尾の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位シーケンスを、指定された最大長まで、コレクションの冒頭の要素を含めて返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を指定の値で掛ける結果の高および低部分を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a tuple containing the quotient and remainder obtained by dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値をこの値で割ることで入手される商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a tuple containing the quotient and remainder of dividing the given value by this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値をこの値で除算した商と余りを含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a typed pointer to the memory referenced by this pointer, assuming that the memory is already bound to the specified type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリに対する型付ポインタを返します、メモリがすでに指定された型へ束縛されると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a value from a uniform, independent distribution of binary data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイナリデータの一様な、独立分布からの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a value that is offset the specified distance from this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定の隔たりをこの値からオフセットされたある値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a view presenting the elements of the collection in reverse order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素を逆順に表しているある見方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an Array of the encodings string objects support in the application’s environment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリケーションの環境においてサポートされる符号化文字列オブジェクトの配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果を連結したものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing the elements of this sequence in reverse order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素を逆順に含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された変換をこのシーケンスの各要素で呼び出す結果で非-nilのものを含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing the results of mapping the given closure over the sequence’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャをシーケンスのもつ要素全体にわたってマップする結果を含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された述部を満足させるものであるシーケンスの要素を、順序通りに、含んでいる配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an empty iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an encoding container appropriate for holding a single primitive value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一プリミティブ値を保持するのに適切なエンコーディングコンテナを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an encoding container appropriate for holding multiple unkeyed values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数のキー付けされない値を保持するのに適切なエンコーディングコンテナを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an encoding container appropriate for holding multiple values keyed by the given key type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキー型によってキー付けされる複数の値を保持するのに適切なエンコーディングコンテナを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します、その隔たりが与えられた限界インデックスを越えない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an index that is the specified distance from the given index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスから指定された隔たりのインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an initialized String object that contains a given number of characters from a given array of UTF-16 Code Units</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化されたStringオブジェクトを返します、それは与えられた数の文字をユニコード文字からなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an initialized String object that contains a given number of characters from a given array of Unicode characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化されたStringオブジェクトを返します、それは与えられた数の文字をユニコードスカラーからなる与えられた配列から含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator for this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスに対するイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the Unicode scalars that make up this view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビューから構成される幾らかのユニコードスカラーのすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the bytes of this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスのバイトすべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のキー値ペアすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the elements of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the elements of this buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このパッファの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the elements of this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの要素すべてを対象としたイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the elements of this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの要素すべてを対象としたあるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an iterator over the members of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合のメンバすべてを対象とするイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an uppercase version of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の大文字バージョンを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the ASCII encoding value of this Character, if ASCII.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このCharacterのASCIIエンコード値を返します、もしASCIIならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the C-string encoding assumed for any method accepting a C string as an argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C文字列を引数として受け入れる何らかのメソッドのために仮定されるC文字列符号化を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the absolute value of the given number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた数の絶対値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the additive inverse of the specified value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された値の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the bits of the given instance, interpreted as having the specified type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインスタンスのビットを返します、指定された型を持つと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各要素の間に与えられたセパレータを挿入して、このシーケンスに属する複数のシーケンスの要素を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the concatenated results of mapping the given transformation over this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた変換をこのシーケンス全体にわたってマッピングする結果を鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the contiguous memory footprint of the given instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインスタンスの隣接メモリフットプリントを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the data stored for the given key as represented in a container keyed by the given key type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対して格納されるデータを、与えられたキー型によってキー付けされるコンテナの中に表される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the data stored for the given key as represented in an unkeyed container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対して格納されるデータを、キー無しコンテナにおいて表現される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the data stored in this decoder as represented in a container appropriate for holding a single primitive value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このデコーダの中に格納されるデータを、単一プリミティブ値を保持するのに適したコンテナの中に表現される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the data stored in this decoder as represented in a container appropriate for holding values with no keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このデコーダの中に格納されるデータを、キーなしで値を保持するのに適したコンテナの中に表現される通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the data stored in this decoder as represented in a container keyed by the given key type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このデコーダの中に格納されるデータを、与えられたキー型によってキー付けされるコンテナの中に表現された通りに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the default memory alignment of T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tの省略時のメモリアライメントを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値をこの値から減じることで入手される差、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the difference of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値の差を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the distance between two indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのインデックス間の隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the distance from this value to the given value, expressed as a stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値から特定の値までの隔たりを返します、ストライドとして表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the distance from this value to the specified value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値から指定された値までの隔たりを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the dynamic type of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の動的型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of self that satisfy isIncluded.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfの要素でisIncludedを満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of the sequence, shuffled using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの要素を返します、与えられた生成子を無作為さの出典として使って混ぜ合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of the sequence, shuffled.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>混ぜ合わされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を要素間の比較として使ってソートされた、シーケンスの要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of the sequence, sorted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスに属する要素を、ソートして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the elements of this sequence of sequences, concatenated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスに属する複数のシーケンスの要素を、鎖状に連結して返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the first element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たすこのシーケンスの最初の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the first index in which an element of the collection satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のインデックスで、それにおけるコレクションの要素が与えられた述部を満足させるものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the first index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された値がコレクションにおいて現れるところの最初のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the given instance cast unconditionally to the specified type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインスタンスを無条件に特定の型にキャストして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the given integer as the equivalent value in a different integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた整数を同等値として異なる整数型において返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the given number unchanged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた数を変更せずに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of the two given values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値の大きい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greater of two comparable values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの比較可能な値のうちより大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the greatest argument passed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>渡された引数の最も大きいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the high-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの上位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index for the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーに対するインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index of the given element in the set, or nil if the element is not a member of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素の集合の中のインデックス、またはその要素が集合のメンバでないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the index of the last element in the collection that matches the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部に合致する、コレクションの中の最後の要素のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the inverse of the bits set in the argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数におけるビットの逆順を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the last element of the sequence that satisfies the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす、シーケンスの最後の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the last index where the specified value appears in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された値がコレクションにおいて現れるところの最後のインデックスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the least argument passed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>渡された引数の最も少ないものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the lesser of the two given values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値のより小さい方を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the lesser of two comparable values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの比較可能な値のうちより小さいものを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素と等しい要素を避けるようにして、このコレクションの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす要素を含んでいない、このコレクションの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素と等しい要素を避けるようにして、このシーケンスの最も長くなりうる下位シーケンスを、順番に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす要素を含んでいない、このシーケンスの最も長くなりうる下位シーケンスそれらを順序どおりに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the low-surrogate code unit of the surrogate pair representing the specified Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたユニコードスカラーを表しているサロゲートペアの下位サロゲートコード単位を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the maximum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの中の最大の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the maximum element in the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの中の最大の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the minimum element in the sequence, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの中の最小の要素を返します、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the minimum element in the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの中の最小の要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the next consecutive location after i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iの後の、以降に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the next consecutive position after i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iの後の、以降に続く位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the non-nil results of mapping the given transformation over this sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた変換をこのシーケンス全体にわたってマッピングする非nilの結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of UTF-16 code units required for the given code unit sequence when transcoded to UTF-16, and a Boolean value indicating whether the sequence was found to contain only ASCII characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-16にコード変換するときに指定されたコードユニットシーケンスに必要とされるUTF-16コードユニットの数を、およびそのシーケンスがASCII文字だけを含むことを発見されたかどうかを指し示すブール値を、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of bytes from the start of one instance of T to the start of the next when stored in contiguous memory or in an Array&lt;T&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tの１つのインスタンスの始まりから次のものの始まりまでのバイト数を返します、隣接メモリの中にまたはArray&lt;T&gt;の中に格納される場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of code units required to encode the given Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコードスカラーをエンコードするのに必要とされるコードユニットの数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of elements in the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす、このシーケンスの中の要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the object instance being used for storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストレージのために使われているオブジェクトインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the offset of an inline stored property within a type’s in-memory representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インライン格納プロパティの、ある型のインメモリ表現内部でのオフセットを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the position immediately after the given index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスの直後の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the position immediately before the given index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたインデックスの直前の位置を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the position in the given UTF-16 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたUTF-16ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the position in the given UTF-8 view that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたUTF-8ビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the position in the given string that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列の中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the position in the given view of Unicode scalars that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたユニコードスカラーのビューの中のある位置を返します、それは正確にこのインデックスに対応します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the previous consecutive location before i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>i前の、以前に続く場所を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the product of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値の積を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値と与えられた値の積、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the quotient and remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値で除算されたこの値の商と余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を指定の値で割ることで入手される商、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the quotient of dividing the first value by the second, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の値を２番目の値で除算した商を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the quotient of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の値を２番目の値で除算した商を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the range of indices described by this range expression within the given collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたコレクション内の、この範囲式によって記述されるインデックスの範囲を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を指定の値によって除算する後の余り、それに加えてオーバーフローが除算の間に起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the remainder of dividing the first value by the second.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の値を２番目の値で除算した余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the remainder of this value divided by the given value using truncating division.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>切り捨て除算を使って与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the remainder of this value divided by the given value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値で除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値の積をこの値に加える結果を返します、中間の丸めなしで計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of combining the elements of the sequence using the given closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャを使って、このシーケンスの要素を結合する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of performing a bitwise AND operation on the two given values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of performing a bitwise OR operation on the two given values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of performing a bitwise XOR operation on the two given values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をその型の持つビット幅にマスクしています、そして結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します、シフト量をマスクしてその型の持つビット幅にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します、シフト量をその型の持つビット幅にマスクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the result of shifting a value’s binary representation the specified number of digits to the right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the square root of the value, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の平方根を返します、表現可能な値に丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the success value as a throwing expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>成功値をスローする式として返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the sum of the two given values, wrapping the result in case of any overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの与えられた値の合計を返します、何らかのオーバーフローの場合には結果をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値と与えられた値の合計、それに加えてオーバーフローがその演算において起こったかどうかを示すブール値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value with greater magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より大きい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the value with lesser magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より小さい規模を持つ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this value rounded to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された丸め規則を使って整数値に丸められたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns this value rounded to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「教科書丸め」を使って整数値に丸めたこの値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if this value is a multiple of other, and false otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値がotherの倍数ならばtrueを、そしてそうでなければfalseを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns without performing work if self and source are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>selfとsourceが等しいならば、作業を実行することなしに戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reuse the Existing Implementation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の実装を再利用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reverses the elements of the collection in place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの要素をその場で逆順にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reversing a Set's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の要素を逆順にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reversing a reversed collection returns the original collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>逆にされたコレクションを逆にすることは、元のコレクションを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right associative</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右結合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right bit shift and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>右ビットシフトして代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right shift operations on negative values “fill in” the high bits with ones instead of zeros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負値上での右シフト演算は、高ビットを１で「満たします」、ゼロではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Round to the closest allowed value that is greater than or equal to the source.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Round to the closest allowed value that is less than or equal to the source.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ソースより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Round to the closest allowed value whose magnitude is greater than or equal to that of the source.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの規模がソースのそれより大きいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Round to the closest allowed value whose magnitude is less than or equal to that of the source.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの規模がソースのそれより小さいか等しい最も近い許される値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Round to the closest allowed value; if two values are equally close, the even one is chosen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、偶数のものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Round to the closest allowed value; if two values are equally close, the one with greater magnitude is chosen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も近い許される値に丸めます；２つの値が同じくらい近いならば、より大きい規模を持つものが選ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rounding Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を丸める</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rounds the value to an integral value using the specified rounding rule.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された丸め規則を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rounds this value to an integral value using “schoolbook rounding.”</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「教科書丸め」を使ってこの値を整数値に丸めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the code in the example above usually prints the letters in the order B → C → D → A.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の例のコードを実行することは、通常は文字をこの順番で出力します、B → C → D → A。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>S() == []</seg>
      </tuv>
      <tuv lang="JA">
        <seg>S() == [] （空の集合は空の配列リテラルと同等です）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SIMD Vector Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SIMDベクター型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SIMD Vectors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SIMDベクター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Saved indices may become invalid as a result of mutating operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>保存されたインデックスは変更を行う演算の結果として無効となるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalar values representing characters that are normally unprintable or that otherwise require escaping are escaped with a backslash.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>通常は出力できないまたはそうするにはエスケープする必要がある、スカラー値表現の文字は、バックスラッシュでエスケープされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalars are never removed from the Unicode Standard, but the usage of deprecated scalars is strongly discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーは決して「ユニコード標準」から取り除かれません、しかし非推奨のスカラーの使用は強く反対されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalars for which this property is true are frequently, but not always, combining marks or modifiers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してこのプロパティが true であるスカラーはしばしば、しかし常にではなく、符号または修飾子と組み合わさっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalars that have emoji presentation by default can be followed by U+FE0E VARIATION SELECTOR-15 to request the text presentation of the scalar instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>emoji表現を初期状態で持つスカラーは、U+FE0E VARIATION SELECTOR-15が後に続くことで、そのスカラーのテキスト表現を代わりに要請できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalars with a non-nil numeric type include numbers, fractions, numeric superscripts and subscripts, and circled or otherwise decorated number glyphs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非nilの数値型をもつスカラーは、数字、分数、上付きおよび下付き数字、そして丸またはそれ以外に装飾された数の字体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scalars with this numeric type are often those that represent a decimal digit but would not typically be used to write a base-10 number, such as “④” (U+2463 CIRCLED DIGIT FOUR).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この数値型を持つスカラーは、たいてい10進法桁を表すがしかし概して底10の数を記述するのに使われないものです、例えば “④”（U+2463 CIRCLED DIGIT FOUR）など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See Toll-Free Bridging for more information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなる情報のためにToll-Free Bridgingを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See Character.wholeNumberValue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Character.wholeNumberValueを見てください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See StringInterpolationProtocol for details on appendInterpolation methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringInterpolationProtocolをappendInterpolationメソッドに関する詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See isUniquelyReferenced for details.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>詳細のためにisUniquelyReferencedを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See Also</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also: LazySequence</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照：LazySequence</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also: LazySequenceProtocol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照：LazySequenceProtocol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also: LazySequenceProtocol, LazyCollection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照：LazySequenceProtocol、LazyCollection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also: elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照：elements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the StringLiteralProtocol documentation for more details about how to do this.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringLiteralProtocol文書化をどのようにこれを行うかについてのさらなる詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the DefaultStringInterpolation and StringInterpolationProtocol documentation for more details.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DefaultStringInterpolationとStringInterpolationProtocol文書化をさらなる詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the children property for details.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>childrenプロパティを詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the children property for details.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>childrenプロパティを詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the top-level StringInterpolationProtocol documentation for more details.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>トップレベルのStringInterpolationProtocol文書化をさらなる詳細として見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See those types for more information.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さらなる情報としてそれらの型を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Selecting Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Selecting and Excluding Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の選択と除外</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sequence Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sequence 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sequence and Collection Operations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスおよびコレクション演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sequence and Collection Protocols</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスおよびコレクションプロトコル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sequence operations taking closure arguments, such as map and filter, are normally eager: they use the closure immediately and return a new array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャ引数を取るシーケンス操作、例えばmapとfilterは、普通は先行処理です：これらはクロージャを即座に使用します、そしてある新しい配列を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sequences provide access to their elements by creating an iterator, which keeps track of its iteration process and returns one element at a time as it advances through the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>さまざまなシーケンスは、あるイテレータを作成することによってそれらの要素に対するアクセスを提供します、それはそれの反復処理を追跡し続けてそれがそのシーケンスを始めから終わりへと前進するごとに１度に１つ要素を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serialize and deserialize instances of your types with implicit or customized encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のインスタンスを暗黙のまたはカスタマイズされたエンコーディングでシリアライズおよびデシリアライズします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set A is a strict subset of another set B if every member of A is also a member of B and B contains at least one element that is not a member of A.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合Aがもう１つの集合Bの狭義の部分集合であるのは、AのすべてのメンバがまたBのメンバであり、Bが少なくとも１つのAのメンバではない要素を含む場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set A is a strict superset of another set B if every member of B is also a member of A and A contains at least one element that is not a member of B.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合Aがもう１つの集合Bの狭義の上位集合であるのは、BのすべてのメンバがまたAのメンバであり、Aが少なくとも１つのBのメンバではない要素を含む場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set A is a subset of another set B if every member of A is also a member of B.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合Aがもう１つの集合Bの狭義の部分集合であるのは、AのすべてのメンバがまたBのメンバである場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set A is a superset of another set B if every member of B is also a member of A.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合Aがもう１つの集合Bの狭義の上位集合であるのは、BのすべてのメンバがまたAのメンバである場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set Operations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合演算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set operations are not limited to use with other sets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合演算は、他の集合との使用に制限されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SetAlgebra Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetAlgebra 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets and Dictionaries</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合と辞書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets provide a suite of mathematical set operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合は、数学的な集合演算のひとそろいを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sharing class instances pervasively throughout an app makes logic errors more likely.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリの隅々まで行き渡る共有クラスインスタンスは、論理エラーをより招きやすくします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sharing indices between collections and their subsequences is an important part of the design of Swift’s collection algorithms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションとそれらの下位シーケンスとの間のインデックスの共有は、Swiftのコレクションアルゴリズム設計の重要な部分のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shuffles the collection in place, using the given generator as a source for randomness.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションをその場で混ぜ合わせます、与えられた生成子を無作為さの出典として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shuffles the collection in place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションをその場で混ぜ合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signaling NaNs typically raise the Invalid flag when used in general computing operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シグナルNaNは、一般的な計算操作に使われる時に通常は無効フラグをあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Signed Integers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号付き整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SignedInteger Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SignedInteger実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SignedNumeric Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SignedNumeric 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to the reduce(_:_:) method defined in the standard library, which takes an initial value and a combining closure, reduce1(_:) uses the first element of the sequence as the initial value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期値と結合クロージャをとる、標準ライブラリ定義のreduce(_:_:)メソッドとよく似て、 reduce1(_:)はシーケンスの最初の要素を初期値として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, if an error producing Objective-C method returns a nil value to indicate the failure of a method call, Swift changes the return type of the function to a nonoptional type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、エラーを生成しているObjective-Cメソッドがnil値を返してメソッド呼び出しの失敗を指し示すならば、スウィフトは関数の戻り型を非オプショナル型に変えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, you use the availability condition #available to execute code conditionally based on required platform and version conditions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同様に、あなたは利用可能性条件#availableを使うことで、必要なプラットホームおよびバージョン条件に基づいて、条件付きでコードを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simply assign an array literal to a variable or constant with the Set type specified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単にある配列リテラルをSet型指定子を持つ変数または定数に代入してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simply surround a comma-separated list of values, instances, or literals with square brackets to create an array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単にコンマ区切りの値、インスタンス、またはリテラルを角括弧で囲むことで、配列リテラルを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since equality between instances of Equatable types is an equivalence relation, any of your custom types that conform to Equatable must satisfy three conditions, for any values a, b, and c:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatable型のインスタンス間の同等性は等値関係であることから、Equatableに準拠するあなたのあつらえの型は何であれ、任意の値a、b、そしてcに対して、３つの条件を満たす必要があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices Are Views onto Arrays</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスは配列に関する見方です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices Inherit Collection Semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスはコレクションの意味論を継承します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices Inherit Semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスは意味論を継承します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices Maintain Indices</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスはインデックスを維持します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices Share Indices</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスはインデックスを共有します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slices maintain the same indices of the larger array for the same elements, so the starting index of a slice depends on how it was created, letting you perform index-based operations on either a full array or a slice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスはより大きな配列と同じインデックスを同じ要素に対して維持します、そのためスライスの開始インデックスはそれがどう作成されたかによって決まり、あなたにインデックスに基づく演算を完全な配列またはスライスのどちらでも実行させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slicing with an unbounded range is essentially a conversion of a collection instance into its slice type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無境界範囲でスライスすることは、本質的にあるコレクションインスタンスのそれのスライス型への変換です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Solve complex problems and write high-performance, readable code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複雑な問題を解決します、そして高性能の、読みやすいコードを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some Objective-C APIs—like target-action—accept method or property names as parameters, then use those names to dynamically call or access the methods or properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかのObjective-C API — ターゲットアクションのような — は、メソッドまたはプロパティ名を引数として受け入れます、そのときそれらの名前を使って動的にメソッドまたはプロパティに呼び出しまたはアクセスをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some algorithms, however, may call for direct iterator use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>幾つかのアルゴリズムは、しかしながら、直にイテレータを使うために呼び出すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some characters that are visible in a string are made up of more than one Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列の中に見られるいくつかの文字は、１つ以上のユニコードスカラー値で構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some letterlike scalars used in numeric systems, such as Greek or Latin letters, do not have a non-nil numeric type, in order to prevent programs from incorrectly interpreting them as numbers in non-numeric contexts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数値システムにおいて使われるいくつかの字のようなスカラー、例えばギリシャまたはラテン文字それらは、非nilの数値型を持ちません、その目的はプログラムが非数値文脈においてそれらを間違って数として解釈するのを防ぐことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some operations that are efficient on a dictionary are slower when using KeyValuePairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書に効率の良いいくつかの演算は、KeyValuePairsを使う場合により遅くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some other types, such as optionals, arrays and ranges automatically become hashable when their type arguments implement the same.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの他の型、オプショナル、配列および範囲は、自動的にハッシュ化可能になります、それらの型引数が同じものを実装する場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some scalars, such as control characters, do not have a value for this property in the UCD.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかのスカラー、例えば制御文字などは、このプロパティに対する値をUCDにおいて持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some sequence and collection operations can be used more simply when the elements conform to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかのシーケンスとコレクションの演算子は、要素がEquatableに準拠する時はより簡単に使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some special cases apply:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかの特別な場合が適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes you may want different error states to include the same common data, such as the position in a file or some of your application’s state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>時にはあなたは、いくらかの異なるエラー状態をこの同じ通常のデータに含めたいかもしれません、例えばあるファイル中の位置やあなたのアプリケーションの何らかの状態など。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorting Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素のソート（並べ換え）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorting these scalars by their combining classes yields "\u{0041}\u{0316}\u{0301}", so two strings that differ only by the ordering of those scalars would compare as equal:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのスカラーをそれらの結合クラスによってソートすることは、"\u{0041}\u{0316}\u{0301}"を生み出します、それでこれらのスカラーの順番によってのみ異なる２つの文字列は等しいと比較されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorts the collection in place, using the given predicate as the comparison between elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションをその場でソートします、与えられた述部を要素間の比較として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorts the collection in place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションをその場でソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special-Use Collections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特殊用途のコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special-Use Numeric Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特殊用途の数値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, it does not validate that a high-surrogate code unit precedes x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、それは高位サロゲートコード単位がxの前にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, it does not validate that a low-surrogate code unit follows x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的には、それは低位サロゲートコード単位がxの後にくることを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, scalars have this numeric type if they occupy a contiguous range of code points representing numeric values 0...9.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的に、スカラーは、もしそれらが数値0...9を表しているコード点の隣接範囲を占有するならば、この数値型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifically, you use the Array type to hold elements of a single type, the array’s Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>とりわけ、あなたはArray型をある単一の型、その配列のもつElement型、の複数の要素を保持するために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splitting a String</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を分割する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Splitting and Joining Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の分割と連結</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard Library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard input is interpreted as UTF-8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準入力は、UTF-8として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting with start, each successive value of the sequence adds stride until the next value would be beyond end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startで開始して、シーケンスのそれぞれ次の値はstrideを、次の値がendを越えることになるまで加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting with start, each successive value of the sequence adds stride until the next value would be equal to or beyond end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startで開始して、シーケンスのそれぞれ次の値はstrideを、次の値がendに等しいか越えるまで加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts or continues decoding a UTF-16 sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるUTF-16シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts or continues decoding a UTF-32 sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるUTF-32シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts or continues decoding a UTF-8 sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるUTF-8シーケンスのデコードを開始または継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts or continues decoding a code unit sequence into Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コード単位シーケンスをユニコードスカラー値へデコードすることを開始するまたは継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Store and organize data using arrays, dictionaries, sets, and other data structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列、辞書、集合、および他のデータ構造を使ってデータを格納および組織化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Store your custom types in sets or use them as dictionary keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いろいろなあなたのあつらえの型を集合に格納するまたはそれらを辞書キーとして使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores a keyed encoding container for the given key and returns it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付けされたエンコーディングコンテナを指定キーに対して供給して、それを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores a new nested container for the default super key and returns A new encoder instance for encoding super into that container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい入れ子コンテナを省略時のsuperキーに対して格納します、そしてsuperをエンコードするための新しいエンコーダインスタンスをそのコンテナに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores a new nested container for the given key and returns A new encoder instance for encoding super into that container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい入れ子のコンテナを指定キーに対して格納します、そしてsuperをエンコードするための新しいエンコーダインスタンスをそのコンテナに返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores a value’s bytes into the buffer pointer’s raw memory at the specified byte offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値のもつバイトをバッファポインタのもつ生のメモリに指定されたバイトオフセットで格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores an unkeyed encoding container for the given key and returns it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー付けされないエンコーディングコンテナを指定キーに対して供給して、それを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores the given value’s bytes into raw memory at the specified offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値のもつバイトを生のメモリへ指定されたオフセットで格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位AND演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位OR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位XOR演算を２つの与えられた値に関して実行する結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ左にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Stores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のバイナリ表現を指定された桁数だけ右にシフトする結果を左手側の変数に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Storing substrings may, therefore, prolong the lifetime of string data that is no longer otherwise accessible, which can appear to be memory leakage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列の格納は、したがって、それ以外ではもはやアクセスできない文字列データのライフサイクルを延長するでしょう、それはメモリリークとして現れかねません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Streams</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストリーム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strideable Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Strideable実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strides</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストライド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String Literals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String Representation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String buffers use an exponential growth strategy that makes appending to a string a constant time operation when averaged over many append operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列バッファは指数成長戦略を使います、それはある文字列へ追加することを、多くの追加演算を平均した時に定数時間演算にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String interpolations give you an easy way to build a string from multiple pieces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列補間は、多様な断片からある文字列を組み立てる簡単な方法をあなたに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>StringProtocol Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringProtocol実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings always have value semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列は常に値意味論を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings and Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列と文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings and Text</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列とテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings and their views share indices, so you can access the UTF-8 view of the name string using the same firstSpace index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列とそれのビューはインデックスを共有します、それであなたはname文字列のUTF-8ビューにアクセスすることが同じfirstSpaceインデックスを使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings are collections of Character instances, so the number of visible characters is generally the most natural way to count the length of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列は、Characterインスタンスのコレクションです、なので見ることのできる文字の数はたいてい文字列の長さを数える最も自然な方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings in Swift are Unicode correct and locale insensitive, and are designed to be efficient.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでの文字列は、ユニコードに正確でロケールに影響されず、そして効率的であるように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (&lt;).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列はSwift ではComparableプロトコルに準拠します、それでこれらの名前はより小さい演算子（&lt;）によって昇順にソートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures and classes are good choices for storing data and modeling behavior in your apps, but their similarities can make it difficult to choose one over the other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体とクラスは、あなたのアプリにおけるデータ格納と挙動モデル化のための良い選択です、しかしそれらの類似点は他方より一方を選ぶのを難しくするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures and classes both support a form of inheritance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体とクラスは両方とも継承の形式をサポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures and protocols can only adopt protocols; they can't inherit from classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体とプロトコルは、プロトコルの採用だけが可能です；それらはクラスから継承できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures in Swift can declare methods, property accessors, and initializers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでの構造体は、メソッド、プロパティアクセッサ、そしてイニシャライザを宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures in Swift include many features that are limited to classes in other languages: They can include stored properties, computed properties, and methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftでのさまざまな構造体は、他の言語ではクラスに限られる多くの機能を含みます：それらは格納プロパティ、計算プロパティ、そしてメソッドを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structures with Default Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の値を持つ構造体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subclasses must not have any stored properties; any storage needed should be included in Header.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブクラスは、どんな格納プロパティも持つ必要はありません；必要とされるあらゆるストレージはHeaderの中に含められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subnormal numbers are often called denormal or denormalized—these are different names for the same concept.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブノーマル数は、しばしばデノーマルまたはデノーマライズされたと呼ばれます—それらは同じ概念に対する異なる名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subnormal values do not use the full precision available to values of a type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>サブノーマル値は、ある型の値に利用可能な完全な精度を使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subscripting a dictionary with a key returns an optional value, because a dictionary might not hold a value for the key that you use in the subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるキーで辞書に添え字を使うことは、オプショナル値を返します、なぜなら辞書はあなたが添え字に使ったキーに対して値を保持しないかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subscripting with a key takes the following form:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーによる添え字は以下の形式をとります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subscripting with a key, yielding an optional value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーによる添え字、オプショナル値を生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subscripting with an index, yielding a key-value pair:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インデックスによる添え字、キー値ペアを生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subscripts</seg>
      </tuv>
      <tuv lang="JA">
        <seg>添え字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Substrings present the same interface as strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位文字列は、文字列と同じインターフェイスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtract</seg>
      </tuv>
      <tuv lang="JA">
        <seg>減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtract and assign</seg>
      </tuv>
      <tuv lang="JA">
        <seg>減算して代入する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtract with overflow</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー減算</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtracts one value from another and produces their difference, rounded to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値をもう一方から減じて、それらの差を返します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtracts one value from another and produces their difference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値をもう一方から減じて、それらの差を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, rounding to a representable value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します、表現可能な値へ丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の値を最初のものから減じてその差を左手側の変数の中に格納します、あらゆるオーバーフローをラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Subtracts the second value from the first and stores the difference in the left-hand-side variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の値を最初のものから減じて、その差を左手側の変数の中に格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such letters are stored in text ahead of syllable-initial consonants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのような文字は、テキストにおいて音節リテラルの子音の前に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supporting Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>支援を行う型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose you are tasked with finding the first two days with absences in the session.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこの学期において欠席者のある最初の２つの日付を見つける任務を負うと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppose you need to store a list of the names of students that are signed up for a class you’re teaching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが生徒の名前のリストをしまっておく必要があると仮定してみましょう、それはあなたが教えているクラスに受講届けを出されるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Suppresses the representation of all ancestor classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>全ての先祖クラスの表現を抑制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift Standard Library</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift Syntax</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフト構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift and Objective-C in the Same Project</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同じプロジェクトの中のSwiftとObjective-C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift automatically imports simple, constant-like macros, declared with the #define directive, as global constants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは自動的に簡単に、#defineで宣言される、定数のようなマクロをグローバル定数としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift automatically translates Objective-C methods that produce errors into methods that throw an error according to Swift’s native error handling functionality.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトは、自動的にエラーを生成するObjective-Cメソッドを、スウィフト固有のエラー処理機能に従ってエラーをスローするメソッドに翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift converts an expression like "The time is \(time)." as MyString into a series of statements similar to:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、"The time is \(time)." as MyStringのような式を、次のような一連の文に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift ensures your code is fast and efficient, while its memory safety and native error handling make the language safe by design.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、あなたのコードが高速で効率的であるのを受け合う一方で、それのメモリ安全と生得のエラー処理は言語を計画的に安全にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift examines Objective-C method declarations and translates them into Swift throwing methods, with shorter names when possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、Objective-Cメソッド宣言を調べて、それらをSwiftスローメソッドへと、可能な場合はより短い名前で翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports C unions as Swift structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトは、C共用体をスウィフト構造体としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports Cocoa methods with error parameters as throwing methods, as described in About Imported Cocoa Error Parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、エラーパラメータを持つCocoaメソッドをスローメソッドとしてインポートします、インポートされるCocoaエラーパラメータについてで記述されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports any C structure declared in a C header as a Swift structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトは、Cヘッダにおいて宣言されるどんなC構造体もスウィフト構造体としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports any function declared in a C header as a Swift global function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトは、Cヘッダにおいて宣言されるどんな関数もスウィフトのグローバルな関数としてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports bit fields that are declared in structures, like those found in Foundation’s NSDecimal type, as computed properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、構造体において宣言されるビットフィールド、FoundationのNSDecimal型において見つけられるそれらに似たもの、を計算プロパティとしてインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports each object instance parameter, return value, and property as an implicitly wrapped optional:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、オブジェクトインスタンスパラメータ、戻り値、そしてプロパティそれぞれを暗黙的にラップされたオプショナルとしてインポートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift imports the type the same way as in the previous section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、その型を以前の節と同じ方法でインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift includes modern features like type inference, optionals, and closures, which make the syntax concise yet expressive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、型推論、オプショナル、そしてクロージャのような、モダンな機能を含みます、それは構文を簡潔にその上さらに表現豊かにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift is developed in the open.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、オープンに開発されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift makes it as easy to create a new set as to create a new array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、新しい集合を作成することを新しい配列を作成するのと同じくらい簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftはあなたのコードにおいて配列の作成を配列リテラルを使って簡単にします：単純にコンマ区切りの値のリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift numeric types (Int, Float, and so on)</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift数値型（Int、Float、など）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift only imports C variadic functions that use a va_list for their arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、C可変長引数関数で、va_listをそれの引数として使うものをインポートするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftはこのイニシャライザに、リテラル文節のサイズと補間文節の数を指定する一対の引数を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift provides a default debugging textual representation for any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、省略時のデバッグ用テキスト表現をあらゆる型に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift sees every header you expose publicly in your umbrella header.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、あなたがパブリックにあなたのアンブレラヘッダにおいて露出するすべてのヘッダを見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift streamlines interoperation with C string APIs by letting you pass a String instance to a function as an Int8 or UInt8 pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、あなたにStringインスタンスを関数へInt8またはUInt8ポインタとして渡させることによって、C文字列APIとの相互作用を能率化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift uses a sequence’s or collection’s iterator internally to enable the for-in loop language construct.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、あるシーケンスのもつまたはコレクションのもつイテレータを内部的に使うことで、for-inループ言語構成体を可能にしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift uses only simple Boolean values in conditional contexts to help avoid accidental programming errors and to help maintain the clarity of each control statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、単純なブール値だけを条件文脈において使用することによって、思いがけないプログラミングエラーを防ぐのを助けます、そして各制御文の明瞭性を保つのを助けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift value type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift値型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift will automatically use DefaultStringInterpolation and provide an init(stringInterpolation:) implementation which passes the interpolated literal’s contents to init(stringLiteral:), so you won’t need to implement anything special.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、自動的にDefaultStringInterpolationを使います、そしてinit(stringInterpolation:)実装を提供します、それは補間されたリテラルのもつ内容をinit(stringLiteral:)に渡します、それであなたは特に何も実装する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift wraps these returned Core Foundation objects in an Unmanaged&lt;Instance&gt; structure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftは、これらの返されたCore FoundationオブジェクトをUnmanaged&lt;Instance&gt;構造体でラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift’s String type conforms to TextOutputStream already, so you can capture the output from print(_:to:) and dump(_:to:) in a string instead of logging it to standard output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftのString型は、すでにTextOutputStreamに準拠します、なのであなたはprint(_:to:)およびdump(_:to:)からの出力を文字列の中に捕えることが、それを標準出力に記録する代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift’s enumerations are well suited to represent simple errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftの列挙は、単純なエラーを表すのによく適します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Swift’s type system usually shows the wrapped type’s name with a trailing question mark (?) instead of showing the full type name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftのもつ型システムは通常、ラップされた型の名前を後に続く疑問符（?）で示します、完全な型の名前を示す代わりに。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table 1</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table 2</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表２</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table 3</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ternary conditional</seg>
      </tuv>
      <tuv lang="JA">
        <seg>三項条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing for Membership</seg>
      </tuv>
      <tuv lang="JA">
        <seg>帰属をテストする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Text Output</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキスト出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That argument list can include multiple arguments and argument labels.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数リストは、複数の引数そして引数ラベルを含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That default representation is used by the String(reflecting:) initializer and the debugPrint(_:) function for types that don’t provide their own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の表現は、String(reflecting:)イニシャライザおよびdebugPrint(_:)関数によって、それらが自前で提供しない型に対して使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, for a mutable collection instance a, index i, and value x, the two sets of assignments in the following code sample must be equivalent:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、ある可変コレクションインスタンスa、インデックスi、そして値xに対して、以下のコード見本における２組の代入は同等なものでなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, for any elements a, b, and c, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、何らかの要素a、b、そしてcに対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, for any elements a, b, and c, the following conditions must hold:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、何らかの要素a、b、そしてcに対して、以下の条件が保持されなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, for any index i into a bidirectional collection c:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、二方向性のコレクションcに対する何らかのインデックスiは：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, if source is negative, the result is padded with ones; otherwise, the result is padded with zeros.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、sourceが負ならば、結果は１で詰め物をされます；そうでなければ、結果はゼロで詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, if a Slice instance is wrapped around a mutable collection that has value semantics, such as an array, mutating the original collection would trigger a copy of that collection, and not affect the base collection stored inside of the slice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、Sliceインスタンスが値意味論を持つ可変コレクション、例えば配列などの周りにラップされる場合、オリジナルのコレクションを変化させることはそのコレクションのコピーを誘発します、それでスライス内部に格納される基盤コレクションには影響を及ぼしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すなわち、値意味論を持つ可変コレクション、例えば配列などのスライスを扱う場合、元のコレクションを変化させることはそのコレクションのコピーを引き起こし、スライスの内容に作用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That kind of conversion is nonbreaking in other contexts, but would trigger a runtime error if the result of offset(of:) is force-unwrapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その種の変換は、他の文脈においては非破壊です、しかしoffset(of:)の結果が強制アンラップされるならば実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That method call automatically triggers the observer's change handler:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのメソッド呼び出しは、自動的にオブザーバの持つ変更ハンドラを誘発します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That requirement holds even for empty ranges.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その要件は空の範囲に対しても適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That same value is too large to represent as an Int8 instance, so the second conversion fails, triggering a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その同じ値は、Int8インスタンスとして表すには大きすぎます、それで２番目の変換は、実行時エラーを引き起こして失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That way, Swift can handle memory management for you.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのように、スウィフトはあなたの代わりにメモリ管理をうまく取り扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That will ensure that isKnownUniquelyReferenced(_:) only returns true when there is really one accessor, or when there is a race condition, which is already undefined behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それはisKnownUniquelyReferenced(_:)が本当に１つのアクセッサしかない時に、またはすでに未定義挙動であるところの競合状態の時にtrueを返すだけであるのを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IEEE 754 specification defines a canonical, or preferred, encoding of a floating-point value’s representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IEEE 754仕様は、ある正準の、または推奨の、浮動小数点値の表現のエンコーディングを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &amp;&lt;&lt;= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>&amp;&lt;&lt;=演算子は、マスクするシフトを実行します、そこにおいてrhsとして使われる値はマスクされることで範囲0..&lt;lhs.bitWidthの中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &amp;&gt;&gt;= operator performs a masking shift, where the value passed as rhs is masked to produce a value in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>&amp;&gt;&gt;=演算子は、マスクするシフトを実行します、そこにおいてrhsとして渡される値はマスクされることで範囲0..&lt;lhs.bitWidthの中の値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The * operator implements the multiplication operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>*演算子は、IEEE 754 仕様によって定義される乗算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The + operator implements the addition operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>+演算子は、IEEE 754 仕様によって定義される加算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The - operator implements the subtraction operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>-演算子は、IEEE 754 仕様によって定義される減算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The / operator implements the division operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>/演算子は、IEEE 754 仕様によって定義される除算演算子を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;&lt; operator performs a smart shift, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>&lt;&lt;演算子は、ある賢いシフトを実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The == comparison and the contains(_:) method call in the following example depend on strings and integers being equatable:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>==比較とcontains(_:)メソッド呼び出しは以下の例において、文字列と整数がequatableであることに依存します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &gt;&gt; operator performs a smart shift, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>&gt;&gt;演算子は、ある賢いシフトを実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &gt;&gt;= operator performs a smart shift, which defines a result for a shift of any value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>&gt;&gt;=演算子は、ある賢いシフトを実行します、それは何らかの値のシフトに対する結果を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ?? operator also works with another Optional instance on the right-hand side.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>??演算子はまた、別のOptionalインスタンスを右手側でも扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ASCIILogger type’s write(_:) method processes its string input by escaping each Unicode scalar, with the exception of "\n" line returns.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ASCIILogger型のもつwrite(_:)メソッドは、それの文字列入力を各ユニコードスカラーをエスケープすることによって処理します、"\n"行復帰を除いては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AdditiveArithmetic protocol provides a suitable basis for additive arithmetic on scalar values, such as integers and floating-point numbers, or vectors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Additiveプロトコルは、例えば整数および浮動小数点数、またはベクターなど、スカラー値に関する加算算術にふさわしい基礎を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The AnyHashable type forwards equality comparisons and hashing operations to an underlying hashable value, hiding its specific underlying type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyHashable型は、さまざまな同等性比較およびハッシュ演算をある基盤をなすハッシュ化値に転送して、それの特定の基礎をなす型を隠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ArraySlice type makes it fast and efficient for you to perform operations on sections of a larger array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArraySlice型は、ある大きな配列の各部分上で演算を実行することをあなたの代わりにより速くより効率的にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Base (presumably non-lazy) sequence from which self was created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それからselfが作成されたBase（おそらく非遅延の）シーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The BinaryFloatingPoint protocol extends the FloatingPoint protocol with operations specific to floating-point binary types, as defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BinaryFloatingPointプロトコルは、FloatingPointプロトコルを、IEEE 754仕様で定義されるとおりに、浮動小数点バイナリ型に特有の演算で拡張します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The BinaryInteger protocol is the basis for all the integer types provided by the standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BinaryIntegerプロトコルは、標準ライブラリによって提供される全ての整数型の土台です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CanonicalCombiningClass type conforms to RawRepresentable with a raw value of type UInt8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CanonicalCombiningClass型は、RawRepresentableに型UInt8の生の値で準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Character type represents a character made up of one or more Unicode scalar values, grouped by a Unicode boundary algorithm.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Character型は、あるユニコード境界アルゴリズムによって一群にされる、ひとつ以上のユニコードスカラー値から成り立っている１つの文字を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Collection protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Collectionプロトコルは、多くの演算に対して省略時の実装を宣言および提供していて、それは要素がそれらの添え字によってアクセス可能になっているのを当てにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CollectionOfTwo structure is a fixed-size collection that always holds two elements of a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このCollectionOfTwo構造体は固定サイズのコレクションです、それは常にある決まった型の２つの要素を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Comparable protocol is used for types that have an inherent order, such as numbers and strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparableプロトコルは、本来備わっている順番を持つ型、例えば数や文字列などで使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ContiguousArray and ArraySlice types are not bridged; instances of those types always have a contiguous block of memory as their storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ContiguousArrayとArraySlice型はブリッジされません；それらの型のインスタンスは常に隣接するメモリブロックをそれらのストレージとして持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ContiguousArray type is a specialized array that always stores its elements in a contiguous region of memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ContiguousArrayは、それの要素がメモリの隣接領域に常に格納される特殊化された配列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Date type can now be used with the stride(from:to:by:) and stride(from:through:by:) functions and as the bounds of an iterable range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Date型は、今ではstride(from:to:by:)およびstride(from:through:by:)関数でそして反復可能な範囲の境界として使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The FixedWidthInteger protocol adds binary bitwise operations, bit shifts, and overflow handling to the operations supported by the BinaryInteger protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FixedWidthIntegerプロトコルは、バイナリビット単位演算子、ビットシフト、そしてオーバーフロー処理を、BinaryIntegerプロトコルによってサポートされる演算に加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The FloatingPoint protocol declares common arithmetic operations, so you can write functions and algorithms that work on any floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatingPointプロトコルは通常の算術演算子を宣言します、それであなたは何らかの浮動小数点型上で働く関数およびアルゴリズムを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IndexingIterator type is the default iterator for any collection that doesn’t declare its own.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IndexingIterator型は、それ独自のものを宣言しないあらゆるコレクションに対する省略時のイテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IteratorProtocol protocol is tightly linked with the Sequence protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IteratorProtocolプロトコルは、Sequenceプロトコルときつく結び付けられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The MutableCollection protocol allows changing the values of a collection’s elements but not the length of the collection itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MutableCollectionプロトコルは、コレクションのもつ要素の値の変更を可能にします、しかしコレクション自体の長さはそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NS_ENUM macro is the only enumeration macro that results in an actual enumeration type when imported to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_ENUMマクロは、Swiftにインポートされる場合に実際の列挙型という結果になるただ１つの列挙マクロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Numeric protocol provides a suitable basis for arithmetic on scalar values, such as integers and floating-point numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Numericプロトコルは、例えば整数および浮動小数点数など、スカラー値に関する算術にふさわしい基礎を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Optional type is an enumeration with two cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Optional型は、２つのケース節を持つ列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Player type is a class, so it doesn't qualify for automatic synthesis of the Equatable or Hashable requirements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Player型はクラスです、なのでそれはEquatableまたはHashable要件の自動的な合成の基準を満たしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The PlaygroundQuickLook protocol is deprecated, and will be removed from the standard library in a future Swift release.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>PlaygroundQuickLookプロトコルは推奨されません、そして将来のSwiftリリースで標準ライブラリから取り除かれるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The RandomAccessCollection protocol adds further constraints on the associated Indices and SubSequence types, but otherwise imposes no additional requirements over the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomAccessCollectionプロトコルは、一層の制約を関連IndicesおよびSubSequence型に加えます、しかしそれ以外ではBidirectionalCollectionプロトコルを越える追加要件は課されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The RawRepresentable protocol is seen mainly in two categories of types: enumerations with raw value types and option sets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RawRepresentableプロトコルが主に見られるのは、２つの部類の型：列挙で生の値型を持つものとオプションセットにおいてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The SandwichPreferences class and its includesCrust property are renamed to Sandwich.Preferences and isCrusty for Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SandwichPreferencesクラスとそれのincludesCrustプロパティは、Sandwich.PreferencesとisCrustyへとSwiftのために改名されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Sequence protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O(n) unless documented otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sequenceプロトコルは要素アクセスについて他の要件を設けません、それでシーケンスを辿っていくおきまりの仕事はO(n)と考えるべきです、そうでないと文書化されるのでない限り。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Sequence protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sequenceプロトコルは、準拠する型に関して、それらが反復によって破壊的に消費されることになるかについて要件を設けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Sequence protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sequenceプロトコルは、シーケンスのもつ値への順次的なアクセスを頼りにするような多くの一般的な演算に対して省略時の実装を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Set and Array types each handle array literals in their own way to create new instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetとArray型は、それぞれ配列リテラルをそれら独自の方法で取り扱って、新しいインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The SignedNumeric protocol extends the operations defined by the Numeric protocol to include a value’s additive inverse.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SignedNumericプロトコルは、Numericプロトコルによって定義される演算を拡張して、値の加法の逆元を含めるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The StreetAddress type now conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StreetAddress型は、今やEquatableに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Stride type for Date is Int, inferred from the parameter and return types of advanced(by:) and distance(to:):</seg>
      </tuv>
      <tuv lang="JA">
        <seg>DateのためのStride型はIntです、パラメータと戻り値のadvanced(by:)とdistance(to:)から推論されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Strideable protocol provides default implementations for the equal-to (==) and less-than (&lt;) operators that depend on the Stride type’s implementations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Strideableプロトコルは、省略時の実装を同等（==）およびより小さい（&lt;）演算子に対して、Stride型の実装に依存して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String and StaticString types conform to the ExpressibleByStringLiteral protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringとStaticString型は、ExpressibleByStringLiteralプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String, StaticString, Character, and Unicode.Scalar types all conform to the ExpressibleByUnicodeScalarLiteral protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String、StaticString、Character、そしてUnicode.Scalar型は、すべてExpressibleByUnicodeScalarLiteralプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String, StaticString, and Character types conform to the ExpressibleByExtendedGraphemeClusterLiteral protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String、StaticString、そしてCharacter型は、ExpressibleByExtendedGraphemeClusterLiteralプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The StringInterpolation type is responsible for collecting the segments passed to its appendLiteral(_:) and appendInterpolation methods and assembling them into a whole, converting as necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringInterpolation型は、それのappendLiteral(_:)とappendInterpolationメソッドに渡される文節を集めること、そしてそれらをある全体へと、必要に応じて変換して、組み立てることに責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UTF16View in which to find the new position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それにおいて新しい位置を見つけるUTF16View。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UTF8View in which to find the new position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それにおいて新しい位置を見つけるUTF8View。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode.Scalar type, representing a single Unicode scalar value, is the element type of a string’s unicodeScalars collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一のユニコードスカラー値を表している、Unicode.Scalar型は、ある文字列のもつunicodeScalarsコレクションの要素型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UnicodeCodec protocol declares methods that decode code unit sequences into Unicode scalar values and encode Unicode scalar values into code unit sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnicodeCodecプロトコルは、コード単位シーケンスをユニコードスカラー値へデコードする、ユニコードスカラー値をコード単位シーケンスへエンコードするメソッドを宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UnicodeScalarView in which to find the new position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それにおいて新しい位置を見つけるUnicodeScalarView。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unmanaged&lt;Instance&gt; structure provides two methods to convert an unmanaged object to a memory-managed object—takeUnretainedValue() and takeRetainedValue().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Unmanaged&lt;Instance&gt;構造体は、２つのメソッドを、管理されないオブジェクトをメモリ管理されたオブジェクトに変換するために提供します ― takeUnretainedValue()とtakeRetainedValue()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UnsafeMutableRawPointer type provides no automated memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawPointer型は、自動メモリ管理、型安全、そしてアライメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UnsafeRawPointer type provides no automated memory management, no type safety, and no alignment guarantees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeRawPointer型は、自動メモリ管理、型安全、そしてアライメント保証を提供しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Words type must conform to the RandomAccessCollection protocol with an Element type of UInt and Index type of `Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Words型は、RandomAccessCollectionプロトコルに、UIntのElement型そしてIntのIndex型を使って準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The adjective constant is created by calling this initializer with a slice of the picnicGuest.unicodeScalars view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>adjective定数は、このイニシャライザをpicnicGuest.unicodeScalarsビューのスライスとともに呼び出すことによって作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base property can be cast back to its original type using one of the casting operators (as?, as!, or as).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>baseプロパティは、それの元の型へキャストされて戻されることがキャスト演算子（as?、as!、またはas）を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The binaryString implementation uses the static bitWidth property and the right shift operator (&lt;&lt;), both of which are available to any type that conforms to the FixedWidthInteger protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>binaryString実装は、静的bitWidthプロパティと右シフト演算子（&lt;&lt;）を使います、それらの両方ともFixedWidthIntegerプロトコルに準拠するあらゆる型で使用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The cafe string is a collection of the nine characters that are visible when the string is displayed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cafe文字列は、９つの文字からなる１つのコレクションで、その文字列が表示される時に見られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The children collection of the resulting mirror may be upgraded to a random access collection later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果となるミラーのchildrenコレクションは、後にランダムアクセスコレクションにアップグレードされるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The endIndex property of an UnsafeBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The endIndex property of an UnsafeMutableBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The endIndex property of an UnsafeMutableRawBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The endIndex property of an UnsafeRawBufferPointer instance is always identical to count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeRawBufferPointerインスタンスのendIndexプロパティは、常にcountと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exponent property has the following edge cases:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>exponentプロパティは、次の境界事例を持ちます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The firstName constant is an instance of the Substring type—a type that represents substrings of a string while sharing the original string’s storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstName定数は、Substring型 — ある文字列の下位文字列をオリジナル文字列のもつストレージを共有している間に表す型のインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The firstSpace constant is an index into the text string—the position of the first space in the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstSpace定数は、text文字列へのあるインデックス — その文字列の中の最初の空白の位置、です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The getDefaultValue(_:) function uses optional chaining to safely call the implicitly unwrapped class method on c.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>getDefaultValue(_:)関数は、オプショナル連鎖を使って、暗黙的にアンラップされるクラスメソッドをc上で安全に呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash(into:) method in this example feeds the grid point’s x and y properties into the provided hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>hash(into:)メソッドはこの例において、格子点のもつxとyプロパティをその提供されたhasherへと与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The high component of the value carries the sign, if the type is signed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値のhigh構成部分は符号を運びます、その型が符号付きならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index(after:) method for advancing an index into your collection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるインデックスをあなたのコレクションにおいて前に進めるためのindex(after:)メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The invalidInput case includes the invalid character as an associated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>invalidInputケース節は、無効な文字を関連値として含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isEqual(to:) method implements the equality predicate defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isEqual(to:)メソッドは、IEEE 754仕様によって定義される同等性述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isKnownUniquelyReferenced(_:) function is useful for implementing the copy-on-write optimization for the deep storage of value types:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isKnownUniquelyReferenced(_:)関数は、値型の深い貯蔵に対してコピーオンライト最適化を実装するのに便利です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isLess(than:) method implements the less-than predicate defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isLess(than:)メソッドは、IEEE 754仕様によって定義される「より少ない」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isLessThanOrEqualTo(_:) method implements the less-than-or-equal predicate defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isLessThanOrEqualTo(_:)メソッドは、IEEE 754仕様によって定義される「より少ないか等しい」述部を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isTotallyOrdered(belowOrEqualTo:) method implements the total order relation as defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isTotallyOrdered(belowOrEqualTo:)メソッドは、全順序関係をIEEE 754仕様によって定義されるとおりに実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The isZero property of a value x is true when x represents either -0.0 or +0.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値xのisZeroプロパティがtrueであるのは、xが-0.0または+0.0のどちらかを表す場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The joined method is always lazy, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>joinedメソッドは常に遅延です、しかしそれの結果に適用されるアルゴリズム上に、遅延性を暗黙的に授けられません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The loggedIn and sessionExpired cases include the user as an associated value, while the unregistered case doesn't include an associated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>loggedInとsessionExpiredケース節はユーザを関連値として含みます、一方でunregisteredケース節は関連値を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The makeIterator() method returns another custom type, an iterator named CountdownIterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>makeIterator()メソッドは、別のあつらえの型、CountdownIteratorと名前をつけられるイテレータを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum method implements the maxNum operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maximumメソッドは、IEEE 754仕様によって定義されるmaxNum演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximumMagnitude method implements the maxNumMag operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maximumMagnitudeメソッドは、IEEE 754仕様によって定義されるmaxNumMag演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum method implements the minNum operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>minimumメソッドはminNum演算を実装します、それはIEEE 754仕様によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimumMagnitude method implements the minNumMag operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>minimumMagnitudeメソッドは、IEEE 754仕様によって定義されるminNumMag演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nameAlias property is provided to issue corrections if a name was issued erroneously.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nameAliasプロパティは、ある名前が不正確に発行されたならば、訂正を発行するために提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nextPartialResultクロージャは、initialResultに初期化された蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nextPartialResultクロージャが、initialResult—この場合では0とnumbersの最初の要素とともに呼び出されて、その合計：1を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The now(_:) and later(_:) functions represent the two most common categories of APIs you'll encounter in methods from app frameworks that take closures: synchronous APIs like now(_:), and asynchronous APIs like later(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>now(_:)とlater(_:)関数は、クロージャを取るアプリフレームワーク由来のメソッドにおいてあなたが出くわす、２つの最も一般的なAPIのカテゴリを表します：now(_:)のような同期的API、そしてlater(_:)のような非同期的API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nullable and nonnull annotations are simplified forms of the _Nullable and _Nonnull annotations, which you can use in almost any context that you would use the const keyword with a pointer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nullableとnonnull注釈は、_Nullableと_Nonnull注釈の簡素化された形式です、それはあなたがconstキーワードをポインタ型とともに使うであろう、ほとんどあらゆる文脈で使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The numbers array is now arranged in two partitions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>numbers配列は今や２つの区画に整頓されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The numericCast(_:) function traps on overflow in -O and -Onone builds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>numericCast(_:)関数は、-Oおよび-Ononeビルドにおいてオーパーフローでトラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The perform(_:simultaneouslyWith:) function ends with a call to the sync(flags:execute:) method using the .barrier flag, which forces the function to wait until both closures have completed running before returning.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>perform(_:simultaneouslyWith:)関数は、sync(flags:execute:)メソッドへの .barrierフラグを使った呼び出しで終わります、それはその関数に返る前に両方のクロージャが実行を完了し終わるまで待つことを強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The r1 range is bounded on the lower end by 0 because that is the starting index of the numbers array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>r1範囲は、0によって下端に境界をつけられます、なぜならそれがnumbers配列の開始インデックスだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The random() static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>random()静的メソッドは無作為の値をrangeの中の連続一様分布から選びます、それからその値をその型で表現可能な最も近い値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The random(in:using:) static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>random(in:using:)静的メソッドは無作為の値をrangeの中の連続一様分布から選びます、それからその値をその型で表現可能な最も近い値に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reduce1(_:) method makes certain kinds of sequence operations simpler.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reduce1(_:)メソッドは、特定の種類のシーケンス演算をより簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The responseMessages variable is inferred to have type [Int: String].</seg>
      </tuv>
      <tuv lang="JA">
        <seg>responseMessages変数は、型[Int: String]を持つと推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reversed() method is always lazy when applied to a collection with bidirectional indices, but does not implicitly confer laziness on algorithms applied to its result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>x.reversed()メソッドは、双方向性のインデックスを持つコレクションに適用される時は常に遅延です、しかしそれの結果に適用されるアルゴリズムに暗黙的に遅延性を授けることはしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The round() method uses the .toNearestOrAwayFromZero rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>round()メソッドは.toNearestOrAwayFromZero丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rounded() method uses the .toNearestOrAwayFromZero rounding rule, where a value halfway between two integral values is rounded to the one with greater magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rounded()メソッドは.toNearestOrAwayFromZero丸め規則を使います、そこでは２つの整数値の間の中ほどの値はより大きい規模を持つものへと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign property is .minus if the value’s signbit is set, and .plus otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>signプロパティは、値のsignbitがセットされるならば.minusです、そしてそうでないなら.plusです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The significandBitPattern property does not include the leading integral bit of the significand, even for types like Float80 that store it explicitly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>significandBitPatternプロパティは、仮数の先頭整数ビットを含みません、それを明示的に格納するFloat80のような型に対してさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sink closure is called with each resulting UTF-32 code unit as the function iterates over its input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sinkクロージャは、結果UTF-32コードユニットそれぞれで、それのinputに反復していく関数として呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The startIndex and endIndex properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startIndexおよびendIndexプロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The startIndex property of an UnsafeBufferPointer instance is always zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeBufferPointerインスタンスのstartIndexプロパティは、常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The startIndex property of an UnsafeMutableBufferPointer instance is always zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableBufferPointerインスタンスのstartIndexプロパティは、常にゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sum() method is now available on any sequence or collection with numeric values, whether it is an array of Double or a countable range of Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sum()メソッドは、今では数値によるあらゆるシーケンスまたはコレクションで利用可能です、それがDoubleの配列であろうとIntの可付番範囲であろうと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sum() method is now available on any sequence with values that conform to AdditiveArithmetic, whether it is an array of Double or a range of Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sum()メソッドは、今ではAdditiveArithmeticに準拠する値をもつあらゆるシーケンス上で利用可能です、それがDoubleからなる配列であろうと Intからなるある範囲であろうと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ulpOfOne constant corresponds to the C macros FLT_EPSILON, DBL_EPSILON, and others with a similar purpose.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ulpOfOne定数は、CマクロFLT_EPSILON、DBL_EPSILON、そして類似した目的を持つ他のものに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unicodeScalars view’s elements comprise each Unicode scalar value in the cafe string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unicodeScalarsビューのもつ各要素は、cafe文字列の中の各ユニコードスカラー値からなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unsafelyUnwrapped property is recommended over calling the unsafeBitCast(_:) function because the property is more restrictive and because accessing the property still performs checking in debug builds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unsafelyUnwrappedプロパティは、unsafeBitCast(_:)関数呼び出し全般で推奨されます、なぜならこのプロパティはより制限的であるから、そしてこのプロパティにアクセスすることはデバッグビルドにおいて依然として確認を実行するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unsafelyUnwrapped property provides the same value as the forced unwrap operator (postfix !).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unsafelyUnwrappedプロパティは、強制アンラップ演算子（後置!）と同じ値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>updateAccumulatingResultクロージャは、initialResultに初期化された可変の蓄積値とシーケンスの各要素とともに連続して呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key "a".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>updateAccumulatingResultクロージャが、初期蓄積値—この場合では[:]—およびlettersの最初の文字とともに呼び出されて、1をキー"a"に対して設定することで蓄積値を修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The withUnsafeMutablePointer(to:_:) function is useful for calling Objective-C APIs that take in/out parameters (and default-constructible out parameters) by pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>withUnsafeMutablePointer(to:_:)関数は、ポインタによって「in/out」パラメータ（そして何もしなくとも構築可能な「out」パラメーター）を取るObjective-C APIを呼ぶのに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The withUnsafePointer(to:_:) function is useful for calling Objective-C APIs that take in parameters by const pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>withUnsafePointer(to:_:)関数は、constポインタによってパラメータを取り入れるObjective-C APIを呼び出すのに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ~= operator is used internally in case statements for pattern matching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>~=演算子は内部的にcase文内でパターンマッチングのために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base property of the slice is equal to singleDigits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスライスのbaseプロパティは、singleDigitsに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The #keyPath string expression accepts chained method or property references.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>#keyPath文字列式は、数珠つなぎにされたメソッドまたはプロパティ参照を受け入れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The withVaList(_:_:) function takes an array of CVarArg values and provides a CVaListPointer value within the body of a closure parameter, whereas the getVaList(_:) function returns this value directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>withVaList(_:_:)関数は、CVarArg値からなるひとつの配列をとって、CVaListPointer値をクロージャパラメータの本体内で提供します、一方でgetVaList(_:)関数はこの値を直接に返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The binade property is a member of the same binade as this value, but with a unit significand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>binadeプロパティは、この値と同じbinadeに属するあるメンバです、しかしある単位仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CF_SWIFT_NAME macro is applied to each function, giving each one a new name for Swift that's nested together under the Color type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CF_SWIFT_NAMEマクロは各関数に適用されます、それぞれのものにColor型の下に一緒に入れ子にされるSwift用の新しい名前を与えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CFTypeRef type completely remaps to the AnyObject type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CFTypeRef型は、AnyObject型に完全にリマップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Hashable protocol inherits from the Equatable protocol, so you must also satisfy that protocol’s requirements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hashableプロトコルは、Equatableプロトコルから継承します、それであなたは同様にそのプロトコルのもつ要件も満たさなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String type bridges with the Objective-C class NSString and offers interoperability with C functions that works with strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String型は、Objective-CクラスNSStringとブリッジします、そしてC関数で文字列を扱うものと相互運用を提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Substring type presents the same interface as String, so you can avoid or defer any copying of the string’s contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Substring型は、Stringと同じインターフェイスを提供します、それであなたは文字列の内容の何らかのコピーを避けるまたは延期できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The apple string contains a single emoji character made up of a surrogate pair when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>apple文字列は、UTF-16でエンコードされる場合あるサロゲートペアから作り上げられる単一のemoji文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The id type is instead imported by Swift as the Any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>id型は、代わりにSwiftによってAny型としてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The makeIterator() method is provided as a default implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>makeIterator()メソッドは、省略時の実装として提供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The moveInitializeMemory(as:from:count:) method automatically performs a forward or backward copy of all instances from the source region to their destination.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>moveInitializeMemory(as:from:count:)メソッドは、すべてのインスタンスの前方および後方へのコピーをソース領域からそれらの行き先へ自動的に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The strncmp function takes two const char* pointers and an integer specifying the number of characters to compare.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>strncmp関数は、２つのconst char*ポインタと、比較する文字数を指定している整数を取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Array type’s append(_:) and append(contentsOf:) methods take care of this detail for you, but reserveCapacity(_:) allocates only as much space as you tell it to (padded to a round value), and no more.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Array型のappend(_:)とappend(contentsOf:)メソッドは、この詳細をあなたの代わりに面倒を見ます、しかしreserveCapacity(_:)はあなたがそれに伝える（ある丸め値に詰め込まれた）のと同じ程度の空間だけをアロケートして、それ以上は何もしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The BinaryInteger protocol provides initializers for four different kinds of conversion.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BinaryIntegerプロトコルは、イニシャライザを４つの異なる種類の変換に対して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CompassDirection example above demonstrates this automatic implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上のCompassDirection例は、この自動実装を実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The removeLast() method must be used only on a nonempty collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>removeLast()メソッドは、空でないコレクションでのみ使われるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Countdown structure’s definition is short: It contains only the starting count and the makeIterator() method required by the Sequence protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Countdown構造体の定義は短いです：それはただ数え始めとSequenceプロトコルによって要求されるmakeIterator()メソッドだけを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String(describing:) initializer is the preferred way to convert an instance of any type to a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String(describing:)イニシャライザは、あらゆる型のインスタンスをある文字列へ変換する好ましい方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The formRemainder(dividingBy:) method is always exact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>formRemainder(dividingBy:)メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The formTruncatingRemainder(dividingBy:) method is always exact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>formTruncatingRemainder(dividingBy:)メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder(dividingBy:) method is always exact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>remainder(dividingBy:)メソッドは常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The truncatingRemainder(dividingBy:) method is always exact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>truncatingRemainder(dividingBy:)メソッドは常に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ..&lt; operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>..&lt;演算子は上方の境界を含まないある範囲を作成します、それでそれは常にendIndexと使うのに安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Key type of the dictionary is Int, and the Value type of the dictionary is String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のKey型はIntです、そして辞書のValue型はStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nameAlias property then contains the corrected name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nameAliasプロパティはその後、訂正された名前を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The user variable is nil when the user not logged in and has a value once the user logs in.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>user変数は、ユーザがログインしていない場合nilです、そして一旦ユーザがログインするならばある値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The == operator is a requirement of the Equatable protocol, which Comparable extends—see that protocol’s documentation for more information about equality in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>==演算子は、Comparableが拡張するEquatableプロトコルの要件です — そのプロトコルの文書をSwiftにおける同等性についてのさらなる情報のために見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CFArrayCreateMutable(_:_:_:) function takes a CFArrayCallBacks structure, which is initialized with function pointer callbacks:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CFArrayCreateMutable(_:_:_:)関数は、ひとつのCFArrayCallBacks構造体を取ります、それは関数ポインタコールバックで初期化されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The CountdownIterator type keeps track of both the Countdown sequence that it’s iterating and the number of times it has returned a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CountdownIterator型は、それが反復しているCountdownシーケンスそしてそれが値を返した回数の両方の情報を得続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The KeyValuePairs instance preserves the order of the elements as passed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyValuePairsインスタンスは、要素の順番を渡された通りに保全します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The high and low properties of the result value represent 2000 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of a UInt16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>result値のhighおよびlowプロパティは、二倍幅整数に成形するために連結される時2000を表します；すなわち、UInt16インスタンスの高バイトとしてresult.highを低バイトとしてresult.lowを使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The SetAlgebra protocol is specifically designed to accommodate both kinds of set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetAlgebraプロトコルは、とりわけ両方の種類の集合に配慮するように設計されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The deinit of bufferClass must destroy its stored Header and any constructed Elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bufferClassのdeinitは、それの格納したHeaderとあらゆる構成したElementを破棄しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The high and low compnents of the result value represent -1920 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of an Int16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>result値のhighとlow構成要素は、２倍幅整数に成形するために連結される場合-1920を表します；すなわち、result.highを高バイトとしてresult.lowを低バイトとしてInt16インスタンスに使って。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sessionExpired variable begins as false and is set to true if the session expires.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sessionExpired変数は、falseで始まります、そしてセッションが期限切れになるならばtrueに設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exponent of a floating-point value is the integer part of the logarithm of the value’s magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値の指数は、値の規模の対数の整数部分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static type of a value is the known, compile-time type of the value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値のstatic typeは、既知の、コンパイル時のその値の型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dynamic type of a value is the value’s actual type at run-time, which can be a subtype of its concrete type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の動的型は、その値の実行時での実際の型です、それはそれの具象型の下位型であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exponent bias of a type F can be calculated as the following, where ** is exponentiation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型Fの指数バイアスは、以下のように計算されます、ここで**は冪です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ASCII representation of a number in the radix passed as radix.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>radixとして渡される基数におけるある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ASCII representation of a number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある数のASCII表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Boolean value to copy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされるブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Boolean value to negate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>否定するブール値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C bool and Boolean types and the Objective-C BOOL type are all bridged into Swift as Bool.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CのboolおよびBoolean型とObjective-CのBOOL型は、すべてSwiftにBoolとしてブリッジされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘_Bool’ and C++ ‘bool’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cの「_Bool」およびC++の「bool」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘char’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cの「char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘double’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「double」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘float’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「float」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘int’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘long long’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘long’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘short’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘signed char’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「signed char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘unsigned char’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「unsigned char」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘unsigned int’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「unsigned int」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘unsigned long long’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「unsigned long long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘unsigned long’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「unsigned long」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C ‘unsigned short’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C「unsigned short」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C++ ‘wchar_t’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C++「wchar_t」型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C++11 ‘char16_t’ type, which has UTF-16 encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C++11「char16_t」型、それはUTF-16エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C++11 ‘char32_t’ type, which has UTF-32 encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C++11「char32_t」型、それはUTF-32エンコーディングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Cocoa delegation pattern doesn't require that delegates are instantiated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoa委任パターンは、委任先がインスタンス化されることを要求しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Fitzpatrick skin types are examples of emoji modifiers; they change the appearance of the preceding emoji base (that is, a scalar for which isEmojiModifierBase is true) by rendering it with a different skin tone.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Fitzpatrickスキン型はemoji修飾子の例です；それらは先行するemoji基盤（すなわち、それに対してisEmojiModifierBaseがtrueであるスカラー）の外観を、それを異なるスキントーンで描出することによって変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The IEEE 754 floating-point classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>IEEE 754浮動小数点の様々な部類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The NaN values in the tempsCelsius array are propagated through the conversion and remain NaN in tempsFahrenheit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>tempsCelsius配列の中のNaN値は、変換を通して伝播されていき、tempsFahrenheitにおいてNaNのままです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Objective-C declarations are automatically available from any Swift file within that target, with no import statements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C宣言は、自動的にあらゆるSwiftファイルからそのターゲット内部で、インポート文なしで利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift interfaces in the generated header include references to all of the Objective-C types used in them, so make sure to import the Objective-C headers for those types first.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生成されたヘッダの中のSwiftインタフェースそれらは、それらの中で使われるObjective-C型への全ての参照を含みます、それで最初にそれらの型に対するObjective-Cヘッダをインポートすることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift standard library and Foundation use structures for types you use frequently, such as numbers, strings, arrays, and dictionaries.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリとFoundationは、あなたが頻繁に使う型、例えば数、文字列、配列、そして辞書などに対して構造体を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift standard library defines a base layer of functionality for writing Swift programs, including:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリは、Swiftプログラムを記述するための機能性の基盤層を定義していて、以下を含んでいます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Swift standard library’s text-related types, String, Character, and Unicode.Scalar, all conform to TextOutputStreamable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift標準ライブラリのテキスト関連の型、String、Character、そしてUnicode.Scalarは、すべてTextOutputStreamableに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UTF-16 code units of a string’s utf16 view match the elements accessed through indexed NSString APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列のもつutf16ビューのUTF-16コード単位は、NSString APIでインデックスを使われることでアクセスされる要素と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode code point to use for the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのために使うユニコードコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode encoding of input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>inputのユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode encoding of the data referenced by cString.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>cStringによって参照されるデータのユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode scalar value "\u{301}" modifies the preceding character to include an accent, so "e\u{301}" has the same canonical representation as the single Unicode scalar value "é".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラー値"\u{301}"は、先行する文字を修飾してアクセントを含めます、それで"e\u{301}"は単一のユニコードスカラー値"é"と同じ正準表現を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode scalar value of A is 65, which is small enough to fit in a single code unit in both UTF-16 and UTF-8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Aのユニコードスカラー値は65です、それはUTF-16およびUTF-8両方において単一のコード単位の中にぴったり収まるにの十分に小さいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode scalar value to convert into a character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>１つの文字へ変換するユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode scalar value to encode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコードするあるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode-safe comparison matches Unicode scalar values rather than the code points used to compose them.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコード安全での比較は、ユニコードスカラー値を比べます、それらを組み立てるのに使われるコード点ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The absence of a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の不在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The absolute value of x must be representable in the same type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xの絶対値は、同じ型において表現可能である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The absolute value of x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xの絶対値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The accessed slice uses the same indices for the same elements as the original buffer uses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスされるスライス（断片）は、同じ要素に対して、元のバッファが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection uses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションが使うのと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The accessed slice uses the same indices for the same elements as the original collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスされるスライス（切り取り）は、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The actual number of elements that can be stored in this object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオブジェクトに格納できる要素の実際の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The addition operator (+) calculates the sum of its two arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算演算子（+）は、それの２つの引数の合計を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The additional initializer omits the label requirement for its first parameter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加的なイニシャライザは、それの最初のパラメータに対するラベル要件を省略します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The additive inverse of the argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この引数の加法の逆元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The additive inverse of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の加法の逆元。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The address of that buffer is passed to the callee, and on return, the value in the buffer is loaded, retained, and reassigned into the operand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのバッファのアドレスは呼び出される側に渡されます、そして戻る時に、バッファの値はロードされ、保持され、演算数に再割り当てされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The address of the memory that starts the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリのアドレス、それはバッファを始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The algorithm used to create random values may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為値を作成するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The algorithm used to select a random element may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある無作為な要素を選択するために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The algorithm used to shuffle a collection may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変わるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The algorithm used to shuffle a sequence may change in a future version of Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスをシャッフルするために使われるアルゴリズムは、将来のSwiftバージョンで変更するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The alignment of the new region of allocated memory, in bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アロケートされたメモリの新しい領域のアラインメント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The allocated memory is not bound to any specific type and must be bound before performing any typed operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アロケートされたメモリは、何ら特定の型に束縛されません、そして何らかの型付き演算を実行する前に束縛されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The allowed formats for each of these representations is then as follows:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの表現のそれぞれに対する許される形式はそれで以下になります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The alpha-2 code for The United States is “US”, so its flag character is made up of the Unicode scalar values "\u{1F1FA}" (REGIONAL INDICATOR SYMBOL LETTER U) and "\u{1F1F8}" (REGIONAL INDICATOR SYMBOL LETTER S).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アメリカ合衆国に対するalpha-2コードは、「US」です、それでそれの国旗文字はユニコードスカラー値"\u{1F1FA}"（REGIONAL INDICATOR SYMBOL LETTER U）と"\u{1F1F8}"（REGIONAL INDICATOR SYMBOL LETTER S）から作り上げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The amount of memory to allocate, counted in instances of Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アロケートするメモリの総量、Elementのインスタンスで数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The amount of memory to allocate, counted in instances of Pointee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アロケートするメモリの総量、Pointeeのインスタンスで数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The amount of memory to bind to type T, counted as instances of T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Tへと束縛するメモリの量、Tのインスタンスとして数えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The amount to step by with each iteration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各反復でそれだけ間隔をとることになる量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The appendInterpolation Method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>appendInterpolationメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The approximate size of all literal segments combined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結合された全てのリテラル文節のおおよそのサイズ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数は、ただクロージャの実行の間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument you pass to the CF_SWIFT_NAME macro uses the same syntax as the #selector expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがCF_SWIFT_NAMEマクロに渡す引数は、#selector式と同じ構文を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array to append to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加先の配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arrays in the “values” position of the new dictionary each contain at least one element, with the elements in the same order as the source sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書の「values」位置での配列は、それぞれ少なくとも１つの要素を含み、元となるシーケンスと同じ順序で要素を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array’s Element type must be a trivial type, which can be copied with just a bit-for-bit copy without any indirection or reference-counting operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この配列の持つElement型は自明型でなければなりません、それは単にビット対ビットコピーでコピーされることが、何らかの間接参照または参照カウント操作なしで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The assignment to the oBreve constant calls this initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>oBreve定数への代入は、このイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The available number of fractional significand bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>利用可能な小数の仮数ビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base to use for the string representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列表現のために使う底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The base, precision, and exponent range are not fixed in any way by this protocol, but it enforces the basic requirements of any IEEE 754 floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基数、精度、そして指数範囲は、このプロトコルによって何らかの方法で固定されません、しかしそれはIEEE 754浮動小数点型どれかの基本要件を強要します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior of accessing memory as a type unrelated to its bound type is undefined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリにそれの束縛型と関係ない型でアクセスすることの挙動は未定義です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The behavior of incrementing indefinitely is determined by the type of Bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限に漸増する挙動は、Boundの型によって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The big-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この整数のビッグエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit pattern matches the binary interchange format defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビットパターンはIEEE 754仕様で定義されるバイナリ交換形式に一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit pattern of the value’s encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の持つエンコーディングのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit pattern to use for the exponent field of the new value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値の指数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit pattern to use for the significand field of the new value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値の仮数フィールドに使うためのビットパターン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a Int16 instance is 16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int16インスタンスのビット幅は16です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a Int32 instance is 32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int32インスタンスのビット幅は32です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a Int64 instance is 64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int64インスタンスのビット幅は64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a Int instance is 32 on 32-bit platforms and 64 on 64-bit platforms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Intインスタンスのビット幅は、32ビットプラットホーム上では32そして64ビットプラットホーム上では64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a UInt16 instance is 16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt16インスタンスのビット幅は16です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a UInt32 instance is 32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt32インスタンスのビット幅は32です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a UInt64 instance is 64.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt64インスタンスのビット幅は64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of a UInt instance is 32 on 32-bit platforms and 64 on 64-bit platforms.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UIntインスタンスのビット幅は、32ビットプラットホーム上では32そして64ビットプラットホーム上では64です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of an Int8 instance is 8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Int8インスタンスのビット幅は８です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bit width of an UInt8 instance is 8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UInt8インスタンスのビット幅は８です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bitwise NOT operator (~) is a prefix operator that returns a value in which all the bits of its argument are flipped: Bits that are 1 in the argument are 0 in the result, and bits that are 0 in the argument are 1 in the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビット単位のNOT演算子（~）は前置演算子で、それの引数のビットすべてがひっくり返されるある値を返します：引数において1であるビットは結果において0になります、そして引数において0であるビットは結果において1になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bounds of the range must be valid indices of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の境界は、配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bounds of the range must be valid indices of the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の境界は、このバッファの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bounds of the range must be valid indices of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲の境界は、コレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bounds of the range must be valid indices of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bounds of the range must be valid indices of the view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲の境界は、ビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bounds of the result are always limited to the bounds of limits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の領域は、常にlimitsの領域に制限されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer argument contains the same number of complete instances of T as the original&lt;br/&gt;buffer’s count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファ引数は、オリジナルの&lt;br/&gt;バッファのもつcountと同じ数の完全なTのインスタンスを含まなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer is the size of the instance passed as value and does not include any remote storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファは、valueとして渡されるインスタンスの大きさで、あらゆるリモートストレージを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer must contain sufficient memory to accommodate source.underestimatedCount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファは、source.underestimatedCountを収容するのに十分なメモリを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer must contain sufficient memory to accommodate source.underestimatedCount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファは、source.underestimatedCountを収容するのに十分なメモリを含んでいなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer pointer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファポインタは、ただクロージャの実行の間に対してのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer pointer argument to the body closure provides a collection interface to the raw bytes of value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyクロージャへのバッファポインタ引数は、valueの生のバイトへのコレクションインターフェイスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer pointer plus offset must be properly aligned for accessing an instance of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>offsetを加えたバッファポインタは、型Tのインスタンスにアクセスするために適切にアラインされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer slice to rebase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再構築されるバッファスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになるバッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer’s memory must be initialized or the buffer’s Element must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファのもつメモリは初期化されなければなりません、またバッファのもつElementは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer’s type T must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファのもつ型Tは、自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The bytes for a are copied from the first four bytes of someBytes, and the bytes for b are copied from the next four bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>aに対するバイトは、someBytesの最初の４バイトからコピーされます、そしてbに対するバイトは次の４バイトからコピーされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The call to animals.makeIterator() returns an instance of the array’s iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>animals.makeIterator()への呼び出しは、配列のもつイテレータの１つのインスタンスを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The call to reserveCapacity(_:) increases the values array’s capacity by exactly 10 elements on each pass through addTenQuadratic(), which is linear growth.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reserveCapacity(_:)を呼び出すことは、values配列の容量を正確に10要素ずつaddTenQuadratic()が行われる各々で漸増します、それは線形成長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The call to firstIndex(where:) in the following example must traverse the whole collection to find the element that matches the predicate:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>firstIndex(where:)への呼び出しは以下の例において、コレクション全体を横断していき、述部に合致する要素を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The canonical combining class of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーの正準結合クラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The case-sensitive comparison will only match strings whose corresponding characters have the same case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>大文字小文字考慮での比較は、対応する文字の大文字小文字が同じである文字列同士のみが一致することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character at that position is the composed "é" character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その位置での文字は、合成済"é"文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character that was removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除された文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character to append to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列に追加されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character to convert to a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列へと変換されることになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The character to repeat.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返すことになる文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The children to use for the mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ミラーのために使う幾らかの子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The class of the object used for storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ストレージのために使われるオブジェクトのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classification of a scalar used in the Canonical Ordering Algorithm defined by the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Unicode標準」によって定義される「正準順序アルゴリズム」において使われるあるスカラーのクラス分け。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classification of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の分類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closure is called again repeatedly with the previous call’s return value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャは、前の呼び出しの戻り値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closure is called again repeatedly with the updated accumulating value and each element of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャは、更新された蓄積値とシーケンスの各要素とともに繰り返して再び呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closure returns the desired value for the final dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このクロージャは、最終的な辞書に対して望む値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closure’s buffer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャのもつバッファ引数は、このクロージャの実行の間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closure’s pointer argument is valid only for the duration of the closure’s execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クロージャのもつポインタ引数は、このクロージャの実行の間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code above stores the value 0xFFFF_FFFF into the four newly allocated bytes, and then loads the first byte as a UInt8 instance and the third and fourth bytes as a UInt16 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上のコードは値0xFFFF_FFFFを４つの新しいアロケート済みバイトに格納して、それから最初のバイトをUInt8インスタンスとして、そして３番目と４番目のバイトをUInt16インスタンスとしてロードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code point to use for the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのために使うコード点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code sample below declares a dictionary called interestingNumbers with string keys and values that are integer arrays, then sorts each array in-place in descending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下のコード見本は、interestingNumbersと呼ばれる辞書を文字列キーと整数配列である値で宣言します、それから各配列をその場で降順にソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The code units of that buffer match the code units in the string’s utf8 view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファのコード単位は、文字列のもつutf8ビューでのコード単位と一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The coding path for the returned error is constructed by appending the given container’s current index to its coding path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるエラーのためのコーディングパスは、与えられたコンテナの持つ現在のインデックスをそれのコーディングパスに加えることで組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The coding path for the returned error is constructed by appending the given key to the given container’s coding path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるエラーのためのコーディングパスは、与えられたキーをその与えられたコンテナの持つコーディングパスに加えることで組み立てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The coding path for the returned error is the given container’s coding path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるエラーのためのコーディングパスは、与えられたコンテナの持つコーディングパスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection being appended to allocates any additional necessary storage to hold the new elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションは追加されることによって、新しい要素を保有するために何らかの追加的に必要なストレージを割り当てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection must not be empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションは空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection to create a view into.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してビューが作成されることになるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection to evaluate this range expression in relation to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションに関して、この範囲式を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection to wrap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラップされるコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection traversal modeled by children is captured so that the resulting mirror’s children may be upgraded to a bidirectional or random access collection later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>childrenによる走査型のコレクションはキャプチャされます、それで結果となるミラーのもつ子らは、双方向または無作為アクセスのコレクションに後でアップグレードできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection traversal modeled by unlabeledChildren is captured so that the resulting mirror’s children may be upgraded to a bidirectional or random access collection later.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unlabeledChildrenによる走査型のコレクションはキャプチャされます、それで結果となるミラーのもつ子らは、双方向または無作為アクセスのコレクションに後でアップグレードできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection’s “past the end” position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの「終わりを過ぎた」位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The combining classes of these scalars have the numeric values 0, 230, and 220, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのスカラーの結合クラスは、数値 0、230、そして220をそれぞれ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The comparison is both case sensitive and Unicode safe.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>比較は、大文字小文字考慮のみならずユニコード安全でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The comparison returns true if both arguments are nil or if the two arguments wrap values that are equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この比較がtrueを返すのは、両方の引数がnilである場合か、２つの引数が同等な値らをラップする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler automatically synthesizes your custom type’s Hashable and requirements when you declare Hashable conformance in the type’s original declaration and your type meets these criteria:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイラは、自動的にあなたのあつらえの型の持つHashableと要件を、あなたがHashable準拠をその型の持つ元の宣言において宣言して、あなたの型がそれら基準に合う場合に合成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler can automatically provide an implementation of the CaseIterable requirements for any enumeration without associated values or @available attributes on its cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイラは、自動的にCaseIterable要件の実装を提供することが、関連値または@available属性をそれのケース節上で持たないあらゆる列挙に対して可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler prevents bridging the moreColors array, on the other hand, because its Element type is Optional&lt;String&gt;, which does not bridge to a Foundation type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイラは、moreColors配列をブリッジすることを妨げます、言い換えれば、それのElement型がOptional&lt;String&gt;であるので、それはFoundation型にブリッジしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler removes Ref from the end of each type name because all Swift classes are reference types; therefore, the suffix is redundant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンパイラは各型名の終わりからRefを削除します、なぜなら全てのスウィフトクラスが参照型であるからです；したがって、この接尾辞は冗長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The components used for hashing must be the same as the components compared in your type’s == operator implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハッシュ化に使用される構成要素は、あなたの型の持つ==演算子実装において比較される構成要素と同じでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition to test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テストする条件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The container to hold.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>収容するためのコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The contents of the Objective-C files in that framework are automatically available from any Swift file within that framework target, with no import statements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのフレームワークの中のObjective-Cファイルの内容は、自動的にそのフレームワークターゲット内のあらゆるSwiftファイルから、インポート文なしで利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The context in which the error occurred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこにおいてエラーが起こった前後関係。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The contiguous memory footprint of T, in bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tの隣接メモリフットプリント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The conversion of p to a string in the assignment to s uses the Point type’s debugDescription property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pの文字列への変換はsへの代入において、Point型のもつdebugDescriptionプロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The conversion of p to a string in the assignment to s uses the Point type’s description property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pの、sへの代入における文字列への変換は、Point型のdescriptionプロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The correct approach in Swift is to compare the i value with zero in the while statement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおける正しい取り組みは、while文においてi値を0と比較することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The correct placement of the call to closeFile() is outside of the closure:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>closeFile()への呼び出しの正しい配置は、クロージャの外側です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The corresponding value of the raw type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この生の型の対応している値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The current decoding index of the container (i.e. the index of the next element to be decoded.) Incremented after every successful decode call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコンテナの現在のデコーディングインデックス（すなわちデコードされることになる、次の要素のインデックス）。すべての成功したデコード呼び出しの後に増やされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The current playground logging implementation logs specialized descriptions of at least the following types:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>現在のプレイグラウンドログ実装は、少なくとも以下の型の特殊化された記述を記録します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The custom mirror for this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスのためのあつらえのミラー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The decoder to read data from.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それからデータを読み出すデコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default IEEE 754 behavior of operations involving a signaling NaN is to raise the Invalid flag in the floating-point environment and return a quiet NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シグナルNaNを伴う演算の初期状態のIEEE 754挙動は、無効なフラグを浮動小数点環境において上げて、クワイエットNaNを返すことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default implementation of the != operator function satisfies this requirement.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>!=演算子関数の省略時の実装は、この要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default implementation returns 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の実装は、０を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is 10.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時は10。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時には0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is Int.max.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時にはInt.maxです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時にはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時ではtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時にはnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is .generated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時は.generatedです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is a newline ("\n").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では改行（"\n"）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is a single space (" ").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、単一の空白（" "）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is an empty string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the file where assert(_:_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、assert(_:_:file:line:)が呼び出されるところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the file where assertionFailure(_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、assertionFailure(_:file:line:)が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the file where fatalError(_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、fatalError(_:file:line:)が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the file where precondition(_:_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、precondition(_:_:file:line:)が呼び出されるところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the file where preconditionFailure(_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、preconditionFailure(_:file:line:)が呼び出されたところのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the line number where assert(_:_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、assert(_:_:file:line:)が呼び出されるところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the line number where assertionFailure(_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、assertionFailure(_:file:line:)が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the line number where fatalError(_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、fatalError(_:file:line:)が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the line number where precondition(_:_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、precondition(_:_:file:line:)が呼び出されるところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is the line number where preconditionFailure(_:file:line:) is called.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態では、preconditionFailure(_:file:line:)が呼び出されたところの行番号です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態はゼロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default memory alignment of T, in bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tの省略時のメモリアライメント、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default memory alignment, in bytes, of the given value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値の型の、バイトでの、省略時のメモリアライメント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default separator is an empty string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時のセパレータは空の文字列です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an otherwise-unconstrained Boolean literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブールリテラルである他は別途制約されない省略時用の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an otherwise-unconstrained Unicode extended grapheme cluster literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別途制約されないユニコード拡張書記素クラスタリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an otherwise-unconstrained floating point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別途制約されない浮動小数点リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an otherwise-unconstrained integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別途制約されない整数リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an otherwise-unconstrained string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別途制約されない文字列リテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default type for an otherwise-unconstrained unicode scalar literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別途制約されないユニコードスカラーリテラルのための省略時型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の値は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の値はfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is Int.max.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の値はInt.maxです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の値は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value to use if key doesn’t exist in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyが辞書の中に存在しないならば使うことになる省略時の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The deinitialized memory can be reinitialized with values of the same type, bound to a new type, or deallocated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デイニシャライズされたメモリは、同じ型の値で再初期化する、新しい型に束縛する、またはデアロケートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The descendant of this mirror specified by the given mirror path components if such a descendant exists; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたミラーパス構成要素によって指定されるこのミラーの子孫、もしそのような子孫が存在するならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The description property of a conforming type must be a value-preserving representation of the original value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する型の説明プロパティは、元の値の値保全表現でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The destination Unicode encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先ユニコードエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The destination memory must be uninitialized or the buffer’s Element must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先のメモリは未初期化でなければなりません、またポインタのもつElementは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The destination memory must be uninitialized or the pointer’s Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先のメモリは未初期化でなければなりません、またポインタのもつPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dictionary literal is made up of one or more key-value pairs, separated by commas and surrounded with square brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルは、コンマで区切られて角括弧で囲まれた１つ以上のキー値ペアで構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dictionary’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The difference between these states can be distinguished by checking isAtEnd.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの状態の間の差は、isAtEnd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The difference between these states can be distinguished with a contains(_:) call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの状態の相違は、contains(_:)呼び出しで見分けることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The difference of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数の差は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance between start and end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startとendの隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance between this value and other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値とotherとの間の隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance between two indexes (always zero).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのインデックスの間の隔たり（常にゼロ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance from this value to other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値からotherまでの隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance to advance this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を前進させる距離。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The distance to offset i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iを補う隔たり。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The division operator (/) calculates the quotient of the division if rhs is nonzero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>除算演算子（/）は、rhsが非ゼロならばその除算の商を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dynamic type returned from type(of:) is a concrete metatype (T.Type) for a class, structure, enumeration, or other nonprotocol type T, or an existential metatype (P.Type) for a protocol or protocol composition P.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>type(of:)から返される動的型は、クラス、構造体、列挙、または他の非プロトコル型Tに対してconcrete metatype（T.Type）、またはプロトコルやプロトコル合成Pに対してexistential metatype（P.Type）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dynamic type, which is a metatype instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>動的型、それはメタタイプインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The earliest version of the Unicode Standard in which the scalar was assigned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それにおいてこのスカラーが割り当てられた「ユニコード標準」の最も時期の早いバージョン。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The efficiency of finding each element in the argument list depends on the argument type and the capabilities of the each level of the mirror’s children collections.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各要素を引数リストにおいて見つけることの効率は、引数型と、ミラーのもつchildrenコレクションそれらの各水準の能力に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element at the position created using ReversedIndex&lt;...&gt;(aIndex) is "r", the character before "a" in the name string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ReversedIndex&lt;...&gt;(aIndex)を使って作成された位置での要素は、"r"、name文字列の中の"a"の前の文字です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element at the specified index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定されたインデックスでの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element of the set to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除されることになる集合の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element that should be split upon.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それで分離されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element that was removed from the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合から削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to append to the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列に追加されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to append to the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to check for containment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この要素が含まれるかを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to find in the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスにおいて見つける要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to insert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>挿入される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to look for in the option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセットにおいて捜される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to remove from the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合から削除されることになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to repeat.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返される要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element to store in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの中に格納することになる要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element type of a KeyValuePairs: a tuple containing an individual key-value pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyValuePairsの要素型：個々のキー値ペアを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element type of a dictionary: a tuple containing an individual key-value pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の要素型：個々のキー値ペアを含んでいるタプル。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The element type of the option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセットの要素型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements at that index and later indices are shifted back to make room.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのインデックスおよび後のインデックスでの要素は、後ろに移って場所をあけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of a partial range are the consecutive values from its lower bound continuing upward indefinitely.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>部分範囲の要素は、それの下側の境界から無限に上方に続いている隣接範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the utf16 view are the code units for the string when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>utf16ビューの要素は、UTF-16で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the utf8 view are the code units for the string when encoded in UTF-8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>utf8ビューの要素は、UTF-8で符号化される時の文字列に対するコード単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the range are the consecutive values from its lower bound up to, and including, its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲に属する要素は、それの下側の境界の値から上側の境界まで、そしてそれを含めての連続した値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the range are the consecutive values from its lower bound up to, but not including, its upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の要素は、それの下側の境界から、それの上側の境界までしかしそれを含まない、隣接値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のそれぞれの要素は遅延に計算されます、毎回それらは、基盤となる要素上でtransform関数を呼び出すことによって読み出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the result are computed on-demand, as the result is used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の要素は、要求に応じて、結果が使われるときに計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the resulting array are ordered according to the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の配列の要素は、与えられた述部にしたがって並べられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the sequence are computed lazily and the sequence may potentially be infinite in length.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスに属する要素らは、遅延に計算されます、そしてこのシーケンスの長さは潜在的に無限大です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of the sequence are obtained by invoking next with a mutable state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの要素は、 nextをある可変の状態とともに発動することによって入手されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements of this view are a concatenation of the elements of each sequence in the base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この見方での要素たちは、その基盤の中の各シーケンスのもつ要素の連結です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements to append to the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列に追加する要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements to append to the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの要素をコレクションへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The elements to use as members of the new set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい集合の要素として使うための要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encoder to write data to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>データを書き込むエンコーダ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encoding in which codeUnits should be interpreted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それでcodeUnitsが解釈されるべきエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The encoding in which the code units should be interpreted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それでコード単位が解釈されるべきエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>末尾インデックスは、あるコレクションの最後の要素を１つ過ぎた位置を参照します、それでそれはある要素に対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The entire region of memory referenced by this buffer must be initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファによって参照されるメモリの全領域は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The enumeration has any private cases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙が何らかのプライベートなケース節を持つならば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The escapable copy of closure passed to body is only valid during the call to withoutActuallyEscaping(_:do:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>closureの脱出可能コピーでbodyに渡されるものは、withoutActuallyEscaping(_:do:)への呼び出しの間に有効なだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example above responds to the property change by printing both the new and old values of the date.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>上の例は、プロパティの変化に、日付の新旧の値の両方をプリントすることによって応答します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below adds another favorite color:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、別のお気に入りの色を加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below adds the NS_REFINED_FOR_SWIFT macro to the getRed(red:green:blue:alpha:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、NS_REFINED_FOR_SWIFTマクロをgetRed(red:green:blue:alpha:)メソッドに加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below adopts the NSWindowDelegate protocol and implements its window(_:willUseFullScreenContentSize:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、NSWindowDelegateプロトコルを採用します、そしてそれのwindow(_:willUseFullScreenContentSize:)メソッドを実装します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below changes the myDate property by calling the updateDate method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、myDateプロパティを、updateDateメソッドを呼び出すことによって変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below creates a FileHandle and an array of data lines to write to the file that the handle refers to:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、FileHandleと、データ行からなる配列を作成して、そのハンドルが参照するファイルに書き出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below creates an NSWindow and uses optional chaining to check that the window's delegate exists before sending a message to the delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、NSWindowを作成して、オプショナル連鎖を使うことで、ウインドウの持つ委任先が存在することを、メッセージをその委任先に送る前に確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below defines a Lottery enumeration that randomly picks a winning number and calls a completion handler if the right number is guessed:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、Lottery列挙を定義します、それはランダムに当選番号を選んで、正しい数が推測されるならば完了ハンドラを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below defines a Person class, creates two instances of it, and uses several #keyPath string expressions to access properties and properties of those properties:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、Personクラスを定義して、それの２つのインスタンスを作成して、そしていくつかの#keyPath文字列式を使っていくつかのプロパティおよびそれらプロパティのプロパティにアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below defines the MyObjectToObserve class with a property—myDate—that can be observed:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、MyObjectToObserveクラスを、監視されることが可能なプロパティ — myDate — で定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below defines two functions, now(_:) and later(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、２つの関数、now(_:)とlater(_:)を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below renames a class and one of its properties:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、クラスとそれのプロパティの１つを改名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below shows a selector being used as part of the target-action pattern to call a method in response to the touchUpInside event.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、ターゲットアクションパターンの一部として使われるセレクタを示して、あるメソッドをtouchUpInsideメソッドに答えて呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below shows an Objective-C API that can be expressed more succinctly once it's imported into Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、あるObjective-C APIを示します、それはいったんそれがSwiftにインポートされるならばより簡潔に表現可能なものです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below shows how to apply the NS_OPTIONS macro and assign raw values that are mutually exclusive:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、NS_OPTIONSマクロを適用する、そして互いに排他的である生の値を割り当てる方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below shows several functions that are all related to a Color type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、すべてColor型に関係するいくつかの関数を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below uses the NS_ERROR_ENUM macro to group error constants:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、NS_ERROR_ENUMマクロを使ってエラー定数をグループにまとめます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below uses the NS_TYPED_ENUM macro to declare the different colors used by a traffic light:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、NS_TYPED_ENUMマクロを使って、信号機によって使われる異なる色を宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below uses the macro to declare a UITableViewCellStyle enumeration that groups several different view styles for table views:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、このマクロを使って、UITableViewCellStyle列挙を宣言します、それはテーブルビューに対する幾つかの異なるビュースタイルをグループにまとめます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The example below uses two strings with different forms of the "é" character—the first uses the composed form and the second uses the decomposed form.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、異なる形式の"é"文字を持つ２つの文字列を使います—最初は合成形式を使い、そして２番目は分解形式を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The examples below demonstrate how to use withoutActuallyEscaping(_:do:) in conjunction with two common APIs that use escaping closures: lazy collection views and asynchronous operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、脱出するクロージャを使う２つのよくあるAPIと連係して、withoutActuallyEscaping(_:do:)を使う方法を実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The examples below show how a FavoriteColor type is declared, imported, and extended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の例は、FavoriteColor型が宣言、インポート、そして拡張される方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The existing API is renamed with double underscores (__) when it's imported, to help prevent you from accidentally using the existing API elsewhere.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存のAPIは、それがインポートされる時に二重アンダースコア（__）で改名され、あなたが誤って既存のAPIをどこか他で使うことを防ぐ助けとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The explicit permission to implement further operations lazily applies only in contexts where the sequence is statically known to conform to LazySequenceProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>もっと遅延に演算を実施する明示的な許可は、そこにおいてシーケンスは静的にLazySequenceProtocolに準拠することを見分けられる文脈においてのみ適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The exponent of the floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値の指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fact that all collections are finite guarantees the safety of many sequence operations, such as using the contains(_:) method to test whether a collection includes an element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてのコレクションが有限であるという事実は、多くのシーケンス演算、例えばcontains(_:)メソッドを使ってコレクションがある要素を含むかどうかテストすることなどの安全を保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file name to print with message if the assertion fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表明（アサーション）がうまくいかないならばmessageとともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file name to print with message if the precondition fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前提条件がうまくいかないならばmessageとともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file name to print with message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>messageとともに出力するファイル名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final accumulated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最終的に蓄積された値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の例はfalseをomittingEmptySubsequencesパラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の例はtrueをallowEmptySlicesパラメータに渡します、なので返される配列は空白が繰り返されたところで空の文字列を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The final result is true because the ASCII digits have non-default emoji presentations; some platforms render these with an alternate appearance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最後の結果はtrueです、なぜならASCII桁それらは非初期状態emoji表現を持つので；いくつかのプラットホームはそれらは代替の外観で描出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first and second code units of the pair, designated leading and trailing surrogates, make up a surrogate pair.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このペアの最初と２番目のコード単位、先行および後続サロゲートと呼ばれるものが、ひとつのサロゲートペアを作り上げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element in the sequence is always first, and each successive element is the result of invoking next with the previous element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスでの最初の要素は常にfirstです、そして続く要素それぞれはnextを前の要素とともに発動することの結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element of a nonempty array is always at index zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でない配列の最初の要素は、常にインデックス０です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element of the collection if the collection is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空でないならばコレクションの最初の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element of the dictionary is not necessarily the first element added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の最初の要素は、必ずしも追加された最初の要素ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicate満たすシーケンスの最初の要素、またはpredicateを満たす要素が無いならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first element to be returned from the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスから返されることになる最初の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first in any sequence of mutating operations causes elements to be copied into unique, contiguous storage which may cost O(n) time and space, where n is the length of the string’s encoded representation (or more, if the underlying NSString has unusual performance characteristics).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの変更を行う一連の演算の中の最初のものは、要素が固有の、隣接するストレージへとコピーされる原因となり、それはO(n)の時間と空間がかかります、そこにおいてnは文字列表現の長さです（またはそれ以上のもの、基盤となるNSStringが通常でない性能特質を持つならば）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first index where element is found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementが見つけられたところの最初のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first key-value pair of the dictionary if the dictionary is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書が空でないならばこの辞書の最初のキー値ペア；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first mirror path component to access.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスすることになる最初のミラーパス構成要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first one declares the FavoriteColor type and adds a single enumeration case for the color blue:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のものは、FavoriteColor型を宣言して、単一の列挙ケース節を青色に対して加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first optional value that isn’t nil stops the chain and becomes the result of the whole expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilでない最初のオプショナル値は、連鎖を停止して、式全体の結果となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first partition, numbers[..&lt;p], is made up of the elements that are not greater than 30.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の区画、numbers[..&lt;p]は、30より大きくない要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first sequence or collection to zip.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組み合わされる第１のシーケンスまたはコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first use of split returns each word that was originally separated by one or more spaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>splitの最初の利用は、各単語を返します、それはもともと１つ以上の空白で隔てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first value to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算する第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first value to multiply.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>掛け合わされる第１の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first value to swap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>交換する１つ目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The flexible behavior of the AnyObject protocol is similar to Objective-C’s id type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyObjectプロトコルの柔軟な挙動は、Objective-Cのもつid型に似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The floating-point types in the standard library are Float, Double, and Float80 where available.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリにおける浮動小数点型は、Float、Double、そして利用可能なところではFloat80です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値と同じ符号と指数を持つ浮動小数点値、しかし1.0の仮数を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following Objective-C property refers to a view controller that also acts a data source and delegate:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のObjective-Cプロパティは、あるビューコントローラを参照します、それはまたデータソースと委任先の役割を果たします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code creates slice, a slice covering part of an existing buffer instance, then rebases it into a new rebased buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードはslice、既存のバッファインスタンスの一部をカバーするスライス、を作成します、それからそれを新しい生のrebasedバッファへと再構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code creates constants for the first and second positions in the flag.utf8 view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、flag.utf8ビューの中の１番目と２番目の位置に対する定数それぞれを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code declares values, an array of integers, and the addTenQuadratic() function, which adds ten more values to the values array on each call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、整数の配列values、そして呼び出し毎に10個さらに値をvalues配列に加えるaddTenQuadratic()関数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code declares a perform(_:simultaneouslyWith:) function that uses a dispatch queue to execute two closures concurrently.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードはperform(_:simultaneouslyWith:)関数を宣言します、それはあるディスパッチキューを使って２つのクロージャを同時に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code declares a generic version of the parseAndAddOne(_:) function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、parseAndAddOne(_:)関数のひとつの総称体版を宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code declares a method that calculates the total of any sequence with Numeric elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、Numeric要素をもつ何らかのシーケンスの合計を計算するメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code declares an allValues(in:match:) function that checks whether all the elements in an array match a predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、配列のすべての要素がある述部に合致するかどうかを調べるallValues(in:match:)関数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code encodes a fermata in UTF-16:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、フェルマータをUTF-16でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code encodes a fermata in UTF-32:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、フェルマータをUTF-32でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code encodes a fermata in UTF-8:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードはフェルマータをUTF-8でエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code shows the MyList type after annotation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、注釈の後のMyList型を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code temporarily rebinds the memory that uint8Pointer references from UInt8 to Int8 to call the imported C strlen function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、一時的にuint8Pointerが参照するメモリをUInt8からInt8へと再束縛することで、インポートされたC strlen関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code uses the UTF8 codec to encode a fermata in UTF-8:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、UTF8コーデックを使ってUTF-8でのフェルマータをエンコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following code uses this method to test whether all the names in an array have at least five characters:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコードは、このメソッドを使って、配列の中の全ての名前が少なくとも５つの文字を含むかどうかを試験します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example accesses an element of an array through its subscript to print its value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、配列のある要素にそれの添え字によってアクセスしてそれの値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example accesses the fourth code unit in both the flowers and nsflowers strings:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、flowersとnsflowers文字列の両方で４番目のコード単位にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example adds a new number to an array of integers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、ある新しい要素を整数からなる配列へ加えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example adds an emoji globe to the end of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は地球絵文字をある文字列の終わりに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example allocates a buffer that can store four Int instances and then initializes that memory with the elements of a range:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、４つのIntインスタンスを格納できるあるバッファをアロケートして、それからそのメモリをある範囲に属するいくらかの要素で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example allocates enough new memory to store four Int instances and then initializes that memory with the elements of a range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、新しいメモリを必要なだけアロケートすることで、４つのIntインスタンスを格納して、それからそのメモリをある範囲に属するいくらかの要素で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example allocates enough raw memory to hold four instances of Int8, and then uses the initializeMemory(as:from:count:) method to initialize the allocated memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、生のメモリを必要なだけアロケートすることで、４つのInt8インスタンスを保持して、それからinitializeMemory(as:from:count:)メソッドを使ってアロケートされたメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example allocates enough raw memory to hold four instances of Int8, and then uses the initializeMemory(as:repeating:count:) method to initialize the allocated memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、生のメモリを必要なだけアロケートすることで、４つのInt8インスタンスを保持して、それからinitializeMemory(as:repeating:count:)メソッドを使ってアロケートされたメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example allocates four bytes of memory and stores 0xFF in all four bytes:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、４バイトのメモリをアロケートして0xFFを４バイトすべての中に格納します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example appends the elements of a Range&lt;Int&gt; instance to an array of integers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、Range&lt;Int&gt;インスタンスからなるいくらかの要素を整数からなる配列に追加します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example binds the memory referenced by uint8Pointer to one instance of the UInt64 type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、uint8Pointerによって参照されるメモリをUInt64型のあるインスタンスに束縛します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example builds a customized greeting by using the append(_:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はあつらえの挨拶をappend(_:)メソッドを使うことによって作ります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example calculates the remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、8.625を0.75で割ることの余りを計算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example calculates the truncating remainder of dividing 8.625 by 0.75:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、8.625を0.75で除算することの切り捨てられる余りを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example calls this initializer with pointers to the contents of two different CChar arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このイニシャライザを２つの異なるCChar配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example calls this method with pointers to the contents of two different CChar arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このメソッドを２つの異なるCChar配列の内容へのポインタとともに呼び出します—最初のものは正しい形式のUTF-8コード単位シーケンスをもち、そして２番目のものはある誤形式シーケンスを末尾に保ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example checks to see if imagePaths contains any paths in the "/glyphs" directory:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、imagePathsが何らかのパスを"/glyphs"ディレクトリの中に含むかどうかを調べるために検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares instances of the Int, UInt, and UInt8 types:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、Int、UInt、そしてUInt8型のインスタンスを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares the date of the first moon landing with the release of David Bowie’s song “Space Oddity”:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、最初の月面着陸の日付をデビッド・ボウイの歌「Space Oddity」のリリース日と比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares tuples made up of 2 components:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は２つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares tuples made up of 3 components:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、３つの構成要素で構成されるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares tuples made up of 4 components:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は４つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares tuples made up of 5 components:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は５つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example compares tuples made up of 6 components:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は６つの構成要素から作り上げられるタプルを比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example converts the maximal Int value to a string and prints its length:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、最大限のInt値を文字列へ変換してそれの長さを出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example converts the position of the Unicode scalar "e" into its corresponding position in the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ユニコードスカラー"e"の位置を文字列でのそれの対応位置に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example copies bytes from the byteValues array into numbers, an array of Int:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、バイトをbyteValues配列から、Intの配列numbersへとコピーします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example copies the bytes of the numbers array into a buffer of UInt8:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、numbers配列のバイトをUInt8のバッファへとコピーします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a Repeated&lt;Int&gt; collection containing five zeroes:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、５つのゼロを含んでいるあるRepeated&lt;Int&gt;コレクションを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a firstWord constant by using the prefix(while:) method to get a slice of the text string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、firstWord定数をprefix(while:)メソッドを使ってtext文字列のスライスを得ることによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a greeting string, and then finds the substring of the first sentence:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、greeting文字列を作成して、それから第一文からなる下位文字列を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a collection containing the name “Humperdinck” repeated five times:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、５回繰り返した名前「Humperdinck」を含んでいるコレクションを作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a new ReversedIndex from the index of the "a" character in a string’s character view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、新しいReversedIndexを、文字列の文字ビューの中の"a"文字のインデックスから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a new character from the uppercase version of a string that only holds one character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、１つの文字を保持するだけのある文字列の大文字バージョンから、新しい文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a new dictionary and prints the value of a key found in the dictionary ("Coral") and a key not found in the dictionary ("Cerise").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は新しい辞書を作成して、辞書に見つかるキー（"Coral"）と辞書に見つからないキー（"Cerise"）の値を出力します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates a new dictionary using an array of strings as the keys and the integers in a countable range as the values:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、文字列からなる配列をキーとしてそして可付番範囲の中の整数を値として、新しい辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates an array initialized with five strings containing the letter Z.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、字Zを含んでいる５つの文字列で初期化される配列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates an array of integers from an array literal, then appends the elements of another collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、整数からなるある配列を配列リテラルから作成します、それから別のコレクションの要素を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates an example class IntegerRef and compares instances of the class using their object identifiers and the identical-to operator (===):</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、ある見本クラスIntegerRefを作成して、そのクラスのインスタンスをそれらのオブジェクト識別子と同一演算子（===）を使って比較します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates an iterator that counts up from the initial value of an integer x to 15:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はあるイテレータを作成します、それは初期値の整数xから15まで数え上げます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates two new Int32 instances from the memory referenced by the buffer pointer someBytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、２つの新しいInt32インスタンスをバッファポインタsomeBytesによって参照されるメモリから作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example creates two type-erased hashable values: x wraps an Int with the value 42, while y wraps a UInt8 with the same numeric value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は２つの型消去ハッシュ化値を作成します：xは値42を持つIntをラップします、一方yは同じ数値を持つUInt8をラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example declares singleDigits, a range of single digit integers, and then drops the first element to create a slice of that range, singleNonZeroDigits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、１桁整数からなる範囲、singleDigitsを宣言します、それから最初の要素を落としてその範囲のあるスライス、singleNonZeroDigitsを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example declares a Point type with x and y coordinates and a Boolean isFilled property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、Point型をxおよびy座標、そしてブールのisFilledプロパティで宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はある関数を宣言します、それは、それの２つの直角側を与えられる直角三角形の斜辺の長さを計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example declares a function that returns the index of the last even number in the passed array, if one is found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある関数を宣言します、それは渡された配列の中の最後の偶数のインデックスを返します、それが見つけられるならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example declares a method that calculates the total of any sequence with Numeric elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、Numeric要素による何らかのシーケンスの合計を計算するメソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example declares an array of names, and then creates a dictionary from that array by grouping the names by first letter:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、いくらかの名前からなる配列を宣言します、それから名前を最初の文字でグループ分けすることによって、その配列から辞書を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example decodes the UTF-16 encoded bytes of a string into an array of Unicode.Scalar instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列のUTF-16エンコードされたバイトを、Unicode.Scalarインスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of Unicode.Scalar instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、Unicode.Scalarインスタンスの配列へとデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example decodes the UTF-8 encoded bytes of a string into an array of Unicode.Scalar instances:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列のUTF-8エンコードされたバイトを、Unicode.Scalarインスタンスの配列へとデコードします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example defines x as an instance of UInt8, an 8-bit, unsigned integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、xをUInt8のインスタンス、ある８ビットの、符号なし整数型として定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example defines a printGenericInfo(_:) function that takes a generic parameter and declares the String type’s conformance to a new protocol P.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、printGenericInfo(_:)関数を定義します、それは総称体パラメータを取り、String型の準拠を新しいプロトコルPに宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example defines an IntegerRef type, an integer type with reference semantics.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、あるIntegerRef型、参照意味論を持つ整数型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example divides a value that is too large to be represented using a single Int instance by another Int value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、単一のIntインスタンスを使って表されるには大きすぎる値を、別のInt値によって割ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example enumerates the elements of an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある配列の要素を列挙します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example enumerates the elements of an array:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある配列の要素を列挙します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example finds the length of the UTF-16 encoding of the string "Fermata 𝄐", starting with its UTF-8 representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、文字列"Fermata 𝄐"のUTF-16エンコーディングの長さを、それのUTF-8表現で開始して見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example finds the position of a space in a string and then converts that position to an index in the string’s utf16 view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある空白の位置を文字列の中で見つけて、それからその位置を文字列のもつutf16ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example finds the position of a space in a string’s utf16 view and then converts that position to an index in the string’s unicodeScalars view:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある空白の位置を文字列のもつutf16ビューの中で見つけて、それからその位置を文字列のもつunicodeScalarsビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example finds the position of a space in a string’s utf16 view and then converts that position to an index in the string’s utf8 view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある空白の位置を文字列のもつutf16ビューの中で見つけて、それからその位置を文字列のもつutf8ビューの中のインデックスに変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、文字列の開始インデックスから４位置進んだインデックスを取得して、それからその位置の文字を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、配列の始まりから４位置進んだインデックスを入手して、それからその位置での要素を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example passes a pointer to the value variable by using inout syntax:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、value変数へのポインタをinout構文を使って渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example prints a closed range of integers to a string:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>続く例は、整数の完結範囲をある文字列へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example prints a string, a closed range of integers, and a group of floating-point values to standard output:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列、整数の完結範囲、グループの浮動小数点値を標準出力に出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example prints the debugging representation of a string, a closed range of integers, and a group of floating-point values to standard output:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列、整数の完結範囲、グループの浮動小数点値のデバッグ表現を標準出力に出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example reverses the elements of an array of characters:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、文字列からなる配列の要素を逆順にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example rounds a value using four different rounding rules:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はある値を４つの丸め規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example rounds several values using this default rule:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はいくつかの値をこの初期設定での規則を使って丸めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example searches a string’s Unicode scalars view for a capital letter and then prints the character and Unicode scalar value at the found index:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列のもつユニコートスカラービューで大文字を捜して、それから見つかったインデックスでの文字とユニコードスカラー値を出力します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、整数からなる配列において数40のインデックスを捜して、それからそのインデックスで始まる配列の末尾を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、整数からなる配列において数40のインデックスを捜して、それからそのインデックスに至るまでの、そしてそれを含めて、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、整数からなる配列において数40のインデックスを捜して、それからそのインデックスに至るまでの、しかしそれを含めずに、配列の冒頭を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows an IntParsingError enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、IntParsingError列挙を示します、それが捕える（キャプチャ）のは、文字列から整数を構文解析（パース）する時に起こる可能性のある２つの異なる種類のエラー：文字列によって表される値が整数データ型に対して大きすぎるところのオーバーフロー、そして非数の文字が入力内に見つけられるところの無効な入力です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how NaN values operate in different contexts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、どのようにNaN値が異なる前後関係において作動するかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how an array of strings can be joined to a single, comma-separated string:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、どのように文字列からなる配列が単一の、コンマ区切りの文字列へと連結できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how an iterator can be used explicitly to emulate a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、イテレータが明示的に使われてfor-inループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how extending and truncating work for nonnegative integers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後に続く例は、非負数整数に対する拡張および切り詰め作業の方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how modifying the contents of the UnsafeMutableBufferPointer argument to body alters the contents of the array:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、bodyへのUnsafeMutableBufferPointer引数の内容の修正が、配列の内容を改めることを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how the contains(_:) method can be used with an array of strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、contains(_:)メソッドが文字列からなる配列で使われるのを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how to choose the first and last values for any duplicate keys:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、あらゆる重複キーに対して最初と最後の値を選択する方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how you can bridge an Array instance to NSArray to use the write(to:atomically:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、どのようにあなたがArrayインスタンスをNSArrayへとブリッジして、write(to:atomically:)メソッドを使うかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how you can determine free shipping options based on a customer’s purchase price:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、どうやってあなたが顧客の購入品価格を基に無償出荷オプションを判定できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows how you can iterate over the contents of the buffer pointer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、どのようにあなたがバッファポインタの内容にわたって反復できるかを示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows the array literal initializer for a hypothetical OrderedSet type, which has setlike semantics but maintains the order of its elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、仮設的なOrderedSet型のための配列リテラルイニシャライザを示します、それは集合的な意味論を持つけれどもそれの要素の順番を維持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows the dictionary literal initializer for a hypothetical CountedSet type, which uses setlike semantics while keeping track of the count for duplicate elements:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、仮設的なCountedSet型のための辞書リテラルイニシャライザを示します、それは集合的な意味論を使う一方で重複する要素に対する総数を追跡し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example temporarily rebinds the memory of a UInt64 pointer to Int64, then accesses a property on the signed integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、 一時的にUInt64ポインタのメモリをInt64に再束縛します、それから符号付き整数上のあるプロパティにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example transcodes the UTF-8 representation of the string "Fermata 𝄐" into UTF-32.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、文字列"Fermata 𝄐"のUTF-8表現をUTF-32にコード変換（トランスコード）します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example transforms a string to uppercase letters:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある文字列を大文字の文字に変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example transforms the error value of a result by wrapping it in a custom Error type:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある結果のエラー値を、それをあるあつらえのError型の中のラップすることによって変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example transforms the integer success value of a result into a string:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、ある結果の整数成功値を文字列へ変換します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example updates the value for the 404 code to be simply “Not found” and removes the key-value pair for the 500 code entirely.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、404コードの値を単純に「Not found」に更新して、500コードに対するキー値ペアをすっかり削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses isTotallyOrdered(belowOrEqualTo:) to sort an array of floating-point values, including some that are NaN:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、isTotallyOrdered(belowOrEqualTo:)を使って、NaNである何かを含んでいる、浮動小数点値の配列をソートします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses someBytes, an UnsafeMutableRawBufferPointer instance, to demonstrate the difference between assigning a buffer pointer and using a buffer pointer as the source for another collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はsomeBytes、UnsafeMutableRawBufferPointerインスタンスを使って、バッファポインタの割り当することとバッファポインタを別のコレクションの要素のソースとして使うことの間の違いを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses someBytes, an UnsafeRawBufferPointer instance, to demonstrate the difference between assigning a buffer pointer and using a buffer pointer as the source for another collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はsomeBytes、UnsafeRawBufferPointerインスタンスを使って、バッファポインタの割り当することとバッファポインタを別のコレクションの要素のソースとして使うことの間の違いを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses a structure to represent an error when parsing an XML document, including the line and column numbers where the error occurred:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、構造体を使ってXML書類をパースする時にエラーを表して、行およびコラム番号をエラーが生じたときに含めます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses implicit bridging to pass a pointer to value when calling print(address:as:):</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、print(address:as:)を呼び出すとき、暗黙的ブリッジを使ってポインタをvalueへと渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses indexed subscripting to update an array’s second element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、インデックスでの添え字を使って、配列の２番目の要素を更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses optional chaining to access the hasSuffix(_:) method on a String? instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、オプショナル連鎖を使って、hasSuffix(_:)メソッドにString?インスタンス上でアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、drop(while:)メソッドを使って、正の数をnumbers配列の始まりで省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the first(where:) method to find the first negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、first(where:)メソッドを使って、整数の配列において最初の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the negate() method to negate the value of an integer x:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はnegate()メソッドを使って、整数xの値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、prefix(while:)メソッドを使って、正の数をnumbers配列の始まりで見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the zip(_:_:) function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はzip(_:_:)関数を使って、同時に文字列からなる配列とある可付番範囲の全体にわたって反復します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the ~= operator to test whether an integer is included in a range of single-digit numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、~=演算子を使って、ある整数が一桁の数からなる範囲に含まれるかどうか調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the zip(_:_:) function to iterate over an array of strings and a countable range at the same time:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例はzip(_:_:)関数を使って、同時に文字列からなる配列とある可付番範囲の全体にわたって反復します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the C strncmp function to compare the beginning of two Swift strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、C strncmp関数を使って２つのSwift文字列を比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the buffer pointer’s subscript to access and modify the elements of a mutable buffer pointing to the contiguous contents of an array:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、バッファポインタのもつ添え字を使うことで、配列の隣接内容を指している可変バッファの要素にアクセスして修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the buffer pointer’s subscript to access every other element of the buffer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、パッファポインタの添え字を使うことで、そのバッファのすべての他の要素にアクセスします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the macro as a suffix to rename an enumeration:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、マクロを接尾辞として使って列挙を改名します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-16 code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-16コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses the subscript to print the value of a string’s first UTF-8 code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、添え字を使って文字列のもつ最初のUTF-8コード単位の値を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses this initializer to create a new Double instance with the sign of a and the magnitude of b:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このイニシャライザを使って新しいDoubleインスタンスをaの符号とbの規模で作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses this initializer to create a new Double instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このイニシャライザを使って新しいDoubleインスタンスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses this method to convert a partial range up to 4 into a half-open range, using an array instance to add the range’s lower bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このメソッドを使って、4までの不完全な範囲を半開範囲へと変換します、配列インスタンスを使って範囲の下側の境界を追加しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses this method to multiply two Int8 values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つのInt8値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses this method to multiply two UInt8 values that normally overflow when multiplied:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、このメソッドを使って、通常は乗算した時オーバーフローする２つのUInt8値を乗算します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following example uses this subscript while counting the occurences of each letter in a string:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、この添え字を、ある文字列の中の各印字の出現を数える間に使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、maxSplitsとomittingEmptySubsequencesパラメータの効果を、各空白文字（” “）で文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例は、maxSplitsとomittingEmptySubsequencesパラメータの効果を、空白にマッチするクロージャを使って文字列を分割する場合で示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following examples use this dictionary of image names and file paths:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以降の例は、この画像名とファイルパスの辞書を使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following rules determine how an API's existing interface is imported:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の規則は、APIの持つ既存のインターフェイスがインポートされる方法を決定します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following special cases also apply:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の特別な場合もまた適用されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following tables use Type as a placeholder type name to indicate syntax for the mappings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の表は、Typeをプレースホルダー型名として使ってマップのための構文を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The function uses type(of:) to find the dynamic type of value, which itself is an instance of the Smiley.Type metatype.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、type(of:)を使ってvalueの動的型を見つけます、それはそれ自身がSmiley.Typeメタタイプのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The function uses a recursive approach to perform the same comparisons on smaller and smaller pieces of the original strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、反復する取り組みを使って、元の文字列のどんどん小さい断片上で同じ比較を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The function uses the multipliedReportingOverflow(by:) method to multiply x by itself and check whether the result is too large to represent in the same type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、multipliedReportingOverflow(by:)メソッドを使って、xをそれ自身で乗算して、結果が同じ型で表現するのに大きすぎないかどうか検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The function won’t compile as written, because a lazy collection’s filter(_:) method requires an escaping closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は書いた通りにコンパイルしないでしょう、なぜなら遅延コレクションのもつfilter(_:)メソッドが脱出クロージャを要求するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general category (most usual classification) of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーの一般カテゴリ（最も普通のクラス分け）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The general category of a scalar is its “first-order, most usual categorization”.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスカラーの一般カテゴリは、それの “第一次の、最も普通のカテゴリ分け” です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The given argument without any changes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何ら変更のない、与えられた引数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The given string may begin with a plus or minus sign character (+ or -).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた文字列は、プラスまたはマイナス符号文字（+または-）で始まっても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The global abs(_:) function provides more familiar syntax when you need to find an absolute value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>グローバルabs(_:)関数は、あなたが絶対値を見つける必要がある時により馴染みのある構文を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The greater of x and y, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyのより大きい方、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The greater of x and y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyのうちより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The greatest finite number representable by this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型によって表現可能な最も大きな有限数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The greatest of all the arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての引数のうち最も大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The greatest representable value that compares less than this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表現可能な最も大きい値で、この値と比較してより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash algorithm implemented by Hasher may itself change between any two versions of the standard library.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hasherによって実装されるハッシュアルゴリズムは、標準ライブラリの任意の２つのバージョン間でそれ自体が変化するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash value calculated by the hasher.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハーシャーによって計算されるハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hasher to use when combining the components of this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスの構成要素を結合する場合に使うハーシャー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hasher uses a per-execution seed value that is set during process startup, usually from a high-quality random source.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ハーシャーは実行毎シード値を使います、それはプロセスの立ち上げの間に設定されます、ふつうは高品質の無作為出典から。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The header's name is generated from your product module name, followed by "-Swift.h".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ヘッダの名前は、あなたの製品モジュール名から、それに"-Swift.h"を続けることで生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identical-to operator (===) returns false when comparing two references to different object instances, even if the two instances have the same value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性演算子（===）は、２つのインスタンスを比較して異なるオブジェクトインスタンスであるときfalseを返します、２つのインスタンスが同じ値を持つとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identity of a class instance is not part of an instance’s value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスインスタンスの同一性は、インスタンスの持つ値の部分のことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The immutable buffer pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる不変のバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The immutable pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる不変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The immutable raw pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる不変の生のポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation of the == function returns the same value whether its two arguments are the same instance or are two different instances with the same integer stored in their value properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>==関数の実装は、それの２つの引数が同じインスタンスであろうと、それらのvalueプロハティの中に格納される同じ整数を持つ２つの異なるインスタンスであろうと、同じ値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The implementation of the new rgba property reuses the existing __getRed(red:green:blue:alpha:) method to ensure that functionality remains the same between Swift and Objective-C:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいrgbaプロパティの実装は、既存の__getRed(red:green:blue:alpha:)メソッドを再利用して、SwiftとObjective-Cの間で機能性が同じままであることを確かにします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The imported Cake structure and its nested types are imported with a memberwise initializer that you can use to initialize the structure with custom values for its fields:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたCake構造体とそれの入れ子にされる型は、あるメンバー関連イニシャライザを使ってインポートされます、それをあなたは使うことで構造体をそれのフィールドにカスタム値を使って初期化できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The imported Swift structure contains a stored property for each C structure field and an initializer whose parameters correspond to the stored properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたSwift構造体は、各C構造体フィールドに対してひとつの格納プロパティを、そしてそれのパラメータが格納プロパティと対応するひとつのイニシャライザを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The increasing sequence of nonnegative integers used along with the bitwise left shift operator (&lt;&lt;) ensures that each option in the option set takes up a unique bit in the binary representation of the raw value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非負整数からなるシーケンスの漸増、それだけでなくビット単位左シフト演算子（&lt;&lt;）は、オプションセットの中の各オプションが、生の値のバイナリ表現においてある特有なビットを取ることを確実にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index at which to start the resulting subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それで結果の下位シーケンスが始まるインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index for key and its associated value if key is in the dictionary; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyとそれの結び付けられた値のインデックス、keyが辞書の中にあるならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index immediately after i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iの直後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index immediately before i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iの直前のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index must be a valid index of String(utf16).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスはString(utf16)の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of member if it exists in the set; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それがこの集合に含まれるならばmemberのインデックス；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the first byte to swap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>交換する最初のバイトのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the first element for which predicate returns true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してpredicateがtrueを返す最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the first element in a nonempty buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でないバッファの中の最初の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the first element in the reordered collection that matches belongsInSecondPartition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>並べ直されたコレクションの中の最初の要素のインデックス、それはbelongsInSecondPartitionに合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the first value to swap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>交換する１つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the last element in the collection that matches predicate, or nil if no elements match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicateに合致する、コレクションの中の最後の要素のインデックス、または合致する要素がないならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the last element to include in the resulting subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の下位シーケンスの中に含まれることになる最後の要素のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the lead surrogate is successfully converted to a position in utf8, but the index of the trailing surrogate is not.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>先頭サロゲートのインデックスはうまくutf8での位置に変換されます、しかし後続サロゲートのインデックスは違います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the member to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除するメンバのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the second byte to swap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>交換する２番目のバイトのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index of the second value to swap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>交換する２つ目の値のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index type for a string’s unicodeScalars view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列のもつunicodeScalarsビューのためのインデックス型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index type for arrays, Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列のためのインデックス型、Int。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index value immediately after i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iの直後のインデックス値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The index value immediately before i.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>iの直前のインデックス値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The indices that are valid for subscripting the collection, in ascending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの添え字に使うのに有効である、昇順でのインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The indices that are valid for subscripting the range, in ascending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>昇順で、範囲の添え字として有効なインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The infix operators are grouped below by precedence group in decreasing order of precedence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>中置演算子は、以下に優先順位の高い方から優先順位グループによって分類されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initial state that will be passed to the closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期状態、それはクロージャに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザは、instanceの文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザは、instanceの文字列表現をそれのプロトコル準拠に依存して以下の方法の１つで作成します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initializer succeeds if v is a valid Unicode scalar value, in the range 0...0xD7FF or 0xE000...0x10FFFF.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>vが有効なユニコードスカラー値、範囲0...0xD7FFまたは0xE000...0x10FFFFの中であるならば、イニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The initializer succeeds if v is a valid Unicode scalar value—that is, if v is in the range 0...0xD7FF or 0xE000...0x10FFFF.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>vが有効なユニコードスカラー値であるならば — すなわち、vが範囲0...0xD7FFまたは0xE000...0x10FFFFの中であるならば、イニシャライザは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input string to convert to a Double instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Doubleインスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input string to convert to a Float80 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Float80インスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input string to convert to a Float instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Floatインスタンスへ変換することになる入力文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The input was entirely consumed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入力はすっかり消費された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance x, cast to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスx、型Tにキャスト済み。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance for which to create a mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してミラーを作成するインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance passed as value will leak if nothing eventually balances the retain.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueとして渡されるインスタンスは、リテインが結局は均衡を保つことがないならば漏洩します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance passed as value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueとして渡されるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance passed as x must be an instance of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとして渡されるインスタンスは、型Tのインスタンスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance referenced by this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to assign this buffer’s memory to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス、それにこのバッファのもつメモリをアサインします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to assign this pointer’s memory to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス、それにこのポインタのもつメモリをアサインします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to cast to type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>typeにキャストすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to copy into memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリにコピーすることになるインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to initialize this buffer’s memory with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス、それでこのバッファのもつメモリ初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to initialize this pointer’s memory with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス、それでこのポインタのもつメモリを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to initialize this pointer’s pointee to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンス、それにこのポインタのもつpointeeを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instance to represent in the new mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいミラーの中で表現するインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instances in the region source..&lt;(source + count) are unaffected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域source..&lt;(source + count)の中のインスタンスは、影響を受けません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instances of NSDictionary and Dictionary share buffer using the same copy-on-write optimization that is used when two instances of Dictionary share buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSDictionaryとDictionaryインスタンスは、Dictionaryの２つのインスタンスがバッファを共有するとき使われるのと、同じコピーオンライト最適化を使ってバッファを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The instances of NSSet and Set share buffer using the same copy-on-write optimization that is used when two instances of Set share buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSSetとSetのインスタンスは、Setの２つのインスタンスがバッファを共有するとき使われるのと、同じコピーオンライト最適化を使ってバッファを共有します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer encoding of a Double instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるDoubleインスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer encoding of a Float instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるFloatインスタンスの整数符号化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer to convert to a floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値へ変換されることになる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer to convert, and instance of type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換する整数、そして型Tのインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer to represent as a floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値として表すことになる整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integer value of the desired key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>望むキーの整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The integral value found by rounding using rule.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ruleを使って丸められることによって見出される整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The intersection of [member] and the set, if the intersection was nonempty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>[member]とこの集合の交叉、その交叉が空でなかったならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The intersection of [newMember] and the set if the intersection was nonempty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>[newMember]とこの集合の交叉、その交叉が空でなかったならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The iterator for EnumeratedSequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>EnumeratedSequenceのためのイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The iterator for a PartialRangeFrom instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>PartialRangeFromインスタンスに対するイテレータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The joined sequence of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>つなぎ合わされたシーケンス要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key path to append.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加することになるキーパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key that the decoded value is associated with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコードされた値が関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key that the nested container is associated with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入れ子にされたコンテナが関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key the look up in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の中を検索するキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to associate the object with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オブジェクトと関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to associate the value with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値と関連付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to associate with value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueと結び付けられるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to compare against.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーに対して比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to compare with.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーと比較します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to decode super for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>superをデコードするためのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to encode super for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>superをエンコードするためのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to encode the container for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンテナをエンコードするためのキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to find in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーが辞書において捜されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to remove along with its associated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの関連する値とともに削除されるキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key to search for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーについて調査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key type of a dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key type to use for the container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コンテナに対して使うためのキー型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key-value pair at position position.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>位置positionでのキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key-value pair that correspond to index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>indexに対応するキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key-value pairs that will make up the new dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい辞書を作り上げるキー値ペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key’s hash value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのキーのもつハッシュ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The key’s string value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーのもつ文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The kind of machine learning data value to which the array may be converted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それへと配列が変換されるかもしれない機械学習データ値の種類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The kind of machine learning data value to which the dictionary may be converted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それへと辞書が変換されるかもしれない機械学習データ値の種類。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The labels of the resulting mirror’s children collection are all nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のミラーのもつchildrenコレクションのラベルは、すべてnilです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last element of the collection if the collection has one or more elements; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが１つ以上の要素を持つならばコレクションの最後の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last element of the collection if the collection is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空でないならばコレクションの最後の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの最後の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>predicate満たすシーケンスの最後の要素、またはpredicateを満たす要素が無いならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last index where element is found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこでelementが見つけられた最後のインデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last parameter of these functions is of the associated Stride type—the type that represents the distance between any two instances of the Strideable type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの関数の最後のパラメータは、Stride型 — Strideable型の何らかの２つのインスタンスの間の隔たりを表す型の関連型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lazy collection isn’t persisted, so the predicate closure won’t actually escape the body of the function; nevertheless, it can’t be used in this way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延コレクションは持続させられません、それでpredicateクロージャは実際には関数の本文を脱出することはありません；それはこの方法では使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The leading surrogate code unit of x when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-16でエンコードされる時のxの先行サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The least normal exponent for values of the type F is 1 - bias, and the largest finite exponent is bias.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Fの最小正規化指数は、1 - biasです、最大有限指数はbiasです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The least of all the arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての引数のうち最も少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The least positive normal number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も小さい正のノーマル数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The least positive number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も小さい正の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The least representable value that compares greater than this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表現可能な最も小さい値で、この値と比較してより大きいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The left-hand side of the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子の左手側。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The length in bytes of the static string’s ASCII or UTF-8 representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的文字列のASCIIまたはUTF-8表現のバイトでの長さ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lesser of x and y.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyのうちより小さいもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The line number to print along with message if the assertion fails.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>表明（アサーション）がうまくいかないならば、messageとともに出力する行番号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The line number to print along with message.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>messageに加えて出力される行番号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The literal 23 is inferred as an Int instance and then wrapped as an optional before the comparison is performed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リテラル23は、Intインスタンスと推論され、それから比較が実行される前にオプショナルとしてラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The little-endian representation of this integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この整数のリトルエンディアン表現。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The logical AND operator (&amp;&amp;) combines two Boolean values and returns true if both of the values are true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理AND演算子（&amp;&amp;）は２つのブール値を組み合わせて、trueを両方の値がtrueならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The logical NOT operator (!) inverts a Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理NOT演算子（!）は、ブール値を逆にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The logical OR operator (||) combines two Boolean values and returns true if at least one of the values is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>論理OR演算子（||）は、２つのブール値を組み合わせて、trueを値の少なくとも１つがtrueならば返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The longer scalar values may need two UInt16 values for storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より長いスカラー値は、２つのUInt16値をストレージとして必要とするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lower bound for the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の下側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lowercase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのローワーケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro behaves just like the NS_SWIFT_UNAVAILABLE macro except that it doesn't support the customizable error message and it restricts compile-time access to the declaration in Objective-C code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このマクロはちょうどNS_SWIFT_UNAVAILABLEマクロのように振舞います、しかしそれがカスタマイズ可能なエラーメッセージをサポートしないことと、それがコンパイル時アクセスをObjective-Cコードの中の宣言に制限することを除きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The macro preserves the Objective-C name for use with Objective-C code, so the API has appropriate names in each language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このマクロは、Objective-C名をObjective-Cコードで使うために保護します、それでそのAPIは適切な名前を各言語において持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The magnitude of a floating-point value x of type F can be calculated by using the following formula, where ** is exponentiation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Fの浮動小数点値xの規模は、以下の公式を使って計算されることができます、そこで**は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The magnitude of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の規模。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mask type resulting from pointwise comparisons of this vector type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このベクター型のポイント関連比較からの結果のマスク型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The masking addition assignment operator (&amp;+=) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マスク加算代入演算子（&amp;+=）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The masking multiplication assignment operator (&amp;*=) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マスク乗算代入演算子（&amp;*=）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The masking subtraction assignment operator (&amp;-=) silently wraps any overflow that occurs during the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マスク減算代入演算子（&amp;-=）は、演算の間に起こるあらゆるオーバーフローを黙ってラップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mathematical constant pi.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>数学の定数pi。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum depth to descend when writing the contents of a value that has nested components.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>入れ子になった構成要素を持つ値の内容を書き出す時に下る最大の深さ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum number of elements for which to write the full contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完全な内容を書き出すための最大要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum number of elements to return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返される要素の最大限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum number of times to split the collection, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum number of times to split the sequence, or one less than the number of subsequences to return.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスを分割する回数の最大限度、または返される下位シーケンスの数より１つ少ないもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The maximum representable integer in this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型における最大の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The means of generating the subject’s ancestor representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>主題のもつ先祖表現を生み出す手段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory at this pointer plus offset must be properly aligned for accessing T and initialized to T or another type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタにoffsetを加えたところでのメモリは、Tにアクセスするために厳密にアラインされ、そしてTまたはTとレイアウト互換の別の型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory at this pointer plus offset must be properly aligned for accessing T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>offsetを加えたこのポインタでのメモリは、Tにアクセスするために適切にアラインされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory in the region source..&lt;(source + byteCount) must be initialized to a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域source..&lt;(source + byteCount)の中のメモリは、自明型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory in the region source..&lt;(source + count) may overlap with the destination region.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域source..&lt;(source + count)の中のメモリは、行き先の領域と重なってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory in the region source..&lt;(source + count) must be initialized to type T and must not overlap the destination region.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域source..&lt;(source + count)の中のメモリは、型Tに初期化されなければなりません、そして行き先の領域と重なってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory in the region source..&lt;(source + count) must be initialized to type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>領域source..&lt;(source + count)の中のメモリは、型Tに初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory in this region is bound to T, but has not been modified in any other way.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この領域の中のメモリは、Tへと束縛されます、しかし他のいかなる方法においても変更されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory is allocated, but not initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリはアロケートされます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory layout of a type, describing its size, stride, and alignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型のメモリレイアウト、それはそれのサイズ、ストライド、およびアライメントを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory must also be uninitialized, initialized to T, or initialized to another trivial type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリはまた、未初期化状態にされる、Tに初期化される、または別の自明型でTとレイアウト互換なものに初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory must also be uninitialized, initialized to T, or initialized to another trivial type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリはまた、未初期化状態にされる、Tに初期化される、または別の自明型でTとレイアウト互換なものに初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory must be initialized to a value of a type that is layout compatible with type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリは、typeとレイアウト互換である型の値に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory must be uninitialized or initialized to a type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリは、未初期化であるかTとレイアウト互換でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory must be uninitialized or initialized to a type that is layout compatible with T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリは、未初期化であるかTとレイアウト互換でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory must not be initialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリは初期化されてはなりません、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by an UnsafeMutablePointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutablePointerインスタンスによって参照されるメモリは、いくつかの状態の１つであることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by an UnsafeMutableRawPointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawPointerインスタンスによって参照されるメモリは、いくつかの状態の１つであることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by an UnsafePointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafePointerインスタンスによって参照されるメモリは、幾つかの状態のうち１つであるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by an UnsafeRawPointer instance can be in one of several states.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeRawPointerインスタンスによって参照されるメモリは、幾つかの状態のうち１つであるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by the new buffer is allocated, but not initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいバッファによって参照されるメモリは、アロケートされます、しかし初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by the returned raw pointer is still bound to Pointee.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返される生のボインタによって参照されるメモリは、依然としてPointeeへの境界です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by this buffer must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファによって参照されるメモリは、未初期化状態にされるまたは自明型に初期化されなければなりません、そしてTにアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by this pointer must be initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリは、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory referenced by this pointer must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリは、未初期化状態にされるまたは自明型に初期化されなければなりません、そしてTにアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory region source..&lt;(source + count) must be initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ領域source..&lt;(source + count)は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory regions referenced by source and this pointer may overlap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceによって参照されるメモリ領域とこのポインタは、重なり合うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory regions referenced by source and this pointer must not overlap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceによって参照されるメモリ領域とこのポインタは、重なり合わなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory regions referenced by source and this pointer may overlap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceによって参照されるメモリ領域とこのポインタは、重なり合うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory starting at this pointer must be bound to the type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタで始まるメモリは、型Tに束縛されていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory to be deallocated must be uninitialized or initialized to a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>割り当て解除されるメモリは、未初期化でなければなりません、または自明型に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory to read for the new instance must not extend beyond the buffer pointer’s memory region—that is, offset + MemoryLayout&lt;T&gt;.size must be less than or equal to the buffer pointer’s count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのために読み出すメモリは、バッファポインタのもつメモリ領域を越えて拡張されてはなりません — すなわち、offset + MemoryLayout&lt;T&gt;.sizeはバッファポインタのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The memory written to must not extend beyond the buffer pointer’s memory region—that is, offset + MemoryLayout&lt;T&gt;.size must be less than or equal to the buffer pointer’s count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込まれることになるメモリは、バッファポインタのもつメモリ領域を越えて拡張されてはなりません — すなわち、offset + MemoryLayout&lt;T&gt;.sizeはバッファポインタのもつcountより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum number of Elements that must be able to be stored in the new buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいバッファに格納されることが可能でなければならないElementの最小限の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum number of ASCII character’s worth of storage to allocate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>割り当てる最小数のASCII文字相当のストレージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum number of elements that the newly created set should be able to store without reallocating its storage buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しく作成された集合がそれのストレージバッファをアロケートし直すことなしに格納できるであろう要素の最小の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum number of key-value pairs that the newly created dictionary should be able to store without reallocating its storage buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しく作成された辞書がそれのストレージバッファをアロケートし直すことなしに格納できるであろうキー値ペアの最小の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum of x and y, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyの最小、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The minimum representable integer in this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型における最小の表現可能な整数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most common way to access values in a dictionary is to use a key as a subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の中の値にアクセスする最も普通の方法は、キーを添え字として使うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most common way to iterate over the elements of a sequence is to use a for-in loop:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの要素のすべてにわたって反復するための最も一般的な方法は、for-inループを使うことです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most effective approach for migrating code to Swift is on a per-file basis—that is, one class at a time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトへの移っているコードのために最も効果的なアプローチは、ファイル毎原則の上にあります ― すなわち、一度にひとつのクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most familiar use of relational operators is to compare numbers, as in the following example:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最もよく知られている関係演算子の使用は、数の比較に対してです、以下の例でのように：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most general classification of a Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーの最も一般的なクラス分け。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The multiplication operator (*) calculates the product of its two arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>乗算演算子（*）は、それの２つの引数の積を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mutable buffer pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる可変のバッファポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The mutable raw pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる可変ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name of a scalar is immutable and never changed in future versions of the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスカラーの名前は不変です、そして決してユニコード標準の将来の版において変更されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The naming of those macros is slightly misleading, because infinity is greater than this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜならinfinityはこの値より大きいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The naming of those macros is slightly misleading, because subnormals, zeros, and negative numbers are smaller than this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのマクロの命名の仕方は少しばかり誤解させます、なぜならサブノーマル、ゼロ、そして負の数はこの値より小さいからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も近い整数値、または、２つの整数値が同じくらい近いならば、より大きい規模を持つ整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The negation operator (prefix -) returns the additive inverse of its argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負にする演算子（前置-）は、この引数の加法の逆元を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new studentsByLetter dictionary has three entries, with students’ names grouped by the keys "E", "K", and "A".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいstudentsByLetter辞書は、生徒の名前をキー"E"、"K"、そして"A"でグループ分けして、３つの登録項目を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new Unicode scalar values to add to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列へ加える新しいユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new array, on the other hand, matches the order and number of elements provided.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一方、新しい配列は、提供された要素の順番と数に合致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new buffer represents the same region of memory as slice, but is indexed starting at zero instead of sharing indices with the original buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいバッファは、sliceと同じメモリ領域を表します、しかしゼロで開始してインデックスをつけられます、元のバッファとインデックスを共有するのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new buffer represents the same region of memory as the slice, but its indices start at zero instead of at the beginning of the slice in the original buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいバッファは、このスライスと同じメモリ領域を表します、しかしそれのインデックスはゼロで開始します、元のバッファ中のスライスの始まりでというわけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new character to insert into the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列へ挿入する新しい文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new characters to add to the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列へ加える新しいいくらかの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new element is inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい要素は、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new element to insert into the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列に挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new element to insert into the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションに挿入されることになる新しい要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new elements are inserted before the element currently at the specified index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいいくらかの要素が、指定されたインデックスでの現在の要素の前に挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new elements to add to the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列に加えられることになる新しい要素ら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new elements to add to the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションに加える新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new elements to insert into the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションへ挿入される新しいいくらかの要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい浮動小数点値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new name is shorter, but still understandable because it uses an industry-standard initialism for color components: RGBA.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい名前はより短いです、しかしまだ理解可能です、なぜならそれは色構成要素のための業界標準頭文字語：RGBAを使うからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new storage is a multiple of the old storage’s size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいストレージは古いストレージの大きさの倍数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new value represents the address of the pointer passed as pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値は、pointerとして渡されるポインタのアドレスを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new value to add to the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この辞書に加える新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new value’s exponent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値の持つ指数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new value’s significand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値の持つ仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next n bytes of the memory that someBytes references are copied in this code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>someBytesが参照する次のnバイトのメモリは、このコードでコピーされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next code sample shows a possible extension to the Int type that parses the integer value of a String instance, throwing an error when there is a problem during parsing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次のコード例が示すのは、Int型に対する１つの可能な拡張で、それはStringインスタンスの整数値をパースして、パースの間に問題がある時はエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next element in the underlying sequence if a next element exists; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の要素が存在するならば基礎をなすシーケンス中の次の要素；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next element in the underlying sequence, if a next element exists; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の要素が存在するならば、基礎をなすシーケンス中の次の要素；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example attempts to convert the indices of the two UTF-16 code points that represent the teacup emoji ("🍵").</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、ティーカップ絵文字（"🍵"）を表す２つのUTF-16コード点のインデックスの変換を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例はs.startIndexから６位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔はlimitとして渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example attempts to retrieve an index ten positions from numbers.startIndex, but fails, because that distance is beyond the index passed as limit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例はnumbers.startIndexから10位置のインデックスをとりだすことを試みます、しかし失敗します、なぜならその間隔はlimitとして渡されるインデックスを越えるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example creates a slice of numbers starting at index 2, and then uses the slice with relative(to:) to convert upToFour to a concrete range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、numbersのスライスをインデックス2で開始して作成して、それからそのスライスをrelative(to:)と使うことでupToFourを具体的な範囲へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example declares a generic squared function, which accepts an instance x of any fixed-width integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、総称体squared関数を宣言します、それはどんな固定長整数型のxインスタンスでも受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example tries to find the correct text for a greeting in two separate dictionaries before falling back to a static default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、挨拶として正しいテキストを２つの独立した辞書から見つけることをある静的な省略時のものに落ち着く前に試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next example uses key-based subscripting of the responseMessages dictionary with two keys that exist in the dictionary and one that does not.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>次の例は、キーに基づく添え字をresponseMessages辞書に使います、ですが２つのキーは辞書に存在し１つはそうでありません。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next sequential byte in the raw buffer if another byte exists; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>別のバイトが存在するならば生のバッファでの次の順次的なバイト；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The non-optional value is wrapped as an optional before the comparison is made.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非オプショナル値は、比較がなされる前にオプショナル値としてラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The normative formal alias of the scalar, or nil if it has no alias.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのスカラーの標準の公式のエイリアス、またはそれがエイリアスでないならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits equal to 1 in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値のバイナリ表現の中の１に等しいビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits in the binary representation of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値のバイナリ表現でのビット数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits in the current binary representation of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の現在のバイナリ表現でのビット数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits required to represent the value’s significand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の仮数を表すのに必要とされるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits to shift lhs to the left.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビット数をlhsから左へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits to shift lhs to the right.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このビット数をlhsから右へとシフトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used for the underlying binary representation of values of this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の値の基礎をなすバイナリ表現に対して使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bits used to represent the type’s exponent.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の指数を表すのに使われるビットの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes from the start of one instance of T to the start of the next when stored in contiguous memory or in an Array&lt;T&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tの１つのインスタンスの始まりから次のものの始まりまでのバイト数、隣接メモリの中にまたはArray&lt;T&gt;の中に格納される場合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes in the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの中のバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes in this region is count * MemoryLayout&lt;T&gt;.stride.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この領域の中のバイト数は、count * MemoryLayout&lt;T&gt;.strideです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes to allocate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アロケートすることになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes to copy.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コピーされることになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes to include in the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファの中に含むことになるバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of bytes to offset this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタにオフセットするバイト数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of characters in a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列の中の文字数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of colors that a traffic light uses isn't expected to grow, so it's not declared to be extensible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>信号機が使う色の数は増大は想定されません、それでそれは拡張可能に宣言されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of consecutive copies of newValue to assign.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アサインするnewValueの連続コピーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of consecutive copies of newValue to initialize.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初期化するnewValueの連続コピーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of copies of value to copy into memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリにコピーすることになるvalueのコピー数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements (always zero).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の数を返します（常にゼロ）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements contained within this container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコンテナ内に含まれる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements encoded into the container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコンテナへとエンコードされる要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in the collection, which is always one.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの中の要素数、それは常に１つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in the sequence that satisfy the given predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた述部を満たす、そのシーケンスの中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合中の要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements in this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションの要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements to drop from the beginning of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの始まりから省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements to drop from the beginning of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスの初めの部分から落とす要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements to drop off the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションの終わりで省く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements to drop off the end of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの末尾から取り除く要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements to remove from the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションから削除される要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除する要素の数を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of instances in the buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファの中のインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of instances of Pointee to bind to type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Pointeeのインスタンスの数、typeに束縛されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of instances to copy from the memory referenced by source to this pointer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceによって参照されるメモリからこのポインタのもつメモリまでコピーされるインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of instances to deinitialize.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デイニシャライズするインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of instances to move from source to this pointer’s memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceからこのポインタのもつメモリまで移動することになるインスタンスの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of interpolations which will be appended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>追加されるだろう補間の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of key-value pairs in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の中のキー値ペアの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of keys in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の中のキーの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of leading zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値のバイナリ表現における先頭のゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of new elements need not match the number of elements being removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい要素の数は、削除される要素の数と一致する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of scalars/elements in the vector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このベクターの中のスカラー／要素の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of spaces to use as an indent for each line of the output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>出力の各行のひとつの字下げとして使われる空白の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of times to repeat element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>elementを繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of times to repeat repeatedValue in the resulting string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>repeatedValueを結果文字列の中で繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of times to repeat the value passed in the repeating parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>repeatingパラメータで渡された値を繰り返す回数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of trailing zeros in this value’s binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値のバイナリ表現において後に続くゼロの数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of values in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の中の値の数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The numeric type of a scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスカラーの数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The numeric type of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーの数値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The numeric value of a scalar is represented as a Double because some scalars represent fractions:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスカラーの数値は、Doubleとして表されます、いくつかのスカラーは小数を表すからです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The numeric value of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーの数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object referenced by this Unmanaged instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このUnmanagedインスタンスによって参照されるオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The object to encode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコードするオブジェクト。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset from this pointer at which to access an instance, measured in strides of the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタからのオフセット、それでインスタンスにアクセスします、ポインタのPointee型のストライドにおいて測られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset from this pointer, in bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタからのオフセット、バイトで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset in bytes from a pointer to a value of type T to a pointer to the storage referenced by key, or nil if no such offset is available for the storage referenced by key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Tの値へのポインタから、keyによって参照されるストレージへのポインタまでのバイトでのオフセット、またはnil、もしそのようなオフセットがkeyによって参照されるストレージに利用可能でないならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset in bytes into the buffer pointer’s memory to begin reading data for the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのためにデータの読み出しを開始するための、バッファポインタのもつメモリに対するバイトでのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset into a string’s code units for this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスに対する、ある文字列のもつコード単位へのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset is available only if the given key refers to inline, directly addressable storage within the in-memory representation of T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオフセットは与えられたキーがインラインの、直接にアドレス指定可能なストレージをTのインメモリ表現内で参照する場合にのみ利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset of the byte to access.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスすることになるバイトのオフセット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The offset, in bytes, into the buffer pointer’s memory at which to begin reading data for the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファポインタのもつメモリに対する、バイトでの、オフセット、それで新しいインスタンスに対してデータ読み出しを始めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The old name must not be used in the new runtime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>古い名前は、新しいランタイムで使用されてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only scalars for which this property is true are:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のスカラーに対してのみこのプロパティは true です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only valid position in a CollectionOfOne instance is 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CollectionOfOneインスタンスの中の唯一の有効な位置は、0です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The operation doesn’t require going beyond the limiting numbers.endIndex value, so it succeeds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この操作は、限度であるnumbers.endIndex値を越えることを要求しません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算は、限界であるs.endIndex値を越えていく必要はありません、それでそれは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The order in which A is printed relative to the other letters isn't guaranteed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Aが他の文字に関連して印字される順番は、保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The order of key-value pairs in a dictionary is stable between mutations but is otherwise unpredictable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書中のキー値ペアの順番は各変化間は安定しています、しかしそれ以外では予測できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The order of the key-value pairs is kept intact in the resulting KeyValuePairs instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアの順序は、結果のKeyValuePairsインスタンスにおいて損なわれず保たれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The order of the remaining elements is preserved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残っている要素の順番は保全されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ordering difference happens due to the way the now(_:) and later(_:) functions are defined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>順番の違いは、now(_:) and later(_:)関数が定義される方法のために起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other enumeration macros generate structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他の列挙マクロは、構造体を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other value to multiply.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>掛け合わされることになるもう一方の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The output from each call to debugPrint(_:separator:terminator:) includes a newline by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>debugPrint(_:separator:terminator:)への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The output from each call to debugPrint(_:separator:terminator:to:) includes a newline by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>debugPrint(_:separator:terminator:to:)への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The output from each call to print(_:separator:terminator:) includes a newline by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print(_:separator:terminator:)への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The output from each call to print(_:separator:terminator:to:) includes a newline by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>print(_:separator:terminator:to:)への各呼び出しからの出力は、初期状態では改行を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overflow addition operator (&amp;+) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー加算演算子（&amp;+）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overflow multiplication operator (&amp;*) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー乗算演算子（&amp;*）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overflow subtraction operator (&amp;-) discards any bits that overflow the fixed width of the integer type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オーバーフロー減算演算子（&amp;-）は、固定幅の整数型からオーバーフローするあらゆるビットを廃棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The parameter indicates what a developer using Swift should do instead of using the part of the API you're making unavailable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのパラメータは、あなたが利用できなくしているAPIの部分を使う代わりにSwiftを使う開発者がすべきは何かを指し示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path of coding keys taken to get to the point of the failing decode call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗しているデコード呼び出しの地点に行くために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path of coding keys taken to get to the point of the failing encode call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>失敗しているエンコード呼び出しの地点に行くために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path of coding keys taken to get to this point in decoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path of coding keys taken to get to this point in encoding.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングのこの時点を得るために取られるコーディングキーのパス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path should be relative to your project, similar to the way your Info.plist path is specified in Build Settings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パスは、あなたのInfo.plistパスがBuild Settingsにおいて指定される方法と同様に、あなたのプロジェクトに対して相対的であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pattern-matching operator (~=) is used internally in case statements for pattern matching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パターンマッチング演算子（~=）は、内部的にcase文の中でパターンマッチングのために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pattern-matching operator is primarily intended to enable case statement pattern matching.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>パターンマッチング演算子は、元来case文パターンマッチングをできるようにすることを意図されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The payload consists of a sequence of decimal digits, or the characters 0X or 0x followed by a sequence of hexadecimal digits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ペイロードは、一連の10進の桁、または文字0Xか0xに続く一連の16進の桁から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The payload for this option should always be { super.customMirror }:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このオプションに対する積荷は、常に{ super.customMirror }であるべきです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The payload to use for the new NaN value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいNaN値のために使うためのペイロード。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The performance of accessing endIndex, last, any methods that depend on endIndex, or moving an index depends on how many elements satisfy the predicate at the start of the collection, and may not offer the usual performance given by the Collection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>endIndex、last、またはあらゆるendIndex依存メソッドでのアクセスにおける性能は、どのくらい多くの要素が述部をコレクションの始まりで満たすかに依存します、そしてCollectionプロトコルによって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The performance of accessing startIndex, first, any methods that depend on startIndex, or of advancing an index depends on how sparsely the filtering predicate is satisfied, and may not offer the usual performance given by Collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startIndex, first、あらゆるstartIndex依存のメソッドでのアクセスにおける、またはあるインデックスを進んでいくことにおける性能は、どのくらいフィルタ述部が満たされるのがまばらかに依存します、そしてCollectionによって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The performance of accessing startIndex, first, or any methods that depend on startIndex depends on how many elements satisfy the predicate at the start of the collection, and may not offer the usual performance given by the Collection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startIndex、first、またはあらゆるstartIndex依存メソッドでのアクセスにおける性能は、どのくらい多くの要素が述部をコレクションの始まりで満たすかに依存します、そしてCollectionプロトコルによって与えられる通常の性能を呈さないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The performance of some collection operations depends on the type of index that the collection provides.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>いくつかのコレクション演算の性能は、コレクションの提供するインデックスの型に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer argument is valid only for the duration of the function’s execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ボインタ引数は、関数の実行の継続期間に対してだけ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer argument is valid only for the duration of the method’s execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタ引数は、ただメソッドの実行の間に対してのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer argument to body is valid only during the execution of withUTF8Buffer(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyへのポインタ引数は、withUTF8Buffer(_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer argument to body is valid only during the execution of withUnsafeMutablePointer(to:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyへのポインタ引数は、withUnsafeMutablePointer(to:_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer argument to body is valid only during the execution of withUnsafePointer(to:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyへのポインタ引数は、withUnsafePointer(to:_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer created through implicit bridging of an instance or of an array’s elements is only valid during the execution of the called function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスのまたは配列の要素の暗黙的ブリッジを通して作成されるポインタは、呼び出された関数の実行の間に有効であるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as start must be aligned to MemoryLayout&lt;Element&gt;.alignment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startとして渡されるボインタは、MemoryLayout&lt;Element&gt;.alignmentにアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withCString(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数としてbodyに渡されるポインタは、withCString(_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withCString(encodedAs:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数としてbodyに渡されるポインタは、withCString(encodedAs:_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withUnsafeBufferPointer(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数としてbodyに渡されるボインタは、withUnsafeBufferPointer(_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withUnsafeMutableBufferPointer(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数としてbodyに渡されるボインタは、withUnsafeMutableBufferPointer(_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as an argument to body is valid only during the execution of withVaList(_:_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数としてbodyに渡されるポインタは、withVaList(_:_:)の実行の間のみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer passed as an argument to body is valid only for the lifetime of the closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>引数としてbodyに渡されるポインタは、このクロージャの生涯に対してのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになるポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer to use as the source for the new integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい整数のためのソースとして使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pointer you pass to the function is only guaranteed to be valid for the duration of the function call.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが関数に渡すポインタは、関数呼び出しの間に対して有効であることだけを保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position after the element to create an index for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対するインデックスを作成する要素の後の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position after this position in the underlying collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基盤コレクションでのこの位置の後の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position at which to insert the new element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこで新しい要素が挿入されることになる位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position at which to insert the new elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そこで新しいいくらかの要素が挿入されるところの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position in characters that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスに正確に対応するcharactersの中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position in unicodeScalars that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスに正確に対応するunicodeScalarsの中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position in utf16 that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスに正確に対応するutf16の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position in utf8 that corresponds exactly to this index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスに正確に対応するutf8の中の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of a key-value pair in a dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の中でのあるキー値ペアの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of an element in a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の中でのある要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the character to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除する文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the element to access.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスする要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the element to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除する要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first Unicode scalar value if the string is nonempty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列が空でないならば、最初のユニコードスカラー値の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first character in a nonempty string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でない文字列の中の最初の文字の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first code unit if the String is nonempty; identical to endIndex otherwise.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Stringが空で無いならば最初のコードユニットの位置；そうでないならばendIndexと同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first code unit if the UTF-8 view is nonempty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-8ビューが空でないならば、最初のコードユニットの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初のコード単位の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first element in a non-empty collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でないコレクションにおける最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first element in a nonempty array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でない集合の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first element in a nonempty collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でないコレクションの中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first element in a nonempty dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空でない辞書の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first element in the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の中の最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the first element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最初の要素の位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the key-value pair to access.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この位置のキー値ペアにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The position of the key-value pair to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除されるキー値ペアの位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The positive difference between 1.0 and the next greater representable number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>1.0と次により大きい表現可能な数との間の正の差異。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The predicate must be a equivalence relation over the elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>述部は要素に対して同値関係でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The predicate must be a strict weak ordering over the elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>述部は、それら要素に対して厳密弱順序でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The predicate orders errors before successes and sorts the error responses by their error code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この述部はエラーを成功の前に並べて、そしてそれらエラー応答をそのエラーコードによってソートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The preferred display style for the mirror when presented in the debugger or in a playground.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>デバッガにまたはプレイグラウンドに含まれる時のミラーのための優先表示形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The presence of a value, stored as Wrapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の存在、Wrappedとして格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The process for importing Swift declarations into Objective-C code differs slightly depending on whether you’re writing an app or a framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift宣言をObjective-Cコードにインポートする行程は、あなたがアプリを書いているかフレームワークを書いているかに従い、わずかに異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The process for using your Objective-C declarations from your Swift code within mixed-language targets differs slightly depending on whether you’re writing an app or a framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのObjective-C宣言をあなたのSwiftコードから混合言語ターゲット内部において使うことに対する行程は、あなたがアプリをまたはフレームワークを書くかによって少しばかり異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The product of lhs and rhs, added to this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値に加えられた、lhsとrhsの積。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The product of x and y is 2000, which is too large to represent in a UInt8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyの積は2000です、それはUInt8インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The product of x and y is -1920, which is too large to represent in an Int8 instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyの積は-1920です、それはInt8インスタンスにおいて表すには大きすぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The product of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数の積は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The property defined by the new declaration is easier to use in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい宣言によって宣言されるこのプロパティは、Swiftで使うのがより簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol to which all class types implicitly conform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロトコルに対して、全てのクラス型は暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The protocol to which all classes implicitly conform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロトコルに対して、全てのクラスは暗黙的に準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The published name of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーの公開名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The radix, or base of exponentiation, for a floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある浮動小数点型の基数、または冪演算の底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The radix, or base of exponentiation, for this floating-point type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この浮動小数点型に対しての基数、または冪での底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The radix, or base, to use for converting text to an integer value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textを整数値に変換するのに使うための基数、または底。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The random number generator to use when choosing a random element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある無作為な要素を選ぶときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The random number generator to use when creating the new random value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい無作為値を作成するときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The random number generator to use when shuffling the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The random number generator to use when shuffling the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスをシャッフルするときに使う無作為数生成子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range expression is converted to a concrete subrange relative to this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲式は、このコレクションに関連するある具体的な下位範囲へ変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range in which to create a random value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その中においてある無作為な値が作成される範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of byte offsets to access.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アクセスすることになるバイトオフセットの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of elements to replace.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>置き換えることになる要素範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of indices to allow access to in the new slice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいスライスにおいて、アクセスするのが許されるインデックスの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of text to replace.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>置き換えるテキスト範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of the collection to be removed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除されることになるコレクションの範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range of the elements to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除する要素の範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range to clamp the bounds of this range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲に制限を課すための範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range’s lower bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その範囲の下方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range’s upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その範囲の上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The range’s “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw buffer slice to rebase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>再構築される生のバッファスライス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw encoding of the value’s exponent field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の指数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw encoding of the value’s significand field.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値の仮数フィールドの生のエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw integer value of the canonical combining class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この正準結合クラスの生の整数値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw type that can be used to represent all values of the conforming type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠している型のすべての値を表すために使われる生の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw value must therefore be of a type that conforms to the FixedWidthInteger protocol, such as UInt8 or Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生の値はしたがって、FixedWidthIntegerプロトコルに準拠する型、例えばUInt8またはIntなどのものでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw value of the allowedMoves instance is the result of the bitwise OR of its three members’ raw values:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>allowedMovesインスタンスの生の値は、それの３つのメンバの持つ生の値のビット単位ORの結果です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw value of the option set to create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>作成されるオプションセットの生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The raw value to use for the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのために使う生の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reference writeable key path to append.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込み可能なキーパスの参照、これに対して追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The region of memory starting at this pointer and covering count instances of the pointer’s Pointee type must be initialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタで始まりそしてポインタのPointee型のcount個のインスタンスを対象とするメモリ領域は初期化されなければならず、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The region of memory starting at this pointer and covering count instances of the pointer’s Pointee type must be initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタで始まりそしてポインタのもつPointee型のcount個のインスタンスを対象とするメモリ領域は、初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The region of memory starting at this pointer and covering count instances of the pointer’s Pointee type must be uninitialized or Pointee must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタで始まりそしてポインタのPointee型のcount個のインスタンスを対象とするメモリ領域は未初期化でなければなりません、またPointeeは自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder has the same sign as rhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>余りは、rhsと同じ符号を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder of the allocated region is unbound raw memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>割り当てられた領域の残りは、生のメモリに束縛されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>残りの関係演算子関数は、Comparableに準拠するあらゆる型に対して標準ライブラリによって実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder of this value divided by other using truncating division.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>切り捨て除算を使ってotherで除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The remainder of this value divided by other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherで除算されたこの値の余りを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The removed element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除された要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The representation to use for ancestor classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>先祖クラスに対して使う表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The requested number of elements to store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>依頼された格納される要素数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The requested number of key-value pairs to store.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>要請された数のキー値ペアを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The required methods that are suffixed with ReportingOverflow serve as the customization points for arithmetic operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>必須メソッドでReportingOverflowを末尾に付けられるものは、算術演算に対するカスタマイズポイントとして供されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result begins with the first element of numbers that does not satisfy predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果は、predicateを満たさない、numbersの最初の要素で始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result can be negative only if the collection conforms to the BidirectionalCollection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果は、そのコレクションがBidirectionalCollectionプロトコルに準拠する場合に限り、負であることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result does not include any dynamically allocated or out of line storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果は、あらゆる動的にアロケートされるおよびアウトオブラインのストレージを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result has the same sign as lhs and has a magnitude less than rhs.magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果は、lhsと同じ符号を持ち、rhs.magnitudeより小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is nil if from is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果はnilです、もしfromがnilならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is always exact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果は常に厳密に正確です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result is always positive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果は常に正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of attempting to parse a T from some input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>なんらかの入力からのTを構文解析を試みることの結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of evaluating rhs is the result of the || operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsを評価することの結果は、||演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of evaluating rhs is the result of the &amp;&amp; operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsを評価することの結果は、&amp;&amp;演算の結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of one Unicode decoding step.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ひとつのユニコード復号化処理の結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the given closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたクロージャの結果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the initializer has the same magnitude as magnitudeOf.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザの結果は、magnitudeOfと同じ規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the initializer has the same sign as signOf.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イニシャライザの結果は、signOfと同じ符号を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the operation is false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算の結果は、falseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the operation is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算の結果は、trueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the remainder operator (%) has the same sign as lhs and has a magnitude less than rhs.magnitude.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>剰余演算子（%）の結果は、lhsと同じ符号を持ち、rhs.magnitudeより小さい規模を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of this operation will be the same type as its arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算の結果は、それの引数と同じ型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of this operation will have the non-optional type of the left-hand side’s Wrapped type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算の結果は、左手側のもつWrapped型の非オプショナル型を持つことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting array consists of at most maxSplits + 1 subsequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の配列は、多くともmaxSplits + 1の下位シーケンスから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting buffer references a region of memory that is bound to Element and is count * MemoryLayout&lt;Element&gt;.stride bytes in size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のバッファはあるメモリ領域を参照します、それはElementに束縛されます、そしてcount * MemoryLayout&lt;Element&gt;.strideバイトの大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting collection has the type of argument on the right-hand side.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果となるコレクションは、右手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting collection has the type of the argument on the left-hand side.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果となるコレクションは、左手側の引数の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting flattened array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果として生じる平たくされた配列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting instance may not have the same numeric value as bitPattern—it is only guaranteed to use the same pattern of bits in its binary representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のインスタンスは、bitPatternと同じ数値を持たないかもしれません — それは、同じパターンのビットをそれのバイナリ表現において使うことを保証されるだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting pointer must be within the bounds of the same allocation as this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のポインタは、このポインタと同じアロケーションの範囲内でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting pointer references a region of memory that is bound to Pointee and is count * MemoryLayout&lt;Pointee&gt;.stride bytes in size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のポインタはあるメモリ領域を参照します、それはPointeeに束縛されます、そしてcount * MemoryLayout&lt;Pointee&gt;.strideバイトの大きさです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting quotient must be representable within the bounds of the type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の商は、この型の境界の内に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting subsequence does not include the element at the position end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果となるシーケンスは、位置endでの要素を含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting subsequence includes the element at the position end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果となるシーケンスは、位置endでの要素を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting value must be representable in the same type as the argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の値は、引数と同じ型で表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The resulting value must be representable within the value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果の値は、その値の持つ型の内部に表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The retrieved slice of text is equivalent in each of these cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>取って来たtextのスライスは、それらの場合それぞれにで同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type of sequence(first:next:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sequence(first:next:)の戻り型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type of functions that do not return normally, that is, a type with no values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>普通に戻らない関数の戻り型、すなわち、値なしでの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type of functions that don’t explicitly specify a return type, that is, an empty tuple ().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り型を明示的に指定されない関数の戻り型、すなわち、空のタプル()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return types of the two methods are annotated as nullable, because the methods return nil if the list doesn't contain the given list item or name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのメソッドの戻り型はnullableとして注釈を付けられます、なぜならこれらメソッドはnilを、そのリストが与えられたリスト項目または名前を含まないならば返すからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value, if any, of the body closure parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyクロージャパラメータの戻り値、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return value, if any, of the body closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bodyクロージャの、もしあれば、戻り値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned ArraySlice instance uses the same indices for the same elements as the original array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されたArraySliceインスタンスは、同じ要素に対して元のコレクションと同じインデックスを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned buffer references memory starting at the same base address as this buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるバッファは、このバッファと同じ基底アドレスで始まるメモリを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned index is the position of the element in the buffer one past the last element written.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるインデックスは、書かれた最後の要素を１つすぎたバッファの中の要素の位置です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned instance is memory-managed and unassociated with the value in the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返されるインスタンスは、メモリ管理されて、このポインタによって参照されるメモリの中の値と無関係です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The returned range is not guaranteed to be inside the bounds of collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>返される範囲は、collectionの境界内であると保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The right-hand side of the operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算子の右手側。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The root type for this key path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーパスのためのルート型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rounding rule to use.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この丸め規則を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same state is passed to all invocations of next, so subsequent calls will see any mutations made by previous calls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その同じ状態は、nextのすべてに呼び出しに対して渡されます、なので続いて起こる呼び出しは前の呼び出しによって為される何らかの変化を見ることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second byte is a continuation byte.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のバイトが継続バイトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second call to appending(path:) returns nil because the root type of arrayDescription, Array&lt;Int&gt;, does not match the value type of stringLength, Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のappending(path:)への呼び出しはnilを返します、なぜならarrayDescriptionのルート型、Array&lt;Int&gt;は、stringLengthの値型、Intと合致しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second call to appending(path:) returns nil because the root type of the path parameter, Double, does not match the value type of arrayDescription, String.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のappending(path:)への呼び出しはnilを返します、なぜならpathパラメータのルート型、Doubleは、arrayDescriptionの値型、Stringと合致しないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の例は1をmaxSplitsパラメータに渡します、それで元の文字列は一度だけ分割されて、２つの新しい文字列になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second partition, numbers[p...], is made up of the elements that are greater than 30.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目の区画、numbers[p...]は、30より大きなものである要素から構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second sequence or collection to zip.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>組み合わされる第２のシーケンスまたはコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second value to add.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加算する第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second value to multiply.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>掛け合わされる第２の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second value to swap.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>交換する２つ目の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second version of allValues(in:match:) compiles without error, with the compiler guaranteeing that the escapablePredicate closure doesn’t last beyond the call to withoutActuallyEscaping(_:do:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２番目のバージョンのallValues(in:match:)は、escapablePredicateクロージャがwithoutActuallyEscaping(_:do:)の呼び出しを越えて持ちこたえないことをコンパイラが保証して、エラーなしでコンパイルします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence ends when next returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このシーケンスは、nextがnilを返す時に終わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence must be finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスは有限でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence of elements for the new collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいコレクションのための要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence of elements to turn into an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列になることになる、いくらかの要素からなるシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequences whose contents to encode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それの内容をエンコードするシーケンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence’s iterator is used directly to retrieve the initial value before looping over the rest of the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスのもつイテレータが直に使われて、残りのシーケンスにループする前に初期値をとってきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence’s maximum element if the sequence is not empty; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが空でないならばシーケンスの最大の要素；そうでなければnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence’s maximum element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの最大の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence’s minimum element, according to areInIncreasingOrder.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの最小の要素、areInIncreasingOrderによる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sequence’s minimum element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスの最小の要素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set must not be empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合は空であってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of scalars [:XID_Continue:] closes the set [:ID_Continue:] under NFKC normalization by removing any scalars whose normalized form is not of the form [:ID_Continue:]*.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーの集合[:XID_Continue:]は、集合[:ID_Continue:]に、NFKC正規化の下で、それの正規化形式が形式[:ID_Continue:]*でないあらゆるスカラーを取り除くことによって、閉じています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of scalars [:XID_Start:] closes the set [:ID_Start:] under NFKC normalization by removing any scalars whose normalized form is not of the form [:ID_Start:] [:ID_Continue:]*.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スカラーの集合[:XID_Start:]は、集合[:ID_Start:]に、NFKC正規化の下で、それの正規化形式が形式[:ID_Start:] [:ID_Continue:]*でないあらゆるスカラーを取り除くことによって、閉じています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of scalars for which isGraphemeBase is true is disjoint by definition from the set for which isGraphemeExtend is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してisGraphemeBaseが true であるスカラーの集合は、それに対してisGraphemeExtendが true である集合からの定義と交わりを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of scalars for which isGraphemeExtend is true is disjoint by definition from the set for which isGraphemeBase is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してisGraphemeExtendが true であるスカラーの集合は、それに対してisGraphemeBaseが true である集合からの定義と交わりを持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of scalars for which isCased is true is a superset of those for which changesWhenCaseMapped is true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してisCasedが true であるスカラーの集合は、それに対してchangesWhenCaseMappedが true であるもののスーパーセットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The set of scalars for which this property is true includes mathematical operators and symbols as well as specific Greek and Hebrew letter variants that are categorized as symbols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してこのプロパティが true であるスカラーの集合は、数学用の演算子と記号を含みます、記号として分類される特定のギリシャおよびベブライ文字異字体だけでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The shift is performed using this masked value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シフトは、このマスクされた値を使って実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The shortened form is preferred for ease of reading and writing code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この短縮された形式は、コードの読み書きの容易さのためにより好ましいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign for a negative value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign for a positive value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>正の値に対する符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign of a floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign of the floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign of the new value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値の符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign of this number, expressed as an integer of the same type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この数の符号、同じ型の整数として表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sign to use for the new value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値に対して使うための符号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The significand is frequently also called the mantissa, but significand is the preferred terminology in the IEEE 754 specification, to allay confusion with the use of mantissa for the fractional part of a logarithm.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>仮数（significand）はしばしばmantissaとも呼ばれます、しかし仮数がIEEE 754仕様において推奨される用語です、対数の小数部分に対する仮数（mantissa）の使用との混同を静めるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The significand may include a decimal point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>仮数は、小数点を含んでも構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The significand of y is therefore 1.34375.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>yの仮数はしたがって1.34375です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The significand of the floating-point value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値の仮数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The single Bool type in Swift guarantees that functions, methods, and properties imported from C and Objective-C have a consistent type interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swift保証の単一Bool型で、関数、メソッド、そしてプロパティがCおよびObjective-Cからインポートしたものは、首尾一貫した型インターフェイスを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The single-character string to convert to a Character instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Characterインスタンスへと変換される単一文字文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size, in bytes, of the given value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値の持つ型の、バイトでの、大きさ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The size, stride, and alignment of the Point type are accessible as static properties of MemoryLayout&lt;Point&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Point型のサイズ、ストライド、そしてアライメントは、MemoryLayout&lt;Point&gt;の静的プロパティとしてアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sorting algorithm is not guaranteed to be stable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このソートアルゴリズムは、安定であることを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The square root of the value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の平方根。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library floating-point types—Float, Double, and Float80 where available—all conform to the ExpressibleByFloatLiteral protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリ浮動小数点型—Float、Double、そして利用可能なところではFloat80—は、すべてExpressibleByFloatLiteralプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library implements codecs for the UTF-8, UTF-16, and UTF-32 encoding schemes as the UTF8, UTF16, and UTF32 types, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリは、UTF-8、UTF-16、そしてUTF-32エンコードスキームに対するコーデックをUTF8、UTF16、そしてUTF32型としてそれぞれ実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library integer and floating-point types are all valid types for IntegerLiteralType.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの整数および浮動小数点型は、IntegerLiteralTypeに対する有効な型のすべてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library integer and floating-point types, such as Int and Double, conform to the ExpressibleByIntegerLiteral protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリの整数および浮動小数点型、例えばIntおよびDoubleは、ExpressibleByIntegerLiteralプロトコルに準拠します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library provides an implementation for the not-equal-to operator (!=) for any Equatable type, which calls the custom == function and negates its result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準ライブラリは、不等演算子（!=）のある実装をあらゆるEquatable型に対して実装します、それはあつらえの==関数を呼び出してそれの結果を逆にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The start and end of a subrange must be valid indices of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位範囲の始まりと終わりは、配列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The starting position for iterating members of the set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合のメンバを反復するための開始位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The starting value to use for the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスに使うための開始値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static members nextDay, secondDay, priority, and standard are unique, individual options.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>静的メンバnextDay, secondDay、priority、そしてstandardは特有で、別個のオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static string must store a pointer to either ASCII or UTF-8 code units.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この静的文字列は、ASCIIまたはUTF-8コード単位どちらかへのポインタを格納しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static string must store a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この静的文字列は、単一のユニコードスカラー値を格納しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static type of the subject being reflected.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リフレクションされている主題の静的型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stored Header instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格納されたHeaderインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stored Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格納されるユニコードスカラー値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stream to use for writing the contents of value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueの内容を書き出すために使うことになるストリーム。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stride, in bytes, of the given value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた値の持つ型の、バイトでの、ストライド。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string is automatically converted to UTF8 in a zero-terminated buffer, and a pointer to that buffer is passed to the function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列は、自動的にゼロ終端バッファの中のUTF8に変換されます、そしてそのバッファに対するポインタが関数に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string of characters read from standard input.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>標準入力から読み込まれた一続きの文字。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string passed as description may begin with a plus or minus sign character (+ or -), followed by one or more numeric digits (0-9).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>descriptionとして渡される文字列は、プラスまたはマイナス符号文字（+または-）で始まり、１つ以上の数値のアラビア数字（0-9）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string passed as text can represent a real number in decimal or hexadecimal format or special floating-point values for infinity and NaN (“not a number”).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textとして渡される文字列は、10進または16進数形式における実数、または無限大とNaN（「非数」）に対する特別な浮動小数点値を表せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string passed as text may begin with a plus or minus sign character (+ or -), followed by one or more numeric digits (0-9) or letters (a-z or A-Z).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>textとして渡される文字列は、プラスまたはマイナス符号文字（+または-）で始まり、１つ以上の数値のアラビア数字（0-9）または文字（a-z or A-Z）が続くことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string referenced by the resulting index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果となるインデックスによって参照される文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string to print after all items have been printed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての項目が出力された後に出力する文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string to print.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>出力するメッセージ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string to repeat.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>繰り返すことになる文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string to use for the index conversion.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インデックス変換に使う文字列。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string to use in a named collection (e.g. a string-keyed dictionary).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列を名前付きコレクションで使います（例えば、名前キー付き辞書）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string value of the desired key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>望むキーの文字列値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The string’s value represented as a collection of Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラー値のコレクションとして表される、文字列のもつ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The structure to use for the mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ミラーのために使う構造体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subrange of the array to replace.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>置き換えられることになる配列の下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subrange of the collection to remove.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除することになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subrange of the collection to replace.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>置き換えることになるコレクションの下位範囲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subscript notation is preferred over prefix(through:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>添え字表記法は、prefix(through:)よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subscript notation is preferred over suffix(from:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>添え字表記法は、suffix(from:)よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subscript notation is preferred over prefix(upTo:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>添え字表記法は、prefix(upTo:)よりも好まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The subtraction operator (-) calculates the difference of its two arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>減算演算子（-）は、それの２つの引数の差を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The success value, if the instance represent a success.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>成功値、もしインスタンスが成功を表すならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The successor of an index must be well defined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるインデックスの後に続くものは、よく定義されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sum of the two arguments must be representable in the arguments’ type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数の合計は、引数の持つ型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sum of types that can be used as a Quick Look representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「クイックルック」表現として使われることのできる型の総和。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The synthesized allCases collection provides the cases in order of their declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>合成されたallCasesコレクションは、ケース節をそれらの宣言の順に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The system’s default source of random data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システムの持つ省略時の無作為データのソース。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The tables below list the operators declared in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の表は、Swiftにおいて宣言される演算子を一覧にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textual representation for each item is the same as that obtained by calling String(item).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各項目のテキスト表現は、String(item)を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textual representation for each item is the same as that obtained by calling String(item).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各項目のテキスト表現は、String(item)を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textual representation for each item is the same as that obtained by calling String(reflecting: item).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各項目のテキスト表現は、String(reflecting: item)を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The textual representation for each item is the same as that obtained by calling String(reflecting: item).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各項目のテキスト表現は、String(reflecting: item)を呼び出すことで得られるものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The three cases of ComparisonResult—ComparisonResult.orderedAscending, ComparisonResult.orderedSame, and ComparisonResult.orderedDescending—are an example of a finite set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ComparisonResultの３つのケース節 —ComparisonResult.orderedAscending、ComparisonResult.orderedSame、そしてComparisonResult.orderedDescending— はある有限な集合の一例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The three states are captured by different combinations of the two variables.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>３つの状態は、２つの変数の異なる組み合わせによって捕えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The titlecase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのタイトルケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The total number of elements that the array can contain without allocating new storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その配列が新しいストレージを割り当てることなく含むことができる要素の総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The total number of elements that the set can contain without allocating new storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その集合が新しいストレージを割り当てることなく含むことができる要素の総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The total number of key-value pairs that the dictionary can contain without allocating new storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その辞書が新しいストレージをアロケートすることなく含むことが可能なキー値ペアの総数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The trailing surrogate code unit of x when encoded in UTF-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-16でエンコードされる時のxの後続サロゲートペア。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two arguments must have the same Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの引数は、同じElement型を持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two arguments must not alias each other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値は、互いのエイリアスであってはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two loops in the following example produce the same output:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下の例における２つのループは、同じ出力を生み出します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two must coexist, so it was renamed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この２つは共存しなければなりません、それでそれは改名されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The two variables have an unused combination—it’s possible to set the user to nil and sessionExpired to true, even though that doesn’t have a corresponding state.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの変数は使われない組み合わせを持ちます — userをnilにそしてsessionExpiredをtrueに設定することは可能です、たとえそれが対応する状態を持たないとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type T must be the same size and be layout compatible with the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型 Tは、ポインタのもつPointee型と同じサイズで、互換性のあるレイアウトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type T must have the same size and be layout compatible with the pointer’s Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型 Tは、ポインタのもつElement型と同じサイズで、互換性のあるレイアウトでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type T that the memory has already been bound to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリがすでに束縛されているところの型T。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type T to be stored must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>格納されることになる型Tは、自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type T to bind the memory to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型Tへとメモリを束縛することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type T to which x is cast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型T、それへとxがキャストされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type aliased by BooleanLiteralType must conform to the ExpressibleByBooleanLiteral protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BooleanLiteralTypeによってエイリアス（別名）を付けられる型は、ExpressibleByBooleanLiteralプロトコルに準拠しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type doesn't meet the criteria listed in the previous section.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その型が以前の節においてリストされる基準に合わない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type each segment of a string literal containing interpolations should be appended to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>加えられるべき補間を含んでいる文字列リテラルの各文節の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type for which the expression describes a range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してこの式が範囲を記述する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of an unbounded range operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限範囲演算子の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of data that a pointer can access is the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタがアクセス可能なデータの型は、ポインタのもつPointee型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of data that a pointer can access is the pointer’s Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタがアクセス可能なデータの型は、ポインタのもつPointee型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of element returned by next().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>next()によって返される要素のもつ型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of element traversed by the iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイテレータによって辿っていかれる要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of scalars in the vector space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このベクタースペースの中のスカラーそれらの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the elements of an array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the elements to bind the buffer’s memory to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バッファのもつメモリをそれへと束縛する幾らかの要素の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the instance to create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>作成されることになるインスタンスの型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of value to decode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型の値にデコードする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type that allows iteration over an array’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の持つ要素のすべてにわたる反復を許可する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type that represents the indices that are valid for subscripting an array, in ascending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>昇順での、配列の添え字として有効なインデックスを表す型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type that should be used for literal segments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リテラル文節に対して使われるべき型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to bind this buffer’s memory to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファのもつメモリをそれへと束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to bind this memory to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメモリに束縛することになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to cast x to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xをこれにキャストすることになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to decode as.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型としてデコードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to temporarily bind the memory referenced by this buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファによって参照されるメモリを一時的に束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to temporarily bind the memory referenced by this pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタによって参照されるメモリを一時的に束縛する型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type to use for the newly constructed instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新規に構築されるインスタンスのために使うことになる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type used to represent substructure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下位構造体を表すために使われる型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The typed buffer contains self.count / MemoryLayout&lt;T&gt;.stride instances of T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tのself.count / MemoryLayout&lt;T&gt;.strideインスタンスを含んでいる型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The typed buffer references self.count / MemoryLayout&lt;T&gt;.stride instances of T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付バッファは、Tのself.count / MemoryLayout&lt;T&gt;.strideインスタンスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The typed buffer to convert to a raw buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいバッファへと変換されることになる型付バッファ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The typed pointer to convert.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>変換されることになる型付ポインタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of shortForm and longForm in the following code sample are the same:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>以下のコード例におけるshortFormとlongFormの型は、同じです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of the two underlying indices must be identical.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの基礎をなすインデックスの型は同一でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unary minus operator (prefix -) calculates the negation of its operand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単項マイナス演算子（前置-）は、それの演算数の否定を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unbounded range operator (...) is valid only within a collection’s subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限範囲演算子（...）は、あるコレクションの添字の内でのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underlying collection of the slice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスライスの基礎をなすコレクション。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underlying error which caused this error, if any.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このエラーの元となった基礎をなすエラー、もしあれば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underlying iterator whose elements are being filtered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基礎をなすイテレータ、それの要素がフィルタされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underlying iterator’s sequence may be infinite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基礎をなすイテレータのもつシーケンスは、無限であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unit in the last place of 1.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>1.0の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The unit in the last place of this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値の最終桁単位。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The universal hash function used by Set and Dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetとDictionaryによって使われる普遍的なハッシュ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The upper and lower bounds of bounds must be valid indices of the string and not equal to the string’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bounds範囲の上方および下方の境界はこの文字列の有効なインデックスでなければなりません、そしてこの文字列の持つ末尾インデックスと等しくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The upper and lower bounds of bounds must be valid indices of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>boundsの上方および下方の境界は、文字列の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The upper and lower bounds of the bounds range must be valid indices of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bounds範囲の上方および下方の境界は、このコレクションの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The upper and lower bounds of the range must be in the range 0...count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この範囲の上方および下方の境界は、範囲0...countの中でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The upper bound for the randomly generated value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この無作為に生成される値に対する上方の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The upper bound for the range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲の上側の境界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The uppercase mapping of the scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このスカラーのアッパーケースマッピング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid indices for subscripting the vector.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ベクターに添え乳指定するための有効なインデックスそれら。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value associated with key if key is in the dictionary; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyと結び付けられた値、keyが辞書の中にあるならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value associated with key in the dictionary; otherwise, defaultValue`.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyと辞書の中で結びつけられる値；そうでなければdefaultValue。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value associated with key may be a null value as appropriate for the data format.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>keyと結び付けられる値は、null値かもしれません、データ形式として適切であるので。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value associated with the given key may be a null value as appropriate for the data format.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられたキーと結び付けられる値は、そのデータ形式に適切であるnull値であるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value for which to find the dynamic type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対して動的型を見つける値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of maxLength must be greater than or equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>maxLengthの値は、ゼロより大きいか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of other is represented exactly by the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherの値は、新しいインスタンスによって正確に表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of other is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>otherの値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of value is rounded to a representable value, if necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>valueの値は、必要ならば、表現可能な値へと丸められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of x converted to type U.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型Uに変換されたxの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of significandWidth is always -1 or between zero and significandBitCount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>significandWidthの値は、常に-1、もしくはゼロとsignificandBitCountの間です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of every element in this collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このコレクションのすべての要素の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of the member parameter if it was a member of the set; otherwise, nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>memberパラメータの値、それが集合のメンバであったならば；そうでなければ、nil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of the key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーの値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of the operand is copied bitwise into a temporary nonowning buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>演算数の値は、コピーされます。一時的な非所有バッファにビット単位でコピーされるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of this property is nil for scalars that do not represent a number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティの値は、ある数を表さないスカラーに対して nil です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of this string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文字列の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value passed as bitPattern is interpreted in the binary interchange format defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bitPatternとして渡される値は、IEEE 754仕様で定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceとして渡される値は、このコレクションの境界を越えてiを補ってはなりません、limitとして渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value passed as distance must not offset i beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>distanceとして渡される値は、このコレクションの境界を越えてiを補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value passed as n must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nとして渡される値は、このコレクションの境界を越えてiを補ってはなりません、limitとして渡されるインデックスがそれら境界を越えて補うのを防止するのでない限りは。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value passed as n must not offset i beyond the bounds of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nとして渡される値は、このコレクションの境界を越えてiを補ってはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value passed as source must be representable in this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>sourceとして渡される値は、この型において表現可能でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value that was removed, or nil if the key was not present in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>削除された値、またはキーがこの辞書の中に存在しなかったならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value that was replaced, or nil if a new key-value pair was added.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>取って代わられた値、または新しいキー値ペアが加えられたならばnil。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to add to this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値に加える値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to calculate the distance to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それへの隔たりを計算される値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to compare with this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値と比較するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to convert to a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列へ変換する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to create.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>作成されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to divide lhs by.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値でlhsを除算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to divide this value by.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を除算するための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to divide.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>除算することになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to encode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコードする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to multiply by this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値と掛け合わせられることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to multiply this value by.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値に掛ける値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to negate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負にする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to output to the target stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>targetストリームに出力することになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to shift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シフトする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to store as raw bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のメモリとして格納されることになる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to subtract from lhs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>lhsから減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to subtract from this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値から減じる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to use as the initial accumulating value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>初めから蓄積される値として使われる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to use for the new instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいインスタンスのために使う値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to use in an integer-indexed collection (e.g. an int-keyed dictionary).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数インデックスのコレクション（例えば、intキー付き辞書）において使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value to use when dividing this value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を除算するときに使うための値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value type for this key path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキーパスのための値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value type of a dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルの値型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value types in the table below have the same functionality as their corresponding reference types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>下の表の値型は、それらの対応する参照型と同じ機能性を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value wrapped by this instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスによってラップされる値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value you pass as end is not guaranteed to be included in the sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがendとして渡す値は、シーケンスに含まれることを保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The values passed as exponentBitPattern and significandBitPattern are interpreted in the binary interchange format defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>exponentBitPatternとsignificandBitPatternに渡される値は、IEEE 754 specificationで定義されるバイナリ交換フォーマットにおいて解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The view to use for the index conversion.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インデックス変換に使うビュー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The way these scalar values are grouped is defined by a canonical, localized, or otherwise tailored Unicode segmentation algorithm.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのスカラー値が一群にされる方法は、ある正準の、ローカライズされた、ないしは別の方法で仕立てられたユニコード分節アルゴリズムによって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The width of x when encoded in UTF-16, either 1 or 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-16でエンコードされる時のxの幅、1または2のどちらか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wrapped value of this instance, unwrapped without checking whether the instance is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスのラップされた値、そのインスタンスがnilかどうか確認せずにアンラップされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The zero value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロ値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The zero width joiner is also used to construct complex emoji from sequences of base emoji characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロ幅接合子はまた、複合絵文字を一連の基礎絵文字文字から組み立てるために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The “past the end” index of the resulting subsequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果のシーケンスの「終わりを過ぎた」インデックス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The “past the end” position for the set—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合に対する「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The “past the end” position—that is, the position one greater than the last valid subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「終わりを過ぎた」位置—すなわち、最後の有効な添え字引数より１つ大きい位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are some edge cases to be aware of:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>知られているいくつかの境界事例があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two scalars for which this property is true:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それに対してこのプロパティが true である２つのスカラーがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no notion of identity for structs, enums, functions, or tuples.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体、列挙、関数、またはタプルに対して識別の観念はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There may be smaller positive numbers, but they are subnormal, meaning that they are represented with less precision than normal numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>より小さい正の数があるでしょう、しかしそれらはサブノーマルであり、それらがノーマル数よりより少ない精密さで表現されることを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's no guarantee that the random guess will be correct, so important actions like paying bills—scheduled for after you win the lottery—might never happen.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ランダムな推測が正しくなる保証はありません、それで請求書を払うような — あなたが宝くじに当たった後に予定される — 重要な行為は決して起こらないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, x.binade is equal to 1.0 * 2**4, or 16.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それゆえに、x.binadeは1.0 * 2**4、または16.0と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, options is emptied and the intersection between .express and options is returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、optionsは空にされて.expressとoptionsの間の交叉が返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, a ClosedRange instance cannot represent an empty range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それゆえに、ClosedRangeインスタンスは空の範囲として表すことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, the class you migrate can't have any Objective-C subclasses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、あなたが移行するクラスは、いかなるObjective-Cサブクラスも持つことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, the first in any sequence of mutating operations may cost O(n) time and space.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それゆえに、何らかの一連の変化を伴う演算において最初に、O(n)時間と空間を要するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, the fundamental difference between random-access and bidirectional collections is that operations that depend on index movement or distance measurement offer significantly improved efficiency.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それゆえに、無作為アクセスと二方向性のコレクションの根本的な違いは、インデックス移動や間隔測定に依存する演算が、著しく改善される効率を提示することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Therefore, you must only call this function from mutating methods with appropriate thread synchronization.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、あなたはこの関数を変更メソッドから適切なスレッド同期で呼ぶだけにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These code points are combined by Unicode’s boundary algorithms into extended grapheme clusters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのコード点は、ユニコードの境界アルゴリズムによって拡張書記素クラスタへと組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These collections can store zero, one, or many of the same element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのコレクションは、ゼロ、１つ、または多くの同じ要素を格納できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのカウンタはインデックスとして使われることが、ゼロ基盤の、整数インデックスでのコレクション、例えばArrayそしてContiguousArrayなどのインスタンスにおいてのみ可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These elements are computed lazily, each time they’re read, by calling the transform function on a base element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの要素は、それらが読み出されるたびに、基盤要素上で変換関数を呼び出すことによって遅延計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These elements match those accessed through indexed NSString APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの要素は、インデックス付きNSString APIを通してアクセスされるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These initializer overloads are available for any conforming type with a RawValue that is a Decodable standard library type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのイニシャライザオーバーロードは、Decodable標準ライブラリ型であるRawValueを持つどんな準拠する型でも利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These initializers create an integer with the bit pattern of the memory address of a pointer or class instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのイニシャライザは、あるポインタまたはクラスインスタンスのメモリアドレスのビットパターンで整数を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These initializers result in nil if the value passed can't be represented without any loss of precision.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのイニシャライザは、渡された値が何ら精度の損失なしに表現できないならばnilという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These letters have a case but do not change when they are mapped to any of the other cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの文字はあるケースを持ちます、しかしそれら型のケースのどれかにマップされる時に変化しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These letters start with "A" if uppercase is true; otherwise, with "a".</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの文字は"A"で始まります、もしuppercaseがtrueならば、；そうでなければ、"a"で始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods all return typed pointers for further typed access to the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドは、この後で型付アクセスをこのメモリにするために型付ポインタを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods return the result of an operation, and a flag indicating whether the operation overflowed the bounds of the type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのメソッドは演算の結果、そしてその演算がその型の境界をオーバーフローしたかどうかを示すフラグを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These overloads are available for any conforming type with a RawValue that is an Encodable standard library type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのイニシャライザオーバーロードは、Encodable標準ライブラリ型であるRawValueを持つどんな準拠する型でも利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These pointers are valid only for the duration of the call to body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのポインタは、ただbodyへの呼び出しの間にのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These properties are the same ones used to test for equality in the == operator function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらプロパティは、==演算子関数において同等性についてテストするために使われるのと同じものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These scalar values are combined by Unicode’s boundary algorithms into extended grapheme clusters, represented by the Swift Character type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのスカラー値は、ユニコード境界アルゴリズムによって拡張書記素クラスタへと、SwiftのもつCharacter型によって表されるものへと、組み合わされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These scalars are often the components of ideographic description sequences, as defined by the isIDSBinaryOperator and isIDSTrinaryOperator properties.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのスカラーは、しばしば表意文字記述シーケンスの構成要素です、isIDSBinaryOperatorとisIDSTrinaryOperatorプロパティによって定義されるように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These two operations impose a strict total order on the values of a type, in which exactly one of the following must be true for any two values a and b:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これら２つの演算子は、ある型の値に全順序を課します、そこにおいて任意の２つの値aとbに対して、厳密に以下のうちの１つが真でなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These types and protocols drop their NS prefix, with the following exceptions:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これら型およびプロトコルは、それらのNS接頭辞を外します、以下の例外を除いては：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They have no visible glyph or advance width in and of themselves, although they may affect the display, positioning, or adornment of adjacent or surrounding characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは、可視の字体または送り幅をそれら自体持ちません、とはいえそれらは、隣接または囲んでいる文字の表示、位置決定、もしくは装飾に影響を及ぼすかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They may be called once, many times, or never.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらが呼び出されるのは、一度だけ、何度も、または決してないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They otherwise support virtually all features of methods: they can have any number of parameters, can specify labels for any or all of them, can provide default values for parameters, can have variadic parameters, and can have parameters with generic types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは他の点ではメソッドの全ての機能を事実上サポートします：それらはどんな数のパラメータでも持つことができます、それらの全てまたはどれかに対してラベルを指定できます、パラメータに対して省略時の値を提供できます、可変長パラメータを持つことができます、そして総称体型を持つパラメータを持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They're the only logical cases for performing an ordered comparison during tasks like sorting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらは、ソートのようなタスクの間に順序あり比較を実行するための論理的な場合にのみのものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This key-based subscript returns the value for the given key if the key is found in the dictionary, or nil if the key is not found.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このキー基盤の添え字は、そのキーが辞書において見つけられるならば指定されたキーに対する値を、またはキーが見つからないならばnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This approach defines an App class with a nested State enumeration that includes only the specific states you need:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この取り組みは、Appクラスを、あなたが必要とする特定の状態のみを含むState列挙とともに定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This assignment to the nextStop constant calls this string literal initializer behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nextStop定数への代入はこの文字列リテラルイニシャライザを舞台裏で呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This associated type appears as a requirement in the Sequence protocol, but it is restated here with stricter constraints.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関連型は、Sequenceプロトコルの中のある要件として現れます、しかしここでより厳格な制約で言い直されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This avoids over-allocation, but can result in insertion not having amortized constant-time performance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは過度のアロケーションを防ぎます、しかし挿入においてならし定数時間性能を持たない結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This buffer can then be shared by different copies of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファは、それからある文字列の異なるコピーによって共有されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This buffer pointer’s baseAddress must be nil or a pointer to a memory block previously returned by a Swift allocation method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファポインタのbaseAddressは、nilまたは以前にSwiftアロケーションメソッドによって返されたメモリブロックへのポインタでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This buffer pointer’s count must be equal to the originally allocated size of the memory block.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファポインタのもつcountは、もともとアロケートされたメモリブロックのサイズと等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This buffer pointer’s byte count must be equal to the originally allocated size of the memory block.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このバッファポインタのもつcountバイトは、もともとアロケートされたメモリブロックのサイズと等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This capability can be especially important when the order of elements in the literal is significant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この能力は、そのリテラル中の要素の順序が意味を持つ場合に特に重要となりえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This capability, as well as the ability to store values in a set or use them as keys in a dictionary, are governed by two related standard library protocols, Equatable and Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これができる力、それだけでなくいくらかの値を集合の中に格納するまたはそれらを辞書においてキーとして使う能力は、２つの関連する標準ライブラリプロトコル、EquatableとHashableによって管理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This case is the default when initializing a Mirror instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この場合が、Mirrorインスタンスを初期化する時の省略時の方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This characteristic facilitates compatibility with C, which allows any value to be stored in an enumeration, including values used internally but not exposed in headers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この特徴は、Cとの互換性を容易にします、それはどんな値も列挙に格納されることを許します、内部的に使われるがヘッダに暴露されない値も含めて。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This contrasts with Array, which can store its elements in either a contiguous region of memory or an NSArray instance if its Element type is a class or @objc protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはArrayとは対照的です、それはそれの要素をメモリの隣接領域かもしくは、それのElement型がクラスまたは@objcプロトコルならばNSArrayインスタンスのどちらかに格納することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This documentation contains preliminary information about an API or technology in development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この文書は、開発でのテクノロジーまたはAPIのための事前の情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example allocates uninitialized raw memory with space for four instances of Point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、未初期化の生のメモリをPointの４つのインスタンス用の空間でアロケートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example appends the elements of a Range&lt;Int&gt; instance to an array of integers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはあるRange&lt;Int&gt;インスタンスに属する複数要素を整数からなるある配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example appends the elements of a Range&lt;Int&gt; instance to an array of integers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>例えば、あなたはあるRange&lt;Int&gt;インスタンスに属する複数要素を整数からなる配列に追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example checks to see whether a favorite actor is in an array storing a movie’s cast.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、映画出演者を格納する配列の中にお気に入りの俳優がいるかどうか確認するために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example checks to see whether a particular insect is in an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある特定の昆虫が配列の中にあるかどうか見るために調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates a ClosedRange&lt;Character&gt; from “a” up to, and including, “z”.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、「a」から「z」までの、そしてそれを含むClosedRange&lt;Character&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates a PartialRangeFrom&lt;Double&gt; instance that includes any value greater than or equal to 5.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、PartialRangeFrom&lt;Double&gt;インスタンスで5.0より大きいか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates a PartialRangeThrough&lt;Double&gt; instance that includes any value less than or equal to 5.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、PartialRangeThrough&lt;Double&gt;インスタンスで5.0より少ないか等しい何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates a PartialRangeUpTo&lt;Double&gt; instance that includes any value less than 5.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、PartialRangeUpTo&lt;Double&gt;インスタンスで5.0より少ない何らかの値を含むものを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates a Range&lt;Double&gt; from zero up to, but not including, 5.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ゼロから5.0までの、しかしそれを含めないRange&lt;Double&gt;を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates a key path from Array&lt;Int&gt; to String, and then tries appending compatible and incompatible key paths:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、Array&lt;Int&gt;からStringへのキーパスを作成して、それから互換および非互換のキーパスをくっつけることを試みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates an instance of ShippingOptions with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ShippingOptionsのインスタンスを最も高い要素を越える生の値で、全ての宣言済み静的メンバを実質的に含むあるビットマスクで、作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates key paths from Array&lt;Int&gt; to String and from String to Int, and then tries appending each to the other:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、Array&lt;Int&gt;からStringまでの、そしてStringからIntまでのキーパスを作成して、それからそれぞれを他とくっつけることを試みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates three new values in the range 1...100.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、３つの新しい値を範囲1...100において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates three new values in the range 1..&lt;100.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、３つの新しい値を範囲1..&lt;100において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates three new values in the range 10.0 ... 20.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、３つの新しい値を範囲10.0 ... 20.0において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example creates three new values in the range 10.0 ..&lt; 20.0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、３つの新しい値を範囲10.0 ..&lt; 20.0において作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example declares a constant with three currently allowed moves.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は３つの現在許される動きを持つある定数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example declares the numberOfCookies constant, using an integer literal to express its value:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、numberOfCookies定数を宣言します、整数リテラルをそれの値を表すために使っています：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example defines a rawData string with some unstructured data, and then uses the string’s prefix(while:) method to create a substring of the numeric prefix:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、rawData文字列を何らかの構造化されていないデータで定義します、それからその文字列のもつprefix(while:)メソッドを使うことで数字接頭辞からなる下位文字列を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example defines an IntegerRef type with an @objc method named getIntegerValue().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はIntegerRef型を、@objcメソッドでgetIntegerValue()と名付けられるものと共に定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example defines some simple macros in a C header:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、いくつかの単純なマクロをCヘッダにおいて定義します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example demonstrates getting a slice from a buffer of strings, finding the index of one of the strings in the slice, and then using that index in the original buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はいくらかの文字列からなるバッファからスライスを取得する実演をします、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元のバッファにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は文字列からなる配列のあるスライスの取得を実演します、スライスの中の文字列の１つのインデックスを見つけて、それからそのインデックスを元の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example demonstrates that the characters view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある文字列のcharactersビューが、そのビューのインデックスであろうとビューそれ自体が反復されていようと同じ文字を同じ順序で返すのを実演します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は文字列「Swift」の文字を列挙します、そして各文字をその文字列でのそれの場所とともに出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example finds the index of the last name that begins with the letter A:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、文字Aで始まる、最後の名前のインデックスを見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example finds the largest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、身長計測の配列の中で最も大きな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example finds the smallest value in an array of height measurements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、身長計測の配列の中で最も小さな値を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example first finds the position of a space (UTF-16 code point 32) in a string’s utf16 view and then uses this method to find the same position in the string’s unicodeScalars view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある空白（UTF-16コード点32）の位置を文字列のもつutf16ビューの中で見つけて、それからこのメソッドを使って文字列のもつunicodeScalarsビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example first finds the position of a space (UTF-8 code point 32) in a string’s utf8 view and then uses this method find the same position in the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある空白（UTF-8コード点32）の位置を文字列のもつutf8ビューの中で見つけて、それからこのメソッドを使って文字列における同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example first finds the position of the character "é" and then uses this method find the same position in the string’s utf16 view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、最初に文字"é"の位置を見つけて、それからこのメソッドを使って文字列のもつutf16ビューにおける同じ位置を捜します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example first finds the position of the character "é", and then uses this method find the same position in the string’s utf8 view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、最初に文字"é"の位置を見つけて、それからこのメソッドを使って文字列のもつutf8ビューにおける同じ位置を見つけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある集合のインデックスと要素のすべてにわたって反復します、５つまたはより少ない文字を持つ名前のインデックスから成るリストを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example passes intPointer, a pointer to an Int value, to print(address:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はintPointer、Int値へのポインタをprint(address:)に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example passes rawPointer as the initial parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、rawPointerを最初のパラメータとして渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example passes intPointer, a mutable pointer to an Int value, to print(address:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はintPointer、Int値への可変ポインタをprint(address:)に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example passes rawPointer as the initial parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、rawPointerを最初のパラメータとして渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example performs an arithmetic operation on an optional integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、算術演算をあるオプショナル整数上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example performs an arithmetic operation with an optional result on an optional integer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、オプショナル結果をもつ算術演算をあるオプショナル整数上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example picks a name at random from an array:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある名前を無作為に配列から選出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example prints the characters of a string in reverse order:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある文字列に属する文字を逆順で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example removes all the odd values from an array of numbers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、数値からなる配列から全ての奇数値を除去します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example removes all the vowels from a string:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、全ての母音を文字列から除去します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example removes the element "sugar" from a set of ingredients.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、要素"sugar"を一揃いの材料から削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example removes the hyphen from the middle of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある文字列の真ん中からハイフンを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example removes the middle element from an array of measurements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、測定結果からなる配列から真ん中の要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example removes three elements from the middle of an array of measurements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、測定結果からなる配列の真ん中から３つの要素を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、streetsSliceをスライスの中の文字列の１つについて検索して、それからそのインデックスを元々の配列において使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how a CollectionOfTwo instance can be created holding the values of a point, and then iterated over using a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、どのようにCollectionOfTwoインスタンスがある地点の値を保持して作成されるか、そしてそれからfor-inループを使って全体にわたって繰り返されるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、どのようにいくつかの[Int]インスタンスからなる配列が別の[Int]インスタンスをセパレータとしてつなぎ合わされるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how an iterator can be used explicitly to emulate a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、イテレータが明示的に使われてfor-inループの機能を真似る方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to build a dictionary of letter frequencies of a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある文字列の文字頻度の辞書を作り上げる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to catch errors from a particular error domain and bring attention to unhandled errors from other error domains:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、特定のエラー領域からのエラーをキャッチする、そして他のエラー領域からの処理できないエラーへの注意をもたらす方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to choose the current or new values for any duplicate keys:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、あらゆる重複キーに対して現在および新規の値を選択する方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to find the sum of an array of numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、どのように数からなる配列の合計を見出すかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to throw errors using that custom error type in Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、そのあつらえのエラー型をSwiftで使って、エラーをスローする方法を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、max(by:)メソッドを辞書上で使って、最も高い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、min(by:)メソッドを辞書上で使って、最も低い値を持つキー値ペアを見つける方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how you can check an array for an expense greater than $100.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、どのようにあなたが$100より大きい出費についてある配列を調べるかを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows how you can modify one of the names in an array of students.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例が示すのは、どうやってあなたが学生らの配列の中の名前の１つを修正できるかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows several extending conversions of a negative value—note that negative values are sign-extended even when converting to an unsigned type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある負の値のいくつかの拡張変換を示します — 符号なし型へ変換する時でさえ、負の値が符号拡張されることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows the different ways that you can call a function that takes a constant raw pointer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、あなたが定数の生のポインタを取るある関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows the different ways that you can call a function that takes a mutable pointer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、あなたが可変ポインタを取る関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows the different ways that you can call a function that takes a mutable raw pointer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、あなたが変数の生のポインタを取るある関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows the different ways that you can call the a function that takes a constant pointer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、あなたが定数ポインタを取る関数を呼び出し可能な異なる方法を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example shows two overlapping ranges:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は２つの重なった範囲を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example tests whether one countable range begins with the elements of another countable range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある可付番範囲が別の可付番範囲の要素で始まるかどうかテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example tests whether one countable range shares the same elements as another countable range and an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、ある可付番範囲が同じ要素を別の可付番範囲とそしてある配列と共有するかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses implicit bridging to pass a pointer to the elements of numbers when calling print(address:as:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、print(address:as:)を呼び出すとき、暗黙的ブリッジを使ってポインタをnumbersの要素へと渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses implicit bridging to pass a pointer to the elements of numbers when calling printInt(atAddress:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、暗黙的ブリッジを使ってポインタをnumbersの要素へと、printInt(atAddress:)を呼び出す時に渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the contains(_:) method to check whether next-day shipping is in the availableOptions instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、contains(_:)メソッドを使って翌日出荷がavailableOptionsインスタンスの中のあるかどうか確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the contains(_:) method to test whether an integer is a member of a set of prime numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、contains(_:)メソッドを使ってある整数がある一揃いの素数のメンバであるかどうかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the intersection(_:) method to limit the available shipping options to what can be used with a PO Box destination.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、intersection(_:)メソッドを使って、利用可能な出荷オプションを私書箱宛先で使われるものに制限します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the last(where:) method to find the last negative number in an array of integers:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、last(where:)メソッドを使って、整数の配列において最後の負数を見つけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はlexicographicallyPrecedesメソッドを使って、どの整数配列がある語彙筆記的順序において最初に来るかをテストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the negate() method to negate the value of the variable x:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例はnegate()メソッドを使って、変数xの値を負にします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the union(_:) method to add two more shipping options to the default set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、union(_:)メソッドを使って２つのさらなる出荷オプションを省略時のセットに加えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the conditional downcast operator (as?) to conditionally cast the s constant declared above to an instance of Swift’s String type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、条件ダウンキャスト演算子（as?）を使って、上で定義されるs定数をSwiftのString型へ条件付きでキャストします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example uses the subscript with a message to use in case an HTTP response code isn’t recognized:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この例は、添え字を、HTTP応答コードが識別されない場合に使うあるメッセージとともに使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この指数成長戦略は、ある要素を加えることは、多くの追加操作の遂行を平均すると、定数時間に起こることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file is an Objective-C header that declares the Swift interfaces in your target, and you can think of it as an umbrella header for your Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このファイルは、Swiftインターフェイスをあなたのターゲットにおいて宣言するObjective-Cヘッダです、そしてあなたはそれをあなたのSwiftコードのためのアンブレラファイルとみなせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function can be used to replace many cases that were previously handled using C-style for loops.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、C形式のforループを使用して前もって取り扱われたケースの多くを置き換えるのに使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function can be used to replace many instances of AnyIterator that wrap a closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、クロージャをラップするAnyIteratorの多くのインスタンスを置き換えるのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function does not modify object; the use of inout is an implementation artifact.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数はobjectを修正しません；inoutの使用は、技巧上の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function is suitable for exploring the structure of a mirror in a REPL or playground, but is not intended to be efficient.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、REPLまたはプレイグラウンドにおいてミラーの構造体を探索するのに適します、しかし効率を考慮されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function is the only requirement of the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、Comparableプロトコルのただ１つの要件です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function throws an error if any values are invalid for the given encoder’s format.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、与えられたエンコーダの形式に対して何らかの値が無効であるならばエラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function trades safety for performance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は性能と安全を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function uses the least specific nonmatching property of the date to determine the result of the comparison.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数は、比較の結果を判定するのに、最小量となる特定の不一致日付プロパティを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function’s effects vary depending on the build flag used:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数の効果は使用されるビルドフラグに依存して多様に異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This header may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このヘッダを計算するのは、些細なことではありません；通常良い考えであるのは、この情報をインスタンスが作成されるときに「ヘッダ」領域に格納することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes characters used both as letters and commonly in mathematical formulas.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、表音文字としてそして一般に数学公式においての両方で使われる表意文字を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This includes some scalars that are not typically considered to be emoji:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、概してemojiであると考えられない幾つかのスカラーを含みます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This index must be a valid index of String(unicodeScalars).utf16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスはString(unicodeScalars).utf16の有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This index must be a valid index of at least one view of characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスは、charactersの少なくとも１つのビューで有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This index must be a valid index of at least one view of the string shared by unicodeScalars.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスは、unicodeScalarsによって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This index must be a valid index of at least one view of the string shared by utf16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスは、utf16によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This index must be a valid index of at least one view of the string shared by utf8.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインデックスは、utf8によって共有される文字列の少なくとも１つのビューの有効なインデックスでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この情報は変更される場合があり、この文書に沿って実装されるソフトウェアは最終的なオペレーティングシステム・ソフトウェアでテストされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer always succeeds, even if the value passed as rawValue exceeds the static properties declared as part of the option set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは常に成功します、rawValueとして渡される値がオプションセットの部分として宣言される静的プロパティを上回るとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer can also be used to restore set methods after performing sequence operations such as filter(_:) or map(_:) on a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザはまた、シーケンス演算、例えばfilter(_:)やmap(_:)などをある集合上で実行した後で集合に戻す手法として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer creates a new pointer to the same address as other and performs no allocation or copying.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、新しいポインタをotherと同じアドレスに作成して、割り当てやコピーを実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer creates a new pointer to the same address as other and performs no allocation or copying.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、新しいポインタをotherと同じアドレスに作成して、割り当てやコピーを実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer creates an option set with a raw value of zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、０個の生の値を持つオプションセットを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer does not perform any range or overflow checking.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、全く範囲またはオーバーフロー検査を実行しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer does not try to repair ill-formed UTF-8 code unit sequences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、誤形式UTF-8コード単位シーケンスの修復を試みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer implements the scaleB operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、IEEE 754仕様で定義されるscaleB演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer implements the IEEE 754 copysign operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、IEEE 754 copysign演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer is case sensitive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、大文字小文字を区別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは空の配列リテラルで初期化するのと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer is equivalent to the following calculation, where ** is exponentiation, computed as if by a single, correctly rounded, floating-point operation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは次の計算に相当し、そこで**は乗算で、まるで単精度の、正しく丸められた、浮動小数点演算のように計算されます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer is failable because although every case of the Counter type has a corresponding Int value, there are many Int values that don’t correspond to a case of Counter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは失敗可能です、なぜならすべてのCounter型のケース節は対応するInt値を持つけれども、Counterのケース節に対応しない多くのInt値が存在するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザは、デコーダからの読み出しが失敗するならば、または読み込んだデータが不正またはそうでなくとも無効ならば、エラーをスローします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえのdebugDescriptionプロパティをCustomDebugStringConvertibleに準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザはどんな型とでも働きます、そしてあつらえのdescriptionプロパティをCustomStringConvertibleに準拠する型に対して使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a demonstration only—if you need the Unicode scalar representation of a string, use its unicodeScalars view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは単に１つの実演です—あなたがある文字列のユニコードスカラー表現を必要とするならば、それのunicodeScalarsビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is almost certainly not what you want.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはほとんど疑いなくあなたが望むことではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is distinct from the Cocoa pattern—described above—that uses a trailing NSError parameter to indicate recoverable errors that you plan for during development.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、— 上で記述される — Cocoaパターンとは別個のものです、それは後に続くNSErrorパラメータを使って、あなたが開発の間に対策を立てる解決可能なエラーを指し示します、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is equivalent to initializing with an empty array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは空の配列リテラルで初期化するのに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is equivalent to the following conditional in Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、Swiftでの以下の条件文に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is equivalent to the inverse of a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはある集合の逆と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is equivalent to using the @available attribute on a declaration in Swift:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、@availableをSwiftにおける宣言上で使うことに相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is identical to init(cString: UnsafePointer&lt;CChar&gt; but operates on an unsigned sequence of bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、init(cString: UnsafePointer&lt;CChar&gt;と同一です、しかし符号なしバイトシーケンス上で作動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of String.count called on each literal segment.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはString.reserveCapacity(_:)に渡されるよう意図されます；それは各リテラル文節上で呼び出されるString.countの合計より少しばかり大きいか小さいかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the associated Iterator of LazyFilterSequence and LazyFilterCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはLazyFilterSequenceとLazyFilterCollectionに関連するIteratorです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the associated iterator for the LazyDropWhileSequence, LazyDropWhileCollection, and LazyDropWhileBidirectionalCollection types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、LazyDropWhileSequence、LazyDropWhileCollection、そしてLazyDropWhileBidirectionalCollection型に対する関連イテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the associated iterator for the LazyPrefixWhileSequence, LazyPrefixWhileCollection, and LazyPrefixWhileBidirectionalCollection types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、LazyPrefixWhileSequence、LazyPrefixWhileCollection、そしてLazyPrefixWhileBidirectionalCollection型に対する関連イテレータです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default implementation of the greater-than operator (&gt;) for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparableに準拠するあらゆる型に対してのより大きい演算子（&gt;）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default implementation of the greater-than-or-equal-to operator (&gt;=) for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparableに準拠するあらゆる型に対して、より大きいか等しい演算子（&gt;=）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default implementation of the less-than-or-equal-to operator (&lt;=) for any type that conforms to Comparable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparableに準拠するあらゆる型に対しての、より少ないか等しい演算子（&lt;=）の初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは不等演算子（!=）の、Equatableに準拠するあらゆる型に対する初期状態の実装です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the same as the number of bytes moved when an UnsafePointer&lt;T&gt; instance is incremented.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、UnsafePointer&lt;T&gt;が増大させられる時に動かされるバイト数と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the unit of the least significant digit in this value’s significand.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これはこの値の仮数の中の最下位数の単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re not responsible for releasing the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持たなくてよいことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when a function returns an unmanaged reference and you know that you’re responsible for releasing the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、ある関数が管理されない参照を返す、そしてあなたがその結果を解放することに責任を持つことをあなたが知っているときにときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when passing a reference to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、Swiftがそれについての所有権規則を知らないAPIにある参照を渡す、しかしそのAPIはあなたがオブジェクトを+0で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when passing an object to an API which Swift does not know the ownership rules for, but you know that the API expects you to pass the object at +1.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、Swiftがそれについての所有権規則を知らないAPIにあるオブジェクトを渡す、しかしそのAPIはあなたがオブジェクトを+1で渡すことを予期するのをあなたが知っているときに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This iterator forwards its next() method to an arbitrary underlying iterator having the same Element type, hiding the specifics of the underlying IteratorProtocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイテレータは、それのnext()メソッドを同じElement型を持っている随意の基盤をなすイテレータに転送して、特定の基盤をなすIteratorProtocolを隠しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This list describes how Swift imports types with different nullability annotations:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このリストは、どのようにSwiftが異なるヌル可能性注釈で型をインポートするかを記述します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This magnitude calculation takes the following form for a floating-point value x of type F, where ** is exponentiation:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この規模計算は、型Fの浮動小数点値xに対して以下の形式をとります、そこで**は冪演算です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This makes creating mixed-language app and framework targets as straightforward as creating an app or framework target written in a single language.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、混合言語のアプリとフレームワーク・ターゲットを作成することを、単一の言語で書かれるアプリまたはフレームワーク・ターゲットをつくるのと同じくらいわかりやすいものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これが意味するのは、ある配列がストレージを他のコピーと共有するならば、その配列上での最初の変更操作は、配列をコピーするコストを招くということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that when two different class instances have the same value for each of their stored properties, they're still considered to be different by the identity operator (===).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、２つの異なるクラスインスタンスが同じ値をそれらの格納プロパティの各々に対して持つ場合に、それらはまだ異なっていると同一性演算子（===）によってみなされることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method does not validate the encoding of a UTF-16 sequence beyond the specified code unit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、指定されたコード単位を越えてUTF-16シーケンスのエンコードを検証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method ensures that the array has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、配列が、少なくとも要請された数の要素に割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method ensures that the dictionary has unique, mutable, contiguous storage, with space allocated for at least the requested number of key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、辞書が、少なくとも要請された数のキー値ペアに割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method ensures that the set has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、集合が、少なくとも要請された数の要素に割り当てられた空間とともに、固有な、可変の、隣接するストレージを持つことを保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method has the effect of removing the specified range of elements from the array and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、指定された範囲の要素を配列から取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、指定された範囲の要素をコレクションから取り除き、そして新しい要素を同じ場所に挿入する効果を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、語彙筆記的順序の数学的概念を実装します、それはユニコードに関係はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method implements the remainder operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、IEEE 754仕様によって定義される剰余演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method initializes the buffer with elements from source until source is exhausted or, if source is a sequence but not a collection, the buffer has no more room for its elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはsourceからの要素でバッファを初期化します、sourceが使い尽くされるまでまたは、sourceがシーケンスであるがコレクションではないならば、バッファがこれ以上それの要素のための部屋を持たなくなるまで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to calling Bool.random(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、Bool.random(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to calling random(in:using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、random(in:using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to calling randomElement(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、randomElement(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to calling shuffle(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、shuffle(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to calling shuffled(using:), passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、shuffled(using:)を、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to calling the version that takes a generator, passing in the system’s default random generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、ある生成子をとるバージョンを、システムの持つ省略時の無作為生成子を渡して呼び出すことに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is equivalent to the C fma function and implements the fusedMultiplyAdd operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、C fma関数の等価物です、そしてfusedMultiplyAdd演算を実装し、それはIEEE 754仕様によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is implemented as a &amp; (bitwise AND) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの集合の持つ生の値に関する&amp;（ビット単位AND）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is implemented as a ^ (bitwise XOR) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの集合の持つ生の値に関する^（ビット単位XOR）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is implemented as a | (bitwise OR) operation on the two sets’ raw values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの集合の持つ生の値に関する|（ビット単位OR）演算として実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、効率のためにreduce(_:_:)より好まれます、その結果がコピーオンライト型である場合、例えばArrayまたは辞書に対しては。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method must not be called after a call to container(keyedBy:) or after encoding a value through a call to singleValueContainer()</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、container(keyedBy:)への呼び出しの後、またはsingleValueContainer()への呼び出しを通して値をエンコードする後に呼び出されてはなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method must not be called after a call to unkeyedContainer() or container(keyedBy:), or after encoding a value through a call to singleValueContainer()</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、unkeyedContainer()やcontainer(keyedBy:)への呼び出しの後、またはsingleValueContainer()への呼び出しを通して値をエンコードする後に呼び出されてはなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method must not be called after a call to unkeyedContainer() or after encoding a value through a call to singleValueContainer()</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、unkeyedContainer()への呼び出しの後、またはsingleValueContainer()への呼び出しを通して値をエンコードする後に呼び出されてはなりません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns nil if the container does not have a value associated with key, or if the value is null.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、nilを、そのコンテナがkeyと関連付けられる値を持たないならば、またはその値がnullならば、返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns nil if the container has no elements left to decode, or if the value is null.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドはnilを返します、もしコンテナがデコードするのに残る要素を持たないならば、またはもし値がnullならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns true and false with equal probability.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、trueとfalseを等しい確率で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns a typed pointer for further typed access to the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、この後で型付アクセスをこのメモリにするために型付ポインタを返します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns the maximum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの値のうち最大を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns the minimum of two values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの値のうち最小を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns the value with greater magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの与えられた値のうちより大きい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method returns the value with lesser magnitude of the two given values, preserving order and eliminating NaN when possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、２つの与えられた値のうちより小さい規模を持つ値を返します、可能な場合は桁数の保全およびNaNの排除をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method serves as the basis for the equal-to operator (==) for floating-point values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、浮動小数点値のための同等演算子（==）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method serves as the basis for the less-than operator (&lt;) for floating-point values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、浮動小数点値のためのより少ない演算子（&lt;）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method serves as the basis for the less-than-or-equal-to operator (&lt;=) for floating-point values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、浮動小数点値のためのより少ないか等しい演算子（&lt;=）の基盤としての機能を果たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method works regardless of whether the static string stores a pointer or a single Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドは、静的文字列がポインタまたは単一ユニコードスカラー値のどちらを格納するかに関係なく働きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This numeric type includes fractions such as “⅕” (U+2155 VULGAR FRACITON ONE FIFTH), numerical CJK ideographs like “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146), and other scalars that are not decimal digits used positionally in the writing of base-10 numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この数値型は、分数たとえば “⅕” (U+2155 VULGAR FRACITON ONE FIFTH)、数値CJK文字の “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146) のようなもの、そして底10の数を書くのに桁区切りに使われる10進桁でない他のスカラーを含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operation does not change reference counts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この操作は参照カウントを変更しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operator tests whether two instances have different identities, not different values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子は、２つのインスタンスが異なる正体を持つ（異なる同一性を持つ）かどうかをテストします、異なる値をではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operator tests whether two instances have the same identity, not the same value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子は、２つのインスタンスが同じ正体を持つ（同一性を持つ）かどうかをテストします、同じ値をではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operator uses short-circuit evaluation: optional is checked first, and defaultValue is evaluated only if optional is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子は、短絡評価を使います：optionalが最初に調べられます、そしてdefaultValueはoptionalがnilである場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operator uses short-circuit evaluation: The left-hand side (lhs) is evaluated first, and the right-hand side (rhs) is evaluated only if lhs evaluates to false.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子は、短絡評価を使います：左手側（lhs）が最初に評価されます、そして右手側（rhs）はlhsがfalseに評価する場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This operator uses short-circuit evaluation: The left-hand side (lhs) is evaluated first, and the right-hand side (rhs) is evaluated only if lhs evaluates to true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子は、短絡評価を使います：左手側（lhs）が最初に評価されます、そして右手側（rhs）はlhsがtrueに評価する場合にのみ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This pointer is valid only for the duration of the call to body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタは、ただbodyへの呼び出しの間にのみ有効とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This pointer must be a pointer to the start of a previously allocated memory block.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このポインタは、以前にアロケートされたメモリブロックの始まりを指すポインタでなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property applies to a small number of spacing vowel letters occurring in some Southeast Asian scripts like Thai and Lao, which use a visual order display model.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、タイ語およびラオ語のようないくつかの南東アジア書体に現れる少数の空白母音字に適用されます、それは視覚順序表示モデルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the ASCII_Hex_Digit property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、ASCII_Hex_Digitプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Age property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Ageにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Alphabetic property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Alphabeticにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Bidi_Control property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Bidi_Controlプロパティにユニコード標準において相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Bidi_Mirrored property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Bidi_Mirroredプロパティにユニコード標準において相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Canonical_Combining_Class property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Canonical_Combining_Classプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Case_Ignorable property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Case_Ignorableにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Cased property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Casedにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Changes_When_Casefolded property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Changes_When_Casefoldedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Changes_When_Casemapped property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Changes_When_Casemappedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Changes_When_Lowercased property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Changes_When_Lowercasedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Changes_When_NFKC_Casefolded property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Changes_When_NFKC_Casefoldedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Changes_When_Titlecased property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Changes_When_Titlecasedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Changes_When_Uppercased property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Changes_When_Uppercasedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Dash property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Dashにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Deprecated property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Deprecatedにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Diacritic property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Diacriticにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Emoji property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Emojiにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Emoji_Modifier property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Emoji_Modifierにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Emoji_Modifier_Base property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Emoji_Modifier_Baseにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Emoji_Presentation property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Emoji_Presentationにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Extender property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Extenderにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Full_Composition_Exclusion property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Full_Composition_Exclusionプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the General_Category property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、General_Categoryプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Grapheme_Base property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Grapheme_Baseプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Grapheme_Extend property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Grapheme_Extendプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Hex_Digit property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Hex_Digitプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the ID_Continue property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、ID_Continueプロパティにユニコード標準において相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the ID_Start property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、ID_Startプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the IDS_Binary_Operator property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、IDS_Binary_Operatorプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the IDS_Trinary_Operator property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、IDS_Trinary_Operatorプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Ideographic property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Ideographicにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Join_Control property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Join_Controlプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Logical_Order_Exception property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Logical_Order_Exceptionプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Lowercase property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Lowercaseにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Lowercase_Mapping property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Lowercase_Mappingプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Math property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Mathにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Name property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Nameにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Name_Alias property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Name_Aliasプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Noncharacter_Code_Point property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Noncharacter_Code_Pointプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Numeric_Type property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Numeric_Typeプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Numeric_Value property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Numeric_Valueプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Pattern_Syntax property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Pattern_Syntaxプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Pattern_White_Space property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Pattern_White_Spaceプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Quotation_Mark property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Quotation_Markプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Radical property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Radicalにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Sentence_Terminal property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Sentence_Terminalプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Soft_Dotted property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Soft_Dottedプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Terminal_Punctuation property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Terminal_Punctuationプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Titlecase_Mapping property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Titlecase_Mappingプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Unified_Ideograph property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Unified_Ideographプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Uppercase property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Uppercaseにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Uppercase_Mapping property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Uppercase_Mappingプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the Variation_Selector property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、Variation_Selectorプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the White_Space property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、White_Spaceプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the XID_Continue property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、XID_Continueプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property corresponds to the XID_Start property in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、XID_Startプロパティにユニコード標準では相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property implements the logB operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、IEEE 754仕様で定義されるlogB演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is true for both quiet and signaling NaNs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、クワイエットおよびシグナルNaNの両方に対してtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is a String, not a Unicode.Scalar or Character, because some mappings may transform a scalar into multiple scalars or graphemes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、あるStringです、Unicode.ScalarまたはCharacterではなく、なぜならいくつかのマッピングはスカラーを複数のスカラーや書記素に分解するかもしれないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is a constant for instances of fixed-width integer types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、固定長整数型のインスタンスのための定数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is a “past the end” index that does not correspond with any element of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは「終わりを過ぎた」インデックスで、それはコレクションのどの要素にも対応しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is always false for unsigned integer types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、符号なし整数型に対して常にfalseです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is always true for signed integer types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、符号付き整数型に対して常にtrueです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is false for CJK punctuation and symbols, as well as for compatibility ideographs (which canonically decompose to unified ideographs).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、CJK句読点およびシンボルに対してfalseです、互換表意文字だけでなく（それは統一表意文字に正準に分解されます）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is true for all scalars for which isASCIIHexDigit is true as well as for their CJK halfwidth and fullwidth variants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、それに対してisASCIIHexDigitが true である全てのスカラーに対して、それだけでなくそれらのCJK半角および全角異字体に対しても、true です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is true for scalars that are rendered as emoji by default and also for scalars that have a non-default emoji rendering when followed by U+FE0F VARIATION SELECTOR-16.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティがtrueであるのは、emojiとして初期状態で描出されるスカラーに対して、そしてまたU+FE0F VARIATION SELECTOR-16が後に続く場合に描出する非初期状態emojiを持つスカラーに対してです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property is true for scalars that are spaces, separator characters, and other control characters that should be treated as whitespace for the purposes of parsing text elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティが true であるのは、空白、区切り子文字、そして他の制御文字であるスカラーに対してです、それはテキスト要素を構文解析する目的のために空白として扱われるべきものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property roughly defines the class of “Chinese characters” and does not include characters of other logographic scripts such as Cuneiform or Egyptian Hieroglyphs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは、おおよそ “漢字” のクラスを定義します、そして他の表意文字書体の文字、たとえば楔形またはエジブト語ヒエログリフなどを含みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This property trades safety for performance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティは性能と安全を交換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This protocol only defines a storage layout and provides elementwise accesses.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロトコルは、ストレージレイアウトを定義するそして要素関連アクセスを提供するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This quantity, or a related quantity, is sometimes called epsilon or machine epsilon. Avoid that name because it has different meanings in different languages, which can lead to confusion, and because it suggests that it is a good tolerance to use for comparisons, which it almost never is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この量、または関連する量は、時々epsilonまたはmachine epsilonと呼ばれます。その名前を避けてください、なぜならそれは異なる意味を異なる言語では持つからです、それは混乱に導きます、そしてそれが比較に使うのに良い許容であることをそれは提案するからです、それはほとんど一度もそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This relation is a refinement of the less-than-or-equal-to operator (&lt;=) that provides a total order on all values of the type, including signed zeros and NaNs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関係は、より少ないか等しい演算子（&lt;=の改良版です、それは、符号付きゼロとNaNを含む、その型のすべての値に関する全順序を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This representation matches the one used when String instances are passed to C APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この表現は、StringインスタンスがC APIに渡される時に使われるものと一致します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rounding rule is also known as “bankers rounding,” and is the default IEEE 754 rounding mode for arithmetic.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この丸め規則はまた「銀行家の丸め」としても知られます、そして算術に対する省略時のIEEE 754丸め方式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rounding rule is also known as “schoolbook rounding.” The following example shows the results of rounding numbers using this rule:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この丸め規則はまた「教科書丸め」としても知られます。以下の例は、この規則を使っての数の丸めの結果を示します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rule implements the roundToIntegralTiesToEven operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この規則は、IEEE 754仕様で定義されるroundToIntegralTiesToEven演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rule is equivalent to the C ceil function and implements the roundToIntegralTowardPositive operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この規則は、C ceil関数の等価物です、そしてIEEE 754仕様によって定義されるroundToIntegralTowardPositive演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rule is equivalent to the C floor function and implements the roundToIntegralTowardNegative operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この規則は、C floor関数の等価物です、そしてroundToIntegralTowardNegative演算を実装し、それはIEEE 754仕様によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rule is equivalent to the C round function and implements the roundToIntegralTiesToAway operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この規則は、C round関数の等価物です、そしてIEEE 754仕様によって定義されるroundToIntegralTiesToAway演算を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This rule is equivalent to the C trunc function and implements the roundToIntegralTowardZero operation defined by the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この規則は、C trunc関数の等価物です、そしてroundToIntegralTowardZero演算を実装し、それはIEEE 754仕様によって定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This setting has no effect on mirrors reflecting value type instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この設定は、値型インスタンスをリフレクションするミラー上では効果を持ちません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This should report all keys present which are convertible to the requested type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、要請された型に変換可能である、存在する全てのキーを報告するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This subscript takes an index into the dictionary, instead of a key, and returns the corresponding key-value pair as a tuple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この添え字は辞書に対してのインデックスをとります、キーではなく、そして該当するキー値ペアをタプルとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type does not carry an owner pointer unlike the other C*Pointer types because it only needs to reference the results of inout conversions, which already have writeback-scoped lifetime.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型は、他のC*Pointer型と違って所有ポインタを持ち運びません、なぜならそれはただインアウト変換の結果を参照する必要があるだけだからです、そしてそれは既にライトバックスコープの寿命を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type has implicit conversions to allow passing any of the following to a C or ObjC API:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型は暗黙的な変換を持ち、それによって以下のことをCまたはObjC APIへ渡すことを可能にされます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type is the result of x.reversed() where x is a collection having bidirectional indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型は、x.reversed()の結果です、ここでxは双方向性のインデックスを持つコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type may differ from the subject’s dynamic type when this mirror is the superclassMirror of another mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型は、このミラーが別のミラーのsuperclassMirrorである時は、この主題のもつ動的型と異なるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type must conform to StringInterpolationProtocol and must have a matching StringLiteralType.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型は、StringInterpolationProtocolに準拠しなければなりません、そして適合するStringLiteralTypeを持たなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This unexpected result occurs because the call to type(of: value) inside printGenericInfo(_:) must return a metatype that is an instance of T.Type, but String.self (the expected dynamic type) is not an instance of P.Type (the concrete metatype of value).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この予期しない結果は、type(of: value)への呼び出しがprintGenericInfo(_:)内部において、T.Typeのインスタンスであるメタタイプを返さなければならない、しかしString.self（期待された動的型）はP.Type（valueの具象メタタイプ）のインスタンスでないことから起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value compares greater than or equal to all finite numbers, but less than infinity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、すべての有限数に対してより大きいか等しい、しかし無限大より少ないと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value compares less than or equal to all positive normal numbers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、すべての正のノーマル数に対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value compares less than or equal to all positive numbers, but greater than zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、すべての正の数、しかしゼロより大きいものに対してより少ないか等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Close_Punctuation (abbreviated Pe) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準における分類区分Close_Punctuation（簡略形式Pe）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Connector_Punctuation (abbreviated Pc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるConnector_Punctuation（簡略形式Pc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Control (abbreviated Cc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、Unicode StandardにおけるControl（簡略形式Cc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Currency_Symbol (abbreviated Sc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるCurrency_Symbol（簡略形式Sc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Dash_Punctuation (abbreviated Pd) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるDash_Punctuation（簡略形式Pd）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Decimal_Number (abbreviated Nd) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるDecimal_Number（簡略形式Nd）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Enclosing_Mark (abbreviated Me) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるEnclosing_Mark（簡略形式Me）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Final_Punctuation (abbreviated Pf) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるFinal_Punctuation（簡略形式Pf）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Format (abbreviated Cf) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、Unicode StandardにおけるFormat（簡略形式Cf）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Initial_Punctuation (abbreviated Pi) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるInitial_Punctuation（簡略形式Pi）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Letter_Number (abbreviated Nl) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるLetter_Number（簡略形式Nl）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Line_Separator (abbreviated Zl) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるLine_Separator（簡略形式Zl）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Lowercase_Letter (abbreviated Ll) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるLowercase_Letter（簡略形式Ll）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Math_Symbol (abbreviated Sm) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるMath_Symbol（簡略形式Sm）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Modifier_Letter (abbreviated Lm) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるModifier_Letter（簡略形式Lm）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Modifier_Symbol (abbreviated Sk) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるModifier_Symbol（簡略形式Sk）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Nonspacing_Mark (abbreviated Mn) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるNonspacing_Mark（簡略形式Mn）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Open_Punctuation (abbreviated Ps) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるOpen_Punctuation（簡略形式Ps）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Other_Letter (abbreviated Lo) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるOther_Letter（簡略形式Lo）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Other_Number (abbreviated No) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるOther_Number（簡略形式No）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Other_Punctuation (abbreviated Po) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるOther_Punctuation（簡略形式Po）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Other_Symbol (abbreviated So) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるOther_Symbol（簡略形式So）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Paragraph_Separator (abbreviated Zp) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるParagraph_Separator（簡略形式Zp）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Private_Use (abbreviated Co) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるPrivate_Use（簡略形式Co）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Space_Separator (abbreviated Zs) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるSpace_Separator（簡略形式Zs）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Spacing_Mark (abbreviated Mc) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるSpacing_Mark（簡略形式Mc）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Surrogate (abbreviated Cs) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、Unicode StandardにおけるSurrogate（簡略形式Cs）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Titlecase_Letter (abbreviated Lt) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるTitlecase_Letter（簡略形式Lt）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Unassigned (abbreviated Cn) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、Unicode StandardにおけるUnassigned（簡略形式Cn）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to the category Uppercase_Letter (abbreviated Lu) in the Unicode Standard.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、ユニコード標準におけるUppercase_Letter（簡略形式Lu）に相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to type-specific C macros such as FLT_MAX and DBL_MAX.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、型固有のCマクロ、例えばFLT_MAXおよびDBL_MAXに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value corresponds to type-specific C macros such as FLT_MIN and DBL_MIN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、型固有のCマクロ、例えばFLT_MINおよびDBL_MINに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value is always positive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この結果は常に正です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value is unadjusted by the type’s exponent bias.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、この型の持つ指数バイアスによって未調整のものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を計算するのは、些細なことではありません；通常良い考えであるのは、この情報をインスタンスが作成されるときに「ヘッダ」領域に格納することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value should be rounded toward zero to keep user computations with angles from inadvertently ending up in the wrong quadrant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、角度を伴うユーザ計算がうっかりして間違った象限に終わらないようにゼロへと丸められるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This value will be nil for code points that have not yet been assigned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値は、まだ割り当てられていないコード点に対して nil でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will be the same as either CSignedChar (in the common case) or CUnsignedChar, depending on the platform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、プラットホーム次第で、CSignedChar（一般的な場合）またはCUnsignedCharのどちらかに同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Those annotations change how Swift imports your declarations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら注釈は、どのようにSwiftがあなたの宣言をインポートするかを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Those “pairs” of code units are called surrogate pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら「ペア」のコード単位は、サロゲートペアと呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Though similar in name, this property is not equivalent to changesWhenCaseMapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>名前が似ているにもかかわらず、このプロパティはchangesWhenCaseMappedと等しくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throw Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エラーをスローする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throw and Catch Errors from Custom Error Domains</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえのエラー領域からエラーをスローおよびキャッチする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Throw and catch errors that use Cocoa's error types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Cocoaのエラー型を使うエラーをスローおよびキャッチします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, creating a slice has O(1) complexity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、ある切り取り（スライス）の作成はO(1)の計算量を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, side-effects such as the accumulation of result below are never unexpectedly dropped or deferred:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>したがって、副作用、例えば下のresultの集積などは、決して突然に投下されたり延期されたりしません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access a slice of a collection using a range expression, use the collection’s generic subscript that uses a range expression as its parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲式を使ってコレクションのスライスにアクセスするには、そのコレクションの持つ総称体添え字で、範囲式をそれのパラメータとして使うものを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access the underlying memory through typed operations, the memory must be bound to a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付演算を通して基礎をなすメモリにアクセスするには、メモリは自明型に束縛されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access the underlying memory, invoke withUnsafeBufferPointer on the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>基礎をなすメモリにアクセスするには、withUnsafeBufferPointerを配列上で発動してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add AdditiveArithmetic protocol conformance to your own custom type, implement the required operators, and provide a static zero property using a type that can represent the magnitude of any value of your custom type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AdditiveArithmeticプロトコル準拠をあなたのあつらえの型に加えるには、必要とされる演算子を実装してください、そしてある静的zeroプロパティをあなたのあつらえの型のあらゆる値の規模を表現可能なある型を使って提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add BidirectionalProtocol conformance to your custom types, implement the index(before:) method in addition to the requirements of the Collection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>BidirectionalProtocol準拠をあなたのあつらえの型に加えるには、index(before:)メソッドを、Collectionプロトコルの要件に加えて実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Comparable conformance to Date, first declare conformance to Comparable and implement the &lt; operator function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparable準拠をDateに加えるには、最初にComparableへの準拠を宣言して、&lt;演算子関数を実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Comparable conformance to your custom types, define the &lt; and == operators as static methods of your types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparable準拠をあなたのあつらえの型に加えるには、&lt;および==演算子をあなたの型の静的メソッドとして定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add CustomPlaygroundDisplayConvertible conformance to your custom type, implement the playgroundDescription property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomPlaygroundDisplayConvertible準拠をあなたのあつらえの型に加えるには、playgroundDescriptionプロパティを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add ExpressibleByBooleanLiteral conformance to your custom type, implement the init(booleanLiteral:) initializer that creates an instance of your type with the given Boolean value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByBooleanLiteral準拠をあなたのあつらえの型に加えるにはinit(booleanLiteral:)イニシャライザを加えてください、それはあなたの型のインスタンスを、与えられたブール値とともに作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add ExpressibleByExtendedGraphemeClusterLiteral conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByExtendedGraphemeClusterLiteral準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add ExpressibleByFloatLiteral conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByFloatLiteral準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add ExpressibleByIntegerLiteral conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByIntegerLiteral準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add ExpressibleByStringLiteral conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByStringLiteral準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add ExpressibleByUnicodeScalarLiteral conformance to your custom type, implement the required initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByUnicodeScalarLiteral準拠をあなたのあつらえの型に加えるには、必須イニシャライザを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Numeric protocol conformance to your own custom type, implement the required mutating methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Numericプロトコル準拠をあなた独自のあつらえの型に加えるには、必須変更メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add RangeReplaceableCollection conformance to your custom collection, add an empty initializer and the replaceSubrange(_:with:) method to your custom type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RangeReplaceableCollection準拠をあなたのあつらえのコレクションに加えるには、ひとつの空のイニシャライザおよびreplaceSubrange(_:with:)メソッドをあなたのあつらえの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Strideable conformance to a custom type, choose a Stride type that can represent the distance between two instances and implement the advanced(by:) and distance(to:) methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Strideable準拠をあつらえの型に加えるには、２つのインスタンスの間の隔たりを表現可能であるStride型のひとつを選んで、advanced(by:)とdistance(to:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add TextOutputStreamable conformance to a custom type, implement the required write(to:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>TextOutputStreamable準拠をあつらえの型に加えるには、必須write(to:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Collection conformance to your type, you must declare at least the following requirements:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Collection準拠をあなたの型に加えるには、あなたは少なくとも以下の要件を宣言しなければなりません：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Hashable conformance, provide an == operator function and implement the hash(into:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hashable準拠を加えるには、==演算子関数を提供して、hash(into:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add Sequence conformance to your own custom type, add a makeIterator() method that returns an iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sequence準拠をあなた独自のあつらえの型に加えるには、あるイテレータを返すmakeIterator()メソッドを加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a new key-value pair, assign a value to a key that isn’t yet a part of the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しいキー値ペアを加えるには、ある値を、まだ辞書の一部ではないキーに対して割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add conformance to the MutableCollection protocol to your own custom collection, upgrade your type’s subscript to support both read and write access.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>MutableCollectionプロトコルへの準拠をあなた独自のあつらえのコレクションに加えるには、あなたの型の持つ添え字を更新して読み書きアクセス両方をサポートするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add new lazy collection operations, extend this protocol with methods that return lazy wrappers that are themselves LazyCollectionProtocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい遅延コレクション操作を加えるために、このプロトコルを、それら自身がLazyCollectionProtocolである遅延ラッパーを返すメソッドで拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add new lazy sequence operations, extend this protocol with methods that return lazy wrappers that are themselves LazySequenceProtocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい遅延シーケンス操作を加えるために、このプロトコルを、それら自身がLazySequenceProtocolである遅延ラッパーを返すメソッドらで拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add single elements to the end of an array, use the append(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単一の要素を配列に加えるには、append(_:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add the capability to be initialized with a dictionary literal to your own custom types, declare an init(dictionaryLiteral:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルで初期化される能力をあなた独自のあつらえの型に加えるには、init(dictionaryLiteral:)イニシャライザを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なる型の値を加算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid dropping the customization provided by ancestor classes, an override of customMirror should pass .customized({ super.customMirror }) as ancestorRepresentation when initializing its mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>先祖クラスのカスタマイズを失くすのを防ぐために、customMirrorのオーバーライドは.customized({ super.customMirror })をancestorRepresentationとしてそれのミラーを初期化する時に渡さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>予期されないコピーを避けるために、代わりにindex(after:)メソッドを使ってstartIndexで始めることで、インデックスを生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this behavior, swap the call isKnownUniquelyReferenced(_:) to the left-hand side or store the result of the first expression in a local constant:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この挙動を防ぐために、左手側への呼び出しisKnownUniquelyReferenced(_:)を交換するか、最初の式の結果をローカル定数の中に格納してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this, use a forward declaration of the Swift class or protocol to reference it in an Objective-C interface.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これを防ぐために、Swiftクラスまたはプロトコルの前方宣言を使うことで、それをObjective-Cインターフェイスにおいて参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To bind a region of memory to a type that is a different size, convert the buffer to a raw buffer and use the bindMemory(to:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるメモリ領域を異なるサイズの型に束縛するには、そのバッファを新しい生のバッファに変換して、bindMemory(to:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To bind a region of memory to a type that is a different size, convert the pointer to a raw pointer and use the bindMemory(to:capacity:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリのある領域を異なるサイズである型にバインドするには、ポインタを生のポインタに変換して、bindMemory(to:capacity:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To bind memory to T, use bindMemory(to:capacity:) instead of this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリをTに束縛するには、bindMemory(to:capacity:)をこのメソッドの代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To bind uninitialized memory to a type without initializing it, use the bindMemory(to:count:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未初期化メモリをそれを初期化することなくある型に束縛するには、bindMemory(to:count:)メソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To bind uninitialized memory to a type without initializing it, use the bindMemory(to:count:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未初期化メモリをそれを初期化することなくある型に束縛するには、bindMemory(to:count:)メソッドを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To call countLetterChanges(_:_:) with two strings, use an unbounded range in each string’s subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countLetterChanges(_:_:)を２つの文字列で呼び出すには、無境界範囲を各文字列の添え字において使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To check for invalid usage in Release builds, see precondition(_:_:file:line:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「リリース」ビルドにおける無効な使用法を調べるには、precondition(_:_:file:line:)を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To check whether x is represented by a surrogate pair, use UTF16.width(x) == 2.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xがあるサロゲートペアで表現されるかどうか調べるには、UTF16.width(x) == 2を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To check whether a collection is empty, use its isEmpty property instead of comparing count to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションが空かどうか調べるには、それのisEmptyプロパティを使ってください、countをゼロと比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To check whether a string is empty, use its isEmpty property instead of comparing the length of one of the views to 0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列が空かどうか調べるには、それのisEmptyプロパティを使ってください、ビューの内の１つの長さを0と比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To check whether the collection is empty, use its isEmpty property instead of comparing count to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションが空かどうか調べるには、それのisEmptyプロパティを使ってください、countをゼロと比較するのでなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To conditionally bind the wrapped value of an Optional instance to a new variable, use one of the optional binding control structures, including if let, guard let, and switch.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Optionalインスタンスのラップされた値を新しい変数へ条件付きの束縛を行うには、if let、guard let、そしてswitchを含む、オプショナル束縛制御構造の１つを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To conform to Hashable, implement the hash(into:) requirement instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Hashableに準拠するには、hash(into:)要件を代わりに実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To construct a selector for a property’s Objective-C getter or setter method, prefix the property name using the getter: or setter: label, like #selector(getter: MyViewController.myButton).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタをあるプロパティの持つObjective-Cゲッターまたはセッターメソッドに対して組み立てるには、プロパティ名にgetter:またはsetter:ラベルを使って接頭辞を付けてください、#selector(getter: MyViewController.myButton)のように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To convert a String.UTF16View instance back into a string, use the String type’s init(_:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>String.UTF16Viewインスタンスを逆に文字列へと変換するには、String型のもつinit(_:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To convert an NSRange instance to a range of String.Index, use the Range(_:in:) initializer, which takes an NSRange and a string as arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSRangeインスタンスをString.Indexの範囲へ変換するには、Range(_:in:)イニシャライザを使ってください、それはNSRangeと文字列を引数として取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a Zip2Sequence instance, use the zip(_:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Zip2Sequenceインスタンスを作成するには、zip(_:_:)関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a dictionary with no key-value pairs, use an empty dictionary literal ([:]).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー値ペアを持たない辞書を作成するには、空の辞書リテラル（[:]）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a wrapper for the c_api function, write a function that takes CVarArg arguments, and then call the imported C function using the withVaList(_:_:) function:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>c_api関数に対するラッパーを作成するには、CVarArg引数をとる関数を書いて、それからインポートされたC関数をwithVaList(_:_:)関数を使って呼び出してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty instance, assign an empty array literal to your variable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空のインスタンスを作成するには、空の配列リテラルをあなたの変数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of EnumeratedSequence, call enumerated() on a sequence or collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>EnumeratedSequenceのインスタンスを作成するには、enumerated()をシーケンスまたはコレクション上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance, call enumerated().makeIterator() on a sequence or collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インスタンスを作成するには、enumerated().makeIterator()をシーケンスまたはコレクション上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To customize that representation, make your type conform to the CustomDebugStringConvertible protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この表現をカスタマイズするには、あなたの型をCustomDebugStringConvertibleプロトコルに準拠させてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To customize the logging of your type in a playground, conform to the CustomPlaygroundDisplayConvertible protocol, which does not use the PlaygroundQuickLook enum.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のログ取りをプレイグラウンドにおいてカスタマイズするには、CustomPlaygroundDisplayConvertibleプロトコルに準拠してください、それはPlaygroundQuickLook enumを使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To customize the mirror representation of a custom type, add conformance to the CustomReflectable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえの型のミラー表現をカスタマイズするには、CustomReflectableプロトコルへの準拠を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To customize your type’s Equatable conformance, to adopt Equatable in a type that doesn’t meet the criteria listed above, or to extend an existing type to conform to Equatable, implement the equal-to operator (==) as a static method of your type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のEquatableable準拠をカスタマイズするため、Equatableを上でリストされる基準に沿わない型において採用するため、または既存の型を拡張してEquatableに準拠するためには、同等演算子（==）をあなたの型の静的メソッドとして実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To customize your type’s Hashable conformance, to adopt Hashable in a type that doesn’t meet the criteria listed above, or to extend an existing type to conform to Hashable, implement the hash(into:) method in your custom type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のHashable準拠をカスタマイズするために、Hashableを上でリストされる基準に沿わない型において採用するために、または既存の型を拡張してHashableに準拠するためには、hash(into:)メソッドをあなたのあつらえの型において実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To customize your type’s implementation, provide your own mutating negate() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型の実装をカスタマイズするには、あなた自身の変更negate()メソッドを提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To declare a dictionary, assign a dictionary literal to a variable or constant:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書を宣言するには、辞書リテラルを変数または定数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To decode a code unit sequence completely, call this method repeatedly until it returns UnicodeDecodingResult.emptyInput.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコード単位のシーケンスを完全にデコードするには、このメソッドを繰り返し、それがUnicodeDecodingResult.emptyInputを返すまで呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To demonstrate the different views available for every string, the following examples use this String instance:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あらゆる文字列で利用可能な異なるビューを実際に示すために、以降の例はこのStringインスタンスを使います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do so, start by creating two slices of the absences array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それをするには、absences配列の２つのスライスを作成することで始めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do this, enclose a comma-separated list of values in square brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これをするには、コンマ区切りの値のリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To ensure that your type meets the semantic requirements of the Hashable and Equatable protocols, it’s a good idea to also customize your type’s Equatable conformance to match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型がHashableとEquatableプロトコルの意味論的要件に沿うことを確実にするために、あなたの型の持つEquatable準拠が合致するように同様にカスタマイズすることは良い考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To establish that a type you’ve created supports nondestructive iteration, add conformance to the Collection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが作成した型が非破壊反復をサポートすることを確立するには、Collectionプロトコルに対する準拠を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find individual elements of a string, use the appropriate view for your task.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列の個々の要素を手に入れるには、あなたの作業に適切なビューを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find the index of the day in question, follow these setps:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>当該の日付のインデックスを見つけるには、これらの手順を踏んでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find the index of the day in question, follow these steps:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>質問の日付のインデックスを見つけるには、これらの手順に従ってください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find the indices of the two days in question, follow these steps:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>当該の２つの日付のインデックスを見つけるには、これらの手順を踏んでください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find the number of times a specific element appears in the sequence, use the equal-to operator (==) in the closure to test for a match.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特定の要素がそのシーケンスにおいて現れる回数を見つけるには、同等演算子（==）をクロージャにおいて使うことで、合致についてテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To find the position that corresponds with this index in the original, underlying collection, use that collection’s index(before:) method with the base property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オリジナル、基盤コレクションでのこのインデックスに相当する位置を見つけるには、そのコレクションのindex(before:)メソッドをbaseプロパティとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the dynamic type inside value in this generic context, cast the parameter to Any when calling type(of:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>value内部の動的型をこの総称体の文脈において得るには、このパラメータをAnyへとtype(of:)を呼び出す時にキャストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get their value, see Character.hexDigitValue</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの値を得るために、Character.hexDigitValueを見てください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To handle Objective-C exceptions, write Objective-C code that catches exceptions before they reach any Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C例外を取り扱うには、それら例外をそれらが何らかのスウィフトコードに届く前に捕まえるObjective-Cコードを書いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To import a set of Objective-C files into Swift code within the same app target, you rely on an Objective-C bridging header file to expose those files to Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一揃いのObjective-CファイルをSwiftコードへと同じアプリターゲット内でインポートするには、あなたはObjective-Cブリッジヘッダファイルを頼ることで、それらファイルをSwiftへと露出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To import a set of Swift files in the same framework target as your Objective-C code, import the Xcode-generated header for your Swift code into any Objective-C .m file where you want to use your Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>一揃いのSwiftファイルをあなたのObjective-Cコードと同じフレームワークターゲットの中でインポートするために、あなたのSwiftコードに対するXcode生成のヘッダを、そこにおいてあなたがあなたのSwiftコードを使うことを望む何らかのObjective-C .mファイルの中へとインポートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To inherit all the default implementations from the OptionSet protocol, the Element type must be Self, the default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>OptionSetプロトコル由来のすべての省略時実装を継承するには、Element型はSelf、初期状態、でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate over the elements of a collection with its indices, use the zip(_:_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるコレクションの要素すべてにわたってそれのインデックスで反復するには、zip(_:_:)関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To learn more about the open source Swift project and community, visit Swift.org.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オープンソースSwiftプロジェクトおよびコミュニティについてもっと知るには、Swift.orgを訪れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To learn which half had more absences, use the reduce(_:_:) method to calculate each sum.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前半後半のどちらがより多くの欠席者がいるか突き止めるには、reduce(_:_:)メソッドを使ってそれぞれ総計を計算します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To maintain substitutability, the == operator should take into account all visible aspects of an Equatable type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>代替可能性を維持するために、==演算子はあるEquatable型の全ての目に見える面を考慮しなければならないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make Player conform to the Hashable protocol, declare conformance in another extension and implement the hash(into:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>PlayerをHashableプロトコルに準拠させるには、準拠を別の拡張において宣言して、hash(into:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make a Swift class available in Objective-C, make it a descendant of an Objective-C class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftクラスをObjective-Cで利用可能にするには、それをObjective-Cクラスの子孫にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make a custom type conform to the RandomNumberGenerator protocol, implement the required next() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのあつらえのクラスをRandomNumberGeneratorプロトコルに準拠させるには、必須next()メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make an Objective-C declaration unavailable at compile time in both Swift and Objective-C, use the NS_UNAVAILABLE macro.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるObjective-C宣言をSwiftとObjective-Cの両方で利用できなくするには、NS_UNAVAILABLEマクロを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this class conform to the Equatable protocol, declare conformance in an extension and implement the  static == operator method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このクラスをEquatableプロトコルに準拠させるには、準拠をある拡張において宣言して、静的==演算子メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make your Swift class accessible and usable back in Objective-C, make it a descendant of an Objective-C class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのSwiftクラスを逆にObjective-Cにおいてアクセス可能および利用可能にするには、それをObjective-Cクラスの子孫にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make your custom type conform to the TextOutputStream protocol, implement the required write(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのあつらえのクラスをTextOutputStreamプロトコルに準拠させるには、必須write(_:)メソッドを実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make your own custom type conform to the FixedWidthInteger protocol, declare the required initializers, properties, and methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなた独自のあつらえの型をFixedWidthIntegerプロトコルに準拠させるには、必須イニシャライザ、プロパティ、そしてメソッドを宣言してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To multiply values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なる型の値を乗算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To prevent a declaration in an Objective-C API from being imported, pass a single parameter to the NS_SWIFT_UNAVAILABLE macro.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-C APIの中のある宣言がインポートされるのを防ぐには、ある単一のパラメータをNS_SWIFT_UNAVAILABLEマクロに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To prevent bypassing customized ancestors, pass .customized({ super.customMirror }) as the ancestorRepresentation parameter when implementing your type’s customMirror property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえの先祖を迂回することを防ぐには、.customized({ super.customMirror })をancestorRepresentationパラメータとして、あなたの型のもつcustomMirrorプロパティを実装する時に渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To prevent infinite loops, playground logging implementations can place a reasonable limit on this kind of chaining.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無限ループを防ぐには、プレイグラウンドログ実装はこの種の連鎖に関して妥当な制限を置くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To print the items separated by something other than a space, pass a string as separator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空白以外の何かによって区切られる項目を出力するには、ある文字列をseparatorとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To print the items without a trailing newline, pass an empty string as terminator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後に続く改行なしで項目を出力するには、空の文字列をterminatorとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To print the items without a trailing newline, pass an empty string as terminator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後に続く改行なしで項目を出力するには、空の文字列をterminatorとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To print the items without a trailing newline, pass an empty string as terminator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後に続く改行なしで項目を出力するには、空の文字列をterminatorとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To protect code from invalid usage in Release builds, see preconditionFailure(_:file:line:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「リリース」ビルドにおける無効な使用法を調べるには、preconditionFailure(_:file:line:)を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To remove elements from an array, use the remove(at:), removeSubrange(_:), and removeLast() methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列から要素を取り除くには、remove(at:)、removeSubrange(_:)、そしてremoveLast()メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To remove the last element of a collection that might be empty, use the popLast() method instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空であるかもしれないあるコレクションの最後の要素を削除するには、popLast()関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To represent those scalar values using 8-bit integers, more than one UTF-8 code unit is often required.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのスカラー値を8ビット整数で表すには、１つ以上のUTF-8コード単位がしばしば必要とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To resolve these errors, you can use withoutActuallyEscaping(_:do:) to get copies of f and g that can be passed to async(execute:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらのエラーを解決するために、あなたはwithoutActuallyEscaping(_:do:)を使って、fとgのコピーを取得します、それはasync(execute:)に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To restore efficient set operations, create a new set from the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>能率的な集合演算を取り戻すには、新しい集合を結果から作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter round() method instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短いround()メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To round a value using the default “schoolbook rounding”, you can use the shorter rounded() method instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>省略時の「教科書丸め」を使って値を丸めるには、あなたはより短いrounded()メソッドを代わりに使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To safely access the properties and methods of a wrapped instance, use the postfix optional chaining operator (postfix ?).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラップされたインスタンスの持つプロパティおよびメソッドに安全にアクセスするには、後置オプショナル連鎖演算子（後置?）を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To safely reference the starting and ending indices of a slice, always use the startIndex and endIndex properties instead of specific values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるスライスの最初と最後のインデックスを安全に参照するために、常にstartIndexとendIndexプロパティを特定の値の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To sort the elements of your collection in descending order, pass the greater-than operator (&gt;) to the sort(by:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコレクションの要素を降順にソートするには、より大きい演算子（&gt;）をsort(by:)メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To sort the elements of your sequence in descending order, pass the greater-than operator (&gt;) to the sorted(by:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーケンスの要素を降順にソートするには、より大きい演算子（&gt;）をsorted(by:)メソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To sort your sequence in descending order, pass the greater-than operator (&gt;) as the areInIncreasingOrder parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのシーケンスを降順にソートするには、より大きい演算子（&gt;）をareInIncreasingOrderパラメータとして渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify a particular name for the class to use in Objective-C, mark it with @objc(name), where name is the name that your Objective-C code uses to reference the Swift class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特定の名前をクラスに対して指定してObjective-Cで使うには、それを@objc(name)で印してください、ここでnameはあなたのObjective-CコードがSwiftクラスを参照するのに使う名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify an alternative rule for rounding, use the round(_:) method instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>丸めのための代替の規則を指定するには、round(_:)メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify an alternative rule for rounding, use the rounded(_:) method instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>丸めのための代替の規則を指定するには、rounded(_:)メソッドを代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To start using the object, you use the takeUnretainedValue() function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのオブジェクトの使用を開始するには、あなたはtakeUnretainedValue()関数を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To subtract values of different types, convert one of the values to the other value’s type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なる型の値を減算するには、それらの値の一方を、他方の値の型へと変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To swap two elements of a mutable collection, use the swapAt(_:_:) method of that collection instead of this function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある可変のコレクションの２つの要素を交換するには、そのコレクションのswapAt(_:_:)メソッドを、この関数の代わりに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a dictionary literal as the initial value of a dictionary, enclose a comma-separated list of key-value pairs in square brackets.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書リテラルをある辞書の初期値として使うには、キー値ペアのコンマ区切りリストを角括弧で囲んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use the contains(_:) method without including a closure in each call, extend the StreetAddress type to conform to Equatable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>contains(_:)メソッドを各呼び出しにクロージャを含めることなく使うには、StreetAddress型をEquatableに準拠するように拡張してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use the Objective-C declarations in files in the same framework target as your Swift code, you’ll need to import those files into the Objective-C umbrella header—the master header for your framework.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのSwiftコードと同じフレームワークターゲットの中のファイルそれらの中のObjective-C宣言を使うには、あなたはそれらファイルをObjective-Cアンブレラヘッダ — あなたのフレームワークのマスターヘッダにインポートする必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use your own custom type in a set or as the key type of a dictionary, add Hashable conformance to your type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなた独自のあつらえの型を集合でまたは辞書のキー型として使うには、Hashable準拠をあなたの型に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write each line to the file, pass a closure to the forEach(_:) method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>各行をファイルに書き出すには、クロージャをforEach(_:)メソッドに渡してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Toggles the Boolean variable’s value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブール変数の持つ値を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tools for Your Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの型のためのツール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Topics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>話題</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tranforming a Range's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲の持つ要素を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Boolean</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブールを変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Dictionary</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の変形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Dictionary's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書の要素の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Range's Elements</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲の持つ要素を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Result</seg>
      </tuv>
      <tuv lang="JA">
        <seg>結果を変換する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Sequence</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスを変形する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a Set</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合を変形する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming a String's Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列のもつ文字を変形します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming an Array</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の変形</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Transforming an Optional Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプショナル値の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translates the given input from one Unicode encoding to another by calling the given closure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>指定された入力をあるユニコード符号化から別のものへと指定されたクロージャを呼び出すことによって翻訳します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translation Between Unicode Encodings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードエンコーディング間の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Traversing a Collection</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションを辿っていく</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Treat identity with care.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同一性を注意して取り扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Troubleshooting Tips and Reminders</seg>
      </tuv>
      <tuv lang="JA">
        <seg>問題解決の秘訣と注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple Comparison</seg>
      </tuv>
      <tuv lang="JA">
        <seg>タプル比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two Date instances are equal if each of their corresponding properties is equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのDateインスタンスは、それらの対応するプロパティの各々が等しいならば等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two edge cases are worth particular attention:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの境界事例は特別な注意を払う価値があります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two elements are incomparable if neither is ordered before the other according to the predicate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの要素は、述部によるとどちらもが他の前に並べられるならば比較できない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two instances of AnyHashable compare as equal if and only if the underlying types have the same conformance to the Equatable protocol and the underlying values compare as equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>AnyHashableの２つのインスタンスは、基礎をなす型が同じ準拠をEquatableプロトコルに対して持ちそしてそれら基礎をなす型が等しいと比較される場合にのみ等しいと比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two instances that are equal must feed the same values to Hasher in hash(into:), in the same order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>等しい２つのインスタンスは、同じ値をHasherへとhash(into:)において、同じ順序で与えなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two ranges are equal when they have the same lower and upper bounds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの範囲は、それらが同じ下方および上方境界を持つとき等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two sequences are canonically equivalent if they are equal when sorting the scalars in ascending order by their combining class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つのシーケンスは、スカラーをそれらの結合クラスによって昇順でソートする場合にそれらが等しいならば、正準的に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Aliases</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型エイリアス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Casting and Existential Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型キャストと存在型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Inference of Array Literals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列リテラルの型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Method</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型プロパティ </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type Property</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型プロパティ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type aliases representing the concrete type that a literal takes when no other type information is provided.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>具体的な型を表している型エイリアスで、それをリテラルが取るのは他の型情報が提供されない時です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type cast</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型キャスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type check</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型チェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type-Erasing Wrappers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型消去ラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typed Memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付メモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typed Pointers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付ポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この性能を保証することが可能でない型は、その逸脱を文書化されなければなりません、なぜなら多くのコレクション演算はそれら自身の性能保証としてO(1)添え字操作性能に依存するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that conform to Collection are expected to provide the startIndex and endIndex properties and subscript access to elements as O(1) operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Collectionに準拠する型は、startIndexおよびendIndexプロパティと要素への添え字アクセスをO(1)演算として提供することを期待されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that conform to RandomNumberGenerator should specifically document the thread safety and quality of the generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RandomNumberGeneratorに準拠する型は、とりわけ生成子のスレッド安全と品質を文書化すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that conform to the CaseIterable protocol are typically enumerations without associated values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CaseIterableプロトコルに準拠する型は、概して関連値を持たない列挙です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that conform to the CustomStringConvertible protocol can provide their own representation to be used when converting an instance to a string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CustomStringConvertibleプロトコルに準拠する型は、それら独自の表現を提供して、インスタンスが文字列に変換されるときに使われるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that conform to the Equatable protocol can be compared for equality using the equal-to operator (==) or inequality using the not-equal-to operator (!=).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatableプロトコルに準拠する型は、同等性を同等演算子（==）を使って、または不等性を不等演算子（!=）を使って比較されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that conform to the FloatingPoint protocol provide most basic (clause 5) operations of the IEEE 754 specification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatingPointプロトコルに準拠する型は、IEEE 754仕様の最も基本的な演算（５項）を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that have an integer Stride can be used as the boundaries of a countable range or as the lower bound of an iterable one-sided range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数Strideを持つこれら型は、可付番範囲の境界としてまたは反復可能な片側範囲の下方境界として使われることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types that implement alternative behaviors for a signaling NaN must document the departure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シグナルNaNに対する代替の挙動を実装する型は、その逸脱を文書化しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types with Comparable conformance implement the less-than operator (&lt;) and the equal-to operator (==).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Comparable準拠を持つ型は、より少ない演算子（&lt;）と同等演算子（==）を実装します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typical extenders are length and iteration marks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>典型的なエクステンダは、長さおよび反復マークです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typical usage stores a count and capacity in Header and destroys any live elements in the deinit of a subclass.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>典型的なやり方は、総数と容量をHeaderに格納して、サブクラスのdeinitの中のあらゆる生きている要素を破壊します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF-16 View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-16ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF-8 View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF-8ビュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF16View Elements Match NSString Characters</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF16View要素はNSString文字に一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF8View Elements Match Encoded C Strings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UTF8View要素は符号化C文字列と一致します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unannotated declarations within the audited region are treated as nonnullable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>監査された領域内部の注釈を付けられない宣言は、非ヌル可能性として取り扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary minus</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単項マイナス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unary plus</seg>
      </tuv>
      <tuv lang="JA">
        <seg>単項プラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unconditional Unwrapping</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無条件にアンラップする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unconditionally prints a given message and stops execution.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無条件に与えられたメッセージを出力して実行を停止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unconditionally unwrapping a nil instance with ! triggers a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilインスタンスを!で無条件にアンラップすることは、実行時エラーの引き金となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Build Settings, in Packaging, make sure the Defines Module setting for that framework target is set to Yes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「Build Settings」の下、「Packaging」の中で、そのフレームワークターゲットのための「Defines Module」設定が「Yes」に設定されることを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Build Settings, in Packaging, make sure the Defines Module setting for the framework target is set to Yes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Build Settingsの下、Packagingにおいて、フレームワークターゲットに対するDefines Module設定がYesに設定されることを確実にしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under typical system conditions, it's usually printed last, but you shouldn't write code that relies on the order of an asychronous call relative to synchronous code without performing more careful synchronization between threads.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>典型的なシステム条件の下、それはふつうは最後に印字されます、しかしあなたは、スレッド間でより注意深い同期を実行することなく、同期コードに関連して非同期呼び出しの順番を頼るコードを書くべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand How Error Parameters Are Imported</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのようにエラーパラメータがインポートされるか理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand how different API calls to your closures can affect your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのクロージャに対する異なるAPI呼び出しがどのようにあなたのアプリに影響を与えられるかを理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the Results of Synchronous and Asynchronous Calls</seg>
      </tuv>
      <tuv lang="JA">
        <seg>同期および非同期呼び出しの結果を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understand the constraints of imported Obj-C lightweight generic type declarations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたObj-C軽量総称体型宣言の制約を理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Understanding a Pointer’s Memory State</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるポインタのメモリ状態を理解する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Codecs</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードコーデック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Scalar Classifications</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラークラス分け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Scalar View</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラービュー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode scalar values are the 21-bit codes that are the basic unit of Unicode.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラー値は21ビットコードです、それはユニコードの基本的な単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode scalar values that make up a string’s contents can be up to 21 bits long.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列のもつ内容を構成するユニコードスカラー値は、21ビット長に至るまで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uninitialized Memory</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未初期化メモリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uninitialized memory must be initialized before it can be accessed for reading.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未初期化メモリは、それが読み出しのためアクセスされる前に初期化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uninitialized memory must be initialized with values of a type before it can be used with any typed operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>未初期化メモリは、それが何らかの型付き演算で使用される前にある型の値で初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>共用体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uniqueness Checking</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特有性の検査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnkeyedDecodingContainer Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnkeyedDecodingContainer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnkeyedEncodingContainer Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnkeyedEncodingContainer 実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>コレクションがBidirectionalCollectionプロトコルに準拠しない場合は、startはendより少ないか等しくなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのコレクションが無作為アクセス性能を保証しない限り、countの算出は、O(n)演算であるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike Array and ContiguousArray, the starting index for an ArraySlice instance isn’t always zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ArrayおよびContiguousArrayとは違い、ArraySliceインスタンスのインデックスの始まりは必ずしもゼロではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike NSString, however, String.UTF16View does not use integer indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>しかしながら、NSStringとは違い、String.UTF16Viewは整数インデックスを使いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike UnsafeMutablePointer&lt;Pointee&gt;, AutoreleasingUnsafeMutablePointer&lt;Pointee&gt; must reference storage that does not own a reference count to the referenced value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutablePointer&lt;Pointee&gt;とは違い、AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;は、参照される値への参照カウントを保有しないストレージを参照しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike enumerations, option sets provide a nonfailable init(rawValue:) initializer to convert from a raw value, because option sets don’t have an enumerated list of all possible cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙と異なり、オプションセットは生の値から変換するために失敗できないinit(rawValue:)イニシャライザを提供します、なぜならオプションセットは可能な場合全てを列挙したリストを持たないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike in other programming languages, in Swift, integers and strings cannot be used where a Boolean value is required.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のプログラミング言語とは違い、Swiftではブール値が必要とされるところで整数と文字列は使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike key-value pairs in a true dictionary, neither the key nor the value of a KeyValuePairs instance must conform to the Hashable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>本当の辞書におけるキー値ペアとは違い、KeyValuePairsインスタンスのキーも値もHashableプロトコルに準拠する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike ordinary set types, the Element type of an OptionSet is identical to the OptionSet type itself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>普通の集合型とは違い、あるOptionSetのElement型は、OptionSet型自体と全く同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike other floating-point types, the Float80 type explicitly stores the leading integral significand bit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他の浮動小数点型と違い、Float80型は明示的に先頭整数仮数ビットを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike the key-based subscript, the index-based subscript returns the corresponding key-value pair as a non-optional tuple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キー基盤の添え字と違い、インデックス基盤の添え字は該当するキー値ペアを非オプショナルのタプルとして返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>従来的な切り詰め乗算と違って、multipliedFullWidth(by:)メソッドは、この値とotherの積のhighおよびlow部分の両方を含んでいるタプルを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike with isEmpty, calculating a view’s count property requires iterating through the elements of the string.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isEmptyとは違い、あるビューのcountプロパティを計算することはその文字列の要素を始めから終わりまで反復していく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike with other pointer types, you can't use an array as an implicitly bridged parameter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>他のポインタ型とは違い、あなたは配列を暗黙的にブリッジされるパラメータとして使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unnamed Structure and Union Fields</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無名の構造体および共用体のフィールド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unnamed fields consist of a nested struct or union type with named fields.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無名フィールドは、入れ子にされたstructまたはunionで名前付きフィールドを持つものから成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafeBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafeMutableBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafeMutablePointer’s operations, by contrast, assume that the referenced storage owns values loaded from or stored to it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutablePointerの行う操作は、対照的に、参照されるストレージがそれからロードされたりそれへと格納される値を所有すると仮定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafeMutableRawBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutableRawBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsafeRawBufferPointer Semantics</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeRawBufferPointer意味論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsafely converts an unmanaged class reference to a pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>管理されないクラス参照をポインタへと安全でない変換をする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsafely turns an opaque C pointer into an unmanaged class reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不透明Cポインタの管理されないクラス参照への安全でない転換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unsigned Integers</seg>
      </tuv>
      <tuv lang="JA">
        <seg>符号なし整数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UnsignedInteger Implementations</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsignedInteger実装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Update an existing value by assigning a new value to a key that already exists in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すでに辞書に存在するキーに新しい値を割り当てることで、既存の値を更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Update import statements in your Objective-C code (to #import "ProductModuleName-Swift.h") to refer to your new Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのObjective-Cコードにおいてインポート文を更新して（#import "ProductModuleName-Swift.h"へと）、あなたの新しいSwiftコードを参照するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Update your code to use the Swift class name instead of the Objective-C name if you gave the Swift class a different name.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがスウィフトクラスに異なる名前を与えるならば、Objective-C名でなくてスウィフトクラス名を使用するようにあなたのコードを更新してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Updates the value stored in the dictionary for the given key, or adds a new key-value pair if the key does not exist.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書に格納される値を指定されたキーに対して更新します、またはそのキーが存在しないならば新しいキー値ペアを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uppercase Characters vary under case-conversion to lowercase, but not when converted to uppercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アッパーケース文字は、ローワーケースへのケース変換のもとでは変動します、しかしアッパーケースに変換される時はそうではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Never as the return type when declaring a closure, function, or method that unconditionally throws an error, traps, or otherwise does not terminate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無条件にエラーをスローする、トラップする、またはそうする以外終了しない、クロージャ、関数、またはメソッドを定義するときに、Neverを戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Void or an empty tuple as the return type when declaring a closure, function, or method that doesn’t return a value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値を返さないクロージャ、関数、またはメソッドを定義する場合は、Voidまたは空のタプルを戻り型として使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a macro to denote the availability of an Objective-C API.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>aマクロを使って、Objective-C APIの利用可能性を示してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use unsafeDowncast(_:to:) only when you are confident that x is T always evaluates to true, and only after x as! T has proven to be a performance problem.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unsafeDowncast(_:to:)は、あなたがx is Tは常にtrueに評価されることを確信している場合にのみ、そしてx as! Tが性能問題をもつと証明された後にのみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use unsafelyUnwrapped only when you are confident that this instance will never be equal to nil and only after you’ve tried using the postfix ! operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>unsafelyUnwrappedは、あなたがこのインスタンスは決してnilと等しくないことを確信している場合にのみ、そしてあなたが前置!演算子を使うことを試みた後にのみ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use startIndex and endIndex as the bounds for any element access, instead of 0 and count.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>startIndexおよびendIndexをその境界としてあらゆる要素アクセスのために使ってください、0およびcountではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use NS_TYPED_ENUM for sets of constants that can't logically have values added in a Swift extension, and use NS_TYPED_EXTENSIBLE_ENUM for sets of constants that can be expanded in an extension.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_TYPED_ENUMを、論理的にSwift拡張に加えられた値を持つことができない定数のセットに対して使ってください、そしてNS_TYPED_EXTENSIBLE_ENUMを、ある拡張において拡張されることができる定数のセットに対して使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use NS_TYPED_ENUM and NS_TYPED_EXTENSIBLE_ENUM when grouping related constants of any type, including string constants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_TYPED_ENUMおよびNS_TYPED_EXTENSIBLE_ENUMを、文字列定数を含む、任意の型の関連する定数をグループにする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use API names and parameter names along with documentation to determine whether an API is synchronous or asynchronous.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>API名とパラメータ名を、加えてAPIが同期的または非同期的かを明らかにする文書とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use All Significant Properties for Equatable and Hashable</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべての重要プロパティをequatableとhashableに対して使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Classes When You Need Objective-C Interoperability</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスをあなたがObjective-C互換性を必要とする場合に使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Classes When You Need to Control Identity</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが同一性を制御する必要がある場合はクラスを使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Functions and Generics Instead of Complex Macros</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数と総称体を複雑なマクロの代わりに使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Key Paths to Dynamically Access Objective-C Properties</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパスを使って動的にObjective-Cプロパティにアクセスする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Memory Managed Objects</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ管理オブジェクトを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Selectors to Arrange Calls to Objective-C Methods</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタを使ってObjective-Cメソッドへの呼び出しを整える</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Structures When You Don't Control Identity</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが同一性を制御しない場合は構造体を使ってください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Structures and Protocols to Model Inheritance and Share Behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体とプロトコルを使って挙動の継承と共有をモデル化してください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a KeyValuePairs instance when you need an ordered collection of key-value pairs and don’t require the fast key lookup that the Dictionary type provides.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>KeyValuePairsインスタンスを使うのは、あなたがキー値ペアの順序付きコレクションを必要とするそしてDictionary型が提供する高速キー検索を要求しない場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a CVaListPointer to Call Variadic Functions</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CVaListPointerを使って可変長引数関数を呼び出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a type’s alignment when allocating memory using an unsafe pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この型のアライメントを使うのは、安全でないポインタを使うメモリアロケートの場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use a variable or constant with an existential type to hold an instance of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある変数または定数を存在型とともに使うことで、どんな型のインスタンスでも保持するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use an Enumeration to Capture State</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙を使って状態をキャプチャしてください</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use bridged Foundation types in your Swift codebase to work with dates, times, and other values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジされたFoundation型をあなたのSwiftコード基盤において使って、日付、時刻、および他の値を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use bridged reference types when you need reference semantics or Foundation-specific behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブリッジされた参照型を、あなたが参照意味論またはFoundation特有の挙動を必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use care when calling isKnownUniquelyReferenced(_:) from within a Boolean expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isKnownUniquelyReferenced(_:)をブール式の内部から呼び出すとき注意を払ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use classes and other declarations from your Objective-C code with the same Swift syntax you use for system classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスと他の宣言をあなたのObjective-Cコードからあなたがシステムクラスに使うのと同じSwift構文で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use classes and other declarations from your custom Objective-C code with the same Swift syntax you use for system classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスと他の宣言をあなたのあつらえのObjective-Cコードからあなたがシステムクラスに使うのと同じSwift構文で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use classes when you need Objective-C interoperability.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスを、あなたがObjective-C互換性を必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use classes when you need to control the identity of the data you're modeling.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>クラスを、あなたがモデル化しているデータの同一性を制御する必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use classes when you need your instances to have this kind of identity.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのインスタンスがその種の同一性を持つことをあなたが必要とする場合は、クラスを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use enumerations to capture and track the state of your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙を使ってあなたのアプリの状態をキャプチャおよび追跡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use implicit pointer casting or bridging when calling functions that takes pointers as parameters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>暗黙的なポインタキャストまたはブリッジを、ポインタをパラメータとして取る関数を呼び出す場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use imported C types or call C variadic functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたC型を使ったり、C可変長引数関数を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use imported C-defined macros as constants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたC定義のマクロを定数として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use inout syntax to implicitly create a pointer to an instance of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インアウト構文を使って、任意の型のインスタンスへのポインタを暗黙的に作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use key-path expressions to access properties dynamically.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キーパス式を使ってプロパティに動的にアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use native Swift syntax to interoperate with types and functions in C and Objective-C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>本来のSwift構文を使ってCおよびObjective-Cでの型および関数と相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use nullability annotations or mark regions as annotated to control how Objective-C declarations are imported into Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ヌル可能性注釈を使うかまたは領域が注釈されると印することで、どのようにObjective-C宣言がSwiftへとインポートされるかを制御してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use raw pointers and buffers to access memory for loading and storing as raw bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>生のポインタとバッファを使って、ロードおよび格納のためにメモリに生のバイトとしてアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use selectors and key paths to interact with dynamic Objective-C APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セレクタとキーパスを使って動的Objective-C APIと相互作用してます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use set-related operations to check for membership and to add or remove members from an instance of your custom option set type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>セット関連演算を使って、帰属を確認したり、あなたのあつらえのオプションセット型のインスタンス由来のメンバの追加や削除を行ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use slices only for transient computation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スライスを一時的な計算のためだけに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use string interpolation to include one or more expressions in a string literal, wrapped in a set of parentheses and prefixed by a backslash.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列補間を使って文字列リテラルの中に１つ以上の式を、一組の丸括弧に包んでひとつのパックスラッシュを前に置いて、含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use structures along with protocols to adopt behavior by sharing implementations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体をそれだけでなくプロトコルと一緒に使うことで、実装を共有することによる挙動を取り入れてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use structures by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体を、通常は使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use structures to represent common kinds of data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体を使って、通常の種類のデータを表してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use structures when you're modeling data that contains information about an entity with an identity that you don't control.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが制御を行わない同一性をもつある存在についての情報を含むデータをあなたがモデル化する場合は、構造体を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the @available() keyword to check availability information in a conditional statement in Objective-C:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>@available()キーワードを使って、利用可能性情報をObjective-Cの条件文で確認してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the @objc(name) attribute to provide Objective-C names for properties and methods when necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>@objc(name)属性をObjective-C名をプロパティとメソッドに必要に応じて用意するために使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the API_AVAILABLE macro to add availability information in Objective-C:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>API_AVAILABLEマクロを使って、利用可能性情報をObjective-Cにおいて加えてください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the CF_SWIFT_NAME macro to group functions that have related behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CF_SWIFT_NAMEを使って、関連する挙動を持つ関数をグループにまとめてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the FixedWidthInteger protocol as a constraint or extension point when writing operations that depend on bit shifting, performing bitwise operations, catching overflows, or having access to the maximum or minimum representable value of a type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ビットシフト、ビット単位演算の実行、オーバーフローのキャッチ、またはある型の最大限または最小限表現可能な値へのアクセスに依存する演算を記述する場合に、FixedWidthIntegerプロトコルを制約または拡張ポイントとして使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NS_CLOSED_ENUM macro for a simple group of constants that you can never add new cases to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_CLOSED_ENUMマクロを、あなたが決してそれに新しいケース節を加えることが出来ない、ある単純な定数グループに対して使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NS_ENUM macro for simple groups of constants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_ENUMマクロを、単純な定数のグループに対して使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NS_REFINED_FOR_SWIFT macro to change how an API is imported into Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_REFINED_FOR_SWIFTマクロを使って、あるAPIがSwiftへとインポートされる方法を変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NS_SWIFT_NAME macro to customize API names for Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_SWIFT_NAMEを使って、API名をSwift用にカスタマイズしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the NS_SWIFT_UNAVAILABLE macro to prevent an API from being used in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_SWIFT_UNAVAILABLEを使って、あるAPIがSwiftにおいて使われることを妨げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the advanced(by:) method in generic code to offset a value by a specified distance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>advanced(by:)メソッドを総称体コードにおいて使用して、ある値を指定された隔たりだけオフセットしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the alignment property for a type when allocating memory using an unsafe pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある型に対してalignmentプロパティを使うのは、安全でないポインタを使うメモリアロケートの場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the bindMemory(to:) method to bind the memory referenced by this buffer to the type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bindMemory(to:)メソッドを使用して、このバッファによって参照されるメモリを型Tへと束縛してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the bindMemory(to:capacity:) method to bind the memory referenced by this pointer to the type T.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>bindMemory(to:capacity:)メソッドを使用して、このポインタによって参照されるメモリを型Tへと束縛してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the combine closure to select a value to use in the returned dictionary, or to combine existing and new values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>combineクロージャを使ってある値を選択することで、返される辞書において使ってください、または既存および新規の値を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the combine closure to select a value to use in the updated dictionary, or to combine existing and new values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>combineクロージャを使ってある値を選択することで更新された辞書において使ってください、または既存のものと新しい値を結合してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the contains(_:) method to test whether a set contains a specific element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>contains(_:)メソッドを使って、ある集合が特定の要素を含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the first and last properties for safe access to the value of the array’s first and last elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列の最初と最後の要素の値に対する安全なアクセスのためにfirstおよびlastプロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the flatMap method with a closure that returns an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>flatMapメソッドをオプショナル値を返すクロージャとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the init(bitPattern:) initializer for the destination type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先の型のためのinit(bitPattern:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the init(clamping:) initializer to create a new instance of a binary integer type where out-of-range values are clamped to the representable range of the type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init(clamping:)イニシャライザを使って、バイナリ整数型の新しいインスタンスを作成してください、そこにおいて範囲外の値はその型の表現可能な範囲に固定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the init(truncatingIfNeeded:) initializer to create a new instance with the same bit pattern as the passed value, extending or truncating the value’s representation as necessary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init(truncatingIfNeeded:)イニシャライザを使って、渡された値と同じビットパターンを持つ新しいインスタンスを、必要ならばその値の表現を拡張または切り詰めて作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the init?(exactly:) initializer to create a new instance after checking whether the passed value is representable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>init?(exactly:)イニシャライザを使うことで、その渡された値が表現可能であるかどうか調べた後に新しいインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the intersection(_:) method to create a new set with only the elements common to a set and another set or sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>intersection(_:)メソッドを使って、ある集合と別の集合またはシーケンスに共通の要素だけで新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the isDisjoint(with:) method to test whether a set has any elements in common with another set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isDisjoint(with:)メソッドを使って、ある集合が別の集合と共通の何らかの要素を持つかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the isEmpty property to check quickly whether an array has any elements, or use the count property to find the number of elements in the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isEmptyプロパティを使って、ある配列が要素を持つかどうか素早く確認してください、またはcountを使うことで配列中の要素の数を調べてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the isStrictSubset(of:) and isStrictSuperset(of:) methods to test whether a set is a subset or superset of, but not equal to, another set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isStrictSubset(of:)およびisStrictSuperset(of:)メソッドを使って、ある集合が別の集合の下位集合または上位集合である、しかし等しくはないものであるかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the isSubset(of:) method to test whether a set contains all the elements of another set or sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isSubset(of:)メソッドを使って、ある集合が別の集合またはシーケンスに属する要素すべてを含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the isSuperset(of:) method to test whether all elements of a set are contained in another set or sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>isSuperset(of:)メソッドを使って、ある集合のすべての要素が別の集合またはシーケンスの中に含まれるかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the map method with a closure that returns a non-optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このmapメソッドを、非オプショナル値を返すクロージャとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the max(by:) method to determine the index of the day with the most absences.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>max(by:)メソッドを使って最も欠席者の多い日付のインデックスを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the reduce(_:_:) method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reduce(_:_:)メソッドを使って、あるシーケンス全体の中の要素から単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the reduce(into:_:) method to produce a single value from the elements of an entire sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>reduce(into:_:)メソッドを使って、あるシーケンス全体の要素から単一の値を生成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the shuffle() method to randomly reorder the elements of an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>shuffle()メソッドを使って、配列の要素を無作為に再配列してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the stride(from:through:by:) function to create StrideThrough instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>stride(from:through:by:)関数を使ってStrideThroughインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the stride(from:to:by:) function to create StrideTo instances.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>stride(from:to:by:)関数を使ってStrideToインスタンスを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the subtracting(_:) method to create a new set with the elements of a set that are not also in another set or sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>subtracting(_:)メソッドを使って、別の集合またはシーケンスにはないある集合の要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the symmetricDifference(_:) method to create a new set with the elements that are in either a set or another set or sequence, but not in both.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Use the symmetricDifference(_:)メソッドを使って、ある集合または別の集合かシーケンスのどちらかにある、しかし両方にではない要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the union(_:) method to create a new set with the elements of a set and another set or sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>union(_:)メソッドを使って、ある集合と別の集合またはシーケンスに属する要素で新しい集合を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the capacity and count properties to determine how many more elements the array can store without allocating larger storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>capacityやcountプロパティを使って、より大きなストレージに割り当てることなく更にどのくらいの要素をその配列が格納できるか判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the Unicode.Scalar type to work with decoded Unicode scalar values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Unicode.Scalar型を使ってデコードされたユニコードスカラー値を扱ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the array’s capacity property to determine the size of the new storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列のcapacityプロパティを使って新しいストレージの大きさを特定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the casting operators (as, as!, or as?) or the unsafeDowncast(_:to:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>キャスト演算子（as、as!、またはas?）またはunsafeDowncast(_:to:)関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲演算子（...）を使うことでComparableプロトコルに準拠する何らかの型の配列を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the destination type’s init(truncatingIfNeeded:) or init(bitPattern:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先の型のもつinit(truncatingIfNeeded:)またはinit(bitPattern:)イニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the destination type’s initializer or the numericCast(_:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先の型の持つイニシャライザまたはnumericCast(_:)関数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the half-open range operator (..&lt;) to create a range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子（..&lt;）を使ってComparableプロトコルに準拠する何らかの型の範囲を作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the masking left shift operator (&amp;&lt;&lt;) when you need to perform a shift and are sure that the shift amount is in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マスク左シフト演算子（&amp;&lt;&lt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲0..&lt;lhs.bitWidthの中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the masking right shift operator (&amp;&gt;&gt;) when you need to perform a shift and are sure that the shift amount is in the range 0..&lt;lhs.bitWidth.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>マスク右シフト演算子（&amp;&gt;&gt;）を、あなたがあるシフトを実行する、そしてシフト量が範囲0..&lt;lhs.bitWidthの中であるのを確実にする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the nil-coalescing operator (??) to supply a default value in case the Optional instance is nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子（??）を使って、省略時の値をOptionalインスタンスがnilの場合に提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>後置完結範囲演算子（後置...）を使うことで何らかの型の部分的な範囲でComparableプロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前置完結範囲演算子（前置...）を使うことで何らかの型の部分的な範囲でComparableプロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the prefix half-open range operator (prefix ..&lt;) to create a partial range of any type that conforms to the Comparable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前置半開範囲演算子（前置..&lt;）を使うことで何らかの型の部分的な範囲でComparableプロトコルに準拠するものを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the “equal to” operator (==) to test whether two sets contain the same elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>「同等」演算子（==）を使って、２つの集合が同じ要素らを含むかどうかテストしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use these functions with numeric values and other comparable types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの関数を数値および他の比較可能な型で使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use these lazy wrappers to defer any filtering or transformation of collection elements until elements are accessed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの遅延ラッパーを使うことで、コレクション要素の何らかの変換またはフィルタを要素がアクセスされるまで延期してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use these static properties to access a type's layout.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これらの静的プロパティを使ってある型の持つレイアウトにアクセスしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this equal-to operator (==) to compare any two optional instances of a type that conforms to the Equatable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この同等演算子（==）を使って、Equatableプロトコルに準拠するある型の何らかの２つのオプショナルインスタンスを比較してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this function for internal sanity checks that are active during testing but do not impact performance of shipping code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数を本質的な正常性確認のために使ってください、それはテストの間は活動的ですが出荷コードの性能に影響はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this function instead of unsafeBitcast(_:to:) because this function is more restrictive and still performs a check in debug builds.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数をunsafeBitcast(_:to:)の代わりに使ってください、なぜならこの関数はより制限的で依然としてデバッグビルドにおいて検査を実行するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this function only to convert the instance passed as x to a layout-compatible type when conversion through other means is not possible.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数をxとして渡されるインスタンスをレイアウト互換の型へと、その変換が他の手段では可能でない場合に、変換するのにだけ使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this function to detect conditions that must prevent the program from proceeding, even in shipping code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数を使って、続行することからプログラムを妨げなければならない条件を突き止めてください、出荷コードにおいてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this function to stop the program when control flow can only reach the call if your API was improperly used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのAPIが誤って使われた場合にその呼び出しに制御の流れが届く時にだけこの関数を使ってプログラムを停止してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this function to stop the program, without impacting the performance of shipping code, when control flow is not expected to reach the call—for example, in the default case of a switch where you have knowledge that one of the other cases must be satisfied.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この関数を使って、制御の流れが呼び出しに届くと予想されない場合に、出荷コードの性能に影響を与えることなく、プログラムを停止してください—例えば、switchのdefaultケース節において、そこにおいてあなたはそれ以前のケース節の１つが満たされなければならないことがわかっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this information to estimate the amount of storage you will need and pre-allocate it with a method like RangeReplaceableCollection.reserveCapacity(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この情報を使って、あなたが必要とするストレージの総量を見積もってください、そしてそれをRangeReplaceableCollection.reserveCapacity(_:)のようなメソッドで前もってアロケートしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer around a range instead of typing all those numbers in an array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの数をすべて配列リテラルの中にタイプするの代わりに、ある範囲を取り囲むようにこのイニシャライザを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to avoid intermediate reallocations of a dictionary’s storage buffer when you know how many key-value pairs you are adding to a dictionary after creation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのくらい多くのキー値ペアをあなたが辞書に加えることになるかあなたが知っている場合は、このイニシャライザを使ってある辞書の持つストレージバッファの幾度もの中間的な再割り当てを回避してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to avoid intermediate reallocations of a set’s storage buffer when you know how many elements you’ll insert into the set after creation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがどのくらい多くの要素を作成後の集合に挿入するか知っているならば、このイニシャライザを使って集合の持つストレージバッファの中間的な再割り当てを回避してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to convert an instance of any type to its custom debugging representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのあつらえのデバッグ表現に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to convert an instance of any type to its preferred representation as a String instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って、何らかの型のインスタンスをそれのより好まれる表現であるStringに変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to convert from another integer type when you know the value is within the bounds of this type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って別の整数型から変換してください、値がこの型の境界の内部であるのをあなたが知っている場合は。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to create a new set from an existing sequence, for example, an array or a range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って、新しい集合を既存のシーケンス、例えば、配列またはある範囲から作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to create a new set from an existing sequence, like an array or a range:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って、新しい集合を既存のシーケンス、配列またはある範囲などから作成してください：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to explicitly convert other to an UnsafeMutableRawPointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って、otherをUnsafeMutableRawPointerインスタンスに明示的に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this initializer to explicitly convert other to an UnsafeRawPointer instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使って、otherをUnsafeRawPointerインスタンスに明示的に変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method instead of key-based subscripting when you need to know whether the new value supplants the value of an existing key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>新しい値が既存のキーの値に取って代わるかどうかをあなたが知る必要がある場合は、キーに基づく添え字を使うのではなくこのメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method only if you need the concrete range it produces.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが生成する具体的な範囲をあなたが必要とする場合にのみ、このメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to append a single element to the end of a mutable array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使ってある単一の要素を可変の配列の終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to append the elements of a sequence to the end of this array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで、あるシーケンスに属する要素をこの配列の終わりに追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to calculate the full result of a product that would otherwise overflow.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで、そうしなければオーバーフローするであろう積の完全な結果を計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to calculate the quotient and remainder of a division at the same time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、除算の商と余りを同時に計算してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to extend this key path to the value type of another key path.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで、このキーパスを別のキーパスの値型にまで広げてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to generate a floating-point value within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある浮動小数点値を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to generate a floating-point value within a specific range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、特定の範囲の内のある浮動小数点値を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to generate a random Boolean value when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、無作為なブール値を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to generate an integer within a specific range when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to generate an integer within a specific range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、特定の範囲の内のある整数を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to receive a dictionary of non-optional values when your transformation can produce an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで非オプショナル値の辞書を受け取ってください、あなたの変換がオプショナル値を生成しうる時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to receive a sequence of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで非オプショナル値のシーケンスを受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準コレクションを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to receive a single-level sequence when your transformation produces a sequence or collection for each element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの変換が各要素に対してひとつのシーケンスまたはコレクションを生成する場合に、このメソッドを使って単一水準シーケンスを受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to receive an array of non-optional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで非オプショナル値の配列を受け取ってください、あなたの変換がオプショナル値を生成する時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to receive an array of nonoptional values when your transformation produces an optional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたの変換がオプショナル値を生成する場合に、このメソッドを使って非オプショナル値からなる配列を受け取ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to remove every element in a collection that meets particular criteria.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、コレクションの中の、特定の基準に合うすべての要素を除去してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to retrieve the value of this result if it represents a success, or to catch the value if it represents a failure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うことで、この結果の値を回収してください、もしそれが成功を表すならば、またはそれが失敗を表すならばその値をキャッチしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method to toggle a Boolean value from true to false or from false to true.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使って、ブール値をtrueからfalseへとまたはfalseからtrueへと切り替えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method when you have a buffer of memory bound to one type and you need to access that memory as a buffer of another type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使うのは、あなたがある型に束縛されるメモリのバッファを持つ、そしてあなたがそのメモリに別の型のバッファとしてアクセスする必要がある場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method when you have a pointer to memory bound to one type and you need to access that memory as instances of another type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを、あなたがある型に束縛されたメモリへのポインタを持つ、そしてあなたがそのメモリに別の型のインスタンスとしてアクセスする必要がある場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method when you have a raw pointer to memory that has already been bound to the specified type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがすでに指定された型へ束縛されているメモリに対する生のポインタを持つ場合に、このメソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method when you need random binary data to generate another value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを、あなたが無作為バイナリデータを別の値を生成するために必要とする場合に使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method when you need to transform the value of a Result instance when it represents a failure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使ってください、あなたがResultインスタンスの値をそれが失敗を表す場合に変換する必要がある時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this method when you need to transform the value of a Result instance when it represents a success.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを使ってください、あなたがResultインスタンスの値をそれが成功を表す場合に変換する必要がある時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this operator to append the elements of a sequence to the end of range-replaceable collection with same Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この演算子を使って、あるシーケンスに属するいくらかの要素を同じElement型を持つ範囲置換可能なコレクションの終わりに加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this property in conjunction with hasPointerRepresentation to determine whether a static string with pointer representation stores an ASCII or UTF-8 code unit sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティをhasPointerRepresentationと連携して使って、ポインタ表現をもつある静的文字列がASCIIまたはUTF-8コード単位シーケンスを格納するかを判定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this subscript when you want either the value for a particular key or, when that key is not present in the dictionary, a default value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが特定のキーに対する値または、そのキーが辞書の中に存在しない時、省略時の値のどちらかを望む場合は、この添え字を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this value to estimate how much additional capacity will be needed for the interpolated segments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この値を使って、どのくらい多くそれ以上の容量が補間される文節に対して必要とされるか見積もってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use typed pointers and buffers to access memory as instances of a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付きのポインタとバッファを使って、メモリに特定の型のインスタンスとしてアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use wrappers, indices, and iterators in operations like slicing, flattening, and reversing a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ラッパー、インデックス、そしてイテレータを、コレクションのスライス（切出し）、平坦化、反転のような演算で使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use your custom types in operations that depend on testing for equality or order and as members of sets and dictionaries.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのあつらえの型を、同等性や順番を調べることに基づく演算の中で、そして集合および辞書のメンバとして使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Useful mostly to recover the ability to use for…in, given just an iterator i:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>主として有用なのはfor…inを使う能力を、ただイテレータiを与えるだけで獲得することです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User-Relevant Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユーザ関連のエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Uses the nearest ancestor’s implementation of customMirror to create a mirror for that ancestor.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>最も近い先祖のもつcustomMirrorの実装を使って、その先祖に対するミラーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Delegates to Customize Object Behavior</seg>
      </tuv>
      <tuv lang="JA">
        <seg>委任先を使ってオブジェクト挙動をカスタマイズする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Enumerations as Errors</seg>
      </tuv>
      <tuv lang="JA">
        <seg>列挙をエラーとして使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Imported Boolean values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたブール値を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Imported C Functions in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたC関数をSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Imported C Macros in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたCマクロをSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Imported C Structs and Unions in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたC構造体と共用体をSwiftで使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Imported Lightweight Generics in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされた軽量総称体をSwiftにおいて使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Imported Protocol-Qualified Classes in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>インポートされたプロトコル適格クラスをSwiftにおいて使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Iterators Directly</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イテレータを直に使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Key-Value Observing in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftにおいてキー値監視を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Multiple Iterators</seg>
      </tuv>
      <tuv lang="JA">
        <seg>複数のイテレータを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Objective-C Runtime Features in Swift</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cランタイム機能をSwiftで使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Slice instance with a mutable collection requires that the base collection’s subscript(_: Index) setter does not invalidate indices.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Sliceインスタンスを可変コレクションで使うことは、基底コレクションのもつsubscript(_: Index)セッターがインデックスを無効にしないことを必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Boolean as a Data Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ブール値をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Closed Range as a Collection of Consecutive Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲を隣接値のコレクションとして使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Dictionary as a Data Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Double as a Data Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>不動小数点数をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Partial Range as a Sequence</seg>
      </tuv>
      <tuv lang="JA">
        <seg>部分範囲をシーケンスとして使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a Range as a Collection of Consecutive Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>範囲を隣接値のコレクションとして使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a String as a Data Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a negative number or an index equal to or greater than count triggers a runtime error.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負数をまたはcountと等しいかより大きいインデックスを使うことは、実行時エラーを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a negative value as rhs is the same as performing a left shift using abs(rhs).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsとして負の値を使うことは、abs(rhs)を使って左シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a negative value as rhs is the same as performing a right shift with abs(rhs).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負の値をrhsとして使うことは、abs(rhs)を使って右シフトを実行するのと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a negative value for rhs performs a left shift using abs(rhs).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsに負の値を使うことは、abs(rhs)を使って左シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a negative value for rhs performs a right shift using abs(rhs).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsに負の値を使うことは、abs(rhs)を使って右シフトを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a sequence’s iterator directly gives you access to the same elements in the same order as iterating over that sequence using a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるシーケンスのもつイテレータを直に使うことは、あなたにfor-inループを使ってそのシーケンスに反復するのと同じ要素に同じ順序でアクセスすることを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a value for rhs that is greater than or equal to the bit width of lhs is an overshift, resulting in zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsにlhsのビット幅より大きいか等しい値を使うことは、オーバーシフト、ゼロという結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a value for rhs that is greater than or equal to the bit width of lhs is an overshift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsにlhsのビット幅より大きいか等しい値を使うことは、オーバーシフトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using an Integer as a Data Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>整数をデータ値として使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using an Option Set Type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オプションセット型を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using any other value for rhs performs a left shift on lhs by that amount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsに何か他の値を使うことは、左シフトをlhs上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using any other value for rhs performs a right shift on lhs by that amount.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>rhsに何か他の値を使うことは、右シフトをlhs上でその量だけ行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using different groups of properties in the two methods can lead to unexpected behavior or performance when using your custom type in sets and dictionaries.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なるプロパティのグループを２つのメソッドにおいて使うことは、あなたのカスタム型を集合および辞書で使う場合に、予期しない挙動または性能に導きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using structures makes it easier to reason about a portion of your code without needing to consider the whole state of your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>構造体を使うことは、あなたのアプリの全体の状態を考える必要なしに、あなたのコードの一部について結論を下すことを簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the forEach method is distinct from a for-in loop in two important ways:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forEachメソッドを使うことは、for-inループとは２つの重要なやり方においてまったく異なります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>prefix(through:)メソッドを使うことは、部分的な完結範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>prefix(upTo:)メソッドを使うことは、部分的な半開範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>return文をbodyクロージャにおいて使うことは、ただ現在のbodyへの呼び出しから抜け出すだけです、全く外側のスコープからではなくて、そして続いて起こる呼び出しを飛ばしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>suffix(from:)メソッドを使うことは、インデックスからの部分的範囲をコレクションのもつ添え字として使うことと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the lazy property gives the standard library explicit permission to store the closure and the sequence in the result, and defer computation until it is needed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>lazyプロパティを使うことは、標準ライブラリにクロージャと結果のシーケンスを保管する明示的な許可を与えます、そして計算をそれが必要とされるまで遅らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the Nil-Coalescing Operator</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nil合体演算子を使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the closed range operator (...) to form ClosedRange instances is preferred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>完結範囲演算子（...）を使ってClosedRangeインスタンスを形成することが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the half-open range operator (..&lt;) to form Range instances is preferred.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>半開範囲演算子（..&lt;）を使ってRangeインスタンスを形成することが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the raw value of a conforming type streamlines interoperation with Objective-C and legacy APIs and simplifies conformance to other protocols, such as Equatable, Comparable, and Hashable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>準拠する型の生の値を使うことは、Objective-CおよびレガシーAPIとの相互運用を能率的にします、そして他のプロトコル、例えばEquatable、Comparable、およびHashableなどへの準拠を簡単にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using this approach is prone to mistakes for a few reasons, in ways that can lead to bugs and make it harder to reason about your code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この取り組みを使うことは、2、3の理由から間違いを起こす傾向があります、バグに至りうるそしてあなたのコードについて論じることをより困難にするやり方で：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using this initializer is equivalent to initializing a string with an empty string literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このイニシャライザを使うことは、ある文字列を空の文字列リテラルで初期化するのと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using this method with types that have a noninteger Stride may result in an approximation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このメソッドを非整数Strideを持つ型とともに使うことは、近似値という結果になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using this property directly is discouraged.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このプロパティを直接に使うことは、推奨されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有効なインデックスは、各要素の位置、および添え字引数として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>有効なインデックスは、各要素の位置、および添え字として使うのに有効でない“終わりを過ぎた”位置から成ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExtendedGraphemeClusterLiteralTypeに対して有効な型は、Character、String、そしてStaticStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid types for FloatLiteralType are Float, Double, and Float80 where available.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>FloatLiteralTypeに対して有効な型は、Float、Double、そして利用可能なところではFloat80です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid types for StringLiteralType are String and StaticString.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>StringLiteralTypeに対する有効な型は、StringとStaticStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnicodeScalarLiteralTypeに対する有効な型は、Unicode.Scalar、Character、String、そしてStaticStringです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Value</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Value Literals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Value conversion from one integer type to another.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある整数型から別のものへの値変換。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values and Collections</seg>
      </tuv>
      <tuv lang="JA">
        <seg>値とコレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variation selectors allow rendering engines that support them to choose different glyphs to display for a particular code point.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異字体セレクタそれらは、レンダリングエンジンがそれらをサポートすることで種々の字体を選んで特定のコード点に対して表示することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Void Type</seg>
      </tuv>
      <tuv lang="JA">
        <seg>void型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WARNING: this initializer is not memory-safe!</seg>
      </tuv>
      <tuv lang="JA">
        <seg>警告：このイニシャライザはメモリ安全ではありません！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Warning</seg>
      </tuv>
      <tuv lang="JA">
        <seg>警告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Warning: All buffer elements must be initialized before calling this.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>警告：全てのバッファ要素はこれを呼び出す前に初期化されなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What’s more, when implemented using specific criteria, adoption of this protocol requires no extra work on your part.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>おまけに、特定の基準を使って実装される時、このプロトコルの採用はあなたの方での余分な作業を必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When error is an empty string, lhs evaluates to true and rhs is not evaluated, skipping the call to majorErrors.contains(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>errorが空の文字列である時、lhsがtrueに評価して、rhsは評価されず、majorErrors.contains(_:)への呼び出しを省きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When error is not an empty string, lhs evaluates to false and rhs is evaluated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>errorが空の文字列ではない時、lhsがfalseに評価して、rhsは評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When letterCounts[letter, defaultValue: 0] += 1 is executed with a value of letter that isn’t already a key in letterCounts, the specified default value (0) is returned from the subscript, incremented, and then added to the dictionary under that key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>letterCounts[letter, defaultValue: 0] += 1がletterの値でまだletterCountsの中のキーでないものと実行される場合、指定された値（0）が添え字から返されて、漸増されて、それから辞書へとそのキーのもと追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When letters.reduce(into:_:) is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>letters.reduce(into:_:)が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When measurements.count is equal to zero, lhs evaluates to false and rhs is not evaluated, preventing a divide-by-zero error in the expression sum / Double(measurements.count).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>measurements.countがゼロに等しい時、lhsがfalseに評価して、rhsは評価されず、式sum / Double(measurements.count)でのゼロによる除算を防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When measurements.count is greater than zero, lhs evaluates to true and rhs is evaluated.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>measurements.countがゼロより大きい時、lhsがtrueに評価して、rhsは評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When numbers.reduce(_:_:) is called, the following steps occur:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>numbers.reduce(_:_:)が呼び出される時、以下の段階が生じます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When nil is passed, the label is omitted.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>nilが渡される場合、ラベルは省かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When pointee is used as the left side of an assignment, the instance must be initialized or this pointer’s Pointee type must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pointeeが引数の左側として使われる場合、インスタンスは初期化されなければなりません、またポインタのもつPointee型は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When count is passed to the printInfo(_:) function, however, the value parameter has a static type of Any (the type declared for the parameter) and a dynamic type of Int.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>countがprintInfo(_:)関数に渡される場合は、しかしながら、valueパラメータはAnyの静的型（このパラメータに対して宣言された型）そしてIntの動的型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When id values are imported into Swift as Any, the runtime automatically handles bridging back to either class references or value types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>id値がスウィフトへAnyとしてインポートされる時、ランタイムはクラス参照または値型のどちらかへの逆のブリッジを自動的に取り扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When printGenericInfo(_:) is called with a string that has P as its static type, the call to type(of:) returns P.self instead of String.self (the dynamic type inside the parameter).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>printGenericInfo(_:)が、Pをそれの静的型として持つ文字列とともに呼ばれる時、type(of:)への呼び出しはP.selfを返します、String.self（パラメータの内部の動的型）ではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When notSoGoodNumber is initialized, Int("invalid-input") fails and returns nil, and so Int("42") is called to supply a default value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>notSoGoodNumberが初期化されるとき、Int("invalid-input")は失敗してnilを返します、そうするとInt("42")が呼び出されて省略時の値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When notSoGoodNumber is initialized, Int("invalid-input") fails and returns nil, and so the getDefault() method is called to supply a default value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>notSoGoodNumberが初期化されるとき、Int("invalid-input")は失敗してnilを返します、そうするとgetDefault()メソッドが呼び出されて省略時の値を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Swift code imports Objective-C APIs, the importer replaces Foundation reference types with their corresponding value types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SwiftコードがObjective-C APIをインポートする場合、インポータはFoundation参照型をそれらの対応する値型で置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Swift imports APIs that have not been annotated, the compiler cannot automatically memory-manage the returned Core Foundation objects.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>注釈をつけられなかったAPIをSwiftがインポートする場合、コンパイラは返されたCore Foundationオブジェクトを自動的にメモリ管理できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When Swift imports Core Foundation types, the compiler remaps the names of these types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>スウィフトがCore Foundation型をインポートするとき、コンパイラはこれらの型の名前をリマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When U+200C ZERO WIDTH NON-JOINER is inserted between two characters, it directs the rendering engine to render them separately/disconnected when it might otherwise render them as a ligature.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>U+200C ZERO WIDTH NON-JOINER（ゼロ幅非接合子）が２つの文字の間に挿入される時、それはレンダリングエンジンにそれらを個別に／分離して描写するよう指図します、それがそうでなければそれらを合字として描出するかもしれない時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When U+200D ZERO WIDTH JOINER is inserted between two characters, it directs the rendering engine to render them as a connected glyph when it would otherwise render them independently.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>U+200D ZERO WIDTH JOINER（ゼロ幅接合子）が２つの文字の間に挿入される時、それはレンダリングエンジンにそれらをある結合される字体として描写するように指図します、それがそうでなければそれらを独立して描出するであろう時に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a closed range uses integers as its lower and upper bounds, or any other type that conforms to the Strideable protocol with an integer stride, you can use that range in a for-in loop or with any sequence or collection method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある完結範囲がそれの下側および上側の境界として整数を使う、または整数歩幅を使うStrideableプロトコルに準拠する何らかの他の型を使う場合、あなたはその範囲をfor-inループにおいて、または何らかのシーケンスまたはコレクションのメソッドで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a dictionary outgrows its buffer, existing indices may be invalidated without any notification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書がそれのバッファより大きくなる時、既存のインデックスは何の通知もなしに無効にされるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a dictionary’s Value type has value semantics, you can use this subscript to perform in-place operations on values in the dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある辞書の持つValue型が値意味論を持つ場合、あなたはこの添え字を使うことで、辞書の中の値の上でその場での演算を実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a literal expression is written with no type information, Swift uses these type aliases to determine what type to use for the expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>リテラル表現が型情報なしで記述される時、Swiftはこれらの型エイリアスを使ってどの型をその式に使うか決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a partial range uses integers as its lower and upper bounds, or any other type that conforms to the Strideable protocol with an integer stride, you can use that range in a for-in loop or with any sequence method that doesn’t require that the sequence is finite.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲がそれの下側および上側の境界として整数を使う、または整数歩幅を使うStrideableプロトコルに準拠する何らかの他の型を使う場合、あなたはその範囲をfor-inループにおいて、またはシーケンスが有限であることを必要としない何らかのシーケンスのメソッドで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a range uses integers as its lower and upper bounds, or any other type that conforms to the Strideable protocol with an integer stride, you can use that range in a for-in loop or with any sequence or collection method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある範囲がそれの下側および上側の境界として整数を使う、または整数歩幅を使うStrideableプロトコルに準拠する何らかの他の型を使う場合、あなたはその範囲をfor-inループにおいて、または何らかのシーケンスまたはコレクションのメソッドで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a string’s contiguous storage fills up, a new buffer must be allocated and data must be moved to the new storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある文字列の隣接ストレージがいっぱいになるとき、新しいストレージが割り当てられる必要があり、データは新しいストレージに移動される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When accessing a computed property corresponding to a bit field, Swift automatically converts the value to and from compatible Swift types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるビットフィールドに対応している計算プロパティにアクセスするとき、スウィフトはその値を自動的に互換性のあるスウィフト型へと、またはそれから、変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When allocating memory for multiple instances of T using an unsafe pointer, use a multiple of the type’s stride instead of its size.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tの複数のインスタンスに対して安全でないポインタを使ってメモリをアロケートする場合、それの大きさではなく、その型の持つストライドの倍数を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an array has additional capacity and is not sharing its storage with another instance, appending an element is O(1).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列がさらなる容量を持っていてそれのストレージを別のインスタンスと共有していない場合、ある要素を追加することはO(1)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an array needs to reallocate storage before appending or its storage is shared with another copy, appending is O(n), where n is the length of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>配列が追加の前にストレージの際割り当てを必要とするかそれのストレージを別のコピーと共有する場合、追加作業はO(n)です、そこでnは配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an event occurs—such as a user resizing a window—a class that's a delegator will detect the event and call delegate methods on the class you specify as the delegate.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>イベントが発生する場合 — 例えばユーザがウインドウをリサイズするなど — 委任元であるクラスはイベントを検出します、そしてあなたが委任先として指定するクラス上で委任先メソッドを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an existing element is inserted, the classDays set does not change.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>既存の要素が挿入される時、classDays集合は変化しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When building an app target, you can provide a custom name for the product module by changing the Product Module Name build setting.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリターゲットをビルドする場合、あなたはあつらえの名前を製品モジュールに提供することがProduct Module Name build設定を変更することによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function or method with an UnsafeMutablePointer parameter, you can pass an instance of that specific pointer type or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数やメソッドをUnsafeMutablePointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡すか、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function or method with an UnsafeMutableRawPointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数やメソッドをUnsafeMutableRawPointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function or method with an UnsafePointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数やメソッドをUnsafePointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function or method with an UnsafeRawPointer parameter, you can pass an instance of that specific pointer type, pass an instance of a compatible pointer type, or use Swift’s implicit bridging to pass a compatible pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数やメソッドをUnsafeRawPointerパラメータとともに呼び出すとき、あなたはその特定のポインタ型のインスタンスを渡す、互換ポインタ型のインスタンスを渡す、またはSwiftの暗黙的ブリッジを使って互換ポインタを渡すことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function that takes a C function pointer argument, you can pass a top-level Swift function, a closure literal, a closure declared with the @convention(c) attribute, or nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C関数ポインタ引数を取る関数を呼び出す場合、あなたはトップレベルスウィフト関数、クロージャリテラル、@convention(c)属性で宣言されるクロージャ、またはnilを渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function that takes a pointer as a parameter, you can use implicit casting to pass a compatible pointer type or implicit bridging to pass a pointer to a variable or the contents of an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタをパラメータとして取る関数を呼び出す場合、あなたは、暗黙的なキャストを使って互換性のあるポインタ型を渡すか、暗黙的なブリッジを使ってポインタを変数または配列の内容に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling a function with a KeyValuePairs parameter, you can pass a Swift dictionary literal without causing a Dictionary to be created.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数をKeyValuePairsパラメータで呼び出す場合、あなたはSwift辞書リテラルを、あるDictionaryが作成されることを生じさせないで渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling the initialize(from:) method on a buffer b, the memory referenced by b must be uninitialized or the Element type must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initialize(from:)メソッドをバッファb上で呼び出す場合、bによって参照されるメモリは未初期化でなければなりません、またはElement型が自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling the initializeMemory(as:from:) method on a buffer b, the memory referenced by b must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing S.Element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>initializeMemory(as:from:)メソッドをバッファb上で呼び出す場合、bによって参照されるメモリは未初期化であるか自明型に初期化される必要があります、そしてS.Elementにアクセスするために適切にアラインされなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When calling the new Int initializer within a do statement, you can use pattern matching to match specific cases of your custom error type and access their associated values, as in the example below.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この新しいIntイニシャライザをdo文内部で呼び出すとき、あなたはパターンマッチを使ってあなたのあつらえのエラー型のそれぞれ詳述なケース節と照合して、それらの関連値にアクセスします、下の例でのように。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When comparing two values with this method, -0 is equal to +0.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>２つの値をこのメソッドで比較する場合、-0は+0と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When converting floating-point values, the init?(exactly:) initializer checks both that the passed value has no fractional part and that the value is representable in the resulting type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>浮動小数点値を変換するとき、init?(exactly:)イニシャライザは、渡された値が小数部を持たないこと、そしてその値が結果となる型の中に表現可能であることの両方を検査します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating a custom collection type, add the minimal requirements of the Collection protocol: starting and ending indices and a subscript for accessing elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえのコレクション型を作成する場合、Collectionプロトコルの最小限の要件：始まりと終わりのインデックスおよび要素にアクセスするための添え字、を加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating an option set, include a rawValue property in your type declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプションセットを作成する場合は、rawValueプロパティをあなたの型宣言に加えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating your own option set, implement this initializer with a fixed-width integer, like Int, as the RawValue type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなた独自のオプションセットを作成する時、このイニシャライザを固定長整数、IntなどをRawValue型として使って実装してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When declarations in an Objective-C header file refer to a Swift class or protocol that comes from the same target, importing the generated header creates a cyclical reference.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Objective-Cヘッダファイルの中の宣言がその同じターゲットからやってくるSwiftクラスまたはプロトコルを参照する場合、生成ヘッダのインポートは循環参照を生み出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When declaring a function or method, you don’t need to specify a return type if no value will be returned.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>関数またはメソッドを宣言するとき、値が返されることがないならばあなたは戻り型を指定する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When defining your own custom enumeration, you give it a raw type by specifying the raw type as the first item in the enumeration’s type inheritance list.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなた独自のあつらえの列挙を定義している場合、あなたはそれに生の型を与えることを、その生の型を列挙の型継承リストの最初の項目として指定することによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When implementing a custom type that conforms to the SetAlgebra protocol, you must implement the required initializers and methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>SetAlgebraプロトコルに準拠するあつらえの型を実装する場合、あなたは必須イニシャライザとメソッドを実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When implementing an ExpressibleByStringInterpolation conformance, set the StringInterpolation associated type to DefaultStringInterpolation to get the same interpolation behavior as Swift’s built-in String type and construct a String with the results.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ExpressibleByStringInterpolation準拠を実装する場合は、StringInterpolation関連型をDefaultStringInterpolationに設定することで、Swiftの組込みString型と同じ補間挙動を取得してください、そしてあるStringをその結果で組み立ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When implementing lazy operations, wrapping elements instead of self can prevent result types from growing an extra LazySequence layer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>遅延に演算を実装するとき、elementsをselfの代わりにラップすることは、結果の型を余分のLazySequenceレイヤが増大することを防ぎます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When implementing the == method and the hash(into:) method, use all the properties that affect whether two instances of your custom type are considered equal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>==メソッドとhash(into:)メソッドを実装する場合、あなたのカスタム型の２つのインスタンスが等しいと考えられるどうかに影響するすべてのプロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When imported into Swift, the macros in the above example are equivalent to these constant declarations:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftへとインポートされる場合、上の例でのマクロは、これら定数宣言に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When importing C function parameters, however, Swift maps pointer parameters to standard library pointer types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>C関数パラメータをインポートする場合、しかしながら、Swiftはポインタパラメータを標準ライブラリのポインタ型へとマップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When importing the Foundation framework, the Swift overlay provides value types for many bridged reference types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Foundationフレームワークをインポートする場合、Swiftオーバーレイは値型を多くのブリッジされる参照型に対して提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When importing these types, Swift moves them to be nested types of their related types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それらの型をインポートするとき、スウィフトはそれらを移動して、それらの関連型の入れ子にされた型にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When iterated over, keys appear in this collection in the same order as they occur in the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてにわたって反復した場合、それらが辞書のキー値ペアにおいて現れるのと同じ順序で、キーはこのコレクションにおいて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When iterated over, values appear in this collection in the same order as they occur in the dictionary’s key-value pairs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>すべてにわたって反復した場合、それらが辞書のキー値ペアにおいて現れるのと同じ順序で、値はこのコレクションにおいて現れます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When negative integers are extended, the result is padded with ones.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>負整数が拡張される時、結果は１で詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When nonnegative integers are extended, the result is padded with zeroes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>非負整数が拡張される時、結果はゼロで詰め物をされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When performing collection-based operations that return an index into a dictionary, use this subscript with the resulting value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある辞書に対してのコレクション基盤インデックスを返す演算を実行する時、この添え字を結果の値とともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When placed next to each other in a string literal, these two scalar values are combined into a single grapheme cluster, represented by a Character instance in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるSwift文字列リテラルにおいて互いに隣り合わせに置かれる時、これら２つのスカラー値は、Swiftでは１つのCharacterインスタンスによって表される、単一の書記素クラスタへと一体化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When providing new APIs that use randomness, provide a version that accepts a generator conforming to the RandomNumberGenerator protocol as well as a version that uses the default system generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>無作為さを使う新しいAPIを提供する場合、RandomNumberGeneratorプロトコルに準拠する生成子を受け取るバージョンを、それだけでなく省略時のシステム生成子を使うバージョンも提供してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When reading from  memory as raw bytes when that memory is bound to a type, you must ensure that you satisfy any alignment requirements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリから読みだしをそのメモリがある型に束縛される時に生のバイトとして行う場合、あなたがあらゆるアライメント要件を満たすことを確実にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When reading from or writing to  memory as raw bytes when that memory is bound to a type, you must ensure that you satisfy any alignment requirements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリから読みだしや書き込みをそのメモリがある型に束縛される時に生のバイトとして行う場合、あなたがあらゆるアライメント要件を満たすことを確実にしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When reading from the pointee property, the instance referenced by this pointer must already be initialized.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>pointeeプロパティから読み出している時、このポインタによって参照されるインスタンスは既に初期化されていなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それが起こる場合、修正されている配列はそれのストレージを独自な自分だけの自身のコピーと置き換え、それはそれからそこで修正されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the forceASCII parameter is true, a Unicode.Scalar instance with a value greater than 127 is represented using an escaped numeric value; otherwise, non-ASCII characters are represented using their typical string value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>forceASCIIパラメータがtrueである場合、127より大きい値をもつUnicode.Scalarインスタンスはエスケープされた数的な値を使って表されます、そうでなければ、非ASCIIはそれらの典型的な文字列値を使って表されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the label component in not nil, it may represent the name of a stored property or an active enum case.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>labelコンポーネントがnilでない場合、それは格納プロパティの名前またはアクティブなenumケース節の名前を表すかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the additive inverse of a value is unrepresentable in a conforming type, the operation should either trap or return an exceptional value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ある値の加法の逆元が準拠する型において表現可能でない場合、演算は例外値をトラップまたは返すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the app is first opened, the user is unknown, so the state of the app could be called unregistered.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アプリが最初に開かれた時、ユーザは誰か分かりません、それでアプリの状態は無登録と呼ぶことができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the bit width of T (the type of source) is equal to or greater than this type’s bit width, the result is the truncated least-significant bits of source.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>T（sourceの型）のビット幅がこのかたのビット幅と等しいかより大きいならば、結果はsourceの先端を切った最下位ビットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the bit width of T is less than this type’s bit width, the result is sign-extended to fill the remaining bits.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Tのビット幅がこの型のビット幅より小さいならば、結果は残りのビットを満たすように符号拡張されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the collection passed to relative(to:) starts with a different index, that index is used as the lower bound instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>relative(to:)に渡されるコレクションが異なるインデックスで始まる場合、そのインデックスは代わりに下側の境界として使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the context provides enough type information, you can use a special form of the dictionary literal, square brackets surrounding a single colon, to initialize an empty dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文脈が十分な型情報を提供する場合、あなたは特別な形式の辞書リテラル、ただ１つのコロンを囲んでいる角括弧、を使って空の辞書を初期化することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the destination array’s element type is a class or an @objc protocol, bridging from NSArray to Array first calls the copy(with:) (- copyWithZone: in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先配列の持つ要素型があるクラスまたはある@objcプロトコルである場合、NSArrayからArrayへのブリッジはまずcopy(with:)（Objective-Cでの- copyWithZone:）メソッドをその配列上で呼び出すことである不変のコピーを取得します、そしてそれから追加のSwift簿記作業を実行します、それはO(1)時間をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from NSArray to Array performs a bridging copy of the elements to contiguous storage in O(n) time.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>行き先配列の持つ要素型が非クラス型でFoundation型にブリッジする場合、NSArrayからArrayへのブリッジはそれら要素のコピーを隣接ストレージにブリッジすることをO(n)時間で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the dictionary’s Key and Value types are neither classes nor @objc protocols, any required bridging of elements occurs at the first access of each element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書のKeyとValue型がクラスでも@objcプロトコルでもない場合、それら要素のブリッジに必要とされるあらゆることが各要素の最初のアクセスで起こります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the original numbers array is modified, it makes a unique copy of its storage before making the modification.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>オリジナルのnumbers配列が修正されるとき、それはそれのストレージの特有なコピーをその修正がなされる前に行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the return value is false, the value of i is equal to limit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>戻り値がfalseの場合、iの値はlimitに等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the sequence has been exhausted, the next() method returns nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そのシーケンスが使い尽くされたならば、next()メソッドはnilを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the sequence is exhausted, the accumulating value is returned to the caller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが使い尽くされる時、蓄積値が呼び出し側へ返されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the sequence is exhausted, the last value returned from the closure is returned to the caller.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>シーケンスが使い尽くされる時、クロージャから返される最後の値が呼び出し側へ帰されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the set’s Element type is neither a class nor an @objc protocol, any required bridging of elements occurs at the first access of each element, so the first operation that uses the contents of the set (for example, a membership test) can take O(n).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>集合の持つElement型がクラスでも@objcプロトコルでもない場合、要素のブリッジに必要なあらゆることが要素それぞれの最初のアクセスで起こります、それで集合の内容を使う最初の演算（例えば、帰属テスト）は、O(n)をとります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the static type of the value passed to type(of:) is constrained to a class or protocol, you can use that metatype to access initializers or other static members of the class or protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>type(of:)に渡される値の静的型があるクラスまたはプロトコルに制約される場合、あなたはそのメタタイプを使うことでイニシャライザやそのクラスまたはプロトコルの他の静的メンバーにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the subscript is used as the left side of an assignment, the memory at p + i must be initialized or the pointer’s Pointee type must be a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>添え字が引数の左側で使われる場合、p + iでのメモリは初期化されなければなりません、またポインタのもつPointee型は自明型でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When these invalid strings are parsed by the Double failable initializer, the example uses the nil-coalescing operator (??) to provide NaN as a fallback value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>それら無効な文字列がDoubleの失敗できるイニシャライザによって解析される場合のため、この例はnil合体演算子（??）を使ってNaNをフォールバック（頼みの綱の、予備の）値として提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When used to access the elements of the flag string itself, however, the secondCodeUnit index does not correspond to the position of a specific character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>flag文字列それ自身の要素へのアクセスに使われる場合は、しかしながら、secondCodeUnitインデックスは特定の文字の位置に該当しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using offset(of:) with a type imported from a library, don’t assume that future versions of the library will have the same behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>offset(of:)をあるライブラリからインポートされる型で使う場合、そのライブラリの将来のバージョンが同じ挙動を持つと決めてかからないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using a CaseIterable type, you can access a collection of all of the type’s cases by using the type’s allCases property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>CaseIterable型を使う場合、あなたはその型の持つケース節の全てからなるコレクションにアクセスすることが、その型の持つallCasesプロパティを使うことで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using an empty array literal, specify the type of the variable or constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>空の配列リテラルを使う時は、変数または定数の型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using custom types to model data in your programs, you may frequently need to check whether two values are the same or different, or whether a particular value is included in a list of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あつらえの型を使ってあなたのプログラムにおいてデータをモデル化する場合、あなたは２つの値が同じか異なるか、または特定の値が値のリストに含まれるかどうかを調べる必要がしばしばあるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When working with a mirror that reflects a bidirectional or random access collection, you may find it useful to “upgrade” instances of this type to AnyBidirectionalCollection or AnyRandomAccessCollection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>双方向性のまたはランダムなアクセスのコレクションをリフレクとするミラーを扱う場合、あなたはこの型のインスタンスをAnyBidirectionalCollectionまたはAnyRandomAccessCollectionに「アップグレード」することが役立つのを発見するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you access memory through an UnsafeMutablePointer instance, the Pointee type must be consistent with the bound type of the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがメモリにUnsafeMutablePointerインスタンスを通してアクセスする時、Pointee型はそのメモリの束縛される型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you access memory through an UnsafePointer instance, the Pointee type must be consistent with the bound type of the memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがメモリにUnsafePointerインスタンスを通してアクセスする時、Pointee 型はそのメモリの束縛される型と一致しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがいくらかの要素を配列に加えてその配列がそれの確保した容量を越え始める時、配列はより大きなメモリ領域を割り当てて、それの要素をその新しいストレージ（貯蔵場所）にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you add to or subtract from a raw pointer, the result is a new raw pointer offset by that number of bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが生のポインタに加算または減算する時、結果はそのバイト数をオフセットした（補った、埋め合わせた）新しい生のポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you add to or subtract from an UnsafeMutablePointer instance, the result is a new pointer of the same type, offset by that number of instances of the Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUnsafeMutablePointerインスタンスに加えたりそれから引いたりする場合、結果は同じ型の新しいポインタです、Pointee型のインスタンスの数によってオフセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you add to or subtract from an UnsafePointer instance, the result is a new pointer of the same type, offset by that number of instances of the Pointee type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUnsafePointerインスタンスに加えたりそれから引いたりする場合、結果は同じ型の新しいポインタです、Pointee型のインスタンスの数によってオフセットします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you allocate memory, always remember to deallocate once you’re finished.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがメモリをアロケートする場合、あなたがやり終えるやいなやデアロケートするのを常に忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you are operating on many values, this behavior is valuable because operations on NaN simply forward the value and don’t cause runtime errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが沢山の値に演算を行っている時、この挙動は有益です、なぜならNaNに関する演算は単にその値を次に伝えて実行時エラーを起こさないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you assign a value for a key and that key already exists, the dictionary overwrites the existing value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある値をあるキーに割り当てるそしてそのキーが既に存在する場合、辞書は既存の値を上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a C function using a String, Swift automatically creates a buffer of UTF-8 code units and passes a pointer to that buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがC関数をStringを使って呼び出すとき、Swiftは自動的にUTF-8コード単位のバッファを作成してポインタをそのバッファへ渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function that does not fully specify its parameters’ types, use the type-cast operator (as) to specify the type of an array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが完全にそれのパラメータの型を指定しない関数を呼び出す場合は、型キャスト演算子（as）を使って配列リテラルの型を指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function that is declared as taking an AutoreleasingUnsafeMutablePointer&lt;Type&gt;, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがAutoreleasingUnsafeMutablePointer&lt;Type&gt;をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function that is declared as taking an UnsafeMutablePointer&lt;Type&gt; argument, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUnsafeMutablePointer&lt;Type&gt;引数をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function that is declared as taking an UnsafeMutableRawPointer argument, you can pass the same operands as UnsafeMutablePointer&lt;Type&gt;, but for any type as Type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUnsafeMutableRawPointer引数を取ると宣言される関数を呼び出す場合、あなたはUnsafeMutablePointer&lt;Type&gt;と同じ演算数を、しかしTypeであるあらゆる型に対して、渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function that is declared as taking an UnsafePointer&lt;Type&gt; argument, you can pass any of the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUnsafePointer&lt;Type&gt;引数をとるように宣言される関数を呼び出す場合、あなたは以下のどれでも渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call a function that takes an UnsafeRawPointer argument, you can pass the same operands as UnsafePointer&lt;Type&gt;, but with any type as Type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがUnsafeRawPointer引数を取る関数を呼び出す場合、あなたはUnsafePointer&lt;Type&gt;と同じ演算数を、しかしTypeであるあらゆる型で、渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you call methods that use random data, such as creating new random values or shuffling a collection, you can pass a RandomNumberGenerator type to be used as the source for randomness.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが無作為データを使うメソッドを呼び出す場合、例えば新しい無作為値を作成するまたはコレクションをシャッフルするなど、あなたはRandomNumberGenerator型を渡して、無作為さの出典として使われるようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create a binary integer from a floating-point value using the default initializer, the value is rounded toward zero before the range is checked.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがバイナリ整数をある浮動小数点力省略時のイニシャライザを使って作成するとき、その値は範囲が検査される前にゼロへの丸めをされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create a constant or variable using one of the Boolean literals true or false, the resulting type is determined by the BooleanLiteralType alias.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが定数や変数をブールリテラルtrueまたはfalseを使って作成するとき、結果の型はBooleanLiteralTypeエイリアスによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create a slice of a string, a Substring instance is the result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある文字列のスライスを作成している場合、Substringインスタンスが結果です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create an index into a reversed collection using base, an index from the underlying collection, the resulting index is the position of the element before the element referenced by base.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが逆にされたコレクションへのインデックスを、基礎をなすコレクションからのインデックスbaseを使って作成する時、結果のインデックスはbaseによって参照される要素の前の要素の位置です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you create an observer, you start observation by calling the observe(_:options:changeHandler) method with a key path that refers to the property you want to observe.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがオブザーバを作成する場合、あなたはobserve(_:options:changeHandler)メソッドを、あなたが監視したいプロパティを参照するキーパスとともに呼び出すことによって監視を開始します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you define an enumeration without associated values, it gains Hashable conformance automatically, and you can add Hashable conformance to your other custom types by implementing the hash(into:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが列挙を関連値なしで定義するとき、それはHashable準拠を自動的に手に入れます、そしてあなたはHashable準拠をあなたの他のあつらえの型に加えることが、hash(into:)メソッドを実装することによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you do, all known @objc class methods and properties are available as implicitly unwrapped optional methods and properties, respectively.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそうする場合、全ての既知の@objcクラスのメソッドおよびプロパティは、暗黙的にアンラップされるオプショナルのメソッドおよびプロパティとしてそれぞれが利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you do, use a structure to represent errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそうする場合は、構造体を使ってエラーを表してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you don’t pass a generator, the default SystemRandomNumberGenerator type is used.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが生成子を渡さない場合、省略時のSystemRandomNumberGenerator型が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるコレクションを列挙するとき、各ペアの整数部分は列挙のためのカウンタです、しかし必ずしもペアにされた値のインデックスではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you generate random values, shuffle a collection, or perform another operation that depends on random data, this type is the generator used by default.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが無作為値を生成する、コレクションをシャッフルする、または無作為データに依存する他の操作を実行する場合、この型は省略時に使われる生成子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you have a type instead of an instance, use the MemoryLayout&lt;T&gt;.size static property instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがインスタンスではなくある型を持つ場合、代わりにMemoryLayout&lt;T&gt;.size静的プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you have a type instead of an instance, use the MemoryLayout&lt;T&gt;.stride static property instead.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがインスタンスではなくある型を持つ場合、代わりにMemoryLayout&lt;T&gt;.stride静的プロパティを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you import an Objective-C API into Swift, you can adopt Swift-only types such as tuples.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがObjective-C APIをSwiftへとインポートする場合、あなたはSwift専用の型、例えばタプルなどを採用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you import it, here's the Swift interface:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれをインポートする場合、ここにSwiftインターフェイスがあります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you import the Color structure, the Swift version is equivalent to the following:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがColor構造体をインポートする場合、Swift版は以下に相当します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you import the Core Foundation framework, its types are imported as Swift classes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがCore Foundationフレームワークをインポートする場合、それの型は、Swiftクラスとしてインポートされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you import these declarations into Swift, the NSCopying protocol qualification of the List type and the NSValue class qualification of the listOfValues method are preserved.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがそれら宣言をSwiftへとインポートする場合、NSCopyingプロトコル適格がList型に対して、そしてNSValue適格がlistOfValuesメソッドに対して、保存されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you know how many new values you’re adding to a dictionary, use the init(minimumCapacity:) initializer to allocate the correct amount of buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どのくらい多くの新しい値をあなたが辞書に加えることになるかあなたが知っている場合は、init(minimumCapacity:)イニシャライザを使って正確な量のバッファを割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you match against a range in a case statement, this operator is called behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがcase文内である範囲に対してマッチを行う場合、この演算子が舞台裏で呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you match against an Equatable value in a case statement, this operator is called behind the scenes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがEquatable値に対してcase文でマッチを行うとき、この演算子が舞台裏で呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need a range that includes the last element of a collection, use the half-open range operator (..&lt;) with endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがコレクションの最後の要素を含むある範囲を必要とする時は、半開範囲演算子（..&lt;）をendIndexとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need a range that includes the last element of an array, use the half-open range operator (..&lt;) with endIndex.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが配列の最後の要素を含む範囲を必要とするならば、半開範囲演算子（..&lt;）をendIndexとともに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to access APIs that require data in an NSArray instance instead of Array, use the type-cast operator (as) to bridge your instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NSArrayインスタンスでのデータをArrayの代わりに期待するAPIにあなたがアクセスする必要がある場合、型キャスト演算子（as）を使ってあなたのインスタンスをブリッジしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのコレクションが空かどうか確認する必要がある場合、isEmptyプロパティを使ってください、countプロパティがゼロと等しいのを調べるのではなく。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to create an instance of an option set, assign one of the type’s static members to your variable or constant.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるオプションセットのインスタンスを作成する必要がある場合は、その型のもつ静的メンバの１つをあなたの変数または定数に割り当ててください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to indicate that a value is missing, you use the value nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはその値が見つからないことを指し示す必要がある場合、値nilを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to know the length of a string, you must first consider what you’ll use the length for.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある文字列の長さを知る必要がある場合、あなたが最初に考えなければならないのは、あなたが使う長さは何に対するものかということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to perform an operation on all of an array’s elements, use a for-in loop to iterate through the array’s contents.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがある配列の要素のすべてである演算を実行することを必要とするならば、for-inを使って配列の内容の始めから終わりまで反復適用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to permanently rebind memory to a different type, first obtain a raw pointer to the memory and then call the bindMemory(to:capacity:) method on the raw pointer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが永続的にメモリを異なる型へ再束縛する必要があるならば、まずメモリに対する生のポインタを取得して、それからbindMemory(to:capacity:)メソッドを生のポインタ上で呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need to store a substring or pass it to a function that requires a String instance, you can convert it to a String by using the String(_:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが下位文字列を格納するまたはStringインスタンスを要求する関数にそれを渡す必要がある場合、あなたはそれをStringへとString(_:)イニシャライザを使って変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you only need to temporarily access a pointer’s memory as a different type, use the withMemoryRebound(to:capacity:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがポインタのもつメモリに異なる型として一時的にアクセスする必要があるだけならば、withMemoryRebound(to:capacity:)メソッドを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you pass true as isRepairing, this method replaces ill-formed sequences with the Unicode replacement character ("\u{FFFD}"); otherwise, an ill-formed sequence causes this method to stop decoding and return nil.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがtrueをisRepairingとして渡すとき、このメソッドは誤形式シーケンスをユニコード代替文字（"\u{FFFD}"）で置き換えます；そうでなければ、ある誤形式シーケンスはこのメソッドがエンコードを停止してnilを返すことを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you pass a Swift instance to an Objective-C API, it's bridged as an id parameter so that it's usable in the API as an Objective-C object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSwiftインスタンスをあるObjective-C APIに渡す場合、それはidパラメータとしてブリッジされます、それでそれはそのAPIにおいてObjective-Cオブジェクトとして利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you pass a closure to an API, consider when that closure will be called relative to the other code in your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがクロージャをAPIに渡す場合、クロージャが呼び出されるのはあなたのアプリの他のコードと比較していつかを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you provide just those methods, the standard library provides default implementations for all other arithmetic methods and operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが単にそれらのメソッドだけを提供する場合、標準ライブラリが省略時の実装をすべての他の算術演算メソッドと演算子に提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you receive an unmanaged object from an unannotated API, immediately convert it to a memory-managed object before you work with it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが注釈をつけられないAPIから管理されないオブジェクトを受け取るとき、あなたがそれを扱う前に、直ちにそれをメモリ管理されたオブジェクトに変換してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you update your app's state, there's a single variable, state, to modify, no matter what the transition.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのアプリの持つ状態をあなたが更新する場合、修正するただ１つの変数、stateがあるだけです、推移が何であろうと。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you use AnyObject as a concrete type, you have at your disposal every @objc method and property—that is, methods and properties imported from Objective-C or marked with the @objc attribute.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがAnyObjectを具体的な型として使うとき、すべての@objcメソッドやプロパティ — すなわち、Objective-Cからインポートされるか、@objc属性で印されるメソッドとプロパティ — があなたの自由になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you use Codable as a type or a generic constraint, it matches any type that conforms to both protocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがCodableをある型またはある総称体制約として使う場合、それはプロトコル両方に準拠するあらゆる型に適合します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you use arrays, dictionaries, and other collections, you benefit from the operations that the Collection protocol declares and implements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが配列、辞書、および他のコレクションを使うとき、あなたはCollectionプロトコルが宣言および実装する演算からの恩恵を受けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you use this option, a subclass’s mirror generates default mirrors even for ancestor classes that conform to the CustomReflectable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこのオプションを使う場合、下位クラスの持つミラーは省略時のミラーをCustomReflectableプロトコルに準拠する先祖クラスにさえも生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you use this type, you become partially responsible for keeping the object alive.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがこの型を使う場合、あなたはオブジェクト存続を保っていることに対して部分的に責任を負うようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがComparableプロトコルに準拠しない要素からなるコレクションをソートしたい場合、最初の要素が２番目の前に並べられるべき場合はtrueを返すクロージャをこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがComparableプロトコルに準拠しない要素からなるシーケンスをソートしたい場合、最初の要素が２番目の前に並べられるべき時はtrueを返す述部をこのメソッドに渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you work with objects of type Any where you know the underlying type, it's often useful to downcast those objects to the underlying type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが基盤型を知っているところの型Anyのオブジェクトを扱う場合、しばしば役立つのはそれらオブジェクトを基盤型へとダウンキャストすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you're building an app target, you can import your Swift code into any Objective-C .m file within that same target using this syntax and substituting the appropriate name:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがアプリターゲットをビルドしている場合、あなたはあなたのSwiftコードをインポートすることが、あらゆるObjective-C .mファイルへと、その同じターゲット内で、この構文を使ってそして適切な名前を代わりに使って、行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you're choosing how to model your data, try building the hierarchy of data types using protocol inheritance first, then adopt those protocols in your structures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたのデータをモデル化する方法をあなたが選ぶ時、データ型の階層の構築を最初にプロトコル継承を使って試みてください、それからそれらのプロトコルをあなたの構造体において採用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you're finished using a FileHandle, close it using closeFile().</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがFileHandleの使用を完了した場合、それをcloseFile()を使って閉じてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you’re certain that an instance of Optional contains a value, you can unconditionally unwrap the value by using the forced unwrap operator (postfix !).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがあるOptionalのインスタンスが値を含むことを確信している場合、あなたはその値を無条件にアンラップすることが強制アンラップ演算子（後置!）を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you’re ready to create a new IntPairs instance, use a dictionary literal as the parameter to the IntPairs initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが新しいIntPairsインスタンスを作成する準備ができたら、辞書リテラルをパラメータとしてIntPairsイニシャライザに使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you’ve finished feeding the hasher, the hash value can be retrieved by calling finalize():</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがハーシャーに入力を完了する時、ハッシュ値はfinalize()を呼び出すことで取り出せます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever possible, Swift avoids giving you direct access to pointers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可能なときはいつでも、スウィフトはあなたにポインターへの直接のアクセスを与えることを避けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever possible, Swift’s compiler infers the full intended type of your array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>可能な時はいつでも、Swiftのコンパイラはあなたの配列リテラルの完全な意図される型を推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever you use a for-in loop with an array, set, or any other collection or sequence, you’re using that type’s iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがfor-inループを配列、集合、または何らかの他のコレクションやシーケンスとともに使うときはいつでも、あなたはこの型のイテレータを使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whenever you use multiple iterators (or for-in loops) over a single sequence, be sure you know that the specific sequence supports repeated iteration, either because you know its concrete type or because the sequence is also constrained to the Collection protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが複数のイテレータ（またはfor-inループ）をある単一のシーケンスに対して使うときはいつでも、その特定のシーケンスが繰り返される反復をサポートすると確実にあなたが知っているようにしてください、あなたがそれの具体的な型を知っているからかもしくはそのシーケンスもまたCollectionプロトコルに制約されるからかのどちらかで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Where in some languages you might pass a starting index into an indexOf method to find the second day, in Swift you perform the same operation on a slice of the original array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの言語ではあなたはある開始インデックスをindexOfメソッドに渡して２つ目の日付を見つけるかもしれないところで、Swiftではあなたは同じ演算をオリジナル配列のスライス上で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wherever memory management annotations are provided, Swift automatically manages the memory of Core Foundation objects, including Core Foundation objects that you instantiate yourself.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ管理注釈が提供されるどこででも、あなた自身でインスタンス化するCore Foundationオブジェクトを含めて、スウィフトは自動的にCore Foundationオブジェクトのメモリを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether the Decoder has an entry for the given key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Decoderが与えられたキーに対して登録項目を持つかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether the dictionary should keep its underlying buffer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>辞書がそれの基礎をなすバッファを保つべきかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether the encountered value was null.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>出くわした値がnullだったかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character changes under any form of case conversion.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がケース変換の何らかの形式の下で変化するかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character is ASCII.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が ASCII かどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character is a letter.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がある文字かどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character is considered lowercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がローワーケースと考えられるかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character is considered uppercase.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がアッパーケースと考えられるかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a currency symbol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が通貨記号を表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a hexadecimal digit.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が16進法桁を表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a newline.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がニューラインを表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がある数を表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a symbol</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が記号を表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a symbol used mathematical formulas</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が数学の公式に使われる記号を表すかどうか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents a whole number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character がある整数を表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents punctuation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が句読点を表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether this Character represents whitespace, including newlines.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この Character が空白を、ニューラインを含めて、表すかどうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whether using an option set or creating your own, you use the raw value of an option set instance to store the instance’s bitfield.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるオプションセットを使用するかあなた自身で作成する場合、あなたはオプションセットインスタンスの生の値を使って、そのインスタンスの持つビットフィールドを格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whichever of x or y has greater magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyのどちらがより大きい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whichever of x or y has lesser magnitude, or whichever is a number if the other is NaN.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>xとyのどちらがより小さい規模を持つか、または他方がNaNならば数である方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>外見上は単純である一方、この能力はあなたにたくさんの演算へのアクセスを与え、それはあなたがあらゆるシーケンス上で実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While the system generator is automatically seeded and thread-safe on every platform, the cryptographic quality of the stream of random data produced by the generator may vary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>システム生成子が全てのプラットホーム上で自動的にシードを決められてスレッド安全である一方で、生成子によって生み出される無作為データのストリームの暗号化品質は様々でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With Equatable conformance, you can use the equal-to operator (==) or the not-equal-to operator (!=) with any two instances of the Position type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Equatable準拠で、あなたは同等演算子（==）または不等演算子（!=）をPosition型の任意の２つのインスタンスで使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With a RawRepresentable type, you can switch back and forth between a custom type and an associated RawValue type without losing the value of the original RawRepresentable type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>RawRepresentable型で、あなたはあつらえの型と関連RawValue型との間を行ったり戻ったり切り替えることが元のRawRepresentable型の値の損失なしに可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With either function, you pass the resulting CVaListPointer value as the va_list argument of the C variadic function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>どちらの関数でも、あなたは結果のCVaListPointer値を、C可変長引数関数のva_list引数として渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With pointer p and distance n, the result of p.advanced(by: n) is equivalent to p + n.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ポインタpと隔たりnでは、p.advanced(by: n)の結果はp + nと同等です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With these annotations, Swift imports the MyList type without using any implicitly wrapped optionals:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これら注釈で、SwiftはMyList型を何らかの暗黙的にラップされるオプショナルを使うことなしにインポートします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With those elements defined, the inherited makeIterator() method satisfies the requirements of the Sequence protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>定義されるそれらの要素とともに、継承されるmakeIterator()メソッドがSequenceプロトコルの要件を満たします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a section of code demarcated by the NS_ASSUME_NONNULL_BEGIN and NS_ASSUME_NONNULL_END macros, you only need to annotate the nullable type declarations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>NS_ASSUME_NONNULL_BEGINとNS_ASSUME_NONNULL_ENDマクロによって境界線を引かれるコード区画内で、あなたはヌル可能性宣言に注釈を付ける必要だけがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within the execution of a Swift program, Hasher guarantees that finalizing it will always produce the same hash value as long as it is fed the exact same sequence of bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あるSwiftプログラムの実行の範囲内で、Hasherは、それをファイナライズすることは常に同じハッシュ値を生成することを、それが正確に同じバイト列を供給される限り保証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without a nullability annotation or with a null_resettable annotation—Imported as implicitly unwrapped optionals</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ヌル可能性注釈なしまたはnull_resettable注釈あり — 暗黙的にアンラップされるオプショナルとしてインポートされます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s Element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの他の情報なしでは、Swiftは指定された値を含んでいる配列を、自動的にその配列のElement型を推論して作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work directly with memory-managed Core Foundation types in your Swift code, and manually handle retains as needed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリ管理されたCore Foundation型をあなたのSwiftコードにおいて直接に扱い、そして必要に応じて手動でリテインを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with fixed-width numeric types of different sizes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なるサイズの固定長数値型を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with fixed-width vectors of fixed-width numeric types of different sizes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>異なるサイズの固定幅数値型の固定幅ベクターを扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with prefix, postfix, and infix operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>前置、後置、および中置演算子を扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Work with text using Unicode-safe strings.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコード安全な文字列を使ってテキストを扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Binary Representation</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイナリ表現を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Byte Order</seg>
      </tuv>
      <tuv lang="JA">
        <seg>バイト順を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Core Foundation Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Core Foundation型を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Encodings</seg>
      </tuv>
      <tuv lang="JA">
        <seg>エンコーディングを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Foundation Ranges</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Foundation Rangeを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Foundation Types</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Foundation型を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with Memory Addresses</seg>
      </tuv>
      <tuv lang="JA">
        <seg>メモリアドレスを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with String Views</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列ビューを扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with a Character’s Unicode Values</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字のユニコード値を扱う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wrap each expression in a string interpolation in parentheses, prefixed by a backslash.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>文字列補間の中の式それぞれを丸括弧で包んで、バックスラッシュを前においてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wrappers for Algorithms</seg>
      </tuv>
      <tuv lang="JA">
        <seg>アルゴリズムに対するラッパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writable Key Paths</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込み可能なキーパス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write generic code that works with any collection, or build your own collection types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかのコレクションを使って作業する総括的なコードを記載します、またはあなた独自のコレクション型を組み立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write generic code that works with any numeric type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>何らかの数値型を使って作業する総括的なコードを記載します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes a textual representation of this instance into the given output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>このインスタンスのテキスト表現を与えられた出力ストリームへ書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the character into the given output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>その文字を与えられた出力ストリームへと書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the string into the given output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた出力ストリームへ文字列を書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the textual representation of the Unicode scalar into the given output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ユニコードスカラーのテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the textual representations of the given items into the given output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた要素のテキスト表現を与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the textual representations of the given items into the standard output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた項目のテキスト表現を標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the given output stream.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、与えられた出力ストリームに書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the textual representations of the given items most suitable for debugging into the standard output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>与えられた項目の、デバッグに最も適するテキスト表現を、標準出力に書き出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing Swift code is interactive and fun in Swift Playgrounds, playgrounds in Xcode, and REPL.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Swiftコード記述は、Swift Playgrounds、Xcodeのplaygrounds、およびREPLにおいて対話的で楽しいものとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing code that depends on the completion handler being called is dangerous.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>呼び出される完了ハンドラに頼るコードを書くことは危険です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing is O(1) unless the array’s storage is shared with another array or uses a bridged NSArray instance as its storage, in which case writing is O(n), where n is the length of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込みはO(1)です、配列のストレージが他の配列と共有するかブリッジされたNSArrayインスタンスをそれのストレージとして使うのでない限りは、その場合には書き込みはO(n)です、そこでnは配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing is O(1) unless the array’s storage is shared with another array, in which case writing is O(n), where n is the length of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>書き込みはO(1)です、配列のストレージが他の配列と共有されない限りは、その場合には書き込みはO(n)です、そこでnは配列の長さです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing to a File or URL</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ファイルまたはURLに書き込む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing to a Text Stream</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テキストストリームを書き出す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing to typed memory as raw bytes must only be performed when the bound type is a trivial type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>型付メモリに生のバイトとして書き込むことは、その束縛型が自明型である場合にのみ実行されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode offers to create this header when you add a Swift file to an existing Objective-C app, or an Objective-C file to an existing Swift app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、このヘッダファイルを作成することをあなたがSwiftファイルを既存のObjective-Cアプリに、またはObjective-Cファイルを既存のSwiftアプリに加える場合に提案します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Xcode uses this name when naming the generated header file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>Xcodeは、生成ヘッダファイルに名前を付けるときにこの名前を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You access the number of cases and the cases themselves through CompassDirection.allCases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ケース節の数およびケース節それ自体にアクセスすることがCompassDirection.allCasesを通して可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also use this method to sort elements that conform to the Comparable protocol in descending order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、このメソッドを使ってComparableプロトコルに準拠する要素を降順でソートすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You apply the NS_SWIFT_NAME macro to an individual type, method, or function declaration in Objective-C.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、NS_SWIFT_NAMEマクロを個別の型、メソッド、または関数宣言にObjective-Cにおいて適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are expected to construct and—if necessary—destroy objects there yourself, using the APIs on UnsafeMutablePointer&lt;Element&gt;.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、オブジェクトの組み立てと—必要ならば—破壊をそこであなた自身で、UnsafeMutablePointer&lt;Element&gt;上でAPIを使って行うことを当然期待されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are in charge of managing the allocated memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、アロケートされたメモリの管理を任されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are responsible for handling the life cycle of any memory you work with through unsafe pointers to avoid leaks or undefined behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはリークや未定義挙動を避けるために、あなたが安全でないポインタを通して扱うあらゆるメモリの生涯の処理に責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are responsible for handling the life cycle of any memory you work with through unsafe pointers, to avoid leaks or undefined behavior.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、リークや未定義挙動を避けるために、あなたが安全でないポインタを通して扱うあらゆるメモリの生涯の処理に責任があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You associate the property you want to observe with its observer by passing the object to the initializer of the observer:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたが監視を望むプロパティをそれのオブザーバと、オブジェクトをオブザーバのイニシャライザを渡すことによって結びつけます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access a slice of a collection through its ranged subscript or by calling methods like prefix(while:) or suffix(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのあるスライスにそれの範囲指定された添え字を通して、またはprefix(while:)またはsuffix(_:)のようなメソッドを呼び出すことによってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access a string’s view of UTF-16 code units by using its utf16 property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは文字列の持つビューのUTF-16コード単位にアクセスすることが、それのutf16プロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access a string’s view of UTF-8 code units by using its utf8 property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、文字列のもつUTF-8コード単位ビューにそれのutf8プロパティを使うことによってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access a string’s view of Unicode scalar values by using its unicodeScalars property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは文字列の持つビューのユニコードスカラー値にアクセスすることが、それのunicodeScalarsプロパティを使うことで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access an element of a collection through its subscript by using any valid index except the collection’s endIndex property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、コレクションの要素にそれの添え字を通してアクセスすることが、そのコレクションのendIndexプロパティを除くあらゆる有効なインデックスを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access and use pieces of code written in C and Objective-C from within your Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、CおよびObjective-Cで書かれるコードの断片にアクセスおよび利用することがあなたのSwiftコード内部から可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can access individual array elements through a subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは個々の配列要素に添え字を通してアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add extensions to extensible enumerations later in your Swift code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは拡張をいくつか加えて、Swiftコードにおいて後で列挙を拡張できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can add new elements in the middle of an array by using the insert(_:at:) method for single elements and by using insert(contentsOf:at:) to insert multiple elements from another collection or array literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、新しい要素を配列の中ほどに追加することが、単一の項目にはinsert(_:at:)メソッドを使って、そして別のコレクションや配列リテラルから複数の項目を挿入するにはinsert(contentsOf:at:)を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also bridge some toll-free bridged Core Foundation types to Swift standard library types if you cast to a bridging Foundation type first.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、いくつかのトールフリーブリッジされたCore Foundation型をSwift標準ライブラリ型にブリッジすることが、ブリッジしているFoundation型にあなたが最初にキャストするならば、可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also combine, exclude, or subtract the elements of two sets:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、結合、排他、または差引を行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also create Unicode scalar values directly from their numeric representation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、ユニコードスカラー値を直接にそれらの数値表現から作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also invoke the retain(), release(), and autorelease() methods on unmanaged objects, but this approach is not recommended.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、管理されないオブジェクト上でretain()、release()、そしてautorelease()メソッドを呼び出すことができます、しかしこの取り組みは勧められません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also pass a closure property of a generic type or a generic method as long as no generic type parameters are referenced in the closure’s argument list or body.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、ひとつの総称体型のクロージャプロパティまたは総称体メソッドを渡すことが、いくつかの総称体型パラメータがクロージャの引数リストまたは本文において参照されるのでない限りは可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also perform unconditional optional chaining by using the postfix ! operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、無条件のオプショナル連鎖を実行することが、後置!演算子を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also reorder, combine, and rename parameters so the API matches other Swift APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、パラメータを再配列、結合、そして改名できます、それでそのAPIは他のSwift APIと調和します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also update, modify, or remove keys and values from a dictionary using the key-based subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、辞書のキーと値の更新、修正、または削除をキー基盤の添え字を使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use inout syntax to pass a mutable pointer to the elements of an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、インアウト構文を使って、可変ポインタを配列の要素へ渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use literals to specify values for one or more cases.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、リテラルを使うことで値を１つ以上のケース節に指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use subscript notation to access the value in memory at a specific offset.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、添え字表記法を使ってメモリ中の値に特定のオフセットでアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use the do-catch statement to match on specific Cocoa error codes to differentiate possible failure conditions:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、do-catch文を使って、特定のCocoaエラーコードそれらに関して照合して、可能な失敗状況を区別できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use the CF_IMPLICIT_BRIDGING_ENABLED and CF_IMPLICIT_BRIDGING_DISABLED macros to enclose C function declarations that follow the policy for Core Foundation ownership naming, in order to infer memory management.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、メモリ管理を推論する目的で、CF_IMPLICIT_BRIDGING_ENABLEDおよびCF_IMPLICIT_BRIDGING_DISABLEDマクロを使って、Core Foundation所有者命名の方針に従うC関数宣言を囲むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use this initializer to convert a complex sequence or collection type back to an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまたこのイニシャライザを使って、逆に複雑なシーケンスまたはコレクション型を配列へと変換することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use this operator to compare a non-optional value to an optional that wraps the same type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはまた、この演算子を使って非オプショナル値を、同じ型をラップするオプショナル値と比較することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can annotate declarations in your Objective-C code to indicate whether an instance can have a null or nil value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのObjective-Cコードの中の宣言に注釈をつけることで、あるインスタンスがヌルまたはnil値を持つことが可能かどうかを指し示せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can assign a dictionary literal to a variable or constant or pass it to a function that expects a dictionary.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、辞書リテラルを変数や定数に代入したり、それを辞書を予期する関数に渡したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can bridge between Dictionary and NSDictionary using the as operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、DictionaryとNSDictionaryの間をブリッジすることがas演算子を使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can bridge between Set and NSSet using the as operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはSetとNSSetの間をas演算子を使ってブリッジできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can call any method on the slices that you might have called on the absences array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはどんなメソッドでもそれらスライス上で呼び出すことができます、それはあなたがabsences配列上で呼び出すであろうものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can call both functions the same way: with a trailing closure and no other arguments.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、両方の関数を同じ方法で呼び出せます：後付クロージャとともにそして他の引数なしで。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can call this generic function with an instance of either String or Substring.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、この総称体関数をStringまたはSubstringのどちらのインスタンスでも呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can check the equality of instances of any BinaryInteger types using the equal-to operator (==).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスの同等性を同等演算子（==）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can check the inequality of instances of any BinaryInteger types using the not-equal-to operator (!=).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスの不等性を不等演算子（!=）使って確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can compare instances of an equatable type by using the equal-to (==) and not-equal-to (!=) operators.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、equatable型のインスタンスを比較することが、同等（==）および不等（!=）演算子によって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can compare instances of any BinaryInteger types using the greater-than operator (&gt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより大きい演算子（&gt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can compare instances of any BinaryInteger types using the greater-than-or-equal-to operator (&gt;=), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより大きいか等しい演算子（&gt;=）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can compare instances of any BinaryInteger types using the less-than operator (&lt;), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより小さい演算子（&lt;）を使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can compare instances of any BinaryInteger types using the less-than-or-equal-to operator (&lt;=), even if the two instances are of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのBinaryInteger型のインスタンスをより小さいか等しい演算子（&lt;=）使って比較できます、２つのインスタンスが異なる型であるとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can convert a String.UnicodeScalarView instance back into a string using the String type’s init(_:) initializer.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、String.UnicodeScalarViewインスタンスを逆にひとつの文字列へと変換することが、String型のinit(_:)イニシャライザを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create a Counter instance from an integer value between 1 and 5 by using the init?(rawValue:) initializer declared in the RawRepresentable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはCounterインスタンスを１と５の間の整数値から作成することが、RawRepresentableプロトコルにおいて宣言されるinit?(rawValue:)イニシャライザを使うことによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create a Unicode.Scalar instance by using a string literal that contains a single character representing exactly one Unicode scalar value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Unicode.Scalarインスタンスを、厳密に１つのユニコードスカラー値を表している単一の文字を含んでいる文字列リテラルを使うことによって作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create a mirror for any type using the Mirror(reflecting:) initializer, but if you are not satisfied with the mirror supplied for your type by default, you can make it conform to CustomReflectable and return a custom Mirror instance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、任意の型に対してミラーを作成することがMirror(reflecting:)イニシャライザを使って可能です、しかしあなたの型に対して初期状態で提供されるミラーに満足しないならば、あなたはそれをCustomReflectableに準拠させてあつらえのMirrorを返すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create a set with any element type that conforms to the Hashable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Hashableプロトコルに準拠するあらゆる要素型を使って集合を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create an empty array by specifying the Element type of your array in the declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは空の配列を、あなたの配列のElement型をその宣言において指定することで作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create new instances of a type that conforms to the BinaryInteger protocol from a floating-point number or another binary integer of any type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ある型の新しいインスタンスでBinaryIntegerプロトコルに準拠するものを、浮動小数点数またはどんな型であれ別のバイナリ整数から作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create new strings using string literals or string interpolations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは新しい文字列を、文字列リテラルまたは文字列補間を使って作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can create your own singletons as a way to provide a unified access point to a resource or service that’s shared across an app, like an audio channel to play sound effects or a network manager to make HTTP requests.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、サウンドエフェクトを再生するオーディオチャンネルやHTTPリクエストを行うネットワークマネージャのような、あるアプリ全体で共有されるリソースやサービスへの一本化されたアクセスポイントを提供する方法として、あなた自身のシングルトンを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can decompose the tuple in a for-in loop, which calls makeIterator() behind the scenes, or when calling the iterator’s next() method directly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのタプルを分解することが、makeIterator()を各場面の裏側で呼ぶfor-in ループにおいて、またはイテレータの持つnext()メソッドを直に呼び出すときに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can feed data to the hasher using a series of calls to mutating combine methods.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、データをハーシャーに送り込むのに、一連の変更combineメソッド呼び出しを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can find a complete set of a collection’s valid indices by starting with the collection’s startIndex property and finding every successor up to, and including, the endIndex property.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはコレクションの有効なインデックスの完全な一揃いを見つけることが、そのコレクションのstartIndexプロパティで開始して、すべての後に続くものをendIndexプロパティまで、それを含めて、見つけ出すことによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can improve the architecture, logic, and performance of one of your Objective-C apps by replacing pieces of it in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのObjective-Cアプリのうちの１つのアーキテクチャ、論理、そして性能を、それの幾つかの区画を置き換えることによって改善できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can initialize a variable of any of these types using a string literal that holds a single Unicode scalar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらのいずれかの型の変数を初期化することが、単一のユニコードスカラーを保持する文字列リテラルを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can initialize a variable or constant of any of these types by assigning a floating-point literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらの型どれかの変数または定数を、浮動小数点リテラルを割り当てることによって初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can initialize a variable or constant of any of these types by assigning an integer literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらの型のどれかの変数や定数を初期化することが、整数リテラルを割り当てることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can initialize a variable or constant of any of these types using a string literal that holds a single character.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、これらの型のどれかの変数または定数を、単一の文字を保持する文字列リテラルを使って初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can initialize a variable or constant of either of these types using a string literal of any length.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、それらの型のいずれかの変数や定数を初期化することが随意の長さの文字列リテラルを使って行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can initialize the Countdown sequence with a starting integer and then iterate over the count down to zero.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Countdownシーケンスをある開始点整数で初期化してそれからカウントダウンをゼロまでずっと反復することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can iterate over a dictionary using a for-in loop, decomposing each key-value pair into the elements of a tuple.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは辞書全体にわたって反復適用していくことが、for-inループを使うことで、各キー値ペアをタプルの要素へと分解しながら可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can iterate through a set’s unordered elements with a for-in loop.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、集合の持つ順序付けられない要素を始めから終わりまで反復することがfor-inで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make many custom types equatable and hashable by simply declaring these protocol conformances in the same file as the type's original declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、多くのあつらえの型をequatableおよびhashableにすることが、単にそれらプロトコル準拠をその型の原型の宣言と同じファイルにおいて宣言することによって行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can modify a set in place by using these methods’ mutating counterparts: formUnion(_:), formIntersection(_:), formSymmetricDifference(_:), and subtract(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはある集合をその場で修正することがこれらのメソッドの変更を行う相当物：formUnion(_:)、formIntersection(_:)、formSymmetricDifference(_:)、そしてsubtract(_:)を使うことで可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can only use key-value observing with classes that inherit from NSObject.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはキー値監視を、NSObjectから継承するクラスでのみ使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override any of the protocol’s required methods to provide your own custom implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、何らかのこのプロトコルの持つ必須メソッドをオーバーライドして、あなた独自のあつらえの実装を提供することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can pass only valid indices to collection operations.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは有効なインデックスだけをコレクション演算子に渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can pass zero or more items to the debugPrint(_:separator:terminator:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ゼロ個以上の項目をdebugPrint(_:separator:terminator:)関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can pass zero or more items to the debugPrint(_:separator:terminator:to:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ゼロ個以上の項目をdebugPrint(_:separator:terminator:to:)関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can pass zero or more items to the print(_:separator:terminator:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ゼロ個以上の項目をprint(_:separator:terminator:)関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can pass zero or more items to the print(_:separator:terminator:to:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ゼロ個以上の項目をprint(_:separator:terminator:to:)関数に渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can perform many string operations on a substring.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、多くの文字列演算を買い文字列上で行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can rely on automatic synthesis of the Equatable protocol’s requirements for a custom type when you declare Equatable conformance in the type’s original declaration and your type meets these criteria:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはEquatableプロトコルの要件の自動合成をあつらえの型のために当てにすることが、あなたがEquatable準拠をその型の元々の宣言において宣言してあなたの型がそれらの基準に沿う場合に可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can replace an existing element with a new value by assigning the new value to the subscript.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、既存の要素を新しい値で置き換えることが、新しい値をその添え字に代入することで行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、同じスライスを文字列の範囲指定された添え字を使って取って来ることができます、それは範囲式をとっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can reverse a collection without allocating new space for its elements by calling this reversed() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションを逆順にすることがそれの要素に対して新しい空間を割り当てることなくreversed()メソッドによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can search a dictionary’s contents for a particular value using the contains(where:) or firstIndex(where:) methods supplied by default implementation.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ある特定の値を求めて辞書の持つ内容を検索することが、省略時の実装で提供されるcontains(where:)またはfirstIndex(where:)メソッドを使って可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can send the output of the standard library’s print(_:to:) and dump(_:to:) functions to an instance of a type that conforms to the TextOutputStream protocol instead of to standard output.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、標準ライブラリのprint(_:to:)およびdump(_:to:)関数の出力をTextOutputStreamプロトコルに準拠する型のインスタンスに送ることが、標準出力に送る代わりに行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can set up your Swift class to integrate Objective-C behavior by subclassing Objective-C classes, adopting Objective-C protocols, and more.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのスウィフトクラスをObjective-Cクラスのサブクラスにすること、Objective-Cプロトコルを採用すること、そしてもっと多くのことによって、Objective-C挙動に溶け込むように準備することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can simplify the process of annotating your Objective-C code by marking entire regions as audited for nullability.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのObjective-Cコードに注釈を付ける行程を領域全体をヌル可能性について監査されると印することによって簡素化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can sort any mutable collection of elements that conform to the Comparable protocol by calling this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはComparableプロトコルに準拠する要素からなるあらゆる可変の配列をこのメソッドを呼び出すことによってソートできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can sort any sequence of elements that conform to the Comparable protocol by calling this method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはいくらかの要素からなる何らかのシーケンスでComparableプロトコルに準拠するものをこのメソッドを呼び出すことによってソートする（並び替える）ことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのようなインデックスを変数に格納して、それらを幾つかあるコレクションアルゴリズムに渡すことや、相当する要素にアクセスするためにそれらを後で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can store mixed-type keys in dictionaries and other collections that require Hashable conformance by wrapping mixed-type keys in AnyHashable instances:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは混成型のキーを様々な辞書や他のコレクションに格納できます、それらは混成型キーをAnyHashableインスタンスの中へのラップするHashable準拠を必要とします：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can subscript a collection with any valid index other than the collection’s end index.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、そのコレクションの末尾インデックスの以外のあらゆる有効なインデックスで、コレクションに対して添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can subscript an array with any integer from zero up to, but not including, the count of the array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ゼロから配列の総数まで、しかしそれを含めず、任意の整数で添え字を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can take advantage of this compiler support when defining your own custom enumeration by declaring conformance to CaseIterable in the enumeration’s original declaration.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのコンパイラサポートを、あなた独自のあつらえの列挙をCaseIterableへの準拠をその列挙の元の宣言において宣言することによって定義する場合に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think of additional cases you might add later</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが後で加えるかもしれない追加のケース節を考える可能性があるならば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use AnyIterator to hide the type signature of a more complex iterator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはAnyIteratorを使って、あるより複雑なイテレータの型シグネチャを隠すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use MemoryLayout as a source of information about a type when allocating or binding memory using raw pointers.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、MemoryLayoutをある型についての情報源として使うことが、生のポインタを使ってメモリをアロケートまたはバインドする時に可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use numericCast(_:) to convert a value when the destination type can be inferred from the context.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、numericCast(_:)を使うことで、行き先の型が前後関係から推論される場合にはある値を変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use popLast() to remove the last element of a collection that might be empty.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはpopLast()を使って、空であるかもしれないコレクションの最後の要素を削除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use stride(from:through:by:) to create a sequence that strides upward or downward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、stride(from:through:by:)を使って上向きまたは下向きにまたいで越えるシーケンスを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use stride(from:to:by:) to create a sequence that strides upward or downward.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、stride(from:to:by:)を使って上向きまたは下向きにまたいで越えるシーケンスを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use == to check for equality between any two instances or call the Equatable-constrained contains(_:) method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは==を使って何でも２つのインスタンス間の同等性を調べたり、Equatable制約のcontains(_:)メソッドを呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use Objective-C and Swift files together in a single project, no matter which language the project used originally.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはObjective-CおよびSwiftファイルを一緒にしてある単一のプロジェクトの中で使うことができます、どちらの言語をそのプロジェクトが最初に使用しようとも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a CollectionOfOne instance when you need to efficiently represent a single value as a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、CollectionOfOneインスタンスを、あなたが単一の値をコレクションとして効率的に表す必要がある場合に使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a PartialRangeThrough instance of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのインデックスからなる、PartialRangeThroughインスタンスを使うことで、コレクションの始まりからこの部分範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a PartialRangeThrough instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはPartialRangeThroughインスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a PartialRangeUpTo instance of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのインデックスからなる、PartialRangeUpToインスタンスを使うことで、コレクションの始まりからこの部分範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a PartialRangeUpTo instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはPartialRangeUpToインスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a Range instance to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはRangeインスタンスを使うことで、ある値が特定の範囲に属するいくつかの値の中に含まれているかどうか素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのもつインデックスからなる部分範囲を使うことで、その部分範囲の下側の境界からそのコレクションの終わりまでの範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a partial range to quickly check if a value is contained in a particular range of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、部分範囲を使って、ある値がいくつの値からなる部分範囲に含まれるかどうかを素早く調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a slice’s base property to access its base collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはスライスのもつbaseプロパティを使って、それの基盤コレクションにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a type that conforms to the Strideable protocol with the stride(from:to:by:) and stride(from:through:by:) functions.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Strideableプロトコルに準拠する型をstride(from:to:by:)およびstride(from:through:by:)関数で使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an UnsafeBufferPointer instance in low level operations to eliminate uniqueness checks and, in release mode, bounds checks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeBufferPointerインスタンスを低レベル演算において使うことで、特有性検査をそして、リリースモードでは、境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an UnsafeMutableBufferPointer instance in low level operations to eliminate uniqueness checks and, in release mode, bounds checks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeMutableBufferPointerインスタンスを低レベル演算において使うことで、特有性検査をそして、リリースモードでは、境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an UnsafeMutableRawBufferPointer instance in low-level operations to eliminate uniqueness checks and release mode bounds checks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeMutableRawBufferPointerインスタンスを低水準演算において使用することで、固有性検査とリリースモード境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an UnsafeRawBufferPointer instance in low-level operations to eliminate uniqueness checks and release mode bounds checks.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeRawBufferPointerインスタンスを低水準演算において使用することで、固有性検査とリリースモード境界検査を省くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an array literal anywhere a set is expected by the type context.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、型コンテキストによって集合が予期される何処ででも配列リテラルを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an array literal anywhere an instance of an ExpressibleByArrayLiteral type is expected: as a value assigned to a variable or constant, as a parameter to a method or initializer, or even as the subject of a nonmutating operation like map(_:) or filter(_:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは配列リテラルをExpressibleByArrayLiteral型が予期されるところはどこででも使うことができます：変数や定数に割り当てられる値として、メソッドやイニシャライザへのパラメータとして、またはmap(_:)やfilter(_:)のような非変更の操作のサブジェクトとしてさえも。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an enumeration to specify the exact states needed for your app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは列挙を使って、あなたのアプリに必要とされる正確な状態を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use any type that conforms to the Hashable protocol in a set or as a dictionary key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはHashableプロトコルに準拠するあらゆる型を集合においてまたは辞書キーとして使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use methods like initialize(to:count:), initialize(from:count:), and moveInitialize(from:count:) to initialize the memory referenced by a pointer with a value or series of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、initialize(to:count:)、initialize(from:count:)、そしてmoveInitialize(from:count:)のようなメソッドを使うことで、ポインタによって参照されるメモリをある値または一連の値で初期化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use methods like initializeMemory(as:from:) and moveInitializeMemory(as:from:count:) to bind raw memory to a type and initialize it with a value or series of values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、initializeMemory(as:from:)とmoveInitializeMemory(as:from:count:)のようなメソッドを使うことで、生のメモリをある型に束縛して、それをある値または一連の値で初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use nullability annotations in your Objective-C code to designate whether a parameter type, property type, or return type is nullable.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ヌル可能性注釈をあなたのObjective-Cコードにおいて使用して、パラメータ型、プロパティ型、または戻り値がヌル可能性であるかどうかを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use optional chaining to call the @objc method getIntegerValue() on obj safely.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、オプショナル連鎖を使って、@objcメソッドgetIntegerValue()をobj上で安全に呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use relational operators, such as the less-than and equal-to operators (&lt; and ==), to compare instances of different binary integer types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、関係演算子、例えばより小さいそして同等演算子（&lt;そして==）などを使って、異なるバイナリ整数型のインスタンス同士を比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use special versions of some sequence and collection operations when working with a Comparable type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、特別版のなんらかのシーケンスやコレクション演算をあるComparable型を扱うときに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the AnyClass protocol as the concrete type for an instance of any class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはAnyClassプロトコルをあらゆるクラスのインスタンスに対して具象型として使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the relative(to:) method to convert a range expression, which could be missing one or both of its endpoints, into a concrete range that is bounded on both sides.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、relative(to:)メソッドを使うことによって、それの端点の両方または１つを抜かすことができる範囲式を、両方の側で閉ざされた具体的な範囲へと変換できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the type(of:) function to find the dynamic type of a value, particularly when the dynamic type is different from the static type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、type(of:)を使うことである値の動的型を見つけることができます、とりわけ動的型が静的型と異なる場合に。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the magnitude property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、magnitudeプロパティを、ずっと単純に符号なしの値に関して実装する演算において使用できます、例えば整数の値を印字することなど、それはちょっと「-」文字を絶対値の前に印字しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the conditional type cast operator (as?), which returns an optional value of the type you are trying to downcast to:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、条件付き型キャスト演算子（as?）を使うことができます、それはあなたがそれへとダウンキャストを試みる型のオプショナル値を返します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the equal-to operator (==) to compare any two arrays that store the same, Equatable-conforming element type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、同等演算子（==）を使って同じ、Equatable準拠の、要素型を格納する任意の２つの配列を比較できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは述部を使って、Equatableプロトコルに準拠しない型、例えばこの例でのHTTPResponse列挙などの要素に対して調べることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは述部を使って、Equatableプロトコルに準拠しない型の要素を見つける、または特定の基準に合致する要素を見つけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the same indices for subscripting a string and its substring.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、文字列とそれの下位文字列での添え字の使用に対して同じインデックスを使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the same or a different name than your Objective-C class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのObjective-Cクラスと同じまたは異なる名前を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the unary plus operator (+) to provide symmetry in your code for positive numbers when also using the unary minus operator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、単行プラス演算子（+）を使うことで、均整美をあなたのコードにおいて正の数に対して単行マイナス演算子もまた使う場合に提供できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the unbounded range operator (...) to create a slice of a collection that contains all of the collection’s elements.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、無境界範囲演算子（...）を使って、あるコレクションのスライスでそのコレクションのもつ要素すべてを含んでいるものを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this function to call an API that takes an escaping closure in a way that doesn’t allow the closure to escape in practice.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこの関数を使うことで、クロージャが脱出するのを実際には許可されないある方法において脱出するクロージャをとるAPIを呼び出せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this function to stride over values of any type that conforms to the Strideable protocol, such as integers or floating-point types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、この関数を使ってStrideableプロトコルに準拠する任意の型、例えば整数や浮動小数点型の値いくつかをまたいで越すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this initializer to create a new string from a slice of another string’s unicodeScalars view.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このイニシャライザを使って新しい文字列を別の文字列のもつunicodeScalarsビューのスライスから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this initializer to create a new string from the result of one or more collection operations on a string’s characters.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このイニシャライザを使って新しい文字列を、ある文字列のもつ幾らかの文字上での１つ以上のコレクション演算の結果から作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this initializer to create an array from any other type that conforms to the Sequence protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのイニシャライザを使って、Sequenceプロトコルに準拠する何か他の型から配列を作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to count the number of elements that pass a test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使って、あるテストに合格する要素の数を数えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to create new values from the buffer pointer’s underlying bytes.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このメソッドを使って新しい値をパッファポインタのもつ基盤バイトから作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this method to find the distance in bytes that can be added to a pointer of type T to get a pointer to the property referenced by key.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使ってバイトでの隔たりを見つけることができます、それは型Tのポインタに加えることで、keyによって参照されるプロパティへのポインタを得ることができるものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this pattern matching operator (~=) to test whether a value is included in a range.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このパターンマッチング演算子（~=）を使うことで、ある値がある範囲に含まれるかどうか検査できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、その部分的な範囲の下側の境界からそのコレクションの終わりまでの範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、そしてそれを含んでいる範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あるコレクションのインデックスからなる、この型の部分的範囲を使うことで、コレクションの始まりからその部分的な範囲の上側の境界までの、しかしそれを含んでいない範囲を表すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use your own custom types as dictionary keys by making them conform to the Hashable protocol.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなた独自のあつらえの型を辞書のキーとして使うことがそれらをHashableプロトコルに準拠させることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can work with types declared in Swift from within the Objective-C code in your project by importing an Xcode-generated header file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Swiftにおいて宣言される型をあなたのプロジェクトの中のObjective-Cコード内から扱うことが、Xcode生成のヘッダファイルをインポートすることによって可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can write generic methods that operate on any numeric type in the standard library by using the Numeric protocol as a generic constraint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Numericプロトコルを総称体制約として使うことで、標準ライブラリのあらゆる数値型上で作用する総称体メソッドを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can write generic methods that operate on any numeric type in the standard library by using the AdditiveArithmetic protocol as a generic constraint.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、AdditiveArithmeticプロトコルを総称体制約として使うことで、標準ライブラリのあらゆる数値型上で作用する総称体メソッドを書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can't reorder or change the number of arguments for type members imported using the CF_SWIFT_NAME macro.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、CF_SWIFT_NAMEマクロを使ってインポートされる型メンバーに対する引数の数を再配列または変更できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot use * with arguments of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、*をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot use + with arguments of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、+をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot use - with arguments of different types.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、-をそれぞれが異なる型である引数で使うことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、breakまたはcontinue文を使って、bodyクロージャの現在の呼び出しを抜け出したり、または続いて起こる呼び出しを飛ばしたりできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can’t initialize a type that conforms to ExpressibleByArrayLiteral simply by assigning an existing array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、既存の配列を割り当てることでExpressibleByArrayLiteralに準拠する型を初期化することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can’t initialize a type that conforms to ExpressibleByDictionaryLiteral simply by assigning an instance of Dictionary, KeyValuePairs, or similar.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ExpressibleByDictionaryLiteralに準拠する型を単純にDictionary、KeyValuePairs、または似たものを割り当てることによって初期化できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You choose which method to use based on whether the API you are invoking returns an unretained or a retained object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはどちらかのメソッドを、あなたが呼んでいるAPIが、リテイン（保有）されないまたはリテインされるオブジェクトを返すのかに基づき選択して使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create PartialRangeFrom instances by using the postfix range operator (postfix ...).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、PartialRangeFromインスタンスを後置範囲演算子（...）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create PartialRangeThrough instances by using the prefix closed range operator (prefix ...).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、PartialRangeThroughインスタンスを後置範囲演算子（...）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create PartialRangeUpTo instances by using the prefix half-open range operator (prefix ..&lt;).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、PartialRangeUpToインスタンスを後置範囲演算子（..&lt;）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create a ClosedRange instance by using the closed range operator (...).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ClosedRangeインスタンスを完結範囲演算子（...）を使って作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create a Range instance by using the half-open range operator (..&lt;).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Rangeインスタンスを、半開範囲演算子（..&lt;）を使うことで作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create an instance of the Repeated collection by calling the repeatElement(_:count:) function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、RepeatedコレクションのインスタンスをrepeatElement(_:count:)関数を呼び出すことによって作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create simple singletons using a static type property, which is guaranteed to be lazily initialized only once, even when accessed across multiple threads simultaneously:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは単純なシングルトンをstatic型プロパティを使って作成できます、それはただ一度だけ遅延初期化されることを保証されます、たとえ複数のスレッドから同時にアクセスされる場合でさえもです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don't need to rewrite your entire app in Swift at once.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたのアプリ全体を一度にSwiftに書き直す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You don’t need to do anything special to create the generated header—just import it to use its contents in your Objective-C code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、生成ヘッダを作成するために特に何もする必要はありません ― あなたは、ただ単にそれをインポートしてそれの内容をあなたのObjective-Cコードにおいて使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You initialize a KeyValuePairs instance using a Swift dictionary literal.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、KeyValuePairsインスタンスをSwift辞書リテラルを使って初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You make part of an API unavailable in Swift as part of introducing new Swift APIs that supercede parts of the existing Objective-C API.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Swiftで利用可能でないAPIの部分を、既存のObjective-C APIの部分に取って代わる新しいSwift APIを導入する部分とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might encounter Objective-C code that uses the older NS_STRING_ENUM and NS_EXTENSIBLE_STRING_ENUM macros, which were used to group string constants.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、より古いNS_STRING_ENUMおよびNS_EXTENSIBLE_STRING_ENUMマクロを使うObjective-Cコードに直面するかもしれません、それは文字列定数をグループにするために使われました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might not anticipate the consequences of changing a heavily shared instance, so it's more work to write such code correctly.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、重く共有されるインスタンスの変更の帰着を見越して備えられないかもしれません、それでそのようなコードを正しく書くためにさらに仕事が増えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must not call this method if any other copy of this iterator has been advanced with a call to its next() method.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このイテレータの何か他のコピーがそれのnext()メソッドを呼び出すことで前に進められるならば、このメソッドを呼び出す必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must unwrap the value of an Optional instance before you can use it in many contexts.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あなたがそれを多くの文脈において使う前に、Optionalインスタンスの値をアンラップしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must use only one kind of top-level encoding container.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ある種のトップレベルのエンコーディングコンテナのみを使う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to know how each function calls its closure if you write code that relies on a specific execution order.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、各関数がそれのクロージャを呼び出す方法を知る必要があります、もしあなたがある明確な実行順序を当てにするコードを書くならば。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You need to manually implement Equatable and Hashable conformance for a type in these cases:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、手動でEquatableとHashable準拠をある型に対して実装する必要がこれらの場合には必要です：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You rarely need to use iterators directly, because a for-in loop is the more idiomatic approach to traversing a sequence in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは滅多にイテレータを直に使う必要はありません、なぜならfor-inループはSwiftにおいてシーケンスを辿っていくずっと慣用語法にかなった取り組みだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You reuse an API by using its new name to call it in the implementation of a new API in Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはあるAPIを、それの新しい名前を使ってそれをSwiftでの新しいAPIの実装において呼び出すことによって再利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should prefer withVaList(_:_:) instead of this function.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこの関数よりもwithVaList(_:_:)を選ぶべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You throw Cocoa errors by initializing a Cocoa error type and passing in the relevant error domain and code:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Cocoaエラーのスローを、あるCocoaエラー型を初期化して、関連エラー領域およびコードを渡すことによって行います：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use AnyObject when you need the flexibility of an untyped object or when you use bridged Objective-C methods and properties that return an untyped result.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが型付けされないオブジェクトの柔軟性を必要とするとき、または型付けされない結果を返すブリッジされたObjective-Cメソッドやプロパティを使用するとき、あなたはAnyObjectを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use self in a CF_SWIFT_NAME argument to refer to the instance that the method belongs to.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、selfをCF_SWIFT_NAME引数において使って、メソッドが属するインスタンスを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use Swift's throw statement and do-catch statement to throw and catch errors from Cocoa APIs.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、Swiftの持つthrow文とdo-catch文を使って、Cocoa APIからのエラーをスローおよびキャッチします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use a set instead of an array when you need to test efficiently for membership and you aren’t concerned with the order of the elements in the collection, or when you need to ensure that each element appears only once in a collection.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが集合を配列の代わりに使うのは、あなたが帰属について能率的にテストする必要がありそしてあなたがコレクションの要素の順番に関心がない場合、または各要素がただ一度だけコレクション中に現れることをあなたが確実にする必要がある場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use arrays to organize your app’s data.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは配列を使ってあなたのアプリのデータを整理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use complex macros in C and Objective-C to avoid type-checking constraints or to avoid retyping large amounts of boilerplate code.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、複雑なマクロをCとObjective-Cにおいて型チェック制約を避けたり、常用文コードの大きな塊を繰り返しタイピングすることを避けるために使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use custom error domains in Cocoa to group related categories of errors.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、あつらえのエラー領域をCocoaにおいて使用して、関連するエラーのカテゴリをグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use delegates to interact with Cocoa objects that inform you of events in an app.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは委任先を使って、あるアプリの中のイベントについてあなたに告知するCocoaオブジェクトと相互作用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use instances of the UnsafeMutablePointer type to access data of a specific type in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeMutablePointer型のインスタンスを使うことで、メモリにおいて特定の型のデータにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use instances of the UnsafePointer type to access data of a specific type in memory.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafePointer型のインスタンスを使うことで、メモリにおいて特定の型のデータにアクセスします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use one of the following macros to declare that several Objective-C constants are related to each other:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、以下のマクロの１つを使って、いくつかのObjective-C定数が互いに関連することを宣言します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use singletons to provide a globally accessible, shared instance of a class.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはシングルトンを使って、グローバルにアクセス可能な、あるクラスの共有インスタンスを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use that key to retrieve the corresponding value, which can be any object.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのキーを使ってその対応している値を取り出すことができ、その値はあらゆるオブジェクトであることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the #keyPath string expression to create compiler-checked keys and key paths that can be used by KVC methods like value(forKey:) and value(forKeyPath:).</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、#keyPath文字列式を使って、コンパイラチェック済みのキーおよびキーパスを作成します、それはKVCメソッドvalue(forKey:)やvalue(forKeyPath:)によって使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the CF_SWIFT_NAME macro to group together related global functions into a single structure type that's imported into Swift.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、CF_SWIFT_NAMEマクロを使って、関連するグローバル関数を一緒にして、Swiftにインポートされるある単一の構造体型へとグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the NS_OPTIONS macro when two or more constants in a grouping of constants can be combined.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、NS_OPTIONSマクロを、ある定数グループの中の２つ以上の定数が結合可能である場合に使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the NS_SWIFT_NAME macro as a prefix for classes and protocols.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、NS_SWIFT_NAMEマクロをクラスとプロパティのための接頭辞として使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the NS_SWIFT_NOTHROW macro on Objective-C method declarations that produce an NSError to prevent it from being imported by Swift as a method that throws.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはNS_SWIFT_NOTHROWマクロを、NSErrorを生成するObjective-Cメソッド宣言上で使って、それがスローするメソッドとしてSwiftによってインポートされるのを防止します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the NS_TYPED_ENUM to group constants with a raw value type that you specify.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、NS_TYPED_ENUMを使って、あなたが指定する生の値型を持つ定数をグループにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the OptionSet protocol to represent bitset types, where individual bits represent members of a set.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、OptionSetプロトコルを使ってビットセット型を表すことができます、そこにおいて個々のビットはセットのメンバを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the Optional type whenever you use optional values, even if you never type the word Optional.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはOptional型を、あなたがオプショナル値を使う時はいつでも使います、たとえあなたが単語Optionalを決してタイプしないとしてもです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the oldValue and newValue properties of the NSKeyValueObservedChange instance to see what's changed about the property you're observing.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、NSKeyValueObservedChangeインスタンスのoldValueとnewValueプロパティを使って、あなたが監視しているプロパティについて変更されるのが何か見ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the UnsafeMutablePointer type to access and manage memory that has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeMutablePointer型を使うことで、特定の型に束縛されているメモリへのアクセスおよび管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the UnsafeMutableRawPointer type to access and manage raw bytes in memory, whether or not that memory has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeMutableRawPointer型を使ってメモリ中の生のバイトにアクセスおよび管理を、そのメモリが特定の型に束縛されているかどうかにかかわらず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the UnsafePointer type to access and manage memory that has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafePointer型を使うことで、特定の型に束縛されているメモリへのアクセスおよび管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the UnsafeRawPointer type to access and manage raw bytes in memory, whether or not that memory has been bound to a specific type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、UnsafeRawPointer型を使ってメモリ中の生のバイトにアクセスおよび管理を、そのメモリが特定の型に束縛されているかどうかにかかわらず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use the default init(_:) initializer to create a new instance when you’re sure that the value passed is representable in the new type.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、省略時のinit(_:)イニシャライザを使って新しいインスタンスを作成するのは、渡される値が新しい型において表現可能であるとあなたが確信する場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this initializer from within your type’s customMirror implementation to create a customized mirror, particularly for custom types that are collections.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このイニシャライザをあなたの型の持つcustomMirror実装内部から使うことで、あつらえのミラーを作成できます、とりわけコレクションであるあつらえの型に対して。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this initializer from within your type’s customMirror implementation to create a customized mirror.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このイニシャライザをあなたの型の持つcustomMirror実装内部から使うことで、あつらえのミラーを作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this initializer to create a dictionary when you have a sequence of key-value tuples that might have duplicate keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、重複キーを持つかもしれないキー値タプルのシーケンスをあなたが持つ場合、このイニシャライザを使って辞書を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this initializer to create a dictionary when you have a sequence of key-value tuples with unique keys.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>特有なキーをもつキー値タプルのシーケンスをあなたが持つ場合、あなたはこのイニシャライザを使って辞書を作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this method to randomize the elements of a collection when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるコレクションの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this method to randomize the elements of a sequence when you are using a custom random number generator.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこのメソッドを使って、あなたがあつらえの無作為数生成子を使っている場合に、あるシーケンスの要素を無作為化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use this protocol to present a native Swift interface to a C “varargs” API.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、このプロトコルを使ってSwift固有のインターフェースをC「varags」APIに贈呈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use types that conform to the SetAlgebra protocol when you need efficient membership tests or mathematical set operations such as intersection, union, and subtraction.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがSetAlgebraプロトコルに準拠する型を使うのは、あなたが帰属について能率的にテストするか、数学的集合演算たとえば交叉、合併、そして差分を必要とする場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want to compare the absences in the first half of the session with those in the second half.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、前学期の欠席者を後半のそれと比較したいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want to customize the type's conformance.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたがその型の持つ準拠をカスタマイズしたい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You want to extend a type declared in another file or module to conform.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが別のファイルまたはモジュールにおいて宣言される型を拡張することで準拠したい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You won’t create a header file; Xcode generates a header automatically in case you need to reference it.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはヘッダ・ファイルを作成しません；あなたがそれに参照をつける必要がある場合に備えて、Xcodeが自動的にヘッダを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You write each key-value pair with a colon (:) separating the key and the value.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、各キー値ペアをコロン（:）で区切るキーと値で書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll need to consider this kind of time-based execution problem frequently when using APIs that take closures.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、クロージャを取るAPIを使う場合に、この種の時間基盤の実行問題をしばしば考える必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You've ever added cases to an enumeration after its initial declaration</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたが決してケース節を、ある列挙に対してそれの最初の宣言の後に加えないならば</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your own custom types can be hashable as well.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなた独自のあつらえの型も同様にハッシュ化されることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’d like to create a set of the grid points where a user has already tapped.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、ユーザがすでにタップしたところの格子点ひとそろいを作成したいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’ll replace the .m and .h files for that class with a single .swift file.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたは、そのクラスのための.mと.hファイルを単一の.swiftファイルで置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You’re tasked with finding the day with the most absences in the second half of the session.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>あなたはこの学期の後半において最も多く欠席者がいる日付を見つける任務を負います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero is neither a normal nor a subnormal number.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロは、ノーマルでもサブノーマル数でもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero is the identity element for addition; for any value, x + .zero == x and .zero + x == x.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロは加算に対する単位元です；あらゆる値に対して、x + .zero == xかつ.zero + x == x。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero or more additional values.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>ゼロ以上の追加の値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero or more items to print.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>出力するゼロ個以上の項目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[We don’t recommend that you use map this way, because it creates and discards an array.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>［私たちは、あなたがmapをこのやり方で使うのを推奨しません、なぜならそれは１つの配列を作成し破棄するからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_TtCs11_AnyKeyPath is the mangled name for Swift._AnyKeyPath.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>_TtCs11_AnyKeyPath は、Swift._AnyKeyPath をめちゃめちゃにした名前です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an UnsafeMutablePointer&lt;Pointee&gt;, which is passed as-is.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>UnsafeMutablePointer&lt;Pointee&gt;、それは現品で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>an inout argument of the referenced type, which gets passed as a pointer to a writeback temporary with autoreleasing ownership semantics,</seg>
      </tuv>
      <tuv lang="JA">
        <seg>参照される型のインアウト引数、それはオートリリース所有権意味論を持つライトバックテンポラリへのポインタとして渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and finally, we can give all lazy sequences a lazy scan method:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>そして最終的に、私たちは全ての遅延シーケンスを遅延scanメソッドに渡すことができます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if this set and other contain elements that are equal but distinguishable (e.g. via ===), which of these elements is present in the result is unspecified.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>この集合とotherが等しいけれども区別可能な要素を含むならば（たとえば===によって）、それらの要素のどれが結果の存在するのかは不特定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is a sequence containing { 2, 4, 6 }.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>これは、{ 2, 4, 6 }を含んでいるシーケンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>param container: The container in which the corrupted data was accessed.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>param container: そこで破壊されたデータがアクセスされたところのコンテナ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>param debugDescription: A description of the error to aid in debugging.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>param debugDescription: デバッグにおいて支援する目的のエラー解説。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>param key: The key which caused the failure.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>param key: 失敗を引き起こしたキー。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the value to test.</seg>
      </tuv>
      <tuv lang="JA">
        <seg>テストする値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we can build a sequence that lazily computes the elements in the result of scan:</seg>
      </tuv>
      <tuv lang="JA">
        <seg>私たちは、scanの結果の中の要素を遅延に計算するシーケンスを組み立てることができます：</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
